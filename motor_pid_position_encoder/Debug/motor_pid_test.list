
motor_pid_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb54  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  0800bd08  0800bd08  0001bd08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0c4  0800c0c4  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c0c4  0800c0c4  0001c0c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c0cc  0800c0cc  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c0cc  0800c0cc  0001c0cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c0d0  0800c0d0  0001c0d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800c0d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          00000e60  200001d8  200001d8  000201d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20001038  20001038  000201d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   00018eb9  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002cd4  00000000  00000000  00039100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001448  00000000  00000000  0003bdd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001340  00000000  00000000  0003d220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002768f  00000000  00000000  0003e560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000170a8  00000000  00000000  00065bef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f1e0f  00000000  00000000  0007cc97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000698c  00000000  00000000  0016eaa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800bcec 	.word	0x0800bcec

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	0800bcec 	.word	0x0800bcec

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b970 	b.w	8000fa0 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	460d      	mov	r5, r1
 8000ce0:	4604      	mov	r4, r0
 8000ce2:	460f      	mov	r7, r1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d14a      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce8:	428a      	cmp	r2, r1
 8000cea:	4694      	mov	ip, r2
 8000cec:	d965      	bls.n	8000dba <__udivmoddi4+0xe2>
 8000cee:	fab2 f382 	clz	r3, r2
 8000cf2:	b143      	cbz	r3, 8000d06 <__udivmoddi4+0x2e>
 8000cf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cf8:	f1c3 0220 	rsb	r2, r3, #32
 8000cfc:	409f      	lsls	r7, r3
 8000cfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000d02:	4317      	orrs	r7, r2
 8000d04:	409c      	lsls	r4, r3
 8000d06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d0a:	fa1f f58c 	uxth.w	r5, ip
 8000d0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d12:	0c22      	lsrs	r2, r4, #16
 8000d14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d1c:	fb01 f005 	mul.w	r0, r1, r5
 8000d20:	4290      	cmp	r0, r2
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x62>
 8000d24:	eb1c 0202 	adds.w	r2, ip, r2
 8000d28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d2c:	f080 811c 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d30:	4290      	cmp	r0, r2
 8000d32:	f240 8119 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d36:	3902      	subs	r1, #2
 8000d38:	4462      	add	r2, ip
 8000d3a:	1a12      	subs	r2, r2, r0
 8000d3c:	b2a4      	uxth	r4, r4
 8000d3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4a:	fb00 f505 	mul.w	r5, r0, r5
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	d90a      	bls.n	8000d68 <__udivmoddi4+0x90>
 8000d52:	eb1c 0404 	adds.w	r4, ip, r4
 8000d56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d5a:	f080 8107 	bcs.w	8000f6c <__udivmoddi4+0x294>
 8000d5e:	42a5      	cmp	r5, r4
 8000d60:	f240 8104 	bls.w	8000f6c <__udivmoddi4+0x294>
 8000d64:	4464      	add	r4, ip
 8000d66:	3802      	subs	r0, #2
 8000d68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d6c:	1b64      	subs	r4, r4, r5
 8000d6e:	2100      	movs	r1, #0
 8000d70:	b11e      	cbz	r6, 8000d7a <__udivmoddi4+0xa2>
 8000d72:	40dc      	lsrs	r4, r3
 8000d74:	2300      	movs	r3, #0
 8000d76:	e9c6 4300 	strd	r4, r3, [r6]
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0xbc>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80ed 	beq.w	8000f62 <__udivmoddi4+0x28a>
 8000d88:	2100      	movs	r1, #0
 8000d8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d8e:	4608      	mov	r0, r1
 8000d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d94:	fab3 f183 	clz	r1, r3
 8000d98:	2900      	cmp	r1, #0
 8000d9a:	d149      	bne.n	8000e30 <__udivmoddi4+0x158>
 8000d9c:	42ab      	cmp	r3, r5
 8000d9e:	d302      	bcc.n	8000da6 <__udivmoddi4+0xce>
 8000da0:	4282      	cmp	r2, r0
 8000da2:	f200 80f8 	bhi.w	8000f96 <__udivmoddi4+0x2be>
 8000da6:	1a84      	subs	r4, r0, r2
 8000da8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dac:	2001      	movs	r0, #1
 8000dae:	4617      	mov	r7, r2
 8000db0:	2e00      	cmp	r6, #0
 8000db2:	d0e2      	beq.n	8000d7a <__udivmoddi4+0xa2>
 8000db4:	e9c6 4700 	strd	r4, r7, [r6]
 8000db8:	e7df      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000dba:	b902      	cbnz	r2, 8000dbe <__udivmoddi4+0xe6>
 8000dbc:	deff      	udf	#255	; 0xff
 8000dbe:	fab2 f382 	clz	r3, r2
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	f040 8090 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dc8:	1a8a      	subs	r2, r1, r2
 8000dca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dce:	fa1f fe8c 	uxth.w	lr, ip
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000ddc:	0c22      	lsrs	r2, r4, #16
 8000dde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000de2:	fb0e f005 	mul.w	r0, lr, r5
 8000de6:	4290      	cmp	r0, r2
 8000de8:	d908      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dea:	eb1c 0202 	adds.w	r2, ip, r2
 8000dee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4290      	cmp	r0, r2
 8000df6:	f200 80cb 	bhi.w	8000f90 <__udivmoddi4+0x2b8>
 8000dfa:	4645      	mov	r5, r8
 8000dfc:	1a12      	subs	r2, r2, r0
 8000dfe:	b2a4      	uxth	r4, r4
 8000e00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e04:	fb07 2210 	mls	r2, r7, r0, r2
 8000e08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e10:	45a6      	cmp	lr, r4
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x14e>
 8000e14:	eb1c 0404 	adds.w	r4, ip, r4
 8000e18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e1c:	d202      	bcs.n	8000e24 <__udivmoddi4+0x14c>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f200 80bb 	bhi.w	8000f9a <__udivmoddi4+0x2c2>
 8000e24:	4610      	mov	r0, r2
 8000e26:	eba4 040e 	sub.w	r4, r4, lr
 8000e2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e2e:	e79f      	b.n	8000d70 <__udivmoddi4+0x98>
 8000e30:	f1c1 0720 	rsb	r7, r1, #32
 8000e34:	408b      	lsls	r3, r1
 8000e36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e42:	fa20 f307 	lsr.w	r3, r0, r7
 8000e46:	40fd      	lsrs	r5, r7
 8000e48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e4c:	4323      	orrs	r3, r4
 8000e4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	fb09 5518 	mls	r5, r9, r8, r5
 8000e5a:	0c1c      	lsrs	r4, r3, #16
 8000e5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e60:	fb08 f50e 	mul.w	r5, r8, lr
 8000e64:	42a5      	cmp	r5, r4
 8000e66:	fa02 f201 	lsl.w	r2, r2, r1
 8000e6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e78:	f080 8088 	bcs.w	8000f8c <__udivmoddi4+0x2b4>
 8000e7c:	42a5      	cmp	r5, r4
 8000e7e:	f240 8085 	bls.w	8000f8c <__udivmoddi4+0x2b4>
 8000e82:	f1a8 0802 	sub.w	r8, r8, #2
 8000e86:	4464      	add	r4, ip
 8000e88:	1b64      	subs	r4, r4, r5
 8000e8a:	b29d      	uxth	r5, r3
 8000e8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e90:	fb09 4413 	mls	r4, r9, r3, r4
 8000e94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ea8:	d26c      	bcs.n	8000f84 <__udivmoddi4+0x2ac>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	d96a      	bls.n	8000f84 <__udivmoddi4+0x2ac>
 8000eae:	3b02      	subs	r3, #2
 8000eb0:	4464      	add	r4, ip
 8000eb2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000eb6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	42ac      	cmp	r4, r5
 8000ec0:	46c8      	mov	r8, r9
 8000ec2:	46ae      	mov	lr, r5
 8000ec4:	d356      	bcc.n	8000f74 <__udivmoddi4+0x29c>
 8000ec6:	d053      	beq.n	8000f70 <__udivmoddi4+0x298>
 8000ec8:	b156      	cbz	r6, 8000ee0 <__udivmoddi4+0x208>
 8000eca:	ebb0 0208 	subs.w	r2, r0, r8
 8000ece:	eb64 040e 	sbc.w	r4, r4, lr
 8000ed2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ed6:	40ca      	lsrs	r2, r1
 8000ed8:	40cc      	lsrs	r4, r1
 8000eda:	4317      	orrs	r7, r2
 8000edc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee8:	f1c3 0120 	rsb	r1, r3, #32
 8000eec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ef0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ef4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ef8:	409d      	lsls	r5, r3
 8000efa:	432a      	orrs	r2, r5
 8000efc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f00:	fa1f fe8c 	uxth.w	lr, ip
 8000f04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f08:	fb07 1510 	mls	r5, r7, r0, r1
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f12:	fb00 f50e 	mul.w	r5, r0, lr
 8000f16:	428d      	cmp	r5, r1
 8000f18:	fa04 f403 	lsl.w	r4, r4, r3
 8000f1c:	d908      	bls.n	8000f30 <__udivmoddi4+0x258>
 8000f1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f26:	d22f      	bcs.n	8000f88 <__udivmoddi4+0x2b0>
 8000f28:	428d      	cmp	r5, r1
 8000f2a:	d92d      	bls.n	8000f88 <__udivmoddi4+0x2b0>
 8000f2c:	3802      	subs	r0, #2
 8000f2e:	4461      	add	r1, ip
 8000f30:	1b49      	subs	r1, r1, r5
 8000f32:	b292      	uxth	r2, r2
 8000f34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f38:	fb07 1115 	mls	r1, r7, r5, r1
 8000f3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f40:	fb05 f10e 	mul.w	r1, r5, lr
 8000f44:	4291      	cmp	r1, r2
 8000f46:	d908      	bls.n	8000f5a <__udivmoddi4+0x282>
 8000f48:	eb1c 0202 	adds.w	r2, ip, r2
 8000f4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f50:	d216      	bcs.n	8000f80 <__udivmoddi4+0x2a8>
 8000f52:	4291      	cmp	r1, r2
 8000f54:	d914      	bls.n	8000f80 <__udivmoddi4+0x2a8>
 8000f56:	3d02      	subs	r5, #2
 8000f58:	4462      	add	r2, ip
 8000f5a:	1a52      	subs	r2, r2, r1
 8000f5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f60:	e738      	b.n	8000dd4 <__udivmoddi4+0xfc>
 8000f62:	4631      	mov	r1, r6
 8000f64:	4630      	mov	r0, r6
 8000f66:	e708      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000f68:	4639      	mov	r1, r7
 8000f6a:	e6e6      	b.n	8000d3a <__udivmoddi4+0x62>
 8000f6c:	4610      	mov	r0, r2
 8000f6e:	e6fb      	b.n	8000d68 <__udivmoddi4+0x90>
 8000f70:	4548      	cmp	r0, r9
 8000f72:	d2a9      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f74:	ebb9 0802 	subs.w	r8, r9, r2
 8000f78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	e7a3      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f80:	4645      	mov	r5, r8
 8000f82:	e7ea      	b.n	8000f5a <__udivmoddi4+0x282>
 8000f84:	462b      	mov	r3, r5
 8000f86:	e794      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f88:	4640      	mov	r0, r8
 8000f8a:	e7d1      	b.n	8000f30 <__udivmoddi4+0x258>
 8000f8c:	46d0      	mov	r8, sl
 8000f8e:	e77b      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f90:	3d02      	subs	r5, #2
 8000f92:	4462      	add	r2, ip
 8000f94:	e732      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f96:	4608      	mov	r0, r1
 8000f98:	e70a      	b.n	8000db0 <__udivmoddi4+0xd8>
 8000f9a:	4464      	add	r4, ip
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	e742      	b.n	8000e26 <__udivmoddi4+0x14e>

08000fa0 <__aeabi_idiv0>:
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fb0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000fb4:	f003 0301 	and.w	r3, r3, #1
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d013      	beq.n	8000fe4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000fbc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fc0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000fc4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d00b      	beq.n	8000fe4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000fcc:	e000      	b.n	8000fd0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000fce:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000fd0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d0f9      	beq.n	8000fce <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000fda:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	b2d2      	uxtb	r2, r2
 8000fe2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000fe4:	687b      	ldr	r3, [r7, #4]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
	...

08000ff4 <SerialSendChar_PC>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
void SerialSendChar_PC(uint8_t Ch1) // 1문자 보내�?????????????????????????????? ?��?��
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
	// USART_SR_TXE(1<<7)=0?, TX Buffer NOT Empty?
	// TX buffer Empty?���?????????????????????????????? ?��?���?????????????????????????????? 계속 ??�??????????????????????????????(?��?�� �???????????????????????????????��?�� ?��?��까�? ??�??????????????????????????????)
        while((USART3->SR & 1<<7) == RESET);
 8000ffe:	bf00      	nop
 8001000:	4b07      	ldr	r3, [pc, #28]	; (8001020 <SerialSendChar_PC+0x2c>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001008:	2b00      	cmp	r3, #0
 800100a:	d0f9      	beq.n	8001000 <SerialSendChar_PC+0xc>
	USART3->DR = (Ch1 & 0x01FF);	// ?��?�� (최�? 9bit ?���??????????????????????????????�?????????????????????????????? 0x01FF�?????????????????????????????? masking)
 800100c:	4a04      	ldr	r2, [pc, #16]	; (8001020 <SerialSendChar_PC+0x2c>)
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	6053      	str	r3, [r2, #4]
}
 8001012:	bf00      	nop
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	40004800 	.word	0x40004800

08001024 <SerialSendChar_WIFI>:

void SerialSendChar_WIFI(uint8_t Ch2) // 1문자 보내�?????????????????????????????? ?��?��
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
	// USART_SR_TXE(1<<7)=0?, TX Buffer NOT Empty?
	// TX buffer Empty?���?????????????????????????????? ?��?���?????????????????????????????? 계속 ??�??????????????????????????????(?��?�� �???????????????????????????????��?�� ?��?��까�? ??�??????????????????????????????)
        while((UART4->SR & 1<<7) == RESET);
 800102e:	bf00      	nop
 8001030:	4b07      	ldr	r3, [pc, #28]	; (8001050 <SerialSendChar_WIFI+0x2c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001038:	2b00      	cmp	r3, #0
 800103a:	d0f9      	beq.n	8001030 <SerialSendChar_WIFI+0xc>
	UART4->DR = (Ch2 & 0x01FF);	// ?��?�� (최�? 9bit ?���??????????????????????????????�?????????????????????????????? 0x01FF�?????????????????????????????? masking)
 800103c:	4a04      	ldr	r2, [pc, #16]	; (8001050 <SerialSendChar_WIFI+0x2c>)
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	6053      	str	r3, [r2, #4]
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	40004c00 	.word	0x40004c00

08001054 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	encoder_count=TIM4->CNT;
 800105c:	4bc2      	ldr	r3, [pc, #776]	; (8001368 <HAL_UART_RxCpltCallback+0x314>)
 800105e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001060:	4ac2      	ldr	r2, [pc, #776]	; (800136c <HAL_UART_RxCpltCallback+0x318>)
 8001062:	6013      	str	r3, [r2, #0]

  if(huart->Instance == USART3)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4ac1      	ldr	r2, [pc, #772]	; (8001370 <HAL_UART_RxCpltCallback+0x31c>)
 800106a:	4293      	cmp	r3, r2
 800106c:	f040 8125 	bne.w	80012ba <HAL_UART_RxCpltCallback+0x266>
  {

	  HAL_UART_Receive_IT(&huart3, &key_value, 1);
 8001070:	2201      	movs	r2, #1
 8001072:	49c0      	ldr	r1, [pc, #768]	; (8001374 <HAL_UART_RxCpltCallback+0x320>)
 8001074:	48c0      	ldr	r0, [pc, #768]	; (8001378 <HAL_UART_RxCpltCallback+0x324>)
 8001076:	f006 fd26 	bl	8007ac6 <HAL_UART_Receive_IT>
	  printf("%d,^^ %c \r\n", key_value,key_value);
 800107a:	4bbe      	ldr	r3, [pc, #760]	; (8001374 <HAL_UART_RxCpltCallback+0x320>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	4619      	mov	r1, r3
 8001080:	4bbc      	ldr	r3, [pc, #752]	; (8001374 <HAL_UART_RxCpltCallback+0x320>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	461a      	mov	r2, r3
 8001086:	48bd      	ldr	r0, [pc, #756]	; (800137c <HAL_UART_RxCpltCallback+0x328>)
 8001088:	f008 fcc0 	bl	8009a0c <iprintf>

	  switch(key_value)
 800108c:	4bb9      	ldr	r3, [pc, #740]	; (8001374 <HAL_UART_RxCpltCallback+0x320>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	3b31      	subs	r3, #49	; 0x31
 8001092:	2b49      	cmp	r3, #73	; 0x49
 8001094:	f200 8111 	bhi.w	80012ba <HAL_UART_RxCpltCallback+0x266>
 8001098:	a201      	add	r2, pc, #4	; (adr r2, 80010a0 <HAL_UART_RxCpltCallback+0x4c>)
 800109a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800109e:	bf00      	nop
 80010a0:	080011fd 	.word	0x080011fd
 80010a4:	0800120b 	.word	0x0800120b
 80010a8:	08001219 	.word	0x08001219
 80010ac:	08001221 	.word	0x08001221
 80010b0:	08001229 	.word	0x08001229
 80010b4:	08001233 	.word	0x08001233
 80010b8:	0800123d 	.word	0x0800123d
 80010bc:	080012bb 	.word	0x080012bb
 80010c0:	080012bb 	.word	0x080012bb
 80010c4:	080012bb 	.word	0x080012bb
 80010c8:	080012bb 	.word	0x080012bb
 80010cc:	080012bb 	.word	0x080012bb
 80010d0:	080012bb 	.word	0x080012bb
 80010d4:	080012bb 	.word	0x080012bb
 80010d8:	080012bb 	.word	0x080012bb
 80010dc:	080012bb 	.word	0x080012bb
 80010e0:	080012bb 	.word	0x080012bb
 80010e4:	080012bb 	.word	0x080012bb
 80010e8:	080012bb 	.word	0x080012bb
 80010ec:	080012bb 	.word	0x080012bb
 80010f0:	080012bb 	.word	0x080012bb
 80010f4:	080012bb 	.word	0x080012bb
 80010f8:	080012bb 	.word	0x080012bb
 80010fc:	080012bb 	.word	0x080012bb
 8001100:	080012bb 	.word	0x080012bb
 8001104:	080012bb 	.word	0x080012bb
 8001108:	080012bb 	.word	0x080012bb
 800110c:	080012bb 	.word	0x080012bb
 8001110:	080012bb 	.word	0x080012bb
 8001114:	080012bb 	.word	0x080012bb
 8001118:	080012bb 	.word	0x080012bb
 800111c:	080012bb 	.word	0x080012bb
 8001120:	080012bb 	.word	0x080012bb
 8001124:	080012bb 	.word	0x080012bb
 8001128:	080012bb 	.word	0x080012bb
 800112c:	080012bb 	.word	0x080012bb
 8001130:	080012bb 	.word	0x080012bb
 8001134:	080012bb 	.word	0x080012bb
 8001138:	080012bb 	.word	0x080012bb
 800113c:	080012bb 	.word	0x080012bb
 8001140:	080012bb 	.word	0x080012bb
 8001144:	080012bb 	.word	0x080012bb
 8001148:	080012bb 	.word	0x080012bb
 800114c:	080012bb 	.word	0x080012bb
 8001150:	080012bb 	.word	0x080012bb
 8001154:	080012bb 	.word	0x080012bb
 8001158:	080012bb 	.word	0x080012bb
 800115c:	080012bb 	.word	0x080012bb
 8001160:	08001247 	.word	0x08001247
 8001164:	080012bb 	.word	0x080012bb
 8001168:	080012bb 	.word	0x080012bb
 800116c:	0800125f 	.word	0x0800125f
 8001170:	080012bb 	.word	0x080012bb
 8001174:	08001267 	.word	0x08001267
 8001178:	080012bb 	.word	0x080012bb
 800117c:	080012bb 	.word	0x080012bb
 8001180:	0800128b 	.word	0x0800128b
 8001184:	080012bb 	.word	0x080012bb
 8001188:	080012bb 	.word	0x080012bb
 800118c:	080012bb 	.word	0x080012bb
 8001190:	080012bb 	.word	0x080012bb
 8001194:	080012bb 	.word	0x080012bb
 8001198:	080012a3 	.word	0x080012a3
 800119c:	080012bb 	.word	0x080012bb
 80011a0:	080011c9 	.word	0x080011c9
 80011a4:	080012bb 	.word	0x080012bb
 80011a8:	08001257 	.word	0x08001257
 80011ac:	080012bb 	.word	0x080012bb
 80011b0:	080012bb 	.word	0x080012bb
 80011b4:	080012bb 	.word	0x080012bb
 80011b8:	080011e3 	.word	0x080011e3
 80011bc:	08001277 	.word	0x08001277
 80011c0:	080012bb 	.word	0x080012bb
 80011c4:	0800126f 	.word	0x0800126f
	  	{
	  		case 'q':  // forward
	  			GPIOE->ODR |= 1<<0;  // back
 80011c8:	4b6d      	ldr	r3, [pc, #436]	; (8001380 <HAL_UART_RxCpltCallback+0x32c>)
 80011ca:	695b      	ldr	r3, [r3, #20]
 80011cc:	4a6c      	ldr	r2, [pc, #432]	; (8001380 <HAL_UART_RxCpltCallback+0x32c>)
 80011ce:	f043 0301 	orr.w	r3, r3, #1
 80011d2:	6153      	str	r3, [r2, #20]
	  	  	 	GPIOB->ODR |= 1<<0;  //LD1
 80011d4:	4b6b      	ldr	r3, [pc, #428]	; (8001384 <HAL_UART_RxCpltCallback+0x330>)
 80011d6:	695b      	ldr	r3, [r3, #20]
 80011d8:	4a6a      	ldr	r2, [pc, #424]	; (8001384 <HAL_UART_RxCpltCallback+0x330>)
 80011da:	f043 0301 	orr.w	r3, r3, #1
 80011de:	6153      	str	r3, [r2, #20]

	  			break;
 80011e0:	e06b      	b.n	80012ba <HAL_UART_RxCpltCallback+0x266>

	  		case 'w':  // back
	  			GPIOE->ODR &= ~1<<0;  // go
 80011e2:	4b67      	ldr	r3, [pc, #412]	; (8001380 <HAL_UART_RxCpltCallback+0x32c>)
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	4a66      	ldr	r2, [pc, #408]	; (8001380 <HAL_UART_RxCpltCallback+0x32c>)
 80011e8:	f023 0301 	bic.w	r3, r3, #1
 80011ec:	6153      	str	r3, [r2, #20]
	  		    GPIOB->ODR &= ~1<<0;  //LD1
 80011ee:	4b65      	ldr	r3, [pc, #404]	; (8001384 <HAL_UART_RxCpltCallback+0x330>)
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	4a64      	ldr	r2, [pc, #400]	; (8001384 <HAL_UART_RxCpltCallback+0x330>)
 80011f4:	f023 0301 	bic.w	r3, r3, #1
 80011f8:	6153      	str	r3, [r2, #20]

	  			break;
 80011fa:	e05e      	b.n	80012ba <HAL_UART_RxCpltCallback+0x266>

	  		case '1':
	  			GPIOG->ODR |= 1<<0;  //stop
 80011fc:	4b62      	ldr	r3, [pc, #392]	; (8001388 <HAL_UART_RxCpltCallback+0x334>)
 80011fe:	695b      	ldr	r3, [r3, #20]
 8001200:	4a61      	ldr	r2, [pc, #388]	; (8001388 <HAL_UART_RxCpltCallback+0x334>)
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	6153      	str	r3, [r2, #20]

	  			break;
 8001208:	e057      	b.n	80012ba <HAL_UART_RxCpltCallback+0x266>

	  		case '2':
	  			  GPIOG->ODR &= ~1<<0;  //start
 800120a:	4b5f      	ldr	r3, [pc, #380]	; (8001388 <HAL_UART_RxCpltCallback+0x334>)
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	4a5e      	ldr	r2, [pc, #376]	; (8001388 <HAL_UART_RxCpltCallback+0x334>)
 8001210:	f023 0301 	bic.w	r3, r3, #1
 8001214:	6153      	str	r3, [r2, #20]

	  			break;
 8001216:	e050      	b.n	80012ba <HAL_UART_RxCpltCallback+0x266>

	  		case '3':
	  			TIM3->CCR1 = 50;
 8001218:	4b5c      	ldr	r3, [pc, #368]	; (800138c <HAL_UART_RxCpltCallback+0x338>)
 800121a:	2232      	movs	r2, #50	; 0x32
 800121c:	635a      	str	r2, [r3, #52]	; 0x34
	  		//	TIM3->CCR2 = 50;

	  			break;
 800121e:	e04c      	b.n	80012ba <HAL_UART_RxCpltCallback+0x266>

	  		case '4':
	  			TIM3->CCR1 = 100;
 8001220:	4b5a      	ldr	r3, [pc, #360]	; (800138c <HAL_UART_RxCpltCallback+0x338>)
 8001222:	2264      	movs	r2, #100	; 0x64
 8001224:	635a      	str	r2, [r3, #52]	; 0x34
	  	  		//	TIM3->CCR2 = 100;

	  			break;
 8001226:	e048      	b.n	80012ba <HAL_UART_RxCpltCallback+0x266>

	  		case '5':
	  			TIM3->CCR1 = 500;
 8001228:	4b58      	ldr	r3, [pc, #352]	; (800138c <HAL_UART_RxCpltCallback+0x338>)
 800122a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800122e:	635a      	str	r2, [r3, #52]	; 0x34
	  	  	  	//	TIM3->CCR2 = 500;

	  			break;
 8001230:	e043      	b.n	80012ba <HAL_UART_RxCpltCallback+0x266>

	  		case '6':
	  			TIM3->CCR1 = 800;
 8001232:	4b56      	ldr	r3, [pc, #344]	; (800138c <HAL_UART_RxCpltCallback+0x338>)
 8001234:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001238:	635a      	str	r2, [r3, #52]	; 0x34
	  	  	  	//	TIM3->CCR2 = 800;
	  			break;
 800123a:	e03e      	b.n	80012ba <HAL_UART_RxCpltCallback+0x266>

	  		case '7':
	  			TIM3->CCR1 = 1000;
 800123c:	4b53      	ldr	r3, [pc, #332]	; (800138c <HAL_UART_RxCpltCallback+0x338>)
 800123e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001242:	635a      	str	r2, [r3, #52]	; 0x34
	  	  	//  		TIM3->CCR2 = 1000;

	  			break;
 8001244:	e039      	b.n	80012ba <HAL_UART_RxCpltCallback+0x266>

	  		case 'a':
	  			  TIM4->CNT=10000;
 8001246:	4b48      	ldr	r3, [pc, #288]	; (8001368 <HAL_UART_RxCpltCallback+0x314>)
 8001248:	f242 7210 	movw	r2, #10000	; 0x2710
 800124c:	625a      	str	r2, [r3, #36]	; 0x24

	  		  key_flag=1;
 800124e:	4b50      	ldr	r3, [pc, #320]	; (8001390 <HAL_UART_RxCpltCallback+0x33c>)
 8001250:	2201      	movs	r2, #1
 8001252:	701a      	strb	r2, [r3, #0]

	  			break;
 8001254:	e031      	b.n	80012ba <HAL_UART_RxCpltCallback+0x266>

	  		case 's':
	  			 speed_input=(2*pi/60)*10;
 8001256:	4b4f      	ldr	r3, [pc, #316]	; (8001394 <HAL_UART_RxCpltCallback+0x340>)
 8001258:	4a4f      	ldr	r2, [pc, #316]	; (8001398 <HAL_UART_RxCpltCallback+0x344>)
 800125a:	601a      	str	r2, [r3, #0]
	  			break;
 800125c:	e02d      	b.n	80012ba <HAL_UART_RxCpltCallback+0x266>

	  		case 'd':
	  			 speed_input=(2*pi/60)*30;
 800125e:	4b4d      	ldr	r3, [pc, #308]	; (8001394 <HAL_UART_RxCpltCallback+0x340>)
 8001260:	4a4e      	ldr	r2, [pc, #312]	; (800139c <HAL_UART_RxCpltCallback+0x348>)
 8001262:	601a      	str	r2, [r3, #0]
	  			break;
 8001264:	e029      	b.n	80012ba <HAL_UART_RxCpltCallback+0x266>

	  		case 'f':
	  			 speed_input=(2*pi/60)*50;
 8001266:	4b4b      	ldr	r3, [pc, #300]	; (8001394 <HAL_UART_RxCpltCallback+0x340>)
 8001268:	4a4d      	ldr	r2, [pc, #308]	; (80013a0 <HAL_UART_RxCpltCallback+0x34c>)
 800126a:	601a      	str	r2, [r3, #0]
	  			break;
 800126c:	e025      	b.n	80012ba <HAL_UART_RxCpltCallback+0x266>

	  		case 'z':

	  			speed_input=10*2*pi/60;
 800126e:	4b49      	ldr	r3, [pc, #292]	; (8001394 <HAL_UART_RxCpltCallback+0x340>)
 8001270:	4a49      	ldr	r2, [pc, #292]	; (8001398 <HAL_UART_RxCpltCallback+0x344>)
 8001272:	601a      	str	r2, [r3, #0]
	  	  	  //[%]

	  	  	//  	TIM3->CCR1 = 1000*duty/100;
	  	  	//  		TIM3->CCR2 = 1000*duty/100;

	  			break;
 8001274:	e021      	b.n	80012ba <HAL_UART_RxCpltCallback+0x266>

	  		case 'x':
	  			GPIOB->ODR &= ~1<<0;
 8001276:	4b43      	ldr	r3, [pc, #268]	; (8001384 <HAL_UART_RxCpltCallback+0x330>)
 8001278:	695b      	ldr	r3, [r3, #20]
 800127a:	4a42      	ldr	r2, [pc, #264]	; (8001384 <HAL_UART_RxCpltCallback+0x330>)
 800127c:	f023 0301 	bic.w	r3, r3, #1
 8001280:	6153      	str	r3, [r2, #20]


	  	  	  	   speed_input=45*2*pi/60;
 8001282:	4b44      	ldr	r3, [pc, #272]	; (8001394 <HAL_UART_RxCpltCallback+0x340>)
 8001284:	4a47      	ldr	r2, [pc, #284]	; (80013a4 <HAL_UART_RxCpltCallback+0x350>)
 8001286:	601a      	str	r2, [r3, #0]
	  	 //		  duty = 2.0881*pow(x,6) - 36.163*pow(x,5) + 248.4*pow(x,4) - 851.05*pow(x,3) + 1486.5*pow(x,2) - 1164.9*x + 249.29;
	  	  	  		 	  //[%]
	  	  	//	  TIM3->CCR1 = 1000*duty/100;
	  	  	//		  	TIM3->CCR2 = 1000*duty/100;

	  			break;
 8001288:	e017      	b.n	80012ba <HAL_UART_RxCpltCallback+0x266>
	  			case 'i':
	  			  TIM4->CNT=0;
 800128a:	4b37      	ldr	r3, [pc, #220]	; (8001368 <HAL_UART_RxCpltCallback+0x314>)
 800128c:	2200      	movs	r2, #0
 800128e:	625a      	str	r2, [r3, #36]	; 0x24
	  			  		 in=512;
 8001290:	4b45      	ldr	r3, [pc, #276]	; (80013a8 <HAL_UART_RxCpltCallback+0x354>)
 8001292:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001296:	801a      	strh	r2, [r3, #0]
	  			  		err_sum=0;
 8001298:	4b44      	ldr	r3, [pc, #272]	; (80013ac <HAL_UART_RxCpltCallback+0x358>)
 800129a:	f04f 0200 	mov.w	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
	  			 break;
 80012a0:	e00b      	b.n	80012ba <HAL_UART_RxCpltCallback+0x266>
	  			case 'o':
	  				  	  TIM4->CNT=0;
 80012a2:	4b31      	ldr	r3, [pc, #196]	; (8001368 <HAL_UART_RxCpltCallback+0x314>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	625a      	str	r2, [r3, #36]	; 0x24
	  				  	 in=512*2;
 80012a8:	4b3f      	ldr	r3, [pc, #252]	; (80013a8 <HAL_UART_RxCpltCallback+0x354>)
 80012aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012ae:	801a      	strh	r2, [r3, #0]
	  				  	err_sum=0;
 80012b0:	4b3e      	ldr	r3, [pc, #248]	; (80013ac <HAL_UART_RxCpltCallback+0x358>)
 80012b2:	f04f 0200 	mov.w	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
	  			break;
 80012b8:	bf00      	nop




  }
  if(huart->Instance == UART4)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a3c      	ldr	r2, [pc, #240]	; (80013b0 <HAL_UART_RxCpltCallback+0x35c>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	f040 80d0 	bne.w	8001466 <HAL_UART_RxCpltCallback+0x412>
    {
	  HAL_UART_Receive_IT(&huart4, &data, 1);
 80012c6:	2201      	movs	r2, #1
 80012c8:	493a      	ldr	r1, [pc, #232]	; (80013b4 <HAL_UART_RxCpltCallback+0x360>)
 80012ca:	483b      	ldr	r0, [pc, #236]	; (80013b8 <HAL_UART_RxCpltCallback+0x364>)
 80012cc:	f006 fbfb 	bl	8007ac6 <HAL_UART_Receive_IT>


		switch(data)
 80012d0:	4b38      	ldr	r3, [pc, #224]	; (80013b4 <HAL_UART_RxCpltCallback+0x360>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	3b21      	subs	r3, #33	; 0x21
 80012d6:	2b20      	cmp	r3, #32
 80012d8:	f200 80c5 	bhi.w	8001466 <HAL_UART_RxCpltCallback+0x412>
 80012dc:	a201      	add	r2, pc, #4	; (adr r2, 80012e4 <HAL_UART_RxCpltCallback+0x290>)
 80012de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e2:	bf00      	nop
 80012e4:	08001449 	.word	0x08001449
 80012e8:	08001467 	.word	0x08001467
 80012ec:	08001467 	.word	0x08001467
 80012f0:	08001467 	.word	0x08001467
 80012f4:	08001467 	.word	0x08001467
 80012f8:	08001467 	.word	0x08001467
 80012fc:	08001467 	.word	0x08001467
 8001300:	08001467 	.word	0x08001467
 8001304:	08001467 	.word	0x08001467
 8001308:	08001467 	.word	0x08001467
 800130c:	08001467 	.word	0x08001467
 8001310:	08001467 	.word	0x08001467
 8001314:	08001467 	.word	0x08001467
 8001318:	08001467 	.word	0x08001467
 800131c:	08001467 	.word	0x08001467
 8001320:	080013bd 	.word	0x080013bd
 8001324:	080013d7 	.word	0x080013d7
 8001328:	080013f1 	.word	0x080013f1
 800132c:	080013ff 	.word	0x080013ff
 8001330:	0800140d 	.word	0x0800140d
 8001334:	0800141b 	.word	0x0800141b
 8001338:	08001429 	.word	0x08001429
 800133c:	08001437 	.word	0x08001437
 8001340:	08001467 	.word	0x08001467
 8001344:	08001467 	.word	0x08001467
 8001348:	08001467 	.word	0x08001467
 800134c:	08001467 	.word	0x08001467
 8001350:	08001467 	.word	0x08001467
 8001354:	08001467 	.word	0x08001467
 8001358:	08001467 	.word	0x08001467
 800135c:	08001467 	.word	0x08001467
 8001360:	08001467 	.word	0x08001467
 8001364:	0800145f 	.word	0x0800145f
 8001368:	40000800 	.word	0x40000800
 800136c:	2000038c 	.word	0x2000038c
 8001370:	40004800 	.word	0x40004800
 8001374:	200002f4 	.word	0x200002f4
 8001378:	200002f8 	.word	0x200002f8
 800137c:	0800bd08 	.word	0x0800bd08
 8001380:	40021000 	.word	0x40021000
 8001384:	40020400 	.word	0x40020400
 8001388:	40021800 	.word	0x40021800
 800138c:	40000400 	.word	0x40000400
 8001390:	200003c0 	.word	0x200003c0
 8001394:	200003b8 	.word	0x200003b8
 8001398:	3f860a90 	.word	0x3f860a90
 800139c:	40490fd8 	.word	0x40490fd8
 80013a0:	40a78d34 	.word	0x40a78d34
 80013a4:	4096cbe2 	.word	0x4096cbe2
 80013a8:	200003c2 	.word	0x200003c2
 80013ac:	200003c8 	.word	0x200003c8
 80013b0:	40004c00 	.word	0x40004c00
 80013b4:	20000340 	.word	0x20000340
 80013b8:	20000344 	.word	0x20000344
		{
		case '0':
			 GPIOB->ODR |= 1<<0;
 80013bc:	4b2c      	ldr	r3, [pc, #176]	; (8001470 <HAL_UART_RxCpltCallback+0x41c>)
 80013be:	695b      	ldr	r3, [r3, #20]
 80013c0:	4a2b      	ldr	r2, [pc, #172]	; (8001470 <HAL_UART_RxCpltCallback+0x41c>)
 80013c2:	f043 0301 	orr.w	r3, r3, #1
 80013c6:	6153      	str	r3, [r2, #20]
			GPIOG->ODR &= ~1<<0;// start
 80013c8:	4b2a      	ldr	r3, [pc, #168]	; (8001474 <HAL_UART_RxCpltCallback+0x420>)
 80013ca:	695b      	ldr	r3, [r3, #20]
 80013cc:	4a29      	ldr	r2, [pc, #164]	; (8001474 <HAL_UART_RxCpltCallback+0x420>)
 80013ce:	f023 0301 	bic.w	r3, r3, #1
 80013d2:	6153      	str	r3, [r2, #20]

			break;
 80013d4:	e047      	b.n	8001466 <HAL_UART_RxCpltCallback+0x412>

		case '1':  //stop
			  GPIOB->ODR &= ~1<<0;
 80013d6:	4b26      	ldr	r3, [pc, #152]	; (8001470 <HAL_UART_RxCpltCallback+0x41c>)
 80013d8:	695b      	ldr	r3, [r3, #20]
 80013da:	4a25      	ldr	r2, [pc, #148]	; (8001470 <HAL_UART_RxCpltCallback+0x41c>)
 80013dc:	f023 0301 	bic.w	r3, r3, #1
 80013e0:	6153      	str	r3, [r2, #20]
	          GPIOG->ODR |= 1<<0;
 80013e2:	4b24      	ldr	r3, [pc, #144]	; (8001474 <HAL_UART_RxCpltCallback+0x420>)
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	4a23      	ldr	r2, [pc, #140]	; (8001474 <HAL_UART_RxCpltCallback+0x420>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	6153      	str	r3, [r2, #20]
			break;
 80013ee:	e03a      	b.n	8001466 <HAL_UART_RxCpltCallback+0x412>

		case '2':  //dir
			  GPIOE->ODR |= 1<<0;  // back
 80013f0:	4b21      	ldr	r3, [pc, #132]	; (8001478 <HAL_UART_RxCpltCallback+0x424>)
 80013f2:	695b      	ldr	r3, [r3, #20]
 80013f4:	4a20      	ldr	r2, [pc, #128]	; (8001478 <HAL_UART_RxCpltCallback+0x424>)
 80013f6:	f043 0301 	orr.w	r3, r3, #1
 80013fa:	6153      	str	r3, [r2, #20]
			break;
 80013fc:	e033      	b.n	8001466 <HAL_UART_RxCpltCallback+0x412>

		case '3'://dir
			 GPIOE->ODR &= ~1<<0; // go
 80013fe:	4b1e      	ldr	r3, [pc, #120]	; (8001478 <HAL_UART_RxCpltCallback+0x424>)
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	4a1d      	ldr	r2, [pc, #116]	; (8001478 <HAL_UART_RxCpltCallback+0x424>)
 8001404:	f023 0301 	bic.w	r3, r3, #1
 8001408:	6153      	str	r3, [r2, #20]
			break;
 800140a:	e02c      	b.n	8001466 <HAL_UART_RxCpltCallback+0x412>

		case '4':

		    TIM3->CCR1 = 0;
 800140c:	4b1b      	ldr	r3, [pc, #108]	; (800147c <HAL_UART_RxCpltCallback+0x428>)
 800140e:	2200      	movs	r2, #0
 8001410:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 0;
 8001412:	4b1a      	ldr	r3, [pc, #104]	; (800147c <HAL_UART_RxCpltCallback+0x428>)
 8001414:	2200      	movs	r2, #0
 8001416:	639a      	str	r2, [r3, #56]	; 0x38

			break;
 8001418:	e025      	b.n	8001466 <HAL_UART_RxCpltCallback+0x412>

		case '5':
			TIM3->CCR1 = 50;
 800141a:	4b18      	ldr	r3, [pc, #96]	; (800147c <HAL_UART_RxCpltCallback+0x428>)
 800141c:	2232      	movs	r2, #50	; 0x32
 800141e:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 50;
 8001420:	4b16      	ldr	r3, [pc, #88]	; (800147c <HAL_UART_RxCpltCallback+0x428>)
 8001422:	2232      	movs	r2, #50	; 0x32
 8001424:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8001426:	e01e      	b.n	8001466 <HAL_UART_RxCpltCallback+0x412>

		case '6':
			TIM3->CCR1 = 200;
 8001428:	4b14      	ldr	r3, [pc, #80]	; (800147c <HAL_UART_RxCpltCallback+0x428>)
 800142a:	22c8      	movs	r2, #200	; 0xc8
 800142c:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 200;
 800142e:	4b13      	ldr	r3, [pc, #76]	; (800147c <HAL_UART_RxCpltCallback+0x428>)
 8001430:	22c8      	movs	r2, #200	; 0xc8
 8001432:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8001434:	e017      	b.n	8001466 <HAL_UART_RxCpltCallback+0x412>

		case '7':
			TIM3->CCR1 = 1000;
 8001436:	4b11      	ldr	r3, [pc, #68]	; (800147c <HAL_UART_RxCpltCallback+0x428>)
 8001438:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800143c:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 1000;
 800143e:	4b0f      	ldr	r3, [pc, #60]	; (800147c <HAL_UART_RxCpltCallback+0x428>)
 8001440:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001444:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8001446:	e00e      	b.n	8001466 <HAL_UART_RxCpltCallback+0x412>

		case '!':
			RX_flag=1;
 8001448:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <HAL_UART_RxCpltCallback+0x42c>)
 800144a:	2201      	movs	r2, #1
 800144c:	701a      	strb	r2, [r3, #0]
			 TIM2->CNT=0;
 800144e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001452:	2200      	movs	r2, #0
 8001454:	625a      	str	r2, [r3, #36]	; 0x24
			 TIM4->CNT=0;
 8001456:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <HAL_UART_RxCpltCallback+0x430>)
 8001458:	2200      	movs	r2, #0
 800145a:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 800145c:	e003      	b.n	8001466 <HAL_UART_RxCpltCallback+0x412>
		case 'A':  //Tx

			RX_flag=2;
 800145e:	4b08      	ldr	r3, [pc, #32]	; (8001480 <HAL_UART_RxCpltCallback+0x42c>)
 8001460:	2202      	movs	r2, #2
 8001462:	701a      	strb	r2, [r3, #0]
				break;
 8001464:	bf00      	nop



    }

}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40020400 	.word	0x40020400
 8001474:	40021800 	.word	0x40021800
 8001478:	40021000 	.word	0x40021000
 800147c:	40000400 	.word	0x40000400
 8001480:	20000390 	.word	0x20000390
 8001484:	40000800 	.word	0x40000800

08001488 <_write>:

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
int _write(int file, char* p, int len){
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
	for(int i=0; i<len; i++){
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	e009      	b.n	80014ae <_write+0x26>
		ITM_SendChar((*p++));
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	1c5a      	adds	r2, r3, #1
 800149e:	60ba      	str	r2, [r7, #8]
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff fd7e 	bl	8000fa4 <ITM_SendChar>
	for(int i=0; i<len; i++){
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	3301      	adds	r3, #1
 80014ac:	617b      	str	r3, [r7, #20]
 80014ae:	697a      	ldr	r2, [r7, #20]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	dbf1      	blt.n	800149a <_write+0x12>
	}
	return len;
 80014b6:	687b      	ldr	r3, [r7, #4]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3718      	adds	r7, #24
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80014c6:	f002 f95d 	bl	8003784 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ca:	f000 fb2d 	bl	8001b28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ce:	f001 f853 	bl	8002578 <MX_GPIO_Init>
  MX_DMA_Init();
 80014d2:	f001 f81b 	bl	800250c <MX_DMA_Init>
  MX_ETH_Init();
 80014d6:	f000 fbff 	bl	8001cd8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80014da:	f000 ffbf 	bl	800245c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80014de:	f000 ffe7 	bl	80024b0 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 80014e2:	f000 fcef 	bl	8001ec4 <MX_TIM3_Init>
  MX_TIM14_Init();
 80014e6:	f000 ff57 	bl	8002398 <MX_TIM14_Init>
  MX_ADC1_Init();
 80014ea:	f000 fb87 	bl	8001bfc <MX_ADC1_Init>
  MX_TIM4_Init();
 80014ee:	f000 fd99 	bl	8002024 <MX_TIM4_Init>
  MX_UART4_Init();
 80014f2:	f000 ff89 	bl	8002408 <MX_UART4_Init>
  MX_TIM2_Init();
 80014f6:	f000 fc8d 	bl	8001e14 <MX_TIM2_Init>
  MX_TIM8_Init();
 80014fa:	f000 fe5d 	bl	80021b8 <MX_TIM8_Init>
  MX_TIM6_Init();
 80014fe:	f000 fdeb 	bl	80020d8 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001502:	f000 fe21 	bl	8002148 <MX_TIM7_Init>
  MX_TIM13_Init();
 8001506:	f000 fef7 	bl	80022f8 <MX_TIM13_Init>
  MX_TIM1_Init();
 800150a:	f000 fc33 	bl	8001d74 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */


  HAL_UART_Receive_IT(&huart3, &key_value, 1);     //추�?****************************
 800150e:	2201      	movs	r2, #1
 8001510:	49b3      	ldr	r1, [pc, #716]	; (80017e0 <main+0x320>)
 8001512:	48b4      	ldr	r0, [pc, #720]	; (80017e4 <main+0x324>)
 8001514:	f006 fad7 	bl	8007ac6 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart4, &data, 1);
 8001518:	2201      	movs	r2, #1
 800151a:	49b3      	ldr	r1, [pc, #716]	; (80017e8 <main+0x328>)
 800151c:	48b3      	ldr	r0, [pc, #716]	; (80017ec <main+0x32c>)
 800151e:	f006 fad2 	bl	8007ac6 <HAL_UART_Receive_IT>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC1_value, 2);
 8001522:	2202      	movs	r2, #2
 8001524:	49b2      	ldr	r1, [pc, #712]	; (80017f0 <main+0x330>)
 8001526:	48b3      	ldr	r0, [pc, #716]	; (80017f4 <main+0x334>)
 8001528:	f002 fb16 	bl	8003b58 <HAL_ADC_Start_DMA>




   sprintf((char *)buffer, "Hello, World!\n");
 800152c:	49b2      	ldr	r1, [pc, #712]	; (80017f8 <main+0x338>)
 800152e:	48b3      	ldr	r0, [pc, #716]	; (80017fc <main+0x33c>)
 8001530:	f008 fa7e 	bl	8009a30 <siprintf>
   HAL_UART_Transmit(&huart4, buffer, strlen((char *)buffer), 100);
 8001534:	48b1      	ldr	r0, [pc, #708]	; (80017fc <main+0x33c>)
 8001536:	f7fe feab 	bl	8000290 <strlen>
 800153a:	4603      	mov	r3, r0
 800153c:	b29a      	uxth	r2, r3
 800153e:	2364      	movs	r3, #100	; 0x64
 8001540:	49ae      	ldr	r1, [pc, #696]	; (80017fc <main+0x33c>)
 8001542:	48aa      	ldr	r0, [pc, #680]	; (80017ec <main+0x32c>)
 8001544:	f006 fa34 	bl	80079b0 <HAL_UART_Transmit>


   HAL_TIM_Base_Start_IT(&htim6);
 8001548:	48ad      	ldr	r0, [pc, #692]	; (8001800 <main+0x340>)
 800154a:	f004 ff6f 	bl	800642c <HAL_TIM_Base_Start_IT>
   HAL_TIM_Base_Start_IT(&htim7);
 800154e:	48ad      	ldr	r0, [pc, #692]	; (8001804 <main+0x344>)
 8001550:	f004 ff6c 	bl	800642c <HAL_TIM_Base_Start_IT>

   HAL_TIM_Base_Start(&htim1);
 8001554:	48ac      	ldr	r0, [pc, #688]	; (8001808 <main+0x348>)
 8001556:	f004 ff01 	bl	800635c <HAL_TIM_Base_Start>
     HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 800155a:	2200      	movs	r2, #0
 800155c:	2180      	movs	r1, #128	; 0x80
 800155e:	48ab      	ldr	r0, [pc, #684]	; (800180c <main+0x34c>)
 8001560:	f004 f8ec 	bl	800573c <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(tim6_flag==1)
 8001564:	4baa      	ldr	r3, [pc, #680]	; (8001810 <main+0x350>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d16c      	bne.n	8001646 <main+0x186>
	  {

	  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 800156c:	2201      	movs	r2, #1
 800156e:	2180      	movs	r1, #128	; 0x80
 8001570:	48a6      	ldr	r0, [pc, #664]	; (800180c <main+0x34c>)
 8001572:	f004 f8e3 	bl	800573c <HAL_GPIO_WritePin>
	    	      __HAL_TIM_SET_COUNTER(&htim1, 0);
 8001576:	4ba4      	ldr	r3, [pc, #656]	; (8001808 <main+0x348>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2200      	movs	r2, #0
 800157c:	625a      	str	r2, [r3, #36]	; 0x24
	    	      while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 800157e:	bf00      	nop
 8001580:	4ba1      	ldr	r3, [pc, #644]	; (8001808 <main+0x348>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001586:	2b09      	cmp	r3, #9
 8001588:	d9fa      	bls.n	8001580 <main+0xc0>
	    	      HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 800158a:	2200      	movs	r2, #0
 800158c:	2180      	movs	r1, #128	; 0x80
 800158e:	489f      	ldr	r0, [pc, #636]	; (800180c <main+0x34c>)
 8001590:	f004 f8d4 	bl	800573c <HAL_GPIO_WritePin>

	    	      pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8001594:	f002 f95c 	bl	8003850 <HAL_GetTick>
 8001598:	4603      	mov	r3, r0
 800159a:	4a9e      	ldr	r2, [pc, #632]	; (8001814 <main+0x354>)
 800159c:	6013      	str	r3, [r2, #0]
	    	      // wait for the echo pin to go high
	    	      while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 800159e:	bf00      	nop
 80015a0:	2140      	movs	r1, #64	; 0x40
 80015a2:	489a      	ldr	r0, [pc, #616]	; (800180c <main+0x34c>)
 80015a4:	f004 f8b2 	bl	800570c <HAL_GPIO_ReadPin>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d108      	bne.n	80015c0 <main+0x100>
 80015ae:	4b99      	ldr	r3, [pc, #612]	; (8001814 <main+0x354>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f103 060a 	add.w	r6, r3, #10
 80015b6:	f002 f94b 	bl	8003850 <HAL_GetTick>
 80015ba:	4603      	mov	r3, r0
 80015bc:	429e      	cmp	r6, r3
 80015be:	d8ef      	bhi.n	80015a0 <main+0xe0>
	    	      Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 80015c0:	4b91      	ldr	r3, [pc, #580]	; (8001808 <main+0x348>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c6:	4a94      	ldr	r2, [pc, #592]	; (8001818 <main+0x358>)
 80015c8:	6013      	str	r3, [r2, #0]

	    	      pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 80015ca:	f002 f941 	bl	8003850 <HAL_GetTick>
 80015ce:	4603      	mov	r3, r0
 80015d0:	4a90      	ldr	r2, [pc, #576]	; (8001814 <main+0x354>)
 80015d2:	6013      	str	r3, [r2, #0]
	    	      // wait for the echo pin to go low
	    	      while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 80015d4:	bf00      	nop
 80015d6:	2140      	movs	r1, #64	; 0x40
 80015d8:	488c      	ldr	r0, [pc, #560]	; (800180c <main+0x34c>)
 80015da:	f004 f897 	bl	800570c <HAL_GPIO_ReadPin>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d008      	beq.n	80015f6 <main+0x136>
 80015e4:	4b8b      	ldr	r3, [pc, #556]	; (8001814 <main+0x354>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f103 0632 	add.w	r6, r3, #50	; 0x32
 80015ec:	f002 f930 	bl	8003850 <HAL_GetTick>
 80015f0:	4603      	mov	r3, r0
 80015f2:	429e      	cmp	r6, r3
 80015f4:	d8ef      	bhi.n	80015d6 <main+0x116>
	    	      Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 80015f6:	4b84      	ldr	r3, [pc, #528]	; (8001808 <main+0x348>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fc:	4a87      	ldr	r2, [pc, #540]	; (800181c <main+0x35c>)
 80015fe:	6013      	str	r3, [r2, #0]

	    	      Distance = (Value2-Value1)* 0.017/2;
 8001600:	4b86      	ldr	r3, [pc, #536]	; (800181c <main+0x35c>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4b84      	ldr	r3, [pc, #528]	; (8001818 <main+0x358>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	4618      	mov	r0, r3
 800160c:	f7fe ff8a 	bl	8000524 <__aeabi_ui2d>
 8001610:	a371      	add	r3, pc, #452	; (adr r3, 80017d8 <main+0x318>)
 8001612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001616:	f7fe ffff 	bl	8000618 <__aeabi_dmul>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4610      	mov	r0, r2
 8001620:	4619      	mov	r1, r3
 8001622:	f04f 0200 	mov.w	r2, #0
 8001626:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800162a:	f7ff f91f 	bl	800086c <__aeabi_ddiv>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	4610      	mov	r0, r2
 8001634:	4619      	mov	r1, r3
 8001636:	f7ff fae7 	bl	8000c08 <__aeabi_d2f>
 800163a:	4603      	mov	r3, r0
 800163c:	4a78      	ldr	r2, [pc, #480]	; (8001820 <main+0x360>)
 800163e:	6013      	str	r3, [r2, #0]
	    	 //     printf("Distance = %f \r\n",Distance);
	    	//      sprintf((char *)buffer, "%d \r\n",Distance);
	    	 //     HAL_UART_Transmit(&huart3, buffer, strlen((char *)buffer), 100);
	    	      tim6_flag=0;
 8001640:	4b73      	ldr	r3, [pc, #460]	; (8001810 <main+0x350>)
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
	  }
	  if(tim14_flag==200) //2s
 8001646:	4b77      	ldr	r3, [pc, #476]	; (8001824 <main+0x364>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2bc8      	cmp	r3, #200	; 0xc8
 800164c:	f040 8093 	bne.w	8001776 <main+0x2b6>
	  {
		    RPM_uint16=RPM*100;
 8001650:	4b75      	ldr	r3, [pc, #468]	; (8001828 <main+0x368>)
 8001652:	edd3 7a00 	vldr	s15, [r3]
 8001656:	ed9f 7a75 	vldr	s14, [pc, #468]	; 800182c <main+0x36c>
 800165a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800165e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001662:	ee17 3a90 	vmov	r3, s15
 8001666:	b29a      	uxth	r2, r3
 8001668:	4b71      	ldr	r3, [pc, #452]	; (8001830 <main+0x370>)
 800166a:	801a      	strh	r2, [r3, #0]
		    ENC[3]=RPM_uint16 / 1000;		// 10000 ?���??????????????????????????????
 800166c:	4b70      	ldr	r3, [pc, #448]	; (8001830 <main+0x370>)
 800166e:	881b      	ldrh	r3, [r3, #0]
 8001670:	4a70      	ldr	r2, [pc, #448]	; (8001834 <main+0x374>)
 8001672:	fba2 2303 	umull	r2, r3, r2, r3
 8001676:	099b      	lsrs	r3, r3, #6
 8001678:	b29b      	uxth	r3, r3
 800167a:	b2da      	uxtb	r2, r3
 800167c:	4b6e      	ldr	r3, [pc, #440]	; (8001838 <main+0x378>)
 800167e:	70da      	strb	r2, [r3, #3]
    	    ENC[2]=RPM_uint16 % 1000/100;	// 1000 ?���??????????????????????????????
 8001680:	4b6b      	ldr	r3, [pc, #428]	; (8001830 <main+0x370>)
 8001682:	881b      	ldrh	r3, [r3, #0]
 8001684:	4a6b      	ldr	r2, [pc, #428]	; (8001834 <main+0x374>)
 8001686:	fba2 1203 	umull	r1, r2, r2, r3
 800168a:	0992      	lsrs	r2, r2, #6
 800168c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001690:	fb01 f202 	mul.w	r2, r1, r2
 8001694:	1a9b      	subs	r3, r3, r2
 8001696:	b29b      	uxth	r3, r3
 8001698:	4a68      	ldr	r2, [pc, #416]	; (800183c <main+0x37c>)
 800169a:	fba2 2303 	umull	r2, r3, r2, r3
 800169e:	095b      	lsrs	r3, r3, #5
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	b2da      	uxtb	r2, r3
 80016a4:	4b64      	ldr	r3, [pc, #400]	; (8001838 <main+0x378>)
 80016a6:	709a      	strb	r2, [r3, #2]
			ENC[1]= RPM_uint16 % 100/10;	// 100 ?���??????????????????????????????
 80016a8:	4b61      	ldr	r3, [pc, #388]	; (8001830 <main+0x370>)
 80016aa:	881b      	ldrh	r3, [r3, #0]
 80016ac:	4a63      	ldr	r2, [pc, #396]	; (800183c <main+0x37c>)
 80016ae:	fba2 1203 	umull	r1, r2, r2, r3
 80016b2:	0952      	lsrs	r2, r2, #5
 80016b4:	2164      	movs	r1, #100	; 0x64
 80016b6:	fb01 f202 	mul.w	r2, r1, r2
 80016ba:	1a9b      	subs	r3, r3, r2
 80016bc:	b29b      	uxth	r3, r3
 80016be:	4a60      	ldr	r2, [pc, #384]	; (8001840 <main+0x380>)
 80016c0:	fba2 2303 	umull	r2, r3, r2, r3
 80016c4:	08db      	lsrs	r3, r3, #3
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	4b5b      	ldr	r3, [pc, #364]	; (8001838 <main+0x378>)
 80016cc:	705a      	strb	r2, [r3, #1]
		 	ENC[0]=RPM_uint16 % 10/1;		// 10 ?���??????????????????????????????
 80016ce:	4b58      	ldr	r3, [pc, #352]	; (8001830 <main+0x370>)
 80016d0:	881a      	ldrh	r2, [r3, #0]
 80016d2:	4b5b      	ldr	r3, [pc, #364]	; (8001840 <main+0x380>)
 80016d4:	fba3 1302 	umull	r1, r3, r3, r2
 80016d8:	08d9      	lsrs	r1, r3, #3
 80016da:	460b      	mov	r3, r1
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	440b      	add	r3, r1
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	4b53      	ldr	r3, [pc, #332]	; (8001838 <main+0x378>)
 80016ea:	701a      	strb	r2, [r3, #0]

		   	SerialSendChar_WIFI('?');
 80016ec:	203f      	movs	r0, #63	; 0x3f
 80016ee:	f7ff fc99 	bl	8001024 <SerialSendChar_WIFI>

			SerialSendChar_WIFI('0');
 80016f2:	2030      	movs	r0, #48	; 0x30
 80016f4:	f7ff fc96 	bl	8001024 <SerialSendChar_WIFI>
			SerialSendChar_WIFI('0');
 80016f8:	2030      	movs	r0, #48	; 0x30
 80016fa:	f7ff fc93 	bl	8001024 <SerialSendChar_WIFI>
			SerialSendChar_WIFI('0');
 80016fe:	2030      	movs	r0, #48	; 0x30
 8001700:	f7ff fc90 	bl	8001024 <SerialSendChar_WIFI>
	     	SerialSendChar_WIFI('0');
 8001704:	2030      	movs	r0, #48	; 0x30
 8001706:	f7ff fc8d 	bl	8001024 <SerialSendChar_WIFI>

		    SerialSendChar_WIFI(ENC[3]+0x30);
 800170a:	4b4b      	ldr	r3, [pc, #300]	; (8001838 <main+0x378>)
 800170c:	78db      	ldrb	r3, [r3, #3]
 800170e:	3330      	adds	r3, #48	; 0x30
 8001710:	b2db      	uxtb	r3, r3
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff fc86 	bl	8001024 <SerialSendChar_WIFI>
		    SerialSendChar_WIFI(ENC[2]+0x30);
 8001718:	4b47      	ldr	r3, [pc, #284]	; (8001838 <main+0x378>)
 800171a:	789b      	ldrb	r3, [r3, #2]
 800171c:	3330      	adds	r3, #48	; 0x30
 800171e:	b2db      	uxtb	r3, r3
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff fc7f 	bl	8001024 <SerialSendChar_WIFI>
		 	SerialSendChar_WIFI(ENC[1]+0x30);
 8001726:	4b44      	ldr	r3, [pc, #272]	; (8001838 <main+0x378>)
 8001728:	785b      	ldrb	r3, [r3, #1]
 800172a:	3330      	adds	r3, #48	; 0x30
 800172c:	b2db      	uxtb	r3, r3
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff fc78 	bl	8001024 <SerialSendChar_WIFI>
	        SerialSendChar_WIFI(ENC[0]+0x30);
 8001734:	4b40      	ldr	r3, [pc, #256]	; (8001838 <main+0x378>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	3330      	adds	r3, #48	; 0x30
 800173a:	b2db      	uxtb	r3, r3
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff fc71 	bl	8001024 <SerialSendChar_WIFI>

	  		  sprintf((char *)buffer, "%d \r\n",RPM_uint16);
 8001742:	4b3b      	ldr	r3, [pc, #236]	; (8001830 <main+0x370>)
 8001744:	881b      	ldrh	r3, [r3, #0]
 8001746:	461a      	mov	r2, r3
 8001748:	493e      	ldr	r1, [pc, #248]	; (8001844 <main+0x384>)
 800174a:	482c      	ldr	r0, [pc, #176]	; (80017fc <main+0x33c>)
 800174c:	f008 f970 	bl	8009a30 <siprintf>
  		  		 	  		  	  HAL_UART_Transmit(&huart3, buffer, strlen((char *)buffer), 100);
 8001750:	482a      	ldr	r0, [pc, #168]	; (80017fc <main+0x33c>)
 8001752:	f7fe fd9d 	bl	8000290 <strlen>
 8001756:	4603      	mov	r3, r0
 8001758:	b29a      	uxth	r2, r3
 800175a:	2364      	movs	r3, #100	; 0x64
 800175c:	4927      	ldr	r1, [pc, #156]	; (80017fc <main+0x33c>)
 800175e:	4821      	ldr	r0, [pc, #132]	; (80017e4 <main+0x324>)
 8001760:	f006 f926 	bl	80079b0 <HAL_UART_Transmit>



		  	SerialSendChar_PC('\n');
 8001764:	200a      	movs	r0, #10
 8001766:	f7ff fc45 	bl	8000ff4 <SerialSendChar_PC>
		 	SerialSendChar_PC('\r');
 800176a:	200d      	movs	r0, #13
 800176c:	f7ff fc42 	bl	8000ff4 <SerialSendChar_PC>
		 	//  	  HAL_UART_Transmit(&huart4, buffer, strlen((char *)buffer), 100);


		 	//  	  HAL_Delay(2000);

		  tim14_flag=0;
 8001770:	4b2c      	ldr	r3, [pc, #176]	; (8001824 <main+0x364>)
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
	  }

	  if(tim13_flag==1)
 8001776:	4b34      	ldr	r3, [pc, #208]	; (8001848 <main+0x388>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2b01      	cmp	r3, #1
 800177c:	f040 8175 	bne.w	8001a6a <main+0x5aa>
	  	  {
		  p_kp=4;
 8001780:	4b32      	ldr	r3, [pc, #200]	; (800184c <main+0x38c>)
 8001782:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8001786:	601a      	str	r2, [r3, #0]
		 p_ki=2;
 8001788:	4b31      	ldr	r3, [pc, #196]	; (8001850 <main+0x390>)
 800178a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800178e:	601a      	str	r2, [r3, #0]
		 p_kd=0.01;
 8001790:	4b30      	ldr	r3, [pc, #192]	; (8001854 <main+0x394>)
 8001792:	4a31      	ldr	r2, [pc, #196]	; (8001858 <main+0x398>)
 8001794:	601a      	str	r2, [r3, #0]

		  	  err = in - encoder_count;
 8001796:	4b31      	ldr	r3, [pc, #196]	; (800185c <main+0x39c>)
 8001798:	f9b3 3000 	ldrsh.w	r3, [r3]
 800179c:	b29a      	uxth	r2, r3
 800179e:	4b30      	ldr	r3, [pc, #192]	; (8001860 <main+0x3a0>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	b21a      	sxth	r2, r3
 80017aa:	4b2e      	ldr	r3, [pc, #184]	; (8001864 <main+0x3a4>)
 80017ac:	801a      	strh	r2, [r3, #0]
		  	 P_KP = err * p_kp;
 80017ae:	4b2d      	ldr	r3, [pc, #180]	; (8001864 <main+0x3a4>)
 80017b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017b4:	ee07 3a90 	vmov	s15, r3
 80017b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017bc:	4b23      	ldr	r3, [pc, #140]	; (800184c <main+0x38c>)
 80017be:	edd3 7a00 	vldr	s15, [r3]
 80017c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017c6:	4b28      	ldr	r3, [pc, #160]	; (8001868 <main+0x3a8>)
 80017c8:	edc3 7a00 	vstr	s15, [r3]

		  	 err_sum = err_sum + err*0.0001;
 80017cc:	4b27      	ldr	r3, [pc, #156]	; (800186c <main+0x3ac>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	e04e      	b.n	8001870 <main+0x3b0>
 80017d2:	bf00      	nop
 80017d4:	f3af 8000 	nop.w
 80017d8:	b020c49c 	.word	0xb020c49c
 80017dc:	3f916872 	.word	0x3f916872
 80017e0:	200002f4 	.word	0x200002f4
 80017e4:	200002f8 	.word	0x200002f8
 80017e8:	20000340 	.word	0x20000340
 80017ec:	20000344 	.word	0x20000344
 80017f0:	200003a8 	.word	0x200003a8
 80017f4:	2000057c 	.word	0x2000057c
 80017f8:	0800bd18 	.word	0x0800bd18
 80017fc:	200001f4 	.word	0x200001f4
 8001800:	200007f4 	.word	0x200007f4
 8001804:	2000083c 	.word	0x2000083c
 8001808:	200006d4 	.word	0x200006d4
 800180c:	40020c00 	.word	0x40020c00
 8001810:	20000eb8 	.word	0x20000eb8
 8001814:	20000ea0 	.word	0x20000ea0
 8001818:	20000ea4 	.word	0x20000ea4
 800181c:	20000ea8 	.word	0x20000ea8
 8001820:	20000eac 	.word	0x20000eac
 8001824:	20000ebc 	.word	0x20000ebc
 8001828:	2000039c 	.word	0x2000039c
 800182c:	42c80000 	.word	0x42c80000
 8001830:	200003a4 	.word	0x200003a4
 8001834:	10624dd3 	.word	0x10624dd3
 8001838:	200003b4 	.word	0x200003b4
 800183c:	51eb851f 	.word	0x51eb851f
 8001840:	cccccccd 	.word	0xcccccccd
 8001844:	0800bd28 	.word	0x0800bd28
 8001848:	20000ec0 	.word	0x20000ec0
 800184c:	200003d8 	.word	0x200003d8
 8001850:	200003dc 	.word	0x200003dc
 8001854:	200003e0 	.word	0x200003e0
 8001858:	3c23d70a 	.word	0x3c23d70a
 800185c:	200003c2 	.word	0x200003c2
 8001860:	2000038c 	.word	0x2000038c
 8001864:	200003c4 	.word	0x200003c4
 8001868:	200003e4 	.word	0x200003e4
 800186c:	200003c8 	.word	0x200003c8
 8001870:	4618      	mov	r0, r3
 8001872:	f7fe fe79 	bl	8000568 <__aeabi_f2d>
 8001876:	4680      	mov	r8, r0
 8001878:	4689      	mov	r9, r1
 800187a:	4b99      	ldr	r3, [pc, #612]	; (8001ae0 <main+0x620>)
 800187c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001880:	4618      	mov	r0, r3
 8001882:	f7fe fe5f 	bl	8000544 <__aeabi_i2d>
 8001886:	a394      	add	r3, pc, #592	; (adr r3, 8001ad8 <main+0x618>)
 8001888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188c:	f7fe fec4 	bl	8000618 <__aeabi_dmul>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4640      	mov	r0, r8
 8001896:	4649      	mov	r1, r9
 8001898:	f7fe fd08 	bl	80002ac <__adddf3>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4610      	mov	r0, r2
 80018a2:	4619      	mov	r1, r3
 80018a4:	f7ff f9b0 	bl	8000c08 <__aeabi_d2f>
 80018a8:	4603      	mov	r3, r0
 80018aa:	4a8e      	ldr	r2, [pc, #568]	; (8001ae4 <main+0x624>)
 80018ac:	6013      	str	r3, [r2, #0]
		  	 if(p_PID==0)
 80018ae:	4b8e      	ldr	r3, [pc, #568]	; (8001ae8 <main+0x628>)
 80018b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018b4:	f04f 0200 	mov.w	r2, #0
 80018b8:	f04f 0300 	mov.w	r3, #0
 80018bc:	f7ff f914 	bl	8000ae8 <__aeabi_dcmpeq>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <main+0x40e>
		  	 {
		  		err_sum=0;
 80018c6:	4b87      	ldr	r3, [pc, #540]	; (8001ae4 <main+0x624>)
 80018c8:	f04f 0200 	mov.w	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
		  	 }
			P_KI = err_sum  * p_ki;
 80018ce:	4b85      	ldr	r3, [pc, #532]	; (8001ae4 <main+0x624>)
 80018d0:	ed93 7a00 	vldr	s14, [r3]
 80018d4:	4b85      	ldr	r3, [pc, #532]	; (8001aec <main+0x62c>)
 80018d6:	edd3 7a00 	vldr	s15, [r3]
 80018da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018de:	4b84      	ldr	r3, [pc, #528]	; (8001af0 <main+0x630>)
 80018e0:	edc3 7a00 	vstr	s15, [r3]

			err_d=(err - previous_err)/0.0001;
 80018e4:	4b7e      	ldr	r3, [pc, #504]	; (8001ae0 <main+0x620>)
 80018e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ea:	ee07 3a90 	vmov	s15, r3
 80018ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018f2:	4b80      	ldr	r3, [pc, #512]	; (8001af4 <main+0x634>)
 80018f4:	edd3 7a00 	vldr	s15, [r3]
 80018f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018fc:	ee17 0a90 	vmov	r0, s15
 8001900:	f7fe fe32 	bl	8000568 <__aeabi_f2d>
 8001904:	a374      	add	r3, pc, #464	; (adr r3, 8001ad8 <main+0x618>)
 8001906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190a:	f7fe ffaf 	bl	800086c <__aeabi_ddiv>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	4979      	ldr	r1, [pc, #484]	; (8001af8 <main+0x638>)
 8001914:	e9c1 2300 	strd	r2, r3, [r1]
			previous_err=err;
 8001918:	4b71      	ldr	r3, [pc, #452]	; (8001ae0 <main+0x620>)
 800191a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800191e:	ee07 3a90 	vmov	s15, r3
 8001922:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001926:	4b73      	ldr	r3, [pc, #460]	; (8001af4 <main+0x634>)
 8001928:	edc3 7a00 	vstr	s15, [r3]
			P_KD = err_d * p_kd;
 800192c:	4b73      	ldr	r3, [pc, #460]	; (8001afc <main+0x63c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f7fe fe19 	bl	8000568 <__aeabi_f2d>
 8001936:	4b70      	ldr	r3, [pc, #448]	; (8001af8 <main+0x638>)
 8001938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193c:	f7fe fe6c 	bl	8000618 <__aeabi_dmul>
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	496e      	ldr	r1, [pc, #440]	; (8001b00 <main+0x640>)
 8001946:	e9c1 2300 	strd	r2, r3, [r1]

		  	p_PID = P_KP + P_KI + P_KD;
 800194a:	4b6e      	ldr	r3, [pc, #440]	; (8001b04 <main+0x644>)
 800194c:	ed93 7a00 	vldr	s14, [r3]
 8001950:	4b67      	ldr	r3, [pc, #412]	; (8001af0 <main+0x630>)
 8001952:	edd3 7a00 	vldr	s15, [r3]
 8001956:	ee77 7a27 	vadd.f32	s15, s14, s15
 800195a:	ee17 0a90 	vmov	r0, s15
 800195e:	f7fe fe03 	bl	8000568 <__aeabi_f2d>
 8001962:	4b67      	ldr	r3, [pc, #412]	; (8001b00 <main+0x640>)
 8001964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001968:	f7fe fca0 	bl	80002ac <__adddf3>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	495d      	ldr	r1, [pc, #372]	; (8001ae8 <main+0x628>)
 8001972:	e9c1 2300 	strd	r2, r3, [r1]

		  	if(p_PID >= 400)
 8001976:	4b5c      	ldr	r3, [pc, #368]	; (8001ae8 <main+0x628>)
 8001978:	e9d3 0100 	ldrd	r0, r1, [r3]
 800197c:	f04f 0200 	mov.w	r2, #0
 8001980:	4b61      	ldr	r3, [pc, #388]	; (8001b08 <main+0x648>)
 8001982:	f7ff f8cf 	bl	8000b24 <__aeabi_dcmpge>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d006      	beq.n	800199a <main+0x4da>
		  	{
		  		p_PID = 400;
 800198c:	4956      	ldr	r1, [pc, #344]	; (8001ae8 <main+0x628>)
 800198e:	f04f 0200 	mov.w	r2, #0
 8001992:	4b5d      	ldr	r3, [pc, #372]	; (8001b08 <main+0x648>)
 8001994:	e9c1 2300 	strd	r2, r3, [r1]
 8001998:	e010      	b.n	80019bc <main+0x4fc>
		  	}
		  	else if(p_PID <= -400)
 800199a:	4b53      	ldr	r3, [pc, #332]	; (8001ae8 <main+0x628>)
 800199c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019a0:	f04f 0200 	mov.w	r2, #0
 80019a4:	4b59      	ldr	r3, [pc, #356]	; (8001b0c <main+0x64c>)
 80019a6:	f7ff f8b3 	bl	8000b10 <__aeabi_dcmple>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d005      	beq.n	80019bc <main+0x4fc>
			{
				  p_PID = -400;
 80019b0:	494d      	ldr	r1, [pc, #308]	; (8001ae8 <main+0x628>)
 80019b2:	f04f 0200 	mov.w	r2, #0
 80019b6:	4b55      	ldr	r3, [pc, #340]	; (8001b0c <main+0x64c>)
 80019b8:	e9c1 2300 	strd	r2, r3, [r1]
		    }

			  if(p_PID > 0)
 80019bc:	4b4a      	ldr	r3, [pc, #296]	; (8001ae8 <main+0x628>)
 80019be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019c2:	f04f 0200 	mov.w	r2, #0
 80019c6:	f04f 0300 	mov.w	r3, #0
 80019ca:	f7ff f8b5 	bl	8000b38 <__aeabi_dcmpgt>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d010      	beq.n	80019f6 <main+0x536>
			  {
				 GPIOE->ODR &= ~1<<0; // go
 80019d4:	4b4e      	ldr	r3, [pc, #312]	; (8001b10 <main+0x650>)
 80019d6:	695b      	ldr	r3, [r3, #20]
 80019d8:	4a4d      	ldr	r2, [pc, #308]	; (8001b10 <main+0x650>)
 80019da:	f023 0301 	bic.w	r3, r3, #1
 80019de:	6153      	str	r3, [r2, #20]
				TIM3->CCR1 = p_PID;
 80019e0:	4b41      	ldr	r3, [pc, #260]	; (8001ae8 <main+0x628>)
 80019e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e6:	4e4b      	ldr	r6, [pc, #300]	; (8001b14 <main+0x654>)
 80019e8:	4610      	mov	r0, r2
 80019ea:	4619      	mov	r1, r3
 80019ec:	f7ff f8ec 	bl	8000bc8 <__aeabi_d2uiz>
 80019f0:	4603      	mov	r3, r0
 80019f2:	6373      	str	r3, [r6, #52]	; 0x34
 80019f4:	e036      	b.n	8001a64 <main+0x5a4>
			  }
			  else if(p_PID < 0)
 80019f6:	4b3c      	ldr	r3, [pc, #240]	; (8001ae8 <main+0x628>)
 80019f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019fc:	f04f 0200 	mov.w	r2, #0
 8001a00:	f04f 0300 	mov.w	r3, #0
 8001a04:	f7ff f87a 	bl	8000afc <__aeabi_dcmplt>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d019      	beq.n	8001a42 <main+0x582>
			  {
				 GPIOE->ODR |= 1<<0; // back
 8001a0e:	4b40      	ldr	r3, [pc, #256]	; (8001b10 <main+0x650>)
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	4a3f      	ldr	r2, [pc, #252]	; (8001b10 <main+0x650>)
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	6153      	str	r3, [r2, #20]
				p_PID=-p_PID;
 8001a1a:	4b33      	ldr	r3, [pc, #204]	; (8001ae8 <main+0x628>)
 8001a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a20:	4614      	mov	r4, r2
 8001a22:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001a26:	4b30      	ldr	r3, [pc, #192]	; (8001ae8 <main+0x628>)
 8001a28:	e9c3 4500 	strd	r4, r5, [r3]
				TIM3->CCR1 = p_PID;
 8001a2c:	4b2e      	ldr	r3, [pc, #184]	; (8001ae8 <main+0x628>)
 8001a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a32:	4e38      	ldr	r6, [pc, #224]	; (8001b14 <main+0x654>)
 8001a34:	4610      	mov	r0, r2
 8001a36:	4619      	mov	r1, r3
 8001a38:	f7ff f8c6 	bl	8000bc8 <__aeabi_d2uiz>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	6373      	str	r3, [r6, #52]	; 0x34
 8001a40:	e010      	b.n	8001a64 <main+0x5a4>
			  }

			else
			{
				p_PID=0;
 8001a42:	4929      	ldr	r1, [pc, #164]	; (8001ae8 <main+0x628>)
 8001a44:	f04f 0200 	mov.w	r2, #0
 8001a48:	f04f 0300 	mov.w	r3, #0
 8001a4c:	e9c1 2300 	strd	r2, r3, [r1]
				TIM3->CCR1 = p_PID;
 8001a50:	4b25      	ldr	r3, [pc, #148]	; (8001ae8 <main+0x628>)
 8001a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a56:	4e2f      	ldr	r6, [pc, #188]	; (8001b14 <main+0x654>)
 8001a58:	4610      	mov	r0, r2
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	f7ff f8b4 	bl	8000bc8 <__aeabi_d2uiz>
 8001a60:	4603      	mov	r3, r0
 8001a62:	6373      	str	r3, [r6, #52]	; 0x34
			}

			  tim13_flag=0;
 8001a64:	4b2c      	ldr	r3, [pc, #176]	; (8001b18 <main+0x658>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
if(encoder_count>=512)
{
	TIM3->CCR1 = 0;  //TIM3->CCR1
}
*/
	  if(RX_flag==1)
 8001a6a:	4b2c      	ldr	r3, [pc, #176]	; (8001b1c <main+0x65c>)
 8001a6c:	f993 3000 	ldrsb.w	r3, [r3]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	f47f ad77 	bne.w	8001564 <main+0xa4>
	  {
		 // RX_flag=0;
		//  TIM4->CNT=0;
	  	 		TIM3->CCR1 = 1000;
 8001a76:	4b27      	ldr	r3, [pc, #156]	; (8001b14 <main+0x654>)
 8001a78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a7c:	635a      	str	r2, [r3, #52]	; 0x34
	  	 		TIM3->CCR2 = 1000;
 8001a7e:	4b25      	ldr	r3, [pc, #148]	; (8001b14 <main+0x654>)
 8001a80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a84:	639a      	str	r2, [r3, #56]	; 0x38
	  	 			if(encoder_count>=1200)
 8001a86:	4b26      	ldr	r3, [pc, #152]	; (8001b20 <main+0x660>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001a8e:	f4ff ad69 	bcc.w	8001564 <main+0xa4>
	  		 		{
	  	 				TIM3->CCR1 = 50;
 8001a92:	4b20      	ldr	r3, [pc, #128]	; (8001b14 <main+0x654>)
 8001a94:	2232      	movs	r2, #50	; 0x32
 8001a96:	635a      	str	r2, [r3, #52]	; 0x34

	  	 				GPIOG->ODR |= 1<<0;
 8001a98:	4b22      	ldr	r3, [pc, #136]	; (8001b24 <main+0x664>)
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	4a21      	ldr	r2, [pc, #132]	; (8001b24 <main+0x664>)
 8001a9e:	f043 0301 	orr.w	r3, r3, #1
 8001aa2:	6153      	str	r3, [r2, #20]
	  	 				HAL_Delay(100);
 8001aa4:	2064      	movs	r0, #100	; 0x64
 8001aa6:	f001 fedf 	bl	8003868 <HAL_Delay>
	  	 				GPIOG->ODR &= ~1<<0;
 8001aaa:	4b1e      	ldr	r3, [pc, #120]	; (8001b24 <main+0x664>)
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	4a1d      	ldr	r2, [pc, #116]	; (8001b24 <main+0x664>)
 8001ab0:	f023 0301 	bic.w	r3, r3, #1
 8001ab4:	6153      	str	r3, [r2, #20]
	  	 				TIM3->CCR1 = 50;
 8001ab6:	4b17      	ldr	r3, [pc, #92]	; (8001b14 <main+0x654>)
 8001ab8:	2232      	movs	r2, #50	; 0x32
 8001aba:	635a      	str	r2, [r3, #52]	; 0x34
	  	 				if(encoder_count>=512*3)
 8001abc:	4b18      	ldr	r3, [pc, #96]	; (8001b20 <main+0x660>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001ac4:	f4ff ad4e 	bcc.w	8001564 <main+0xa4>
	  	 				{
	  	 					TIM3->CCR1 = 0;
 8001ac8:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <main+0x654>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	635a      	str	r2, [r3, #52]	; 0x34
	  	 					RX_flag=0;
 8001ace:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <main+0x65c>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	701a      	strb	r2, [r3, #0]
	  if(tim6_flag==1)
 8001ad4:	e546      	b.n	8001564 <main+0xa4>
 8001ad6:	bf00      	nop
 8001ad8:	eb1c432d 	.word	0xeb1c432d
 8001adc:	3f1a36e2 	.word	0x3f1a36e2
 8001ae0:	200003c4 	.word	0x200003c4
 8001ae4:	200003c8 	.word	0x200003c8
 8001ae8:	200003d0 	.word	0x200003d0
 8001aec:	200003dc 	.word	0x200003dc
 8001af0:	200003e8 	.word	0x200003e8
 8001af4:	20000400 	.word	0x20000400
 8001af8:	200003f8 	.word	0x200003f8
 8001afc:	200003e0 	.word	0x200003e0
 8001b00:	200003f0 	.word	0x200003f0
 8001b04:	200003e4 	.word	0x200003e4
 8001b08:	40790000 	.word	0x40790000
 8001b0c:	c0790000 	.word	0xc0790000
 8001b10:	40021000 	.word	0x40021000
 8001b14:	40000400 	.word	0x40000400
 8001b18:	20000ec0 	.word	0x20000ec0
 8001b1c:	20000390 	.word	0x20000390
 8001b20:	2000038c 	.word	0x2000038c
 8001b24:	40021800 	.word	0x40021800

08001b28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b094      	sub	sp, #80	; 0x50
 8001b2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b2e:	f107 0320 	add.w	r3, r7, #32
 8001b32:	2230      	movs	r2, #48	; 0x30
 8001b34:	2100      	movs	r1, #0
 8001b36:	4618      	mov	r0, r3
 8001b38:	f007 ffdd 	bl	8009af6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b3c:	f107 030c 	add.w	r3, r7, #12
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60bb      	str	r3, [r7, #8]
 8001b50:	4b28      	ldr	r3, [pc, #160]	; (8001bf4 <SystemClock_Config+0xcc>)
 8001b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b54:	4a27      	ldr	r2, [pc, #156]	; (8001bf4 <SystemClock_Config+0xcc>)
 8001b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b5a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b5c:	4b25      	ldr	r3, [pc, #148]	; (8001bf4 <SystemClock_Config+0xcc>)
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b64:	60bb      	str	r3, [r7, #8]
 8001b66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b68:	2300      	movs	r3, #0
 8001b6a:	607b      	str	r3, [r7, #4]
 8001b6c:	4b22      	ldr	r3, [pc, #136]	; (8001bf8 <SystemClock_Config+0xd0>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a21      	ldr	r2, [pc, #132]	; (8001bf8 <SystemClock_Config+0xd0>)
 8001b72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b76:	6013      	str	r3, [r2, #0]
 8001b78:	4b1f      	ldr	r3, [pc, #124]	; (8001bf8 <SystemClock_Config+0xd0>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b80:	607b      	str	r3, [r7, #4]
 8001b82:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b84:	2301      	movs	r3, #1
 8001b86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001b88:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b92:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b98:	2304      	movs	r3, #4
 8001b9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001b9c:	23a8      	movs	r3, #168	; 0xa8
 8001b9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001ba4:	2307      	movs	r3, #7
 8001ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ba8:	f107 0320 	add.w	r3, r7, #32
 8001bac:	4618      	mov	r0, r3
 8001bae:	f003 feed 	bl	800598c <HAL_RCC_OscConfig>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001bb8:	f000 fdea 	bl	8002790 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bbc:	230f      	movs	r3, #15
 8001bbe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001bc8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001bcc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001bce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bd2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001bd4:	f107 030c 	add.w	r3, r7, #12
 8001bd8:	2105      	movs	r1, #5
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f004 f94e 	bl	8005e7c <HAL_RCC_ClockConfig>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001be6:	f000 fdd3 	bl	8002790 <Error_Handler>
  }
}
 8001bea:	bf00      	nop
 8001bec:	3750      	adds	r7, #80	; 0x50
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40007000 	.word	0x40007000

08001bfc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c02:	463b      	mov	r3, r7
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001c0e:	4b2f      	ldr	r3, [pc, #188]	; (8001ccc <MX_ADC1_Init+0xd0>)
 8001c10:	4a2f      	ldr	r2, [pc, #188]	; (8001cd0 <MX_ADC1_Init+0xd4>)
 8001c12:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001c14:	4b2d      	ldr	r3, [pc, #180]	; (8001ccc <MX_ADC1_Init+0xd0>)
 8001c16:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c1a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c1c:	4b2b      	ldr	r3, [pc, #172]	; (8001ccc <MX_ADC1_Init+0xd0>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001c22:	4b2a      	ldr	r3, [pc, #168]	; (8001ccc <MX_ADC1_Init+0xd0>)
 8001c24:	2201      	movs	r2, #1
 8001c26:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c28:	4b28      	ldr	r3, [pc, #160]	; (8001ccc <MX_ADC1_Init+0xd0>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c2e:	4b27      	ldr	r3, [pc, #156]	; (8001ccc <MX_ADC1_Init+0xd0>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001c36:	4b25      	ldr	r3, [pc, #148]	; (8001ccc <MX_ADC1_Init+0xd0>)
 8001c38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8001c3e:	4b23      	ldr	r3, [pc, #140]	; (8001ccc <MX_ADC1_Init+0xd0>)
 8001c40:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001c44:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c46:	4b21      	ldr	r3, [pc, #132]	; (8001ccc <MX_ADC1_Init+0xd0>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001c4c:	4b1f      	ldr	r3, [pc, #124]	; (8001ccc <MX_ADC1_Init+0xd0>)
 8001c4e:	2202      	movs	r2, #2
 8001c50:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001c52:	4b1e      	ldr	r3, [pc, #120]	; (8001ccc <MX_ADC1_Init+0xd0>)
 8001c54:	2201      	movs	r2, #1
 8001c56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c5a:	4b1c      	ldr	r3, [pc, #112]	; (8001ccc <MX_ADC1_Init+0xd0>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c60:	481a      	ldr	r0, [pc, #104]	; (8001ccc <MX_ADC1_Init+0xd0>)
 8001c62:	f001 fe25 	bl	80038b0 <HAL_ADC_Init>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001c6c:	f000 fd90 	bl	8002790 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001c70:	2303      	movs	r3, #3
 8001c72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001c74:	2301      	movs	r3, #1
 8001c76:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001c78:	2307      	movs	r3, #7
 8001c7a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c7c:	463b      	mov	r3, r7
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4812      	ldr	r0, [pc, #72]	; (8001ccc <MX_ADC1_Init+0xd0>)
 8001c82:	f002 f8a1 	bl	8003dc8 <HAL_ADC_ConfigChannel>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001c8c:	f000 fd80 	bl	8002790 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001c90:	2304      	movs	r3, #4
 8001c92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001c94:	2302      	movs	r3, #2
 8001c96:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c98:	463b      	mov	r3, r7
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	480b      	ldr	r0, [pc, #44]	; (8001ccc <MX_ADC1_Init+0xd0>)
 8001c9e:	f002 f893 	bl	8003dc8 <HAL_ADC_ConfigChannel>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001ca8:	f000 fd72 	bl	8002790 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  ADC1->CR1 |=  (1<<5);		// EOCIE=1: Interrupt enable for EOC
 8001cac:	4b08      	ldr	r3, [pc, #32]	; (8001cd0 <MX_ADC1_Init+0xd4>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	4a07      	ldr	r2, [pc, #28]	; (8001cd0 <MX_ADC1_Init+0xd4>)
 8001cb2:	f043 0320 	orr.w	r3, r3, #32
 8001cb6:	6053      	str	r3, [r2, #4]
  NVIC->ISER[0] |= (1<<18);	// Enable ADC global Interrupt             ?��링파?��?��?�� 추�?
 8001cb8:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <MX_ADC1_Init+0xd8>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a05      	ldr	r2, [pc, #20]	; (8001cd4 <MX_ADC1_Init+0xd8>)
 8001cbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cc2:	6013      	str	r3, [r2, #0]

  //HAL_ADC_Start_DMA(&hadc1, &ADC1_value,2);
  // HAL_ADC_Start_DMA(&hadc1, &ADC1_value[1], 1);
  /* USER CODE END ADC1_Init 2 */

}
 8001cc4:	bf00      	nop
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	2000057c 	.word	0x2000057c
 8001cd0:	40012000 	.word	0x40012000
 8001cd4:	e000e100 	.word	0xe000e100

08001cd8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001cdc:	4b1f      	ldr	r3, [pc, #124]	; (8001d5c <MX_ETH_Init+0x84>)
 8001cde:	4a20      	ldr	r2, [pc, #128]	; (8001d60 <MX_ETH_Init+0x88>)
 8001ce0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001ce2:	4b20      	ldr	r3, [pc, #128]	; (8001d64 <MX_ETH_Init+0x8c>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001ce8:	4b1e      	ldr	r3, [pc, #120]	; (8001d64 <MX_ETH_Init+0x8c>)
 8001cea:	2280      	movs	r2, #128	; 0x80
 8001cec:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001cee:	4b1d      	ldr	r3, [pc, #116]	; (8001d64 <MX_ETH_Init+0x8c>)
 8001cf0:	22e1      	movs	r2, #225	; 0xe1
 8001cf2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001cf4:	4b1b      	ldr	r3, [pc, #108]	; (8001d64 <MX_ETH_Init+0x8c>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001cfa:	4b1a      	ldr	r3, [pc, #104]	; (8001d64 <MX_ETH_Init+0x8c>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001d00:	4b18      	ldr	r3, [pc, #96]	; (8001d64 <MX_ETH_Init+0x8c>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001d06:	4b15      	ldr	r3, [pc, #84]	; (8001d5c <MX_ETH_Init+0x84>)
 8001d08:	4a16      	ldr	r2, [pc, #88]	; (8001d64 <MX_ETH_Init+0x8c>)
 8001d0a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001d0c:	4b13      	ldr	r3, [pc, #76]	; (8001d5c <MX_ETH_Init+0x84>)
 8001d0e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001d12:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001d14:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <MX_ETH_Init+0x84>)
 8001d16:	4a14      	ldr	r2, [pc, #80]	; (8001d68 <MX_ETH_Init+0x90>)
 8001d18:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001d1a:	4b10      	ldr	r3, [pc, #64]	; (8001d5c <MX_ETH_Init+0x84>)
 8001d1c:	4a13      	ldr	r2, [pc, #76]	; (8001d6c <MX_ETH_Init+0x94>)
 8001d1e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001d20:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <MX_ETH_Init+0x84>)
 8001d22:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001d26:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001d28:	480c      	ldr	r0, [pc, #48]	; (8001d5c <MX_ETH_Init+0x84>)
 8001d2a:	f003 f81b 	bl	8004d64 <HAL_ETH_Init>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001d34:	f000 fd2c 	bl	8002790 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001d38:	2238      	movs	r2, #56	; 0x38
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	480c      	ldr	r0, [pc, #48]	; (8001d70 <MX_ETH_Init+0x98>)
 8001d3e:	f007 feda 	bl	8009af6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001d42:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <MX_ETH_Init+0x98>)
 8001d44:	2221      	movs	r2, #33	; 0x21
 8001d46:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001d48:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <MX_ETH_Init+0x98>)
 8001d4a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001d4e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001d50:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <MX_ETH_Init+0x98>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20000624 	.word	0x20000624
 8001d60:	40028000 	.word	0x40028000
 8001d64:	20000eb0 	.word	0x20000eb0
 8001d68:	200004dc 	.word	0x200004dc
 8001d6c:	2000043c 	.word	0x2000043c
 8001d70:	20000404 	.word	0x20000404

08001d74 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d7a:	f107 0308 	add.w	r3, r7, #8
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	605a      	str	r2, [r3, #4]
 8001d84:	609a      	str	r2, [r3, #8]
 8001d86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d88:	463b      	mov	r3, r7
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d90:	4b1e      	ldr	r3, [pc, #120]	; (8001e0c <MX_TIM1_Init+0x98>)
 8001d92:	4a1f      	ldr	r2, [pc, #124]	; (8001e10 <MX_TIM1_Init+0x9c>)
 8001d94:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001d96:	4b1d      	ldr	r3, [pc, #116]	; (8001e0c <MX_TIM1_Init+0x98>)
 8001d98:	2253      	movs	r2, #83	; 0x53
 8001d9a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d9c:	4b1b      	ldr	r3, [pc, #108]	; (8001e0c <MX_TIM1_Init+0x98>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001da2:	4b1a      	ldr	r3, [pc, #104]	; (8001e0c <MX_TIM1_Init+0x98>)
 8001da4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001da8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001daa:	4b18      	ldr	r3, [pc, #96]	; (8001e0c <MX_TIM1_Init+0x98>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001db0:	4b16      	ldr	r3, [pc, #88]	; (8001e0c <MX_TIM1_Init+0x98>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001db6:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <MX_TIM1_Init+0x98>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001dbc:	4813      	ldr	r0, [pc, #76]	; (8001e0c <MX_TIM1_Init+0x98>)
 8001dbe:	f004 fa7d 	bl	80062bc <HAL_TIM_Base_Init>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001dc8:	f000 fce2 	bl	8002790 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dd0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001dd2:	f107 0308 	add.w	r3, r7, #8
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	480c      	ldr	r0, [pc, #48]	; (8001e0c <MX_TIM1_Init+0x98>)
 8001dda:	f005 f8a1 	bl	8006f20 <HAL_TIM_ConfigClockSource>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001de4:	f000 fcd4 	bl	8002790 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001de8:	2300      	movs	r3, #0
 8001dea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dec:	2300      	movs	r3, #0
 8001dee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001df0:	463b      	mov	r3, r7
 8001df2:	4619      	mov	r1, r3
 8001df4:	4805      	ldr	r0, [pc, #20]	; (8001e0c <MX_TIM1_Init+0x98>)
 8001df6:	f005 fca9 	bl	800774c <HAL_TIMEx_MasterConfigSynchronization>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001e00:	f000 fcc6 	bl	8002790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001e04:	bf00      	nop
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	200006d4 	.word	0x200006d4
 8001e10:	40010000 	.word	0x40010000

08001e14 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08c      	sub	sp, #48	; 0x30
 8001e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e1a:	f107 030c 	add.w	r3, r7, #12
 8001e1e:	2224      	movs	r2, #36	; 0x24
 8001e20:	2100      	movs	r1, #0
 8001e22:	4618      	mov	r0, r3
 8001e24:	f007 fe67 	bl	8009af6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e28:	1d3b      	adds	r3, r7, #4
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e30:	4b23      	ldr	r3, [pc, #140]	; (8001ec0 <MX_TIM2_Init+0xac>)
 8001e32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 340;
 8001e38:	4b21      	ldr	r3, [pc, #132]	; (8001ec0 <MX_TIM2_Init+0xac>)
 8001e3a:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8001e3e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e40:	4b1f      	ldr	r3, [pc, #124]	; (8001ec0 <MX_TIM2_Init+0xac>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65000;
 8001e46:	4b1e      	ldr	r3, [pc, #120]	; (8001ec0 <MX_TIM2_Init+0xac>)
 8001e48:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001e4c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e4e:	4b1c      	ldr	r3, [pc, #112]	; (8001ec0 <MX_TIM2_Init+0xac>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e54:	4b1a      	ldr	r3, [pc, #104]	; (8001ec0 <MX_TIM2_Init+0xac>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e62:	2301      	movs	r3, #1
 8001e64:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e66:	2300      	movs	r3, #0
 8001e68:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e72:	2301      	movs	r3, #1
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e76:	2300      	movs	r3, #0
 8001e78:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001e7e:	f107 030c 	add.w	r3, r7, #12
 8001e82:	4619      	mov	r1, r3
 8001e84:	480e      	ldr	r0, [pc, #56]	; (8001ec0 <MX_TIM2_Init+0xac>)
 8001e86:	f004 fd09 	bl	800689c <HAL_TIM_Encoder_Init>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001e90:	f000 fc7e 	bl	8002790 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e94:	2300      	movs	r3, #0
 8001e96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e9c:	1d3b      	adds	r3, r7, #4
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4807      	ldr	r0, [pc, #28]	; (8001ec0 <MX_TIM2_Init+0xac>)
 8001ea2:	f005 fc53 	bl	800774c <HAL_TIMEx_MasterConfigSynchronization>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001eac:	f000 fc70 	bl	8002790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001eb0:	213c      	movs	r1, #60	; 0x3c
 8001eb2:	4803      	ldr	r0, [pc, #12]	; (8001ec0 <MX_TIM2_Init+0xac>)
 8001eb4:	f004 fd98 	bl	80069e8 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM2_Init 2 */

}
 8001eb8:	bf00      	nop
 8001eba:	3730      	adds	r7, #48	; 0x30
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	2000071c 	.word	0x2000071c

08001ec4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08e      	sub	sp, #56	; 0x38
 8001ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	605a      	str	r2, [r3, #4]
 8001ed4:	609a      	str	r2, [r3, #8]
 8001ed6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ed8:	f107 0320 	add.w	r3, r7, #32
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ee2:	1d3b      	adds	r3, r7, #4
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	611a      	str	r2, [r3, #16]
 8001ef0:	615a      	str	r2, [r3, #20]
 8001ef2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ef4:	4b48      	ldr	r3, [pc, #288]	; (8002018 <MX_TIM3_Init+0x154>)
 8001ef6:	4a49      	ldr	r2, [pc, #292]	; (800201c <MX_TIM3_Init+0x158>)
 8001ef8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 840-1;
 8001efa:	4b47      	ldr	r3, [pc, #284]	; (8002018 <MX_TIM3_Init+0x154>)
 8001efc:	f240 3247 	movw	r2, #839	; 0x347
 8001f00:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f02:	4b45      	ldr	r3, [pc, #276]	; (8002018 <MX_TIM3_Init+0x154>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001f08:	4b43      	ldr	r3, [pc, #268]	; (8002018 <MX_TIM3_Init+0x154>)
 8001f0a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f0e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f10:	4b41      	ldr	r3, [pc, #260]	; (8002018 <MX_TIM3_Init+0x154>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f16:	4b40      	ldr	r3, [pc, #256]	; (8002018 <MX_TIM3_Init+0x154>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f1c:	483e      	ldr	r0, [pc, #248]	; (8002018 <MX_TIM3_Init+0x154>)
 8001f1e:	f004 f9cd 	bl	80062bc <HAL_TIM_Base_Init>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001f28:	f000 fc32 	bl	8002790 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f30:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f36:	4619      	mov	r1, r3
 8001f38:	4837      	ldr	r0, [pc, #220]	; (8002018 <MX_TIM3_Init+0x154>)
 8001f3a:	f004 fff1 	bl	8006f20 <HAL_TIM_ConfigClockSource>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001f44:	f000 fc24 	bl	8002790 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f48:	4833      	ldr	r0, [pc, #204]	; (8002018 <MX_TIM3_Init+0x154>)
 8001f4a:	f004 fb38 	bl	80065be <HAL_TIM_PWM_Init>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001f54:	f000 fc1c 	bl	8002790 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f60:	f107 0320 	add.w	r3, r7, #32
 8001f64:	4619      	mov	r1, r3
 8001f66:	482c      	ldr	r0, [pc, #176]	; (8002018 <MX_TIM3_Init+0x154>)
 8001f68:	f005 fbf0 	bl	800774c <HAL_TIMEx_MasterConfigSynchronization>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001f72:	f000 fc0d 	bl	8002790 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f76:	2360      	movs	r3, #96	; 0x60
 8001f78:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8001f7a:	2364      	movs	r3, #100	; 0x64
 8001f7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f82:	2300      	movs	r3, #0
 8001f84:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f86:	1d3b      	adds	r3, r7, #4
 8001f88:	2200      	movs	r2, #0
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4822      	ldr	r0, [pc, #136]	; (8002018 <MX_TIM3_Init+0x154>)
 8001f8e:	f004 ff05 	bl	8006d9c <HAL_TIM_PWM_ConfigChannel>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001f98:	f000 fbfa 	bl	8002790 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 8001f9c:	4b1e      	ldr	r3, [pc, #120]	; (8002018 <MX_TIM3_Init+0x154>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	699a      	ldr	r2, [r3, #24]
 8001fa2:	4b1d      	ldr	r3, [pc, #116]	; (8002018 <MX_TIM3_Init+0x154>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f022 0208 	bic.w	r2, r2, #8
 8001faa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fac:	1d3b      	adds	r3, r7, #4
 8001fae:	2204      	movs	r2, #4
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4819      	ldr	r0, [pc, #100]	; (8002018 <MX_TIM3_Init+0x154>)
 8001fb4:	f004 fef2 	bl	8006d9c <HAL_TIM_PWM_ConfigChannel>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_TIM3_Init+0xfe>
  {
    Error_Handler();
 8001fbe:	f000 fbe7 	bl	8002790 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_2);
 8001fc2:	4b15      	ldr	r3, [pc, #84]	; (8002018 <MX_TIM3_Init+0x154>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	699a      	ldr	r2, [r3, #24]
 8001fc8:	4b13      	ldr	r3, [pc, #76]	; (8002018 <MX_TIM3_Init+0x154>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fd0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM3_Init 2 */
  TIM3->DIER |= (1<<1);   // CC1IE: Enable the Tim3 CC1 interrupt
 8001fd2:	4b12      	ldr	r3, [pc, #72]	; (800201c <MX_TIM3_Init+0x158>)
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	4a11      	ldr	r2, [pc, #68]	; (800201c <MX_TIM3_Init+0x158>)
 8001fd8:	f043 0302 	orr.w	r3, r3, #2
 8001fdc:	60d3      	str	r3, [r2, #12]
   NVIC->ISER[0] |= (1<<29); // TIM3_CC
 8001fde:	4b10      	ldr	r3, [pc, #64]	; (8002020 <MX_TIM3_Init+0x15c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a0f      	ldr	r2, [pc, #60]	; (8002020 <MX_TIM3_Init+0x15c>)
 8001fe4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001fe8:	6013      	str	r3, [r2, #0]
   TIM3->CCER	|= (1<<0);	// CC1E=1: OC1(TIM5_CH1) Active(Capture/Compare 1 output enable)
 8001fea:	4b0c      	ldr	r3, [pc, #48]	; (800201c <MX_TIM3_Init+0x158>)
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	4a0b      	ldr	r2, [pc, #44]	; (800201c <MX_TIM3_Init+0x158>)
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	6213      	str	r3, [r2, #32]
    					// ?��?��??(40�?????????????????????????????????)?�� ?��?�� ?��?��출력
   TIM3->CR1	|= (1<<0);	// CEN: Counter TIM3 enable
 8001ff6:	4b09      	ldr	r3, [pc, #36]	; (800201c <MX_TIM3_Init+0x158>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a08      	ldr	r2, [pc, #32]	; (800201c <MX_TIM3_Init+0x158>)
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	6013      	str	r3, [r2, #0]

  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8002002:	2100      	movs	r1, #0
 8002004:	4804      	ldr	r0, [pc, #16]	; (8002018 <MX_TIM3_Init+0x154>)
 8002006:	f004 fb33 	bl	8006670 <HAL_TIM_PWM_Start_IT>

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800200a:	4803      	ldr	r0, [pc, #12]	; (8002018 <MX_TIM3_Init+0x154>)
 800200c:	f000 fee2 	bl	8002dd4 <HAL_TIM_MspPostInit>

}
 8002010:	bf00      	nop
 8002012:	3738      	adds	r7, #56	; 0x38
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20000764 	.word	0x20000764
 800201c:	40000400 	.word	0x40000400
 8002020:	e000e100 	.word	0xe000e100

08002024 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b08c      	sub	sp, #48	; 0x30
 8002028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800202a:	f107 030c 	add.w	r3, r7, #12
 800202e:	2224      	movs	r2, #36	; 0x24
 8002030:	2100      	movs	r1, #0
 8002032:	4618      	mov	r0, r3
 8002034:	f007 fd5f 	bl	8009af6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002038:	1d3b      	adds	r3, r7, #4
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002040:	4b23      	ldr	r3, [pc, #140]	; (80020d0 <MX_TIM4_Init+0xac>)
 8002042:	4a24      	ldr	r2, [pc, #144]	; (80020d4 <MX_TIM4_Init+0xb0>)
 8002044:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 340;
 8002046:	4b22      	ldr	r3, [pc, #136]	; (80020d0 <MX_TIM4_Init+0xac>)
 8002048:	f44f 72aa 	mov.w	r2, #340	; 0x154
 800204c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800204e:	4b20      	ldr	r3, [pc, #128]	; (80020d0 <MX_TIM4_Init+0xac>)
 8002050:	2200      	movs	r2, #0
 8002052:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65000;
 8002054:	4b1e      	ldr	r3, [pc, #120]	; (80020d0 <MX_TIM4_Init+0xac>)
 8002056:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 800205a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800205c:	4b1c      	ldr	r3, [pc, #112]	; (80020d0 <MX_TIM4_Init+0xac>)
 800205e:	2200      	movs	r2, #0
 8002060:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002062:	4b1b      	ldr	r3, [pc, #108]	; (80020d0 <MX_TIM4_Init+0xac>)
 8002064:	2200      	movs	r2, #0
 8002066:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002068:	2303      	movs	r3, #3
 800206a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800206c:	2300      	movs	r3, #0
 800206e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002070:	2301      	movs	r3, #1
 8002072:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002074:	2300      	movs	r3, #0
 8002076:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002078:	2300      	movs	r3, #0
 800207a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800207c:	2300      	movs	r3, #0
 800207e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002080:	2301      	movs	r3, #1
 8002082:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002084:	2300      	movs	r3, #0
 8002086:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002088:	2300      	movs	r3, #0
 800208a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800208c:	f107 030c 	add.w	r3, r7, #12
 8002090:	4619      	mov	r1, r3
 8002092:	480f      	ldr	r0, [pc, #60]	; (80020d0 <MX_TIM4_Init+0xac>)
 8002094:	f004 fc02 	bl	800689c <HAL_TIM_Encoder_Init>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800209e:	f000 fb77 	bl	8002790 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020a2:	2300      	movs	r3, #0
 80020a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020a6:	2300      	movs	r3, #0
 80020a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80020aa:	1d3b      	adds	r3, r7, #4
 80020ac:	4619      	mov	r1, r3
 80020ae:	4808      	ldr	r0, [pc, #32]	; (80020d0 <MX_TIM4_Init+0xac>)
 80020b0:	f005 fb4c 	bl	800774c <HAL_TIMEx_MasterConfigSynchronization>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80020ba:	f000 fb69 	bl	8002790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80020be:	213c      	movs	r1, #60	; 0x3c
 80020c0:	4803      	ldr	r0, [pc, #12]	; (80020d0 <MX_TIM4_Init+0xac>)
 80020c2:	f004 fc91 	bl	80069e8 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM4_Init 2 */

}
 80020c6:	bf00      	nop
 80020c8:	3730      	adds	r7, #48	; 0x30
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	200007ac 	.word	0x200007ac
 80020d4:	40000800 	.word	0x40000800

080020d8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020de:	463b      	mov	r3, r7
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80020e6:	4b16      	ldr	r3, [pc, #88]	; (8002140 <MX_TIM6_Init+0x68>)
 80020e8:	4a16      	ldr	r2, [pc, #88]	; (8002144 <MX_TIM6_Init+0x6c>)
 80020ea:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 80020ec:	4b14      	ldr	r3, [pc, #80]	; (8002140 <MX_TIM6_Init+0x68>)
 80020ee:	2253      	movs	r2, #83	; 0x53
 80020f0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020f2:	4b13      	ldr	r3, [pc, #76]	; (8002140 <MX_TIM6_Init+0x68>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 80020f8:	4b11      	ldr	r3, [pc, #68]	; (8002140 <MX_TIM6_Init+0x68>)
 80020fa:	2263      	movs	r2, #99	; 0x63
 80020fc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020fe:	4b10      	ldr	r3, [pc, #64]	; (8002140 <MX_TIM6_Init+0x68>)
 8002100:	2200      	movs	r2, #0
 8002102:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002104:	480e      	ldr	r0, [pc, #56]	; (8002140 <MX_TIM6_Init+0x68>)
 8002106:	f004 f8d9 	bl	80062bc <HAL_TIM_Base_Init>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8002110:	f000 fb3e 	bl	8002790 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002114:	2300      	movs	r3, #0
 8002116:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002118:	2300      	movs	r3, #0
 800211a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800211c:	463b      	mov	r3, r7
 800211e:	4619      	mov	r1, r3
 8002120:	4807      	ldr	r0, [pc, #28]	; (8002140 <MX_TIM6_Init+0x68>)
 8002122:	f005 fb13 	bl	800774c <HAL_TIMEx_MasterConfigSynchronization>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 800212c:	f000 fb30 	bl	8002790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8002130:	4803      	ldr	r0, [pc, #12]	; (8002140 <MX_TIM6_Init+0x68>)
 8002132:	f004 f97b 	bl	800642c <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM6_Init 2 */

}
 8002136:	bf00      	nop
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	200007f4 	.word	0x200007f4
 8002144:	40001000 	.word	0x40001000

08002148 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800214e:	463b      	mov	r3, r7
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002156:	4b16      	ldr	r3, [pc, #88]	; (80021b0 <MX_TIM7_Init+0x68>)
 8002158:	4a16      	ldr	r2, [pc, #88]	; (80021b4 <MX_TIM7_Init+0x6c>)
 800215a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 84-1;
 800215c:	4b14      	ldr	r3, [pc, #80]	; (80021b0 <MX_TIM7_Init+0x68>)
 800215e:	2253      	movs	r2, #83	; 0x53
 8002160:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002162:	4b13      	ldr	r3, [pc, #76]	; (80021b0 <MX_TIM7_Init+0x68>)
 8002164:	2200      	movs	r2, #0
 8002166:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8002168:	4b11      	ldr	r3, [pc, #68]	; (80021b0 <MX_TIM7_Init+0x68>)
 800216a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800216e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002170:	4b0f      	ldr	r3, [pc, #60]	; (80021b0 <MX_TIM7_Init+0x68>)
 8002172:	2200      	movs	r2, #0
 8002174:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002176:	480e      	ldr	r0, [pc, #56]	; (80021b0 <MX_TIM7_Init+0x68>)
 8002178:	f004 f8a0 	bl	80062bc <HAL_TIM_Base_Init>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002182:	f000 fb05 	bl	8002790 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002186:	2300      	movs	r3, #0
 8002188:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800218a:	2300      	movs	r3, #0
 800218c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800218e:	463b      	mov	r3, r7
 8002190:	4619      	mov	r1, r3
 8002192:	4807      	ldr	r0, [pc, #28]	; (80021b0 <MX_TIM7_Init+0x68>)
 8002194:	f005 fada 	bl	800774c <HAL_TIMEx_MasterConfigSynchronization>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800219e:	f000 faf7 	bl	8002790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  HAL_TIM_Base_Start(&htim7);
 80021a2:	4803      	ldr	r0, [pc, #12]	; (80021b0 <MX_TIM7_Init+0x68>)
 80021a4:	f004 f8da 	bl	800635c <HAL_TIM_Base_Start>
  /* USER CODE END TIM7_Init 2 */

}
 80021a8:	bf00      	nop
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	2000083c 	.word	0x2000083c
 80021b4:	40001400 	.word	0x40001400

080021b8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b096      	sub	sp, #88	; 0x58
 80021bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80021c2:	2200      	movs	r2, #0
 80021c4:	601a      	str	r2, [r3, #0]
 80021c6:	605a      	str	r2, [r3, #4]
 80021c8:	609a      	str	r2, [r3, #8]
 80021ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	605a      	str	r2, [r3, #4]
 80021e0:	609a      	str	r2, [r3, #8]
 80021e2:	60da      	str	r2, [r3, #12]
 80021e4:	611a      	str	r2, [r3, #16]
 80021e6:	615a      	str	r2, [r3, #20]
 80021e8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80021ea:	1d3b      	adds	r3, r7, #4
 80021ec:	2220      	movs	r2, #32
 80021ee:	2100      	movs	r1, #0
 80021f0:	4618      	mov	r0, r3
 80021f2:	f007 fc80 	bl	8009af6 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80021f6:	4b3e      	ldr	r3, [pc, #248]	; (80022f0 <MX_TIM8_Init+0x138>)
 80021f8:	4a3e      	ldr	r2, [pc, #248]	; (80022f4 <MX_TIM8_Init+0x13c>)
 80021fa:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 840-1;
 80021fc:	4b3c      	ldr	r3, [pc, #240]	; (80022f0 <MX_TIM8_Init+0x138>)
 80021fe:	f240 3247 	movw	r2, #839	; 0x347
 8002202:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002204:	4b3a      	ldr	r3, [pc, #232]	; (80022f0 <MX_TIM8_Init+0x138>)
 8002206:	2200      	movs	r2, #0
 8002208:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 50-1;
 800220a:	4b39      	ldr	r3, [pc, #228]	; (80022f0 <MX_TIM8_Init+0x138>)
 800220c:	2231      	movs	r2, #49	; 0x31
 800220e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002210:	4b37      	ldr	r3, [pc, #220]	; (80022f0 <MX_TIM8_Init+0x138>)
 8002212:	2200      	movs	r2, #0
 8002214:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002216:	4b36      	ldr	r3, [pc, #216]	; (80022f0 <MX_TIM8_Init+0x138>)
 8002218:	2200      	movs	r2, #0
 800221a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800221c:	4b34      	ldr	r3, [pc, #208]	; (80022f0 <MX_TIM8_Init+0x138>)
 800221e:	2200      	movs	r2, #0
 8002220:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002222:	4833      	ldr	r0, [pc, #204]	; (80022f0 <MX_TIM8_Init+0x138>)
 8002224:	f004 f84a 	bl	80062bc <HAL_TIM_Base_Init>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800222e:	f000 faaf 	bl	8002790 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002232:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002236:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002238:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800223c:	4619      	mov	r1, r3
 800223e:	482c      	ldr	r0, [pc, #176]	; (80022f0 <MX_TIM8_Init+0x138>)
 8002240:	f004 fe6e 	bl	8006f20 <HAL_TIM_ConfigClockSource>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800224a:	f000 faa1 	bl	8002790 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 800224e:	4828      	ldr	r0, [pc, #160]	; (80022f0 <MX_TIM8_Init+0x138>)
 8002250:	f004 f95c 	bl	800650c <HAL_TIM_OC_Init>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800225a:	f000 fa99 	bl	8002790 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800225e:	2320      	movs	r3, #32
 8002260:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002262:	2300      	movs	r3, #0
 8002264:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002266:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800226a:	4619      	mov	r1, r3
 800226c:	4820      	ldr	r0, [pc, #128]	; (80022f0 <MX_TIM8_Init+0x138>)
 800226e:	f005 fa6d 	bl	800774c <HAL_TIMEx_MasterConfigSynchronization>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002278:	f000 fa8a 	bl	8002790 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800227c:	2300      	movs	r3, #0
 800227e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2000;
 8002280:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002284:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002286:	2300      	movs	r3, #0
 8002288:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800228a:	2300      	movs	r3, #0
 800228c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800228e:	2300      	movs	r3, #0
 8002290:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002292:	2300      	movs	r3, #0
 8002294:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002296:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800229a:	220c      	movs	r2, #12
 800229c:	4619      	mov	r1, r3
 800229e:	4814      	ldr	r0, [pc, #80]	; (80022f0 <MX_TIM8_Init+0x138>)
 80022a0:	f004 fd20 	bl	8006ce4 <HAL_TIM_OC_ConfigChannel>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 80022aa:	f000 fa71 	bl	8002790 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80022ae:	2300      	movs	r3, #0
 80022b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80022b2:	2300      	movs	r3, #0
 80022b4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80022b6:	2300      	movs	r3, #0
 80022b8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80022ba:	2300      	movs	r3, #0
 80022bc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80022be:	2300      	movs	r3, #0
 80022c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80022c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022c6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80022c8:	2300      	movs	r3, #0
 80022ca:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80022cc:	1d3b      	adds	r3, r7, #4
 80022ce:	4619      	mov	r1, r3
 80022d0:	4807      	ldr	r0, [pc, #28]	; (80022f0 <MX_TIM8_Init+0x138>)
 80022d2:	f005 fab7 	bl	8007844 <HAL_TIMEx_ConfigBreakDeadTime>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 80022dc:	f000 fa58 	bl	8002790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */
  HAL_TIM_Base_Start_IT(&htim8);
 80022e0:	4803      	ldr	r0, [pc, #12]	; (80022f0 <MX_TIM8_Init+0x138>)
 80022e2:	f004 f8a3 	bl	800642c <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM8_Init 2 */

}
 80022e6:	bf00      	nop
 80022e8:	3758      	adds	r7, #88	; 0x58
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	20000884 	.word	0x20000884
 80022f4:	40010400 	.word	0x40010400

080022f8 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b088      	sub	sp, #32
 80022fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80022fe:	1d3b      	adds	r3, r7, #4
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	605a      	str	r2, [r3, #4]
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	60da      	str	r2, [r3, #12]
 800230a:	611a      	str	r2, [r3, #16]
 800230c:	615a      	str	r2, [r3, #20]
 800230e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002310:	4b1f      	ldr	r3, [pc, #124]	; (8002390 <MX_TIM13_Init+0x98>)
 8002312:	4a20      	ldr	r2, [pc, #128]	; (8002394 <MX_TIM13_Init+0x9c>)
 8002314:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 84-1;
 8002316:	4b1e      	ldr	r3, [pc, #120]	; (8002390 <MX_TIM13_Init+0x98>)
 8002318:	2253      	movs	r2, #83	; 0x53
 800231a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800231c:	4b1c      	ldr	r3, [pc, #112]	; (8002390 <MX_TIM13_Init+0x98>)
 800231e:	2200      	movs	r2, #0
 8002320:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8002322:	4b1b      	ldr	r3, [pc, #108]	; (8002390 <MX_TIM13_Init+0x98>)
 8002324:	2263      	movs	r2, #99	; 0x63
 8002326:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002328:	4b19      	ldr	r3, [pc, #100]	; (8002390 <MX_TIM13_Init+0x98>)
 800232a:	2200      	movs	r2, #0
 800232c:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800232e:	4b18      	ldr	r3, [pc, #96]	; (8002390 <MX_TIM13_Init+0x98>)
 8002330:	2200      	movs	r2, #0
 8002332:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002334:	4816      	ldr	r0, [pc, #88]	; (8002390 <MX_TIM13_Init+0x98>)
 8002336:	f003 ffc1 	bl	80062bc <HAL_TIM_Base_Init>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <MX_TIM13_Init+0x4c>
  {
    Error_Handler();
 8002340:	f000 fa26 	bl	8002790 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8002344:	4812      	ldr	r0, [pc, #72]	; (8002390 <MX_TIM13_Init+0x98>)
 8002346:	f004 f93a 	bl	80065be <HAL_TIM_PWM_Init>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <MX_TIM13_Init+0x5c>
  {
    Error_Handler();
 8002350:	f000 fa1e 	bl	8002790 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002354:	2360      	movs	r3, #96	; 0x60
 8002356:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8002358:	2332      	movs	r3, #50	; 0x32
 800235a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800235c:	2300      	movs	r3, #0
 800235e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002360:	2300      	movs	r3, #0
 8002362:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002364:	1d3b      	adds	r3, r7, #4
 8002366:	2200      	movs	r2, #0
 8002368:	4619      	mov	r1, r3
 800236a:	4809      	ldr	r0, [pc, #36]	; (8002390 <MX_TIM13_Init+0x98>)
 800236c:	f004 fd16 	bl	8006d9c <HAL_TIM_PWM_ConfigChannel>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <MX_TIM13_Init+0x82>
  {
    Error_Handler();
 8002376:	f000 fa0b 	bl	8002790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 800237a:	4805      	ldr	r0, [pc, #20]	; (8002390 <MX_TIM13_Init+0x98>)
 800237c:	f000 fd2a 	bl	8002dd4 <HAL_TIM_MspPostInit>
  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002380:	4803      	ldr	r0, [pc, #12]	; (8002390 <MX_TIM13_Init+0x98>)
 8002382:	f000 fd27 	bl	8002dd4 <HAL_TIM_MspPostInit>

}
 8002386:	bf00      	nop
 8002388:	3720      	adds	r7, #32
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	200008cc 	.word	0x200008cc
 8002394:	40001c00 	.word	0x40001c00

08002398 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800239c:	4b17      	ldr	r3, [pc, #92]	; (80023fc <MX_TIM14_Init+0x64>)
 800239e:	4a18      	ldr	r2, [pc, #96]	; (8002400 <MX_TIM14_Init+0x68>)
 80023a0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8400-1;
 80023a2:	4b16      	ldr	r3, [pc, #88]	; (80023fc <MX_TIM14_Init+0x64>)
 80023a4:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80023a8:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023aa:	4b14      	ldr	r3, [pc, #80]	; (80023fc <MX_TIM14_Init+0x64>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 100-1;
 80023b0:	4b12      	ldr	r3, [pc, #72]	; (80023fc <MX_TIM14_Init+0x64>)
 80023b2:	2263      	movs	r2, #99	; 0x63
 80023b4:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023b6:	4b11      	ldr	r3, [pc, #68]	; (80023fc <MX_TIM14_Init+0x64>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023bc:	4b0f      	ldr	r3, [pc, #60]	; (80023fc <MX_TIM14_Init+0x64>)
 80023be:	2200      	movs	r2, #0
 80023c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80023c2:	480e      	ldr	r0, [pc, #56]	; (80023fc <MX_TIM14_Init+0x64>)
 80023c4:	f003 ff7a 	bl	80062bc <HAL_TIM_Base_Init>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 80023ce:	f000 f9df 	bl	8002790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */
  TIM14->DIER |= (1<<0);   // CC1IE: Enable the Tim14 UG interrupt
 80023d2:	4b0b      	ldr	r3, [pc, #44]	; (8002400 <MX_TIM14_Init+0x68>)
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	4a0a      	ldr	r2, [pc, #40]	; (8002400 <MX_TIM14_Init+0x68>)
 80023d8:	f043 0301 	orr.w	r3, r3, #1
 80023dc:	60d3      	str	r3, [r2, #12]
   NVIC->ISER[1] |= (1<<(45-32)); // TIM14_CC
 80023de:	4b09      	ldr	r3, [pc, #36]	; (8002404 <MX_TIM14_Init+0x6c>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	4a08      	ldr	r2, [pc, #32]	; (8002404 <MX_TIM14_Init+0x6c>)
 80023e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80023e8:	6053      	str	r3, [r2, #4]

   TIM14->CR1	|= (1<<0);	// CEN: Counter TIM14 enable
 80023ea:	4b05      	ldr	r3, [pc, #20]	; (8002400 <MX_TIM14_Init+0x68>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a04      	ldr	r2, [pc, #16]	; (8002400 <MX_TIM14_Init+0x68>)
 80023f0:	f043 0301 	orr.w	r3, r3, #1
 80023f4:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM14_Init 2 */

}
 80023f6:	bf00      	nop
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20000914 	.word	0x20000914
 8002400:	40002000 	.word	0x40002000
 8002404:	e000e100 	.word	0xe000e100

08002408 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800240c:	4b11      	ldr	r3, [pc, #68]	; (8002454 <MX_UART4_Init+0x4c>)
 800240e:	4a12      	ldr	r2, [pc, #72]	; (8002458 <MX_UART4_Init+0x50>)
 8002410:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002412:	4b10      	ldr	r3, [pc, #64]	; (8002454 <MX_UART4_Init+0x4c>)
 8002414:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002418:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800241a:	4b0e      	ldr	r3, [pc, #56]	; (8002454 <MX_UART4_Init+0x4c>)
 800241c:	2200      	movs	r2, #0
 800241e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002420:	4b0c      	ldr	r3, [pc, #48]	; (8002454 <MX_UART4_Init+0x4c>)
 8002422:	2200      	movs	r2, #0
 8002424:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 8002426:	4b0b      	ldr	r3, [pc, #44]	; (8002454 <MX_UART4_Init+0x4c>)
 8002428:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800242c:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800242e:	4b09      	ldr	r3, [pc, #36]	; (8002454 <MX_UART4_Init+0x4c>)
 8002430:	220c      	movs	r2, #12
 8002432:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002434:	4b07      	ldr	r3, [pc, #28]	; (8002454 <MX_UART4_Init+0x4c>)
 8002436:	2200      	movs	r2, #0
 8002438:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800243a:	4b06      	ldr	r3, [pc, #24]	; (8002454 <MX_UART4_Init+0x4c>)
 800243c:	2200      	movs	r2, #0
 800243e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002440:	4804      	ldr	r0, [pc, #16]	; (8002454 <MX_UART4_Init+0x4c>)
 8002442:	f005 fa65 	bl	8007910 <HAL_UART_Init>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <MX_UART4_Init+0x48>
  {
    Error_Handler();
 800244c:	f000 f9a0 	bl	8002790 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002450:	bf00      	nop
 8002452:	bd80      	pop	{r7, pc}
 8002454:	20000344 	.word	0x20000344
 8002458:	40004c00 	.word	0x40004c00

0800245c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002460:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <MX_USART3_UART_Init+0x4c>)
 8002462:	4a12      	ldr	r2, [pc, #72]	; (80024ac <MX_USART3_UART_Init+0x50>)
 8002464:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002466:	4b10      	ldr	r3, [pc, #64]	; (80024a8 <MX_USART3_UART_Init+0x4c>)
 8002468:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800246c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800246e:	4b0e      	ldr	r3, [pc, #56]	; (80024a8 <MX_USART3_UART_Init+0x4c>)
 8002470:	2200      	movs	r2, #0
 8002472:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002474:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <MX_USART3_UART_Init+0x4c>)
 8002476:	2200      	movs	r2, #0
 8002478:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800247a:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <MX_USART3_UART_Init+0x4c>)
 800247c:	2200      	movs	r2, #0
 800247e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002480:	4b09      	ldr	r3, [pc, #36]	; (80024a8 <MX_USART3_UART_Init+0x4c>)
 8002482:	220c      	movs	r2, #12
 8002484:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002486:	4b08      	ldr	r3, [pc, #32]	; (80024a8 <MX_USART3_UART_Init+0x4c>)
 8002488:	2200      	movs	r2, #0
 800248a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800248c:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <MX_USART3_UART_Init+0x4c>)
 800248e:	2200      	movs	r2, #0
 8002490:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002492:	4805      	ldr	r0, [pc, #20]	; (80024a8 <MX_USART3_UART_Init+0x4c>)
 8002494:	f005 fa3c 	bl	8007910 <HAL_UART_Init>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800249e:	f000 f977 	bl	8002790 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	200002f8 	.word	0x200002f8
 80024ac:	40004800 	.word	0x40004800

080024b0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80024b4:	4b14      	ldr	r3, [pc, #80]	; (8002508 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80024ba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80024bc:	4b12      	ldr	r3, [pc, #72]	; (8002508 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024be:	2204      	movs	r2, #4
 80024c0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80024c2:	4b11      	ldr	r3, [pc, #68]	; (8002508 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024c4:	2202      	movs	r2, #2
 80024c6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80024c8:	4b0f      	ldr	r3, [pc, #60]	; (8002508 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80024ce:	4b0e      	ldr	r3, [pc, #56]	; (8002508 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024d0:	2202      	movs	r2, #2
 80024d2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80024d4:	4b0c      	ldr	r3, [pc, #48]	; (8002508 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024d6:	2201      	movs	r2, #1
 80024d8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80024da:	4b0b      	ldr	r3, [pc, #44]	; (8002508 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024dc:	2200      	movs	r2, #0
 80024de:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80024e0:	4b09      	ldr	r3, [pc, #36]	; (8002508 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80024e6:	4b08      	ldr	r3, [pc, #32]	; (8002508 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024e8:	2201      	movs	r2, #1
 80024ea:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80024ec:	4b06      	ldr	r3, [pc, #24]	; (8002508 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80024f2:	4805      	ldr	r0, [pc, #20]	; (8002508 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024f4:	f003 f93b 	bl	800576e <HAL_PCD_Init>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80024fe:	f000 f947 	bl	8002790 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002502:	bf00      	nop
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	200009bc 	.word	0x200009bc

0800250c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002512:	2300      	movs	r3, #0
 8002514:	607b      	str	r3, [r7, #4]
 8002516:	4b17      	ldr	r3, [pc, #92]	; (8002574 <MX_DMA_Init+0x68>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	4a16      	ldr	r2, [pc, #88]	; (8002574 <MX_DMA_Init+0x68>)
 800251c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002520:	6313      	str	r3, [r2, #48]	; 0x30
 8002522:	4b14      	ldr	r3, [pc, #80]	; (8002574 <MX_DMA_Init+0x68>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800252a:	607b      	str	r3, [r7, #4]
 800252c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	603b      	str	r3, [r7, #0]
 8002532:	4b10      	ldr	r3, [pc, #64]	; (8002574 <MX_DMA_Init+0x68>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	4a0f      	ldr	r2, [pc, #60]	; (8002574 <MX_DMA_Init+0x68>)
 8002538:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800253c:	6313      	str	r3, [r2, #48]	; 0x30
 800253e:	4b0d      	ldr	r3, [pc, #52]	; (8002574 <MX_DMA_Init+0x68>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002546:	603b      	str	r3, [r7, #0]
 8002548:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800254a:	2200      	movs	r2, #0
 800254c:	2100      	movs	r1, #0
 800254e:	2011      	movs	r0, #17
 8002550:	f001 ffcf 	bl	80044f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002554:	2011      	movs	r0, #17
 8002556:	f001 ffe8 	bl	800452a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800255a:	2200      	movs	r2, #0
 800255c:	2100      	movs	r1, #0
 800255e:	2038      	movs	r0, #56	; 0x38
 8002560:	f001 ffc7 	bl	80044f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002564:	2038      	movs	r0, #56	; 0x38
 8002566:	f001 ffe0 	bl	800452a <HAL_NVIC_EnableIRQ>

}
 800256a:	bf00      	nop
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40023800 	.word	0x40023800

08002578 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b08e      	sub	sp, #56	; 0x38
 800257c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800257e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002582:	2200      	movs	r2, #0
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	605a      	str	r2, [r3, #4]
 8002588:	609a      	str	r2, [r3, #8]
 800258a:	60da      	str	r2, [r3, #12]
 800258c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800258e:	2300      	movs	r3, #0
 8002590:	623b      	str	r3, [r7, #32]
 8002592:	4b79      	ldr	r3, [pc, #484]	; (8002778 <MX_GPIO_Init+0x200>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	4a78      	ldr	r2, [pc, #480]	; (8002778 <MX_GPIO_Init+0x200>)
 8002598:	f043 0304 	orr.w	r3, r3, #4
 800259c:	6313      	str	r3, [r2, #48]	; 0x30
 800259e:	4b76      	ldr	r3, [pc, #472]	; (8002778 <MX_GPIO_Init+0x200>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	f003 0304 	and.w	r3, r3, #4
 80025a6:	623b      	str	r3, [r7, #32]
 80025a8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80025aa:	2300      	movs	r3, #0
 80025ac:	61fb      	str	r3, [r7, #28]
 80025ae:	4b72      	ldr	r3, [pc, #456]	; (8002778 <MX_GPIO_Init+0x200>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	4a71      	ldr	r2, [pc, #452]	; (8002778 <MX_GPIO_Init+0x200>)
 80025b4:	f043 0320 	orr.w	r3, r3, #32
 80025b8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ba:	4b6f      	ldr	r3, [pc, #444]	; (8002778 <MX_GPIO_Init+0x200>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	f003 0320 	and.w	r3, r3, #32
 80025c2:	61fb      	str	r3, [r7, #28]
 80025c4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	61bb      	str	r3, [r7, #24]
 80025ca:	4b6b      	ldr	r3, [pc, #428]	; (8002778 <MX_GPIO_Init+0x200>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	4a6a      	ldr	r2, [pc, #424]	; (8002778 <MX_GPIO_Init+0x200>)
 80025d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025d4:	6313      	str	r3, [r2, #48]	; 0x30
 80025d6:	4b68      	ldr	r3, [pc, #416]	; (8002778 <MX_GPIO_Init+0x200>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025de:	61bb      	str	r3, [r7, #24]
 80025e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e2:	2300      	movs	r3, #0
 80025e4:	617b      	str	r3, [r7, #20]
 80025e6:	4b64      	ldr	r3, [pc, #400]	; (8002778 <MX_GPIO_Init+0x200>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	4a63      	ldr	r2, [pc, #396]	; (8002778 <MX_GPIO_Init+0x200>)
 80025ec:	f043 0301 	orr.w	r3, r3, #1
 80025f0:	6313      	str	r3, [r2, #48]	; 0x30
 80025f2:	4b61      	ldr	r3, [pc, #388]	; (8002778 <MX_GPIO_Init+0x200>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	617b      	str	r3, [r7, #20]
 80025fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025fe:	2300      	movs	r3, #0
 8002600:	613b      	str	r3, [r7, #16]
 8002602:	4b5d      	ldr	r3, [pc, #372]	; (8002778 <MX_GPIO_Init+0x200>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	4a5c      	ldr	r2, [pc, #368]	; (8002778 <MX_GPIO_Init+0x200>)
 8002608:	f043 0302 	orr.w	r3, r3, #2
 800260c:	6313      	str	r3, [r2, #48]	; 0x30
 800260e:	4b5a      	ldr	r3, [pc, #360]	; (8002778 <MX_GPIO_Init+0x200>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	613b      	str	r3, [r7, #16]
 8002618:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800261a:	2300      	movs	r3, #0
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	4b56      	ldr	r3, [pc, #344]	; (8002778 <MX_GPIO_Init+0x200>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002622:	4a55      	ldr	r2, [pc, #340]	; (8002778 <MX_GPIO_Init+0x200>)
 8002624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002628:	6313      	str	r3, [r2, #48]	; 0x30
 800262a:	4b53      	ldr	r3, [pc, #332]	; (8002778 <MX_GPIO_Init+0x200>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002636:	2300      	movs	r3, #0
 8002638:	60bb      	str	r3, [r7, #8]
 800263a:	4b4f      	ldr	r3, [pc, #316]	; (8002778 <MX_GPIO_Init+0x200>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	4a4e      	ldr	r2, [pc, #312]	; (8002778 <MX_GPIO_Init+0x200>)
 8002640:	f043 0308 	orr.w	r3, r3, #8
 8002644:	6313      	str	r3, [r2, #48]	; 0x30
 8002646:	4b4c      	ldr	r3, [pc, #304]	; (8002778 <MX_GPIO_Init+0x200>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	f003 0308 	and.w	r3, r3, #8
 800264e:	60bb      	str	r3, [r7, #8]
 8002650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002652:	2300      	movs	r3, #0
 8002654:	607b      	str	r3, [r7, #4]
 8002656:	4b48      	ldr	r3, [pc, #288]	; (8002778 <MX_GPIO_Init+0x200>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	4a47      	ldr	r2, [pc, #284]	; (8002778 <MX_GPIO_Init+0x200>)
 800265c:	f043 0310 	orr.w	r3, r3, #16
 8002660:	6313      	str	r3, [r2, #48]	; 0x30
 8002662:	4b45      	ldr	r3, [pc, #276]	; (8002778 <MX_GPIO_Init+0x200>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	f003 0310 	and.w	r3, r3, #16
 800266a:	607b      	str	r3, [r7, #4]
 800266c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD3_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 800266e:	2200      	movs	r2, #0
 8002670:	f244 0181 	movw	r1, #16513	; 0x4081
 8002674:	4841      	ldr	r0, [pc, #260]	; (800277c <MX_GPIO_Init+0x204>)
 8002676:	f003 f861 	bl	800573c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800267a:	2200      	movs	r2, #0
 800267c:	2103      	movs	r1, #3
 800267e:	4840      	ldr	r0, [pc, #256]	; (8002780 <MX_GPIO_Init+0x208>)
 8002680:	f003 f85c 	bl	800573c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8002684:	2200      	movs	r2, #0
 8002686:	2180      	movs	r1, #128	; 0x80
 8002688:	483e      	ldr	r0, [pc, #248]	; (8002784 <MX_GPIO_Init+0x20c>)
 800268a:	f003 f857 	bl	800573c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
 800268e:	2200      	movs	r2, #0
 8002690:	2101      	movs	r1, #1
 8002692:	483d      	ldr	r0, [pc, #244]	; (8002788 <MX_GPIO_Init+0x210>)
 8002694:	f003 f852 	bl	800573c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002698:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800269c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800269e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80026a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a4:	2300      	movs	r3, #0
 80026a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80026a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ac:	4619      	mov	r1, r3
 80026ae:	4837      	ldr	r0, [pc, #220]	; (800278c <MX_GPIO_Init+0x214>)
 80026b0:	f002 fe80 	bl	80053b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 LD3_Pin PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin|GPIO_PIN_7;
 80026b4:	f244 0381 	movw	r3, #16513	; 0x4081
 80026b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ba:	2301      	movs	r3, #1
 80026bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026be:	2300      	movs	r3, #0
 80026c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c2:	2300      	movs	r3, #0
 80026c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ca:	4619      	mov	r1, r3
 80026cc:	482b      	ldr	r0, [pc, #172]	; (800277c <MX_GPIO_Init+0x204>)
 80026ce:	f002 fe71 	bl	80053b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80026d2:	2303      	movs	r3, #3
 80026d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026d6:	2301      	movs	r3, #1
 80026d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026da:	2300      	movs	r3, #0
 80026dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026de:	2300      	movs	r3, #0
 80026e0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026e6:	4619      	mov	r1, r3
 80026e8:	4825      	ldr	r0, [pc, #148]	; (8002780 <MX_GPIO_Init+0x208>)
 80026ea:	f002 fe63 	bl	80053b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80026ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026f4:	2300      	movs	r3, #0
 80026f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002700:	4619      	mov	r1, r3
 8002702:	481e      	ldr	r0, [pc, #120]	; (800277c <MX_GPIO_Init+0x204>)
 8002704:	f002 fe56 	bl	80053b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002708:	2380      	movs	r3, #128	; 0x80
 800270a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800270c:	2300      	movs	r3, #0
 800270e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002710:	2300      	movs	r3, #0
 8002712:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002714:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002718:	4619      	mov	r1, r3
 800271a:	4819      	ldr	r0, [pc, #100]	; (8002780 <MX_GPIO_Init+0x208>)
 800271c:	f002 fe4a 	bl	80053b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002720:	2340      	movs	r3, #64	; 0x40
 8002722:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002724:	2300      	movs	r3, #0
 8002726:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002728:	2300      	movs	r3, #0
 800272a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800272c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002730:	4619      	mov	r1, r3
 8002732:	4814      	ldr	r0, [pc, #80]	; (8002784 <MX_GPIO_Init+0x20c>)
 8002734:	f002 fe3e 	bl	80053b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002738:	2380      	movs	r3, #128	; 0x80
 800273a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800273c:	2301      	movs	r3, #1
 800273e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002740:	2300      	movs	r3, #0
 8002742:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002744:	2300      	movs	r3, #0
 8002746:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002748:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800274c:	4619      	mov	r1, r3
 800274e:	480d      	ldr	r0, [pc, #52]	; (8002784 <MX_GPIO_Init+0x20c>)
 8002750:	f002 fe30 	bl	80053b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002754:	2301      	movs	r3, #1
 8002756:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002758:	2301      	movs	r3, #1
 800275a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275c:	2300      	movs	r3, #0
 800275e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002760:	2300      	movs	r3, #0
 8002762:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002768:	4619      	mov	r1, r3
 800276a:	4807      	ldr	r0, [pc, #28]	; (8002788 <MX_GPIO_Init+0x210>)
 800276c:	f002 fe22 	bl	80053b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002770:	bf00      	nop
 8002772:	3738      	adds	r7, #56	; 0x38
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40023800 	.word	0x40023800
 800277c:	40020400 	.word	0x40020400
 8002780:	40021800 	.word	0x40021800
 8002784:	40020c00 	.word	0x40020c00
 8002788:	40021000 	.word	0x40021000
 800278c:	40020800 	.word	0x40020800

08002790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002794:	b672      	cpsid	i
}
 8002796:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002798:	e7fe      	b.n	8002798 <Error_Handler+0x8>
	...

0800279c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	607b      	str	r3, [r7, #4]
 80027a6:	4b10      	ldr	r3, [pc, #64]	; (80027e8 <HAL_MspInit+0x4c>)
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	4a0f      	ldr	r2, [pc, #60]	; (80027e8 <HAL_MspInit+0x4c>)
 80027ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027b0:	6453      	str	r3, [r2, #68]	; 0x44
 80027b2:	4b0d      	ldr	r3, [pc, #52]	; (80027e8 <HAL_MspInit+0x4c>)
 80027b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ba:	607b      	str	r3, [r7, #4]
 80027bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027be:	2300      	movs	r3, #0
 80027c0:	603b      	str	r3, [r7, #0]
 80027c2:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <HAL_MspInit+0x4c>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	4a08      	ldr	r2, [pc, #32]	; (80027e8 <HAL_MspInit+0x4c>)
 80027c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027cc:	6413      	str	r3, [r2, #64]	; 0x40
 80027ce:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <HAL_MspInit+0x4c>)
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d6:	603b      	str	r3, [r7, #0]
 80027d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	40023800 	.word	0x40023800

080027ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b08a      	sub	sp, #40	; 0x28
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f4:	f107 0314 	add.w	r3, r7, #20
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	605a      	str	r2, [r3, #4]
 80027fe:	609a      	str	r2, [r3, #8]
 8002800:	60da      	str	r2, [r3, #12]
 8002802:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a33      	ldr	r2, [pc, #204]	; (80028d8 <HAL_ADC_MspInit+0xec>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d15f      	bne.n	80028ce <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	613b      	str	r3, [r7, #16]
 8002812:	4b32      	ldr	r3, [pc, #200]	; (80028dc <HAL_ADC_MspInit+0xf0>)
 8002814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002816:	4a31      	ldr	r2, [pc, #196]	; (80028dc <HAL_ADC_MspInit+0xf0>)
 8002818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800281c:	6453      	str	r3, [r2, #68]	; 0x44
 800281e:	4b2f      	ldr	r3, [pc, #188]	; (80028dc <HAL_ADC_MspInit+0xf0>)
 8002820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002826:	613b      	str	r3, [r7, #16]
 8002828:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	4b2b      	ldr	r3, [pc, #172]	; (80028dc <HAL_ADC_MspInit+0xf0>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	4a2a      	ldr	r2, [pc, #168]	; (80028dc <HAL_ADC_MspInit+0xf0>)
 8002834:	f043 0301 	orr.w	r3, r3, #1
 8002838:	6313      	str	r3, [r2, #48]	; 0x30
 800283a:	4b28      	ldr	r3, [pc, #160]	; (80028dc <HAL_ADC_MspInit+0xf0>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002846:	2318      	movs	r3, #24
 8002848:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800284a:	2303      	movs	r3, #3
 800284c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284e:	2300      	movs	r3, #0
 8002850:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002852:	f107 0314 	add.w	r3, r7, #20
 8002856:	4619      	mov	r1, r3
 8002858:	4821      	ldr	r0, [pc, #132]	; (80028e0 <HAL_ADC_MspInit+0xf4>)
 800285a:	f002 fdab 	bl	80053b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800285e:	4b21      	ldr	r3, [pc, #132]	; (80028e4 <HAL_ADC_MspInit+0xf8>)
 8002860:	4a21      	ldr	r2, [pc, #132]	; (80028e8 <HAL_ADC_MspInit+0xfc>)
 8002862:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002864:	4b1f      	ldr	r3, [pc, #124]	; (80028e4 <HAL_ADC_MspInit+0xf8>)
 8002866:	2200      	movs	r2, #0
 8002868:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800286a:	4b1e      	ldr	r3, [pc, #120]	; (80028e4 <HAL_ADC_MspInit+0xf8>)
 800286c:	2200      	movs	r2, #0
 800286e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002870:	4b1c      	ldr	r3, [pc, #112]	; (80028e4 <HAL_ADC_MspInit+0xf8>)
 8002872:	2200      	movs	r2, #0
 8002874:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002876:	4b1b      	ldr	r3, [pc, #108]	; (80028e4 <HAL_ADC_MspInit+0xf8>)
 8002878:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800287c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800287e:	4b19      	ldr	r3, [pc, #100]	; (80028e4 <HAL_ADC_MspInit+0xf8>)
 8002880:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002884:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002886:	4b17      	ldr	r3, [pc, #92]	; (80028e4 <HAL_ADC_MspInit+0xf8>)
 8002888:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800288c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800288e:	4b15      	ldr	r3, [pc, #84]	; (80028e4 <HAL_ADC_MspInit+0xf8>)
 8002890:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002894:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002896:	4b13      	ldr	r3, [pc, #76]	; (80028e4 <HAL_ADC_MspInit+0xf8>)
 8002898:	2200      	movs	r2, #0
 800289a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800289c:	4b11      	ldr	r3, [pc, #68]	; (80028e4 <HAL_ADC_MspInit+0xf8>)
 800289e:	2200      	movs	r2, #0
 80028a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80028a2:	4810      	ldr	r0, [pc, #64]	; (80028e4 <HAL_ADC_MspInit+0xf8>)
 80028a4:	f001 fe5c 	bl	8004560 <HAL_DMA_Init>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80028ae:	f7ff ff6f 	bl	8002790 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a0b      	ldr	r2, [pc, #44]	; (80028e4 <HAL_ADC_MspInit+0xf8>)
 80028b6:	639a      	str	r2, [r3, #56]	; 0x38
 80028b8:	4a0a      	ldr	r2, [pc, #40]	; (80028e4 <HAL_ADC_MspInit+0xf8>)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80028be:	2200      	movs	r2, #0
 80028c0:	2100      	movs	r1, #0
 80028c2:	2012      	movs	r0, #18
 80028c4:	f001 fe15 	bl	80044f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80028c8:	2012      	movs	r0, #18
 80028ca:	f001 fe2e 	bl	800452a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80028ce:	bf00      	nop
 80028d0:	3728      	adds	r7, #40	; 0x28
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40012000 	.word	0x40012000
 80028dc:	40023800 	.word	0x40023800
 80028e0:	40020000 	.word	0x40020000
 80028e4:	200005c4 	.word	0x200005c4
 80028e8:	40026410 	.word	0x40026410

080028ec <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b08e      	sub	sp, #56	; 0x38
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	605a      	str	r2, [r3, #4]
 80028fe:	609a      	str	r2, [r3, #8]
 8002900:	60da      	str	r2, [r3, #12]
 8002902:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a55      	ldr	r2, [pc, #340]	; (8002a60 <HAL_ETH_MspInit+0x174>)
 800290a:	4293      	cmp	r3, r2
 800290c:	f040 80a4 	bne.w	8002a58 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002910:	2300      	movs	r3, #0
 8002912:	623b      	str	r3, [r7, #32]
 8002914:	4b53      	ldr	r3, [pc, #332]	; (8002a64 <HAL_ETH_MspInit+0x178>)
 8002916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002918:	4a52      	ldr	r2, [pc, #328]	; (8002a64 <HAL_ETH_MspInit+0x178>)
 800291a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800291e:	6313      	str	r3, [r2, #48]	; 0x30
 8002920:	4b50      	ldr	r3, [pc, #320]	; (8002a64 <HAL_ETH_MspInit+0x178>)
 8002922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002928:	623b      	str	r3, [r7, #32]
 800292a:	6a3b      	ldr	r3, [r7, #32]
 800292c:	2300      	movs	r3, #0
 800292e:	61fb      	str	r3, [r7, #28]
 8002930:	4b4c      	ldr	r3, [pc, #304]	; (8002a64 <HAL_ETH_MspInit+0x178>)
 8002932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002934:	4a4b      	ldr	r2, [pc, #300]	; (8002a64 <HAL_ETH_MspInit+0x178>)
 8002936:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800293a:	6313      	str	r3, [r2, #48]	; 0x30
 800293c:	4b49      	ldr	r3, [pc, #292]	; (8002a64 <HAL_ETH_MspInit+0x178>)
 800293e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002940:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002944:	61fb      	str	r3, [r7, #28]
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	2300      	movs	r3, #0
 800294a:	61bb      	str	r3, [r7, #24]
 800294c:	4b45      	ldr	r3, [pc, #276]	; (8002a64 <HAL_ETH_MspInit+0x178>)
 800294e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002950:	4a44      	ldr	r2, [pc, #272]	; (8002a64 <HAL_ETH_MspInit+0x178>)
 8002952:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002956:	6313      	str	r3, [r2, #48]	; 0x30
 8002958:	4b42      	ldr	r3, [pc, #264]	; (8002a64 <HAL_ETH_MspInit+0x178>)
 800295a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002960:	61bb      	str	r3, [r7, #24]
 8002962:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	4b3e      	ldr	r3, [pc, #248]	; (8002a64 <HAL_ETH_MspInit+0x178>)
 800296a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296c:	4a3d      	ldr	r2, [pc, #244]	; (8002a64 <HAL_ETH_MspInit+0x178>)
 800296e:	f043 0304 	orr.w	r3, r3, #4
 8002972:	6313      	str	r3, [r2, #48]	; 0x30
 8002974:	4b3b      	ldr	r3, [pc, #236]	; (8002a64 <HAL_ETH_MspInit+0x178>)
 8002976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002978:	f003 0304 	and.w	r3, r3, #4
 800297c:	617b      	str	r3, [r7, #20]
 800297e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002980:	2300      	movs	r3, #0
 8002982:	613b      	str	r3, [r7, #16]
 8002984:	4b37      	ldr	r3, [pc, #220]	; (8002a64 <HAL_ETH_MspInit+0x178>)
 8002986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002988:	4a36      	ldr	r2, [pc, #216]	; (8002a64 <HAL_ETH_MspInit+0x178>)
 800298a:	f043 0301 	orr.w	r3, r3, #1
 800298e:	6313      	str	r3, [r2, #48]	; 0x30
 8002990:	4b34      	ldr	r3, [pc, #208]	; (8002a64 <HAL_ETH_MspInit+0x178>)
 8002992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	613b      	str	r3, [r7, #16]
 800299a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800299c:	2300      	movs	r3, #0
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	4b30      	ldr	r3, [pc, #192]	; (8002a64 <HAL_ETH_MspInit+0x178>)
 80029a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a4:	4a2f      	ldr	r2, [pc, #188]	; (8002a64 <HAL_ETH_MspInit+0x178>)
 80029a6:	f043 0302 	orr.w	r3, r3, #2
 80029aa:	6313      	str	r3, [r2, #48]	; 0x30
 80029ac:	4b2d      	ldr	r3, [pc, #180]	; (8002a64 <HAL_ETH_MspInit+0x178>)
 80029ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80029b8:	2300      	movs	r3, #0
 80029ba:	60bb      	str	r3, [r7, #8]
 80029bc:	4b29      	ldr	r3, [pc, #164]	; (8002a64 <HAL_ETH_MspInit+0x178>)
 80029be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c0:	4a28      	ldr	r2, [pc, #160]	; (8002a64 <HAL_ETH_MspInit+0x178>)
 80029c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029c6:	6313      	str	r3, [r2, #48]	; 0x30
 80029c8:	4b26      	ldr	r3, [pc, #152]	; (8002a64 <HAL_ETH_MspInit+0x178>)
 80029ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d0:	60bb      	str	r3, [r7, #8]
 80029d2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80029d4:	2332      	movs	r3, #50	; 0x32
 80029d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d8:	2302      	movs	r3, #2
 80029da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029dc:	2300      	movs	r3, #0
 80029de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029e0:	2303      	movs	r3, #3
 80029e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80029e4:	230b      	movs	r3, #11
 80029e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029ec:	4619      	mov	r1, r3
 80029ee:	481e      	ldr	r0, [pc, #120]	; (8002a68 <HAL_ETH_MspInit+0x17c>)
 80029f0:	f002 fce0 	bl	80053b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80029f4:	2386      	movs	r3, #134	; 0x86
 80029f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f8:	2302      	movs	r3, #2
 80029fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fc:	2300      	movs	r3, #0
 80029fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a00:	2303      	movs	r3, #3
 8002a02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a04:	230b      	movs	r3, #11
 8002a06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	4817      	ldr	r0, [pc, #92]	; (8002a6c <HAL_ETH_MspInit+0x180>)
 8002a10:	f002 fcd0 	bl	80053b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002a14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a22:	2303      	movs	r3, #3
 8002a24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a26:	230b      	movs	r3, #11
 8002a28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a2e:	4619      	mov	r1, r3
 8002a30:	480f      	ldr	r0, [pc, #60]	; (8002a70 <HAL_ETH_MspInit+0x184>)
 8002a32:	f002 fcbf 	bl	80053b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002a36:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002a3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a40:	2300      	movs	r3, #0
 8002a42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a44:	2303      	movs	r3, #3
 8002a46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a48:	230b      	movs	r3, #11
 8002a4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a50:	4619      	mov	r1, r3
 8002a52:	4808      	ldr	r0, [pc, #32]	; (8002a74 <HAL_ETH_MspInit+0x188>)
 8002a54:	f002 fcae 	bl	80053b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002a58:	bf00      	nop
 8002a5a:	3738      	adds	r7, #56	; 0x38
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40028000 	.word	0x40028000
 8002a64:	40023800 	.word	0x40023800
 8002a68:	40020800 	.word	0x40020800
 8002a6c:	40020000 	.word	0x40020000
 8002a70:	40020400 	.word	0x40020400
 8002a74:	40021800 	.word	0x40021800

08002a78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b08a      	sub	sp, #40	; 0x28
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a62      	ldr	r2, [pc, #392]	; (8002c10 <HAL_TIM_Base_MspInit+0x198>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d10e      	bne.n	8002aa8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a8e:	4b61      	ldr	r3, [pc, #388]	; (8002c14 <HAL_TIM_Base_MspInit+0x19c>)
 8002a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a92:	4a60      	ldr	r2, [pc, #384]	; (8002c14 <HAL_TIM_Base_MspInit+0x19c>)
 8002a94:	f043 0301 	orr.w	r3, r3, #1
 8002a98:	6453      	str	r3, [r2, #68]	; 0x44
 8002a9a:	4b5e      	ldr	r3, [pc, #376]	; (8002c14 <HAL_TIM_Base_MspInit+0x19c>)
 8002a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002aa6:	e0ae      	b.n	8002c06 <HAL_TIM_Base_MspInit+0x18e>
  else if(htim_base->Instance==TIM3)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a5a      	ldr	r2, [pc, #360]	; (8002c18 <HAL_TIM_Base_MspInit+0x1a0>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d116      	bne.n	8002ae0 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	623b      	str	r3, [r7, #32]
 8002ab6:	4b57      	ldr	r3, [pc, #348]	; (8002c14 <HAL_TIM_Base_MspInit+0x19c>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	4a56      	ldr	r2, [pc, #344]	; (8002c14 <HAL_TIM_Base_MspInit+0x19c>)
 8002abc:	f043 0302 	orr.w	r3, r3, #2
 8002ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ac2:	4b54      	ldr	r3, [pc, #336]	; (8002c14 <HAL_TIM_Base_MspInit+0x19c>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	623b      	str	r3, [r7, #32]
 8002acc:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002ace:	2200      	movs	r2, #0
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	201d      	movs	r0, #29
 8002ad4:	f001 fd0d 	bl	80044f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002ad8:	201d      	movs	r0, #29
 8002ada:	f001 fd26 	bl	800452a <HAL_NVIC_EnableIRQ>
}
 8002ade:	e092      	b.n	8002c06 <HAL_TIM_Base_MspInit+0x18e>
  else if(htim_base->Instance==TIM6)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a4d      	ldr	r2, [pc, #308]	; (8002c1c <HAL_TIM_Base_MspInit+0x1a4>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d116      	bne.n	8002b18 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002aea:	2300      	movs	r3, #0
 8002aec:	61fb      	str	r3, [r7, #28]
 8002aee:	4b49      	ldr	r3, [pc, #292]	; (8002c14 <HAL_TIM_Base_MspInit+0x19c>)
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	4a48      	ldr	r2, [pc, #288]	; (8002c14 <HAL_TIM_Base_MspInit+0x19c>)
 8002af4:	f043 0310 	orr.w	r3, r3, #16
 8002af8:	6413      	str	r3, [r2, #64]	; 0x40
 8002afa:	4b46      	ldr	r3, [pc, #280]	; (8002c14 <HAL_TIM_Base_MspInit+0x19c>)
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	f003 0310 	and.w	r3, r3, #16
 8002b02:	61fb      	str	r3, [r7, #28]
 8002b04:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8002b06:	2200      	movs	r2, #0
 8002b08:	2106      	movs	r1, #6
 8002b0a:	2036      	movs	r0, #54	; 0x36
 8002b0c:	f001 fcf1 	bl	80044f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002b10:	2036      	movs	r0, #54	; 0x36
 8002b12:	f001 fd0a 	bl	800452a <HAL_NVIC_EnableIRQ>
}
 8002b16:	e076      	b.n	8002c06 <HAL_TIM_Base_MspInit+0x18e>
  else if(htim_base->Instance==TIM7)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a40      	ldr	r2, [pc, #256]	; (8002c20 <HAL_TIM_Base_MspInit+0x1a8>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d116      	bne.n	8002b50 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002b22:	2300      	movs	r3, #0
 8002b24:	61bb      	str	r3, [r7, #24]
 8002b26:	4b3b      	ldr	r3, [pc, #236]	; (8002c14 <HAL_TIM_Base_MspInit+0x19c>)
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	4a3a      	ldr	r2, [pc, #232]	; (8002c14 <HAL_TIM_Base_MspInit+0x19c>)
 8002b2c:	f043 0320 	orr.w	r3, r3, #32
 8002b30:	6413      	str	r3, [r2, #64]	; 0x40
 8002b32:	4b38      	ldr	r3, [pc, #224]	; (8002c14 <HAL_TIM_Base_MspInit+0x19c>)
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	f003 0320 	and.w	r3, r3, #32
 8002b3a:	61bb      	str	r3, [r7, #24]
 8002b3c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8002b3e:	2200      	movs	r2, #0
 8002b40:	2105      	movs	r1, #5
 8002b42:	2037      	movs	r0, #55	; 0x37
 8002b44:	f001 fcd5 	bl	80044f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002b48:	2037      	movs	r0, #55	; 0x37
 8002b4a:	f001 fcee 	bl	800452a <HAL_NVIC_EnableIRQ>
}
 8002b4e:	e05a      	b.n	8002c06 <HAL_TIM_Base_MspInit+0x18e>
  else if(htim_base->Instance==TIM8)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a33      	ldr	r2, [pc, #204]	; (8002c24 <HAL_TIM_Base_MspInit+0x1ac>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d11e      	bne.n	8002b98 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	617b      	str	r3, [r7, #20]
 8002b5e:	4b2d      	ldr	r3, [pc, #180]	; (8002c14 <HAL_TIM_Base_MspInit+0x19c>)
 8002b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b62:	4a2c      	ldr	r2, [pc, #176]	; (8002c14 <HAL_TIM_Base_MspInit+0x19c>)
 8002b64:	f043 0302 	orr.w	r3, r3, #2
 8002b68:	6453      	str	r3, [r2, #68]	; 0x44
 8002b6a:	4b2a      	ldr	r3, [pc, #168]	; (8002c14 <HAL_TIM_Base_MspInit+0x19c>)
 8002b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	617b      	str	r3, [r7, #20]
 8002b74:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002b76:	2200      	movs	r2, #0
 8002b78:	2100      	movs	r1, #0
 8002b7a:	202c      	movs	r0, #44	; 0x2c
 8002b7c:	f001 fcb9 	bl	80044f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002b80:	202c      	movs	r0, #44	; 0x2c
 8002b82:	f001 fcd2 	bl	800452a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002b86:	2200      	movs	r2, #0
 8002b88:	2100      	movs	r1, #0
 8002b8a:	202d      	movs	r0, #45	; 0x2d
 8002b8c:	f001 fcb1 	bl	80044f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002b90:	202d      	movs	r0, #45	; 0x2d
 8002b92:	f001 fcca 	bl	800452a <HAL_NVIC_EnableIRQ>
}
 8002b96:	e036      	b.n	8002c06 <HAL_TIM_Base_MspInit+0x18e>
  else if(htim_base->Instance==TIM13)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a22      	ldr	r2, [pc, #136]	; (8002c28 <HAL_TIM_Base_MspInit+0x1b0>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d116      	bne.n	8002bd0 <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	613b      	str	r3, [r7, #16]
 8002ba6:	4b1b      	ldr	r3, [pc, #108]	; (8002c14 <HAL_TIM_Base_MspInit+0x19c>)
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	4a1a      	ldr	r2, [pc, #104]	; (8002c14 <HAL_TIM_Base_MspInit+0x19c>)
 8002bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002bb2:	4b18      	ldr	r3, [pc, #96]	; (8002c14 <HAL_TIM_Base_MspInit+0x19c>)
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bba:	613b      	str	r3, [r7, #16]
 8002bbc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	202c      	movs	r0, #44	; 0x2c
 8002bc4:	f001 fc95 	bl	80044f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002bc8:	202c      	movs	r0, #44	; 0x2c
 8002bca:	f001 fcae 	bl	800452a <HAL_NVIC_EnableIRQ>
}
 8002bce:	e01a      	b.n	8002c06 <HAL_TIM_Base_MspInit+0x18e>
  else if(htim_base->Instance==TIM14)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a15      	ldr	r2, [pc, #84]	; (8002c2c <HAL_TIM_Base_MspInit+0x1b4>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d115      	bne.n	8002c06 <HAL_TIM_Base_MspInit+0x18e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60fb      	str	r3, [r7, #12]
 8002bde:	4b0d      	ldr	r3, [pc, #52]	; (8002c14 <HAL_TIM_Base_MspInit+0x19c>)
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	4a0c      	ldr	r2, [pc, #48]	; (8002c14 <HAL_TIM_Base_MspInit+0x19c>)
 8002be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bea:	4b0a      	ldr	r3, [pc, #40]	; (8002c14 <HAL_TIM_Base_MspInit+0x19c>)
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf2:	60fb      	str	r3, [r7, #12]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	202d      	movs	r0, #45	; 0x2d
 8002bfc:	f001 fc79 	bl	80044f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002c00:	202d      	movs	r0, #45	; 0x2d
 8002c02:	f001 fc92 	bl	800452a <HAL_NVIC_EnableIRQ>
}
 8002c06:	bf00      	nop
 8002c08:	3728      	adds	r7, #40	; 0x28
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40010000 	.word	0x40010000
 8002c14:	40023800 	.word	0x40023800
 8002c18:	40000400 	.word	0x40000400
 8002c1c:	40001000 	.word	0x40001000
 8002c20:	40001400 	.word	0x40001400
 8002c24:	40010400 	.word	0x40010400
 8002c28:	40001c00 	.word	0x40001c00
 8002c2c:	40002000 	.word	0x40002000

08002c30 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b08c      	sub	sp, #48	; 0x30
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c38:	f107 031c 	add.w	r3, r7, #28
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	605a      	str	r2, [r3, #4]
 8002c42:	609a      	str	r2, [r3, #8]
 8002c44:	60da      	str	r2, [r3, #12]
 8002c46:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c50:	d14b      	bne.n	8002cea <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c52:	2300      	movs	r3, #0
 8002c54:	61bb      	str	r3, [r7, #24]
 8002c56:	4b58      	ldr	r3, [pc, #352]	; (8002db8 <HAL_TIM_Encoder_MspInit+0x188>)
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	4a57      	ldr	r2, [pc, #348]	; (8002db8 <HAL_TIM_Encoder_MspInit+0x188>)
 8002c5c:	f043 0301 	orr.w	r3, r3, #1
 8002c60:	6413      	str	r3, [r2, #64]	; 0x40
 8002c62:	4b55      	ldr	r3, [pc, #340]	; (8002db8 <HAL_TIM_Encoder_MspInit+0x188>)
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	61bb      	str	r3, [r7, #24]
 8002c6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c6e:	2300      	movs	r3, #0
 8002c70:	617b      	str	r3, [r7, #20]
 8002c72:	4b51      	ldr	r3, [pc, #324]	; (8002db8 <HAL_TIM_Encoder_MspInit+0x188>)
 8002c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c76:	4a50      	ldr	r2, [pc, #320]	; (8002db8 <HAL_TIM_Encoder_MspInit+0x188>)
 8002c78:	f043 0301 	orr.w	r3, r3, #1
 8002c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c7e:	4b4e      	ldr	r3, [pc, #312]	; (8002db8 <HAL_TIM_Encoder_MspInit+0x188>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	617b      	str	r3, [r7, #20]
 8002c88:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	613b      	str	r3, [r7, #16]
 8002c8e:	4b4a      	ldr	r3, [pc, #296]	; (8002db8 <HAL_TIM_Encoder_MspInit+0x188>)
 8002c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c92:	4a49      	ldr	r2, [pc, #292]	; (8002db8 <HAL_TIM_Encoder_MspInit+0x188>)
 8002c94:	f043 0302 	orr.w	r3, r3, #2
 8002c98:	6313      	str	r3, [r2, #48]	; 0x30
 8002c9a:	4b47      	ldr	r3, [pc, #284]	; (8002db8 <HAL_TIM_Encoder_MspInit+0x188>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	613b      	str	r3, [r7, #16]
 8002ca4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002ca6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002caa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cac:	2302      	movs	r3, #2
 8002cae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cbc:	f107 031c 	add.w	r3, r7, #28
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	483e      	ldr	r0, [pc, #248]	; (8002dbc <HAL_TIM_Encoder_MspInit+0x18c>)
 8002cc4:	f002 fb76 	bl	80053b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002cc8:	2308      	movs	r3, #8
 8002cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ccc:	2302      	movs	r3, #2
 8002cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cdc:	f107 031c 	add.w	r3, r7, #28
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	4837      	ldr	r0, [pc, #220]	; (8002dc0 <HAL_TIM_Encoder_MspInit+0x190>)
 8002ce4:	f002 fb66 	bl	80053b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002ce8:	e061      	b.n	8002dae <HAL_TIM_Encoder_MspInit+0x17e>
  else if(htim_encoder->Instance==TIM4)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a35      	ldr	r2, [pc, #212]	; (8002dc4 <HAL_TIM_Encoder_MspInit+0x194>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d15c      	bne.n	8002dae <HAL_TIM_Encoder_MspInit+0x17e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	4b2f      	ldr	r3, [pc, #188]	; (8002db8 <HAL_TIM_Encoder_MspInit+0x188>)
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfc:	4a2e      	ldr	r2, [pc, #184]	; (8002db8 <HAL_TIM_Encoder_MspInit+0x188>)
 8002cfe:	f043 0304 	orr.w	r3, r3, #4
 8002d02:	6413      	str	r3, [r2, #64]	; 0x40
 8002d04:	4b2c      	ldr	r3, [pc, #176]	; (8002db8 <HAL_TIM_Encoder_MspInit+0x188>)
 8002d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	60fb      	str	r3, [r7, #12]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d10:	2300      	movs	r3, #0
 8002d12:	60bb      	str	r3, [r7, #8]
 8002d14:	4b28      	ldr	r3, [pc, #160]	; (8002db8 <HAL_TIM_Encoder_MspInit+0x188>)
 8002d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d18:	4a27      	ldr	r2, [pc, #156]	; (8002db8 <HAL_TIM_Encoder_MspInit+0x188>)
 8002d1a:	f043 0308 	orr.w	r3, r3, #8
 8002d1e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d20:	4b25      	ldr	r3, [pc, #148]	; (8002db8 <HAL_TIM_Encoder_MspInit+0x188>)
 8002d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d24:	f003 0308 	and.w	r3, r3, #8
 8002d28:	60bb      	str	r3, [r7, #8]
 8002d2a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002d2c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002d30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d32:	2302      	movs	r3, #2
 8002d34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d36:	2300      	movs	r3, #0
 8002d38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002d3e:	2302      	movs	r3, #2
 8002d40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d42:	f107 031c 	add.w	r3, r7, #28
 8002d46:	4619      	mov	r1, r3
 8002d48:	481f      	ldr	r0, [pc, #124]	; (8002dc8 <HAL_TIM_Encoder_MspInit+0x198>)
 8002d4a:	f002 fb33 	bl	80053b4 <HAL_GPIO_Init>
    hdma_tim4_up.Instance = DMA1_Stream6;
 8002d4e:	4b1f      	ldr	r3, [pc, #124]	; (8002dcc <HAL_TIM_Encoder_MspInit+0x19c>)
 8002d50:	4a1f      	ldr	r2, [pc, #124]	; (8002dd0 <HAL_TIM_Encoder_MspInit+0x1a0>)
 8002d52:	601a      	str	r2, [r3, #0]
    hdma_tim4_up.Init.Channel = DMA_CHANNEL_2;
 8002d54:	4b1d      	ldr	r3, [pc, #116]	; (8002dcc <HAL_TIM_Encoder_MspInit+0x19c>)
 8002d56:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002d5a:	605a      	str	r2, [r3, #4]
    hdma_tim4_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d5c:	4b1b      	ldr	r3, [pc, #108]	; (8002dcc <HAL_TIM_Encoder_MspInit+0x19c>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	609a      	str	r2, [r3, #8]
    hdma_tim4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d62:	4b1a      	ldr	r3, [pc, #104]	; (8002dcc <HAL_TIM_Encoder_MspInit+0x19c>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	60da      	str	r2, [r3, #12]
    hdma_tim4_up.Init.MemInc = DMA_MINC_ENABLE;
 8002d68:	4b18      	ldr	r3, [pc, #96]	; (8002dcc <HAL_TIM_Encoder_MspInit+0x19c>)
 8002d6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d6e:	611a      	str	r2, [r3, #16]
    hdma_tim4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d70:	4b16      	ldr	r3, [pc, #88]	; (8002dcc <HAL_TIM_Encoder_MspInit+0x19c>)
 8002d72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d76:	615a      	str	r2, [r3, #20]
    hdma_tim4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d78:	4b14      	ldr	r3, [pc, #80]	; (8002dcc <HAL_TIM_Encoder_MspInit+0x19c>)
 8002d7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d7e:	619a      	str	r2, [r3, #24]
    hdma_tim4_up.Init.Mode = DMA_NORMAL;
 8002d80:	4b12      	ldr	r3, [pc, #72]	; (8002dcc <HAL_TIM_Encoder_MspInit+0x19c>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	61da      	str	r2, [r3, #28]
    hdma_tim4_up.Init.Priority = DMA_PRIORITY_LOW;
 8002d86:	4b11      	ldr	r3, [pc, #68]	; (8002dcc <HAL_TIM_Encoder_MspInit+0x19c>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	621a      	str	r2, [r3, #32]
    hdma_tim4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d8c:	4b0f      	ldr	r3, [pc, #60]	; (8002dcc <HAL_TIM_Encoder_MspInit+0x19c>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_up) != HAL_OK)
 8002d92:	480e      	ldr	r0, [pc, #56]	; (8002dcc <HAL_TIM_Encoder_MspInit+0x19c>)
 8002d94:	f001 fbe4 	bl	8004560 <HAL_DMA_Init>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <HAL_TIM_Encoder_MspInit+0x172>
      Error_Handler();
 8002d9e:	f7ff fcf7 	bl	8002790 <Error_Handler>
    __HAL_LINKDMA(htim_encoder,hdma[TIM_DMA_ID_UPDATE],hdma_tim4_up);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a09      	ldr	r2, [pc, #36]	; (8002dcc <HAL_TIM_Encoder_MspInit+0x19c>)
 8002da6:	621a      	str	r2, [r3, #32]
 8002da8:	4a08      	ldr	r2, [pc, #32]	; (8002dcc <HAL_TIM_Encoder_MspInit+0x19c>)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002dae:	bf00      	nop
 8002db0:	3730      	adds	r7, #48	; 0x30
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	40020000 	.word	0x40020000
 8002dc0:	40020400 	.word	0x40020400
 8002dc4:	40000800 	.word	0x40000800
 8002dc8:	40020c00 	.word	0x40020c00
 8002dcc:	2000095c 	.word	0x2000095c
 8002dd0:	400260a0 	.word	0x400260a0

08002dd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b08a      	sub	sp, #40	; 0x28
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ddc:	f107 0314 	add.w	r3, r7, #20
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	605a      	str	r2, [r3, #4]
 8002de6:	609a      	str	r2, [r3, #8]
 8002de8:	60da      	str	r2, [r3, #12]
 8002dea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a33      	ldr	r2, [pc, #204]	; (8002ec0 <HAL_TIM_MspPostInit+0xec>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d13c      	bne.n	8002e70 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002df6:	2300      	movs	r3, #0
 8002df8:	613b      	str	r3, [r7, #16]
 8002dfa:	4b32      	ldr	r3, [pc, #200]	; (8002ec4 <HAL_TIM_MspPostInit+0xf0>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfe:	4a31      	ldr	r2, [pc, #196]	; (8002ec4 <HAL_TIM_MspPostInit+0xf0>)
 8002e00:	f043 0301 	orr.w	r3, r3, #1
 8002e04:	6313      	str	r3, [r2, #48]	; 0x30
 8002e06:	4b2f      	ldr	r3, [pc, #188]	; (8002ec4 <HAL_TIM_MspPostInit+0xf0>)
 8002e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	613b      	str	r3, [r7, #16]
 8002e10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e12:	2300      	movs	r3, #0
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	4b2b      	ldr	r3, [pc, #172]	; (8002ec4 <HAL_TIM_MspPostInit+0xf0>)
 8002e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1a:	4a2a      	ldr	r2, [pc, #168]	; (8002ec4 <HAL_TIM_MspPostInit+0xf0>)
 8002e1c:	f043 0304 	orr.w	r3, r3, #4
 8002e20:	6313      	str	r3, [r2, #48]	; 0x30
 8002e22:	4b28      	ldr	r3, [pc, #160]	; (8002ec4 <HAL_TIM_MspPostInit+0xf0>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e26:	f003 0304 	and.w	r3, r3, #4
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002e2e:	2340      	movs	r3, #64	; 0x40
 8002e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e32:	2302      	movs	r3, #2
 8002e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e36:	2300      	movs	r3, #0
 8002e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e3e:	2302      	movs	r3, #2
 8002e40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e42:	f107 0314 	add.w	r3, r7, #20
 8002e46:	4619      	mov	r1, r3
 8002e48:	481f      	ldr	r0, [pc, #124]	; (8002ec8 <HAL_TIM_MspPostInit+0xf4>)
 8002e4a:	f002 fab3 	bl	80053b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002e4e:	2380      	movs	r3, #128	; 0x80
 8002e50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e52:	2302      	movs	r3, #2
 8002e54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e56:	2300      	movs	r3, #0
 8002e58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e5e:	2302      	movs	r3, #2
 8002e60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e62:	f107 0314 	add.w	r3, r7, #20
 8002e66:	4619      	mov	r1, r3
 8002e68:	4818      	ldr	r0, [pc, #96]	; (8002ecc <HAL_TIM_MspPostInit+0xf8>)
 8002e6a:	f002 faa3 	bl	80053b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8002e6e:	e023      	b.n	8002eb8 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM13)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a16      	ldr	r2, [pc, #88]	; (8002ed0 <HAL_TIM_MspPostInit+0xfc>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d11e      	bne.n	8002eb8 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60bb      	str	r3, [r7, #8]
 8002e7e:	4b11      	ldr	r3, [pc, #68]	; (8002ec4 <HAL_TIM_MspPostInit+0xf0>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	4a10      	ldr	r2, [pc, #64]	; (8002ec4 <HAL_TIM_MspPostInit+0xf0>)
 8002e84:	f043 0320 	orr.w	r3, r3, #32
 8002e88:	6313      	str	r3, [r2, #48]	; 0x30
 8002e8a:	4b0e      	ldr	r3, [pc, #56]	; (8002ec4 <HAL_TIM_MspPostInit+0xf0>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	f003 0320 	and.w	r3, r3, #32
 8002e92:	60bb      	str	r3, [r7, #8]
 8002e94:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002e96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002ea8:	2309      	movs	r3, #9
 8002eaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002eac:	f107 0314 	add.w	r3, r7, #20
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4808      	ldr	r0, [pc, #32]	; (8002ed4 <HAL_TIM_MspPostInit+0x100>)
 8002eb4:	f002 fa7e 	bl	80053b4 <HAL_GPIO_Init>
}
 8002eb8:	bf00      	nop
 8002eba:	3728      	adds	r7, #40	; 0x28
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40000400 	.word	0x40000400
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	40020000 	.word	0x40020000
 8002ecc:	40020800 	.word	0x40020800
 8002ed0:	40001c00 	.word	0x40001c00
 8002ed4:	40021400 	.word	0x40021400

08002ed8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b08c      	sub	sp, #48	; 0x30
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee0:	f107 031c 	add.w	r3, r7, #28
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	605a      	str	r2, [r3, #4]
 8002eea:	609a      	str	r2, [r3, #8]
 8002eec:	60da      	str	r2, [r3, #12]
 8002eee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a3b      	ldr	r2, [pc, #236]	; (8002fe4 <HAL_UART_MspInit+0x10c>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d135      	bne.n	8002f66 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002efa:	2300      	movs	r3, #0
 8002efc:	61bb      	str	r3, [r7, #24]
 8002efe:	4b3a      	ldr	r3, [pc, #232]	; (8002fe8 <HAL_UART_MspInit+0x110>)
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	4a39      	ldr	r2, [pc, #228]	; (8002fe8 <HAL_UART_MspInit+0x110>)
 8002f04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002f08:	6413      	str	r3, [r2, #64]	; 0x40
 8002f0a:	4b37      	ldr	r3, [pc, #220]	; (8002fe8 <HAL_UART_MspInit+0x110>)
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f12:	61bb      	str	r3, [r7, #24]
 8002f14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f16:	2300      	movs	r3, #0
 8002f18:	617b      	str	r3, [r7, #20]
 8002f1a:	4b33      	ldr	r3, [pc, #204]	; (8002fe8 <HAL_UART_MspInit+0x110>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	4a32      	ldr	r2, [pc, #200]	; (8002fe8 <HAL_UART_MspInit+0x110>)
 8002f20:	f043 0304 	orr.w	r3, r3, #4
 8002f24:	6313      	str	r3, [r2, #48]	; 0x30
 8002f26:	4b30      	ldr	r3, [pc, #192]	; (8002fe8 <HAL_UART_MspInit+0x110>)
 8002f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2a:	f003 0304 	and.w	r3, r3, #4
 8002f2e:	617b      	str	r3, [r7, #20]
 8002f30:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002f32:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f38:	2302      	movs	r3, #2
 8002f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f40:	2303      	movs	r3, #3
 8002f42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002f44:	2308      	movs	r3, #8
 8002f46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f48:	f107 031c 	add.w	r3, r7, #28
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4827      	ldr	r0, [pc, #156]	; (8002fec <HAL_UART_MspInit+0x114>)
 8002f50:	f002 fa30 	bl	80053b4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002f54:	2200      	movs	r2, #0
 8002f56:	2100      	movs	r1, #0
 8002f58:	2034      	movs	r0, #52	; 0x34
 8002f5a:	f001 faca 	bl	80044f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002f5e:	2034      	movs	r0, #52	; 0x34
 8002f60:	f001 fae3 	bl	800452a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002f64:	e039      	b.n	8002fda <HAL_UART_MspInit+0x102>
  else if(huart->Instance==USART3)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a21      	ldr	r2, [pc, #132]	; (8002ff0 <HAL_UART_MspInit+0x118>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d134      	bne.n	8002fda <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f70:	2300      	movs	r3, #0
 8002f72:	613b      	str	r3, [r7, #16]
 8002f74:	4b1c      	ldr	r3, [pc, #112]	; (8002fe8 <HAL_UART_MspInit+0x110>)
 8002f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f78:	4a1b      	ldr	r2, [pc, #108]	; (8002fe8 <HAL_UART_MspInit+0x110>)
 8002f7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f7e:	6413      	str	r3, [r2, #64]	; 0x40
 8002f80:	4b19      	ldr	r3, [pc, #100]	; (8002fe8 <HAL_UART_MspInit+0x110>)
 8002f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f88:	613b      	str	r3, [r7, #16]
 8002f8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	4b15      	ldr	r3, [pc, #84]	; (8002fe8 <HAL_UART_MspInit+0x110>)
 8002f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f94:	4a14      	ldr	r2, [pc, #80]	; (8002fe8 <HAL_UART_MspInit+0x110>)
 8002f96:	f043 0308 	orr.w	r3, r3, #8
 8002f9a:	6313      	str	r3, [r2, #48]	; 0x30
 8002f9c:	4b12      	ldr	r3, [pc, #72]	; (8002fe8 <HAL_UART_MspInit+0x110>)
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa0:	f003 0308 	and.w	r3, r3, #8
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002fa8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002fac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fae:	2302      	movs	r3, #2
 8002fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002fba:	2307      	movs	r3, #7
 8002fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fbe:	f107 031c 	add.w	r3, r7, #28
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	480b      	ldr	r0, [pc, #44]	; (8002ff4 <HAL_UART_MspInit+0x11c>)
 8002fc6:	f002 f9f5 	bl	80053b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002fca:	2200      	movs	r2, #0
 8002fcc:	2100      	movs	r1, #0
 8002fce:	2027      	movs	r0, #39	; 0x27
 8002fd0:	f001 fa8f 	bl	80044f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002fd4:	2027      	movs	r0, #39	; 0x27
 8002fd6:	f001 faa8 	bl	800452a <HAL_NVIC_EnableIRQ>
}
 8002fda:	bf00      	nop
 8002fdc:	3730      	adds	r7, #48	; 0x30
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40004c00 	.word	0x40004c00
 8002fe8:	40023800 	.word	0x40023800
 8002fec:	40020800 	.word	0x40020800
 8002ff0:	40004800 	.word	0x40004800
 8002ff4:	40020c00 	.word	0x40020c00

08002ff8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b08a      	sub	sp, #40	; 0x28
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003000:	f107 0314 	add.w	r3, r7, #20
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	605a      	str	r2, [r3, #4]
 800300a:	609a      	str	r2, [r3, #8]
 800300c:	60da      	str	r2, [r3, #12]
 800300e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003018:	d13f      	bne.n	800309a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800301a:	2300      	movs	r3, #0
 800301c:	613b      	str	r3, [r7, #16]
 800301e:	4b21      	ldr	r3, [pc, #132]	; (80030a4 <HAL_PCD_MspInit+0xac>)
 8003020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003022:	4a20      	ldr	r2, [pc, #128]	; (80030a4 <HAL_PCD_MspInit+0xac>)
 8003024:	f043 0301 	orr.w	r3, r3, #1
 8003028:	6313      	str	r3, [r2, #48]	; 0x30
 800302a:	4b1e      	ldr	r3, [pc, #120]	; (80030a4 <HAL_PCD_MspInit+0xac>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	613b      	str	r3, [r7, #16]
 8003034:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003036:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800303a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800303c:	2302      	movs	r3, #2
 800303e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003040:	2300      	movs	r3, #0
 8003042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003044:	2303      	movs	r3, #3
 8003046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003048:	230a      	movs	r3, #10
 800304a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800304c:	f107 0314 	add.w	r3, r7, #20
 8003050:	4619      	mov	r1, r3
 8003052:	4815      	ldr	r0, [pc, #84]	; (80030a8 <HAL_PCD_MspInit+0xb0>)
 8003054:	f002 f9ae 	bl	80053b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003058:	f44f 7300 	mov.w	r3, #512	; 0x200
 800305c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800305e:	2300      	movs	r3, #0
 8003060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003062:	2300      	movs	r3, #0
 8003064:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003066:	f107 0314 	add.w	r3, r7, #20
 800306a:	4619      	mov	r1, r3
 800306c:	480e      	ldr	r0, [pc, #56]	; (80030a8 <HAL_PCD_MspInit+0xb0>)
 800306e:	f002 f9a1 	bl	80053b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003072:	4b0c      	ldr	r3, [pc, #48]	; (80030a4 <HAL_PCD_MspInit+0xac>)
 8003074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003076:	4a0b      	ldr	r2, [pc, #44]	; (80030a4 <HAL_PCD_MspInit+0xac>)
 8003078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800307c:	6353      	str	r3, [r2, #52]	; 0x34
 800307e:	2300      	movs	r3, #0
 8003080:	60fb      	str	r3, [r7, #12]
 8003082:	4b08      	ldr	r3, [pc, #32]	; (80030a4 <HAL_PCD_MspInit+0xac>)
 8003084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003086:	4a07      	ldr	r2, [pc, #28]	; (80030a4 <HAL_PCD_MspInit+0xac>)
 8003088:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800308c:	6453      	str	r3, [r2, #68]	; 0x44
 800308e:	4b05      	ldr	r3, [pc, #20]	; (80030a4 <HAL_PCD_MspInit+0xac>)
 8003090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800309a:	bf00      	nop
 800309c:	3728      	adds	r7, #40	; 0x28
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	40023800 	.word	0x40023800
 80030a8:	40020000 	.word	0x40020000

080030ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80030b0:	e7fe      	b.n	80030b0 <NMI_Handler+0x4>

080030b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030b2:	b480      	push	{r7}
 80030b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030b6:	e7fe      	b.n	80030b6 <HardFault_Handler+0x4>

080030b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030bc:	e7fe      	b.n	80030bc <MemManage_Handler+0x4>

080030be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030be:	b480      	push	{r7}
 80030c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030c2:	e7fe      	b.n	80030c2 <BusFault_Handler+0x4>

080030c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030c8:	e7fe      	b.n	80030c8 <UsageFault_Handler+0x4>

080030ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030ca:	b480      	push	{r7}
 80030cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030ce:	bf00      	nop
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030dc:	bf00      	nop
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030e6:	b480      	push	{r7}
 80030e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030ea:	bf00      	nop
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030f8:	f000 fb96 	bl	8003828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030fc:	bf00      	nop
 80030fe:	bd80      	pop	{r7, pc}

08003100 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_up);
 8003104:	4802      	ldr	r0, [pc, #8]	; (8003110 <DMA1_Stream6_IRQHandler+0x10>)
 8003106:	f001 fbc3 	bl	8004890 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800310a:	bf00      	nop
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	2000095c 	.word	0x2000095c
 8003114:	00000000 	.word	0x00000000

08003118 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003118:	b5b0      	push	{r4, r5, r7, lr}
 800311a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800311c:	4870      	ldr	r0, [pc, #448]	; (80032e0 <ADC_IRQHandler+0x1c8>)
 800311e:	f000 fc0a 	bl	8003936 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */


  ADC1_0= ADC1_value[0];
 8003122:	4b70      	ldr	r3, [pc, #448]	; (80032e4 <ADC_IRQHandler+0x1cc>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a70      	ldr	r2, [pc, #448]	; (80032e8 <ADC_IRQHandler+0x1d0>)
 8003128:	6013      	str	r3, [r2, #0]

  V=ADC1_0 * 0.6547877;  //3227 > 2113(ref)= 2.58V
 800312a:	4b6f      	ldr	r3, [pc, #444]	; (80032e8 <ADC_IRQHandler+0x1d0>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4618      	mov	r0, r3
 8003130:	f7fd f9f8 	bl	8000524 <__aeabi_ui2d>
 8003134:	a364      	add	r3, pc, #400	; (adr r3, 80032c8 <ADC_IRQHandler+0x1b0>)
 8003136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800313a:	f7fd fa6d 	bl	8000618 <__aeabi_dmul>
 800313e:	4602      	mov	r2, r0
 8003140:	460b      	mov	r3, r1
 8003142:	4610      	mov	r0, r2
 8003144:	4619      	mov	r1, r3
 8003146:	f7fd fd5f 	bl	8000c08 <__aeabi_d2f>
 800314a:	4603      	mov	r3, r0
 800314c:	4a67      	ldr	r2, [pc, #412]	; (80032ec <ADC_IRQHandler+0x1d4>)
 800314e:	6013      	str	r3, [r2, #0]
  V1_mV = V *5000 / 4095.0; //[mV]
 8003150:	4b66      	ldr	r3, [pc, #408]	; (80032ec <ADC_IRQHandler+0x1d4>)
 8003152:	edd3 7a00 	vldr	s15, [r3]
 8003156:	ed9f 7a66 	vldr	s14, [pc, #408]	; 80032f0 <ADC_IRQHandler+0x1d8>
 800315a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800315e:	eddf 6a65 	vldr	s13, [pc, #404]	; 80032f4 <ADC_IRQHandler+0x1dc>
 8003162:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003166:	4b64      	ldr	r3, [pc, #400]	; (80032f8 <ADC_IRQHandler+0x1e0>)
 8003168:	edc3 7a00 	vstr	s15, [r3]
  V1_V = V *5 / 4095.0; //[V]
 800316c:	4b5f      	ldr	r3, [pc, #380]	; (80032ec <ADC_IRQHandler+0x1d4>)
 800316e:	edd3 7a00 	vldr	s15, [r3]
 8003172:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003176:	ee27 7a87 	vmul.f32	s14, s15, s14
 800317a:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80032f4 <ADC_IRQHandler+0x1dc>
 800317e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003182:	4b5e      	ldr	r3, [pc, #376]	; (80032fc <ADC_IRQHandler+0x1e4>)
 8003184:	edc3 7a00 	vstr	s15, [r3]


  if(V1_V - 2.58>=0)
 8003188:	4b5c      	ldr	r3, [pc, #368]	; (80032fc <ADC_IRQHandler+0x1e4>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4618      	mov	r0, r3
 800318e:	f7fd f9eb 	bl	8000568 <__aeabi_f2d>
 8003192:	a34f      	add	r3, pc, #316	; (adr r3, 80032d0 <ADC_IRQHandler+0x1b8>)
 8003194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003198:	f7fd f886 	bl	80002a8 <__aeabi_dsub>
 800319c:	4602      	mov	r2, r0
 800319e:	460b      	mov	r3, r1
 80031a0:	4610      	mov	r0, r2
 80031a2:	4619      	mov	r1, r3
 80031a4:	f04f 0200 	mov.w	r2, #0
 80031a8:	f04f 0300 	mov.w	r3, #0
 80031ac:	f7fd fcba 	bl	8000b24 <__aeabi_dcmpge>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d025      	beq.n	8003202 <ADC_IRQHandler+0xea>
  {
	  amp_A = (V1_V -2.58) /285*1000;
 80031b6:	4b51      	ldr	r3, [pc, #324]	; (80032fc <ADC_IRQHandler+0x1e4>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7fd f9d4 	bl	8000568 <__aeabi_f2d>
 80031c0:	a343      	add	r3, pc, #268	; (adr r3, 80032d0 <ADC_IRQHandler+0x1b8>)
 80031c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c6:	f7fd f86f 	bl	80002a8 <__aeabi_dsub>
 80031ca:	4602      	mov	r2, r0
 80031cc:	460b      	mov	r3, r1
 80031ce:	4610      	mov	r0, r2
 80031d0:	4619      	mov	r1, r3
 80031d2:	a341      	add	r3, pc, #260	; (adr r3, 80032d8 <ADC_IRQHandler+0x1c0>)
 80031d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d8:	f7fd fb48 	bl	800086c <__aeabi_ddiv>
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	4610      	mov	r0, r2
 80031e2:	4619      	mov	r1, r3
 80031e4:	f04f 0200 	mov.w	r2, #0
 80031e8:	4b45      	ldr	r3, [pc, #276]	; (8003300 <ADC_IRQHandler+0x1e8>)
 80031ea:	f7fd fa15 	bl	8000618 <__aeabi_dmul>
 80031ee:	4602      	mov	r2, r0
 80031f0:	460b      	mov	r3, r1
 80031f2:	4610      	mov	r0, r2
 80031f4:	4619      	mov	r1, r3
 80031f6:	f7fd fd07 	bl	8000c08 <__aeabi_d2f>
 80031fa:	4603      	mov	r3, r0
 80031fc:	4a41      	ldr	r2, [pc, #260]	; (8003304 <ADC_IRQHandler+0x1ec>)
 80031fe:	6013      	str	r3, [r2, #0]
 8003200:	e03e      	b.n	8003280 <ADC_IRQHandler+0x168>
  }
  else if(V1_V - 2.58 < 0)
 8003202:	4b3e      	ldr	r3, [pc, #248]	; (80032fc <ADC_IRQHandler+0x1e4>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f7fd f9ae 	bl	8000568 <__aeabi_f2d>
 800320c:	a330      	add	r3, pc, #192	; (adr r3, 80032d0 <ADC_IRQHandler+0x1b8>)
 800320e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003212:	f7fd f849 	bl	80002a8 <__aeabi_dsub>
 8003216:	4602      	mov	r2, r0
 8003218:	460b      	mov	r3, r1
 800321a:	4610      	mov	r0, r2
 800321c:	4619      	mov	r1, r3
 800321e:	f04f 0200 	mov.w	r2, #0
 8003222:	f04f 0300 	mov.w	r3, #0
 8003226:	f7fd fc69 	bl	8000afc <__aeabi_dcmplt>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d027      	beq.n	8003280 <ADC_IRQHandler+0x168>
  {
	  amp_A = -(V1_V - 2.58) /285*1000;
 8003230:	4b32      	ldr	r3, [pc, #200]	; (80032fc <ADC_IRQHandler+0x1e4>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f7fd f997 	bl	8000568 <__aeabi_f2d>
 800323a:	a325      	add	r3, pc, #148	; (adr r3, 80032d0 <ADC_IRQHandler+0x1b8>)
 800323c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003240:	f7fd f832 	bl	80002a8 <__aeabi_dsub>
 8003244:	4602      	mov	r2, r0
 8003246:	460b      	mov	r3, r1
 8003248:	4614      	mov	r4, r2
 800324a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800324e:	a322      	add	r3, pc, #136	; (adr r3, 80032d8 <ADC_IRQHandler+0x1c0>)
 8003250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003254:	4620      	mov	r0, r4
 8003256:	4629      	mov	r1, r5
 8003258:	f7fd fb08 	bl	800086c <__aeabi_ddiv>
 800325c:	4602      	mov	r2, r0
 800325e:	460b      	mov	r3, r1
 8003260:	4610      	mov	r0, r2
 8003262:	4619      	mov	r1, r3
 8003264:	f04f 0200 	mov.w	r2, #0
 8003268:	4b25      	ldr	r3, [pc, #148]	; (8003300 <ADC_IRQHandler+0x1e8>)
 800326a:	f7fd f9d5 	bl	8000618 <__aeabi_dmul>
 800326e:	4602      	mov	r2, r0
 8003270:	460b      	mov	r3, r1
 8003272:	4610      	mov	r0, r2
 8003274:	4619      	mov	r1, r3
 8003276:	f7fd fcc7 	bl	8000c08 <__aeabi_d2f>
 800327a:	4603      	mov	r3, r0
 800327c:	4a21      	ldr	r2, [pc, #132]	; (8003304 <ADC_IRQHandler+0x1ec>)
 800327e:	6013      	str	r3, [r2, #0]
  }


  amp_mA = amp_A * 1000;
 8003280:	4b20      	ldr	r3, [pc, #128]	; (8003304 <ADC_IRQHandler+0x1ec>)
 8003282:	edd3 7a00 	vldr	s15, [r3]
 8003286:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003308 <ADC_IRQHandler+0x1f0>
 800328a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800328e:	4b1f      	ldr	r3, [pc, #124]	; (800330c <ADC_IRQHandler+0x1f4>)
 8003290:	edc3 7a00 	vstr	s15, [r3]

  sum=amp_mA + sum;
 8003294:	4b1d      	ldr	r3, [pc, #116]	; (800330c <ADC_IRQHandler+0x1f4>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4618      	mov	r0, r3
 800329a:	f7fd f965 	bl	8000568 <__aeabi_f2d>
 800329e:	4b1c      	ldr	r3, [pc, #112]	; (8003310 <ADC_IRQHandler+0x1f8>)
 80032a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a4:	f7fd f802 	bl	80002ac <__adddf3>
 80032a8:	4602      	mov	r2, r0
 80032aa:	460b      	mov	r3, r1
 80032ac:	4918      	ldr	r1, [pc, #96]	; (8003310 <ADC_IRQHandler+0x1f8>)
 80032ae:	e9c1 2300 	strd	r2, r3, [r1]
 	  i++;
 80032b2:	4b18      	ldr	r3, [pc, #96]	; (8003314 <ADC_IRQHandler+0x1fc>)
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	3301      	adds	r3, #1
 80032b8:	b2da      	uxtb	r2, r3
 80032ba:	4b16      	ldr	r3, [pc, #88]	; (8003314 <ADC_IRQHandler+0x1fc>)
 80032bc:	701a      	strb	r2, [r3, #0]
 	 			  sum=0;
 	 	  }


  /* USER CODE END ADC_IRQn 1 */
}
 80032be:	bf00      	nop
 80032c0:	bdb0      	pop	{r4, r5, r7, pc}
 80032c2:	bf00      	nop
 80032c4:	f3af 8000 	nop.w
 80032c8:	55aa5680 	.word	0x55aa5680
 80032cc:	3fe4f405 	.word	0x3fe4f405
 80032d0:	0a3d70a4 	.word	0x0a3d70a4
 80032d4:	4004a3d7 	.word	0x4004a3d7
 80032d8:	00000000 	.word	0x00000000
 80032dc:	4071d000 	.word	0x4071d000
 80032e0:	2000057c 	.word	0x2000057c
 80032e4:	200003a8 	.word	0x200003a8
 80032e8:	200003b0 	.word	0x200003b0
 80032ec:	20000ec4 	.word	0x20000ec4
 80032f0:	459c4000 	.word	0x459c4000
 80032f4:	457ff000 	.word	0x457ff000
 80032f8:	20000ec8 	.word	0x20000ec8
 80032fc:	20000ecc 	.word	0x20000ecc
 8003300:	408f4000 	.word	0x408f4000
 8003304:	20000ed0 	.word	0x20000ed0
 8003308:	447a0000 	.word	0x447a0000
 800330c:	20000ed4 	.word	0x20000ed4
 8003310:	20000ed8 	.word	0x20000ed8
 8003314:	20000ee0 	.word	0x20000ee0

08003318 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800331c:	4802      	ldr	r0, [pc, #8]	; (8003328 <TIM3_IRQHandler+0x10>)
 800331e:	f003 fbf1 	bl	8006b04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */


  /* USER CODE END TIM3_IRQn 1 */
}
 8003322:	bf00      	nop
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	20000764 	.word	0x20000764

0800332c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003330:	4802      	ldr	r0, [pc, #8]	; (800333c <USART3_IRQHandler+0x10>)
 8003332:	f004 fbed 	bl	8007b10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003336:	bf00      	nop
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	200002f8 	.word	0x200002f8

08003340 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003344:	4805      	ldr	r0, [pc, #20]	; (800335c <TIM8_UP_TIM13_IRQHandler+0x1c>)
 8003346:	f003 fbdd 	bl	8006b04 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 800334a:	4805      	ldr	r0, [pc, #20]	; (8003360 <TIM8_UP_TIM13_IRQHandler+0x20>)
 800334c:	f003 fbda 	bl	8006b04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */
  //0.0001/4

  //GPIOB->ODR ^=1<<0;  //ok

  tim13_flag=1;
 8003350:	4b04      	ldr	r3, [pc, #16]	; (8003364 <TIM8_UP_TIM13_IRQHandler+0x24>)
 8003352:	2201      	movs	r2, #1
 8003354:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003356:	bf00      	nop
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	20000884 	.word	0x20000884
 8003360:	200008cc 	.word	0x200008cc
 8003364:	20000ec0 	.word	0x20000ec0

08003368 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800336c:	4836      	ldr	r0, [pc, #216]	; (8003448 <TIM8_TRG_COM_TIM14_IRQHandler+0xe0>)
 800336e:	f003 fbc9 	bl	8006b04 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 8003372:	4836      	ldr	r0, [pc, #216]	; (800344c <TIM8_TRG_COM_TIM14_IRQHandler+0xe4>)
 8003374:	f003 fbc6 	bl	8006b04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

 tim14_flag++;
 8003378:	4b35      	ldr	r3, [pc, #212]	; (8003450 <TIM8_TRG_COM_TIM14_IRQHandler+0xe8>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	3301      	adds	r3, #1
 800337e:	4a34      	ldr	r2, [pc, #208]	; (8003450 <TIM8_TRG_COM_TIM14_IRQHandler+0xe8>)
 8003380:	6013      	str	r3, [r2, #0]

//motor1
  ENCODER_OLD= ENCODER_NEW;
 8003382:	4b34      	ldr	r3, [pc, #208]	; (8003454 <TIM8_TRG_COM_TIM14_IRQHandler+0xec>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a34      	ldr	r2, [pc, #208]	; (8003458 <TIM8_TRG_COM_TIM14_IRQHandler+0xf0>)
 8003388:	6013      	str	r3, [r2, #0]
  ENCODER_NEW = TIM4->CNT;
 800338a:	4b34      	ldr	r3, [pc, #208]	; (800345c <TIM8_TRG_COM_TIM14_IRQHandler+0xf4>)
 800338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338e:	4a31      	ldr	r2, [pc, #196]	; (8003454 <TIM8_TRG_COM_TIM14_IRQHandler+0xec>)
 8003390:	6013      	str	r3, [r2, #0]


   	RPM =  ((abs(ENCODER_NEW-ENCODER_OLD)*60))/512.0/0.01;	// ?��코더 ?��?��: 1 turn?�� 3 pulse 출력
 8003392:	4b30      	ldr	r3, [pc, #192]	; (8003454 <TIM8_TRG_COM_TIM14_IRQHandler+0xec>)
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	4b30      	ldr	r3, [pc, #192]	; (8003458 <TIM8_TRG_COM_TIM14_IRQHandler+0xf0>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80033a0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80033a4:	4613      	mov	r3, r2
 80033a6:	011b      	lsls	r3, r3, #4
 80033a8:	1a9b      	subs	r3, r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7fd f8c9 	bl	8000544 <__aeabi_i2d>
 80033b2:	f04f 0200 	mov.w	r2, #0
 80033b6:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 80033ba:	f7fd fa57 	bl	800086c <__aeabi_ddiv>
 80033be:	4602      	mov	r2, r0
 80033c0:	460b      	mov	r3, r1
 80033c2:	4610      	mov	r0, r2
 80033c4:	4619      	mov	r1, r3
 80033c6:	a31c      	add	r3, pc, #112	; (adr r3, 8003438 <TIM8_TRG_COM_TIM14_IRQHandler+0xd0>)
 80033c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033cc:	f7fd fa4e 	bl	800086c <__aeabi_ddiv>
 80033d0:	4602      	mov	r2, r0
 80033d2:	460b      	mov	r3, r1
 80033d4:	4610      	mov	r0, r2
 80033d6:	4619      	mov	r1, r3
 80033d8:	f7fd fc16 	bl	8000c08 <__aeabi_d2f>
 80033dc:	4603      	mov	r3, r0
 80033de:	4a20      	ldr	r2, [pc, #128]	; (8003460 <TIM8_TRG_COM_TIM14_IRQHandler+0xf8>)
 80033e0:	6013      	str	r3, [r2, #0]
    	RPS=RPM/60;
 80033e2:	4b1f      	ldr	r3, [pc, #124]	; (8003460 <TIM8_TRG_COM_TIM14_IRQHandler+0xf8>)
 80033e4:	ed93 7a00 	vldr	s14, [r3]
 80033e8:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8003464 <TIM8_TRG_COM_TIM14_IRQHandler+0xfc>
 80033ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033f0:	4b1d      	ldr	r3, [pc, #116]	; (8003468 <TIM8_TRG_COM_TIM14_IRQHandler+0x100>)
 80033f2:	edc3 7a00 	vstr	s15, [r3]
    	Omega= RPS*2*pi;
 80033f6:	4b1c      	ldr	r3, [pc, #112]	; (8003468 <TIM8_TRG_COM_TIM14_IRQHandler+0x100>)
 80033f8:	edd3 7a00 	vldr	s15, [r3]
 80033fc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003400:	ee17 0a90 	vmov	r0, s15
 8003404:	f7fd f8b0 	bl	8000568 <__aeabi_f2d>
 8003408:	a30d      	add	r3, pc, #52	; (adr r3, 8003440 <TIM8_TRG_COM_TIM14_IRQHandler+0xd8>)
 800340a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800340e:	f7fd f903 	bl	8000618 <__aeabi_dmul>
 8003412:	4602      	mov	r2, r0
 8003414:	460b      	mov	r3, r1
 8003416:	4610      	mov	r0, r2
 8003418:	4619      	mov	r1, r3
 800341a:	f7fd fbf5 	bl	8000c08 <__aeabi_d2f>
 800341e:	4603      	mov	r3, r0
 8003420:	4a12      	ldr	r2, [pc, #72]	; (800346c <TIM8_TRG_COM_TIM14_IRQHandler+0x104>)
 8003422:	6013      	str	r3, [r2, #0]





    	GPIOB->ODR ^= 1<<7;
 8003424:	4b12      	ldr	r3, [pc, #72]	; (8003470 <TIM8_TRG_COM_TIM14_IRQHandler+0x108>)
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	4a11      	ldr	r2, [pc, #68]	; (8003470 <TIM8_TRG_COM_TIM14_IRQHandler+0x108>)
 800342a:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 800342e:	6153      	str	r3, [r2, #20]
  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003430:	bf00      	nop
 8003432:	bd80      	pop	{r7, pc}
 8003434:	f3af 8000 	nop.w
 8003438:	47ae147b 	.word	0x47ae147b
 800343c:	3f847ae1 	.word	0x3f847ae1
 8003440:	fc8b007a 	.word	0xfc8b007a
 8003444:	400921fa 	.word	0x400921fa
 8003448:	20000884 	.word	0x20000884
 800344c:	20000914 	.word	0x20000914
 8003450:	20000ebc 	.word	0x20000ebc
 8003454:	20000394 	.word	0x20000394
 8003458:	20000398 	.word	0x20000398
 800345c:	40000800 	.word	0x40000800
 8003460:	2000039c 	.word	0x2000039c
 8003464:	42700000 	.word	0x42700000
 8003468:	200003a0 	.word	0x200003a0
 800346c:	200003bc 	.word	0x200003bc
 8003470:	40020400 	.word	0x40020400

08003474 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003478:	4802      	ldr	r0, [pc, #8]	; (8003484 <UART4_IRQHandler+0x10>)
 800347a:	f004 fb49 	bl	8007b10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800347e:	bf00      	nop
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	20000344 	.word	0x20000344

08003488 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800348c:	4837      	ldr	r0, [pc, #220]	; (800356c <TIM6_DAC_IRQHandler+0xe4>)
 800348e:	f003 fb39 	bl	8006b04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  tim6_flag=1;
 8003492:	4b37      	ldr	r3, [pc, #220]	; (8003570 <TIM6_DAC_IRQHandler+0xe8>)
 8003494:	2201      	movs	r2, #1
 8003496:	601a      	str	r2, [r3, #0]





  encoder_count=TIM4->CNT;
 8003498:	4b36      	ldr	r3, [pc, #216]	; (8003574 <TIM6_DAC_IRQHandler+0xec>)
 800349a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349c:	4a36      	ldr	r2, [pc, #216]	; (8003578 <TIM6_DAC_IRQHandler+0xf0>)
 800349e:	6013      	str	r3, [r2, #0]



	if(key_flag==1)
 80034a0:	4b36      	ldr	r3, [pc, #216]	; (800357c <TIM6_DAC_IRQHandler+0xf4>)
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d12d      	bne.n	8003504 <TIM6_DAC_IRQHandler+0x7c>
	  {
		  GPIOE->ODR &= ~1<<0;  // forward
 80034a8:	4b35      	ldr	r3, [pc, #212]	; (8003580 <TIM6_DAC_IRQHandler+0xf8>)
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	4a34      	ldr	r2, [pc, #208]	; (8003580 <TIM6_DAC_IRQHandler+0xf8>)
 80034ae:	f023 0301 	bic.w	r3, r3, #1
 80034b2:	6153      	str	r3, [r2, #20]

	      GPIOG->ODR &= ~1<<0;  //start
 80034b4:	4b33      	ldr	r3, [pc, #204]	; (8003584 <TIM6_DAC_IRQHandler+0xfc>)
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	4a32      	ldr	r2, [pc, #200]	; (8003584 <TIM6_DAC_IRQHandler+0xfc>)
 80034ba:	f023 0301 	bic.w	r3, r3, #1
 80034be:	6153      	str	r3, [r2, #20]

		  TIM3->CCR1 = 250;
 80034c0:	4b31      	ldr	r3, [pc, #196]	; (8003588 <TIM6_DAC_IRQHandler+0x100>)
 80034c2:	22fa      	movs	r2, #250	; 0xfa
 80034c4:	635a      	str	r2, [r3, #52]	; 0x34

		    if(TIM4->CNT>=10220)
 80034c6:	4b2b      	ldr	r3, [pc, #172]	; (8003574 <TIM6_DAC_IRQHandler+0xec>)
 80034c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ca:	f242 72eb 	movw	r2, #10219	; 0x27eb
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d918      	bls.n	8003504 <TIM6_DAC_IRQHandler+0x7c>
			{
		    	TIM3->CCR1 = 100;
 80034d2:	4b2d      	ldr	r3, [pc, #180]	; (8003588 <TIM6_DAC_IRQHandler+0x100>)
 80034d4:	2264      	movs	r2, #100	; 0x64
 80034d6:	635a      	str	r2, [r3, #52]	; 0x34

		 		if(TIM4->CNT>=10512)
 80034d8:	4b26      	ldr	r3, [pc, #152]	; (8003574 <TIM6_DAC_IRQHandler+0xec>)
 80034da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034dc:	f642 120f 	movw	r2, #10511	; 0x290f
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d90f      	bls.n	8003504 <TIM6_DAC_IRQHandler+0x7c>
		  		{
			         GPIOG->ODR |= 1<<0;  //stop
 80034e4:	4b27      	ldr	r3, [pc, #156]	; (8003584 <TIM6_DAC_IRQHandler+0xfc>)
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	4a26      	ldr	r2, [pc, #152]	; (8003584 <TIM6_DAC_IRQHandler+0xfc>)
 80034ea:	f043 0301 	orr.w	r3, r3, #1
 80034ee:	6153      	str	r3, [r2, #20]
			        //  key_flag=0;
			          stop_flag=1;
 80034f0:	4b26      	ldr	r3, [pc, #152]	; (800358c <TIM6_DAC_IRQHandler+0x104>)
 80034f2:	2201      	movs	r2, #1
 80034f4:	701a      	strb	r2, [r3, #0]
			          key_flag=0;
 80034f6:	4b21      	ldr	r3, [pc, #132]	; (800357c <TIM6_DAC_IRQHandler+0xf4>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	701a      	strb	r2, [r3, #0]
			          HAL_Delay(2000);
 80034fc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003500:	f000 f9b2 	bl	8003868 <HAL_Delay>


	  }


	  if(stop_flag==1)
 8003504:	4b21      	ldr	r3, [pc, #132]	; (800358c <TIM6_DAC_IRQHandler+0x104>)
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d12c      	bne.n	8003566 <TIM6_DAC_IRQHandler+0xde>
	      	    {
	      	          GPIOE->ODR |= 1<<0;  //back
 800350c:	4b1c      	ldr	r3, [pc, #112]	; (8003580 <TIM6_DAC_IRQHandler+0xf8>)
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	4a1b      	ldr	r2, [pc, #108]	; (8003580 <TIM6_DAC_IRQHandler+0xf8>)
 8003512:	f043 0301 	orr.w	r3, r3, #1
 8003516:	6153      	str	r3, [r2, #20]
	      	          GPIOG->ODR &= ~1<<0;  //start
 8003518:	4b1a      	ldr	r3, [pc, #104]	; (8003584 <TIM6_DAC_IRQHandler+0xfc>)
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	4a19      	ldr	r2, [pc, #100]	; (8003584 <TIM6_DAC_IRQHandler+0xfc>)
 800351e:	f023 0301 	bic.w	r3, r3, #1
 8003522:	6153      	str	r3, [r2, #20]
	      	          TIM3->CCR1 = 250;
 8003524:	4b18      	ldr	r3, [pc, #96]	; (8003588 <TIM6_DAC_IRQHandler+0x100>)
 8003526:	22fa      	movs	r2, #250	; 0xfa
 8003528:	635a      	str	r2, [r3, #52]	; 0x34


	      	            if(encoder_count<=10280)
 800352a:	4b13      	ldr	r3, [pc, #76]	; (8003578 <TIM6_DAC_IRQHandler+0xf0>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f642 0228 	movw	r2, #10280	; 0x2828
 8003532:	4293      	cmp	r3, r2
 8003534:	d817      	bhi.n	8003566 <TIM6_DAC_IRQHandler+0xde>
	      	            {
	      	            	  TIM3->CCR1 = 87;
 8003536:	4b14      	ldr	r3, [pc, #80]	; (8003588 <TIM6_DAC_IRQHandler+0x100>)
 8003538:	2257      	movs	r2, #87	; 0x57
 800353a:	635a      	str	r2, [r3, #52]	; 0x34
	      	             	  if(encoder_count<=10000)
 800353c:	4b0e      	ldr	r3, [pc, #56]	; (8003578 <TIM6_DAC_IRQHandler+0xf0>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f242 7210 	movw	r2, #10000	; 0x2710
 8003544:	4293      	cmp	r3, r2
 8003546:	d80e      	bhi.n	8003566 <TIM6_DAC_IRQHandler+0xde>
	      	    	      	    {
	      	    	  		 		  GPIOG->ODR |= 1<<0;  //stop
 8003548:	4b0e      	ldr	r3, [pc, #56]	; (8003584 <TIM6_DAC_IRQHandler+0xfc>)
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	4a0d      	ldr	r2, [pc, #52]	; (8003584 <TIM6_DAC_IRQHandler+0xfc>)
 800354e:	f043 0301 	orr.w	r3, r3, #1
 8003552:	6153      	str	r3, [r2, #20]
	      	    	          		  GPIOE->ODR &= ~1<<0;  //go
 8003554:	4b0a      	ldr	r3, [pc, #40]	; (8003580 <TIM6_DAC_IRQHandler+0xf8>)
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	4a09      	ldr	r2, [pc, #36]	; (8003580 <TIM6_DAC_IRQHandler+0xf8>)
 800355a:	f023 0301 	bic.w	r3, r3, #1
 800355e:	6153      	str	r3, [r2, #20]
	      	    	  		         stop_flag=0;
 8003560:	4b0a      	ldr	r3, [pc, #40]	; (800358c <TIM6_DAC_IRQHandler+0x104>)
 8003562:	2200      	movs	r2, #0
 8003564:	701a      	strb	r2, [r3, #0]




  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003566:	bf00      	nop
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	200007f4 	.word	0x200007f4
 8003570:	20000eb8 	.word	0x20000eb8
 8003574:	40000800 	.word	0x40000800
 8003578:	2000038c 	.word	0x2000038c
 800357c:	200003c0 	.word	0x200003c0
 8003580:	40021000 	.word	0x40021000
 8003584:	40021800 	.word	0x40021800
 8003588:	40000400 	.word	0x40000400
 800358c:	20000ee1 	.word	0x20000ee1

08003590 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003594:	4802      	ldr	r0, [pc, #8]	; (80035a0 <TIM7_IRQHandler+0x10>)
 8003596:	f003 fab5 	bl	8006b04 <HAL_TIM_IRQHandler>
  	  		          }

  }*/

  /* USER CODE END TIM7_IRQn 1 */
}
 800359a:	bf00      	nop
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	2000083c 	.word	0x2000083c

080035a4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80035a8:	4802      	ldr	r0, [pc, #8]	; (80035b4 <DMA2_Stream0_IRQHandler+0x10>)
 80035aa:	f001 f971 	bl	8004890 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80035ae:	bf00      	nop
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	200005c4 	.word	0x200005c4

080035b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  return 1;
 80035bc:	2301      	movs	r3, #1
}
 80035be:	4618      	mov	r0, r3
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <_kill>:

int _kill(int pid, int sig)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80035d2:	f006 fae3 	bl	8009b9c <__errno>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2216      	movs	r2, #22
 80035da:	601a      	str	r2, [r3, #0]
  return -1;
 80035dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3708      	adds	r7, #8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <_exit>:

void _exit (int status)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80035f0:	f04f 31ff 	mov.w	r1, #4294967295
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f7ff ffe7 	bl	80035c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80035fa:	e7fe      	b.n	80035fa <_exit+0x12>

080035fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003608:	2300      	movs	r3, #0
 800360a:	617b      	str	r3, [r7, #20]
 800360c:	e00a      	b.n	8003624 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800360e:	f3af 8000 	nop.w
 8003612:	4601      	mov	r1, r0
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	1c5a      	adds	r2, r3, #1
 8003618:	60ba      	str	r2, [r7, #8]
 800361a:	b2ca      	uxtb	r2, r1
 800361c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	3301      	adds	r3, #1
 8003622:	617b      	str	r3, [r7, #20]
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	429a      	cmp	r2, r3
 800362a:	dbf0      	blt.n	800360e <_read+0x12>
  }

  return len;
 800362c:	687b      	ldr	r3, [r7, #4]
}
 800362e:	4618      	mov	r0, r3
 8003630:	3718      	adds	r7, #24
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003636:	b480      	push	{r7}
 8003638:	b083      	sub	sp, #12
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800363e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003642:	4618      	mov	r0, r3
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800364e:	b480      	push	{r7}
 8003650:	b083      	sub	sp, #12
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
 8003656:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800365e:	605a      	str	r2, [r3, #4]
  return 0;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <_isatty>:

int _isatty(int file)
{
 800366e:	b480      	push	{r7}
 8003670:	b083      	sub	sp, #12
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003676:	2301      	movs	r3, #1
}
 8003678:	4618      	mov	r0, r3
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3714      	adds	r7, #20
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
	...

080036a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036a8:	4a14      	ldr	r2, [pc, #80]	; (80036fc <_sbrk+0x5c>)
 80036aa:	4b15      	ldr	r3, [pc, #84]	; (8003700 <_sbrk+0x60>)
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036b4:	4b13      	ldr	r3, [pc, #76]	; (8003704 <_sbrk+0x64>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d102      	bne.n	80036c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036bc:	4b11      	ldr	r3, [pc, #68]	; (8003704 <_sbrk+0x64>)
 80036be:	4a12      	ldr	r2, [pc, #72]	; (8003708 <_sbrk+0x68>)
 80036c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036c2:	4b10      	ldr	r3, [pc, #64]	; (8003704 <_sbrk+0x64>)
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4413      	add	r3, r2
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d207      	bcs.n	80036e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036d0:	f006 fa64 	bl	8009b9c <__errno>
 80036d4:	4603      	mov	r3, r0
 80036d6:	220c      	movs	r2, #12
 80036d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036da:	f04f 33ff 	mov.w	r3, #4294967295
 80036de:	e009      	b.n	80036f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036e0:	4b08      	ldr	r3, [pc, #32]	; (8003704 <_sbrk+0x64>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036e6:	4b07      	ldr	r3, [pc, #28]	; (8003704 <_sbrk+0x64>)
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4413      	add	r3, r2
 80036ee:	4a05      	ldr	r2, [pc, #20]	; (8003704 <_sbrk+0x64>)
 80036f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036f2:	68fb      	ldr	r3, [r7, #12]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3718      	adds	r7, #24
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	20030000 	.word	0x20030000
 8003700:	00000400 	.word	0x00000400
 8003704:	20000ee4 	.word	0x20000ee4
 8003708:	20001038 	.word	0x20001038

0800370c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003710:	4b06      	ldr	r3, [pc, #24]	; (800372c <SystemInit+0x20>)
 8003712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003716:	4a05      	ldr	r2, [pc, #20]	; (800372c <SystemInit+0x20>)
 8003718:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800371c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003720:	bf00      	nop
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	e000ed00 	.word	0xe000ed00

08003730 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003730:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003768 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003734:	f7ff ffea 	bl	800370c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003738:	480c      	ldr	r0, [pc, #48]	; (800376c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800373a:	490d      	ldr	r1, [pc, #52]	; (8003770 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800373c:	4a0d      	ldr	r2, [pc, #52]	; (8003774 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800373e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003740:	e002      	b.n	8003748 <LoopCopyDataInit>

08003742 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003742:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003744:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003746:	3304      	adds	r3, #4

08003748 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003748:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800374a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800374c:	d3f9      	bcc.n	8003742 <CopyDataInit>
  


/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800374e:	4a0a      	ldr	r2, [pc, #40]	; (8003778 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003750:	4c0a      	ldr	r4, [pc, #40]	; (800377c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003752:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003754:	e001      	b.n	800375a <LoopFillZerobss>

08003756 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003756:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003758:	3204      	adds	r2, #4

0800375a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800375a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800375c:	d3fb      	bcc.n	8003756 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800375e:	f006 fa23 	bl	8009ba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003762:	f7fd fead 	bl	80014c0 <main>
  bx  lr    
 8003766:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003768:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800376c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003770:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003774:	0800c0d4 	.word	0x0800c0d4
  ldr r2, =_sbss
 8003778:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800377c:	20001038 	.word	0x20001038

08003780 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003780:	e7fe      	b.n	8003780 <CAN1_RX0_IRQHandler>
	...

08003784 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003788:	4b0e      	ldr	r3, [pc, #56]	; (80037c4 <HAL_Init+0x40>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a0d      	ldr	r2, [pc, #52]	; (80037c4 <HAL_Init+0x40>)
 800378e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003792:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003794:	4b0b      	ldr	r3, [pc, #44]	; (80037c4 <HAL_Init+0x40>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a0a      	ldr	r2, [pc, #40]	; (80037c4 <HAL_Init+0x40>)
 800379a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800379e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037a0:	4b08      	ldr	r3, [pc, #32]	; (80037c4 <HAL_Init+0x40>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a07      	ldr	r2, [pc, #28]	; (80037c4 <HAL_Init+0x40>)
 80037a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037ac:	2003      	movs	r0, #3
 80037ae:	f000 fe95 	bl	80044dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037b2:	2000      	movs	r0, #0
 80037b4:	f000 f808 	bl	80037c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037b8:	f7fe fff0 	bl	800279c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	40023c00 	.word	0x40023c00

080037c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037d0:	4b12      	ldr	r3, [pc, #72]	; (800381c <HAL_InitTick+0x54>)
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	4b12      	ldr	r3, [pc, #72]	; (8003820 <HAL_InitTick+0x58>)
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	4619      	mov	r1, r3
 80037da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037de:	fbb3 f3f1 	udiv	r3, r3, r1
 80037e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 fead 	bl	8004546 <HAL_SYSTICK_Config>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e00e      	b.n	8003814 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2b0f      	cmp	r3, #15
 80037fa:	d80a      	bhi.n	8003812 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037fc:	2200      	movs	r2, #0
 80037fe:	6879      	ldr	r1, [r7, #4]
 8003800:	f04f 30ff 	mov.w	r0, #4294967295
 8003804:	f000 fe75 	bl	80044f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003808:	4a06      	ldr	r2, [pc, #24]	; (8003824 <HAL_InitTick+0x5c>)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800380e:	2300      	movs	r3, #0
 8003810:	e000      	b.n	8003814 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
}
 8003814:	4618      	mov	r0, r3
 8003816:	3708      	adds	r7, #8
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	20000000 	.word	0x20000000
 8003820:	20000008 	.word	0x20000008
 8003824:	20000004 	.word	0x20000004

08003828 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800382c:	4b06      	ldr	r3, [pc, #24]	; (8003848 <HAL_IncTick+0x20>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	461a      	mov	r2, r3
 8003832:	4b06      	ldr	r3, [pc, #24]	; (800384c <HAL_IncTick+0x24>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4413      	add	r3, r2
 8003838:	4a04      	ldr	r2, [pc, #16]	; (800384c <HAL_IncTick+0x24>)
 800383a:	6013      	str	r3, [r2, #0]
}
 800383c:	bf00      	nop
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	20000008 	.word	0x20000008
 800384c:	20000ee8 	.word	0x20000ee8

08003850 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
  return uwTick;
 8003854:	4b03      	ldr	r3, [pc, #12]	; (8003864 <HAL_GetTick+0x14>)
 8003856:	681b      	ldr	r3, [r3, #0]
}
 8003858:	4618      	mov	r0, r3
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	20000ee8 	.word	0x20000ee8

08003868 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003870:	f7ff ffee 	bl	8003850 <HAL_GetTick>
 8003874:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003880:	d005      	beq.n	800388e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003882:	4b0a      	ldr	r3, [pc, #40]	; (80038ac <HAL_Delay+0x44>)
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	461a      	mov	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4413      	add	r3, r2
 800388c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800388e:	bf00      	nop
 8003890:	f7ff ffde 	bl	8003850 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	429a      	cmp	r2, r3
 800389e:	d8f7      	bhi.n	8003890 <HAL_Delay+0x28>
  {
  }
}
 80038a0:	bf00      	nop
 80038a2:	bf00      	nop
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	20000008 	.word	0x20000008

080038b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038b8:	2300      	movs	r3, #0
 80038ba:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e033      	b.n	800392e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d109      	bne.n	80038e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f7fe ff8c 	bl	80027ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	f003 0310 	and.w	r3, r3, #16
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d118      	bne.n	8003920 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80038f6:	f023 0302 	bic.w	r3, r3, #2
 80038fa:	f043 0202 	orr.w	r2, r3, #2
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 fb92 	bl	800402c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	f023 0303 	bic.w	r3, r3, #3
 8003916:	f043 0201 	orr.w	r2, r3, #1
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	641a      	str	r2, [r3, #64]	; 0x40
 800391e:	e001      	b.n	8003924 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800392c:	7bfb      	ldrb	r3, [r7, #15]
}
 800392e:	4618      	mov	r0, r3
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b086      	sub	sp, #24
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800393e:	2300      	movs	r3, #0
 8003940:	617b      	str	r3, [r7, #20]
 8003942:	2300      	movs	r3, #0
 8003944:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	f003 0320 	and.w	r3, r3, #32
 8003964:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d049      	beq.n	8003a00 <HAL_ADC_IRQHandler+0xca>
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d046      	beq.n	8003a00 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	f003 0310 	and.w	r3, r3, #16
 800397a:	2b00      	cmp	r3, #0
 800397c:	d105      	bne.n	800398a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d12b      	bne.n	80039f0 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800399c:	2b00      	cmp	r3, #0
 800399e:	d127      	bne.n	80039f0 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d006      	beq.n	80039bc <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d119      	bne.n	80039f0 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 0220 	bic.w	r2, r2, #32
 80039ca:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d105      	bne.n	80039f0 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e8:	f043 0201 	orr.w	r2, r3, #1
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 f9c1 	bl	8003d78 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f06f 0212 	mvn.w	r2, #18
 80039fe:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f003 0304 	and.w	r3, r3, #4
 8003a06:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a0e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d057      	beq.n	8003ac6 <HAL_ADC_IRQHandler+0x190>
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d054      	beq.n	8003ac6 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a20:	f003 0310 	and.w	r3, r3, #16
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d105      	bne.n	8003a34 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d139      	bne.n	8003ab6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a48:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d006      	beq.n	8003a5e <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d12b      	bne.n	8003ab6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d124      	bne.n	8003ab6 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d11d      	bne.n	8003ab6 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d119      	bne.n	8003ab6 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	685a      	ldr	r2, [r3, #4]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a90:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d105      	bne.n	8003ab6 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	f043 0201 	orr.w	r2, r3, #1
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 fc36 	bl	8004328 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f06f 020c 	mvn.w	r2, #12
 8003ac4:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad4:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d017      	beq.n	8003b0c <HAL_ADC_IRQHandler+0x1d6>
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d014      	beq.n	8003b0c <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d10d      	bne.n	8003b0c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 f94f 	bl	8003da0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f06f 0201 	mvn.w	r2, #1
 8003b0a:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f003 0320 	and.w	r3, r3, #32
 8003b12:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b1a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d015      	beq.n	8003b4e <HAL_ADC_IRQHandler+0x218>
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d012      	beq.n	8003b4e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2c:	f043 0202 	orr.w	r2, r3, #2
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f06f 0220 	mvn.w	r2, #32
 8003b3c:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f938 	bl	8003db4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f06f 0220 	mvn.w	r2, #32
 8003b4c:	601a      	str	r2, [r3, #0]
  }
}
 8003b4e:	bf00      	nop
 8003b50:	3718      	adds	r7, #24
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
	...

08003b58 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003b64:	2300      	movs	r3, #0
 8003b66:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d101      	bne.n	8003b76 <HAL_ADC_Start_DMA+0x1e>
 8003b72:	2302      	movs	r3, #2
 8003b74:	e0e9      	b.n	8003d4a <HAL_ADC_Start_DMA+0x1f2>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d018      	beq.n	8003bbe <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689a      	ldr	r2, [r3, #8]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f042 0201 	orr.w	r2, r2, #1
 8003b9a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003b9c:	4b6d      	ldr	r3, [pc, #436]	; (8003d54 <HAL_ADC_Start_DMA+0x1fc>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a6d      	ldr	r2, [pc, #436]	; (8003d58 <HAL_ADC_Start_DMA+0x200>)
 8003ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba6:	0c9a      	lsrs	r2, r3, #18
 8003ba8:	4613      	mov	r3, r2
 8003baa:	005b      	lsls	r3, r3, #1
 8003bac:	4413      	add	r3, r2
 8003bae:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003bb0:	e002      	b.n	8003bb8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1f9      	bne.n	8003bb2 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bcc:	d107      	bne.n	8003bde <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	689a      	ldr	r2, [r3, #8]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bdc:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f003 0301 	and.w	r3, r3, #1
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	f040 80a1 	bne.w	8003d30 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003bf6:	f023 0301 	bic.w	r3, r3, #1
 8003bfa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d007      	beq.n	8003c20 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c14:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003c18:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c2c:	d106      	bne.n	8003c3c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c32:	f023 0206 	bic.w	r2, r3, #6
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	645a      	str	r2, [r3, #68]	; 0x44
 8003c3a:	e002      	b.n	8003c42 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c4a:	4b44      	ldr	r3, [pc, #272]	; (8003d5c <HAL_ADC_Start_DMA+0x204>)
 8003c4c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c52:	4a43      	ldr	r2, [pc, #268]	; (8003d60 <HAL_ADC_Start_DMA+0x208>)
 8003c54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5a:	4a42      	ldr	r2, [pc, #264]	; (8003d64 <HAL_ADC_Start_DMA+0x20c>)
 8003c5c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c62:	4a41      	ldr	r2, [pc, #260]	; (8003d68 <HAL_ADC_Start_DMA+0x210>)
 8003c64:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003c6e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003c7e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	689a      	ldr	r2, [r3, #8]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c8e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	334c      	adds	r3, #76	; 0x4c
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f000 fd0c 	bl	80046bc <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f003 031f 	and.w	r3, r3, #31
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d12a      	bne.n	8003d06 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a2d      	ldr	r2, [pc, #180]	; (8003d6c <HAL_ADC_Start_DMA+0x214>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d015      	beq.n	8003ce6 <HAL_ADC_Start_DMA+0x18e>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a2c      	ldr	r2, [pc, #176]	; (8003d70 <HAL_ADC_Start_DMA+0x218>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d105      	bne.n	8003cd0 <HAL_ADC_Start_DMA+0x178>
 8003cc4:	4b25      	ldr	r3, [pc, #148]	; (8003d5c <HAL_ADC_Start_DMA+0x204>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f003 031f 	and.w	r3, r3, #31
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00a      	beq.n	8003ce6 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a27      	ldr	r2, [pc, #156]	; (8003d74 <HAL_ADC_Start_DMA+0x21c>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d136      	bne.n	8003d48 <HAL_ADC_Start_DMA+0x1f0>
 8003cda:	4b20      	ldr	r3, [pc, #128]	; (8003d5c <HAL_ADC_Start_DMA+0x204>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f003 0310 	and.w	r3, r3, #16
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d130      	bne.n	8003d48 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d129      	bne.n	8003d48 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689a      	ldr	r2, [r3, #8]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003d02:	609a      	str	r2, [r3, #8]
 8003d04:	e020      	b.n	8003d48 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a18      	ldr	r2, [pc, #96]	; (8003d6c <HAL_ADC_Start_DMA+0x214>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d11b      	bne.n	8003d48 <HAL_ADC_Start_DMA+0x1f0>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d114      	bne.n	8003d48 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	689a      	ldr	r2, [r3, #8]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003d2c:	609a      	str	r2, [r3, #8]
 8003d2e:	e00b      	b.n	8003d48 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d34:	f043 0210 	orr.w	r2, r3, #16
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d40:	f043 0201 	orr.w	r2, r3, #1
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3718      	adds	r7, #24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	20000000 	.word	0x20000000
 8003d58:	431bde83 	.word	0x431bde83
 8003d5c:	40012300 	.word	0x40012300
 8003d60:	08004225 	.word	0x08004225
 8003d64:	080042df 	.word	0x080042df
 8003d68:	080042fb 	.word	0x080042fb
 8003d6c:	40012000 	.word	0x40012000
 8003d70:	40012100 	.word	0x40012100
 8003d74:	40012200 	.word	0x40012200

08003d78 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d101      	bne.n	8003de4 <HAL_ADC_ConfigChannel+0x1c>
 8003de0:	2302      	movs	r3, #2
 8003de2:	e113      	b.n	800400c <HAL_ADC_ConfigChannel+0x244>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2b09      	cmp	r3, #9
 8003df2:	d925      	bls.n	8003e40 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68d9      	ldr	r1, [r3, #12]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	461a      	mov	r2, r3
 8003e02:	4613      	mov	r3, r2
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	4413      	add	r3, r2
 8003e08:	3b1e      	subs	r3, #30
 8003e0a:	2207      	movs	r2, #7
 8003e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e10:	43da      	mvns	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	400a      	ands	r2, r1
 8003e18:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68d9      	ldr	r1, [r3, #12]
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	689a      	ldr	r2, [r3, #8]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	4403      	add	r3, r0
 8003e32:	3b1e      	subs	r3, #30
 8003e34:	409a      	lsls	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	60da      	str	r2, [r3, #12]
 8003e3e:	e022      	b.n	8003e86 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6919      	ldr	r1, [r3, #16]
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	4613      	mov	r3, r2
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	4413      	add	r3, r2
 8003e54:	2207      	movs	r2, #7
 8003e56:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5a:	43da      	mvns	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	400a      	ands	r2, r1
 8003e62:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6919      	ldr	r1, [r3, #16]
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	689a      	ldr	r2, [r3, #8]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	4618      	mov	r0, r3
 8003e76:	4603      	mov	r3, r0
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	4403      	add	r3, r0
 8003e7c:	409a      	lsls	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	430a      	orrs	r2, r1
 8003e84:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	2b06      	cmp	r3, #6
 8003e8c:	d824      	bhi.n	8003ed8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685a      	ldr	r2, [r3, #4]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4413      	add	r3, r2
 8003e9e:	3b05      	subs	r3, #5
 8003ea0:	221f      	movs	r2, #31
 8003ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea6:	43da      	mvns	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	400a      	ands	r2, r1
 8003eae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685a      	ldr	r2, [r3, #4]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4413      	add	r3, r2
 8003ec8:	3b05      	subs	r3, #5
 8003eca:	fa00 f203 	lsl.w	r2, r0, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	635a      	str	r2, [r3, #52]	; 0x34
 8003ed6:	e04c      	b.n	8003f72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	2b0c      	cmp	r3, #12
 8003ede:	d824      	bhi.n	8003f2a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685a      	ldr	r2, [r3, #4]
 8003eea:	4613      	mov	r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	4413      	add	r3, r2
 8003ef0:	3b23      	subs	r3, #35	; 0x23
 8003ef2:	221f      	movs	r2, #31
 8003ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef8:	43da      	mvns	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	400a      	ands	r2, r1
 8003f00:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	4618      	mov	r0, r3
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685a      	ldr	r2, [r3, #4]
 8003f14:	4613      	mov	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4413      	add	r3, r2
 8003f1a:	3b23      	subs	r3, #35	; 0x23
 8003f1c:	fa00 f203 	lsl.w	r2, r0, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	430a      	orrs	r2, r1
 8003f26:	631a      	str	r2, [r3, #48]	; 0x30
 8003f28:	e023      	b.n	8003f72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	4613      	mov	r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	4413      	add	r3, r2
 8003f3a:	3b41      	subs	r3, #65	; 0x41
 8003f3c:	221f      	movs	r2, #31
 8003f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f42:	43da      	mvns	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	400a      	ands	r2, r1
 8003f4a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	4618      	mov	r0, r3
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	4413      	add	r3, r2
 8003f64:	3b41      	subs	r3, #65	; 0x41
 8003f66:	fa00 f203 	lsl.w	r2, r0, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f72:	4b29      	ldr	r3, [pc, #164]	; (8004018 <HAL_ADC_ConfigChannel+0x250>)
 8003f74:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a28      	ldr	r2, [pc, #160]	; (800401c <HAL_ADC_ConfigChannel+0x254>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d10f      	bne.n	8003fa0 <HAL_ADC_ConfigChannel+0x1d8>
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2b12      	cmp	r3, #18
 8003f86:	d10b      	bne.n	8003fa0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a1d      	ldr	r2, [pc, #116]	; (800401c <HAL_ADC_ConfigChannel+0x254>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d12b      	bne.n	8004002 <HAL_ADC_ConfigChannel+0x23a>
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a1c      	ldr	r2, [pc, #112]	; (8004020 <HAL_ADC_ConfigChannel+0x258>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d003      	beq.n	8003fbc <HAL_ADC_ConfigChannel+0x1f4>
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2b11      	cmp	r3, #17
 8003fba:	d122      	bne.n	8004002 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a11      	ldr	r2, [pc, #68]	; (8004020 <HAL_ADC_ConfigChannel+0x258>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d111      	bne.n	8004002 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003fde:	4b11      	ldr	r3, [pc, #68]	; (8004024 <HAL_ADC_ConfigChannel+0x25c>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a11      	ldr	r2, [pc, #68]	; (8004028 <HAL_ADC_ConfigChannel+0x260>)
 8003fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe8:	0c9a      	lsrs	r2, r3, #18
 8003fea:	4613      	mov	r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	4413      	add	r3, r2
 8003ff0:	005b      	lsls	r3, r3, #1
 8003ff2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003ff4:	e002      	b.n	8003ffc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1f9      	bne.n	8003ff6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	3714      	adds	r7, #20
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr
 8004018:	40012300 	.word	0x40012300
 800401c:	40012000 	.word	0x40012000
 8004020:	10000012 	.word	0x10000012
 8004024:	20000000 	.word	0x20000000
 8004028:	431bde83 	.word	0x431bde83

0800402c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004034:	4b79      	ldr	r3, [pc, #484]	; (800421c <ADC_Init+0x1f0>)
 8004036:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	431a      	orrs	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	685a      	ldr	r2, [r3, #4]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004060:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	6859      	ldr	r1, [r3, #4]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	021a      	lsls	r2, r3, #8
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	430a      	orrs	r2, r1
 8004074:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004084:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	6859      	ldr	r1, [r3, #4]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689a      	ldr	r2, [r3, #8]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	430a      	orrs	r2, r1
 8004096:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689a      	ldr	r2, [r3, #8]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6899      	ldr	r1, [r3, #8]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68da      	ldr	r2, [r3, #12]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040be:	4a58      	ldr	r2, [pc, #352]	; (8004220 <ADC_Init+0x1f4>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d022      	beq.n	800410a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	689a      	ldr	r2, [r3, #8]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80040d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6899      	ldr	r1, [r3, #8]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	430a      	orrs	r2, r1
 80040e4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80040f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	6899      	ldr	r1, [r3, #8]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	430a      	orrs	r2, r1
 8004106:	609a      	str	r2, [r3, #8]
 8004108:	e00f      	b.n	800412a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	689a      	ldr	r2, [r3, #8]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004118:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	689a      	ldr	r2, [r3, #8]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004128:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	689a      	ldr	r2, [r3, #8]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 0202 	bic.w	r2, r2, #2
 8004138:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6899      	ldr	r1, [r3, #8]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	7e1b      	ldrb	r3, [r3, #24]
 8004144:	005a      	lsls	r2, r3, #1
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	430a      	orrs	r2, r1
 800414c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d01b      	beq.n	8004190 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	685a      	ldr	r2, [r3, #4]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004166:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685a      	ldr	r2, [r3, #4]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004176:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	6859      	ldr	r1, [r3, #4]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004182:	3b01      	subs	r3, #1
 8004184:	035a      	lsls	r2, r3, #13
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	430a      	orrs	r2, r1
 800418c:	605a      	str	r2, [r3, #4]
 800418e:	e007      	b.n	80041a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800419e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80041ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	69db      	ldr	r3, [r3, #28]
 80041ba:	3b01      	subs	r3, #1
 80041bc:	051a      	lsls	r2, r3, #20
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	689a      	ldr	r2, [r3, #8]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80041d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	6899      	ldr	r1, [r3, #8]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80041e2:	025a      	lsls	r2, r3, #9
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	430a      	orrs	r2, r1
 80041ea:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689a      	ldr	r2, [r3, #8]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	6899      	ldr	r1, [r3, #8]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	029a      	lsls	r2, r3, #10
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	430a      	orrs	r2, r1
 800420e:	609a      	str	r2, [r3, #8]
}
 8004210:	bf00      	nop
 8004212:	3714      	adds	r7, #20
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	40012300 	.word	0x40012300
 8004220:	0f000001 	.word	0x0f000001

08004224 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004230:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004236:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800423a:	2b00      	cmp	r3, #0
 800423c:	d13c      	bne.n	80042b8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004242:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d12b      	bne.n	80042b0 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800425c:	2b00      	cmp	r3, #0
 800425e:	d127      	bne.n	80042b0 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004266:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800426a:	2b00      	cmp	r3, #0
 800426c:	d006      	beq.n	800427c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004278:	2b00      	cmp	r3, #0
 800427a:	d119      	bne.n	80042b0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	685a      	ldr	r2, [r3, #4]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 0220 	bic.w	r2, r2, #32
 800428a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004290:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d105      	bne.n	80042b0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a8:	f043 0201 	orr.w	r2, r3, #1
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f7ff fd61 	bl	8003d78 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80042b6:	e00e      	b.n	80042d6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042bc:	f003 0310 	and.w	r3, r3, #16
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d003      	beq.n	80042cc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80042c4:	68f8      	ldr	r0, [r7, #12]
 80042c6:	f7ff fd75 	bl	8003db4 <HAL_ADC_ErrorCallback>
}
 80042ca:	e004      	b.n	80042d6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	4798      	blx	r3
}
 80042d6:	bf00      	nop
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80042de:	b580      	push	{r7, lr}
 80042e0:	b084      	sub	sp, #16
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ea:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f7ff fd4d 	bl	8003d8c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042f2:	bf00      	nop
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}

080042fa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80042fa:	b580      	push	{r7, lr}
 80042fc:	b084      	sub	sp, #16
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004306:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2240      	movs	r2, #64	; 0x40
 800430c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004312:	f043 0204 	orr.w	r2, r3, #4
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f7ff fd4a 	bl	8003db4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004320:	bf00      	nop
 8004322:	3710      	adds	r7, #16
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <__NVIC_SetPriorityGrouping>:
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f003 0307 	and.w	r3, r3, #7
 800434a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800434c:	4b0c      	ldr	r3, [pc, #48]	; (8004380 <__NVIC_SetPriorityGrouping+0x44>)
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004358:	4013      	ands	r3, r2
 800435a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004364:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800436c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800436e:	4a04      	ldr	r2, [pc, #16]	; (8004380 <__NVIC_SetPriorityGrouping+0x44>)
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	60d3      	str	r3, [r2, #12]
}
 8004374:	bf00      	nop
 8004376:	3714      	adds	r7, #20
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr
 8004380:	e000ed00 	.word	0xe000ed00

08004384 <__NVIC_GetPriorityGrouping>:
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004388:	4b04      	ldr	r3, [pc, #16]	; (800439c <__NVIC_GetPriorityGrouping+0x18>)
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	0a1b      	lsrs	r3, r3, #8
 800438e:	f003 0307 	and.w	r3, r3, #7
}
 8004392:	4618      	mov	r0, r3
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr
 800439c:	e000ed00 	.word	0xe000ed00

080043a0 <__NVIC_EnableIRQ>:
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	4603      	mov	r3, r0
 80043a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	db0b      	blt.n	80043ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043b2:	79fb      	ldrb	r3, [r7, #7]
 80043b4:	f003 021f 	and.w	r2, r3, #31
 80043b8:	4907      	ldr	r1, [pc, #28]	; (80043d8 <__NVIC_EnableIRQ+0x38>)
 80043ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043be:	095b      	lsrs	r3, r3, #5
 80043c0:	2001      	movs	r0, #1
 80043c2:	fa00 f202 	lsl.w	r2, r0, r2
 80043c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80043ca:	bf00      	nop
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	e000e100 	.word	0xe000e100

080043dc <__NVIC_SetPriority>:
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	4603      	mov	r3, r0
 80043e4:	6039      	str	r1, [r7, #0]
 80043e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	db0a      	blt.n	8004406 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	b2da      	uxtb	r2, r3
 80043f4:	490c      	ldr	r1, [pc, #48]	; (8004428 <__NVIC_SetPriority+0x4c>)
 80043f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043fa:	0112      	lsls	r2, r2, #4
 80043fc:	b2d2      	uxtb	r2, r2
 80043fe:	440b      	add	r3, r1
 8004400:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004404:	e00a      	b.n	800441c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	b2da      	uxtb	r2, r3
 800440a:	4908      	ldr	r1, [pc, #32]	; (800442c <__NVIC_SetPriority+0x50>)
 800440c:	79fb      	ldrb	r3, [r7, #7]
 800440e:	f003 030f 	and.w	r3, r3, #15
 8004412:	3b04      	subs	r3, #4
 8004414:	0112      	lsls	r2, r2, #4
 8004416:	b2d2      	uxtb	r2, r2
 8004418:	440b      	add	r3, r1
 800441a:	761a      	strb	r2, [r3, #24]
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr
 8004428:	e000e100 	.word	0xe000e100
 800442c:	e000ed00 	.word	0xe000ed00

08004430 <NVIC_EncodePriority>:
{
 8004430:	b480      	push	{r7}
 8004432:	b089      	sub	sp, #36	; 0x24
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f003 0307 	and.w	r3, r3, #7
 8004442:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	f1c3 0307 	rsb	r3, r3, #7
 800444a:	2b04      	cmp	r3, #4
 800444c:	bf28      	it	cs
 800444e:	2304      	movcs	r3, #4
 8004450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	3304      	adds	r3, #4
 8004456:	2b06      	cmp	r3, #6
 8004458:	d902      	bls.n	8004460 <NVIC_EncodePriority+0x30>
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	3b03      	subs	r3, #3
 800445e:	e000      	b.n	8004462 <NVIC_EncodePriority+0x32>
 8004460:	2300      	movs	r3, #0
 8004462:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004464:	f04f 32ff 	mov.w	r2, #4294967295
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	fa02 f303 	lsl.w	r3, r2, r3
 800446e:	43da      	mvns	r2, r3
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	401a      	ands	r2, r3
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004478:	f04f 31ff 	mov.w	r1, #4294967295
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	fa01 f303 	lsl.w	r3, r1, r3
 8004482:	43d9      	mvns	r1, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004488:	4313      	orrs	r3, r2
}
 800448a:	4618      	mov	r0, r3
 800448c:	3724      	adds	r7, #36	; 0x24
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
	...

08004498 <SysTick_Config>:
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	3b01      	subs	r3, #1
 80044a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044a8:	d301      	bcc.n	80044ae <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80044aa:	2301      	movs	r3, #1
 80044ac:	e00f      	b.n	80044ce <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044ae:	4a0a      	ldr	r2, [pc, #40]	; (80044d8 <SysTick_Config+0x40>)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	3b01      	subs	r3, #1
 80044b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044b6:	210f      	movs	r1, #15
 80044b8:	f04f 30ff 	mov.w	r0, #4294967295
 80044bc:	f7ff ff8e 	bl	80043dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044c0:	4b05      	ldr	r3, [pc, #20]	; (80044d8 <SysTick_Config+0x40>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044c6:	4b04      	ldr	r3, [pc, #16]	; (80044d8 <SysTick_Config+0x40>)
 80044c8:	2207      	movs	r2, #7
 80044ca:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	e000e010 	.word	0xe000e010

080044dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f7ff ff29 	bl	800433c <__NVIC_SetPriorityGrouping>
}
 80044ea:	bf00      	nop
 80044ec:	3708      	adds	r7, #8
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b086      	sub	sp, #24
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	4603      	mov	r3, r0
 80044fa:	60b9      	str	r1, [r7, #8]
 80044fc:	607a      	str	r2, [r7, #4]
 80044fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004500:	2300      	movs	r3, #0
 8004502:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004504:	f7ff ff3e 	bl	8004384 <__NVIC_GetPriorityGrouping>
 8004508:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	68b9      	ldr	r1, [r7, #8]
 800450e:	6978      	ldr	r0, [r7, #20]
 8004510:	f7ff ff8e 	bl	8004430 <NVIC_EncodePriority>
 8004514:	4602      	mov	r2, r0
 8004516:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800451a:	4611      	mov	r1, r2
 800451c:	4618      	mov	r0, r3
 800451e:	f7ff ff5d 	bl	80043dc <__NVIC_SetPriority>
}
 8004522:	bf00      	nop
 8004524:	3718      	adds	r7, #24
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b082      	sub	sp, #8
 800452e:	af00      	add	r7, sp, #0
 8004530:	4603      	mov	r3, r0
 8004532:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004538:	4618      	mov	r0, r3
 800453a:	f7ff ff31 	bl	80043a0 <__NVIC_EnableIRQ>
}
 800453e:	bf00      	nop
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b082      	sub	sp, #8
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7ff ffa2 	bl	8004498 <SysTick_Config>
 8004554:	4603      	mov	r3, r0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3708      	adds	r7, #8
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
	...

08004560 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004568:	2300      	movs	r3, #0
 800456a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800456c:	f7ff f970 	bl	8003850 <HAL_GetTick>
 8004570:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d101      	bne.n	800457c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e099      	b.n	80046b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2202      	movs	r2, #2
 8004580:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f022 0201 	bic.w	r2, r2, #1
 800459a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800459c:	e00f      	b.n	80045be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800459e:	f7ff f957 	bl	8003850 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	2b05      	cmp	r3, #5
 80045aa:	d908      	bls.n	80045be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2220      	movs	r2, #32
 80045b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2203      	movs	r2, #3
 80045b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e078      	b.n	80046b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1e8      	bne.n	800459e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80045d4:	697a      	ldr	r2, [r7, #20]
 80045d6:	4b38      	ldr	r3, [pc, #224]	; (80046b8 <HAL_DMA_Init+0x158>)
 80045d8:	4013      	ands	r3, r2
 80045da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004602:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a1b      	ldr	r3, [r3, #32]
 8004608:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	4313      	orrs	r3, r2
 800460e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004614:	2b04      	cmp	r3, #4
 8004616:	d107      	bne.n	8004628 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004620:	4313      	orrs	r3, r2
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	4313      	orrs	r3, r2
 8004626:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	f023 0307 	bic.w	r3, r3, #7
 800463e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	4313      	orrs	r3, r2
 8004648:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464e:	2b04      	cmp	r3, #4
 8004650:	d117      	bne.n	8004682 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	4313      	orrs	r3, r2
 800465a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00e      	beq.n	8004682 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 fb01 	bl	8004c6c <DMA_CheckFifoParam>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d008      	beq.n	8004682 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2240      	movs	r2, #64	; 0x40
 8004674:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800467e:	2301      	movs	r3, #1
 8004680:	e016      	b.n	80046b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 fab8 	bl	8004c00 <DMA_CalcBaseAndBitshift>
 8004690:	4603      	mov	r3, r0
 8004692:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004698:	223f      	movs	r2, #63	; 0x3f
 800469a:	409a      	lsls	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3718      	adds	r7, #24
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	f010803f 	.word	0xf010803f

080046bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
 80046c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046ca:	2300      	movs	r3, #0
 80046cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d101      	bne.n	80046e2 <HAL_DMA_Start_IT+0x26>
 80046de:	2302      	movs	r3, #2
 80046e0:	e040      	b.n	8004764 <HAL_DMA_Start_IT+0xa8>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d12f      	bne.n	8004756 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2202      	movs	r2, #2
 80046fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	68b9      	ldr	r1, [r7, #8]
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	f000 fa4a 	bl	8004ba4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004714:	223f      	movs	r2, #63	; 0x3f
 8004716:	409a      	lsls	r2, r3
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f042 0216 	orr.w	r2, r2, #22
 800472a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004730:	2b00      	cmp	r3, #0
 8004732:	d007      	beq.n	8004744 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f042 0208 	orr.w	r2, r2, #8
 8004742:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f042 0201 	orr.w	r2, r2, #1
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	e005      	b.n	8004762 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800475e:	2302      	movs	r3, #2
 8004760:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004762:	7dfb      	ldrb	r3, [r7, #23]
}
 8004764:	4618      	mov	r0, r3
 8004766:	3718      	adds	r7, #24
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004778:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800477a:	f7ff f869 	bl	8003850 <HAL_GetTick>
 800477e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004786:	b2db      	uxtb	r3, r3
 8004788:	2b02      	cmp	r3, #2
 800478a:	d008      	beq.n	800479e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2280      	movs	r2, #128	; 0x80
 8004790:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e052      	b.n	8004844 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 0216 	bic.w	r2, r2, #22
 80047ac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	695a      	ldr	r2, [r3, #20]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047bc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d103      	bne.n	80047ce <HAL_DMA_Abort+0x62>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d007      	beq.n	80047de <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f022 0208 	bic.w	r2, r2, #8
 80047dc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f022 0201 	bic.w	r2, r2, #1
 80047ec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047ee:	e013      	b.n	8004818 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047f0:	f7ff f82e 	bl	8003850 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	2b05      	cmp	r3, #5
 80047fc:	d90c      	bls.n	8004818 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2220      	movs	r2, #32
 8004802:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2203      	movs	r2, #3
 8004808:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e015      	b.n	8004844 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1e4      	bne.n	80047f0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800482a:	223f      	movs	r2, #63	; 0x3f
 800482c:	409a      	lsls	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2201      	movs	r2, #1
 8004836:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3710      	adds	r7, #16
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b02      	cmp	r3, #2
 800485e:	d004      	beq.n	800486a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2280      	movs	r2, #128	; 0x80
 8004864:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e00c      	b.n	8004884 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2205      	movs	r2, #5
 800486e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 0201 	bic.w	r2, r2, #1
 8004880:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b086      	sub	sp, #24
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004898:	2300      	movs	r3, #0
 800489a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800489c:	4b8e      	ldr	r3, [pc, #568]	; (8004ad8 <HAL_DMA_IRQHandler+0x248>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a8e      	ldr	r2, [pc, #568]	; (8004adc <HAL_DMA_IRQHandler+0x24c>)
 80048a2:	fba2 2303 	umull	r2, r3, r2, r3
 80048a6:	0a9b      	lsrs	r3, r3, #10
 80048a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ba:	2208      	movs	r2, #8
 80048bc:	409a      	lsls	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	4013      	ands	r3, r2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d01a      	beq.n	80048fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0304 	and.w	r3, r3, #4
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d013      	beq.n	80048fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f022 0204 	bic.w	r2, r2, #4
 80048e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e8:	2208      	movs	r2, #8
 80048ea:	409a      	lsls	r2, r3
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f4:	f043 0201 	orr.w	r2, r3, #1
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004900:	2201      	movs	r2, #1
 8004902:	409a      	lsls	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4013      	ands	r3, r2
 8004908:	2b00      	cmp	r3, #0
 800490a:	d012      	beq.n	8004932 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00b      	beq.n	8004932 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800491e:	2201      	movs	r2, #1
 8004920:	409a      	lsls	r2, r3
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800492a:	f043 0202 	orr.w	r2, r3, #2
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004936:	2204      	movs	r2, #4
 8004938:	409a      	lsls	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	4013      	ands	r3, r2
 800493e:	2b00      	cmp	r3, #0
 8004940:	d012      	beq.n	8004968 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00b      	beq.n	8004968 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004954:	2204      	movs	r2, #4
 8004956:	409a      	lsls	r2, r3
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004960:	f043 0204 	orr.w	r2, r3, #4
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800496c:	2210      	movs	r2, #16
 800496e:	409a      	lsls	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4013      	ands	r3, r2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d043      	beq.n	8004a00 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0308 	and.w	r3, r3, #8
 8004982:	2b00      	cmp	r3, #0
 8004984:	d03c      	beq.n	8004a00 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800498a:	2210      	movs	r2, #16
 800498c:	409a      	lsls	r2, r3
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d018      	beq.n	80049d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d108      	bne.n	80049c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d024      	beq.n	8004a00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	4798      	blx	r3
 80049be:	e01f      	b.n	8004a00 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d01b      	beq.n	8004a00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	4798      	blx	r3
 80049d0:	e016      	b.n	8004a00 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d107      	bne.n	80049f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f022 0208 	bic.w	r2, r2, #8
 80049ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d003      	beq.n	8004a00 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a04:	2220      	movs	r2, #32
 8004a06:	409a      	lsls	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f000 808f 	beq.w	8004b30 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0310 	and.w	r3, r3, #16
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f000 8087 	beq.w	8004b30 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a26:	2220      	movs	r2, #32
 8004a28:	409a      	lsls	r2, r3
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	2b05      	cmp	r3, #5
 8004a38:	d136      	bne.n	8004aa8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f022 0216 	bic.w	r2, r2, #22
 8004a48:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	695a      	ldr	r2, [r3, #20]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a58:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d103      	bne.n	8004a6a <HAL_DMA_IRQHandler+0x1da>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d007      	beq.n	8004a7a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f022 0208 	bic.w	r2, r2, #8
 8004a78:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a7e:	223f      	movs	r2, #63	; 0x3f
 8004a80:	409a      	lsls	r2, r3
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d07e      	beq.n	8004b9c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	4798      	blx	r3
        }
        return;
 8004aa6:	e079      	b.n	8004b9c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d01d      	beq.n	8004af2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d10d      	bne.n	8004ae0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d031      	beq.n	8004b30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	4798      	blx	r3
 8004ad4:	e02c      	b.n	8004b30 <HAL_DMA_IRQHandler+0x2a0>
 8004ad6:	bf00      	nop
 8004ad8:	20000000 	.word	0x20000000
 8004adc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d023      	beq.n	8004b30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	4798      	blx	r3
 8004af0:	e01e      	b.n	8004b30 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d10f      	bne.n	8004b20 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f022 0210 	bic.w	r2, r2, #16
 8004b0e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d003      	beq.n	8004b30 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d032      	beq.n	8004b9e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b3c:	f003 0301 	and.w	r3, r3, #1
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d022      	beq.n	8004b8a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2205      	movs	r2, #5
 8004b48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 0201 	bic.w	r2, r2, #1
 8004b5a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	3301      	adds	r3, #1
 8004b60:	60bb      	str	r3, [r7, #8]
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d307      	bcc.n	8004b78 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1f2      	bne.n	8004b5c <HAL_DMA_IRQHandler+0x2cc>
 8004b76:	e000      	b.n	8004b7a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004b78:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d005      	beq.n	8004b9e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	4798      	blx	r3
 8004b9a:	e000      	b.n	8004b9e <HAL_DMA_IRQHandler+0x30e>
        return;
 8004b9c:	bf00      	nop
    }
  }
}
 8004b9e:	3718      	adds	r7, #24
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
 8004bb0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004bc0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	683a      	ldr	r2, [r7, #0]
 8004bc8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	2b40      	cmp	r3, #64	; 0x40
 8004bd0:	d108      	bne.n	8004be4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004be2:	e007      	b.n	8004bf4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68ba      	ldr	r2, [r7, #8]
 8004bea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	60da      	str	r2, [r3, #12]
}
 8004bf4:	bf00      	nop
 8004bf6:	3714      	adds	r7, #20
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	3b10      	subs	r3, #16
 8004c10:	4a14      	ldr	r2, [pc, #80]	; (8004c64 <DMA_CalcBaseAndBitshift+0x64>)
 8004c12:	fba2 2303 	umull	r2, r3, r2, r3
 8004c16:	091b      	lsrs	r3, r3, #4
 8004c18:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004c1a:	4a13      	ldr	r2, [pc, #76]	; (8004c68 <DMA_CalcBaseAndBitshift+0x68>)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	4413      	add	r3, r2
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	461a      	mov	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2b03      	cmp	r3, #3
 8004c2c:	d909      	bls.n	8004c42 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004c36:	f023 0303 	bic.w	r3, r3, #3
 8004c3a:	1d1a      	adds	r2, r3, #4
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	659a      	str	r2, [r3, #88]	; 0x58
 8004c40:	e007      	b.n	8004c52 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004c4a:	f023 0303 	bic.w	r3, r3, #3
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3714      	adds	r7, #20
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	aaaaaaab 	.word	0xaaaaaaab
 8004c68:	0800bd48 	.word	0x0800bd48

08004c6c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c74:	2300      	movs	r3, #0
 8004c76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d11f      	bne.n	8004cc6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	2b03      	cmp	r3, #3
 8004c8a:	d856      	bhi.n	8004d3a <DMA_CheckFifoParam+0xce>
 8004c8c:	a201      	add	r2, pc, #4	; (adr r2, 8004c94 <DMA_CheckFifoParam+0x28>)
 8004c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c92:	bf00      	nop
 8004c94:	08004ca5 	.word	0x08004ca5
 8004c98:	08004cb7 	.word	0x08004cb7
 8004c9c:	08004ca5 	.word	0x08004ca5
 8004ca0:	08004d3b 	.word	0x08004d3b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d046      	beq.n	8004d3e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cb4:	e043      	b.n	8004d3e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004cbe:	d140      	bne.n	8004d42 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cc4:	e03d      	b.n	8004d42 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cce:	d121      	bne.n	8004d14 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	2b03      	cmp	r3, #3
 8004cd4:	d837      	bhi.n	8004d46 <DMA_CheckFifoParam+0xda>
 8004cd6:	a201      	add	r2, pc, #4	; (adr r2, 8004cdc <DMA_CheckFifoParam+0x70>)
 8004cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cdc:	08004ced 	.word	0x08004ced
 8004ce0:	08004cf3 	.word	0x08004cf3
 8004ce4:	08004ced 	.word	0x08004ced
 8004ce8:	08004d05 	.word	0x08004d05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	73fb      	strb	r3, [r7, #15]
      break;
 8004cf0:	e030      	b.n	8004d54 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d025      	beq.n	8004d4a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d02:	e022      	b.n	8004d4a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d0c:	d11f      	bne.n	8004d4e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004d12:	e01c      	b.n	8004d4e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d903      	bls.n	8004d22 <DMA_CheckFifoParam+0xb6>
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	2b03      	cmp	r3, #3
 8004d1e:	d003      	beq.n	8004d28 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004d20:	e018      	b.n	8004d54 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	73fb      	strb	r3, [r7, #15]
      break;
 8004d26:	e015      	b.n	8004d54 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00e      	beq.n	8004d52 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	73fb      	strb	r3, [r7, #15]
      break;
 8004d38:	e00b      	b.n	8004d52 <DMA_CheckFifoParam+0xe6>
      break;
 8004d3a:	bf00      	nop
 8004d3c:	e00a      	b.n	8004d54 <DMA_CheckFifoParam+0xe8>
      break;
 8004d3e:	bf00      	nop
 8004d40:	e008      	b.n	8004d54 <DMA_CheckFifoParam+0xe8>
      break;
 8004d42:	bf00      	nop
 8004d44:	e006      	b.n	8004d54 <DMA_CheckFifoParam+0xe8>
      break;
 8004d46:	bf00      	nop
 8004d48:	e004      	b.n	8004d54 <DMA_CheckFifoParam+0xe8>
      break;
 8004d4a:	bf00      	nop
 8004d4c:	e002      	b.n	8004d54 <DMA_CheckFifoParam+0xe8>
      break;   
 8004d4e:	bf00      	nop
 8004d50:	e000      	b.n	8004d54 <DMA_CheckFifoParam+0xe8>
      break;
 8004d52:	bf00      	nop
    }
  } 
  
  return status; 
 8004d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3714      	adds	r7, #20
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop

08004d64 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e06c      	b.n	8004e50 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d106      	bne.n	8004d8e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2223      	movs	r2, #35	; 0x23
 8004d84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f7fd fdaf 	bl	80028ec <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d8e:	2300      	movs	r3, #0
 8004d90:	60bb      	str	r3, [r7, #8]
 8004d92:	4b31      	ldr	r3, [pc, #196]	; (8004e58 <HAL_ETH_Init+0xf4>)
 8004d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d96:	4a30      	ldr	r2, [pc, #192]	; (8004e58 <HAL_ETH_Init+0xf4>)
 8004d98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8004d9e:	4b2e      	ldr	r3, [pc, #184]	; (8004e58 <HAL_ETH_Init+0xf4>)
 8004da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004da6:	60bb      	str	r3, [r7, #8]
 8004da8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004daa:	4b2c      	ldr	r3, [pc, #176]	; (8004e5c <HAL_ETH_Init+0xf8>)
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	4a2b      	ldr	r2, [pc, #172]	; (8004e5c <HAL_ETH_Init+0xf8>)
 8004db0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004db4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004db6:	4b29      	ldr	r3, [pc, #164]	; (8004e5c <HAL_ETH_Init+0xf8>)
 8004db8:	685a      	ldr	r2, [r3, #4]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	4927      	ldr	r1, [pc, #156]	; (8004e5c <HAL_ETH_Init+0xf8>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8004dc4:	4b25      	ldr	r3, [pc, #148]	; (8004e5c <HAL_ETH_Init+0xf8>)
 8004dc6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	6812      	ldr	r2, [r2, #0]
 8004dd6:	f043 0301 	orr.w	r3, r3, #1
 8004dda:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004dde:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004de0:	f7fe fd36 	bl	8003850 <HAL_GetTick>
 8004de4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004de6:	e011      	b.n	8004e0c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004de8:	f7fe fd32 	bl	8003850 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004df6:	d909      	bls.n	8004e0c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2204      	movs	r2, #4
 8004dfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	22e0      	movs	r2, #224	; 0xe0
 8004e04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e021      	b.n	8004e50 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1e4      	bne.n	8004de8 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f958 	bl	80050d4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 f9ff 	bl	8005228 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 fa55 	bl	80052da <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	461a      	mov	r2, r3
 8004e36:	2100      	movs	r1, #0
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 f9bd 	bl	80051b8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2210      	movs	r2, #16
 8004e4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3710      	adds	r7, #16
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	40023800 	.word	0x40023800
 8004e5c:	40013800 	.word	0x40013800

08004e60 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	4b51      	ldr	r3, [pc, #324]	; (8004fbc <ETH_SetMACConfig+0x15c>)
 8004e76:	4013      	ands	r3, r2
 8004e78:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	7c1b      	ldrb	r3, [r3, #16]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d102      	bne.n	8004e88 <ETH_SetMACConfig+0x28>
 8004e82:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004e86:	e000      	b.n	8004e8a <ETH_SetMACConfig+0x2a>
 8004e88:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	7c5b      	ldrb	r3, [r3, #17]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d102      	bne.n	8004e98 <ETH_SetMACConfig+0x38>
 8004e92:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004e96:	e000      	b.n	8004e9a <ETH_SetMACConfig+0x3a>
 8004e98:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004e9a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004ea0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	7fdb      	ldrb	r3, [r3, #31]
 8004ea6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004ea8:	431a      	orrs	r2, r3
                        macconf->Speed |
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004eae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004eb0:	683a      	ldr	r2, [r7, #0]
 8004eb2:	7f92      	ldrb	r2, [r2, #30]
 8004eb4:	2a00      	cmp	r2, #0
 8004eb6:	d102      	bne.n	8004ebe <ETH_SetMACConfig+0x5e>
 8004eb8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004ebc:	e000      	b.n	8004ec0 <ETH_SetMACConfig+0x60>
 8004ebe:	2200      	movs	r2, #0
                        macconf->Speed |
 8004ec0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	7f1b      	ldrb	r3, [r3, #28]
 8004ec6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004ec8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004ece:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	791b      	ldrb	r3, [r3, #4]
 8004ed4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8004ed6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004ed8:	683a      	ldr	r2, [r7, #0]
 8004eda:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004ede:	2a00      	cmp	r2, #0
 8004ee0:	d102      	bne.n	8004ee8 <ETH_SetMACConfig+0x88>
 8004ee2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ee6:	e000      	b.n	8004eea <ETH_SetMACConfig+0x8a>
 8004ee8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004eea:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	7bdb      	ldrb	r3, [r3, #15]
 8004ef0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004ef2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004ef8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f00:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004f02:	4313      	orrs	r3, r2
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004f1a:	2001      	movs	r0, #1
 8004f1c:	f7fe fca4 	bl	8003868 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004f36:	4013      	ands	r3, r2
 8004f38:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f3e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004f40:	683a      	ldr	r2, [r7, #0]
 8004f42:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004f46:	2a00      	cmp	r2, #0
 8004f48:	d101      	bne.n	8004f4e <ETH_SetMACConfig+0xee>
 8004f4a:	2280      	movs	r2, #128	; 0x80
 8004f4c:	e000      	b.n	8004f50 <ETH_SetMACConfig+0xf0>
 8004f4e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004f50:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004f56:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004f58:	683a      	ldr	r2, [r7, #0]
 8004f5a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8004f5e:	2a01      	cmp	r2, #1
 8004f60:	d101      	bne.n	8004f66 <ETH_SetMACConfig+0x106>
 8004f62:	2208      	movs	r2, #8
 8004f64:	e000      	b.n	8004f68 <ETH_SetMACConfig+0x108>
 8004f66:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004f68:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8004f70:	2a01      	cmp	r2, #1
 8004f72:	d101      	bne.n	8004f78 <ETH_SetMACConfig+0x118>
 8004f74:	2204      	movs	r2, #4
 8004f76:	e000      	b.n	8004f7a <ETH_SetMACConfig+0x11a>
 8004f78:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004f7a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8004f7c:	683a      	ldr	r2, [r7, #0]
 8004f7e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8004f82:	2a01      	cmp	r2, #1
 8004f84:	d101      	bne.n	8004f8a <ETH_SetMACConfig+0x12a>
 8004f86:	2202      	movs	r2, #2
 8004f88:	e000      	b.n	8004f8c <ETH_SetMACConfig+0x12c>
 8004f8a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004fa4:	2001      	movs	r0, #1
 8004fa6:	f7fe fc5f 	bl	8003868 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	619a      	str	r2, [r3, #24]
}
 8004fb2:	bf00      	nop
 8004fb4:	3710      	adds	r7, #16
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	ff20810f 	.word	0xff20810f

08004fc0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	4b3d      	ldr	r3, [pc, #244]	; (80050d0 <ETH_SetDMAConfig+0x110>)
 8004fda:	4013      	ands	r3, r2
 8004fdc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	7b1b      	ldrb	r3, [r3, #12]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d102      	bne.n	8004fec <ETH_SetDMAConfig+0x2c>
 8004fe6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004fea:	e000      	b.n	8004fee <ETH_SetDMAConfig+0x2e>
 8004fec:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	7b5b      	ldrb	r3, [r3, #13]
 8004ff2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004ff4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004ff6:	683a      	ldr	r2, [r7, #0]
 8004ff8:	7f52      	ldrb	r2, [r2, #29]
 8004ffa:	2a00      	cmp	r2, #0
 8004ffc:	d102      	bne.n	8005004 <ETH_SetDMAConfig+0x44>
 8004ffe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005002:	e000      	b.n	8005006 <ETH_SetDMAConfig+0x46>
 8005004:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8005006:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	7b9b      	ldrb	r3, [r3, #14]
 800500c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800500e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005014:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	7f1b      	ldrb	r3, [r3, #28]
 800501a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800501c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	7f9b      	ldrb	r3, [r3, #30]
 8005022:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8005024:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800502a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005032:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005034:	4313      	orrs	r3, r2
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	4313      	orrs	r3, r2
 800503a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005044:	461a      	mov	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005056:	2001      	movs	r0, #1
 8005058:	f7fe fc06 	bl	8003868 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005064:	461a      	mov	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	791b      	ldrb	r3, [r3, #4]
 800506e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005074:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800507a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005080:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005088:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800508a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005090:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8005092:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005098:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	6812      	ldr	r2, [r2, #0]
 800509e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80050a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80050a6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80050b4:	2001      	movs	r0, #1
 80050b6:	f7fe fbd7 	bl	8003868 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050c2:	461a      	mov	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6013      	str	r3, [r2, #0]
}
 80050c8:	bf00      	nop
 80050ca:	3710      	adds	r7, #16
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	f8de3f23 	.word	0xf8de3f23

080050d4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b0a6      	sub	sp, #152	; 0x98
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80050dc:	2301      	movs	r3, #1
 80050de:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80050e2:	2301      	movs	r3, #1
 80050e4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80050e8:	2300      	movs	r3, #0
 80050ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80050ec:	2300      	movs	r3, #0
 80050ee:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80050f2:	2301      	movs	r3, #1
 80050f4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80050f8:	2300      	movs	r3, #0
 80050fa:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80050fe:	2301      	movs	r3, #1
 8005100:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8005104:	2300      	movs	r3, #0
 8005106:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800510a:	2300      	movs	r3, #0
 800510c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005110:	2300      	movs	r3, #0
 8005112:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8005114:	2300      	movs	r3, #0
 8005116:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800511a:	2300      	movs	r3, #0
 800511c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800511e:	2300      	movs	r3, #0
 8005120:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8005124:	2300      	movs	r3, #0
 8005126:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800512a:	2300      	movs	r3, #0
 800512c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005130:	2300      	movs	r3, #0
 8005132:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005136:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800513a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800513c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005140:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005142:	2300      	movs	r3, #0
 8005144:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005148:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800514c:	4619      	mov	r1, r3
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f7ff fe86 	bl	8004e60 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8005154:	2301      	movs	r3, #1
 8005156:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8005158:	2301      	movs	r3, #1
 800515a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800515c:	2301      	movs	r3, #1
 800515e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8005162:	2301      	movs	r3, #1
 8005164:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8005166:	2300      	movs	r3, #0
 8005168:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800516a:	2300      	movs	r3, #0
 800516c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8005170:	2300      	movs	r3, #0
 8005172:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8005176:	2300      	movs	r3, #0
 8005178:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800517a:	2301      	movs	r3, #1
 800517c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005180:	2301      	movs	r3, #1
 8005182:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005184:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005188:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800518a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800518e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005190:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005194:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8005196:	2301      	movs	r3, #1
 8005198:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800519c:	2300      	movs	r3, #0
 800519e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80051a0:	2300      	movs	r3, #0
 80051a2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80051a4:	f107 0308 	add.w	r3, r7, #8
 80051a8:	4619      	mov	r1, r3
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f7ff ff08 	bl	8004fc0 <ETH_SetDMAConfig>
}
 80051b0:	bf00      	nop
 80051b2:	3798      	adds	r7, #152	; 0x98
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b087      	sub	sp, #28
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	3305      	adds	r3, #5
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	021b      	lsls	r3, r3, #8
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	3204      	adds	r2, #4
 80051d0:	7812      	ldrb	r2, [r2, #0]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80051d6:	68ba      	ldr	r2, [r7, #8]
 80051d8:	4b11      	ldr	r3, [pc, #68]	; (8005220 <ETH_MACAddressConfig+0x68>)
 80051da:	4413      	add	r3, r2
 80051dc:	461a      	mov	r2, r3
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	3303      	adds	r3, #3
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	061a      	lsls	r2, r3, #24
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	3302      	adds	r3, #2
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	041b      	lsls	r3, r3, #16
 80051f2:	431a      	orrs	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	3301      	adds	r3, #1
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	021b      	lsls	r3, r3, #8
 80051fc:	4313      	orrs	r3, r2
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	7812      	ldrb	r2, [r2, #0]
 8005202:	4313      	orrs	r3, r2
 8005204:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8005206:	68ba      	ldr	r2, [r7, #8]
 8005208:	4b06      	ldr	r3, [pc, #24]	; (8005224 <ETH_MACAddressConfig+0x6c>)
 800520a:	4413      	add	r3, r2
 800520c:	461a      	mov	r2, r3
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	6013      	str	r3, [r2, #0]
}
 8005212:	bf00      	nop
 8005214:	371c      	adds	r7, #28
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	40028040 	.word	0x40028040
 8005224:	40028044 	.word	0x40028044

08005228 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005230:	2300      	movs	r3, #0
 8005232:	60fb      	str	r3, [r7, #12]
 8005234:	e03e      	b.n	80052b4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68d9      	ldr	r1, [r3, #12]
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	4613      	mov	r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4413      	add	r3, r2
 8005242:	00db      	lsls	r3, r3, #3
 8005244:	440b      	add	r3, r1
 8005246:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	2200      	movs	r2, #0
 800524c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	2200      	movs	r2, #0
 8005252:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	2200      	movs	r2, #0
 8005258:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	2200      	movs	r2, #0
 800525e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005260:	68b9      	ldr	r1, [r7, #8]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	3206      	adds	r2, #6
 8005268:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2b02      	cmp	r3, #2
 800527c:	d80c      	bhi.n	8005298 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	68d9      	ldr	r1, [r3, #12]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	1c5a      	adds	r2, r3, #1
 8005286:	4613      	mov	r3, r2
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	4413      	add	r3, r2
 800528c:	00db      	lsls	r3, r3, #3
 800528e:	440b      	add	r3, r1
 8005290:	461a      	mov	r2, r3
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	60da      	str	r2, [r3, #12]
 8005296:	e004      	b.n	80052a2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	461a      	mov	r2, r3
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	3301      	adds	r3, #1
 80052b2:	60fb      	str	r3, [r7, #12]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2b03      	cmp	r3, #3
 80052b8:	d9bd      	bls.n	8005236 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	68da      	ldr	r2, [r3, #12]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052cc:	611a      	str	r2, [r3, #16]
}
 80052ce:	bf00      	nop
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr

080052da <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80052da:	b480      	push	{r7}
 80052dc:	b085      	sub	sp, #20
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80052e2:	2300      	movs	r3, #0
 80052e4:	60fb      	str	r3, [r7, #12]
 80052e6:	e046      	b.n	8005376 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6919      	ldr	r1, [r3, #16]
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	4613      	mov	r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	4413      	add	r3, r2
 80052f4:	00db      	lsls	r3, r3, #3
 80052f6:	440b      	add	r3, r1
 80052f8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	2200      	movs	r2, #0
 80052fe:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	2200      	movs	r2, #0
 8005304:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	2200      	movs	r2, #0
 800530a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	2200      	movs	r2, #0
 8005310:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	2200      	movs	r2, #0
 8005316:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	2200      	movs	r2, #0
 800531c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005324:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800532c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800533a:	68b9      	ldr	r1, [r7, #8]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	3212      	adds	r2, #18
 8005342:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2b02      	cmp	r3, #2
 800534a:	d80c      	bhi.n	8005366 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6919      	ldr	r1, [r3, #16]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	1c5a      	adds	r2, r3, #1
 8005354:	4613      	mov	r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	4413      	add	r3, r2
 800535a:	00db      	lsls	r3, r3, #3
 800535c:	440b      	add	r3, r1
 800535e:	461a      	mov	r2, r3
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	60da      	str	r2, [r3, #12]
 8005364:	e004      	b.n	8005370 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	461a      	mov	r2, r3
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	3301      	adds	r3, #1
 8005374:	60fb      	str	r3, [r7, #12]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2b03      	cmp	r3, #3
 800537a:	d9b5      	bls.n	80052e8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	691a      	ldr	r2, [r3, #16]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053a6:	60da      	str	r2, [r3, #12]
}
 80053a8:	bf00      	nop
 80053aa:	3714      	adds	r7, #20
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b089      	sub	sp, #36	; 0x24
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80053be:	2300      	movs	r3, #0
 80053c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80053c2:	2300      	movs	r3, #0
 80053c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80053c6:	2300      	movs	r3, #0
 80053c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053ca:	2300      	movs	r3, #0
 80053cc:	61fb      	str	r3, [r7, #28]
 80053ce:	e177      	b.n	80056c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80053d0:	2201      	movs	r2, #1
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	fa02 f303 	lsl.w	r3, r2, r3
 80053d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	4013      	ands	r3, r2
 80053e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	f040 8166 	bne.w	80056ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f003 0303 	and.w	r3, r3, #3
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d005      	beq.n	8005406 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005402:	2b02      	cmp	r3, #2
 8005404:	d130      	bne.n	8005468 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	005b      	lsls	r3, r3, #1
 8005410:	2203      	movs	r2, #3
 8005412:	fa02 f303 	lsl.w	r3, r2, r3
 8005416:	43db      	mvns	r3, r3
 8005418:	69ba      	ldr	r2, [r7, #24]
 800541a:	4013      	ands	r3, r2
 800541c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	68da      	ldr	r2, [r3, #12]
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	005b      	lsls	r3, r3, #1
 8005426:	fa02 f303 	lsl.w	r3, r2, r3
 800542a:	69ba      	ldr	r2, [r7, #24]
 800542c:	4313      	orrs	r3, r2
 800542e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	69ba      	ldr	r2, [r7, #24]
 8005434:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800543c:	2201      	movs	r2, #1
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	fa02 f303 	lsl.w	r3, r2, r3
 8005444:	43db      	mvns	r3, r3
 8005446:	69ba      	ldr	r2, [r7, #24]
 8005448:	4013      	ands	r3, r2
 800544a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	091b      	lsrs	r3, r3, #4
 8005452:	f003 0201 	and.w	r2, r3, #1
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	fa02 f303 	lsl.w	r3, r2, r3
 800545c:	69ba      	ldr	r2, [r7, #24]
 800545e:	4313      	orrs	r3, r2
 8005460:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	69ba      	ldr	r2, [r7, #24]
 8005466:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	f003 0303 	and.w	r3, r3, #3
 8005470:	2b03      	cmp	r3, #3
 8005472:	d017      	beq.n	80054a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	005b      	lsls	r3, r3, #1
 800547e:	2203      	movs	r2, #3
 8005480:	fa02 f303 	lsl.w	r3, r2, r3
 8005484:	43db      	mvns	r3, r3
 8005486:	69ba      	ldr	r2, [r7, #24]
 8005488:	4013      	ands	r3, r2
 800548a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	689a      	ldr	r2, [r3, #8]
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	005b      	lsls	r3, r3, #1
 8005494:	fa02 f303 	lsl.w	r3, r2, r3
 8005498:	69ba      	ldr	r2, [r7, #24]
 800549a:	4313      	orrs	r3, r2
 800549c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	69ba      	ldr	r2, [r7, #24]
 80054a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f003 0303 	and.w	r3, r3, #3
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d123      	bne.n	80054f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	08da      	lsrs	r2, r3, #3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	3208      	adds	r2, #8
 80054b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	f003 0307 	and.w	r3, r3, #7
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	220f      	movs	r2, #15
 80054c8:	fa02 f303 	lsl.w	r3, r2, r3
 80054cc:	43db      	mvns	r3, r3
 80054ce:	69ba      	ldr	r2, [r7, #24]
 80054d0:	4013      	ands	r3, r2
 80054d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	691a      	ldr	r2, [r3, #16]
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	f003 0307 	and.w	r3, r3, #7
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	fa02 f303 	lsl.w	r3, r2, r3
 80054e4:	69ba      	ldr	r2, [r7, #24]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	08da      	lsrs	r2, r3, #3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	3208      	adds	r2, #8
 80054f2:	69b9      	ldr	r1, [r7, #24]
 80054f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	005b      	lsls	r3, r3, #1
 8005502:	2203      	movs	r2, #3
 8005504:	fa02 f303 	lsl.w	r3, r2, r3
 8005508:	43db      	mvns	r3, r3
 800550a:	69ba      	ldr	r2, [r7, #24]
 800550c:	4013      	ands	r3, r2
 800550e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	f003 0203 	and.w	r2, r3, #3
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	005b      	lsls	r3, r3, #1
 800551c:	fa02 f303 	lsl.w	r3, r2, r3
 8005520:	69ba      	ldr	r2, [r7, #24]
 8005522:	4313      	orrs	r3, r2
 8005524:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	69ba      	ldr	r2, [r7, #24]
 800552a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005534:	2b00      	cmp	r3, #0
 8005536:	f000 80c0 	beq.w	80056ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800553a:	2300      	movs	r3, #0
 800553c:	60fb      	str	r3, [r7, #12]
 800553e:	4b66      	ldr	r3, [pc, #408]	; (80056d8 <HAL_GPIO_Init+0x324>)
 8005540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005542:	4a65      	ldr	r2, [pc, #404]	; (80056d8 <HAL_GPIO_Init+0x324>)
 8005544:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005548:	6453      	str	r3, [r2, #68]	; 0x44
 800554a:	4b63      	ldr	r3, [pc, #396]	; (80056d8 <HAL_GPIO_Init+0x324>)
 800554c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800554e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005552:	60fb      	str	r3, [r7, #12]
 8005554:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005556:	4a61      	ldr	r2, [pc, #388]	; (80056dc <HAL_GPIO_Init+0x328>)
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	089b      	lsrs	r3, r3, #2
 800555c:	3302      	adds	r3, #2
 800555e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005562:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	f003 0303 	and.w	r3, r3, #3
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	220f      	movs	r2, #15
 800556e:	fa02 f303 	lsl.w	r3, r2, r3
 8005572:	43db      	mvns	r3, r3
 8005574:	69ba      	ldr	r2, [r7, #24]
 8005576:	4013      	ands	r3, r2
 8005578:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a58      	ldr	r2, [pc, #352]	; (80056e0 <HAL_GPIO_Init+0x32c>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d037      	beq.n	80055f2 <HAL_GPIO_Init+0x23e>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a57      	ldr	r2, [pc, #348]	; (80056e4 <HAL_GPIO_Init+0x330>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d031      	beq.n	80055ee <HAL_GPIO_Init+0x23a>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a56      	ldr	r2, [pc, #344]	; (80056e8 <HAL_GPIO_Init+0x334>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d02b      	beq.n	80055ea <HAL_GPIO_Init+0x236>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a55      	ldr	r2, [pc, #340]	; (80056ec <HAL_GPIO_Init+0x338>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d025      	beq.n	80055e6 <HAL_GPIO_Init+0x232>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a54      	ldr	r2, [pc, #336]	; (80056f0 <HAL_GPIO_Init+0x33c>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d01f      	beq.n	80055e2 <HAL_GPIO_Init+0x22e>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a53      	ldr	r2, [pc, #332]	; (80056f4 <HAL_GPIO_Init+0x340>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d019      	beq.n	80055de <HAL_GPIO_Init+0x22a>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a52      	ldr	r2, [pc, #328]	; (80056f8 <HAL_GPIO_Init+0x344>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d013      	beq.n	80055da <HAL_GPIO_Init+0x226>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a51      	ldr	r2, [pc, #324]	; (80056fc <HAL_GPIO_Init+0x348>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d00d      	beq.n	80055d6 <HAL_GPIO_Init+0x222>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a50      	ldr	r2, [pc, #320]	; (8005700 <HAL_GPIO_Init+0x34c>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d007      	beq.n	80055d2 <HAL_GPIO_Init+0x21e>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a4f      	ldr	r2, [pc, #316]	; (8005704 <HAL_GPIO_Init+0x350>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d101      	bne.n	80055ce <HAL_GPIO_Init+0x21a>
 80055ca:	2309      	movs	r3, #9
 80055cc:	e012      	b.n	80055f4 <HAL_GPIO_Init+0x240>
 80055ce:	230a      	movs	r3, #10
 80055d0:	e010      	b.n	80055f4 <HAL_GPIO_Init+0x240>
 80055d2:	2308      	movs	r3, #8
 80055d4:	e00e      	b.n	80055f4 <HAL_GPIO_Init+0x240>
 80055d6:	2307      	movs	r3, #7
 80055d8:	e00c      	b.n	80055f4 <HAL_GPIO_Init+0x240>
 80055da:	2306      	movs	r3, #6
 80055dc:	e00a      	b.n	80055f4 <HAL_GPIO_Init+0x240>
 80055de:	2305      	movs	r3, #5
 80055e0:	e008      	b.n	80055f4 <HAL_GPIO_Init+0x240>
 80055e2:	2304      	movs	r3, #4
 80055e4:	e006      	b.n	80055f4 <HAL_GPIO_Init+0x240>
 80055e6:	2303      	movs	r3, #3
 80055e8:	e004      	b.n	80055f4 <HAL_GPIO_Init+0x240>
 80055ea:	2302      	movs	r3, #2
 80055ec:	e002      	b.n	80055f4 <HAL_GPIO_Init+0x240>
 80055ee:	2301      	movs	r3, #1
 80055f0:	e000      	b.n	80055f4 <HAL_GPIO_Init+0x240>
 80055f2:	2300      	movs	r3, #0
 80055f4:	69fa      	ldr	r2, [r7, #28]
 80055f6:	f002 0203 	and.w	r2, r2, #3
 80055fa:	0092      	lsls	r2, r2, #2
 80055fc:	4093      	lsls	r3, r2
 80055fe:	69ba      	ldr	r2, [r7, #24]
 8005600:	4313      	orrs	r3, r2
 8005602:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005604:	4935      	ldr	r1, [pc, #212]	; (80056dc <HAL_GPIO_Init+0x328>)
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	089b      	lsrs	r3, r3, #2
 800560a:	3302      	adds	r3, #2
 800560c:	69ba      	ldr	r2, [r7, #24]
 800560e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005612:	4b3d      	ldr	r3, [pc, #244]	; (8005708 <HAL_GPIO_Init+0x354>)
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	43db      	mvns	r3, r3
 800561c:	69ba      	ldr	r2, [r7, #24]
 800561e:	4013      	ands	r3, r2
 8005620:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d003      	beq.n	8005636 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800562e:	69ba      	ldr	r2, [r7, #24]
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	4313      	orrs	r3, r2
 8005634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005636:	4a34      	ldr	r2, [pc, #208]	; (8005708 <HAL_GPIO_Init+0x354>)
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800563c:	4b32      	ldr	r3, [pc, #200]	; (8005708 <HAL_GPIO_Init+0x354>)
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	43db      	mvns	r3, r3
 8005646:	69ba      	ldr	r2, [r7, #24]
 8005648:	4013      	ands	r3, r2
 800564a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d003      	beq.n	8005660 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005658:	69ba      	ldr	r2, [r7, #24]
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	4313      	orrs	r3, r2
 800565e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005660:	4a29      	ldr	r2, [pc, #164]	; (8005708 <HAL_GPIO_Init+0x354>)
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005666:	4b28      	ldr	r3, [pc, #160]	; (8005708 <HAL_GPIO_Init+0x354>)
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	43db      	mvns	r3, r3
 8005670:	69ba      	ldr	r2, [r7, #24]
 8005672:	4013      	ands	r3, r2
 8005674:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d003      	beq.n	800568a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005682:	69ba      	ldr	r2, [r7, #24]
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	4313      	orrs	r3, r2
 8005688:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800568a:	4a1f      	ldr	r2, [pc, #124]	; (8005708 <HAL_GPIO_Init+0x354>)
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005690:	4b1d      	ldr	r3, [pc, #116]	; (8005708 <HAL_GPIO_Init+0x354>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	43db      	mvns	r3, r3
 800569a:	69ba      	ldr	r2, [r7, #24]
 800569c:	4013      	ands	r3, r2
 800569e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d003      	beq.n	80056b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80056ac:	69ba      	ldr	r2, [r7, #24]
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80056b4:	4a14      	ldr	r2, [pc, #80]	; (8005708 <HAL_GPIO_Init+0x354>)
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	3301      	adds	r3, #1
 80056be:	61fb      	str	r3, [r7, #28]
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	2b0f      	cmp	r3, #15
 80056c4:	f67f ae84 	bls.w	80053d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80056c8:	bf00      	nop
 80056ca:	bf00      	nop
 80056cc:	3724      	adds	r7, #36	; 0x24
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	40023800 	.word	0x40023800
 80056dc:	40013800 	.word	0x40013800
 80056e0:	40020000 	.word	0x40020000
 80056e4:	40020400 	.word	0x40020400
 80056e8:	40020800 	.word	0x40020800
 80056ec:	40020c00 	.word	0x40020c00
 80056f0:	40021000 	.word	0x40021000
 80056f4:	40021400 	.word	0x40021400
 80056f8:	40021800 	.word	0x40021800
 80056fc:	40021c00 	.word	0x40021c00
 8005700:	40022000 	.word	0x40022000
 8005704:	40022400 	.word	0x40022400
 8005708:	40013c00 	.word	0x40013c00

0800570c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800570c:	b480      	push	{r7}
 800570e:	b085      	sub	sp, #20
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	460b      	mov	r3, r1
 8005716:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	691a      	ldr	r2, [r3, #16]
 800571c:	887b      	ldrh	r3, [r7, #2]
 800571e:	4013      	ands	r3, r2
 8005720:	2b00      	cmp	r3, #0
 8005722:	d002      	beq.n	800572a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005724:	2301      	movs	r3, #1
 8005726:	73fb      	strb	r3, [r7, #15]
 8005728:	e001      	b.n	800572e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800572a:	2300      	movs	r3, #0
 800572c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800572e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005730:	4618      	mov	r0, r3
 8005732:	3714      	adds	r7, #20
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	460b      	mov	r3, r1
 8005746:	807b      	strh	r3, [r7, #2]
 8005748:	4613      	mov	r3, r2
 800574a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800574c:	787b      	ldrb	r3, [r7, #1]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d003      	beq.n	800575a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005752:	887a      	ldrh	r2, [r7, #2]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005758:	e003      	b.n	8005762 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800575a:	887b      	ldrh	r3, [r7, #2]
 800575c:	041a      	lsls	r2, r3, #16
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	619a      	str	r2, [r3, #24]
}
 8005762:	bf00      	nop
 8005764:	370c      	adds	r7, #12
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr

0800576e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800576e:	b580      	push	{r7, lr}
 8005770:	b086      	sub	sp, #24
 8005772:	af02      	add	r7, sp, #8
 8005774:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d101      	bne.n	8005780 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e101      	b.n	8005984 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d106      	bne.n	80057a0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f7fd fc2c 	bl	8002ff8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2203      	movs	r2, #3
 80057a4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80057ae:	d102      	bne.n	80057b6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4618      	mov	r0, r3
 80057bc:	f003 f962 	bl	8008a84 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6818      	ldr	r0, [r3, #0]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	7c1a      	ldrb	r2, [r3, #16]
 80057c8:	f88d 2000 	strb.w	r2, [sp]
 80057cc:	3304      	adds	r3, #4
 80057ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80057d0:	f003 f8f4 	bl	80089bc <USB_CoreInit>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d005      	beq.n	80057e6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2202      	movs	r2, #2
 80057de:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e0ce      	b.n	8005984 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2100      	movs	r1, #0
 80057ec:	4618      	mov	r0, r3
 80057ee:	f003 f95a 	bl	8008aa6 <USB_SetCurrentMode>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d005      	beq.n	8005804 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2202      	movs	r2, #2
 80057fc:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e0bf      	b.n	8005984 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005804:	2300      	movs	r3, #0
 8005806:	73fb      	strb	r3, [r7, #15]
 8005808:	e04a      	b.n	80058a0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800580a:	7bfa      	ldrb	r2, [r7, #15]
 800580c:	6879      	ldr	r1, [r7, #4]
 800580e:	4613      	mov	r3, r2
 8005810:	00db      	lsls	r3, r3, #3
 8005812:	4413      	add	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	440b      	add	r3, r1
 8005818:	3315      	adds	r3, #21
 800581a:	2201      	movs	r2, #1
 800581c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800581e:	7bfa      	ldrb	r2, [r7, #15]
 8005820:	6879      	ldr	r1, [r7, #4]
 8005822:	4613      	mov	r3, r2
 8005824:	00db      	lsls	r3, r3, #3
 8005826:	4413      	add	r3, r2
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	440b      	add	r3, r1
 800582c:	3314      	adds	r3, #20
 800582e:	7bfa      	ldrb	r2, [r7, #15]
 8005830:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005832:	7bfa      	ldrb	r2, [r7, #15]
 8005834:	7bfb      	ldrb	r3, [r7, #15]
 8005836:	b298      	uxth	r0, r3
 8005838:	6879      	ldr	r1, [r7, #4]
 800583a:	4613      	mov	r3, r2
 800583c:	00db      	lsls	r3, r3, #3
 800583e:	4413      	add	r3, r2
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	440b      	add	r3, r1
 8005844:	332e      	adds	r3, #46	; 0x2e
 8005846:	4602      	mov	r2, r0
 8005848:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800584a:	7bfa      	ldrb	r2, [r7, #15]
 800584c:	6879      	ldr	r1, [r7, #4]
 800584e:	4613      	mov	r3, r2
 8005850:	00db      	lsls	r3, r3, #3
 8005852:	4413      	add	r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	440b      	add	r3, r1
 8005858:	3318      	adds	r3, #24
 800585a:	2200      	movs	r2, #0
 800585c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800585e:	7bfa      	ldrb	r2, [r7, #15]
 8005860:	6879      	ldr	r1, [r7, #4]
 8005862:	4613      	mov	r3, r2
 8005864:	00db      	lsls	r3, r3, #3
 8005866:	4413      	add	r3, r2
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	440b      	add	r3, r1
 800586c:	331c      	adds	r3, #28
 800586e:	2200      	movs	r2, #0
 8005870:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005872:	7bfa      	ldrb	r2, [r7, #15]
 8005874:	6879      	ldr	r1, [r7, #4]
 8005876:	4613      	mov	r3, r2
 8005878:	00db      	lsls	r3, r3, #3
 800587a:	4413      	add	r3, r2
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	440b      	add	r3, r1
 8005880:	3320      	adds	r3, #32
 8005882:	2200      	movs	r2, #0
 8005884:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005886:	7bfa      	ldrb	r2, [r7, #15]
 8005888:	6879      	ldr	r1, [r7, #4]
 800588a:	4613      	mov	r3, r2
 800588c:	00db      	lsls	r3, r3, #3
 800588e:	4413      	add	r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	440b      	add	r3, r1
 8005894:	3324      	adds	r3, #36	; 0x24
 8005896:	2200      	movs	r2, #0
 8005898:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800589a:	7bfb      	ldrb	r3, [r7, #15]
 800589c:	3301      	adds	r3, #1
 800589e:	73fb      	strb	r3, [r7, #15]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	791b      	ldrb	r3, [r3, #4]
 80058a4:	7bfa      	ldrb	r2, [r7, #15]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d3af      	bcc.n	800580a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058aa:	2300      	movs	r3, #0
 80058ac:	73fb      	strb	r3, [r7, #15]
 80058ae:	e044      	b.n	800593a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80058b0:	7bfa      	ldrb	r2, [r7, #15]
 80058b2:	6879      	ldr	r1, [r7, #4]
 80058b4:	4613      	mov	r3, r2
 80058b6:	00db      	lsls	r3, r3, #3
 80058b8:	4413      	add	r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	440b      	add	r3, r1
 80058be:	f203 2355 	addw	r3, r3, #597	; 0x255
 80058c2:	2200      	movs	r2, #0
 80058c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80058c6:	7bfa      	ldrb	r2, [r7, #15]
 80058c8:	6879      	ldr	r1, [r7, #4]
 80058ca:	4613      	mov	r3, r2
 80058cc:	00db      	lsls	r3, r3, #3
 80058ce:	4413      	add	r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	440b      	add	r3, r1
 80058d4:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80058d8:	7bfa      	ldrb	r2, [r7, #15]
 80058da:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80058dc:	7bfa      	ldrb	r2, [r7, #15]
 80058de:	6879      	ldr	r1, [r7, #4]
 80058e0:	4613      	mov	r3, r2
 80058e2:	00db      	lsls	r3, r3, #3
 80058e4:	4413      	add	r3, r2
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	440b      	add	r3, r1
 80058ea:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80058ee:	2200      	movs	r2, #0
 80058f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80058f2:	7bfa      	ldrb	r2, [r7, #15]
 80058f4:	6879      	ldr	r1, [r7, #4]
 80058f6:	4613      	mov	r3, r2
 80058f8:	00db      	lsls	r3, r3, #3
 80058fa:	4413      	add	r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	440b      	add	r3, r1
 8005900:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8005904:	2200      	movs	r2, #0
 8005906:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005908:	7bfa      	ldrb	r2, [r7, #15]
 800590a:	6879      	ldr	r1, [r7, #4]
 800590c:	4613      	mov	r3, r2
 800590e:	00db      	lsls	r3, r3, #3
 8005910:	4413      	add	r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	440b      	add	r3, r1
 8005916:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800591a:	2200      	movs	r2, #0
 800591c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800591e:	7bfa      	ldrb	r2, [r7, #15]
 8005920:	6879      	ldr	r1, [r7, #4]
 8005922:	4613      	mov	r3, r2
 8005924:	00db      	lsls	r3, r3, #3
 8005926:	4413      	add	r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	440b      	add	r3, r1
 800592c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8005930:	2200      	movs	r2, #0
 8005932:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005934:	7bfb      	ldrb	r3, [r7, #15]
 8005936:	3301      	adds	r3, #1
 8005938:	73fb      	strb	r3, [r7, #15]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	791b      	ldrb	r3, [r3, #4]
 800593e:	7bfa      	ldrb	r2, [r7, #15]
 8005940:	429a      	cmp	r2, r3
 8005942:	d3b5      	bcc.n	80058b0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6818      	ldr	r0, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	7c1a      	ldrb	r2, [r3, #16]
 800594c:	f88d 2000 	strb.w	r2, [sp]
 8005950:	3304      	adds	r3, #4
 8005952:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005954:	f003 f8f4 	bl	8008b40 <USB_DevInit>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d005      	beq.n	800596a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2202      	movs	r2, #2
 8005962:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e00c      	b.n	8005984 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4618      	mov	r0, r3
 800597e:	f003 fabc 	bl	8008efa <USB_DevDisconnect>

  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3710      	adds	r7, #16
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b086      	sub	sp, #24
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d101      	bne.n	800599e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e267      	b.n	8005e6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0301 	and.w	r3, r3, #1
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d075      	beq.n	8005a96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059aa:	4b88      	ldr	r3, [pc, #544]	; (8005bcc <HAL_RCC_OscConfig+0x240>)
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f003 030c 	and.w	r3, r3, #12
 80059b2:	2b04      	cmp	r3, #4
 80059b4:	d00c      	beq.n	80059d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059b6:	4b85      	ldr	r3, [pc, #532]	; (8005bcc <HAL_RCC_OscConfig+0x240>)
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059be:	2b08      	cmp	r3, #8
 80059c0:	d112      	bne.n	80059e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059c2:	4b82      	ldr	r3, [pc, #520]	; (8005bcc <HAL_RCC_OscConfig+0x240>)
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059ce:	d10b      	bne.n	80059e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059d0:	4b7e      	ldr	r3, [pc, #504]	; (8005bcc <HAL_RCC_OscConfig+0x240>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d05b      	beq.n	8005a94 <HAL_RCC_OscConfig+0x108>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d157      	bne.n	8005a94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e242      	b.n	8005e6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059f0:	d106      	bne.n	8005a00 <HAL_RCC_OscConfig+0x74>
 80059f2:	4b76      	ldr	r3, [pc, #472]	; (8005bcc <HAL_RCC_OscConfig+0x240>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a75      	ldr	r2, [pc, #468]	; (8005bcc <HAL_RCC_OscConfig+0x240>)
 80059f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059fc:	6013      	str	r3, [r2, #0]
 80059fe:	e01d      	b.n	8005a3c <HAL_RCC_OscConfig+0xb0>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a08:	d10c      	bne.n	8005a24 <HAL_RCC_OscConfig+0x98>
 8005a0a:	4b70      	ldr	r3, [pc, #448]	; (8005bcc <HAL_RCC_OscConfig+0x240>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a6f      	ldr	r2, [pc, #444]	; (8005bcc <HAL_RCC_OscConfig+0x240>)
 8005a10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a14:	6013      	str	r3, [r2, #0]
 8005a16:	4b6d      	ldr	r3, [pc, #436]	; (8005bcc <HAL_RCC_OscConfig+0x240>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a6c      	ldr	r2, [pc, #432]	; (8005bcc <HAL_RCC_OscConfig+0x240>)
 8005a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a20:	6013      	str	r3, [r2, #0]
 8005a22:	e00b      	b.n	8005a3c <HAL_RCC_OscConfig+0xb0>
 8005a24:	4b69      	ldr	r3, [pc, #420]	; (8005bcc <HAL_RCC_OscConfig+0x240>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a68      	ldr	r2, [pc, #416]	; (8005bcc <HAL_RCC_OscConfig+0x240>)
 8005a2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a2e:	6013      	str	r3, [r2, #0]
 8005a30:	4b66      	ldr	r3, [pc, #408]	; (8005bcc <HAL_RCC_OscConfig+0x240>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a65      	ldr	r2, [pc, #404]	; (8005bcc <HAL_RCC_OscConfig+0x240>)
 8005a36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d013      	beq.n	8005a6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a44:	f7fd ff04 	bl	8003850 <HAL_GetTick>
 8005a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a4a:	e008      	b.n	8005a5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a4c:	f7fd ff00 	bl	8003850 <HAL_GetTick>
 8005a50:	4602      	mov	r2, r0
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	2b64      	cmp	r3, #100	; 0x64
 8005a58:	d901      	bls.n	8005a5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e207      	b.n	8005e6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a5e:	4b5b      	ldr	r3, [pc, #364]	; (8005bcc <HAL_RCC_OscConfig+0x240>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d0f0      	beq.n	8005a4c <HAL_RCC_OscConfig+0xc0>
 8005a6a:	e014      	b.n	8005a96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a6c:	f7fd fef0 	bl	8003850 <HAL_GetTick>
 8005a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a72:	e008      	b.n	8005a86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a74:	f7fd feec 	bl	8003850 <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	2b64      	cmp	r3, #100	; 0x64
 8005a80:	d901      	bls.n	8005a86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e1f3      	b.n	8005e6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a86:	4b51      	ldr	r3, [pc, #324]	; (8005bcc <HAL_RCC_OscConfig+0x240>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1f0      	bne.n	8005a74 <HAL_RCC_OscConfig+0xe8>
 8005a92:	e000      	b.n	8005a96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0302 	and.w	r3, r3, #2
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d063      	beq.n	8005b6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005aa2:	4b4a      	ldr	r3, [pc, #296]	; (8005bcc <HAL_RCC_OscConfig+0x240>)
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	f003 030c 	and.w	r3, r3, #12
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00b      	beq.n	8005ac6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005aae:	4b47      	ldr	r3, [pc, #284]	; (8005bcc <HAL_RCC_OscConfig+0x240>)
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ab6:	2b08      	cmp	r3, #8
 8005ab8:	d11c      	bne.n	8005af4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005aba:	4b44      	ldr	r3, [pc, #272]	; (8005bcc <HAL_RCC_OscConfig+0x240>)
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d116      	bne.n	8005af4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ac6:	4b41      	ldr	r3, [pc, #260]	; (8005bcc <HAL_RCC_OscConfig+0x240>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 0302 	and.w	r3, r3, #2
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d005      	beq.n	8005ade <HAL_RCC_OscConfig+0x152>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d001      	beq.n	8005ade <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e1c7      	b.n	8005e6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ade:	4b3b      	ldr	r3, [pc, #236]	; (8005bcc <HAL_RCC_OscConfig+0x240>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	00db      	lsls	r3, r3, #3
 8005aec:	4937      	ldr	r1, [pc, #220]	; (8005bcc <HAL_RCC_OscConfig+0x240>)
 8005aee:	4313      	orrs	r3, r2
 8005af0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005af2:	e03a      	b.n	8005b6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d020      	beq.n	8005b3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005afc:	4b34      	ldr	r3, [pc, #208]	; (8005bd0 <HAL_RCC_OscConfig+0x244>)
 8005afe:	2201      	movs	r2, #1
 8005b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b02:	f7fd fea5 	bl	8003850 <HAL_GetTick>
 8005b06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b08:	e008      	b.n	8005b1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b0a:	f7fd fea1 	bl	8003850 <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d901      	bls.n	8005b1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e1a8      	b.n	8005e6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b1c:	4b2b      	ldr	r3, [pc, #172]	; (8005bcc <HAL_RCC_OscConfig+0x240>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0302 	and.w	r3, r3, #2
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d0f0      	beq.n	8005b0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b28:	4b28      	ldr	r3, [pc, #160]	; (8005bcc <HAL_RCC_OscConfig+0x240>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	00db      	lsls	r3, r3, #3
 8005b36:	4925      	ldr	r1, [pc, #148]	; (8005bcc <HAL_RCC_OscConfig+0x240>)
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	600b      	str	r3, [r1, #0]
 8005b3c:	e015      	b.n	8005b6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b3e:	4b24      	ldr	r3, [pc, #144]	; (8005bd0 <HAL_RCC_OscConfig+0x244>)
 8005b40:	2200      	movs	r2, #0
 8005b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b44:	f7fd fe84 	bl	8003850 <HAL_GetTick>
 8005b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b4a:	e008      	b.n	8005b5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b4c:	f7fd fe80 	bl	8003850 <HAL_GetTick>
 8005b50:	4602      	mov	r2, r0
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d901      	bls.n	8005b5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e187      	b.n	8005e6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b5e:	4b1b      	ldr	r3, [pc, #108]	; (8005bcc <HAL_RCC_OscConfig+0x240>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 0302 	and.w	r3, r3, #2
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d1f0      	bne.n	8005b4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0308 	and.w	r3, r3, #8
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d036      	beq.n	8005be4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d016      	beq.n	8005bac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b7e:	4b15      	ldr	r3, [pc, #84]	; (8005bd4 <HAL_RCC_OscConfig+0x248>)
 8005b80:	2201      	movs	r2, #1
 8005b82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b84:	f7fd fe64 	bl	8003850 <HAL_GetTick>
 8005b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b8a:	e008      	b.n	8005b9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b8c:	f7fd fe60 	bl	8003850 <HAL_GetTick>
 8005b90:	4602      	mov	r2, r0
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d901      	bls.n	8005b9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e167      	b.n	8005e6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b9e:	4b0b      	ldr	r3, [pc, #44]	; (8005bcc <HAL_RCC_OscConfig+0x240>)
 8005ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ba2:	f003 0302 	and.w	r3, r3, #2
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d0f0      	beq.n	8005b8c <HAL_RCC_OscConfig+0x200>
 8005baa:	e01b      	b.n	8005be4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bac:	4b09      	ldr	r3, [pc, #36]	; (8005bd4 <HAL_RCC_OscConfig+0x248>)
 8005bae:	2200      	movs	r2, #0
 8005bb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bb2:	f7fd fe4d 	bl	8003850 <HAL_GetTick>
 8005bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bb8:	e00e      	b.n	8005bd8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bba:	f7fd fe49 	bl	8003850 <HAL_GetTick>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d907      	bls.n	8005bd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e150      	b.n	8005e6e <HAL_RCC_OscConfig+0x4e2>
 8005bcc:	40023800 	.word	0x40023800
 8005bd0:	42470000 	.word	0x42470000
 8005bd4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bd8:	4b88      	ldr	r3, [pc, #544]	; (8005dfc <HAL_RCC_OscConfig+0x470>)
 8005bda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bdc:	f003 0302 	and.w	r3, r3, #2
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d1ea      	bne.n	8005bba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0304 	and.w	r3, r3, #4
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	f000 8097 	beq.w	8005d20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bf6:	4b81      	ldr	r3, [pc, #516]	; (8005dfc <HAL_RCC_OscConfig+0x470>)
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d10f      	bne.n	8005c22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c02:	2300      	movs	r3, #0
 8005c04:	60bb      	str	r3, [r7, #8]
 8005c06:	4b7d      	ldr	r3, [pc, #500]	; (8005dfc <HAL_RCC_OscConfig+0x470>)
 8005c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0a:	4a7c      	ldr	r2, [pc, #496]	; (8005dfc <HAL_RCC_OscConfig+0x470>)
 8005c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c10:	6413      	str	r3, [r2, #64]	; 0x40
 8005c12:	4b7a      	ldr	r3, [pc, #488]	; (8005dfc <HAL_RCC_OscConfig+0x470>)
 8005c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c1a:	60bb      	str	r3, [r7, #8]
 8005c1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c22:	4b77      	ldr	r3, [pc, #476]	; (8005e00 <HAL_RCC_OscConfig+0x474>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d118      	bne.n	8005c60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c2e:	4b74      	ldr	r3, [pc, #464]	; (8005e00 <HAL_RCC_OscConfig+0x474>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a73      	ldr	r2, [pc, #460]	; (8005e00 <HAL_RCC_OscConfig+0x474>)
 8005c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c3a:	f7fd fe09 	bl	8003850 <HAL_GetTick>
 8005c3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c40:	e008      	b.n	8005c54 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c42:	f7fd fe05 	bl	8003850 <HAL_GetTick>
 8005c46:	4602      	mov	r2, r0
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d901      	bls.n	8005c54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005c50:	2303      	movs	r3, #3
 8005c52:	e10c      	b.n	8005e6e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c54:	4b6a      	ldr	r3, [pc, #424]	; (8005e00 <HAL_RCC_OscConfig+0x474>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d0f0      	beq.n	8005c42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d106      	bne.n	8005c76 <HAL_RCC_OscConfig+0x2ea>
 8005c68:	4b64      	ldr	r3, [pc, #400]	; (8005dfc <HAL_RCC_OscConfig+0x470>)
 8005c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c6c:	4a63      	ldr	r2, [pc, #396]	; (8005dfc <HAL_RCC_OscConfig+0x470>)
 8005c6e:	f043 0301 	orr.w	r3, r3, #1
 8005c72:	6713      	str	r3, [r2, #112]	; 0x70
 8005c74:	e01c      	b.n	8005cb0 <HAL_RCC_OscConfig+0x324>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	2b05      	cmp	r3, #5
 8005c7c:	d10c      	bne.n	8005c98 <HAL_RCC_OscConfig+0x30c>
 8005c7e:	4b5f      	ldr	r3, [pc, #380]	; (8005dfc <HAL_RCC_OscConfig+0x470>)
 8005c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c82:	4a5e      	ldr	r2, [pc, #376]	; (8005dfc <HAL_RCC_OscConfig+0x470>)
 8005c84:	f043 0304 	orr.w	r3, r3, #4
 8005c88:	6713      	str	r3, [r2, #112]	; 0x70
 8005c8a:	4b5c      	ldr	r3, [pc, #368]	; (8005dfc <HAL_RCC_OscConfig+0x470>)
 8005c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c8e:	4a5b      	ldr	r2, [pc, #364]	; (8005dfc <HAL_RCC_OscConfig+0x470>)
 8005c90:	f043 0301 	orr.w	r3, r3, #1
 8005c94:	6713      	str	r3, [r2, #112]	; 0x70
 8005c96:	e00b      	b.n	8005cb0 <HAL_RCC_OscConfig+0x324>
 8005c98:	4b58      	ldr	r3, [pc, #352]	; (8005dfc <HAL_RCC_OscConfig+0x470>)
 8005c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c9c:	4a57      	ldr	r2, [pc, #348]	; (8005dfc <HAL_RCC_OscConfig+0x470>)
 8005c9e:	f023 0301 	bic.w	r3, r3, #1
 8005ca2:	6713      	str	r3, [r2, #112]	; 0x70
 8005ca4:	4b55      	ldr	r3, [pc, #340]	; (8005dfc <HAL_RCC_OscConfig+0x470>)
 8005ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca8:	4a54      	ldr	r2, [pc, #336]	; (8005dfc <HAL_RCC_OscConfig+0x470>)
 8005caa:	f023 0304 	bic.w	r3, r3, #4
 8005cae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d015      	beq.n	8005ce4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cb8:	f7fd fdca 	bl	8003850 <HAL_GetTick>
 8005cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cbe:	e00a      	b.n	8005cd6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cc0:	f7fd fdc6 	bl	8003850 <HAL_GetTick>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d901      	bls.n	8005cd6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e0cb      	b.n	8005e6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cd6:	4b49      	ldr	r3, [pc, #292]	; (8005dfc <HAL_RCC_OscConfig+0x470>)
 8005cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cda:	f003 0302 	and.w	r3, r3, #2
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d0ee      	beq.n	8005cc0 <HAL_RCC_OscConfig+0x334>
 8005ce2:	e014      	b.n	8005d0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ce4:	f7fd fdb4 	bl	8003850 <HAL_GetTick>
 8005ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cea:	e00a      	b.n	8005d02 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cec:	f7fd fdb0 	bl	8003850 <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d901      	bls.n	8005d02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e0b5      	b.n	8005e6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d02:	4b3e      	ldr	r3, [pc, #248]	; (8005dfc <HAL_RCC_OscConfig+0x470>)
 8005d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d06:	f003 0302 	and.w	r3, r3, #2
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d1ee      	bne.n	8005cec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d0e:	7dfb      	ldrb	r3, [r7, #23]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d105      	bne.n	8005d20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d14:	4b39      	ldr	r3, [pc, #228]	; (8005dfc <HAL_RCC_OscConfig+0x470>)
 8005d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d18:	4a38      	ldr	r2, [pc, #224]	; (8005dfc <HAL_RCC_OscConfig+0x470>)
 8005d1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	699b      	ldr	r3, [r3, #24]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	f000 80a1 	beq.w	8005e6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d2a:	4b34      	ldr	r3, [pc, #208]	; (8005dfc <HAL_RCC_OscConfig+0x470>)
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	f003 030c 	and.w	r3, r3, #12
 8005d32:	2b08      	cmp	r3, #8
 8005d34:	d05c      	beq.n	8005df0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	699b      	ldr	r3, [r3, #24]
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d141      	bne.n	8005dc2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d3e:	4b31      	ldr	r3, [pc, #196]	; (8005e04 <HAL_RCC_OscConfig+0x478>)
 8005d40:	2200      	movs	r2, #0
 8005d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d44:	f7fd fd84 	bl	8003850 <HAL_GetTick>
 8005d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d4a:	e008      	b.n	8005d5e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d4c:	f7fd fd80 	bl	8003850 <HAL_GetTick>
 8005d50:	4602      	mov	r2, r0
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d901      	bls.n	8005d5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e087      	b.n	8005e6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d5e:	4b27      	ldr	r3, [pc, #156]	; (8005dfc <HAL_RCC_OscConfig+0x470>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1f0      	bne.n	8005d4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	69da      	ldr	r2, [r3, #28]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a1b      	ldr	r3, [r3, #32]
 8005d72:	431a      	orrs	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d78:	019b      	lsls	r3, r3, #6
 8005d7a:	431a      	orrs	r2, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d80:	085b      	lsrs	r3, r3, #1
 8005d82:	3b01      	subs	r3, #1
 8005d84:	041b      	lsls	r3, r3, #16
 8005d86:	431a      	orrs	r2, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d8c:	061b      	lsls	r3, r3, #24
 8005d8e:	491b      	ldr	r1, [pc, #108]	; (8005dfc <HAL_RCC_OscConfig+0x470>)
 8005d90:	4313      	orrs	r3, r2
 8005d92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d94:	4b1b      	ldr	r3, [pc, #108]	; (8005e04 <HAL_RCC_OscConfig+0x478>)
 8005d96:	2201      	movs	r2, #1
 8005d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d9a:	f7fd fd59 	bl	8003850 <HAL_GetTick>
 8005d9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005da0:	e008      	b.n	8005db4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005da2:	f7fd fd55 	bl	8003850 <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d901      	bls.n	8005db4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005db0:	2303      	movs	r3, #3
 8005db2:	e05c      	b.n	8005e6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005db4:	4b11      	ldr	r3, [pc, #68]	; (8005dfc <HAL_RCC_OscConfig+0x470>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d0f0      	beq.n	8005da2 <HAL_RCC_OscConfig+0x416>
 8005dc0:	e054      	b.n	8005e6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dc2:	4b10      	ldr	r3, [pc, #64]	; (8005e04 <HAL_RCC_OscConfig+0x478>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dc8:	f7fd fd42 	bl	8003850 <HAL_GetTick>
 8005dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dce:	e008      	b.n	8005de2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dd0:	f7fd fd3e 	bl	8003850 <HAL_GetTick>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d901      	bls.n	8005de2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e045      	b.n	8005e6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005de2:	4b06      	ldr	r3, [pc, #24]	; (8005dfc <HAL_RCC_OscConfig+0x470>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1f0      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x444>
 8005dee:	e03d      	b.n	8005e6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	699b      	ldr	r3, [r3, #24]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d107      	bne.n	8005e08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e038      	b.n	8005e6e <HAL_RCC_OscConfig+0x4e2>
 8005dfc:	40023800 	.word	0x40023800
 8005e00:	40007000 	.word	0x40007000
 8005e04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e08:	4b1b      	ldr	r3, [pc, #108]	; (8005e78 <HAL_RCC_OscConfig+0x4ec>)
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d028      	beq.n	8005e68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d121      	bne.n	8005e68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d11a      	bne.n	8005e68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005e38:	4013      	ands	r3, r2
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d111      	bne.n	8005e68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e4e:	085b      	lsrs	r3, r3, #1
 8005e50:	3b01      	subs	r3, #1
 8005e52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d107      	bne.n	8005e68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d001      	beq.n	8005e6c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e000      	b.n	8005e6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3718      	adds	r7, #24
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	40023800 	.word	0x40023800

08005e7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d101      	bne.n	8005e90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e0cc      	b.n	800602a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e90:	4b68      	ldr	r3, [pc, #416]	; (8006034 <HAL_RCC_ClockConfig+0x1b8>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 030f 	and.w	r3, r3, #15
 8005e98:	683a      	ldr	r2, [r7, #0]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d90c      	bls.n	8005eb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e9e:	4b65      	ldr	r3, [pc, #404]	; (8006034 <HAL_RCC_ClockConfig+0x1b8>)
 8005ea0:	683a      	ldr	r2, [r7, #0]
 8005ea2:	b2d2      	uxtb	r2, r2
 8005ea4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ea6:	4b63      	ldr	r3, [pc, #396]	; (8006034 <HAL_RCC_ClockConfig+0x1b8>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 030f 	and.w	r3, r3, #15
 8005eae:	683a      	ldr	r2, [r7, #0]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d001      	beq.n	8005eb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e0b8      	b.n	800602a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 0302 	and.w	r3, r3, #2
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d020      	beq.n	8005f06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 0304 	and.w	r3, r3, #4
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d005      	beq.n	8005edc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ed0:	4b59      	ldr	r3, [pc, #356]	; (8006038 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	4a58      	ldr	r2, [pc, #352]	; (8006038 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005eda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 0308 	and.w	r3, r3, #8
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d005      	beq.n	8005ef4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ee8:	4b53      	ldr	r3, [pc, #332]	; (8006038 <HAL_RCC_ClockConfig+0x1bc>)
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	4a52      	ldr	r2, [pc, #328]	; (8006038 <HAL_RCC_ClockConfig+0x1bc>)
 8005eee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005ef2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ef4:	4b50      	ldr	r3, [pc, #320]	; (8006038 <HAL_RCC_ClockConfig+0x1bc>)
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	494d      	ldr	r1, [pc, #308]	; (8006038 <HAL_RCC_ClockConfig+0x1bc>)
 8005f02:	4313      	orrs	r3, r2
 8005f04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 0301 	and.w	r3, r3, #1
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d044      	beq.n	8005f9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d107      	bne.n	8005f2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f1a:	4b47      	ldr	r3, [pc, #284]	; (8006038 <HAL_RCC_ClockConfig+0x1bc>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d119      	bne.n	8005f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e07f      	b.n	800602a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d003      	beq.n	8005f3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f36:	2b03      	cmp	r3, #3
 8005f38:	d107      	bne.n	8005f4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f3a:	4b3f      	ldr	r3, [pc, #252]	; (8006038 <HAL_RCC_ClockConfig+0x1bc>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d109      	bne.n	8005f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e06f      	b.n	800602a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f4a:	4b3b      	ldr	r3, [pc, #236]	; (8006038 <HAL_RCC_ClockConfig+0x1bc>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0302 	and.w	r3, r3, #2
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d101      	bne.n	8005f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e067      	b.n	800602a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f5a:	4b37      	ldr	r3, [pc, #220]	; (8006038 <HAL_RCC_ClockConfig+0x1bc>)
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	f023 0203 	bic.w	r2, r3, #3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	4934      	ldr	r1, [pc, #208]	; (8006038 <HAL_RCC_ClockConfig+0x1bc>)
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f6c:	f7fd fc70 	bl	8003850 <HAL_GetTick>
 8005f70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f72:	e00a      	b.n	8005f8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f74:	f7fd fc6c 	bl	8003850 <HAL_GetTick>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d901      	bls.n	8005f8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e04f      	b.n	800602a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f8a:	4b2b      	ldr	r3, [pc, #172]	; (8006038 <HAL_RCC_ClockConfig+0x1bc>)
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	f003 020c 	and.w	r2, r3, #12
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d1eb      	bne.n	8005f74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f9c:	4b25      	ldr	r3, [pc, #148]	; (8006034 <HAL_RCC_ClockConfig+0x1b8>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 030f 	and.w	r3, r3, #15
 8005fa4:	683a      	ldr	r2, [r7, #0]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d20c      	bcs.n	8005fc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005faa:	4b22      	ldr	r3, [pc, #136]	; (8006034 <HAL_RCC_ClockConfig+0x1b8>)
 8005fac:	683a      	ldr	r2, [r7, #0]
 8005fae:	b2d2      	uxtb	r2, r2
 8005fb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fb2:	4b20      	ldr	r3, [pc, #128]	; (8006034 <HAL_RCC_ClockConfig+0x1b8>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 030f 	and.w	r3, r3, #15
 8005fba:	683a      	ldr	r2, [r7, #0]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d001      	beq.n	8005fc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e032      	b.n	800602a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 0304 	and.w	r3, r3, #4
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d008      	beq.n	8005fe2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005fd0:	4b19      	ldr	r3, [pc, #100]	; (8006038 <HAL_RCC_ClockConfig+0x1bc>)
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	4916      	ldr	r1, [pc, #88]	; (8006038 <HAL_RCC_ClockConfig+0x1bc>)
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0308 	and.w	r3, r3, #8
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d009      	beq.n	8006002 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005fee:	4b12      	ldr	r3, [pc, #72]	; (8006038 <HAL_RCC_ClockConfig+0x1bc>)
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	00db      	lsls	r3, r3, #3
 8005ffc:	490e      	ldr	r1, [pc, #56]	; (8006038 <HAL_RCC_ClockConfig+0x1bc>)
 8005ffe:	4313      	orrs	r3, r2
 8006000:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006002:	f000 f821 	bl	8006048 <HAL_RCC_GetSysClockFreq>
 8006006:	4602      	mov	r2, r0
 8006008:	4b0b      	ldr	r3, [pc, #44]	; (8006038 <HAL_RCC_ClockConfig+0x1bc>)
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	091b      	lsrs	r3, r3, #4
 800600e:	f003 030f 	and.w	r3, r3, #15
 8006012:	490a      	ldr	r1, [pc, #40]	; (800603c <HAL_RCC_ClockConfig+0x1c0>)
 8006014:	5ccb      	ldrb	r3, [r1, r3]
 8006016:	fa22 f303 	lsr.w	r3, r2, r3
 800601a:	4a09      	ldr	r2, [pc, #36]	; (8006040 <HAL_RCC_ClockConfig+0x1c4>)
 800601c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800601e:	4b09      	ldr	r3, [pc, #36]	; (8006044 <HAL_RCC_ClockConfig+0x1c8>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4618      	mov	r0, r3
 8006024:	f7fd fbd0 	bl	80037c8 <HAL_InitTick>

  return HAL_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3710      	adds	r7, #16
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	40023c00 	.word	0x40023c00
 8006038:	40023800 	.word	0x40023800
 800603c:	0800bd30 	.word	0x0800bd30
 8006040:	20000000 	.word	0x20000000
 8006044:	20000004 	.word	0x20000004

08006048 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006048:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800604c:	b094      	sub	sp, #80	; 0x50
 800604e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006050:	2300      	movs	r3, #0
 8006052:	647b      	str	r3, [r7, #68]	; 0x44
 8006054:	2300      	movs	r3, #0
 8006056:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006058:	2300      	movs	r3, #0
 800605a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800605c:	2300      	movs	r3, #0
 800605e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006060:	4b79      	ldr	r3, [pc, #484]	; (8006248 <HAL_RCC_GetSysClockFreq+0x200>)
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	f003 030c 	and.w	r3, r3, #12
 8006068:	2b08      	cmp	r3, #8
 800606a:	d00d      	beq.n	8006088 <HAL_RCC_GetSysClockFreq+0x40>
 800606c:	2b08      	cmp	r3, #8
 800606e:	f200 80e1 	bhi.w	8006234 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006072:	2b00      	cmp	r3, #0
 8006074:	d002      	beq.n	800607c <HAL_RCC_GetSysClockFreq+0x34>
 8006076:	2b04      	cmp	r3, #4
 8006078:	d003      	beq.n	8006082 <HAL_RCC_GetSysClockFreq+0x3a>
 800607a:	e0db      	b.n	8006234 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800607c:	4b73      	ldr	r3, [pc, #460]	; (800624c <HAL_RCC_GetSysClockFreq+0x204>)
 800607e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006080:	e0db      	b.n	800623a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006082:	4b73      	ldr	r3, [pc, #460]	; (8006250 <HAL_RCC_GetSysClockFreq+0x208>)
 8006084:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006086:	e0d8      	b.n	800623a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006088:	4b6f      	ldr	r3, [pc, #444]	; (8006248 <HAL_RCC_GetSysClockFreq+0x200>)
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006090:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006092:	4b6d      	ldr	r3, [pc, #436]	; (8006248 <HAL_RCC_GetSysClockFreq+0x200>)
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800609a:	2b00      	cmp	r3, #0
 800609c:	d063      	beq.n	8006166 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800609e:	4b6a      	ldr	r3, [pc, #424]	; (8006248 <HAL_RCC_GetSysClockFreq+0x200>)
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	099b      	lsrs	r3, r3, #6
 80060a4:	2200      	movs	r2, #0
 80060a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80060a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80060aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060b0:	633b      	str	r3, [r7, #48]	; 0x30
 80060b2:	2300      	movs	r3, #0
 80060b4:	637b      	str	r3, [r7, #52]	; 0x34
 80060b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80060ba:	4622      	mov	r2, r4
 80060bc:	462b      	mov	r3, r5
 80060be:	f04f 0000 	mov.w	r0, #0
 80060c2:	f04f 0100 	mov.w	r1, #0
 80060c6:	0159      	lsls	r1, r3, #5
 80060c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060cc:	0150      	lsls	r0, r2, #5
 80060ce:	4602      	mov	r2, r0
 80060d0:	460b      	mov	r3, r1
 80060d2:	4621      	mov	r1, r4
 80060d4:	1a51      	subs	r1, r2, r1
 80060d6:	6139      	str	r1, [r7, #16]
 80060d8:	4629      	mov	r1, r5
 80060da:	eb63 0301 	sbc.w	r3, r3, r1
 80060de:	617b      	str	r3, [r7, #20]
 80060e0:	f04f 0200 	mov.w	r2, #0
 80060e4:	f04f 0300 	mov.w	r3, #0
 80060e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80060ec:	4659      	mov	r1, fp
 80060ee:	018b      	lsls	r3, r1, #6
 80060f0:	4651      	mov	r1, sl
 80060f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80060f6:	4651      	mov	r1, sl
 80060f8:	018a      	lsls	r2, r1, #6
 80060fa:	4651      	mov	r1, sl
 80060fc:	ebb2 0801 	subs.w	r8, r2, r1
 8006100:	4659      	mov	r1, fp
 8006102:	eb63 0901 	sbc.w	r9, r3, r1
 8006106:	f04f 0200 	mov.w	r2, #0
 800610a:	f04f 0300 	mov.w	r3, #0
 800610e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006112:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006116:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800611a:	4690      	mov	r8, r2
 800611c:	4699      	mov	r9, r3
 800611e:	4623      	mov	r3, r4
 8006120:	eb18 0303 	adds.w	r3, r8, r3
 8006124:	60bb      	str	r3, [r7, #8]
 8006126:	462b      	mov	r3, r5
 8006128:	eb49 0303 	adc.w	r3, r9, r3
 800612c:	60fb      	str	r3, [r7, #12]
 800612e:	f04f 0200 	mov.w	r2, #0
 8006132:	f04f 0300 	mov.w	r3, #0
 8006136:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800613a:	4629      	mov	r1, r5
 800613c:	024b      	lsls	r3, r1, #9
 800613e:	4621      	mov	r1, r4
 8006140:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006144:	4621      	mov	r1, r4
 8006146:	024a      	lsls	r2, r1, #9
 8006148:	4610      	mov	r0, r2
 800614a:	4619      	mov	r1, r3
 800614c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800614e:	2200      	movs	r2, #0
 8006150:	62bb      	str	r3, [r7, #40]	; 0x28
 8006152:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006154:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006158:	f7fa fda6 	bl	8000ca8 <__aeabi_uldivmod>
 800615c:	4602      	mov	r2, r0
 800615e:	460b      	mov	r3, r1
 8006160:	4613      	mov	r3, r2
 8006162:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006164:	e058      	b.n	8006218 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006166:	4b38      	ldr	r3, [pc, #224]	; (8006248 <HAL_RCC_GetSysClockFreq+0x200>)
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	099b      	lsrs	r3, r3, #6
 800616c:	2200      	movs	r2, #0
 800616e:	4618      	mov	r0, r3
 8006170:	4611      	mov	r1, r2
 8006172:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006176:	623b      	str	r3, [r7, #32]
 8006178:	2300      	movs	r3, #0
 800617a:	627b      	str	r3, [r7, #36]	; 0x24
 800617c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006180:	4642      	mov	r2, r8
 8006182:	464b      	mov	r3, r9
 8006184:	f04f 0000 	mov.w	r0, #0
 8006188:	f04f 0100 	mov.w	r1, #0
 800618c:	0159      	lsls	r1, r3, #5
 800618e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006192:	0150      	lsls	r0, r2, #5
 8006194:	4602      	mov	r2, r0
 8006196:	460b      	mov	r3, r1
 8006198:	4641      	mov	r1, r8
 800619a:	ebb2 0a01 	subs.w	sl, r2, r1
 800619e:	4649      	mov	r1, r9
 80061a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80061a4:	f04f 0200 	mov.w	r2, #0
 80061a8:	f04f 0300 	mov.w	r3, #0
 80061ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80061b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80061b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80061b8:	ebb2 040a 	subs.w	r4, r2, sl
 80061bc:	eb63 050b 	sbc.w	r5, r3, fp
 80061c0:	f04f 0200 	mov.w	r2, #0
 80061c4:	f04f 0300 	mov.w	r3, #0
 80061c8:	00eb      	lsls	r3, r5, #3
 80061ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80061ce:	00e2      	lsls	r2, r4, #3
 80061d0:	4614      	mov	r4, r2
 80061d2:	461d      	mov	r5, r3
 80061d4:	4643      	mov	r3, r8
 80061d6:	18e3      	adds	r3, r4, r3
 80061d8:	603b      	str	r3, [r7, #0]
 80061da:	464b      	mov	r3, r9
 80061dc:	eb45 0303 	adc.w	r3, r5, r3
 80061e0:	607b      	str	r3, [r7, #4]
 80061e2:	f04f 0200 	mov.w	r2, #0
 80061e6:	f04f 0300 	mov.w	r3, #0
 80061ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80061ee:	4629      	mov	r1, r5
 80061f0:	028b      	lsls	r3, r1, #10
 80061f2:	4621      	mov	r1, r4
 80061f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80061f8:	4621      	mov	r1, r4
 80061fa:	028a      	lsls	r2, r1, #10
 80061fc:	4610      	mov	r0, r2
 80061fe:	4619      	mov	r1, r3
 8006200:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006202:	2200      	movs	r2, #0
 8006204:	61bb      	str	r3, [r7, #24]
 8006206:	61fa      	str	r2, [r7, #28]
 8006208:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800620c:	f7fa fd4c 	bl	8000ca8 <__aeabi_uldivmod>
 8006210:	4602      	mov	r2, r0
 8006212:	460b      	mov	r3, r1
 8006214:	4613      	mov	r3, r2
 8006216:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006218:	4b0b      	ldr	r3, [pc, #44]	; (8006248 <HAL_RCC_GetSysClockFreq+0x200>)
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	0c1b      	lsrs	r3, r3, #16
 800621e:	f003 0303 	and.w	r3, r3, #3
 8006222:	3301      	adds	r3, #1
 8006224:	005b      	lsls	r3, r3, #1
 8006226:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006228:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800622a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800622c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006230:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006232:	e002      	b.n	800623a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006234:	4b05      	ldr	r3, [pc, #20]	; (800624c <HAL_RCC_GetSysClockFreq+0x204>)
 8006236:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006238:	bf00      	nop
    }
  }
  return sysclockfreq;
 800623a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800623c:	4618      	mov	r0, r3
 800623e:	3750      	adds	r7, #80	; 0x50
 8006240:	46bd      	mov	sp, r7
 8006242:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006246:	bf00      	nop
 8006248:	40023800 	.word	0x40023800
 800624c:	00f42400 	.word	0x00f42400
 8006250:	007a1200 	.word	0x007a1200

08006254 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006254:	b480      	push	{r7}
 8006256:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006258:	4b03      	ldr	r3, [pc, #12]	; (8006268 <HAL_RCC_GetHCLKFreq+0x14>)
 800625a:	681b      	ldr	r3, [r3, #0]
}
 800625c:	4618      	mov	r0, r3
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	20000000 	.word	0x20000000

0800626c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006270:	f7ff fff0 	bl	8006254 <HAL_RCC_GetHCLKFreq>
 8006274:	4602      	mov	r2, r0
 8006276:	4b05      	ldr	r3, [pc, #20]	; (800628c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	0a9b      	lsrs	r3, r3, #10
 800627c:	f003 0307 	and.w	r3, r3, #7
 8006280:	4903      	ldr	r1, [pc, #12]	; (8006290 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006282:	5ccb      	ldrb	r3, [r1, r3]
 8006284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006288:	4618      	mov	r0, r3
 800628a:	bd80      	pop	{r7, pc}
 800628c:	40023800 	.word	0x40023800
 8006290:	0800bd40 	.word	0x0800bd40

08006294 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006298:	f7ff ffdc 	bl	8006254 <HAL_RCC_GetHCLKFreq>
 800629c:	4602      	mov	r2, r0
 800629e:	4b05      	ldr	r3, [pc, #20]	; (80062b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	0b5b      	lsrs	r3, r3, #13
 80062a4:	f003 0307 	and.w	r3, r3, #7
 80062a8:	4903      	ldr	r1, [pc, #12]	; (80062b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062aa:	5ccb      	ldrb	r3, [r1, r3]
 80062ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	40023800 	.word	0x40023800
 80062b8:	0800bd40 	.word	0x0800bd40

080062bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b082      	sub	sp, #8
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d101      	bne.n	80062ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e041      	b.n	8006352 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d106      	bne.n	80062e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f7fc fbc8 	bl	8002a78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2202      	movs	r2, #2
 80062ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	3304      	adds	r3, #4
 80062f8:	4619      	mov	r1, r3
 80062fa:	4610      	mov	r0, r2
 80062fc:	f000 ff0a 	bl	8007114 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3708      	adds	r7, #8
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
	...

0800635c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800636a:	b2db      	uxtb	r3, r3
 800636c:	2b01      	cmp	r3, #1
 800636e:	d001      	beq.n	8006374 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	e046      	b.n	8006402 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2202      	movs	r2, #2
 8006378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a23      	ldr	r2, [pc, #140]	; (8006410 <HAL_TIM_Base_Start+0xb4>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d022      	beq.n	80063cc <HAL_TIM_Base_Start+0x70>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800638e:	d01d      	beq.n	80063cc <HAL_TIM_Base_Start+0x70>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a1f      	ldr	r2, [pc, #124]	; (8006414 <HAL_TIM_Base_Start+0xb8>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d018      	beq.n	80063cc <HAL_TIM_Base_Start+0x70>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a1e      	ldr	r2, [pc, #120]	; (8006418 <HAL_TIM_Base_Start+0xbc>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d013      	beq.n	80063cc <HAL_TIM_Base_Start+0x70>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a1c      	ldr	r2, [pc, #112]	; (800641c <HAL_TIM_Base_Start+0xc0>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d00e      	beq.n	80063cc <HAL_TIM_Base_Start+0x70>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a1b      	ldr	r2, [pc, #108]	; (8006420 <HAL_TIM_Base_Start+0xc4>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d009      	beq.n	80063cc <HAL_TIM_Base_Start+0x70>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a19      	ldr	r2, [pc, #100]	; (8006424 <HAL_TIM_Base_Start+0xc8>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d004      	beq.n	80063cc <HAL_TIM_Base_Start+0x70>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a18      	ldr	r2, [pc, #96]	; (8006428 <HAL_TIM_Base_Start+0xcc>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d111      	bne.n	80063f0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f003 0307 	and.w	r3, r3, #7
 80063d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2b06      	cmp	r3, #6
 80063dc:	d010      	beq.n	8006400 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f042 0201 	orr.w	r2, r2, #1
 80063ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063ee:	e007      	b.n	8006400 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f042 0201 	orr.w	r2, r2, #1
 80063fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3714      	adds	r7, #20
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
 800640e:	bf00      	nop
 8006410:	40010000 	.word	0x40010000
 8006414:	40000400 	.word	0x40000400
 8006418:	40000800 	.word	0x40000800
 800641c:	40000c00 	.word	0x40000c00
 8006420:	40010400 	.word	0x40010400
 8006424:	40014000 	.word	0x40014000
 8006428:	40001800 	.word	0x40001800

0800642c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800643a:	b2db      	uxtb	r3, r3
 800643c:	2b01      	cmp	r3, #1
 800643e:	d001      	beq.n	8006444 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	e04e      	b.n	80064e2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2202      	movs	r2, #2
 8006448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	68da      	ldr	r2, [r3, #12]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f042 0201 	orr.w	r2, r2, #1
 800645a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a23      	ldr	r2, [pc, #140]	; (80064f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d022      	beq.n	80064ac <HAL_TIM_Base_Start_IT+0x80>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800646e:	d01d      	beq.n	80064ac <HAL_TIM_Base_Start_IT+0x80>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a1f      	ldr	r2, [pc, #124]	; (80064f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d018      	beq.n	80064ac <HAL_TIM_Base_Start_IT+0x80>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a1e      	ldr	r2, [pc, #120]	; (80064f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d013      	beq.n	80064ac <HAL_TIM_Base_Start_IT+0x80>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a1c      	ldr	r2, [pc, #112]	; (80064fc <HAL_TIM_Base_Start_IT+0xd0>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d00e      	beq.n	80064ac <HAL_TIM_Base_Start_IT+0x80>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a1b      	ldr	r2, [pc, #108]	; (8006500 <HAL_TIM_Base_Start_IT+0xd4>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d009      	beq.n	80064ac <HAL_TIM_Base_Start_IT+0x80>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a19      	ldr	r2, [pc, #100]	; (8006504 <HAL_TIM_Base_Start_IT+0xd8>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d004      	beq.n	80064ac <HAL_TIM_Base_Start_IT+0x80>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a18      	ldr	r2, [pc, #96]	; (8006508 <HAL_TIM_Base_Start_IT+0xdc>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d111      	bne.n	80064d0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	f003 0307 	and.w	r3, r3, #7
 80064b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2b06      	cmp	r3, #6
 80064bc:	d010      	beq.n	80064e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f042 0201 	orr.w	r2, r2, #1
 80064cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064ce:	e007      	b.n	80064e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f042 0201 	orr.w	r2, r2, #1
 80064de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3714      	adds	r7, #20
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	40010000 	.word	0x40010000
 80064f4:	40000400 	.word	0x40000400
 80064f8:	40000800 	.word	0x40000800
 80064fc:	40000c00 	.word	0x40000c00
 8006500:	40010400 	.word	0x40010400
 8006504:	40014000 	.word	0x40014000
 8006508:	40001800 	.word	0x40001800

0800650c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d101      	bne.n	800651e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e041      	b.n	80065a2 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006524:	b2db      	uxtb	r3, r3
 8006526:	2b00      	cmp	r3, #0
 8006528:	d106      	bne.n	8006538 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 f839 	bl	80065aa <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2202      	movs	r2, #2
 800653c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	3304      	adds	r3, #4
 8006548:	4619      	mov	r1, r3
 800654a:	4610      	mov	r0, r2
 800654c:	f000 fde2 	bl	8007114 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3708      	adds	r7, #8
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}

080065aa <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80065aa:	b480      	push	{r7}
 80065ac:	b083      	sub	sp, #12
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80065b2:	bf00      	nop
 80065b4:	370c      	adds	r7, #12
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr

080065be <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80065be:	b580      	push	{r7, lr}
 80065c0:	b082      	sub	sp, #8
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d101      	bne.n	80065d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e041      	b.n	8006654 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d106      	bne.n	80065ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 f839 	bl	800665c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2202      	movs	r2, #2
 80065ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	3304      	adds	r3, #4
 80065fa:	4619      	mov	r1, r3
 80065fc:	4610      	mov	r0, r2
 80065fe:	f000 fd89 	bl	8007114 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2201      	movs	r2, #1
 8006606:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2201      	movs	r2, #1
 800660e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2201      	movs	r2, #1
 8006616:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2201      	movs	r2, #1
 800661e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2201      	movs	r2, #1
 8006626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2201      	movs	r2, #1
 800662e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2201      	movs	r2, #1
 8006636:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2201      	movs	r2, #1
 800663e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2201      	movs	r2, #1
 8006646:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2201      	movs	r2, #1
 800664e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006652:	2300      	movs	r3, #0
}
 8006654:	4618      	mov	r0, r3
 8006656:	3708      	adds	r7, #8
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006664:	bf00      	nop
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800667a:	2300      	movs	r3, #0
 800667c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d109      	bne.n	8006698 <HAL_TIM_PWM_Start_IT+0x28>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800668a:	b2db      	uxtb	r3, r3
 800668c:	2b01      	cmp	r3, #1
 800668e:	bf14      	ite	ne
 8006690:	2301      	movne	r3, #1
 8006692:	2300      	moveq	r3, #0
 8006694:	b2db      	uxtb	r3, r3
 8006696:	e022      	b.n	80066de <HAL_TIM_PWM_Start_IT+0x6e>
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	2b04      	cmp	r3, #4
 800669c:	d109      	bne.n	80066b2 <HAL_TIM_PWM_Start_IT+0x42>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	bf14      	ite	ne
 80066aa:	2301      	movne	r3, #1
 80066ac:	2300      	moveq	r3, #0
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	e015      	b.n	80066de <HAL_TIM_PWM_Start_IT+0x6e>
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	2b08      	cmp	r3, #8
 80066b6:	d109      	bne.n	80066cc <HAL_TIM_PWM_Start_IT+0x5c>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	bf14      	ite	ne
 80066c4:	2301      	movne	r3, #1
 80066c6:	2300      	moveq	r3, #0
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	e008      	b.n	80066de <HAL_TIM_PWM_Start_IT+0x6e>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	bf14      	ite	ne
 80066d8:	2301      	movne	r3, #1
 80066da:	2300      	moveq	r3, #0
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d001      	beq.n	80066e6 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e0c7      	b.n	8006876 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d104      	bne.n	80066f6 <HAL_TIM_PWM_Start_IT+0x86>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2202      	movs	r2, #2
 80066f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066f4:	e013      	b.n	800671e <HAL_TIM_PWM_Start_IT+0xae>
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	2b04      	cmp	r3, #4
 80066fa:	d104      	bne.n	8006706 <HAL_TIM_PWM_Start_IT+0x96>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2202      	movs	r2, #2
 8006700:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006704:	e00b      	b.n	800671e <HAL_TIM_PWM_Start_IT+0xae>
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	2b08      	cmp	r3, #8
 800670a:	d104      	bne.n	8006716 <HAL_TIM_PWM_Start_IT+0xa6>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2202      	movs	r2, #2
 8006710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006714:	e003      	b.n	800671e <HAL_TIM_PWM_Start_IT+0xae>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2202      	movs	r2, #2
 800671a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	2b0c      	cmp	r3, #12
 8006722:	d841      	bhi.n	80067a8 <HAL_TIM_PWM_Start_IT+0x138>
 8006724:	a201      	add	r2, pc, #4	; (adr r2, 800672c <HAL_TIM_PWM_Start_IT+0xbc>)
 8006726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800672a:	bf00      	nop
 800672c:	08006761 	.word	0x08006761
 8006730:	080067a9 	.word	0x080067a9
 8006734:	080067a9 	.word	0x080067a9
 8006738:	080067a9 	.word	0x080067a9
 800673c:	08006773 	.word	0x08006773
 8006740:	080067a9 	.word	0x080067a9
 8006744:	080067a9 	.word	0x080067a9
 8006748:	080067a9 	.word	0x080067a9
 800674c:	08006785 	.word	0x08006785
 8006750:	080067a9 	.word	0x080067a9
 8006754:	080067a9 	.word	0x080067a9
 8006758:	080067a9 	.word	0x080067a9
 800675c:	08006797 	.word	0x08006797
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68da      	ldr	r2, [r3, #12]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f042 0202 	orr.w	r2, r2, #2
 800676e:	60da      	str	r2, [r3, #12]
      break;
 8006770:	e01d      	b.n	80067ae <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	68da      	ldr	r2, [r3, #12]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f042 0204 	orr.w	r2, r2, #4
 8006780:	60da      	str	r2, [r3, #12]
      break;
 8006782:	e014      	b.n	80067ae <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68da      	ldr	r2, [r3, #12]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f042 0208 	orr.w	r2, r2, #8
 8006792:	60da      	str	r2, [r3, #12]
      break;
 8006794:	e00b      	b.n	80067ae <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	68da      	ldr	r2, [r3, #12]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f042 0210 	orr.w	r2, r2, #16
 80067a4:	60da      	str	r2, [r3, #12]
      break;
 80067a6:	e002      	b.n	80067ae <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	73fb      	strb	r3, [r7, #15]
      break;
 80067ac:	bf00      	nop
  }

  if (status == HAL_OK)
 80067ae:	7bfb      	ldrb	r3, [r7, #15]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d15f      	bne.n	8006874 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2201      	movs	r2, #1
 80067ba:	6839      	ldr	r1, [r7, #0]
 80067bc:	4618      	mov	r0, r3
 80067be:	f000 ff9f 	bl	8007700 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a2e      	ldr	r2, [pc, #184]	; (8006880 <HAL_TIM_PWM_Start_IT+0x210>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d004      	beq.n	80067d6 <HAL_TIM_PWM_Start_IT+0x166>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a2c      	ldr	r2, [pc, #176]	; (8006884 <HAL_TIM_PWM_Start_IT+0x214>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d101      	bne.n	80067da <HAL_TIM_PWM_Start_IT+0x16a>
 80067d6:	2301      	movs	r3, #1
 80067d8:	e000      	b.n	80067dc <HAL_TIM_PWM_Start_IT+0x16c>
 80067da:	2300      	movs	r3, #0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d007      	beq.n	80067f0 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80067ee:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a22      	ldr	r2, [pc, #136]	; (8006880 <HAL_TIM_PWM_Start_IT+0x210>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d022      	beq.n	8006840 <HAL_TIM_PWM_Start_IT+0x1d0>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006802:	d01d      	beq.n	8006840 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a1f      	ldr	r2, [pc, #124]	; (8006888 <HAL_TIM_PWM_Start_IT+0x218>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d018      	beq.n	8006840 <HAL_TIM_PWM_Start_IT+0x1d0>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a1e      	ldr	r2, [pc, #120]	; (800688c <HAL_TIM_PWM_Start_IT+0x21c>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d013      	beq.n	8006840 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a1c      	ldr	r2, [pc, #112]	; (8006890 <HAL_TIM_PWM_Start_IT+0x220>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d00e      	beq.n	8006840 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a17      	ldr	r2, [pc, #92]	; (8006884 <HAL_TIM_PWM_Start_IT+0x214>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d009      	beq.n	8006840 <HAL_TIM_PWM_Start_IT+0x1d0>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a18      	ldr	r2, [pc, #96]	; (8006894 <HAL_TIM_PWM_Start_IT+0x224>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d004      	beq.n	8006840 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a17      	ldr	r2, [pc, #92]	; (8006898 <HAL_TIM_PWM_Start_IT+0x228>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d111      	bne.n	8006864 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	f003 0307 	and.w	r3, r3, #7
 800684a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	2b06      	cmp	r3, #6
 8006850:	d010      	beq.n	8006874 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f042 0201 	orr.w	r2, r2, #1
 8006860:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006862:	e007      	b.n	8006874 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f042 0201 	orr.w	r2, r2, #1
 8006872:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006874:	7bfb      	ldrb	r3, [r7, #15]
}
 8006876:	4618      	mov	r0, r3
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	40010000 	.word	0x40010000
 8006884:	40010400 	.word	0x40010400
 8006888:	40000400 	.word	0x40000400
 800688c:	40000800 	.word	0x40000800
 8006890:	40000c00 	.word	0x40000c00
 8006894:	40014000 	.word	0x40014000
 8006898:	40001800 	.word	0x40001800

0800689c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b086      	sub	sp, #24
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d101      	bne.n	80068b0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e097      	b.n	80069e0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d106      	bne.n	80068ca <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f7fc f9b3 	bl	8002c30 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2202      	movs	r2, #2
 80068ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	6812      	ldr	r2, [r2, #0]
 80068dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068e0:	f023 0307 	bic.w	r3, r3, #7
 80068e4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	3304      	adds	r3, #4
 80068ee:	4619      	mov	r1, r3
 80068f0:	4610      	mov	r0, r2
 80068f2:	f000 fc0f 	bl	8007114 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	699b      	ldr	r3, [r3, #24]
 8006904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	6a1b      	ldr	r3, [r3, #32]
 800690c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	697a      	ldr	r2, [r7, #20]
 8006914:	4313      	orrs	r3, r2
 8006916:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800691e:	f023 0303 	bic.w	r3, r3, #3
 8006922:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	689a      	ldr	r2, [r3, #8]
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	699b      	ldr	r3, [r3, #24]
 800692c:	021b      	lsls	r3, r3, #8
 800692e:	4313      	orrs	r3, r2
 8006930:	693a      	ldr	r2, [r7, #16]
 8006932:	4313      	orrs	r3, r2
 8006934:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800693c:	f023 030c 	bic.w	r3, r3, #12
 8006940:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006948:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800694c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	68da      	ldr	r2, [r3, #12]
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	69db      	ldr	r3, [r3, #28]
 8006956:	021b      	lsls	r3, r3, #8
 8006958:	4313      	orrs	r3, r2
 800695a:	693a      	ldr	r2, [r7, #16]
 800695c:	4313      	orrs	r3, r2
 800695e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	011a      	lsls	r2, r3, #4
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	6a1b      	ldr	r3, [r3, #32]
 800696a:	031b      	lsls	r3, r3, #12
 800696c:	4313      	orrs	r3, r2
 800696e:	693a      	ldr	r2, [r7, #16]
 8006970:	4313      	orrs	r3, r2
 8006972:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800697a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006982:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	685a      	ldr	r2, [r3, #4]
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	695b      	ldr	r3, [r3, #20]
 800698c:	011b      	lsls	r3, r3, #4
 800698e:	4313      	orrs	r3, r2
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	4313      	orrs	r3, r2
 8006994:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	697a      	ldr	r2, [r7, #20]
 800699c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	693a      	ldr	r2, [r7, #16]
 80069a4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2201      	movs	r2, #1
 80069b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2201      	movs	r2, #1
 80069ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2201      	movs	r2, #1
 80069c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2201      	movs	r2, #1
 80069ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2201      	movs	r2, #1
 80069d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2201      	movs	r2, #1
 80069da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3718      	adds	r7, #24
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069f8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006a00:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006a08:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006a10:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d110      	bne.n	8006a3a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a18:	7bfb      	ldrb	r3, [r7, #15]
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d102      	bne.n	8006a24 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006a1e:	7b7b      	ldrb	r3, [r7, #13]
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d001      	beq.n	8006a28 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e069      	b.n	8006afc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2202      	movs	r2, #2
 8006a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2202      	movs	r2, #2
 8006a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a38:	e031      	b.n	8006a9e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	2b04      	cmp	r3, #4
 8006a3e:	d110      	bne.n	8006a62 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a40:	7bbb      	ldrb	r3, [r7, #14]
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d102      	bne.n	8006a4c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006a46:	7b3b      	ldrb	r3, [r7, #12]
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d001      	beq.n	8006a50 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e055      	b.n	8006afc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2202      	movs	r2, #2
 8006a54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2202      	movs	r2, #2
 8006a5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a60:	e01d      	b.n	8006a9e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a62:	7bfb      	ldrb	r3, [r7, #15]
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d108      	bne.n	8006a7a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a68:	7bbb      	ldrb	r3, [r7, #14]
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d105      	bne.n	8006a7a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a6e:	7b7b      	ldrb	r3, [r7, #13]
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d102      	bne.n	8006a7a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006a74:	7b3b      	ldrb	r3, [r7, #12]
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d001      	beq.n	8006a7e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e03e      	b.n	8006afc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2202      	movs	r2, #2
 8006a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2202      	movs	r2, #2
 8006a8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2202      	movs	r2, #2
 8006a92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2202      	movs	r2, #2
 8006a9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d003      	beq.n	8006aac <HAL_TIM_Encoder_Start+0xc4>
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	2b04      	cmp	r3, #4
 8006aa8:	d008      	beq.n	8006abc <HAL_TIM_Encoder_Start+0xd4>
 8006aaa:	e00f      	b.n	8006acc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	2100      	movs	r1, #0
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f000 fe23 	bl	8007700 <TIM_CCxChannelCmd>
      break;
 8006aba:	e016      	b.n	8006aea <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	2104      	movs	r1, #4
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f000 fe1b 	bl	8007700 <TIM_CCxChannelCmd>
      break;
 8006aca:	e00e      	b.n	8006aea <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	2100      	movs	r1, #0
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f000 fe13 	bl	8007700 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	2104      	movs	r1, #4
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f000 fe0c 	bl	8007700 <TIM_CCxChannelCmd>
      break;
 8006ae8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f042 0201 	orr.w	r2, r2, #1
 8006af8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006afa:	2300      	movs	r3, #0
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3710      	adds	r7, #16
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	f003 0302 	and.w	r3, r3, #2
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d020      	beq.n	8006b68 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f003 0302 	and.w	r3, r3, #2
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d01b      	beq.n	8006b68 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f06f 0202 	mvn.w	r2, #2
 8006b38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	699b      	ldr	r3, [r3, #24]
 8006b46:	f003 0303 	and.w	r3, r3, #3
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d003      	beq.n	8006b56 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 fac1 	bl	80070d6 <HAL_TIM_IC_CaptureCallback>
 8006b54:	e005      	b.n	8006b62 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 fab3 	bl	80070c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 fac4 	bl	80070ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	f003 0304 	and.w	r3, r3, #4
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d020      	beq.n	8006bb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f003 0304 	and.w	r3, r3, #4
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d01b      	beq.n	8006bb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f06f 0204 	mvn.w	r2, #4
 8006b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2202      	movs	r2, #2
 8006b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d003      	beq.n	8006ba2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 fa9b 	bl	80070d6 <HAL_TIM_IC_CaptureCallback>
 8006ba0:	e005      	b.n	8006bae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 fa8d 	bl	80070c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 fa9e 	bl	80070ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	f003 0308 	and.w	r3, r3, #8
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d020      	beq.n	8006c00 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f003 0308 	and.w	r3, r3, #8
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d01b      	beq.n	8006c00 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f06f 0208 	mvn.w	r2, #8
 8006bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2204      	movs	r2, #4
 8006bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	69db      	ldr	r3, [r3, #28]
 8006bde:	f003 0303 	and.w	r3, r3, #3
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d003      	beq.n	8006bee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 fa75 	bl	80070d6 <HAL_TIM_IC_CaptureCallback>
 8006bec:	e005      	b.n	8006bfa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 fa67 	bl	80070c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 fa78 	bl	80070ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	f003 0310 	and.w	r3, r3, #16
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d020      	beq.n	8006c4c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f003 0310 	and.w	r3, r3, #16
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d01b      	beq.n	8006c4c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f06f 0210 	mvn.w	r2, #16
 8006c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2208      	movs	r2, #8
 8006c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	69db      	ldr	r3, [r3, #28]
 8006c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d003      	beq.n	8006c3a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 fa4f 	bl	80070d6 <HAL_TIM_IC_CaptureCallback>
 8006c38:	e005      	b.n	8006c46 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 fa41 	bl	80070c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 fa52 	bl	80070ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	f003 0301 	and.w	r3, r3, #1
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00c      	beq.n	8006c70 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f003 0301 	and.w	r3, r3, #1
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d007      	beq.n	8006c70 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f06f 0201 	mvn.w	r2, #1
 8006c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 fa1f 	bl	80070ae <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00c      	beq.n	8006c94 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d007      	beq.n	8006c94 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 fe34 	bl	80078fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00c      	beq.n	8006cb8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d007      	beq.n	8006cb8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 fa23 	bl	80070fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	f003 0320 	and.w	r3, r3, #32
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00c      	beq.n	8006cdc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f003 0320 	and.w	r3, r3, #32
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d007      	beq.n	8006cdc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f06f 0220 	mvn.w	r2, #32
 8006cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 fe06 	bl	80078e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006cdc:	bf00      	nop
 8006cde:	3710      	adds	r7, #16
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b086      	sub	sp, #24
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d101      	bne.n	8006d02 <HAL_TIM_OC_ConfigChannel+0x1e>
 8006cfe:	2302      	movs	r3, #2
 8006d00:	e048      	b.n	8006d94 <HAL_TIM_OC_ConfigChannel+0xb0>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2201      	movs	r2, #1
 8006d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2b0c      	cmp	r3, #12
 8006d0e:	d839      	bhi.n	8006d84 <HAL_TIM_OC_ConfigChannel+0xa0>
 8006d10:	a201      	add	r2, pc, #4	; (adr r2, 8006d18 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d16:	bf00      	nop
 8006d18:	08006d4d 	.word	0x08006d4d
 8006d1c:	08006d85 	.word	0x08006d85
 8006d20:	08006d85 	.word	0x08006d85
 8006d24:	08006d85 	.word	0x08006d85
 8006d28:	08006d5b 	.word	0x08006d5b
 8006d2c:	08006d85 	.word	0x08006d85
 8006d30:	08006d85 	.word	0x08006d85
 8006d34:	08006d85 	.word	0x08006d85
 8006d38:	08006d69 	.word	0x08006d69
 8006d3c:	08006d85 	.word	0x08006d85
 8006d40:	08006d85 	.word	0x08006d85
 8006d44:	08006d85 	.word	0x08006d85
 8006d48:	08006d77 	.word	0x08006d77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	68b9      	ldr	r1, [r7, #8]
 8006d52:	4618      	mov	r0, r3
 8006d54:	f000 fa8a 	bl	800726c <TIM_OC1_SetConfig>
      break;
 8006d58:	e017      	b.n	8006d8a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	68b9      	ldr	r1, [r7, #8]
 8006d60:	4618      	mov	r0, r3
 8006d62:	f000 faf3 	bl	800734c <TIM_OC2_SetConfig>
      break;
 8006d66:	e010      	b.n	8006d8a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68b9      	ldr	r1, [r7, #8]
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f000 fb62 	bl	8007438 <TIM_OC3_SetConfig>
      break;
 8006d74:	e009      	b.n	8006d8a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	68b9      	ldr	r1, [r7, #8]
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f000 fbcf 	bl	8007520 <TIM_OC4_SetConfig>
      break;
 8006d82:	e002      	b.n	8006d8a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	75fb      	strb	r3, [r7, #23]
      break;
 8006d88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3718      	adds	r7, #24
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b086      	sub	sp, #24
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006da8:	2300      	movs	r3, #0
 8006daa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d101      	bne.n	8006dba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006db6:	2302      	movs	r3, #2
 8006db8:	e0ae      	b.n	8006f18 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2b0c      	cmp	r3, #12
 8006dc6:	f200 809f 	bhi.w	8006f08 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006dca:	a201      	add	r2, pc, #4	; (adr r2, 8006dd0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd0:	08006e05 	.word	0x08006e05
 8006dd4:	08006f09 	.word	0x08006f09
 8006dd8:	08006f09 	.word	0x08006f09
 8006ddc:	08006f09 	.word	0x08006f09
 8006de0:	08006e45 	.word	0x08006e45
 8006de4:	08006f09 	.word	0x08006f09
 8006de8:	08006f09 	.word	0x08006f09
 8006dec:	08006f09 	.word	0x08006f09
 8006df0:	08006e87 	.word	0x08006e87
 8006df4:	08006f09 	.word	0x08006f09
 8006df8:	08006f09 	.word	0x08006f09
 8006dfc:	08006f09 	.word	0x08006f09
 8006e00:	08006ec7 	.word	0x08006ec7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68b9      	ldr	r1, [r7, #8]
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f000 fa2e 	bl	800726c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	699a      	ldr	r2, [r3, #24]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f042 0208 	orr.w	r2, r2, #8
 8006e1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	699a      	ldr	r2, [r3, #24]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f022 0204 	bic.w	r2, r2, #4
 8006e2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	6999      	ldr	r1, [r3, #24]
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	691a      	ldr	r2, [r3, #16]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	430a      	orrs	r2, r1
 8006e40:	619a      	str	r2, [r3, #24]
      break;
 8006e42:	e064      	b.n	8006f0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	68b9      	ldr	r1, [r7, #8]
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f000 fa7e 	bl	800734c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	699a      	ldr	r2, [r3, #24]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	699a      	ldr	r2, [r3, #24]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	6999      	ldr	r1, [r3, #24]
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	021a      	lsls	r2, r3, #8
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	430a      	orrs	r2, r1
 8006e82:	619a      	str	r2, [r3, #24]
      break;
 8006e84:	e043      	b.n	8006f0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	68b9      	ldr	r1, [r7, #8]
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f000 fad3 	bl	8007438 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	69da      	ldr	r2, [r3, #28]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f042 0208 	orr.w	r2, r2, #8
 8006ea0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	69da      	ldr	r2, [r3, #28]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f022 0204 	bic.w	r2, r2, #4
 8006eb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	69d9      	ldr	r1, [r3, #28]
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	691a      	ldr	r2, [r3, #16]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	430a      	orrs	r2, r1
 8006ec2:	61da      	str	r2, [r3, #28]
      break;
 8006ec4:	e023      	b.n	8006f0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68b9      	ldr	r1, [r7, #8]
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f000 fb27 	bl	8007520 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	69da      	ldr	r2, [r3, #28]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ee0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	69da      	ldr	r2, [r3, #28]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ef0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	69d9      	ldr	r1, [r3, #28]
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	691b      	ldr	r3, [r3, #16]
 8006efc:	021a      	lsls	r2, r3, #8
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	430a      	orrs	r2, r1
 8006f04:	61da      	str	r2, [r3, #28]
      break;
 8006f06:	e002      	b.n	8006f0e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	75fb      	strb	r3, [r7, #23]
      break;
 8006f0c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f16:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3718      	adds	r7, #24
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d101      	bne.n	8006f3c <HAL_TIM_ConfigClockSource+0x1c>
 8006f38:	2302      	movs	r3, #2
 8006f3a:	e0b4      	b.n	80070a6 <HAL_TIM_ConfigClockSource+0x186>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2202      	movs	r2, #2
 8006f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006f5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	68ba      	ldr	r2, [r7, #8]
 8006f6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f74:	d03e      	beq.n	8006ff4 <HAL_TIM_ConfigClockSource+0xd4>
 8006f76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f7a:	f200 8087 	bhi.w	800708c <HAL_TIM_ConfigClockSource+0x16c>
 8006f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f82:	f000 8086 	beq.w	8007092 <HAL_TIM_ConfigClockSource+0x172>
 8006f86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f8a:	d87f      	bhi.n	800708c <HAL_TIM_ConfigClockSource+0x16c>
 8006f8c:	2b70      	cmp	r3, #112	; 0x70
 8006f8e:	d01a      	beq.n	8006fc6 <HAL_TIM_ConfigClockSource+0xa6>
 8006f90:	2b70      	cmp	r3, #112	; 0x70
 8006f92:	d87b      	bhi.n	800708c <HAL_TIM_ConfigClockSource+0x16c>
 8006f94:	2b60      	cmp	r3, #96	; 0x60
 8006f96:	d050      	beq.n	800703a <HAL_TIM_ConfigClockSource+0x11a>
 8006f98:	2b60      	cmp	r3, #96	; 0x60
 8006f9a:	d877      	bhi.n	800708c <HAL_TIM_ConfigClockSource+0x16c>
 8006f9c:	2b50      	cmp	r3, #80	; 0x50
 8006f9e:	d03c      	beq.n	800701a <HAL_TIM_ConfigClockSource+0xfa>
 8006fa0:	2b50      	cmp	r3, #80	; 0x50
 8006fa2:	d873      	bhi.n	800708c <HAL_TIM_ConfigClockSource+0x16c>
 8006fa4:	2b40      	cmp	r3, #64	; 0x40
 8006fa6:	d058      	beq.n	800705a <HAL_TIM_ConfigClockSource+0x13a>
 8006fa8:	2b40      	cmp	r3, #64	; 0x40
 8006faa:	d86f      	bhi.n	800708c <HAL_TIM_ConfigClockSource+0x16c>
 8006fac:	2b30      	cmp	r3, #48	; 0x30
 8006fae:	d064      	beq.n	800707a <HAL_TIM_ConfigClockSource+0x15a>
 8006fb0:	2b30      	cmp	r3, #48	; 0x30
 8006fb2:	d86b      	bhi.n	800708c <HAL_TIM_ConfigClockSource+0x16c>
 8006fb4:	2b20      	cmp	r3, #32
 8006fb6:	d060      	beq.n	800707a <HAL_TIM_ConfigClockSource+0x15a>
 8006fb8:	2b20      	cmp	r3, #32
 8006fba:	d867      	bhi.n	800708c <HAL_TIM_ConfigClockSource+0x16c>
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d05c      	beq.n	800707a <HAL_TIM_ConfigClockSource+0x15a>
 8006fc0:	2b10      	cmp	r3, #16
 8006fc2:	d05a      	beq.n	800707a <HAL_TIM_ConfigClockSource+0x15a>
 8006fc4:	e062      	b.n	800708c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006fd6:	f000 fb73 	bl	80076c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006fe8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	68ba      	ldr	r2, [r7, #8]
 8006ff0:	609a      	str	r2, [r3, #8]
      break;
 8006ff2:	e04f      	b.n	8007094 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007004:	f000 fb5c 	bl	80076c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	689a      	ldr	r2, [r3, #8]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007016:	609a      	str	r2, [r3, #8]
      break;
 8007018:	e03c      	b.n	8007094 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007026:	461a      	mov	r2, r3
 8007028:	f000 fad0 	bl	80075cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2150      	movs	r1, #80	; 0x50
 8007032:	4618      	mov	r0, r3
 8007034:	f000 fb29 	bl	800768a <TIM_ITRx_SetConfig>
      break;
 8007038:	e02c      	b.n	8007094 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007046:	461a      	mov	r2, r3
 8007048:	f000 faef 	bl	800762a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2160      	movs	r1, #96	; 0x60
 8007052:	4618      	mov	r0, r3
 8007054:	f000 fb19 	bl	800768a <TIM_ITRx_SetConfig>
      break;
 8007058:	e01c      	b.n	8007094 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007066:	461a      	mov	r2, r3
 8007068:	f000 fab0 	bl	80075cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2140      	movs	r1, #64	; 0x40
 8007072:	4618      	mov	r0, r3
 8007074:	f000 fb09 	bl	800768a <TIM_ITRx_SetConfig>
      break;
 8007078:	e00c      	b.n	8007094 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4619      	mov	r1, r3
 8007084:	4610      	mov	r0, r2
 8007086:	f000 fb00 	bl	800768a <TIM_ITRx_SetConfig>
      break;
 800708a:	e003      	b.n	8007094 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	73fb      	strb	r3, [r7, #15]
      break;
 8007090:	e000      	b.n	8007094 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007092:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80070a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3710      	adds	r7, #16
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}

080070ae <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070ae:	b480      	push	{r7}
 80070b0:	b083      	sub	sp, #12
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80070b6:	bf00      	nop
 80070b8:	370c      	adds	r7, #12
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr

080070c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070c2:	b480      	push	{r7}
 80070c4:	b083      	sub	sp, #12
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80070ca:	bf00      	nop
 80070cc:	370c      	adds	r7, #12
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr

080070d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80070d6:	b480      	push	{r7}
 80070d8:	b083      	sub	sp, #12
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80070de:	bf00      	nop
 80070e0:	370c      	adds	r7, #12
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr

080070ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80070ea:	b480      	push	{r7}
 80070ec:	b083      	sub	sp, #12
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80070f2:	bf00      	nop
 80070f4:	370c      	adds	r7, #12
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr

080070fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070fe:	b480      	push	{r7}
 8007100:	b083      	sub	sp, #12
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007106:	bf00      	nop
 8007108:	370c      	adds	r7, #12
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
	...

08007114 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007114:	b480      	push	{r7}
 8007116:	b085      	sub	sp, #20
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a46      	ldr	r2, [pc, #280]	; (8007240 <TIM_Base_SetConfig+0x12c>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d013      	beq.n	8007154 <TIM_Base_SetConfig+0x40>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007132:	d00f      	beq.n	8007154 <TIM_Base_SetConfig+0x40>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a43      	ldr	r2, [pc, #268]	; (8007244 <TIM_Base_SetConfig+0x130>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d00b      	beq.n	8007154 <TIM_Base_SetConfig+0x40>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a42      	ldr	r2, [pc, #264]	; (8007248 <TIM_Base_SetConfig+0x134>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d007      	beq.n	8007154 <TIM_Base_SetConfig+0x40>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a41      	ldr	r2, [pc, #260]	; (800724c <TIM_Base_SetConfig+0x138>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d003      	beq.n	8007154 <TIM_Base_SetConfig+0x40>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a40      	ldr	r2, [pc, #256]	; (8007250 <TIM_Base_SetConfig+0x13c>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d108      	bne.n	8007166 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800715a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	4313      	orrs	r3, r2
 8007164:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4a35      	ldr	r2, [pc, #212]	; (8007240 <TIM_Base_SetConfig+0x12c>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d02b      	beq.n	80071c6 <TIM_Base_SetConfig+0xb2>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007174:	d027      	beq.n	80071c6 <TIM_Base_SetConfig+0xb2>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a32      	ldr	r2, [pc, #200]	; (8007244 <TIM_Base_SetConfig+0x130>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d023      	beq.n	80071c6 <TIM_Base_SetConfig+0xb2>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a31      	ldr	r2, [pc, #196]	; (8007248 <TIM_Base_SetConfig+0x134>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d01f      	beq.n	80071c6 <TIM_Base_SetConfig+0xb2>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4a30      	ldr	r2, [pc, #192]	; (800724c <TIM_Base_SetConfig+0x138>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d01b      	beq.n	80071c6 <TIM_Base_SetConfig+0xb2>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4a2f      	ldr	r2, [pc, #188]	; (8007250 <TIM_Base_SetConfig+0x13c>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d017      	beq.n	80071c6 <TIM_Base_SetConfig+0xb2>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4a2e      	ldr	r2, [pc, #184]	; (8007254 <TIM_Base_SetConfig+0x140>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d013      	beq.n	80071c6 <TIM_Base_SetConfig+0xb2>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4a2d      	ldr	r2, [pc, #180]	; (8007258 <TIM_Base_SetConfig+0x144>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d00f      	beq.n	80071c6 <TIM_Base_SetConfig+0xb2>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	4a2c      	ldr	r2, [pc, #176]	; (800725c <TIM_Base_SetConfig+0x148>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d00b      	beq.n	80071c6 <TIM_Base_SetConfig+0xb2>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	4a2b      	ldr	r2, [pc, #172]	; (8007260 <TIM_Base_SetConfig+0x14c>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d007      	beq.n	80071c6 <TIM_Base_SetConfig+0xb2>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4a2a      	ldr	r2, [pc, #168]	; (8007264 <TIM_Base_SetConfig+0x150>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d003      	beq.n	80071c6 <TIM_Base_SetConfig+0xb2>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	4a29      	ldr	r2, [pc, #164]	; (8007268 <TIM_Base_SetConfig+0x154>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d108      	bne.n	80071d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	68db      	ldr	r3, [r3, #12]
 80071d2:	68fa      	ldr	r2, [r7, #12]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	695b      	ldr	r3, [r3, #20]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	689a      	ldr	r2, [r3, #8]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	4a10      	ldr	r2, [pc, #64]	; (8007240 <TIM_Base_SetConfig+0x12c>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d003      	beq.n	800720c <TIM_Base_SetConfig+0xf8>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	4a12      	ldr	r2, [pc, #72]	; (8007250 <TIM_Base_SetConfig+0x13c>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d103      	bne.n	8007214 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	691a      	ldr	r2, [r3, #16]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	f003 0301 	and.w	r3, r3, #1
 8007222:	2b01      	cmp	r3, #1
 8007224:	d105      	bne.n	8007232 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	f023 0201 	bic.w	r2, r3, #1
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	611a      	str	r2, [r3, #16]
  }
}
 8007232:	bf00      	nop
 8007234:	3714      	adds	r7, #20
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	40010000 	.word	0x40010000
 8007244:	40000400 	.word	0x40000400
 8007248:	40000800 	.word	0x40000800
 800724c:	40000c00 	.word	0x40000c00
 8007250:	40010400 	.word	0x40010400
 8007254:	40014000 	.word	0x40014000
 8007258:	40014400 	.word	0x40014400
 800725c:	40014800 	.word	0x40014800
 8007260:	40001800 	.word	0x40001800
 8007264:	40001c00 	.word	0x40001c00
 8007268:	40002000 	.word	0x40002000

0800726c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800726c:	b480      	push	{r7}
 800726e:	b087      	sub	sp, #28
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a1b      	ldr	r3, [r3, #32]
 800727a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6a1b      	ldr	r3, [r3, #32]
 8007280:	f023 0201 	bic.w	r2, r3, #1
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	699b      	ldr	r3, [r3, #24]
 8007292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800729a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f023 0303 	bic.w	r3, r3, #3
 80072a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	f023 0302 	bic.w	r3, r3, #2
 80072b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	697a      	ldr	r2, [r7, #20]
 80072bc:	4313      	orrs	r3, r2
 80072be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	4a20      	ldr	r2, [pc, #128]	; (8007344 <TIM_OC1_SetConfig+0xd8>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d003      	beq.n	80072d0 <TIM_OC1_SetConfig+0x64>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4a1f      	ldr	r2, [pc, #124]	; (8007348 <TIM_OC1_SetConfig+0xdc>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d10c      	bne.n	80072ea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	f023 0308 	bic.w	r3, r3, #8
 80072d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	697a      	ldr	r2, [r7, #20]
 80072de:	4313      	orrs	r3, r2
 80072e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	f023 0304 	bic.w	r3, r3, #4
 80072e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4a15      	ldr	r2, [pc, #84]	; (8007344 <TIM_OC1_SetConfig+0xd8>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d003      	beq.n	80072fa <TIM_OC1_SetConfig+0x8e>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	4a14      	ldr	r2, [pc, #80]	; (8007348 <TIM_OC1_SetConfig+0xdc>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d111      	bne.n	800731e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007300:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007308:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	695b      	ldr	r3, [r3, #20]
 800730e:	693a      	ldr	r2, [r7, #16]
 8007310:	4313      	orrs	r3, r2
 8007312:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	699b      	ldr	r3, [r3, #24]
 8007318:	693a      	ldr	r2, [r7, #16]
 800731a:	4313      	orrs	r3, r2
 800731c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	693a      	ldr	r2, [r7, #16]
 8007322:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	68fa      	ldr	r2, [r7, #12]
 8007328:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	685a      	ldr	r2, [r3, #4]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	697a      	ldr	r2, [r7, #20]
 8007336:	621a      	str	r2, [r3, #32]
}
 8007338:	bf00      	nop
 800733a:	371c      	adds	r7, #28
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr
 8007344:	40010000 	.word	0x40010000
 8007348:	40010400 	.word	0x40010400

0800734c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800734c:	b480      	push	{r7}
 800734e:	b087      	sub	sp, #28
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a1b      	ldr	r3, [r3, #32]
 800735a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6a1b      	ldr	r3, [r3, #32]
 8007360:	f023 0210 	bic.w	r2, r3, #16
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	699b      	ldr	r3, [r3, #24]
 8007372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800737a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007382:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	021b      	lsls	r3, r3, #8
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	4313      	orrs	r3, r2
 800738e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	f023 0320 	bic.w	r3, r3, #32
 8007396:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	011b      	lsls	r3, r3, #4
 800739e:	697a      	ldr	r2, [r7, #20]
 80073a0:	4313      	orrs	r3, r2
 80073a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	4a22      	ldr	r2, [pc, #136]	; (8007430 <TIM_OC2_SetConfig+0xe4>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d003      	beq.n	80073b4 <TIM_OC2_SetConfig+0x68>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	4a21      	ldr	r2, [pc, #132]	; (8007434 <TIM_OC2_SetConfig+0xe8>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d10d      	bne.n	80073d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	011b      	lsls	r3, r3, #4
 80073c2:	697a      	ldr	r2, [r7, #20]
 80073c4:	4313      	orrs	r3, r2
 80073c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4a17      	ldr	r2, [pc, #92]	; (8007430 <TIM_OC2_SetConfig+0xe4>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d003      	beq.n	80073e0 <TIM_OC2_SetConfig+0x94>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a16      	ldr	r2, [pc, #88]	; (8007434 <TIM_OC2_SetConfig+0xe8>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d113      	bne.n	8007408 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80073e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80073ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	695b      	ldr	r3, [r3, #20]
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	693a      	ldr	r2, [r7, #16]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	699b      	ldr	r3, [r3, #24]
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	693a      	ldr	r2, [r7, #16]
 8007404:	4313      	orrs	r3, r2
 8007406:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	693a      	ldr	r2, [r7, #16]
 800740c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	685a      	ldr	r2, [r3, #4]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	697a      	ldr	r2, [r7, #20]
 8007420:	621a      	str	r2, [r3, #32]
}
 8007422:	bf00      	nop
 8007424:	371c      	adds	r7, #28
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr
 800742e:	bf00      	nop
 8007430:	40010000 	.word	0x40010000
 8007434:	40010400 	.word	0x40010400

08007438 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007438:	b480      	push	{r7}
 800743a:	b087      	sub	sp, #28
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6a1b      	ldr	r3, [r3, #32]
 8007446:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6a1b      	ldr	r3, [r3, #32]
 800744c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	69db      	ldr	r3, [r3, #28]
 800745e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f023 0303 	bic.w	r3, r3, #3
 800746e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	4313      	orrs	r3, r2
 8007478:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007480:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	021b      	lsls	r3, r3, #8
 8007488:	697a      	ldr	r2, [r7, #20]
 800748a:	4313      	orrs	r3, r2
 800748c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	4a21      	ldr	r2, [pc, #132]	; (8007518 <TIM_OC3_SetConfig+0xe0>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d003      	beq.n	800749e <TIM_OC3_SetConfig+0x66>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4a20      	ldr	r2, [pc, #128]	; (800751c <TIM_OC3_SetConfig+0xe4>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d10d      	bne.n	80074ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80074a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	021b      	lsls	r3, r3, #8
 80074ac:	697a      	ldr	r2, [r7, #20]
 80074ae:	4313      	orrs	r3, r2
 80074b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4a16      	ldr	r2, [pc, #88]	; (8007518 <TIM_OC3_SetConfig+0xe0>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d003      	beq.n	80074ca <TIM_OC3_SetConfig+0x92>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4a15      	ldr	r2, [pc, #84]	; (800751c <TIM_OC3_SetConfig+0xe4>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d113      	bne.n	80074f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	695b      	ldr	r3, [r3, #20]
 80074de:	011b      	lsls	r3, r3, #4
 80074e0:	693a      	ldr	r2, [r7, #16]
 80074e2:	4313      	orrs	r3, r2
 80074e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	699b      	ldr	r3, [r3, #24]
 80074ea:	011b      	lsls	r3, r3, #4
 80074ec:	693a      	ldr	r2, [r7, #16]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	693a      	ldr	r2, [r7, #16]
 80074f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	685a      	ldr	r2, [r3, #4]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	697a      	ldr	r2, [r7, #20]
 800750a:	621a      	str	r2, [r3, #32]
}
 800750c:	bf00      	nop
 800750e:	371c      	adds	r7, #28
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr
 8007518:	40010000 	.word	0x40010000
 800751c:	40010400 	.word	0x40010400

08007520 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007520:	b480      	push	{r7}
 8007522:	b087      	sub	sp, #28
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6a1b      	ldr	r3, [r3, #32]
 800752e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6a1b      	ldr	r3, [r3, #32]
 8007534:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	69db      	ldr	r3, [r3, #28]
 8007546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800754e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007556:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	021b      	lsls	r3, r3, #8
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	4313      	orrs	r3, r2
 8007562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800756a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	031b      	lsls	r3, r3, #12
 8007572:	693a      	ldr	r2, [r7, #16]
 8007574:	4313      	orrs	r3, r2
 8007576:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4a12      	ldr	r2, [pc, #72]	; (80075c4 <TIM_OC4_SetConfig+0xa4>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d003      	beq.n	8007588 <TIM_OC4_SetConfig+0x68>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4a11      	ldr	r2, [pc, #68]	; (80075c8 <TIM_OC4_SetConfig+0xa8>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d109      	bne.n	800759c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800758e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	695b      	ldr	r3, [r3, #20]
 8007594:	019b      	lsls	r3, r3, #6
 8007596:	697a      	ldr	r2, [r7, #20]
 8007598:	4313      	orrs	r3, r2
 800759a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	697a      	ldr	r2, [r7, #20]
 80075a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	68fa      	ldr	r2, [r7, #12]
 80075a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	685a      	ldr	r2, [r3, #4]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	693a      	ldr	r2, [r7, #16]
 80075b4:	621a      	str	r2, [r3, #32]
}
 80075b6:	bf00      	nop
 80075b8:	371c      	adds	r7, #28
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	40010000 	.word	0x40010000
 80075c8:	40010400 	.word	0x40010400

080075cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b087      	sub	sp, #28
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6a1b      	ldr	r3, [r3, #32]
 80075dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6a1b      	ldr	r3, [r3, #32]
 80075e2:	f023 0201 	bic.w	r2, r3, #1
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	699b      	ldr	r3, [r3, #24]
 80075ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80075f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	011b      	lsls	r3, r3, #4
 80075fc:	693a      	ldr	r2, [r7, #16]
 80075fe:	4313      	orrs	r3, r2
 8007600:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	f023 030a 	bic.w	r3, r3, #10
 8007608:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800760a:	697a      	ldr	r2, [r7, #20]
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	4313      	orrs	r3, r2
 8007610:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	693a      	ldr	r2, [r7, #16]
 8007616:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	697a      	ldr	r2, [r7, #20]
 800761c:	621a      	str	r2, [r3, #32]
}
 800761e:	bf00      	nop
 8007620:	371c      	adds	r7, #28
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr

0800762a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800762a:	b480      	push	{r7}
 800762c:	b087      	sub	sp, #28
 800762e:	af00      	add	r7, sp, #0
 8007630:	60f8      	str	r0, [r7, #12]
 8007632:	60b9      	str	r1, [r7, #8]
 8007634:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	6a1b      	ldr	r3, [r3, #32]
 800763a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	6a1b      	ldr	r3, [r3, #32]
 8007640:	f023 0210 	bic.w	r2, r3, #16
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	699b      	ldr	r3, [r3, #24]
 800764c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007654:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	031b      	lsls	r3, r3, #12
 800765a:	693a      	ldr	r2, [r7, #16]
 800765c:	4313      	orrs	r3, r2
 800765e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007666:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	011b      	lsls	r3, r3, #4
 800766c:	697a      	ldr	r2, [r7, #20]
 800766e:	4313      	orrs	r3, r2
 8007670:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	693a      	ldr	r2, [r7, #16]
 8007676:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	697a      	ldr	r2, [r7, #20]
 800767c:	621a      	str	r2, [r3, #32]
}
 800767e:	bf00      	nop
 8007680:	371c      	adds	r7, #28
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr

0800768a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800768a:	b480      	push	{r7}
 800768c:	b085      	sub	sp, #20
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
 8007692:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80076a2:	683a      	ldr	r2, [r7, #0]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	f043 0307 	orr.w	r3, r3, #7
 80076ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	68fa      	ldr	r2, [r7, #12]
 80076b2:	609a      	str	r2, [r3, #8]
}
 80076b4:	bf00      	nop
 80076b6:	3714      	adds	r7, #20
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b087      	sub	sp, #28
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	607a      	str	r2, [r7, #4]
 80076cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80076da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	021a      	lsls	r2, r3, #8
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	431a      	orrs	r2, r3
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	697a      	ldr	r2, [r7, #20]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	697a      	ldr	r2, [r7, #20]
 80076f2:	609a      	str	r2, [r3, #8]
}
 80076f4:	bf00      	nop
 80076f6:	371c      	adds	r7, #28
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007700:	b480      	push	{r7}
 8007702:	b087      	sub	sp, #28
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	f003 031f 	and.w	r3, r3, #31
 8007712:	2201      	movs	r2, #1
 8007714:	fa02 f303 	lsl.w	r3, r2, r3
 8007718:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6a1a      	ldr	r2, [r3, #32]
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	43db      	mvns	r3, r3
 8007722:	401a      	ands	r2, r3
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6a1a      	ldr	r2, [r3, #32]
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	f003 031f 	and.w	r3, r3, #31
 8007732:	6879      	ldr	r1, [r7, #4]
 8007734:	fa01 f303 	lsl.w	r3, r1, r3
 8007738:	431a      	orrs	r2, r3
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	621a      	str	r2, [r3, #32]
}
 800773e:	bf00      	nop
 8007740:	371c      	adds	r7, #28
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr
	...

0800774c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800774c:	b480      	push	{r7}
 800774e:	b085      	sub	sp, #20
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800775c:	2b01      	cmp	r3, #1
 800775e:	d101      	bne.n	8007764 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007760:	2302      	movs	r3, #2
 8007762:	e05a      	b.n	800781a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2202      	movs	r2, #2
 8007770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800778a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	4313      	orrs	r3, r2
 8007794:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	68fa      	ldr	r2, [r7, #12]
 800779c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a21      	ldr	r2, [pc, #132]	; (8007828 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d022      	beq.n	80077ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077b0:	d01d      	beq.n	80077ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a1d      	ldr	r2, [pc, #116]	; (800782c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d018      	beq.n	80077ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a1b      	ldr	r2, [pc, #108]	; (8007830 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d013      	beq.n	80077ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a1a      	ldr	r2, [pc, #104]	; (8007834 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d00e      	beq.n	80077ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a18      	ldr	r2, [pc, #96]	; (8007838 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d009      	beq.n	80077ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a17      	ldr	r2, [pc, #92]	; (800783c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d004      	beq.n	80077ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a15      	ldr	r2, [pc, #84]	; (8007840 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d10c      	bne.n	8007808 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	68ba      	ldr	r2, [r7, #8]
 80077fc:	4313      	orrs	r3, r2
 80077fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68ba      	ldr	r2, [r7, #8]
 8007806:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007818:	2300      	movs	r3, #0
}
 800781a:	4618      	mov	r0, r3
 800781c:	3714      	adds	r7, #20
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr
 8007826:	bf00      	nop
 8007828:	40010000 	.word	0x40010000
 800782c:	40000400 	.word	0x40000400
 8007830:	40000800 	.word	0x40000800
 8007834:	40000c00 	.word	0x40000c00
 8007838:	40010400 	.word	0x40010400
 800783c:	40014000 	.word	0x40014000
 8007840:	40001800 	.word	0x40001800

08007844 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800784e:	2300      	movs	r3, #0
 8007850:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007858:	2b01      	cmp	r3, #1
 800785a:	d101      	bne.n	8007860 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800785c:	2302      	movs	r3, #2
 800785e:	e03d      	b.n	80078dc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	4313      	orrs	r3, r2
 8007874:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	4313      	orrs	r3, r2
 8007882:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	4313      	orrs	r3, r2
 8007890:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4313      	orrs	r3, r2
 800789e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	691b      	ldr	r3, [r3, #16]
 80078aa:	4313      	orrs	r3, r2
 80078ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	695b      	ldr	r3, [r3, #20]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	69db      	ldr	r3, [r3, #28]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	68fa      	ldr	r2, [r7, #12]
 80078d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2200      	movs	r2, #0
 80078d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078da:	2300      	movs	r3, #0
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3714      	adds	r7, #20
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr

080078e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b083      	sub	sp, #12
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80078f0:	bf00      	nop
 80078f2:	370c      	adds	r7, #12
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr

080078fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007904:	bf00      	nop
 8007906:	370c      	adds	r7, #12
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr

08007910 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b082      	sub	sp, #8
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d101      	bne.n	8007922 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	e042      	b.n	80079a8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007928:	b2db      	uxtb	r3, r3
 800792a:	2b00      	cmp	r3, #0
 800792c:	d106      	bne.n	800793c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f7fb face 	bl	8002ed8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2224      	movs	r2, #36	; 0x24
 8007940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	68da      	ldr	r2, [r3, #12]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007952:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 fdbd 	bl	80084d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	691a      	ldr	r2, [r3, #16]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007968:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	695a      	ldr	r2, [r3, #20]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007978:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	68da      	ldr	r2, [r3, #12]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007988:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2220      	movs	r2, #32
 8007994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2220      	movs	r2, #32
 800799c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80079a6:	2300      	movs	r3, #0
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3708      	adds	r7, #8
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b08a      	sub	sp, #40	; 0x28
 80079b4:	af02      	add	r7, sp, #8
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	603b      	str	r3, [r7, #0]
 80079bc:	4613      	mov	r3, r2
 80079be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80079c0:	2300      	movs	r3, #0
 80079c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	2b20      	cmp	r3, #32
 80079ce:	d175      	bne.n	8007abc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d002      	beq.n	80079dc <HAL_UART_Transmit+0x2c>
 80079d6:	88fb      	ldrh	r3, [r7, #6]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d101      	bne.n	80079e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80079dc:	2301      	movs	r3, #1
 80079de:	e06e      	b.n	8007abe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2200      	movs	r2, #0
 80079e4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2221      	movs	r2, #33	; 0x21
 80079ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80079ee:	f7fb ff2f 	bl	8003850 <HAL_GetTick>
 80079f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	88fa      	ldrh	r2, [r7, #6]
 80079f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	88fa      	ldrh	r2, [r7, #6]
 80079fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a08:	d108      	bne.n	8007a1c <HAL_UART_Transmit+0x6c>
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d104      	bne.n	8007a1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007a12:	2300      	movs	r3, #0
 8007a14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	61bb      	str	r3, [r7, #24]
 8007a1a:	e003      	b.n	8007a24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a20:	2300      	movs	r3, #0
 8007a22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007a24:	e02e      	b.n	8007a84 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	9300      	str	r3, [sp, #0]
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	2180      	movs	r1, #128	; 0x80
 8007a30:	68f8      	ldr	r0, [r7, #12]
 8007a32:	f000 fb1f 	bl	8008074 <UART_WaitOnFlagUntilTimeout>
 8007a36:	4603      	mov	r3, r0
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d005      	beq.n	8007a48 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2220      	movs	r2, #32
 8007a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8007a44:	2303      	movs	r3, #3
 8007a46:	e03a      	b.n	8007abe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d10b      	bne.n	8007a66 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a4e:	69bb      	ldr	r3, [r7, #24]
 8007a50:	881b      	ldrh	r3, [r3, #0]
 8007a52:	461a      	mov	r2, r3
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007a5e:	69bb      	ldr	r3, [r7, #24]
 8007a60:	3302      	adds	r3, #2
 8007a62:	61bb      	str	r3, [r7, #24]
 8007a64:	e007      	b.n	8007a76 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a66:	69fb      	ldr	r3, [r7, #28]
 8007a68:	781a      	ldrb	r2, [r3, #0]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	3301      	adds	r3, #1
 8007a74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	3b01      	subs	r3, #1
 8007a7e:	b29a      	uxth	r2, r3
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d1cb      	bne.n	8007a26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	9300      	str	r3, [sp, #0]
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	2200      	movs	r2, #0
 8007a96:	2140      	movs	r1, #64	; 0x40
 8007a98:	68f8      	ldr	r0, [r7, #12]
 8007a9a:	f000 faeb 	bl	8008074 <UART_WaitOnFlagUntilTimeout>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d005      	beq.n	8007ab0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2220      	movs	r2, #32
 8007aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8007aac:	2303      	movs	r3, #3
 8007aae:	e006      	b.n	8007abe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2220      	movs	r2, #32
 8007ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	e000      	b.n	8007abe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007abc:	2302      	movs	r3, #2
  }
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3720      	adds	r7, #32
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b084      	sub	sp, #16
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	60f8      	str	r0, [r7, #12]
 8007ace:	60b9      	str	r1, [r7, #8]
 8007ad0:	4613      	mov	r3, r2
 8007ad2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	2b20      	cmp	r3, #32
 8007ade:	d112      	bne.n	8007b06 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d002      	beq.n	8007aec <HAL_UART_Receive_IT+0x26>
 8007ae6:	88fb      	ldrh	r3, [r7, #6]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d101      	bne.n	8007af0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	e00b      	b.n	8007b08 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2200      	movs	r2, #0
 8007af4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007af6:	88fb      	ldrh	r3, [r7, #6]
 8007af8:	461a      	mov	r2, r3
 8007afa:	68b9      	ldr	r1, [r7, #8]
 8007afc:	68f8      	ldr	r0, [r7, #12]
 8007afe:	f000 fb12 	bl	8008126 <UART_Start_Receive_IT>
 8007b02:	4603      	mov	r3, r0
 8007b04:	e000      	b.n	8007b08 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007b06:	2302      	movs	r3, #2
  }
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3710      	adds	r7, #16
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b0ba      	sub	sp, #232	; 0xe8
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	695b      	ldr	r3, [r3, #20]
 8007b32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007b36:	2300      	movs	r3, #0
 8007b38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b46:	f003 030f 	and.w	r3, r3, #15
 8007b4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007b4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d10f      	bne.n	8007b76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b5a:	f003 0320 	and.w	r3, r3, #32
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d009      	beq.n	8007b76 <HAL_UART_IRQHandler+0x66>
 8007b62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b66:	f003 0320 	and.w	r3, r3, #32
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d003      	beq.n	8007b76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 fbf2 	bl	8008358 <UART_Receive_IT>
      return;
 8007b74:	e25b      	b.n	800802e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007b76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	f000 80de 	beq.w	8007d3c <HAL_UART_IRQHandler+0x22c>
 8007b80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b84:	f003 0301 	and.w	r3, r3, #1
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d106      	bne.n	8007b9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b90:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	f000 80d1 	beq.w	8007d3c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b9e:	f003 0301 	and.w	r3, r3, #1
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d00b      	beq.n	8007bbe <HAL_UART_IRQHandler+0xae>
 8007ba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d005      	beq.n	8007bbe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bb6:	f043 0201 	orr.w	r2, r3, #1
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bc2:	f003 0304 	and.w	r3, r3, #4
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d00b      	beq.n	8007be2 <HAL_UART_IRQHandler+0xd2>
 8007bca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bce:	f003 0301 	and.w	r3, r3, #1
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d005      	beq.n	8007be2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bda:	f043 0202 	orr.w	r2, r3, #2
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007be6:	f003 0302 	and.w	r3, r3, #2
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00b      	beq.n	8007c06 <HAL_UART_IRQHandler+0xf6>
 8007bee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bf2:	f003 0301 	and.w	r3, r3, #1
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d005      	beq.n	8007c06 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bfe:	f043 0204 	orr.w	r2, r3, #4
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c0a:	f003 0308 	and.w	r3, r3, #8
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d011      	beq.n	8007c36 <HAL_UART_IRQHandler+0x126>
 8007c12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c16:	f003 0320 	and.w	r3, r3, #32
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d105      	bne.n	8007c2a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007c1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c22:	f003 0301 	and.w	r3, r3, #1
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d005      	beq.n	8007c36 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c2e:	f043 0208 	orr.w	r2, r3, #8
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	f000 81f2 	beq.w	8008024 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c44:	f003 0320 	and.w	r3, r3, #32
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d008      	beq.n	8007c5e <HAL_UART_IRQHandler+0x14e>
 8007c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c50:	f003 0320 	and.w	r3, r3, #32
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d002      	beq.n	8007c5e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f000 fb7d 	bl	8008358 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	695b      	ldr	r3, [r3, #20]
 8007c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c68:	2b40      	cmp	r3, #64	; 0x40
 8007c6a:	bf0c      	ite	eq
 8007c6c:	2301      	moveq	r3, #1
 8007c6e:	2300      	movne	r3, #0
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c7a:	f003 0308 	and.w	r3, r3, #8
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d103      	bne.n	8007c8a <HAL_UART_IRQHandler+0x17a>
 8007c82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d04f      	beq.n	8007d2a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 fa85 	bl	800819a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	695b      	ldr	r3, [r3, #20]
 8007c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c9a:	2b40      	cmp	r3, #64	; 0x40
 8007c9c:	d141      	bne.n	8007d22 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	3314      	adds	r3, #20
 8007ca4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007cac:	e853 3f00 	ldrex	r3, [r3]
 8007cb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007cb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007cb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	3314      	adds	r3, #20
 8007cc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007cca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007cce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007cd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007cda:	e841 2300 	strex	r3, r2, [r1]
 8007cde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007ce2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d1d9      	bne.n	8007c9e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d013      	beq.n	8007d1a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cf6:	4a7e      	ldr	r2, [pc, #504]	; (8007ef0 <HAL_UART_IRQHandler+0x3e0>)
 8007cf8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f7fc fda4 	bl	800484c <HAL_DMA_Abort_IT>
 8007d04:	4603      	mov	r3, r0
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d016      	beq.n	8007d38 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007d14:	4610      	mov	r0, r2
 8007d16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d18:	e00e      	b.n	8007d38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 f994 	bl	8008048 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d20:	e00a      	b.n	8007d38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 f990 	bl	8008048 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d28:	e006      	b.n	8007d38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 f98c 	bl	8008048 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8007d36:	e175      	b.n	8008024 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d38:	bf00      	nop
    return;
 8007d3a:	e173      	b.n	8008024 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	f040 814f 	bne.w	8007fe4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d4a:	f003 0310 	and.w	r3, r3, #16
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	f000 8148 	beq.w	8007fe4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007d54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d58:	f003 0310 	and.w	r3, r3, #16
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	f000 8141 	beq.w	8007fe4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d62:	2300      	movs	r3, #0
 8007d64:	60bb      	str	r3, [r7, #8]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	60bb      	str	r3, [r7, #8]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	60bb      	str	r3, [r7, #8]
 8007d76:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	695b      	ldr	r3, [r3, #20]
 8007d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d82:	2b40      	cmp	r3, #64	; 0x40
 8007d84:	f040 80b6 	bne.w	8007ef4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007d94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	f000 8145 	beq.w	8008028 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007da2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007da6:	429a      	cmp	r2, r3
 8007da8:	f080 813e 	bcs.w	8008028 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007db2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007db8:	69db      	ldr	r3, [r3, #28]
 8007dba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dbe:	f000 8088 	beq.w	8007ed2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	330c      	adds	r3, #12
 8007dc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007dd0:	e853 3f00 	ldrex	r3, [r3]
 8007dd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007dd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ddc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007de0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	330c      	adds	r3, #12
 8007dea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007dee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007df2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007dfa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007dfe:	e841 2300 	strex	r3, r2, [r1]
 8007e02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007e06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d1d9      	bne.n	8007dc2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	3314      	adds	r3, #20
 8007e14:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e18:	e853 3f00 	ldrex	r3, [r3]
 8007e1c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007e1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e20:	f023 0301 	bic.w	r3, r3, #1
 8007e24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	3314      	adds	r3, #20
 8007e2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007e32:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007e36:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e38:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007e3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007e3e:	e841 2300 	strex	r3, r2, [r1]
 8007e42:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007e44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d1e1      	bne.n	8007e0e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	3314      	adds	r3, #20
 8007e50:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e54:	e853 3f00 	ldrex	r3, [r3]
 8007e58:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007e5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	3314      	adds	r3, #20
 8007e6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007e6e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007e70:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e72:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007e74:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007e76:	e841 2300 	strex	r3, r2, [r1]
 8007e7a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007e7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d1e3      	bne.n	8007e4a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2220      	movs	r2, #32
 8007e86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	330c      	adds	r3, #12
 8007e96:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e9a:	e853 3f00 	ldrex	r3, [r3]
 8007e9e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007ea0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ea2:	f023 0310 	bic.w	r3, r3, #16
 8007ea6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	330c      	adds	r3, #12
 8007eb0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007eb4:	65ba      	str	r2, [r7, #88]	; 0x58
 8007eb6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007eba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ebc:	e841 2300 	strex	r3, r2, [r1]
 8007ec0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007ec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d1e3      	bne.n	8007e90 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f7fc fc4d 	bl	800476c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2202      	movs	r2, #2
 8007ed6:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	1ad3      	subs	r3, r2, r3
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 f8b7 	bl	800805c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007eee:	e09b      	b.n	8008028 <HAL_UART_IRQHandler+0x518>
 8007ef0:	08008261 	.word	0x08008261
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	1ad3      	subs	r3, r2, r3
 8007f00:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	f000 808e 	beq.w	800802c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007f10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	f000 8089 	beq.w	800802c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	330c      	adds	r3, #12
 8007f20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f24:	e853 3f00 	ldrex	r3, [r3]
 8007f28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	330c      	adds	r3, #12
 8007f3a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007f3e:	647a      	str	r2, [r7, #68]	; 0x44
 8007f40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f46:	e841 2300 	strex	r3, r2, [r1]
 8007f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d1e3      	bne.n	8007f1a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	3314      	adds	r3, #20
 8007f58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5c:	e853 3f00 	ldrex	r3, [r3]
 8007f60:	623b      	str	r3, [r7, #32]
   return(result);
 8007f62:	6a3b      	ldr	r3, [r7, #32]
 8007f64:	f023 0301 	bic.w	r3, r3, #1
 8007f68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	3314      	adds	r3, #20
 8007f72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007f76:	633a      	str	r2, [r7, #48]	; 0x30
 8007f78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f7e:	e841 2300 	strex	r3, r2, [r1]
 8007f82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d1e3      	bne.n	8007f52 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2220      	movs	r2, #32
 8007f8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2200      	movs	r2, #0
 8007f96:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	330c      	adds	r3, #12
 8007f9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	e853 3f00 	ldrex	r3, [r3]
 8007fa6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f023 0310 	bic.w	r3, r3, #16
 8007fae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	330c      	adds	r3, #12
 8007fb8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007fbc:	61fa      	str	r2, [r7, #28]
 8007fbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc0:	69b9      	ldr	r1, [r7, #24]
 8007fc2:	69fa      	ldr	r2, [r7, #28]
 8007fc4:	e841 2300 	strex	r3, r2, [r1]
 8007fc8:	617b      	str	r3, [r7, #20]
   return(result);
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d1e3      	bne.n	8007f98 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2202      	movs	r2, #2
 8007fd4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007fd6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007fda:	4619      	mov	r1, r3
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 f83d 	bl	800805c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007fe2:	e023      	b.n	800802c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d009      	beq.n	8008004 <HAL_UART_IRQHandler+0x4f4>
 8007ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d003      	beq.n	8008004 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 f943 	bl	8008288 <UART_Transmit_IT>
    return;
 8008002:	e014      	b.n	800802e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800800c:	2b00      	cmp	r3, #0
 800800e:	d00e      	beq.n	800802e <HAL_UART_IRQHandler+0x51e>
 8008010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008018:	2b00      	cmp	r3, #0
 800801a:	d008      	beq.n	800802e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 f983 	bl	8008328 <UART_EndTransmit_IT>
    return;
 8008022:	e004      	b.n	800802e <HAL_UART_IRQHandler+0x51e>
    return;
 8008024:	bf00      	nop
 8008026:	e002      	b.n	800802e <HAL_UART_IRQHandler+0x51e>
      return;
 8008028:	bf00      	nop
 800802a:	e000      	b.n	800802e <HAL_UART_IRQHandler+0x51e>
      return;
 800802c:	bf00      	nop
  }
}
 800802e:	37e8      	adds	r7, #232	; 0xe8
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008034:	b480      	push	{r7}
 8008036:	b083      	sub	sp, #12
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800803c:	bf00      	nop
 800803e:	370c      	adds	r7, #12
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr

08008048 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008048:	b480      	push	{r7}
 800804a:	b083      	sub	sp, #12
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008050:	bf00      	nop
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	460b      	mov	r3, r1
 8008066:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008068:	bf00      	nop
 800806a:	370c      	adds	r7, #12
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b086      	sub	sp, #24
 8008078:	af00      	add	r7, sp, #0
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	603b      	str	r3, [r7, #0]
 8008080:	4613      	mov	r3, r2
 8008082:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008084:	e03b      	b.n	80080fe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008086:	6a3b      	ldr	r3, [r7, #32]
 8008088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800808c:	d037      	beq.n	80080fe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800808e:	f7fb fbdf 	bl	8003850 <HAL_GetTick>
 8008092:	4602      	mov	r2, r0
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	1ad3      	subs	r3, r2, r3
 8008098:	6a3a      	ldr	r2, [r7, #32]
 800809a:	429a      	cmp	r2, r3
 800809c:	d302      	bcc.n	80080a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800809e:	6a3b      	ldr	r3, [r7, #32]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d101      	bne.n	80080a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80080a4:	2303      	movs	r3, #3
 80080a6:	e03a      	b.n	800811e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	f003 0304 	and.w	r3, r3, #4
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d023      	beq.n	80080fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	2b80      	cmp	r3, #128	; 0x80
 80080ba:	d020      	beq.n	80080fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	2b40      	cmp	r3, #64	; 0x40
 80080c0:	d01d      	beq.n	80080fe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f003 0308 	and.w	r3, r3, #8
 80080cc:	2b08      	cmp	r3, #8
 80080ce:	d116      	bne.n	80080fe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80080d0:	2300      	movs	r3, #0
 80080d2:	617b      	str	r3, [r7, #20]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	617b      	str	r3, [r7, #20]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	617b      	str	r3, [r7, #20]
 80080e4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80080e6:	68f8      	ldr	r0, [r7, #12]
 80080e8:	f000 f857 	bl	800819a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2208      	movs	r2, #8
 80080f0:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2200      	movs	r2, #0
 80080f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	e00f      	b.n	800811e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	4013      	ands	r3, r2
 8008108:	68ba      	ldr	r2, [r7, #8]
 800810a:	429a      	cmp	r2, r3
 800810c:	bf0c      	ite	eq
 800810e:	2301      	moveq	r3, #1
 8008110:	2300      	movne	r3, #0
 8008112:	b2db      	uxtb	r3, r3
 8008114:	461a      	mov	r2, r3
 8008116:	79fb      	ldrb	r3, [r7, #7]
 8008118:	429a      	cmp	r2, r3
 800811a:	d0b4      	beq.n	8008086 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	3718      	adds	r7, #24
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008126:	b480      	push	{r7}
 8008128:	b085      	sub	sp, #20
 800812a:	af00      	add	r7, sp, #0
 800812c:	60f8      	str	r0, [r7, #12]
 800812e:	60b9      	str	r1, [r7, #8]
 8008130:	4613      	mov	r3, r2
 8008132:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	68ba      	ldr	r2, [r7, #8]
 8008138:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	88fa      	ldrh	r2, [r7, #6]
 800813e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	88fa      	ldrh	r2, [r7, #6]
 8008144:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2200      	movs	r2, #0
 800814a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2222      	movs	r2, #34	; 0x22
 8008150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	691b      	ldr	r3, [r3, #16]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d007      	beq.n	800816c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	68da      	ldr	r2, [r3, #12]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800816a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	695a      	ldr	r2, [r3, #20]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f042 0201 	orr.w	r2, r2, #1
 800817a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	68da      	ldr	r2, [r3, #12]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f042 0220 	orr.w	r2, r2, #32
 800818a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3714      	adds	r7, #20
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr

0800819a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800819a:	b480      	push	{r7}
 800819c:	b095      	sub	sp, #84	; 0x54
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	330c      	adds	r3, #12
 80081a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ac:	e853 3f00 	ldrex	r3, [r3]
 80081b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80081b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80081b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	330c      	adds	r3, #12
 80081c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80081c2:	643a      	str	r2, [r7, #64]	; 0x40
 80081c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80081c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80081ca:	e841 2300 	strex	r3, r2, [r1]
 80081ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80081d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d1e5      	bne.n	80081a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	3314      	adds	r3, #20
 80081dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081de:	6a3b      	ldr	r3, [r7, #32]
 80081e0:	e853 3f00 	ldrex	r3, [r3]
 80081e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80081e6:	69fb      	ldr	r3, [r7, #28]
 80081e8:	f023 0301 	bic.w	r3, r3, #1
 80081ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	3314      	adds	r3, #20
 80081f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80081f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081fe:	e841 2300 	strex	r3, r2, [r1]
 8008202:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008206:	2b00      	cmp	r3, #0
 8008208:	d1e5      	bne.n	80081d6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800820e:	2b01      	cmp	r3, #1
 8008210:	d119      	bne.n	8008246 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	330c      	adds	r3, #12
 8008218:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	e853 3f00 	ldrex	r3, [r3]
 8008220:	60bb      	str	r3, [r7, #8]
   return(result);
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	f023 0310 	bic.w	r3, r3, #16
 8008228:	647b      	str	r3, [r7, #68]	; 0x44
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	330c      	adds	r3, #12
 8008230:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008232:	61ba      	str	r2, [r7, #24]
 8008234:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008236:	6979      	ldr	r1, [r7, #20]
 8008238:	69ba      	ldr	r2, [r7, #24]
 800823a:	e841 2300 	strex	r3, r2, [r1]
 800823e:	613b      	str	r3, [r7, #16]
   return(result);
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d1e5      	bne.n	8008212 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2220      	movs	r2, #32
 800824a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008254:	bf00      	nop
 8008256:	3754      	adds	r7, #84	; 0x54
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800826c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2200      	movs	r2, #0
 8008272:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2200      	movs	r2, #0
 8008278:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800827a:	68f8      	ldr	r0, [r7, #12]
 800827c:	f7ff fee4 	bl	8008048 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008280:	bf00      	nop
 8008282:	3710      	adds	r7, #16
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008288:	b480      	push	{r7}
 800828a:	b085      	sub	sp, #20
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008296:	b2db      	uxtb	r3, r3
 8008298:	2b21      	cmp	r3, #33	; 0x21
 800829a:	d13e      	bne.n	800831a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082a4:	d114      	bne.n	80082d0 <UART_Transmit_IT+0x48>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	691b      	ldr	r3, [r3, #16]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d110      	bne.n	80082d0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6a1b      	ldr	r3, [r3, #32]
 80082b2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	881b      	ldrh	r3, [r3, #0]
 80082b8:	461a      	mov	r2, r3
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80082c2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6a1b      	ldr	r3, [r3, #32]
 80082c8:	1c9a      	adds	r2, r3, #2
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	621a      	str	r2, [r3, #32]
 80082ce:	e008      	b.n	80082e2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6a1b      	ldr	r3, [r3, #32]
 80082d4:	1c59      	adds	r1, r3, #1
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	6211      	str	r1, [r2, #32]
 80082da:	781a      	ldrb	r2, [r3, #0]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	3b01      	subs	r3, #1
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	4619      	mov	r1, r3
 80082f0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d10f      	bne.n	8008316 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	68da      	ldr	r2, [r3, #12]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008304:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	68da      	ldr	r2, [r3, #12]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008314:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008316:	2300      	movs	r3, #0
 8008318:	e000      	b.n	800831c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800831a:	2302      	movs	r3, #2
  }
}
 800831c:	4618      	mov	r0, r3
 800831e:	3714      	adds	r7, #20
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr

08008328 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	68da      	ldr	r2, [r3, #12]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800833e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2220      	movs	r2, #32
 8008344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f7ff fe73 	bl	8008034 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	3708      	adds	r7, #8
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b08c      	sub	sp, #48	; 0x30
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008366:	b2db      	uxtb	r3, r3
 8008368:	2b22      	cmp	r3, #34	; 0x22
 800836a:	f040 80ae 	bne.w	80084ca <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008376:	d117      	bne.n	80083a8 <UART_Receive_IT+0x50>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	691b      	ldr	r3, [r3, #16]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d113      	bne.n	80083a8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008380:	2300      	movs	r3, #0
 8008382:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008388:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	b29b      	uxth	r3, r3
 8008392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008396:	b29a      	uxth	r2, r3
 8008398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800839a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083a0:	1c9a      	adds	r2, r3, #2
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	629a      	str	r2, [r3, #40]	; 0x28
 80083a6:	e026      	b.n	80083f6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80083ae:	2300      	movs	r3, #0
 80083b0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083ba:	d007      	beq.n	80083cc <UART_Receive_IT+0x74>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	689b      	ldr	r3, [r3, #8]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d10a      	bne.n	80083da <UART_Receive_IT+0x82>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	691b      	ldr	r3, [r3, #16]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d106      	bne.n	80083da <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	b2da      	uxtb	r2, r3
 80083d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d6:	701a      	strb	r2, [r3, #0]
 80083d8:	e008      	b.n	80083ec <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083e6:	b2da      	uxtb	r2, r3
 80083e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ea:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083f0:	1c5a      	adds	r2, r3, #1
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	3b01      	subs	r3, #1
 80083fe:	b29b      	uxth	r3, r3
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	4619      	mov	r1, r3
 8008404:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008406:	2b00      	cmp	r3, #0
 8008408:	d15d      	bne.n	80084c6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	68da      	ldr	r2, [r3, #12]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f022 0220 	bic.w	r2, r2, #32
 8008418:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	68da      	ldr	r2, [r3, #12]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008428:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	695a      	ldr	r2, [r3, #20]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f022 0201 	bic.w	r2, r2, #1
 8008438:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2220      	movs	r2, #32
 800843e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2200      	movs	r2, #0
 8008446:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800844c:	2b01      	cmp	r3, #1
 800844e:	d135      	bne.n	80084bc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2200      	movs	r2, #0
 8008454:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	330c      	adds	r3, #12
 800845c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	e853 3f00 	ldrex	r3, [r3]
 8008464:	613b      	str	r3, [r7, #16]
   return(result);
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	f023 0310 	bic.w	r3, r3, #16
 800846c:	627b      	str	r3, [r7, #36]	; 0x24
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	330c      	adds	r3, #12
 8008474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008476:	623a      	str	r2, [r7, #32]
 8008478:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847a:	69f9      	ldr	r1, [r7, #28]
 800847c:	6a3a      	ldr	r2, [r7, #32]
 800847e:	e841 2300 	strex	r3, r2, [r1]
 8008482:	61bb      	str	r3, [r7, #24]
   return(result);
 8008484:	69bb      	ldr	r3, [r7, #24]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d1e5      	bne.n	8008456 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f003 0310 	and.w	r3, r3, #16
 8008494:	2b10      	cmp	r3, #16
 8008496:	d10a      	bne.n	80084ae <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008498:	2300      	movs	r3, #0
 800849a:	60fb      	str	r3, [r7, #12]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	60fb      	str	r3, [r7, #12]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	60fb      	str	r3, [r7, #12]
 80084ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80084b2:	4619      	mov	r1, r3
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f7ff fdd1 	bl	800805c <HAL_UARTEx_RxEventCallback>
 80084ba:	e002      	b.n	80084c2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f7f8 fdc9 	bl	8001054 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80084c2:	2300      	movs	r3, #0
 80084c4:	e002      	b.n	80084cc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80084c6:	2300      	movs	r3, #0
 80084c8:	e000      	b.n	80084cc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80084ca:	2302      	movs	r3, #2
  }
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3730      	adds	r7, #48	; 0x30
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80084d8:	b0c0      	sub	sp, #256	; 0x100
 80084da:	af00      	add	r7, sp, #0
 80084dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80084e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	691b      	ldr	r3, [r3, #16]
 80084e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80084ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084f0:	68d9      	ldr	r1, [r3, #12]
 80084f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084f6:	681a      	ldr	r2, [r3, #0]
 80084f8:	ea40 0301 	orr.w	r3, r0, r1
 80084fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80084fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008502:	689a      	ldr	r2, [r3, #8]
 8008504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008508:	691b      	ldr	r3, [r3, #16]
 800850a:	431a      	orrs	r2, r3
 800850c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008510:	695b      	ldr	r3, [r3, #20]
 8008512:	431a      	orrs	r2, r3
 8008514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008518:	69db      	ldr	r3, [r3, #28]
 800851a:	4313      	orrs	r3, r2
 800851c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	68db      	ldr	r3, [r3, #12]
 8008528:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800852c:	f021 010c 	bic.w	r1, r1, #12
 8008530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008534:	681a      	ldr	r2, [r3, #0]
 8008536:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800853a:	430b      	orrs	r3, r1
 800853c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800853e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	695b      	ldr	r3, [r3, #20]
 8008546:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800854a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800854e:	6999      	ldr	r1, [r3, #24]
 8008550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008554:	681a      	ldr	r2, [r3, #0]
 8008556:	ea40 0301 	orr.w	r3, r0, r1
 800855a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800855c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	4b8f      	ldr	r3, [pc, #572]	; (80087a0 <UART_SetConfig+0x2cc>)
 8008564:	429a      	cmp	r2, r3
 8008566:	d005      	beq.n	8008574 <UART_SetConfig+0xa0>
 8008568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	4b8d      	ldr	r3, [pc, #564]	; (80087a4 <UART_SetConfig+0x2d0>)
 8008570:	429a      	cmp	r2, r3
 8008572:	d104      	bne.n	800857e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008574:	f7fd fe8e 	bl	8006294 <HAL_RCC_GetPCLK2Freq>
 8008578:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800857c:	e003      	b.n	8008586 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800857e:	f7fd fe75 	bl	800626c <HAL_RCC_GetPCLK1Freq>
 8008582:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800858a:	69db      	ldr	r3, [r3, #28]
 800858c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008590:	f040 810c 	bne.w	80087ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008594:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008598:	2200      	movs	r2, #0
 800859a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800859e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80085a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80085a6:	4622      	mov	r2, r4
 80085a8:	462b      	mov	r3, r5
 80085aa:	1891      	adds	r1, r2, r2
 80085ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80085ae:	415b      	adcs	r3, r3
 80085b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80085b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80085b6:	4621      	mov	r1, r4
 80085b8:	eb12 0801 	adds.w	r8, r2, r1
 80085bc:	4629      	mov	r1, r5
 80085be:	eb43 0901 	adc.w	r9, r3, r1
 80085c2:	f04f 0200 	mov.w	r2, #0
 80085c6:	f04f 0300 	mov.w	r3, #0
 80085ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80085ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80085d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80085d6:	4690      	mov	r8, r2
 80085d8:	4699      	mov	r9, r3
 80085da:	4623      	mov	r3, r4
 80085dc:	eb18 0303 	adds.w	r3, r8, r3
 80085e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80085e4:	462b      	mov	r3, r5
 80085e6:	eb49 0303 	adc.w	r3, r9, r3
 80085ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80085ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	2200      	movs	r2, #0
 80085f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80085fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80085fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008602:	460b      	mov	r3, r1
 8008604:	18db      	adds	r3, r3, r3
 8008606:	653b      	str	r3, [r7, #80]	; 0x50
 8008608:	4613      	mov	r3, r2
 800860a:	eb42 0303 	adc.w	r3, r2, r3
 800860e:	657b      	str	r3, [r7, #84]	; 0x54
 8008610:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008614:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008618:	f7f8 fb46 	bl	8000ca8 <__aeabi_uldivmod>
 800861c:	4602      	mov	r2, r0
 800861e:	460b      	mov	r3, r1
 8008620:	4b61      	ldr	r3, [pc, #388]	; (80087a8 <UART_SetConfig+0x2d4>)
 8008622:	fba3 2302 	umull	r2, r3, r3, r2
 8008626:	095b      	lsrs	r3, r3, #5
 8008628:	011c      	lsls	r4, r3, #4
 800862a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800862e:	2200      	movs	r2, #0
 8008630:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008634:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008638:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800863c:	4642      	mov	r2, r8
 800863e:	464b      	mov	r3, r9
 8008640:	1891      	adds	r1, r2, r2
 8008642:	64b9      	str	r1, [r7, #72]	; 0x48
 8008644:	415b      	adcs	r3, r3
 8008646:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008648:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800864c:	4641      	mov	r1, r8
 800864e:	eb12 0a01 	adds.w	sl, r2, r1
 8008652:	4649      	mov	r1, r9
 8008654:	eb43 0b01 	adc.w	fp, r3, r1
 8008658:	f04f 0200 	mov.w	r2, #0
 800865c:	f04f 0300 	mov.w	r3, #0
 8008660:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008664:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008668:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800866c:	4692      	mov	sl, r2
 800866e:	469b      	mov	fp, r3
 8008670:	4643      	mov	r3, r8
 8008672:	eb1a 0303 	adds.w	r3, sl, r3
 8008676:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800867a:	464b      	mov	r3, r9
 800867c:	eb4b 0303 	adc.w	r3, fp, r3
 8008680:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008690:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008694:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008698:	460b      	mov	r3, r1
 800869a:	18db      	adds	r3, r3, r3
 800869c:	643b      	str	r3, [r7, #64]	; 0x40
 800869e:	4613      	mov	r3, r2
 80086a0:	eb42 0303 	adc.w	r3, r2, r3
 80086a4:	647b      	str	r3, [r7, #68]	; 0x44
 80086a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80086aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80086ae:	f7f8 fafb 	bl	8000ca8 <__aeabi_uldivmod>
 80086b2:	4602      	mov	r2, r0
 80086b4:	460b      	mov	r3, r1
 80086b6:	4611      	mov	r1, r2
 80086b8:	4b3b      	ldr	r3, [pc, #236]	; (80087a8 <UART_SetConfig+0x2d4>)
 80086ba:	fba3 2301 	umull	r2, r3, r3, r1
 80086be:	095b      	lsrs	r3, r3, #5
 80086c0:	2264      	movs	r2, #100	; 0x64
 80086c2:	fb02 f303 	mul.w	r3, r2, r3
 80086c6:	1acb      	subs	r3, r1, r3
 80086c8:	00db      	lsls	r3, r3, #3
 80086ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80086ce:	4b36      	ldr	r3, [pc, #216]	; (80087a8 <UART_SetConfig+0x2d4>)
 80086d0:	fba3 2302 	umull	r2, r3, r3, r2
 80086d4:	095b      	lsrs	r3, r3, #5
 80086d6:	005b      	lsls	r3, r3, #1
 80086d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80086dc:	441c      	add	r4, r3
 80086de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086e2:	2200      	movs	r2, #0
 80086e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80086e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80086ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80086f0:	4642      	mov	r2, r8
 80086f2:	464b      	mov	r3, r9
 80086f4:	1891      	adds	r1, r2, r2
 80086f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80086f8:	415b      	adcs	r3, r3
 80086fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008700:	4641      	mov	r1, r8
 8008702:	1851      	adds	r1, r2, r1
 8008704:	6339      	str	r1, [r7, #48]	; 0x30
 8008706:	4649      	mov	r1, r9
 8008708:	414b      	adcs	r3, r1
 800870a:	637b      	str	r3, [r7, #52]	; 0x34
 800870c:	f04f 0200 	mov.w	r2, #0
 8008710:	f04f 0300 	mov.w	r3, #0
 8008714:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008718:	4659      	mov	r1, fp
 800871a:	00cb      	lsls	r3, r1, #3
 800871c:	4651      	mov	r1, sl
 800871e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008722:	4651      	mov	r1, sl
 8008724:	00ca      	lsls	r2, r1, #3
 8008726:	4610      	mov	r0, r2
 8008728:	4619      	mov	r1, r3
 800872a:	4603      	mov	r3, r0
 800872c:	4642      	mov	r2, r8
 800872e:	189b      	adds	r3, r3, r2
 8008730:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008734:	464b      	mov	r3, r9
 8008736:	460a      	mov	r2, r1
 8008738:	eb42 0303 	adc.w	r3, r2, r3
 800873c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	2200      	movs	r2, #0
 8008748:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800874c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008750:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008754:	460b      	mov	r3, r1
 8008756:	18db      	adds	r3, r3, r3
 8008758:	62bb      	str	r3, [r7, #40]	; 0x28
 800875a:	4613      	mov	r3, r2
 800875c:	eb42 0303 	adc.w	r3, r2, r3
 8008760:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008762:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008766:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800876a:	f7f8 fa9d 	bl	8000ca8 <__aeabi_uldivmod>
 800876e:	4602      	mov	r2, r0
 8008770:	460b      	mov	r3, r1
 8008772:	4b0d      	ldr	r3, [pc, #52]	; (80087a8 <UART_SetConfig+0x2d4>)
 8008774:	fba3 1302 	umull	r1, r3, r3, r2
 8008778:	095b      	lsrs	r3, r3, #5
 800877a:	2164      	movs	r1, #100	; 0x64
 800877c:	fb01 f303 	mul.w	r3, r1, r3
 8008780:	1ad3      	subs	r3, r2, r3
 8008782:	00db      	lsls	r3, r3, #3
 8008784:	3332      	adds	r3, #50	; 0x32
 8008786:	4a08      	ldr	r2, [pc, #32]	; (80087a8 <UART_SetConfig+0x2d4>)
 8008788:	fba2 2303 	umull	r2, r3, r2, r3
 800878c:	095b      	lsrs	r3, r3, #5
 800878e:	f003 0207 	and.w	r2, r3, #7
 8008792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4422      	add	r2, r4
 800879a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800879c:	e106      	b.n	80089ac <UART_SetConfig+0x4d8>
 800879e:	bf00      	nop
 80087a0:	40011000 	.word	0x40011000
 80087a4:	40011400 	.word	0x40011400
 80087a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80087ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087b0:	2200      	movs	r2, #0
 80087b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80087b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80087ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80087be:	4642      	mov	r2, r8
 80087c0:	464b      	mov	r3, r9
 80087c2:	1891      	adds	r1, r2, r2
 80087c4:	6239      	str	r1, [r7, #32]
 80087c6:	415b      	adcs	r3, r3
 80087c8:	627b      	str	r3, [r7, #36]	; 0x24
 80087ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80087ce:	4641      	mov	r1, r8
 80087d0:	1854      	adds	r4, r2, r1
 80087d2:	4649      	mov	r1, r9
 80087d4:	eb43 0501 	adc.w	r5, r3, r1
 80087d8:	f04f 0200 	mov.w	r2, #0
 80087dc:	f04f 0300 	mov.w	r3, #0
 80087e0:	00eb      	lsls	r3, r5, #3
 80087e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80087e6:	00e2      	lsls	r2, r4, #3
 80087e8:	4614      	mov	r4, r2
 80087ea:	461d      	mov	r5, r3
 80087ec:	4643      	mov	r3, r8
 80087ee:	18e3      	adds	r3, r4, r3
 80087f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80087f4:	464b      	mov	r3, r9
 80087f6:	eb45 0303 	adc.w	r3, r5, r3
 80087fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80087fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	2200      	movs	r2, #0
 8008806:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800880a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800880e:	f04f 0200 	mov.w	r2, #0
 8008812:	f04f 0300 	mov.w	r3, #0
 8008816:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800881a:	4629      	mov	r1, r5
 800881c:	008b      	lsls	r3, r1, #2
 800881e:	4621      	mov	r1, r4
 8008820:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008824:	4621      	mov	r1, r4
 8008826:	008a      	lsls	r2, r1, #2
 8008828:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800882c:	f7f8 fa3c 	bl	8000ca8 <__aeabi_uldivmod>
 8008830:	4602      	mov	r2, r0
 8008832:	460b      	mov	r3, r1
 8008834:	4b60      	ldr	r3, [pc, #384]	; (80089b8 <UART_SetConfig+0x4e4>)
 8008836:	fba3 2302 	umull	r2, r3, r3, r2
 800883a:	095b      	lsrs	r3, r3, #5
 800883c:	011c      	lsls	r4, r3, #4
 800883e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008842:	2200      	movs	r2, #0
 8008844:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008848:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800884c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008850:	4642      	mov	r2, r8
 8008852:	464b      	mov	r3, r9
 8008854:	1891      	adds	r1, r2, r2
 8008856:	61b9      	str	r1, [r7, #24]
 8008858:	415b      	adcs	r3, r3
 800885a:	61fb      	str	r3, [r7, #28]
 800885c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008860:	4641      	mov	r1, r8
 8008862:	1851      	adds	r1, r2, r1
 8008864:	6139      	str	r1, [r7, #16]
 8008866:	4649      	mov	r1, r9
 8008868:	414b      	adcs	r3, r1
 800886a:	617b      	str	r3, [r7, #20]
 800886c:	f04f 0200 	mov.w	r2, #0
 8008870:	f04f 0300 	mov.w	r3, #0
 8008874:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008878:	4659      	mov	r1, fp
 800887a:	00cb      	lsls	r3, r1, #3
 800887c:	4651      	mov	r1, sl
 800887e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008882:	4651      	mov	r1, sl
 8008884:	00ca      	lsls	r2, r1, #3
 8008886:	4610      	mov	r0, r2
 8008888:	4619      	mov	r1, r3
 800888a:	4603      	mov	r3, r0
 800888c:	4642      	mov	r2, r8
 800888e:	189b      	adds	r3, r3, r2
 8008890:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008894:	464b      	mov	r3, r9
 8008896:	460a      	mov	r2, r1
 8008898:	eb42 0303 	adc.w	r3, r2, r3
 800889c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80088a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	2200      	movs	r2, #0
 80088a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80088aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80088ac:	f04f 0200 	mov.w	r2, #0
 80088b0:	f04f 0300 	mov.w	r3, #0
 80088b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80088b8:	4649      	mov	r1, r9
 80088ba:	008b      	lsls	r3, r1, #2
 80088bc:	4641      	mov	r1, r8
 80088be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80088c2:	4641      	mov	r1, r8
 80088c4:	008a      	lsls	r2, r1, #2
 80088c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80088ca:	f7f8 f9ed 	bl	8000ca8 <__aeabi_uldivmod>
 80088ce:	4602      	mov	r2, r0
 80088d0:	460b      	mov	r3, r1
 80088d2:	4611      	mov	r1, r2
 80088d4:	4b38      	ldr	r3, [pc, #224]	; (80089b8 <UART_SetConfig+0x4e4>)
 80088d6:	fba3 2301 	umull	r2, r3, r3, r1
 80088da:	095b      	lsrs	r3, r3, #5
 80088dc:	2264      	movs	r2, #100	; 0x64
 80088de:	fb02 f303 	mul.w	r3, r2, r3
 80088e2:	1acb      	subs	r3, r1, r3
 80088e4:	011b      	lsls	r3, r3, #4
 80088e6:	3332      	adds	r3, #50	; 0x32
 80088e8:	4a33      	ldr	r2, [pc, #204]	; (80089b8 <UART_SetConfig+0x4e4>)
 80088ea:	fba2 2303 	umull	r2, r3, r2, r3
 80088ee:	095b      	lsrs	r3, r3, #5
 80088f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80088f4:	441c      	add	r4, r3
 80088f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088fa:	2200      	movs	r2, #0
 80088fc:	673b      	str	r3, [r7, #112]	; 0x70
 80088fe:	677a      	str	r2, [r7, #116]	; 0x74
 8008900:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008904:	4642      	mov	r2, r8
 8008906:	464b      	mov	r3, r9
 8008908:	1891      	adds	r1, r2, r2
 800890a:	60b9      	str	r1, [r7, #8]
 800890c:	415b      	adcs	r3, r3
 800890e:	60fb      	str	r3, [r7, #12]
 8008910:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008914:	4641      	mov	r1, r8
 8008916:	1851      	adds	r1, r2, r1
 8008918:	6039      	str	r1, [r7, #0]
 800891a:	4649      	mov	r1, r9
 800891c:	414b      	adcs	r3, r1
 800891e:	607b      	str	r3, [r7, #4]
 8008920:	f04f 0200 	mov.w	r2, #0
 8008924:	f04f 0300 	mov.w	r3, #0
 8008928:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800892c:	4659      	mov	r1, fp
 800892e:	00cb      	lsls	r3, r1, #3
 8008930:	4651      	mov	r1, sl
 8008932:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008936:	4651      	mov	r1, sl
 8008938:	00ca      	lsls	r2, r1, #3
 800893a:	4610      	mov	r0, r2
 800893c:	4619      	mov	r1, r3
 800893e:	4603      	mov	r3, r0
 8008940:	4642      	mov	r2, r8
 8008942:	189b      	adds	r3, r3, r2
 8008944:	66bb      	str	r3, [r7, #104]	; 0x68
 8008946:	464b      	mov	r3, r9
 8008948:	460a      	mov	r2, r1
 800894a:	eb42 0303 	adc.w	r3, r2, r3
 800894e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	663b      	str	r3, [r7, #96]	; 0x60
 800895a:	667a      	str	r2, [r7, #100]	; 0x64
 800895c:	f04f 0200 	mov.w	r2, #0
 8008960:	f04f 0300 	mov.w	r3, #0
 8008964:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008968:	4649      	mov	r1, r9
 800896a:	008b      	lsls	r3, r1, #2
 800896c:	4641      	mov	r1, r8
 800896e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008972:	4641      	mov	r1, r8
 8008974:	008a      	lsls	r2, r1, #2
 8008976:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800897a:	f7f8 f995 	bl	8000ca8 <__aeabi_uldivmod>
 800897e:	4602      	mov	r2, r0
 8008980:	460b      	mov	r3, r1
 8008982:	4b0d      	ldr	r3, [pc, #52]	; (80089b8 <UART_SetConfig+0x4e4>)
 8008984:	fba3 1302 	umull	r1, r3, r3, r2
 8008988:	095b      	lsrs	r3, r3, #5
 800898a:	2164      	movs	r1, #100	; 0x64
 800898c:	fb01 f303 	mul.w	r3, r1, r3
 8008990:	1ad3      	subs	r3, r2, r3
 8008992:	011b      	lsls	r3, r3, #4
 8008994:	3332      	adds	r3, #50	; 0x32
 8008996:	4a08      	ldr	r2, [pc, #32]	; (80089b8 <UART_SetConfig+0x4e4>)
 8008998:	fba2 2303 	umull	r2, r3, r2, r3
 800899c:	095b      	lsrs	r3, r3, #5
 800899e:	f003 020f 	and.w	r2, r3, #15
 80089a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4422      	add	r2, r4
 80089aa:	609a      	str	r2, [r3, #8]
}
 80089ac:	bf00      	nop
 80089ae:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80089b2:	46bd      	mov	sp, r7
 80089b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80089b8:	51eb851f 	.word	0x51eb851f

080089bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80089bc:	b084      	sub	sp, #16
 80089be:	b580      	push	{r7, lr}
 80089c0:	b084      	sub	sp, #16
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
 80089c6:	f107 001c 	add.w	r0, r7, #28
 80089ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80089ce:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d123      	bne.n	8008a1e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	68db      	ldr	r3, [r3, #12]
 80089e6:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80089ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	68db      	ldr	r3, [r3, #12]
 80089f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80089fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d105      	bne.n	8008a12 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	68db      	ldr	r3, [r3, #12]
 8008a0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 faa0 	bl	8008f58 <USB_CoreReset>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	73fb      	strb	r3, [r7, #15]
 8008a1c:	e01b      	b.n	8008a56 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	68db      	ldr	r3, [r3, #12]
 8008a22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 fa94 	bl	8008f58 <USB_CoreReset>
 8008a30:	4603      	mov	r3, r0
 8008a32:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008a34:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d106      	bne.n	8008a4a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a40:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	639a      	str	r2, [r3, #56]	; 0x38
 8008a48:	e005      	b.n	8008a56 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a4e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008a56:	7fbb      	ldrb	r3, [r7, #30]
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d10b      	bne.n	8008a74 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	689b      	ldr	r3, [r3, #8]
 8008a60:	f043 0206 	orr.w	r2, r3, #6
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	f043 0220 	orr.w	r2, r3, #32
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3710      	adds	r7, #16
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a80:	b004      	add	sp, #16
 8008a82:	4770      	bx	lr

08008a84 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	f023 0201 	bic.w	r2, r3, #1
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008a98:	2300      	movs	r3, #0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	370c      	adds	r7, #12
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa4:	4770      	bx	lr

08008aa6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008aa6:	b580      	push	{r7, lr}
 8008aa8:	b084      	sub	sp, #16
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	6078      	str	r0, [r7, #4]
 8008aae:	460b      	mov	r3, r1
 8008ab0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	68db      	ldr	r3, [r3, #12]
 8008aba:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008ac2:	78fb      	ldrb	r3, [r7, #3]
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	d115      	bne.n	8008af4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	68db      	ldr	r3, [r3, #12]
 8008acc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008ad4:	200a      	movs	r0, #10
 8008ad6:	f7fa fec7 	bl	8003868 <HAL_Delay>
      ms += 10U;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	330a      	adds	r3, #10
 8008ade:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 fa2b 	bl	8008f3c <USB_GetMode>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d01e      	beq.n	8008b2a <USB_SetCurrentMode+0x84>
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2bc7      	cmp	r3, #199	; 0xc7
 8008af0:	d9f0      	bls.n	8008ad4 <USB_SetCurrentMode+0x2e>
 8008af2:	e01a      	b.n	8008b2a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008af4:	78fb      	ldrb	r3, [r7, #3]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d115      	bne.n	8008b26 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	68db      	ldr	r3, [r3, #12]
 8008afe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008b06:	200a      	movs	r0, #10
 8008b08:	f7fa feae 	bl	8003868 <HAL_Delay>
      ms += 10U;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	330a      	adds	r3, #10
 8008b10:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 fa12 	bl	8008f3c <USB_GetMode>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d005      	beq.n	8008b2a <USB_SetCurrentMode+0x84>
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2bc7      	cmp	r3, #199	; 0xc7
 8008b22:	d9f0      	bls.n	8008b06 <USB_SetCurrentMode+0x60>
 8008b24:	e001      	b.n	8008b2a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008b26:	2301      	movs	r3, #1
 8008b28:	e005      	b.n	8008b36 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2bc8      	cmp	r3, #200	; 0xc8
 8008b2e:	d101      	bne.n	8008b34 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008b30:	2301      	movs	r3, #1
 8008b32:	e000      	b.n	8008b36 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008b34:	2300      	movs	r3, #0
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3710      	adds	r7, #16
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
	...

08008b40 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008b40:	b084      	sub	sp, #16
 8008b42:	b580      	push	{r7, lr}
 8008b44:	b086      	sub	sp, #24
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
 8008b4a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008b4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008b52:	2300      	movs	r3, #0
 8008b54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	613b      	str	r3, [r7, #16]
 8008b5e:	e009      	b.n	8008b74 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008b60:	687a      	ldr	r2, [r7, #4]
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	3340      	adds	r3, #64	; 0x40
 8008b66:	009b      	lsls	r3, r3, #2
 8008b68:	4413      	add	r3, r2
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	3301      	adds	r3, #1
 8008b72:	613b      	str	r3, [r7, #16]
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	2b0e      	cmp	r3, #14
 8008b78:	d9f2      	bls.n	8008b60 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008b7a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d11c      	bne.n	8008bbc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	68fa      	ldr	r2, [r7, #12]
 8008b8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b90:	f043 0302 	orr.w	r3, r3, #2
 8008b94:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b9a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	639a      	str	r2, [r3, #56]	; 0x38
 8008bba:	e00b      	b.n	8008bd4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bcc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008bda:	461a      	mov	r2, r3
 8008bdc:	2300      	movs	r3, #0
 8008bde:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008be0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d10d      	bne.n	8008c04 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008be8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d104      	bne.n	8008bfa <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008bf0:	2100      	movs	r1, #0
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 f968 	bl	8008ec8 <USB_SetDevSpeed>
 8008bf8:	e008      	b.n	8008c0c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008bfa:	2101      	movs	r1, #1
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 f963 	bl	8008ec8 <USB_SetDevSpeed>
 8008c02:	e003      	b.n	8008c0c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008c04:	2103      	movs	r1, #3
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 f95e 	bl	8008ec8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008c0c:	2110      	movs	r1, #16
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 f8fa 	bl	8008e08 <USB_FlushTxFifo>
 8008c14:	4603      	mov	r3, r0
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d001      	beq.n	8008c1e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 f924 	bl	8008e6c <USB_FlushRxFifo>
 8008c24:	4603      	mov	r3, r0
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d001      	beq.n	8008c2e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c34:	461a      	mov	r2, r3
 8008c36:	2300      	movs	r3, #0
 8008c38:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c40:	461a      	mov	r2, r3
 8008c42:	2300      	movs	r3, #0
 8008c44:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	2300      	movs	r3, #0
 8008c50:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c52:	2300      	movs	r3, #0
 8008c54:	613b      	str	r3, [r7, #16]
 8008c56:	e043      	b.n	8008ce0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	015a      	lsls	r2, r3, #5
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	4413      	add	r3, r2
 8008c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c6e:	d118      	bne.n	8008ca2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d10a      	bne.n	8008c8c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	015a      	lsls	r2, r3, #5
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	4413      	add	r3, r2
 8008c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c82:	461a      	mov	r2, r3
 8008c84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008c88:	6013      	str	r3, [r2, #0]
 8008c8a:	e013      	b.n	8008cb4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	015a      	lsls	r2, r3, #5
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	4413      	add	r3, r2
 8008c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c98:	461a      	mov	r2, r3
 8008c9a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008c9e:	6013      	str	r3, [r2, #0]
 8008ca0:	e008      	b.n	8008cb4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	015a      	lsls	r2, r3, #5
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	4413      	add	r3, r2
 8008caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cae:	461a      	mov	r2, r3
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	015a      	lsls	r2, r3, #5
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	4413      	add	r3, r2
 8008cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	015a      	lsls	r2, r3, #5
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	4413      	add	r3, r2
 8008cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008cd8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	3301      	adds	r3, #1
 8008cde:	613b      	str	r3, [r7, #16]
 8008ce0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d3b5      	bcc.n	8008c58 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008cec:	2300      	movs	r3, #0
 8008cee:	613b      	str	r3, [r7, #16]
 8008cf0:	e043      	b.n	8008d7a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	015a      	lsls	r2, r3, #5
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	4413      	add	r3, r2
 8008cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d08:	d118      	bne.n	8008d3c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d10a      	bne.n	8008d26 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	015a      	lsls	r2, r3, #5
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	4413      	add	r3, r2
 8008d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008d22:	6013      	str	r3, [r2, #0]
 8008d24:	e013      	b.n	8008d4e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	015a      	lsls	r2, r3, #5
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	4413      	add	r3, r2
 8008d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d32:	461a      	mov	r2, r3
 8008d34:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008d38:	6013      	str	r3, [r2, #0]
 8008d3a:	e008      	b.n	8008d4e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	015a      	lsls	r2, r3, #5
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	4413      	add	r3, r2
 8008d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d48:	461a      	mov	r2, r3
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	015a      	lsls	r2, r3, #5
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	4413      	add	r3, r2
 8008d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d5a:	461a      	mov	r2, r3
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	015a      	lsls	r2, r3, #5
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	4413      	add	r3, r2
 8008d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008d72:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	3301      	adds	r3, #1
 8008d78:	613b      	str	r3, [r7, #16]
 8008d7a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008d7e:	461a      	mov	r2, r3
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d3b5      	bcc.n	8008cf2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d8c:	691b      	ldr	r3, [r3, #16]
 8008d8e:	68fa      	ldr	r2, [r7, #12]
 8008d90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d98:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008da6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008da8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d105      	bne.n	8008dbc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	699b      	ldr	r3, [r3, #24]
 8008db4:	f043 0210 	orr.w	r2, r3, #16
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	699a      	ldr	r2, [r3, #24]
 8008dc0:	4b10      	ldr	r3, [pc, #64]	; (8008e04 <USB_DevInit+0x2c4>)
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008dc8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d005      	beq.n	8008ddc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	699b      	ldr	r3, [r3, #24]
 8008dd4:	f043 0208 	orr.w	r2, r3, #8
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008ddc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d107      	bne.n	8008df4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	699b      	ldr	r3, [r3, #24]
 8008de8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008dec:	f043 0304 	orr.w	r3, r3, #4
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008df4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3718      	adds	r7, #24
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e00:	b004      	add	sp, #16
 8008e02:	4770      	bx	lr
 8008e04:	803c3800 	.word	0x803c3800

08008e08 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b085      	sub	sp, #20
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008e12:	2300      	movs	r3, #0
 8008e14:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	3301      	adds	r3, #1
 8008e1a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008e22:	d901      	bls.n	8008e28 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008e24:	2303      	movs	r3, #3
 8008e26:	e01b      	b.n	8008e60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	691b      	ldr	r3, [r3, #16]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	daf2      	bge.n	8008e16 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008e30:	2300      	movs	r3, #0
 8008e32:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	019b      	lsls	r3, r3, #6
 8008e38:	f043 0220 	orr.w	r2, r3, #32
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	3301      	adds	r3, #1
 8008e44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008e4c:	d901      	bls.n	8008e52 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008e4e:	2303      	movs	r3, #3
 8008e50:	e006      	b.n	8008e60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	691b      	ldr	r3, [r3, #16]
 8008e56:	f003 0320 	and.w	r3, r3, #32
 8008e5a:	2b20      	cmp	r3, #32
 8008e5c:	d0f0      	beq.n	8008e40 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008e5e:	2300      	movs	r3, #0
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3714      	adds	r7, #20
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr

08008e6c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b085      	sub	sp, #20
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e74:	2300      	movs	r3, #0
 8008e76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008e84:	d901      	bls.n	8008e8a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008e86:	2303      	movs	r3, #3
 8008e88:	e018      	b.n	8008ebc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	691b      	ldr	r3, [r3, #16]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	daf2      	bge.n	8008e78 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008e92:	2300      	movs	r3, #0
 8008e94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2210      	movs	r2, #16
 8008e9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008ea8:	d901      	bls.n	8008eae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008eaa:	2303      	movs	r3, #3
 8008eac:	e006      	b.n	8008ebc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	691b      	ldr	r3, [r3, #16]
 8008eb2:	f003 0310 	and.w	r3, r3, #16
 8008eb6:	2b10      	cmp	r3, #16
 8008eb8:	d0f0      	beq.n	8008e9c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008eba:	2300      	movs	r3, #0
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3714      	adds	r7, #20
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr

08008ec8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b085      	sub	sp, #20
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	460b      	mov	r3, r1
 8008ed2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ede:	681a      	ldr	r2, [r3, #0]
 8008ee0:	78fb      	ldrb	r3, [r7, #3]
 8008ee2:	68f9      	ldr	r1, [r7, #12]
 8008ee4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008eec:	2300      	movs	r3, #0
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3714      	adds	r7, #20
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr

08008efa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008efa:	b480      	push	{r7}
 8008efc:	b085      	sub	sp, #20
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	68fa      	ldr	r2, [r7, #12]
 8008f10:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008f14:	f023 0303 	bic.w	r3, r3, #3
 8008f18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	68fa      	ldr	r2, [r7, #12]
 8008f24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f28:	f043 0302 	orr.w	r3, r3, #2
 8008f2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008f2e:	2300      	movs	r3, #0
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3714      	adds	r7, #20
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr

08008f3c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b083      	sub	sp, #12
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	695b      	ldr	r3, [r3, #20]
 8008f48:	f003 0301 	and.w	r3, r3, #1
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	370c      	adds	r7, #12
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr

08008f58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b085      	sub	sp, #20
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f60:	2300      	movs	r3, #0
 8008f62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	3301      	adds	r3, #1
 8008f68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008f70:	d901      	bls.n	8008f76 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008f72:	2303      	movs	r3, #3
 8008f74:	e01b      	b.n	8008fae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	691b      	ldr	r3, [r3, #16]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	daf2      	bge.n	8008f64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	691b      	ldr	r3, [r3, #16]
 8008f86:	f043 0201 	orr.w	r2, r3, #1
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	3301      	adds	r3, #1
 8008f92:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008f9a:	d901      	bls.n	8008fa0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008f9c:	2303      	movs	r3, #3
 8008f9e:	e006      	b.n	8008fae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	691b      	ldr	r3, [r3, #16]
 8008fa4:	f003 0301 	and.w	r3, r3, #1
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d0f0      	beq.n	8008f8e <USB_CoreReset+0x36>

  return HAL_OK;
 8008fac:	2300      	movs	r3, #0
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3714      	adds	r7, #20
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb8:	4770      	bx	lr

08008fba <__cvt>:
 8008fba:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008fbe:	ec55 4b10 	vmov	r4, r5, d0
 8008fc2:	2d00      	cmp	r5, #0
 8008fc4:	460e      	mov	r6, r1
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	462b      	mov	r3, r5
 8008fca:	bfbb      	ittet	lt
 8008fcc:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008fd0:	461d      	movlt	r5, r3
 8008fd2:	2300      	movge	r3, #0
 8008fd4:	232d      	movlt	r3, #45	; 0x2d
 8008fd6:	700b      	strb	r3, [r1, #0]
 8008fd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fda:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008fde:	4691      	mov	r9, r2
 8008fe0:	f023 0820 	bic.w	r8, r3, #32
 8008fe4:	bfbc      	itt	lt
 8008fe6:	4622      	movlt	r2, r4
 8008fe8:	4614      	movlt	r4, r2
 8008fea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008fee:	d005      	beq.n	8008ffc <__cvt+0x42>
 8008ff0:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008ff4:	d100      	bne.n	8008ff8 <__cvt+0x3e>
 8008ff6:	3601      	adds	r6, #1
 8008ff8:	2102      	movs	r1, #2
 8008ffa:	e000      	b.n	8008ffe <__cvt+0x44>
 8008ffc:	2103      	movs	r1, #3
 8008ffe:	ab03      	add	r3, sp, #12
 8009000:	9301      	str	r3, [sp, #4]
 8009002:	ab02      	add	r3, sp, #8
 8009004:	9300      	str	r3, [sp, #0]
 8009006:	ec45 4b10 	vmov	d0, r4, r5
 800900a:	4653      	mov	r3, sl
 800900c:	4632      	mov	r2, r6
 800900e:	f000 fe7b 	bl	8009d08 <_dtoa_r>
 8009012:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009016:	4607      	mov	r7, r0
 8009018:	d102      	bne.n	8009020 <__cvt+0x66>
 800901a:	f019 0f01 	tst.w	r9, #1
 800901e:	d022      	beq.n	8009066 <__cvt+0xac>
 8009020:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009024:	eb07 0906 	add.w	r9, r7, r6
 8009028:	d110      	bne.n	800904c <__cvt+0x92>
 800902a:	783b      	ldrb	r3, [r7, #0]
 800902c:	2b30      	cmp	r3, #48	; 0x30
 800902e:	d10a      	bne.n	8009046 <__cvt+0x8c>
 8009030:	2200      	movs	r2, #0
 8009032:	2300      	movs	r3, #0
 8009034:	4620      	mov	r0, r4
 8009036:	4629      	mov	r1, r5
 8009038:	f7f7 fd56 	bl	8000ae8 <__aeabi_dcmpeq>
 800903c:	b918      	cbnz	r0, 8009046 <__cvt+0x8c>
 800903e:	f1c6 0601 	rsb	r6, r6, #1
 8009042:	f8ca 6000 	str.w	r6, [sl]
 8009046:	f8da 3000 	ldr.w	r3, [sl]
 800904a:	4499      	add	r9, r3
 800904c:	2200      	movs	r2, #0
 800904e:	2300      	movs	r3, #0
 8009050:	4620      	mov	r0, r4
 8009052:	4629      	mov	r1, r5
 8009054:	f7f7 fd48 	bl	8000ae8 <__aeabi_dcmpeq>
 8009058:	b108      	cbz	r0, 800905e <__cvt+0xa4>
 800905a:	f8cd 900c 	str.w	r9, [sp, #12]
 800905e:	2230      	movs	r2, #48	; 0x30
 8009060:	9b03      	ldr	r3, [sp, #12]
 8009062:	454b      	cmp	r3, r9
 8009064:	d307      	bcc.n	8009076 <__cvt+0xbc>
 8009066:	9b03      	ldr	r3, [sp, #12]
 8009068:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800906a:	1bdb      	subs	r3, r3, r7
 800906c:	4638      	mov	r0, r7
 800906e:	6013      	str	r3, [r2, #0]
 8009070:	b004      	add	sp, #16
 8009072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009076:	1c59      	adds	r1, r3, #1
 8009078:	9103      	str	r1, [sp, #12]
 800907a:	701a      	strb	r2, [r3, #0]
 800907c:	e7f0      	b.n	8009060 <__cvt+0xa6>

0800907e <__exponent>:
 800907e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009080:	4603      	mov	r3, r0
 8009082:	2900      	cmp	r1, #0
 8009084:	bfb8      	it	lt
 8009086:	4249      	neglt	r1, r1
 8009088:	f803 2b02 	strb.w	r2, [r3], #2
 800908c:	bfb4      	ite	lt
 800908e:	222d      	movlt	r2, #45	; 0x2d
 8009090:	222b      	movge	r2, #43	; 0x2b
 8009092:	2909      	cmp	r1, #9
 8009094:	7042      	strb	r2, [r0, #1]
 8009096:	dd2a      	ble.n	80090ee <__exponent+0x70>
 8009098:	f10d 0207 	add.w	r2, sp, #7
 800909c:	4617      	mov	r7, r2
 800909e:	260a      	movs	r6, #10
 80090a0:	4694      	mov	ip, r2
 80090a2:	fb91 f5f6 	sdiv	r5, r1, r6
 80090a6:	fb06 1415 	mls	r4, r6, r5, r1
 80090aa:	3430      	adds	r4, #48	; 0x30
 80090ac:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80090b0:	460c      	mov	r4, r1
 80090b2:	2c63      	cmp	r4, #99	; 0x63
 80090b4:	f102 32ff 	add.w	r2, r2, #4294967295
 80090b8:	4629      	mov	r1, r5
 80090ba:	dcf1      	bgt.n	80090a0 <__exponent+0x22>
 80090bc:	3130      	adds	r1, #48	; 0x30
 80090be:	f1ac 0402 	sub.w	r4, ip, #2
 80090c2:	f802 1c01 	strb.w	r1, [r2, #-1]
 80090c6:	1c41      	adds	r1, r0, #1
 80090c8:	4622      	mov	r2, r4
 80090ca:	42ba      	cmp	r2, r7
 80090cc:	d30a      	bcc.n	80090e4 <__exponent+0x66>
 80090ce:	f10d 0209 	add.w	r2, sp, #9
 80090d2:	eba2 020c 	sub.w	r2, r2, ip
 80090d6:	42bc      	cmp	r4, r7
 80090d8:	bf88      	it	hi
 80090da:	2200      	movhi	r2, #0
 80090dc:	4413      	add	r3, r2
 80090de:	1a18      	subs	r0, r3, r0
 80090e0:	b003      	add	sp, #12
 80090e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090e4:	f812 5b01 	ldrb.w	r5, [r2], #1
 80090e8:	f801 5f01 	strb.w	r5, [r1, #1]!
 80090ec:	e7ed      	b.n	80090ca <__exponent+0x4c>
 80090ee:	2330      	movs	r3, #48	; 0x30
 80090f0:	3130      	adds	r1, #48	; 0x30
 80090f2:	7083      	strb	r3, [r0, #2]
 80090f4:	70c1      	strb	r1, [r0, #3]
 80090f6:	1d03      	adds	r3, r0, #4
 80090f8:	e7f1      	b.n	80090de <__exponent+0x60>
	...

080090fc <_printf_float>:
 80090fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009100:	ed2d 8b02 	vpush	{d8}
 8009104:	b08d      	sub	sp, #52	; 0x34
 8009106:	460c      	mov	r4, r1
 8009108:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800910c:	4616      	mov	r6, r2
 800910e:	461f      	mov	r7, r3
 8009110:	4605      	mov	r5, r0
 8009112:	f000 fcf9 	bl	8009b08 <_localeconv_r>
 8009116:	f8d0 a000 	ldr.w	sl, [r0]
 800911a:	4650      	mov	r0, sl
 800911c:	f7f7 f8b8 	bl	8000290 <strlen>
 8009120:	2300      	movs	r3, #0
 8009122:	930a      	str	r3, [sp, #40]	; 0x28
 8009124:	6823      	ldr	r3, [r4, #0]
 8009126:	9305      	str	r3, [sp, #20]
 8009128:	f8d8 3000 	ldr.w	r3, [r8]
 800912c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009130:	3307      	adds	r3, #7
 8009132:	f023 0307 	bic.w	r3, r3, #7
 8009136:	f103 0208 	add.w	r2, r3, #8
 800913a:	f8c8 2000 	str.w	r2, [r8]
 800913e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009142:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009146:	9307      	str	r3, [sp, #28]
 8009148:	f8cd 8018 	str.w	r8, [sp, #24]
 800914c:	ee08 0a10 	vmov	s16, r0
 8009150:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009154:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009158:	4b9e      	ldr	r3, [pc, #632]	; (80093d4 <_printf_float+0x2d8>)
 800915a:	f04f 32ff 	mov.w	r2, #4294967295
 800915e:	f7f7 fcf5 	bl	8000b4c <__aeabi_dcmpun>
 8009162:	bb88      	cbnz	r0, 80091c8 <_printf_float+0xcc>
 8009164:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009168:	4b9a      	ldr	r3, [pc, #616]	; (80093d4 <_printf_float+0x2d8>)
 800916a:	f04f 32ff 	mov.w	r2, #4294967295
 800916e:	f7f7 fccf 	bl	8000b10 <__aeabi_dcmple>
 8009172:	bb48      	cbnz	r0, 80091c8 <_printf_float+0xcc>
 8009174:	2200      	movs	r2, #0
 8009176:	2300      	movs	r3, #0
 8009178:	4640      	mov	r0, r8
 800917a:	4649      	mov	r1, r9
 800917c:	f7f7 fcbe 	bl	8000afc <__aeabi_dcmplt>
 8009180:	b110      	cbz	r0, 8009188 <_printf_float+0x8c>
 8009182:	232d      	movs	r3, #45	; 0x2d
 8009184:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009188:	4a93      	ldr	r2, [pc, #588]	; (80093d8 <_printf_float+0x2dc>)
 800918a:	4b94      	ldr	r3, [pc, #592]	; (80093dc <_printf_float+0x2e0>)
 800918c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009190:	bf94      	ite	ls
 8009192:	4690      	movls	r8, r2
 8009194:	4698      	movhi	r8, r3
 8009196:	2303      	movs	r3, #3
 8009198:	6123      	str	r3, [r4, #16]
 800919a:	9b05      	ldr	r3, [sp, #20]
 800919c:	f023 0304 	bic.w	r3, r3, #4
 80091a0:	6023      	str	r3, [r4, #0]
 80091a2:	f04f 0900 	mov.w	r9, #0
 80091a6:	9700      	str	r7, [sp, #0]
 80091a8:	4633      	mov	r3, r6
 80091aa:	aa0b      	add	r2, sp, #44	; 0x2c
 80091ac:	4621      	mov	r1, r4
 80091ae:	4628      	mov	r0, r5
 80091b0:	f000 f9da 	bl	8009568 <_printf_common>
 80091b4:	3001      	adds	r0, #1
 80091b6:	f040 8090 	bne.w	80092da <_printf_float+0x1de>
 80091ba:	f04f 30ff 	mov.w	r0, #4294967295
 80091be:	b00d      	add	sp, #52	; 0x34
 80091c0:	ecbd 8b02 	vpop	{d8}
 80091c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091c8:	4642      	mov	r2, r8
 80091ca:	464b      	mov	r3, r9
 80091cc:	4640      	mov	r0, r8
 80091ce:	4649      	mov	r1, r9
 80091d0:	f7f7 fcbc 	bl	8000b4c <__aeabi_dcmpun>
 80091d4:	b140      	cbz	r0, 80091e8 <_printf_float+0xec>
 80091d6:	464b      	mov	r3, r9
 80091d8:	2b00      	cmp	r3, #0
 80091da:	bfbc      	itt	lt
 80091dc:	232d      	movlt	r3, #45	; 0x2d
 80091de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80091e2:	4a7f      	ldr	r2, [pc, #508]	; (80093e0 <_printf_float+0x2e4>)
 80091e4:	4b7f      	ldr	r3, [pc, #508]	; (80093e4 <_printf_float+0x2e8>)
 80091e6:	e7d1      	b.n	800918c <_printf_float+0x90>
 80091e8:	6863      	ldr	r3, [r4, #4]
 80091ea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80091ee:	9206      	str	r2, [sp, #24]
 80091f0:	1c5a      	adds	r2, r3, #1
 80091f2:	d13f      	bne.n	8009274 <_printf_float+0x178>
 80091f4:	2306      	movs	r3, #6
 80091f6:	6063      	str	r3, [r4, #4]
 80091f8:	9b05      	ldr	r3, [sp, #20]
 80091fa:	6861      	ldr	r1, [r4, #4]
 80091fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009200:	2300      	movs	r3, #0
 8009202:	9303      	str	r3, [sp, #12]
 8009204:	ab0a      	add	r3, sp, #40	; 0x28
 8009206:	e9cd b301 	strd	fp, r3, [sp, #4]
 800920a:	ab09      	add	r3, sp, #36	; 0x24
 800920c:	ec49 8b10 	vmov	d0, r8, r9
 8009210:	9300      	str	r3, [sp, #0]
 8009212:	6022      	str	r2, [r4, #0]
 8009214:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009218:	4628      	mov	r0, r5
 800921a:	f7ff fece 	bl	8008fba <__cvt>
 800921e:	9b06      	ldr	r3, [sp, #24]
 8009220:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009222:	2b47      	cmp	r3, #71	; 0x47
 8009224:	4680      	mov	r8, r0
 8009226:	d108      	bne.n	800923a <_printf_float+0x13e>
 8009228:	1cc8      	adds	r0, r1, #3
 800922a:	db02      	blt.n	8009232 <_printf_float+0x136>
 800922c:	6863      	ldr	r3, [r4, #4]
 800922e:	4299      	cmp	r1, r3
 8009230:	dd41      	ble.n	80092b6 <_printf_float+0x1ba>
 8009232:	f1ab 0302 	sub.w	r3, fp, #2
 8009236:	fa5f fb83 	uxtb.w	fp, r3
 800923a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800923e:	d820      	bhi.n	8009282 <_printf_float+0x186>
 8009240:	3901      	subs	r1, #1
 8009242:	465a      	mov	r2, fp
 8009244:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009248:	9109      	str	r1, [sp, #36]	; 0x24
 800924a:	f7ff ff18 	bl	800907e <__exponent>
 800924e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009250:	1813      	adds	r3, r2, r0
 8009252:	2a01      	cmp	r2, #1
 8009254:	4681      	mov	r9, r0
 8009256:	6123      	str	r3, [r4, #16]
 8009258:	dc02      	bgt.n	8009260 <_printf_float+0x164>
 800925a:	6822      	ldr	r2, [r4, #0]
 800925c:	07d2      	lsls	r2, r2, #31
 800925e:	d501      	bpl.n	8009264 <_printf_float+0x168>
 8009260:	3301      	adds	r3, #1
 8009262:	6123      	str	r3, [r4, #16]
 8009264:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009268:	2b00      	cmp	r3, #0
 800926a:	d09c      	beq.n	80091a6 <_printf_float+0xaa>
 800926c:	232d      	movs	r3, #45	; 0x2d
 800926e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009272:	e798      	b.n	80091a6 <_printf_float+0xaa>
 8009274:	9a06      	ldr	r2, [sp, #24]
 8009276:	2a47      	cmp	r2, #71	; 0x47
 8009278:	d1be      	bne.n	80091f8 <_printf_float+0xfc>
 800927a:	2b00      	cmp	r3, #0
 800927c:	d1bc      	bne.n	80091f8 <_printf_float+0xfc>
 800927e:	2301      	movs	r3, #1
 8009280:	e7b9      	b.n	80091f6 <_printf_float+0xfa>
 8009282:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009286:	d118      	bne.n	80092ba <_printf_float+0x1be>
 8009288:	2900      	cmp	r1, #0
 800928a:	6863      	ldr	r3, [r4, #4]
 800928c:	dd0b      	ble.n	80092a6 <_printf_float+0x1aa>
 800928e:	6121      	str	r1, [r4, #16]
 8009290:	b913      	cbnz	r3, 8009298 <_printf_float+0x19c>
 8009292:	6822      	ldr	r2, [r4, #0]
 8009294:	07d0      	lsls	r0, r2, #31
 8009296:	d502      	bpl.n	800929e <_printf_float+0x1a2>
 8009298:	3301      	adds	r3, #1
 800929a:	440b      	add	r3, r1
 800929c:	6123      	str	r3, [r4, #16]
 800929e:	65a1      	str	r1, [r4, #88]	; 0x58
 80092a0:	f04f 0900 	mov.w	r9, #0
 80092a4:	e7de      	b.n	8009264 <_printf_float+0x168>
 80092a6:	b913      	cbnz	r3, 80092ae <_printf_float+0x1b2>
 80092a8:	6822      	ldr	r2, [r4, #0]
 80092aa:	07d2      	lsls	r2, r2, #31
 80092ac:	d501      	bpl.n	80092b2 <_printf_float+0x1b6>
 80092ae:	3302      	adds	r3, #2
 80092b0:	e7f4      	b.n	800929c <_printf_float+0x1a0>
 80092b2:	2301      	movs	r3, #1
 80092b4:	e7f2      	b.n	800929c <_printf_float+0x1a0>
 80092b6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80092ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092bc:	4299      	cmp	r1, r3
 80092be:	db05      	blt.n	80092cc <_printf_float+0x1d0>
 80092c0:	6823      	ldr	r3, [r4, #0]
 80092c2:	6121      	str	r1, [r4, #16]
 80092c4:	07d8      	lsls	r0, r3, #31
 80092c6:	d5ea      	bpl.n	800929e <_printf_float+0x1a2>
 80092c8:	1c4b      	adds	r3, r1, #1
 80092ca:	e7e7      	b.n	800929c <_printf_float+0x1a0>
 80092cc:	2900      	cmp	r1, #0
 80092ce:	bfd4      	ite	le
 80092d0:	f1c1 0202 	rsble	r2, r1, #2
 80092d4:	2201      	movgt	r2, #1
 80092d6:	4413      	add	r3, r2
 80092d8:	e7e0      	b.n	800929c <_printf_float+0x1a0>
 80092da:	6823      	ldr	r3, [r4, #0]
 80092dc:	055a      	lsls	r2, r3, #21
 80092de:	d407      	bmi.n	80092f0 <_printf_float+0x1f4>
 80092e0:	6923      	ldr	r3, [r4, #16]
 80092e2:	4642      	mov	r2, r8
 80092e4:	4631      	mov	r1, r6
 80092e6:	4628      	mov	r0, r5
 80092e8:	47b8      	blx	r7
 80092ea:	3001      	adds	r0, #1
 80092ec:	d12c      	bne.n	8009348 <_printf_float+0x24c>
 80092ee:	e764      	b.n	80091ba <_printf_float+0xbe>
 80092f0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80092f4:	f240 80e0 	bls.w	80094b8 <_printf_float+0x3bc>
 80092f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80092fc:	2200      	movs	r2, #0
 80092fe:	2300      	movs	r3, #0
 8009300:	f7f7 fbf2 	bl	8000ae8 <__aeabi_dcmpeq>
 8009304:	2800      	cmp	r0, #0
 8009306:	d034      	beq.n	8009372 <_printf_float+0x276>
 8009308:	4a37      	ldr	r2, [pc, #220]	; (80093e8 <_printf_float+0x2ec>)
 800930a:	2301      	movs	r3, #1
 800930c:	4631      	mov	r1, r6
 800930e:	4628      	mov	r0, r5
 8009310:	47b8      	blx	r7
 8009312:	3001      	adds	r0, #1
 8009314:	f43f af51 	beq.w	80091ba <_printf_float+0xbe>
 8009318:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800931c:	429a      	cmp	r2, r3
 800931e:	db02      	blt.n	8009326 <_printf_float+0x22a>
 8009320:	6823      	ldr	r3, [r4, #0]
 8009322:	07d8      	lsls	r0, r3, #31
 8009324:	d510      	bpl.n	8009348 <_printf_float+0x24c>
 8009326:	ee18 3a10 	vmov	r3, s16
 800932a:	4652      	mov	r2, sl
 800932c:	4631      	mov	r1, r6
 800932e:	4628      	mov	r0, r5
 8009330:	47b8      	blx	r7
 8009332:	3001      	adds	r0, #1
 8009334:	f43f af41 	beq.w	80091ba <_printf_float+0xbe>
 8009338:	f04f 0800 	mov.w	r8, #0
 800933c:	f104 091a 	add.w	r9, r4, #26
 8009340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009342:	3b01      	subs	r3, #1
 8009344:	4543      	cmp	r3, r8
 8009346:	dc09      	bgt.n	800935c <_printf_float+0x260>
 8009348:	6823      	ldr	r3, [r4, #0]
 800934a:	079b      	lsls	r3, r3, #30
 800934c:	f100 8107 	bmi.w	800955e <_printf_float+0x462>
 8009350:	68e0      	ldr	r0, [r4, #12]
 8009352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009354:	4298      	cmp	r0, r3
 8009356:	bfb8      	it	lt
 8009358:	4618      	movlt	r0, r3
 800935a:	e730      	b.n	80091be <_printf_float+0xc2>
 800935c:	2301      	movs	r3, #1
 800935e:	464a      	mov	r2, r9
 8009360:	4631      	mov	r1, r6
 8009362:	4628      	mov	r0, r5
 8009364:	47b8      	blx	r7
 8009366:	3001      	adds	r0, #1
 8009368:	f43f af27 	beq.w	80091ba <_printf_float+0xbe>
 800936c:	f108 0801 	add.w	r8, r8, #1
 8009370:	e7e6      	b.n	8009340 <_printf_float+0x244>
 8009372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009374:	2b00      	cmp	r3, #0
 8009376:	dc39      	bgt.n	80093ec <_printf_float+0x2f0>
 8009378:	4a1b      	ldr	r2, [pc, #108]	; (80093e8 <_printf_float+0x2ec>)
 800937a:	2301      	movs	r3, #1
 800937c:	4631      	mov	r1, r6
 800937e:	4628      	mov	r0, r5
 8009380:	47b8      	blx	r7
 8009382:	3001      	adds	r0, #1
 8009384:	f43f af19 	beq.w	80091ba <_printf_float+0xbe>
 8009388:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800938c:	4313      	orrs	r3, r2
 800938e:	d102      	bne.n	8009396 <_printf_float+0x29a>
 8009390:	6823      	ldr	r3, [r4, #0]
 8009392:	07d9      	lsls	r1, r3, #31
 8009394:	d5d8      	bpl.n	8009348 <_printf_float+0x24c>
 8009396:	ee18 3a10 	vmov	r3, s16
 800939a:	4652      	mov	r2, sl
 800939c:	4631      	mov	r1, r6
 800939e:	4628      	mov	r0, r5
 80093a0:	47b8      	blx	r7
 80093a2:	3001      	adds	r0, #1
 80093a4:	f43f af09 	beq.w	80091ba <_printf_float+0xbe>
 80093a8:	f04f 0900 	mov.w	r9, #0
 80093ac:	f104 0a1a 	add.w	sl, r4, #26
 80093b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093b2:	425b      	negs	r3, r3
 80093b4:	454b      	cmp	r3, r9
 80093b6:	dc01      	bgt.n	80093bc <_printf_float+0x2c0>
 80093b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093ba:	e792      	b.n	80092e2 <_printf_float+0x1e6>
 80093bc:	2301      	movs	r3, #1
 80093be:	4652      	mov	r2, sl
 80093c0:	4631      	mov	r1, r6
 80093c2:	4628      	mov	r0, r5
 80093c4:	47b8      	blx	r7
 80093c6:	3001      	adds	r0, #1
 80093c8:	f43f aef7 	beq.w	80091ba <_printf_float+0xbe>
 80093cc:	f109 0901 	add.w	r9, r9, #1
 80093d0:	e7ee      	b.n	80093b0 <_printf_float+0x2b4>
 80093d2:	bf00      	nop
 80093d4:	7fefffff 	.word	0x7fefffff
 80093d8:	0800bd50 	.word	0x0800bd50
 80093dc:	0800bd54 	.word	0x0800bd54
 80093e0:	0800bd58 	.word	0x0800bd58
 80093e4:	0800bd5c 	.word	0x0800bd5c
 80093e8:	0800bd60 	.word	0x0800bd60
 80093ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80093f0:	429a      	cmp	r2, r3
 80093f2:	bfa8      	it	ge
 80093f4:	461a      	movge	r2, r3
 80093f6:	2a00      	cmp	r2, #0
 80093f8:	4691      	mov	r9, r2
 80093fa:	dc37      	bgt.n	800946c <_printf_float+0x370>
 80093fc:	f04f 0b00 	mov.w	fp, #0
 8009400:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009404:	f104 021a 	add.w	r2, r4, #26
 8009408:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800940a:	9305      	str	r3, [sp, #20]
 800940c:	eba3 0309 	sub.w	r3, r3, r9
 8009410:	455b      	cmp	r3, fp
 8009412:	dc33      	bgt.n	800947c <_printf_float+0x380>
 8009414:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009418:	429a      	cmp	r2, r3
 800941a:	db3b      	blt.n	8009494 <_printf_float+0x398>
 800941c:	6823      	ldr	r3, [r4, #0]
 800941e:	07da      	lsls	r2, r3, #31
 8009420:	d438      	bmi.n	8009494 <_printf_float+0x398>
 8009422:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009426:	eba2 0903 	sub.w	r9, r2, r3
 800942a:	9b05      	ldr	r3, [sp, #20]
 800942c:	1ad2      	subs	r2, r2, r3
 800942e:	4591      	cmp	r9, r2
 8009430:	bfa8      	it	ge
 8009432:	4691      	movge	r9, r2
 8009434:	f1b9 0f00 	cmp.w	r9, #0
 8009438:	dc35      	bgt.n	80094a6 <_printf_float+0x3aa>
 800943a:	f04f 0800 	mov.w	r8, #0
 800943e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009442:	f104 0a1a 	add.w	sl, r4, #26
 8009446:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800944a:	1a9b      	subs	r3, r3, r2
 800944c:	eba3 0309 	sub.w	r3, r3, r9
 8009450:	4543      	cmp	r3, r8
 8009452:	f77f af79 	ble.w	8009348 <_printf_float+0x24c>
 8009456:	2301      	movs	r3, #1
 8009458:	4652      	mov	r2, sl
 800945a:	4631      	mov	r1, r6
 800945c:	4628      	mov	r0, r5
 800945e:	47b8      	blx	r7
 8009460:	3001      	adds	r0, #1
 8009462:	f43f aeaa 	beq.w	80091ba <_printf_float+0xbe>
 8009466:	f108 0801 	add.w	r8, r8, #1
 800946a:	e7ec      	b.n	8009446 <_printf_float+0x34a>
 800946c:	4613      	mov	r3, r2
 800946e:	4631      	mov	r1, r6
 8009470:	4642      	mov	r2, r8
 8009472:	4628      	mov	r0, r5
 8009474:	47b8      	blx	r7
 8009476:	3001      	adds	r0, #1
 8009478:	d1c0      	bne.n	80093fc <_printf_float+0x300>
 800947a:	e69e      	b.n	80091ba <_printf_float+0xbe>
 800947c:	2301      	movs	r3, #1
 800947e:	4631      	mov	r1, r6
 8009480:	4628      	mov	r0, r5
 8009482:	9205      	str	r2, [sp, #20]
 8009484:	47b8      	blx	r7
 8009486:	3001      	adds	r0, #1
 8009488:	f43f ae97 	beq.w	80091ba <_printf_float+0xbe>
 800948c:	9a05      	ldr	r2, [sp, #20]
 800948e:	f10b 0b01 	add.w	fp, fp, #1
 8009492:	e7b9      	b.n	8009408 <_printf_float+0x30c>
 8009494:	ee18 3a10 	vmov	r3, s16
 8009498:	4652      	mov	r2, sl
 800949a:	4631      	mov	r1, r6
 800949c:	4628      	mov	r0, r5
 800949e:	47b8      	blx	r7
 80094a0:	3001      	adds	r0, #1
 80094a2:	d1be      	bne.n	8009422 <_printf_float+0x326>
 80094a4:	e689      	b.n	80091ba <_printf_float+0xbe>
 80094a6:	9a05      	ldr	r2, [sp, #20]
 80094a8:	464b      	mov	r3, r9
 80094aa:	4442      	add	r2, r8
 80094ac:	4631      	mov	r1, r6
 80094ae:	4628      	mov	r0, r5
 80094b0:	47b8      	blx	r7
 80094b2:	3001      	adds	r0, #1
 80094b4:	d1c1      	bne.n	800943a <_printf_float+0x33e>
 80094b6:	e680      	b.n	80091ba <_printf_float+0xbe>
 80094b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094ba:	2a01      	cmp	r2, #1
 80094bc:	dc01      	bgt.n	80094c2 <_printf_float+0x3c6>
 80094be:	07db      	lsls	r3, r3, #31
 80094c0:	d53a      	bpl.n	8009538 <_printf_float+0x43c>
 80094c2:	2301      	movs	r3, #1
 80094c4:	4642      	mov	r2, r8
 80094c6:	4631      	mov	r1, r6
 80094c8:	4628      	mov	r0, r5
 80094ca:	47b8      	blx	r7
 80094cc:	3001      	adds	r0, #1
 80094ce:	f43f ae74 	beq.w	80091ba <_printf_float+0xbe>
 80094d2:	ee18 3a10 	vmov	r3, s16
 80094d6:	4652      	mov	r2, sl
 80094d8:	4631      	mov	r1, r6
 80094da:	4628      	mov	r0, r5
 80094dc:	47b8      	blx	r7
 80094de:	3001      	adds	r0, #1
 80094e0:	f43f ae6b 	beq.w	80091ba <_printf_float+0xbe>
 80094e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80094e8:	2200      	movs	r2, #0
 80094ea:	2300      	movs	r3, #0
 80094ec:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80094f0:	f7f7 fafa 	bl	8000ae8 <__aeabi_dcmpeq>
 80094f4:	b9d8      	cbnz	r0, 800952e <_printf_float+0x432>
 80094f6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80094fa:	f108 0201 	add.w	r2, r8, #1
 80094fe:	4631      	mov	r1, r6
 8009500:	4628      	mov	r0, r5
 8009502:	47b8      	blx	r7
 8009504:	3001      	adds	r0, #1
 8009506:	d10e      	bne.n	8009526 <_printf_float+0x42a>
 8009508:	e657      	b.n	80091ba <_printf_float+0xbe>
 800950a:	2301      	movs	r3, #1
 800950c:	4652      	mov	r2, sl
 800950e:	4631      	mov	r1, r6
 8009510:	4628      	mov	r0, r5
 8009512:	47b8      	blx	r7
 8009514:	3001      	adds	r0, #1
 8009516:	f43f ae50 	beq.w	80091ba <_printf_float+0xbe>
 800951a:	f108 0801 	add.w	r8, r8, #1
 800951e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009520:	3b01      	subs	r3, #1
 8009522:	4543      	cmp	r3, r8
 8009524:	dcf1      	bgt.n	800950a <_printf_float+0x40e>
 8009526:	464b      	mov	r3, r9
 8009528:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800952c:	e6da      	b.n	80092e4 <_printf_float+0x1e8>
 800952e:	f04f 0800 	mov.w	r8, #0
 8009532:	f104 0a1a 	add.w	sl, r4, #26
 8009536:	e7f2      	b.n	800951e <_printf_float+0x422>
 8009538:	2301      	movs	r3, #1
 800953a:	4642      	mov	r2, r8
 800953c:	e7df      	b.n	80094fe <_printf_float+0x402>
 800953e:	2301      	movs	r3, #1
 8009540:	464a      	mov	r2, r9
 8009542:	4631      	mov	r1, r6
 8009544:	4628      	mov	r0, r5
 8009546:	47b8      	blx	r7
 8009548:	3001      	adds	r0, #1
 800954a:	f43f ae36 	beq.w	80091ba <_printf_float+0xbe>
 800954e:	f108 0801 	add.w	r8, r8, #1
 8009552:	68e3      	ldr	r3, [r4, #12]
 8009554:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009556:	1a5b      	subs	r3, r3, r1
 8009558:	4543      	cmp	r3, r8
 800955a:	dcf0      	bgt.n	800953e <_printf_float+0x442>
 800955c:	e6f8      	b.n	8009350 <_printf_float+0x254>
 800955e:	f04f 0800 	mov.w	r8, #0
 8009562:	f104 0919 	add.w	r9, r4, #25
 8009566:	e7f4      	b.n	8009552 <_printf_float+0x456>

08009568 <_printf_common>:
 8009568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800956c:	4616      	mov	r6, r2
 800956e:	4699      	mov	r9, r3
 8009570:	688a      	ldr	r2, [r1, #8]
 8009572:	690b      	ldr	r3, [r1, #16]
 8009574:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009578:	4293      	cmp	r3, r2
 800957a:	bfb8      	it	lt
 800957c:	4613      	movlt	r3, r2
 800957e:	6033      	str	r3, [r6, #0]
 8009580:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009584:	4607      	mov	r7, r0
 8009586:	460c      	mov	r4, r1
 8009588:	b10a      	cbz	r2, 800958e <_printf_common+0x26>
 800958a:	3301      	adds	r3, #1
 800958c:	6033      	str	r3, [r6, #0]
 800958e:	6823      	ldr	r3, [r4, #0]
 8009590:	0699      	lsls	r1, r3, #26
 8009592:	bf42      	ittt	mi
 8009594:	6833      	ldrmi	r3, [r6, #0]
 8009596:	3302      	addmi	r3, #2
 8009598:	6033      	strmi	r3, [r6, #0]
 800959a:	6825      	ldr	r5, [r4, #0]
 800959c:	f015 0506 	ands.w	r5, r5, #6
 80095a0:	d106      	bne.n	80095b0 <_printf_common+0x48>
 80095a2:	f104 0a19 	add.w	sl, r4, #25
 80095a6:	68e3      	ldr	r3, [r4, #12]
 80095a8:	6832      	ldr	r2, [r6, #0]
 80095aa:	1a9b      	subs	r3, r3, r2
 80095ac:	42ab      	cmp	r3, r5
 80095ae:	dc26      	bgt.n	80095fe <_printf_common+0x96>
 80095b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80095b4:	1e13      	subs	r3, r2, #0
 80095b6:	6822      	ldr	r2, [r4, #0]
 80095b8:	bf18      	it	ne
 80095ba:	2301      	movne	r3, #1
 80095bc:	0692      	lsls	r2, r2, #26
 80095be:	d42b      	bmi.n	8009618 <_printf_common+0xb0>
 80095c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80095c4:	4649      	mov	r1, r9
 80095c6:	4638      	mov	r0, r7
 80095c8:	47c0      	blx	r8
 80095ca:	3001      	adds	r0, #1
 80095cc:	d01e      	beq.n	800960c <_printf_common+0xa4>
 80095ce:	6823      	ldr	r3, [r4, #0]
 80095d0:	6922      	ldr	r2, [r4, #16]
 80095d2:	f003 0306 	and.w	r3, r3, #6
 80095d6:	2b04      	cmp	r3, #4
 80095d8:	bf02      	ittt	eq
 80095da:	68e5      	ldreq	r5, [r4, #12]
 80095dc:	6833      	ldreq	r3, [r6, #0]
 80095de:	1aed      	subeq	r5, r5, r3
 80095e0:	68a3      	ldr	r3, [r4, #8]
 80095e2:	bf0c      	ite	eq
 80095e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80095e8:	2500      	movne	r5, #0
 80095ea:	4293      	cmp	r3, r2
 80095ec:	bfc4      	itt	gt
 80095ee:	1a9b      	subgt	r3, r3, r2
 80095f0:	18ed      	addgt	r5, r5, r3
 80095f2:	2600      	movs	r6, #0
 80095f4:	341a      	adds	r4, #26
 80095f6:	42b5      	cmp	r5, r6
 80095f8:	d11a      	bne.n	8009630 <_printf_common+0xc8>
 80095fa:	2000      	movs	r0, #0
 80095fc:	e008      	b.n	8009610 <_printf_common+0xa8>
 80095fe:	2301      	movs	r3, #1
 8009600:	4652      	mov	r2, sl
 8009602:	4649      	mov	r1, r9
 8009604:	4638      	mov	r0, r7
 8009606:	47c0      	blx	r8
 8009608:	3001      	adds	r0, #1
 800960a:	d103      	bne.n	8009614 <_printf_common+0xac>
 800960c:	f04f 30ff 	mov.w	r0, #4294967295
 8009610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009614:	3501      	adds	r5, #1
 8009616:	e7c6      	b.n	80095a6 <_printf_common+0x3e>
 8009618:	18e1      	adds	r1, r4, r3
 800961a:	1c5a      	adds	r2, r3, #1
 800961c:	2030      	movs	r0, #48	; 0x30
 800961e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009622:	4422      	add	r2, r4
 8009624:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009628:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800962c:	3302      	adds	r3, #2
 800962e:	e7c7      	b.n	80095c0 <_printf_common+0x58>
 8009630:	2301      	movs	r3, #1
 8009632:	4622      	mov	r2, r4
 8009634:	4649      	mov	r1, r9
 8009636:	4638      	mov	r0, r7
 8009638:	47c0      	blx	r8
 800963a:	3001      	adds	r0, #1
 800963c:	d0e6      	beq.n	800960c <_printf_common+0xa4>
 800963e:	3601      	adds	r6, #1
 8009640:	e7d9      	b.n	80095f6 <_printf_common+0x8e>
	...

08009644 <_printf_i>:
 8009644:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009648:	7e0f      	ldrb	r7, [r1, #24]
 800964a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800964c:	2f78      	cmp	r7, #120	; 0x78
 800964e:	4691      	mov	r9, r2
 8009650:	4680      	mov	r8, r0
 8009652:	460c      	mov	r4, r1
 8009654:	469a      	mov	sl, r3
 8009656:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800965a:	d807      	bhi.n	800966c <_printf_i+0x28>
 800965c:	2f62      	cmp	r7, #98	; 0x62
 800965e:	d80a      	bhi.n	8009676 <_printf_i+0x32>
 8009660:	2f00      	cmp	r7, #0
 8009662:	f000 80d4 	beq.w	800980e <_printf_i+0x1ca>
 8009666:	2f58      	cmp	r7, #88	; 0x58
 8009668:	f000 80c0 	beq.w	80097ec <_printf_i+0x1a8>
 800966c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009670:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009674:	e03a      	b.n	80096ec <_printf_i+0xa8>
 8009676:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800967a:	2b15      	cmp	r3, #21
 800967c:	d8f6      	bhi.n	800966c <_printf_i+0x28>
 800967e:	a101      	add	r1, pc, #4	; (adr r1, 8009684 <_printf_i+0x40>)
 8009680:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009684:	080096dd 	.word	0x080096dd
 8009688:	080096f1 	.word	0x080096f1
 800968c:	0800966d 	.word	0x0800966d
 8009690:	0800966d 	.word	0x0800966d
 8009694:	0800966d 	.word	0x0800966d
 8009698:	0800966d 	.word	0x0800966d
 800969c:	080096f1 	.word	0x080096f1
 80096a0:	0800966d 	.word	0x0800966d
 80096a4:	0800966d 	.word	0x0800966d
 80096a8:	0800966d 	.word	0x0800966d
 80096ac:	0800966d 	.word	0x0800966d
 80096b0:	080097f5 	.word	0x080097f5
 80096b4:	0800971d 	.word	0x0800971d
 80096b8:	080097af 	.word	0x080097af
 80096bc:	0800966d 	.word	0x0800966d
 80096c0:	0800966d 	.word	0x0800966d
 80096c4:	08009817 	.word	0x08009817
 80096c8:	0800966d 	.word	0x0800966d
 80096cc:	0800971d 	.word	0x0800971d
 80096d0:	0800966d 	.word	0x0800966d
 80096d4:	0800966d 	.word	0x0800966d
 80096d8:	080097b7 	.word	0x080097b7
 80096dc:	682b      	ldr	r3, [r5, #0]
 80096de:	1d1a      	adds	r2, r3, #4
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	602a      	str	r2, [r5, #0]
 80096e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80096ec:	2301      	movs	r3, #1
 80096ee:	e09f      	b.n	8009830 <_printf_i+0x1ec>
 80096f0:	6820      	ldr	r0, [r4, #0]
 80096f2:	682b      	ldr	r3, [r5, #0]
 80096f4:	0607      	lsls	r7, r0, #24
 80096f6:	f103 0104 	add.w	r1, r3, #4
 80096fa:	6029      	str	r1, [r5, #0]
 80096fc:	d501      	bpl.n	8009702 <_printf_i+0xbe>
 80096fe:	681e      	ldr	r6, [r3, #0]
 8009700:	e003      	b.n	800970a <_printf_i+0xc6>
 8009702:	0646      	lsls	r6, r0, #25
 8009704:	d5fb      	bpl.n	80096fe <_printf_i+0xba>
 8009706:	f9b3 6000 	ldrsh.w	r6, [r3]
 800970a:	2e00      	cmp	r6, #0
 800970c:	da03      	bge.n	8009716 <_printf_i+0xd2>
 800970e:	232d      	movs	r3, #45	; 0x2d
 8009710:	4276      	negs	r6, r6
 8009712:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009716:	485a      	ldr	r0, [pc, #360]	; (8009880 <_printf_i+0x23c>)
 8009718:	230a      	movs	r3, #10
 800971a:	e012      	b.n	8009742 <_printf_i+0xfe>
 800971c:	682b      	ldr	r3, [r5, #0]
 800971e:	6820      	ldr	r0, [r4, #0]
 8009720:	1d19      	adds	r1, r3, #4
 8009722:	6029      	str	r1, [r5, #0]
 8009724:	0605      	lsls	r5, r0, #24
 8009726:	d501      	bpl.n	800972c <_printf_i+0xe8>
 8009728:	681e      	ldr	r6, [r3, #0]
 800972a:	e002      	b.n	8009732 <_printf_i+0xee>
 800972c:	0641      	lsls	r1, r0, #25
 800972e:	d5fb      	bpl.n	8009728 <_printf_i+0xe4>
 8009730:	881e      	ldrh	r6, [r3, #0]
 8009732:	4853      	ldr	r0, [pc, #332]	; (8009880 <_printf_i+0x23c>)
 8009734:	2f6f      	cmp	r7, #111	; 0x6f
 8009736:	bf0c      	ite	eq
 8009738:	2308      	moveq	r3, #8
 800973a:	230a      	movne	r3, #10
 800973c:	2100      	movs	r1, #0
 800973e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009742:	6865      	ldr	r5, [r4, #4]
 8009744:	60a5      	str	r5, [r4, #8]
 8009746:	2d00      	cmp	r5, #0
 8009748:	bfa2      	ittt	ge
 800974a:	6821      	ldrge	r1, [r4, #0]
 800974c:	f021 0104 	bicge.w	r1, r1, #4
 8009750:	6021      	strge	r1, [r4, #0]
 8009752:	b90e      	cbnz	r6, 8009758 <_printf_i+0x114>
 8009754:	2d00      	cmp	r5, #0
 8009756:	d04b      	beq.n	80097f0 <_printf_i+0x1ac>
 8009758:	4615      	mov	r5, r2
 800975a:	fbb6 f1f3 	udiv	r1, r6, r3
 800975e:	fb03 6711 	mls	r7, r3, r1, r6
 8009762:	5dc7      	ldrb	r7, [r0, r7]
 8009764:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009768:	4637      	mov	r7, r6
 800976a:	42bb      	cmp	r3, r7
 800976c:	460e      	mov	r6, r1
 800976e:	d9f4      	bls.n	800975a <_printf_i+0x116>
 8009770:	2b08      	cmp	r3, #8
 8009772:	d10b      	bne.n	800978c <_printf_i+0x148>
 8009774:	6823      	ldr	r3, [r4, #0]
 8009776:	07de      	lsls	r6, r3, #31
 8009778:	d508      	bpl.n	800978c <_printf_i+0x148>
 800977a:	6923      	ldr	r3, [r4, #16]
 800977c:	6861      	ldr	r1, [r4, #4]
 800977e:	4299      	cmp	r1, r3
 8009780:	bfde      	ittt	le
 8009782:	2330      	movle	r3, #48	; 0x30
 8009784:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009788:	f105 35ff 	addle.w	r5, r5, #4294967295
 800978c:	1b52      	subs	r2, r2, r5
 800978e:	6122      	str	r2, [r4, #16]
 8009790:	f8cd a000 	str.w	sl, [sp]
 8009794:	464b      	mov	r3, r9
 8009796:	aa03      	add	r2, sp, #12
 8009798:	4621      	mov	r1, r4
 800979a:	4640      	mov	r0, r8
 800979c:	f7ff fee4 	bl	8009568 <_printf_common>
 80097a0:	3001      	adds	r0, #1
 80097a2:	d14a      	bne.n	800983a <_printf_i+0x1f6>
 80097a4:	f04f 30ff 	mov.w	r0, #4294967295
 80097a8:	b004      	add	sp, #16
 80097aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097ae:	6823      	ldr	r3, [r4, #0]
 80097b0:	f043 0320 	orr.w	r3, r3, #32
 80097b4:	6023      	str	r3, [r4, #0]
 80097b6:	4833      	ldr	r0, [pc, #204]	; (8009884 <_printf_i+0x240>)
 80097b8:	2778      	movs	r7, #120	; 0x78
 80097ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80097be:	6823      	ldr	r3, [r4, #0]
 80097c0:	6829      	ldr	r1, [r5, #0]
 80097c2:	061f      	lsls	r7, r3, #24
 80097c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80097c8:	d402      	bmi.n	80097d0 <_printf_i+0x18c>
 80097ca:	065f      	lsls	r7, r3, #25
 80097cc:	bf48      	it	mi
 80097ce:	b2b6      	uxthmi	r6, r6
 80097d0:	07df      	lsls	r7, r3, #31
 80097d2:	bf48      	it	mi
 80097d4:	f043 0320 	orrmi.w	r3, r3, #32
 80097d8:	6029      	str	r1, [r5, #0]
 80097da:	bf48      	it	mi
 80097dc:	6023      	strmi	r3, [r4, #0]
 80097de:	b91e      	cbnz	r6, 80097e8 <_printf_i+0x1a4>
 80097e0:	6823      	ldr	r3, [r4, #0]
 80097e2:	f023 0320 	bic.w	r3, r3, #32
 80097e6:	6023      	str	r3, [r4, #0]
 80097e8:	2310      	movs	r3, #16
 80097ea:	e7a7      	b.n	800973c <_printf_i+0xf8>
 80097ec:	4824      	ldr	r0, [pc, #144]	; (8009880 <_printf_i+0x23c>)
 80097ee:	e7e4      	b.n	80097ba <_printf_i+0x176>
 80097f0:	4615      	mov	r5, r2
 80097f2:	e7bd      	b.n	8009770 <_printf_i+0x12c>
 80097f4:	682b      	ldr	r3, [r5, #0]
 80097f6:	6826      	ldr	r6, [r4, #0]
 80097f8:	6961      	ldr	r1, [r4, #20]
 80097fa:	1d18      	adds	r0, r3, #4
 80097fc:	6028      	str	r0, [r5, #0]
 80097fe:	0635      	lsls	r5, r6, #24
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	d501      	bpl.n	8009808 <_printf_i+0x1c4>
 8009804:	6019      	str	r1, [r3, #0]
 8009806:	e002      	b.n	800980e <_printf_i+0x1ca>
 8009808:	0670      	lsls	r0, r6, #25
 800980a:	d5fb      	bpl.n	8009804 <_printf_i+0x1c0>
 800980c:	8019      	strh	r1, [r3, #0]
 800980e:	2300      	movs	r3, #0
 8009810:	6123      	str	r3, [r4, #16]
 8009812:	4615      	mov	r5, r2
 8009814:	e7bc      	b.n	8009790 <_printf_i+0x14c>
 8009816:	682b      	ldr	r3, [r5, #0]
 8009818:	1d1a      	adds	r2, r3, #4
 800981a:	602a      	str	r2, [r5, #0]
 800981c:	681d      	ldr	r5, [r3, #0]
 800981e:	6862      	ldr	r2, [r4, #4]
 8009820:	2100      	movs	r1, #0
 8009822:	4628      	mov	r0, r5
 8009824:	f7f6 fce4 	bl	80001f0 <memchr>
 8009828:	b108      	cbz	r0, 800982e <_printf_i+0x1ea>
 800982a:	1b40      	subs	r0, r0, r5
 800982c:	6060      	str	r0, [r4, #4]
 800982e:	6863      	ldr	r3, [r4, #4]
 8009830:	6123      	str	r3, [r4, #16]
 8009832:	2300      	movs	r3, #0
 8009834:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009838:	e7aa      	b.n	8009790 <_printf_i+0x14c>
 800983a:	6923      	ldr	r3, [r4, #16]
 800983c:	462a      	mov	r2, r5
 800983e:	4649      	mov	r1, r9
 8009840:	4640      	mov	r0, r8
 8009842:	47d0      	blx	sl
 8009844:	3001      	adds	r0, #1
 8009846:	d0ad      	beq.n	80097a4 <_printf_i+0x160>
 8009848:	6823      	ldr	r3, [r4, #0]
 800984a:	079b      	lsls	r3, r3, #30
 800984c:	d413      	bmi.n	8009876 <_printf_i+0x232>
 800984e:	68e0      	ldr	r0, [r4, #12]
 8009850:	9b03      	ldr	r3, [sp, #12]
 8009852:	4298      	cmp	r0, r3
 8009854:	bfb8      	it	lt
 8009856:	4618      	movlt	r0, r3
 8009858:	e7a6      	b.n	80097a8 <_printf_i+0x164>
 800985a:	2301      	movs	r3, #1
 800985c:	4632      	mov	r2, r6
 800985e:	4649      	mov	r1, r9
 8009860:	4640      	mov	r0, r8
 8009862:	47d0      	blx	sl
 8009864:	3001      	adds	r0, #1
 8009866:	d09d      	beq.n	80097a4 <_printf_i+0x160>
 8009868:	3501      	adds	r5, #1
 800986a:	68e3      	ldr	r3, [r4, #12]
 800986c:	9903      	ldr	r1, [sp, #12]
 800986e:	1a5b      	subs	r3, r3, r1
 8009870:	42ab      	cmp	r3, r5
 8009872:	dcf2      	bgt.n	800985a <_printf_i+0x216>
 8009874:	e7eb      	b.n	800984e <_printf_i+0x20a>
 8009876:	2500      	movs	r5, #0
 8009878:	f104 0619 	add.w	r6, r4, #25
 800987c:	e7f5      	b.n	800986a <_printf_i+0x226>
 800987e:	bf00      	nop
 8009880:	0800bd62 	.word	0x0800bd62
 8009884:	0800bd73 	.word	0x0800bd73

08009888 <std>:
 8009888:	2300      	movs	r3, #0
 800988a:	b510      	push	{r4, lr}
 800988c:	4604      	mov	r4, r0
 800988e:	e9c0 3300 	strd	r3, r3, [r0]
 8009892:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009896:	6083      	str	r3, [r0, #8]
 8009898:	8181      	strh	r1, [r0, #12]
 800989a:	6643      	str	r3, [r0, #100]	; 0x64
 800989c:	81c2      	strh	r2, [r0, #14]
 800989e:	6183      	str	r3, [r0, #24]
 80098a0:	4619      	mov	r1, r3
 80098a2:	2208      	movs	r2, #8
 80098a4:	305c      	adds	r0, #92	; 0x5c
 80098a6:	f000 f926 	bl	8009af6 <memset>
 80098aa:	4b0d      	ldr	r3, [pc, #52]	; (80098e0 <std+0x58>)
 80098ac:	6263      	str	r3, [r4, #36]	; 0x24
 80098ae:	4b0d      	ldr	r3, [pc, #52]	; (80098e4 <std+0x5c>)
 80098b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80098b2:	4b0d      	ldr	r3, [pc, #52]	; (80098e8 <std+0x60>)
 80098b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80098b6:	4b0d      	ldr	r3, [pc, #52]	; (80098ec <std+0x64>)
 80098b8:	6323      	str	r3, [r4, #48]	; 0x30
 80098ba:	4b0d      	ldr	r3, [pc, #52]	; (80098f0 <std+0x68>)
 80098bc:	6224      	str	r4, [r4, #32]
 80098be:	429c      	cmp	r4, r3
 80098c0:	d006      	beq.n	80098d0 <std+0x48>
 80098c2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80098c6:	4294      	cmp	r4, r2
 80098c8:	d002      	beq.n	80098d0 <std+0x48>
 80098ca:	33d0      	adds	r3, #208	; 0xd0
 80098cc:	429c      	cmp	r4, r3
 80098ce:	d105      	bne.n	80098dc <std+0x54>
 80098d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80098d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098d8:	f000 b98a 	b.w	8009bf0 <__retarget_lock_init_recursive>
 80098dc:	bd10      	pop	{r4, pc}
 80098de:	bf00      	nop
 80098e0:	08009a71 	.word	0x08009a71
 80098e4:	08009a93 	.word	0x08009a93
 80098e8:	08009acb 	.word	0x08009acb
 80098ec:	08009aef 	.word	0x08009aef
 80098f0:	20000eec 	.word	0x20000eec

080098f4 <stdio_exit_handler>:
 80098f4:	4a02      	ldr	r2, [pc, #8]	; (8009900 <stdio_exit_handler+0xc>)
 80098f6:	4903      	ldr	r1, [pc, #12]	; (8009904 <stdio_exit_handler+0x10>)
 80098f8:	4803      	ldr	r0, [pc, #12]	; (8009908 <stdio_exit_handler+0x14>)
 80098fa:	f000 b869 	b.w	80099d0 <_fwalk_sglue>
 80098fe:	bf00      	nop
 8009900:	2000000c 	.word	0x2000000c
 8009904:	0800b829 	.word	0x0800b829
 8009908:	20000018 	.word	0x20000018

0800990c <cleanup_stdio>:
 800990c:	6841      	ldr	r1, [r0, #4]
 800990e:	4b0c      	ldr	r3, [pc, #48]	; (8009940 <cleanup_stdio+0x34>)
 8009910:	4299      	cmp	r1, r3
 8009912:	b510      	push	{r4, lr}
 8009914:	4604      	mov	r4, r0
 8009916:	d001      	beq.n	800991c <cleanup_stdio+0x10>
 8009918:	f001 ff86 	bl	800b828 <_fflush_r>
 800991c:	68a1      	ldr	r1, [r4, #8]
 800991e:	4b09      	ldr	r3, [pc, #36]	; (8009944 <cleanup_stdio+0x38>)
 8009920:	4299      	cmp	r1, r3
 8009922:	d002      	beq.n	800992a <cleanup_stdio+0x1e>
 8009924:	4620      	mov	r0, r4
 8009926:	f001 ff7f 	bl	800b828 <_fflush_r>
 800992a:	68e1      	ldr	r1, [r4, #12]
 800992c:	4b06      	ldr	r3, [pc, #24]	; (8009948 <cleanup_stdio+0x3c>)
 800992e:	4299      	cmp	r1, r3
 8009930:	d004      	beq.n	800993c <cleanup_stdio+0x30>
 8009932:	4620      	mov	r0, r4
 8009934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009938:	f001 bf76 	b.w	800b828 <_fflush_r>
 800993c:	bd10      	pop	{r4, pc}
 800993e:	bf00      	nop
 8009940:	20000eec 	.word	0x20000eec
 8009944:	20000f54 	.word	0x20000f54
 8009948:	20000fbc 	.word	0x20000fbc

0800994c <global_stdio_init.part.0>:
 800994c:	b510      	push	{r4, lr}
 800994e:	4b0b      	ldr	r3, [pc, #44]	; (800997c <global_stdio_init.part.0+0x30>)
 8009950:	4c0b      	ldr	r4, [pc, #44]	; (8009980 <global_stdio_init.part.0+0x34>)
 8009952:	4a0c      	ldr	r2, [pc, #48]	; (8009984 <global_stdio_init.part.0+0x38>)
 8009954:	601a      	str	r2, [r3, #0]
 8009956:	4620      	mov	r0, r4
 8009958:	2200      	movs	r2, #0
 800995a:	2104      	movs	r1, #4
 800995c:	f7ff ff94 	bl	8009888 <std>
 8009960:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009964:	2201      	movs	r2, #1
 8009966:	2109      	movs	r1, #9
 8009968:	f7ff ff8e 	bl	8009888 <std>
 800996c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009970:	2202      	movs	r2, #2
 8009972:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009976:	2112      	movs	r1, #18
 8009978:	f7ff bf86 	b.w	8009888 <std>
 800997c:	20001024 	.word	0x20001024
 8009980:	20000eec 	.word	0x20000eec
 8009984:	080098f5 	.word	0x080098f5

08009988 <__sfp_lock_acquire>:
 8009988:	4801      	ldr	r0, [pc, #4]	; (8009990 <__sfp_lock_acquire+0x8>)
 800998a:	f000 b932 	b.w	8009bf2 <__retarget_lock_acquire_recursive>
 800998e:	bf00      	nop
 8009990:	2000102d 	.word	0x2000102d

08009994 <__sfp_lock_release>:
 8009994:	4801      	ldr	r0, [pc, #4]	; (800999c <__sfp_lock_release+0x8>)
 8009996:	f000 b92d 	b.w	8009bf4 <__retarget_lock_release_recursive>
 800999a:	bf00      	nop
 800999c:	2000102d 	.word	0x2000102d

080099a0 <__sinit>:
 80099a0:	b510      	push	{r4, lr}
 80099a2:	4604      	mov	r4, r0
 80099a4:	f7ff fff0 	bl	8009988 <__sfp_lock_acquire>
 80099a8:	6a23      	ldr	r3, [r4, #32]
 80099aa:	b11b      	cbz	r3, 80099b4 <__sinit+0x14>
 80099ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099b0:	f7ff bff0 	b.w	8009994 <__sfp_lock_release>
 80099b4:	4b04      	ldr	r3, [pc, #16]	; (80099c8 <__sinit+0x28>)
 80099b6:	6223      	str	r3, [r4, #32]
 80099b8:	4b04      	ldr	r3, [pc, #16]	; (80099cc <__sinit+0x2c>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d1f5      	bne.n	80099ac <__sinit+0xc>
 80099c0:	f7ff ffc4 	bl	800994c <global_stdio_init.part.0>
 80099c4:	e7f2      	b.n	80099ac <__sinit+0xc>
 80099c6:	bf00      	nop
 80099c8:	0800990d 	.word	0x0800990d
 80099cc:	20001024 	.word	0x20001024

080099d0 <_fwalk_sglue>:
 80099d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099d4:	4607      	mov	r7, r0
 80099d6:	4688      	mov	r8, r1
 80099d8:	4614      	mov	r4, r2
 80099da:	2600      	movs	r6, #0
 80099dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80099e0:	f1b9 0901 	subs.w	r9, r9, #1
 80099e4:	d505      	bpl.n	80099f2 <_fwalk_sglue+0x22>
 80099e6:	6824      	ldr	r4, [r4, #0]
 80099e8:	2c00      	cmp	r4, #0
 80099ea:	d1f7      	bne.n	80099dc <_fwalk_sglue+0xc>
 80099ec:	4630      	mov	r0, r6
 80099ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099f2:	89ab      	ldrh	r3, [r5, #12]
 80099f4:	2b01      	cmp	r3, #1
 80099f6:	d907      	bls.n	8009a08 <_fwalk_sglue+0x38>
 80099f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80099fc:	3301      	adds	r3, #1
 80099fe:	d003      	beq.n	8009a08 <_fwalk_sglue+0x38>
 8009a00:	4629      	mov	r1, r5
 8009a02:	4638      	mov	r0, r7
 8009a04:	47c0      	blx	r8
 8009a06:	4306      	orrs	r6, r0
 8009a08:	3568      	adds	r5, #104	; 0x68
 8009a0a:	e7e9      	b.n	80099e0 <_fwalk_sglue+0x10>

08009a0c <iprintf>:
 8009a0c:	b40f      	push	{r0, r1, r2, r3}
 8009a0e:	b507      	push	{r0, r1, r2, lr}
 8009a10:	4906      	ldr	r1, [pc, #24]	; (8009a2c <iprintf+0x20>)
 8009a12:	ab04      	add	r3, sp, #16
 8009a14:	6808      	ldr	r0, [r1, #0]
 8009a16:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a1a:	6881      	ldr	r1, [r0, #8]
 8009a1c:	9301      	str	r3, [sp, #4]
 8009a1e:	f001 fd63 	bl	800b4e8 <_vfiprintf_r>
 8009a22:	b003      	add	sp, #12
 8009a24:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a28:	b004      	add	sp, #16
 8009a2a:	4770      	bx	lr
 8009a2c:	20000064 	.word	0x20000064

08009a30 <siprintf>:
 8009a30:	b40e      	push	{r1, r2, r3}
 8009a32:	b500      	push	{lr}
 8009a34:	b09c      	sub	sp, #112	; 0x70
 8009a36:	ab1d      	add	r3, sp, #116	; 0x74
 8009a38:	9002      	str	r0, [sp, #8]
 8009a3a:	9006      	str	r0, [sp, #24]
 8009a3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009a40:	4809      	ldr	r0, [pc, #36]	; (8009a68 <siprintf+0x38>)
 8009a42:	9107      	str	r1, [sp, #28]
 8009a44:	9104      	str	r1, [sp, #16]
 8009a46:	4909      	ldr	r1, [pc, #36]	; (8009a6c <siprintf+0x3c>)
 8009a48:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a4c:	9105      	str	r1, [sp, #20]
 8009a4e:	6800      	ldr	r0, [r0, #0]
 8009a50:	9301      	str	r3, [sp, #4]
 8009a52:	a902      	add	r1, sp, #8
 8009a54:	f001 fc20 	bl	800b298 <_svfiprintf_r>
 8009a58:	9b02      	ldr	r3, [sp, #8]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	701a      	strb	r2, [r3, #0]
 8009a5e:	b01c      	add	sp, #112	; 0x70
 8009a60:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a64:	b003      	add	sp, #12
 8009a66:	4770      	bx	lr
 8009a68:	20000064 	.word	0x20000064
 8009a6c:	ffff0208 	.word	0xffff0208

08009a70 <__sread>:
 8009a70:	b510      	push	{r4, lr}
 8009a72:	460c      	mov	r4, r1
 8009a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a78:	f000 f86c 	bl	8009b54 <_read_r>
 8009a7c:	2800      	cmp	r0, #0
 8009a7e:	bfab      	itete	ge
 8009a80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009a82:	89a3      	ldrhlt	r3, [r4, #12]
 8009a84:	181b      	addge	r3, r3, r0
 8009a86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009a8a:	bfac      	ite	ge
 8009a8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009a8e:	81a3      	strhlt	r3, [r4, #12]
 8009a90:	bd10      	pop	{r4, pc}

08009a92 <__swrite>:
 8009a92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a96:	461f      	mov	r7, r3
 8009a98:	898b      	ldrh	r3, [r1, #12]
 8009a9a:	05db      	lsls	r3, r3, #23
 8009a9c:	4605      	mov	r5, r0
 8009a9e:	460c      	mov	r4, r1
 8009aa0:	4616      	mov	r6, r2
 8009aa2:	d505      	bpl.n	8009ab0 <__swrite+0x1e>
 8009aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009aa8:	2302      	movs	r3, #2
 8009aaa:	2200      	movs	r2, #0
 8009aac:	f000 f840 	bl	8009b30 <_lseek_r>
 8009ab0:	89a3      	ldrh	r3, [r4, #12]
 8009ab2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ab6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009aba:	81a3      	strh	r3, [r4, #12]
 8009abc:	4632      	mov	r2, r6
 8009abe:	463b      	mov	r3, r7
 8009ac0:	4628      	mov	r0, r5
 8009ac2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ac6:	f000 b857 	b.w	8009b78 <_write_r>

08009aca <__sseek>:
 8009aca:	b510      	push	{r4, lr}
 8009acc:	460c      	mov	r4, r1
 8009ace:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ad2:	f000 f82d 	bl	8009b30 <_lseek_r>
 8009ad6:	1c43      	adds	r3, r0, #1
 8009ad8:	89a3      	ldrh	r3, [r4, #12]
 8009ada:	bf15      	itete	ne
 8009adc:	6560      	strne	r0, [r4, #84]	; 0x54
 8009ade:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009ae2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009ae6:	81a3      	strheq	r3, [r4, #12]
 8009ae8:	bf18      	it	ne
 8009aea:	81a3      	strhne	r3, [r4, #12]
 8009aec:	bd10      	pop	{r4, pc}

08009aee <__sclose>:
 8009aee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009af2:	f000 b80d 	b.w	8009b10 <_close_r>

08009af6 <memset>:
 8009af6:	4402      	add	r2, r0
 8009af8:	4603      	mov	r3, r0
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d100      	bne.n	8009b00 <memset+0xa>
 8009afe:	4770      	bx	lr
 8009b00:	f803 1b01 	strb.w	r1, [r3], #1
 8009b04:	e7f9      	b.n	8009afa <memset+0x4>
	...

08009b08 <_localeconv_r>:
 8009b08:	4800      	ldr	r0, [pc, #0]	; (8009b0c <_localeconv_r+0x4>)
 8009b0a:	4770      	bx	lr
 8009b0c:	20000158 	.word	0x20000158

08009b10 <_close_r>:
 8009b10:	b538      	push	{r3, r4, r5, lr}
 8009b12:	4d06      	ldr	r5, [pc, #24]	; (8009b2c <_close_r+0x1c>)
 8009b14:	2300      	movs	r3, #0
 8009b16:	4604      	mov	r4, r0
 8009b18:	4608      	mov	r0, r1
 8009b1a:	602b      	str	r3, [r5, #0]
 8009b1c:	f7f9 fd8b 	bl	8003636 <_close>
 8009b20:	1c43      	adds	r3, r0, #1
 8009b22:	d102      	bne.n	8009b2a <_close_r+0x1a>
 8009b24:	682b      	ldr	r3, [r5, #0]
 8009b26:	b103      	cbz	r3, 8009b2a <_close_r+0x1a>
 8009b28:	6023      	str	r3, [r4, #0]
 8009b2a:	bd38      	pop	{r3, r4, r5, pc}
 8009b2c:	20001028 	.word	0x20001028

08009b30 <_lseek_r>:
 8009b30:	b538      	push	{r3, r4, r5, lr}
 8009b32:	4d07      	ldr	r5, [pc, #28]	; (8009b50 <_lseek_r+0x20>)
 8009b34:	4604      	mov	r4, r0
 8009b36:	4608      	mov	r0, r1
 8009b38:	4611      	mov	r1, r2
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	602a      	str	r2, [r5, #0]
 8009b3e:	461a      	mov	r2, r3
 8009b40:	f7f9 fda0 	bl	8003684 <_lseek>
 8009b44:	1c43      	adds	r3, r0, #1
 8009b46:	d102      	bne.n	8009b4e <_lseek_r+0x1e>
 8009b48:	682b      	ldr	r3, [r5, #0]
 8009b4a:	b103      	cbz	r3, 8009b4e <_lseek_r+0x1e>
 8009b4c:	6023      	str	r3, [r4, #0]
 8009b4e:	bd38      	pop	{r3, r4, r5, pc}
 8009b50:	20001028 	.word	0x20001028

08009b54 <_read_r>:
 8009b54:	b538      	push	{r3, r4, r5, lr}
 8009b56:	4d07      	ldr	r5, [pc, #28]	; (8009b74 <_read_r+0x20>)
 8009b58:	4604      	mov	r4, r0
 8009b5a:	4608      	mov	r0, r1
 8009b5c:	4611      	mov	r1, r2
 8009b5e:	2200      	movs	r2, #0
 8009b60:	602a      	str	r2, [r5, #0]
 8009b62:	461a      	mov	r2, r3
 8009b64:	f7f9 fd4a 	bl	80035fc <_read>
 8009b68:	1c43      	adds	r3, r0, #1
 8009b6a:	d102      	bne.n	8009b72 <_read_r+0x1e>
 8009b6c:	682b      	ldr	r3, [r5, #0]
 8009b6e:	b103      	cbz	r3, 8009b72 <_read_r+0x1e>
 8009b70:	6023      	str	r3, [r4, #0]
 8009b72:	bd38      	pop	{r3, r4, r5, pc}
 8009b74:	20001028 	.word	0x20001028

08009b78 <_write_r>:
 8009b78:	b538      	push	{r3, r4, r5, lr}
 8009b7a:	4d07      	ldr	r5, [pc, #28]	; (8009b98 <_write_r+0x20>)
 8009b7c:	4604      	mov	r4, r0
 8009b7e:	4608      	mov	r0, r1
 8009b80:	4611      	mov	r1, r2
 8009b82:	2200      	movs	r2, #0
 8009b84:	602a      	str	r2, [r5, #0]
 8009b86:	461a      	mov	r2, r3
 8009b88:	f7f7 fc7e 	bl	8001488 <_write>
 8009b8c:	1c43      	adds	r3, r0, #1
 8009b8e:	d102      	bne.n	8009b96 <_write_r+0x1e>
 8009b90:	682b      	ldr	r3, [r5, #0]
 8009b92:	b103      	cbz	r3, 8009b96 <_write_r+0x1e>
 8009b94:	6023      	str	r3, [r4, #0]
 8009b96:	bd38      	pop	{r3, r4, r5, pc}
 8009b98:	20001028 	.word	0x20001028

08009b9c <__errno>:
 8009b9c:	4b01      	ldr	r3, [pc, #4]	; (8009ba4 <__errno+0x8>)
 8009b9e:	6818      	ldr	r0, [r3, #0]
 8009ba0:	4770      	bx	lr
 8009ba2:	bf00      	nop
 8009ba4:	20000064 	.word	0x20000064

08009ba8 <__libc_init_array>:
 8009ba8:	b570      	push	{r4, r5, r6, lr}
 8009baa:	4d0d      	ldr	r5, [pc, #52]	; (8009be0 <__libc_init_array+0x38>)
 8009bac:	4c0d      	ldr	r4, [pc, #52]	; (8009be4 <__libc_init_array+0x3c>)
 8009bae:	1b64      	subs	r4, r4, r5
 8009bb0:	10a4      	asrs	r4, r4, #2
 8009bb2:	2600      	movs	r6, #0
 8009bb4:	42a6      	cmp	r6, r4
 8009bb6:	d109      	bne.n	8009bcc <__libc_init_array+0x24>
 8009bb8:	4d0b      	ldr	r5, [pc, #44]	; (8009be8 <__libc_init_array+0x40>)
 8009bba:	4c0c      	ldr	r4, [pc, #48]	; (8009bec <__libc_init_array+0x44>)
 8009bbc:	f002 f896 	bl	800bcec <_init>
 8009bc0:	1b64      	subs	r4, r4, r5
 8009bc2:	10a4      	asrs	r4, r4, #2
 8009bc4:	2600      	movs	r6, #0
 8009bc6:	42a6      	cmp	r6, r4
 8009bc8:	d105      	bne.n	8009bd6 <__libc_init_array+0x2e>
 8009bca:	bd70      	pop	{r4, r5, r6, pc}
 8009bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bd0:	4798      	blx	r3
 8009bd2:	3601      	adds	r6, #1
 8009bd4:	e7ee      	b.n	8009bb4 <__libc_init_array+0xc>
 8009bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bda:	4798      	blx	r3
 8009bdc:	3601      	adds	r6, #1
 8009bde:	e7f2      	b.n	8009bc6 <__libc_init_array+0x1e>
 8009be0:	0800c0cc 	.word	0x0800c0cc
 8009be4:	0800c0cc 	.word	0x0800c0cc
 8009be8:	0800c0cc 	.word	0x0800c0cc
 8009bec:	0800c0d0 	.word	0x0800c0d0

08009bf0 <__retarget_lock_init_recursive>:
 8009bf0:	4770      	bx	lr

08009bf2 <__retarget_lock_acquire_recursive>:
 8009bf2:	4770      	bx	lr

08009bf4 <__retarget_lock_release_recursive>:
 8009bf4:	4770      	bx	lr

08009bf6 <quorem>:
 8009bf6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bfa:	6903      	ldr	r3, [r0, #16]
 8009bfc:	690c      	ldr	r4, [r1, #16]
 8009bfe:	42a3      	cmp	r3, r4
 8009c00:	4607      	mov	r7, r0
 8009c02:	db7e      	blt.n	8009d02 <quorem+0x10c>
 8009c04:	3c01      	subs	r4, #1
 8009c06:	f101 0814 	add.w	r8, r1, #20
 8009c0a:	f100 0514 	add.w	r5, r0, #20
 8009c0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c12:	9301      	str	r3, [sp, #4]
 8009c14:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009c18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009c24:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009c28:	fbb2 f6f3 	udiv	r6, r2, r3
 8009c2c:	d331      	bcc.n	8009c92 <quorem+0x9c>
 8009c2e:	f04f 0e00 	mov.w	lr, #0
 8009c32:	4640      	mov	r0, r8
 8009c34:	46ac      	mov	ip, r5
 8009c36:	46f2      	mov	sl, lr
 8009c38:	f850 2b04 	ldr.w	r2, [r0], #4
 8009c3c:	b293      	uxth	r3, r2
 8009c3e:	fb06 e303 	mla	r3, r6, r3, lr
 8009c42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009c46:	0c1a      	lsrs	r2, r3, #16
 8009c48:	b29b      	uxth	r3, r3
 8009c4a:	ebaa 0303 	sub.w	r3, sl, r3
 8009c4e:	f8dc a000 	ldr.w	sl, [ip]
 8009c52:	fa13 f38a 	uxtah	r3, r3, sl
 8009c56:	fb06 220e 	mla	r2, r6, lr, r2
 8009c5a:	9300      	str	r3, [sp, #0]
 8009c5c:	9b00      	ldr	r3, [sp, #0]
 8009c5e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009c62:	b292      	uxth	r2, r2
 8009c64:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009c68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009c6c:	f8bd 3000 	ldrh.w	r3, [sp]
 8009c70:	4581      	cmp	r9, r0
 8009c72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c76:	f84c 3b04 	str.w	r3, [ip], #4
 8009c7a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009c7e:	d2db      	bcs.n	8009c38 <quorem+0x42>
 8009c80:	f855 300b 	ldr.w	r3, [r5, fp]
 8009c84:	b92b      	cbnz	r3, 8009c92 <quorem+0x9c>
 8009c86:	9b01      	ldr	r3, [sp, #4]
 8009c88:	3b04      	subs	r3, #4
 8009c8a:	429d      	cmp	r5, r3
 8009c8c:	461a      	mov	r2, r3
 8009c8e:	d32c      	bcc.n	8009cea <quorem+0xf4>
 8009c90:	613c      	str	r4, [r7, #16]
 8009c92:	4638      	mov	r0, r7
 8009c94:	f001 f9a6 	bl	800afe4 <__mcmp>
 8009c98:	2800      	cmp	r0, #0
 8009c9a:	db22      	blt.n	8009ce2 <quorem+0xec>
 8009c9c:	3601      	adds	r6, #1
 8009c9e:	4629      	mov	r1, r5
 8009ca0:	2000      	movs	r0, #0
 8009ca2:	f858 2b04 	ldr.w	r2, [r8], #4
 8009ca6:	f8d1 c000 	ldr.w	ip, [r1]
 8009caa:	b293      	uxth	r3, r2
 8009cac:	1ac3      	subs	r3, r0, r3
 8009cae:	0c12      	lsrs	r2, r2, #16
 8009cb0:	fa13 f38c 	uxtah	r3, r3, ip
 8009cb4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009cb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009cbc:	b29b      	uxth	r3, r3
 8009cbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009cc2:	45c1      	cmp	r9, r8
 8009cc4:	f841 3b04 	str.w	r3, [r1], #4
 8009cc8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009ccc:	d2e9      	bcs.n	8009ca2 <quorem+0xac>
 8009cce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009cd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009cd6:	b922      	cbnz	r2, 8009ce2 <quorem+0xec>
 8009cd8:	3b04      	subs	r3, #4
 8009cda:	429d      	cmp	r5, r3
 8009cdc:	461a      	mov	r2, r3
 8009cde:	d30a      	bcc.n	8009cf6 <quorem+0x100>
 8009ce0:	613c      	str	r4, [r7, #16]
 8009ce2:	4630      	mov	r0, r6
 8009ce4:	b003      	add	sp, #12
 8009ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cea:	6812      	ldr	r2, [r2, #0]
 8009cec:	3b04      	subs	r3, #4
 8009cee:	2a00      	cmp	r2, #0
 8009cf0:	d1ce      	bne.n	8009c90 <quorem+0x9a>
 8009cf2:	3c01      	subs	r4, #1
 8009cf4:	e7c9      	b.n	8009c8a <quorem+0x94>
 8009cf6:	6812      	ldr	r2, [r2, #0]
 8009cf8:	3b04      	subs	r3, #4
 8009cfa:	2a00      	cmp	r2, #0
 8009cfc:	d1f0      	bne.n	8009ce0 <quorem+0xea>
 8009cfe:	3c01      	subs	r4, #1
 8009d00:	e7eb      	b.n	8009cda <quorem+0xe4>
 8009d02:	2000      	movs	r0, #0
 8009d04:	e7ee      	b.n	8009ce4 <quorem+0xee>
	...

08009d08 <_dtoa_r>:
 8009d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d0c:	ed2d 8b04 	vpush	{d8-d9}
 8009d10:	69c5      	ldr	r5, [r0, #28]
 8009d12:	b093      	sub	sp, #76	; 0x4c
 8009d14:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009d18:	ec57 6b10 	vmov	r6, r7, d0
 8009d1c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009d20:	9107      	str	r1, [sp, #28]
 8009d22:	4604      	mov	r4, r0
 8009d24:	920a      	str	r2, [sp, #40]	; 0x28
 8009d26:	930d      	str	r3, [sp, #52]	; 0x34
 8009d28:	b975      	cbnz	r5, 8009d48 <_dtoa_r+0x40>
 8009d2a:	2010      	movs	r0, #16
 8009d2c:	f000 fe2a 	bl	800a984 <malloc>
 8009d30:	4602      	mov	r2, r0
 8009d32:	61e0      	str	r0, [r4, #28]
 8009d34:	b920      	cbnz	r0, 8009d40 <_dtoa_r+0x38>
 8009d36:	4bae      	ldr	r3, [pc, #696]	; (8009ff0 <_dtoa_r+0x2e8>)
 8009d38:	21ef      	movs	r1, #239	; 0xef
 8009d3a:	48ae      	ldr	r0, [pc, #696]	; (8009ff4 <_dtoa_r+0x2ec>)
 8009d3c:	f001 fe6a 	bl	800ba14 <__assert_func>
 8009d40:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009d44:	6005      	str	r5, [r0, #0]
 8009d46:	60c5      	str	r5, [r0, #12]
 8009d48:	69e3      	ldr	r3, [r4, #28]
 8009d4a:	6819      	ldr	r1, [r3, #0]
 8009d4c:	b151      	cbz	r1, 8009d64 <_dtoa_r+0x5c>
 8009d4e:	685a      	ldr	r2, [r3, #4]
 8009d50:	604a      	str	r2, [r1, #4]
 8009d52:	2301      	movs	r3, #1
 8009d54:	4093      	lsls	r3, r2
 8009d56:	608b      	str	r3, [r1, #8]
 8009d58:	4620      	mov	r0, r4
 8009d5a:	f000 ff07 	bl	800ab6c <_Bfree>
 8009d5e:	69e3      	ldr	r3, [r4, #28]
 8009d60:	2200      	movs	r2, #0
 8009d62:	601a      	str	r2, [r3, #0]
 8009d64:	1e3b      	subs	r3, r7, #0
 8009d66:	bfbb      	ittet	lt
 8009d68:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009d6c:	9303      	strlt	r3, [sp, #12]
 8009d6e:	2300      	movge	r3, #0
 8009d70:	2201      	movlt	r2, #1
 8009d72:	bfac      	ite	ge
 8009d74:	f8c8 3000 	strge.w	r3, [r8]
 8009d78:	f8c8 2000 	strlt.w	r2, [r8]
 8009d7c:	4b9e      	ldr	r3, [pc, #632]	; (8009ff8 <_dtoa_r+0x2f0>)
 8009d7e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009d82:	ea33 0308 	bics.w	r3, r3, r8
 8009d86:	d11b      	bne.n	8009dc0 <_dtoa_r+0xb8>
 8009d88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d8a:	f242 730f 	movw	r3, #9999	; 0x270f
 8009d8e:	6013      	str	r3, [r2, #0]
 8009d90:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009d94:	4333      	orrs	r3, r6
 8009d96:	f000 8593 	beq.w	800a8c0 <_dtoa_r+0xbb8>
 8009d9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d9c:	b963      	cbnz	r3, 8009db8 <_dtoa_r+0xb0>
 8009d9e:	4b97      	ldr	r3, [pc, #604]	; (8009ffc <_dtoa_r+0x2f4>)
 8009da0:	e027      	b.n	8009df2 <_dtoa_r+0xea>
 8009da2:	4b97      	ldr	r3, [pc, #604]	; (800a000 <_dtoa_r+0x2f8>)
 8009da4:	9300      	str	r3, [sp, #0]
 8009da6:	3308      	adds	r3, #8
 8009da8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009daa:	6013      	str	r3, [r2, #0]
 8009dac:	9800      	ldr	r0, [sp, #0]
 8009dae:	b013      	add	sp, #76	; 0x4c
 8009db0:	ecbd 8b04 	vpop	{d8-d9}
 8009db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009db8:	4b90      	ldr	r3, [pc, #576]	; (8009ffc <_dtoa_r+0x2f4>)
 8009dba:	9300      	str	r3, [sp, #0]
 8009dbc:	3303      	adds	r3, #3
 8009dbe:	e7f3      	b.n	8009da8 <_dtoa_r+0xa0>
 8009dc0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	ec51 0b17 	vmov	r0, r1, d7
 8009dca:	eeb0 8a47 	vmov.f32	s16, s14
 8009dce:	eef0 8a67 	vmov.f32	s17, s15
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	f7f6 fe88 	bl	8000ae8 <__aeabi_dcmpeq>
 8009dd8:	4681      	mov	r9, r0
 8009dda:	b160      	cbz	r0, 8009df6 <_dtoa_r+0xee>
 8009ddc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009dde:	2301      	movs	r3, #1
 8009de0:	6013      	str	r3, [r2, #0]
 8009de2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	f000 8568 	beq.w	800a8ba <_dtoa_r+0xbb2>
 8009dea:	4b86      	ldr	r3, [pc, #536]	; (800a004 <_dtoa_r+0x2fc>)
 8009dec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009dee:	6013      	str	r3, [r2, #0]
 8009df0:	3b01      	subs	r3, #1
 8009df2:	9300      	str	r3, [sp, #0]
 8009df4:	e7da      	b.n	8009dac <_dtoa_r+0xa4>
 8009df6:	aa10      	add	r2, sp, #64	; 0x40
 8009df8:	a911      	add	r1, sp, #68	; 0x44
 8009dfa:	4620      	mov	r0, r4
 8009dfc:	eeb0 0a48 	vmov.f32	s0, s16
 8009e00:	eef0 0a68 	vmov.f32	s1, s17
 8009e04:	f001 f994 	bl	800b130 <__d2b>
 8009e08:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009e0c:	4682      	mov	sl, r0
 8009e0e:	2d00      	cmp	r5, #0
 8009e10:	d07f      	beq.n	8009f12 <_dtoa_r+0x20a>
 8009e12:	ee18 3a90 	vmov	r3, s17
 8009e16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e1a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009e1e:	ec51 0b18 	vmov	r0, r1, d8
 8009e22:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009e26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009e2a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009e2e:	4619      	mov	r1, r3
 8009e30:	2200      	movs	r2, #0
 8009e32:	4b75      	ldr	r3, [pc, #468]	; (800a008 <_dtoa_r+0x300>)
 8009e34:	f7f6 fa38 	bl	80002a8 <__aeabi_dsub>
 8009e38:	a367      	add	r3, pc, #412	; (adr r3, 8009fd8 <_dtoa_r+0x2d0>)
 8009e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e3e:	f7f6 fbeb 	bl	8000618 <__aeabi_dmul>
 8009e42:	a367      	add	r3, pc, #412	; (adr r3, 8009fe0 <_dtoa_r+0x2d8>)
 8009e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e48:	f7f6 fa30 	bl	80002ac <__adddf3>
 8009e4c:	4606      	mov	r6, r0
 8009e4e:	4628      	mov	r0, r5
 8009e50:	460f      	mov	r7, r1
 8009e52:	f7f6 fb77 	bl	8000544 <__aeabi_i2d>
 8009e56:	a364      	add	r3, pc, #400	; (adr r3, 8009fe8 <_dtoa_r+0x2e0>)
 8009e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e5c:	f7f6 fbdc 	bl	8000618 <__aeabi_dmul>
 8009e60:	4602      	mov	r2, r0
 8009e62:	460b      	mov	r3, r1
 8009e64:	4630      	mov	r0, r6
 8009e66:	4639      	mov	r1, r7
 8009e68:	f7f6 fa20 	bl	80002ac <__adddf3>
 8009e6c:	4606      	mov	r6, r0
 8009e6e:	460f      	mov	r7, r1
 8009e70:	f7f6 fe82 	bl	8000b78 <__aeabi_d2iz>
 8009e74:	2200      	movs	r2, #0
 8009e76:	4683      	mov	fp, r0
 8009e78:	2300      	movs	r3, #0
 8009e7a:	4630      	mov	r0, r6
 8009e7c:	4639      	mov	r1, r7
 8009e7e:	f7f6 fe3d 	bl	8000afc <__aeabi_dcmplt>
 8009e82:	b148      	cbz	r0, 8009e98 <_dtoa_r+0x190>
 8009e84:	4658      	mov	r0, fp
 8009e86:	f7f6 fb5d 	bl	8000544 <__aeabi_i2d>
 8009e8a:	4632      	mov	r2, r6
 8009e8c:	463b      	mov	r3, r7
 8009e8e:	f7f6 fe2b 	bl	8000ae8 <__aeabi_dcmpeq>
 8009e92:	b908      	cbnz	r0, 8009e98 <_dtoa_r+0x190>
 8009e94:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009e98:	f1bb 0f16 	cmp.w	fp, #22
 8009e9c:	d857      	bhi.n	8009f4e <_dtoa_r+0x246>
 8009e9e:	4b5b      	ldr	r3, [pc, #364]	; (800a00c <_dtoa_r+0x304>)
 8009ea0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea8:	ec51 0b18 	vmov	r0, r1, d8
 8009eac:	f7f6 fe26 	bl	8000afc <__aeabi_dcmplt>
 8009eb0:	2800      	cmp	r0, #0
 8009eb2:	d04e      	beq.n	8009f52 <_dtoa_r+0x24a>
 8009eb4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009eb8:	2300      	movs	r3, #0
 8009eba:	930c      	str	r3, [sp, #48]	; 0x30
 8009ebc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009ebe:	1b5b      	subs	r3, r3, r5
 8009ec0:	1e5a      	subs	r2, r3, #1
 8009ec2:	bf45      	ittet	mi
 8009ec4:	f1c3 0301 	rsbmi	r3, r3, #1
 8009ec8:	9305      	strmi	r3, [sp, #20]
 8009eca:	2300      	movpl	r3, #0
 8009ecc:	2300      	movmi	r3, #0
 8009ece:	9206      	str	r2, [sp, #24]
 8009ed0:	bf54      	ite	pl
 8009ed2:	9305      	strpl	r3, [sp, #20]
 8009ed4:	9306      	strmi	r3, [sp, #24]
 8009ed6:	f1bb 0f00 	cmp.w	fp, #0
 8009eda:	db3c      	blt.n	8009f56 <_dtoa_r+0x24e>
 8009edc:	9b06      	ldr	r3, [sp, #24]
 8009ede:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009ee2:	445b      	add	r3, fp
 8009ee4:	9306      	str	r3, [sp, #24]
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	9308      	str	r3, [sp, #32]
 8009eea:	9b07      	ldr	r3, [sp, #28]
 8009eec:	2b09      	cmp	r3, #9
 8009eee:	d868      	bhi.n	8009fc2 <_dtoa_r+0x2ba>
 8009ef0:	2b05      	cmp	r3, #5
 8009ef2:	bfc4      	itt	gt
 8009ef4:	3b04      	subgt	r3, #4
 8009ef6:	9307      	strgt	r3, [sp, #28]
 8009ef8:	9b07      	ldr	r3, [sp, #28]
 8009efa:	f1a3 0302 	sub.w	r3, r3, #2
 8009efe:	bfcc      	ite	gt
 8009f00:	2500      	movgt	r5, #0
 8009f02:	2501      	movle	r5, #1
 8009f04:	2b03      	cmp	r3, #3
 8009f06:	f200 8085 	bhi.w	800a014 <_dtoa_r+0x30c>
 8009f0a:	e8df f003 	tbb	[pc, r3]
 8009f0e:	3b2e      	.short	0x3b2e
 8009f10:	5839      	.short	0x5839
 8009f12:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009f16:	441d      	add	r5, r3
 8009f18:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009f1c:	2b20      	cmp	r3, #32
 8009f1e:	bfc1      	itttt	gt
 8009f20:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009f24:	fa08 f803 	lslgt.w	r8, r8, r3
 8009f28:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009f2c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009f30:	bfd6      	itet	le
 8009f32:	f1c3 0320 	rsble	r3, r3, #32
 8009f36:	ea48 0003 	orrgt.w	r0, r8, r3
 8009f3a:	fa06 f003 	lslle.w	r0, r6, r3
 8009f3e:	f7f6 faf1 	bl	8000524 <__aeabi_ui2d>
 8009f42:	2201      	movs	r2, #1
 8009f44:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009f48:	3d01      	subs	r5, #1
 8009f4a:	920e      	str	r2, [sp, #56]	; 0x38
 8009f4c:	e76f      	b.n	8009e2e <_dtoa_r+0x126>
 8009f4e:	2301      	movs	r3, #1
 8009f50:	e7b3      	b.n	8009eba <_dtoa_r+0x1b2>
 8009f52:	900c      	str	r0, [sp, #48]	; 0x30
 8009f54:	e7b2      	b.n	8009ebc <_dtoa_r+0x1b4>
 8009f56:	9b05      	ldr	r3, [sp, #20]
 8009f58:	eba3 030b 	sub.w	r3, r3, fp
 8009f5c:	9305      	str	r3, [sp, #20]
 8009f5e:	f1cb 0300 	rsb	r3, fp, #0
 8009f62:	9308      	str	r3, [sp, #32]
 8009f64:	2300      	movs	r3, #0
 8009f66:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f68:	e7bf      	b.n	8009eea <_dtoa_r+0x1e2>
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	9309      	str	r3, [sp, #36]	; 0x24
 8009f6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	dc52      	bgt.n	800a01a <_dtoa_r+0x312>
 8009f74:	2301      	movs	r3, #1
 8009f76:	9301      	str	r3, [sp, #4]
 8009f78:	9304      	str	r3, [sp, #16]
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	920a      	str	r2, [sp, #40]	; 0x28
 8009f7e:	e00b      	b.n	8009f98 <_dtoa_r+0x290>
 8009f80:	2301      	movs	r3, #1
 8009f82:	e7f3      	b.n	8009f6c <_dtoa_r+0x264>
 8009f84:	2300      	movs	r3, #0
 8009f86:	9309      	str	r3, [sp, #36]	; 0x24
 8009f88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f8a:	445b      	add	r3, fp
 8009f8c:	9301      	str	r3, [sp, #4]
 8009f8e:	3301      	adds	r3, #1
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	9304      	str	r3, [sp, #16]
 8009f94:	bfb8      	it	lt
 8009f96:	2301      	movlt	r3, #1
 8009f98:	69e0      	ldr	r0, [r4, #28]
 8009f9a:	2100      	movs	r1, #0
 8009f9c:	2204      	movs	r2, #4
 8009f9e:	f102 0614 	add.w	r6, r2, #20
 8009fa2:	429e      	cmp	r6, r3
 8009fa4:	d93d      	bls.n	800a022 <_dtoa_r+0x31a>
 8009fa6:	6041      	str	r1, [r0, #4]
 8009fa8:	4620      	mov	r0, r4
 8009faa:	f000 fd9f 	bl	800aaec <_Balloc>
 8009fae:	9000      	str	r0, [sp, #0]
 8009fb0:	2800      	cmp	r0, #0
 8009fb2:	d139      	bne.n	800a028 <_dtoa_r+0x320>
 8009fb4:	4b16      	ldr	r3, [pc, #88]	; (800a010 <_dtoa_r+0x308>)
 8009fb6:	4602      	mov	r2, r0
 8009fb8:	f240 11af 	movw	r1, #431	; 0x1af
 8009fbc:	e6bd      	b.n	8009d3a <_dtoa_r+0x32>
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	e7e1      	b.n	8009f86 <_dtoa_r+0x27e>
 8009fc2:	2501      	movs	r5, #1
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	9307      	str	r3, [sp, #28]
 8009fc8:	9509      	str	r5, [sp, #36]	; 0x24
 8009fca:	f04f 33ff 	mov.w	r3, #4294967295
 8009fce:	9301      	str	r3, [sp, #4]
 8009fd0:	9304      	str	r3, [sp, #16]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	2312      	movs	r3, #18
 8009fd6:	e7d1      	b.n	8009f7c <_dtoa_r+0x274>
 8009fd8:	636f4361 	.word	0x636f4361
 8009fdc:	3fd287a7 	.word	0x3fd287a7
 8009fe0:	8b60c8b3 	.word	0x8b60c8b3
 8009fe4:	3fc68a28 	.word	0x3fc68a28
 8009fe8:	509f79fb 	.word	0x509f79fb
 8009fec:	3fd34413 	.word	0x3fd34413
 8009ff0:	0800bd91 	.word	0x0800bd91
 8009ff4:	0800bda8 	.word	0x0800bda8
 8009ff8:	7ff00000 	.word	0x7ff00000
 8009ffc:	0800bd8d 	.word	0x0800bd8d
 800a000:	0800bd84 	.word	0x0800bd84
 800a004:	0800bd61 	.word	0x0800bd61
 800a008:	3ff80000 	.word	0x3ff80000
 800a00c:	0800be98 	.word	0x0800be98
 800a010:	0800be00 	.word	0x0800be00
 800a014:	2301      	movs	r3, #1
 800a016:	9309      	str	r3, [sp, #36]	; 0x24
 800a018:	e7d7      	b.n	8009fca <_dtoa_r+0x2c2>
 800a01a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a01c:	9301      	str	r3, [sp, #4]
 800a01e:	9304      	str	r3, [sp, #16]
 800a020:	e7ba      	b.n	8009f98 <_dtoa_r+0x290>
 800a022:	3101      	adds	r1, #1
 800a024:	0052      	lsls	r2, r2, #1
 800a026:	e7ba      	b.n	8009f9e <_dtoa_r+0x296>
 800a028:	69e3      	ldr	r3, [r4, #28]
 800a02a:	9a00      	ldr	r2, [sp, #0]
 800a02c:	601a      	str	r2, [r3, #0]
 800a02e:	9b04      	ldr	r3, [sp, #16]
 800a030:	2b0e      	cmp	r3, #14
 800a032:	f200 80a8 	bhi.w	800a186 <_dtoa_r+0x47e>
 800a036:	2d00      	cmp	r5, #0
 800a038:	f000 80a5 	beq.w	800a186 <_dtoa_r+0x47e>
 800a03c:	f1bb 0f00 	cmp.w	fp, #0
 800a040:	dd38      	ble.n	800a0b4 <_dtoa_r+0x3ac>
 800a042:	4bc0      	ldr	r3, [pc, #768]	; (800a344 <_dtoa_r+0x63c>)
 800a044:	f00b 020f 	and.w	r2, fp, #15
 800a048:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a04c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a050:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a054:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a058:	d019      	beq.n	800a08e <_dtoa_r+0x386>
 800a05a:	4bbb      	ldr	r3, [pc, #748]	; (800a348 <_dtoa_r+0x640>)
 800a05c:	ec51 0b18 	vmov	r0, r1, d8
 800a060:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a064:	f7f6 fc02 	bl	800086c <__aeabi_ddiv>
 800a068:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a06c:	f008 080f 	and.w	r8, r8, #15
 800a070:	2503      	movs	r5, #3
 800a072:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a348 <_dtoa_r+0x640>
 800a076:	f1b8 0f00 	cmp.w	r8, #0
 800a07a:	d10a      	bne.n	800a092 <_dtoa_r+0x38a>
 800a07c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a080:	4632      	mov	r2, r6
 800a082:	463b      	mov	r3, r7
 800a084:	f7f6 fbf2 	bl	800086c <__aeabi_ddiv>
 800a088:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a08c:	e02b      	b.n	800a0e6 <_dtoa_r+0x3de>
 800a08e:	2502      	movs	r5, #2
 800a090:	e7ef      	b.n	800a072 <_dtoa_r+0x36a>
 800a092:	f018 0f01 	tst.w	r8, #1
 800a096:	d008      	beq.n	800a0aa <_dtoa_r+0x3a2>
 800a098:	4630      	mov	r0, r6
 800a09a:	4639      	mov	r1, r7
 800a09c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a0a0:	f7f6 faba 	bl	8000618 <__aeabi_dmul>
 800a0a4:	3501      	adds	r5, #1
 800a0a6:	4606      	mov	r6, r0
 800a0a8:	460f      	mov	r7, r1
 800a0aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a0ae:	f109 0908 	add.w	r9, r9, #8
 800a0b2:	e7e0      	b.n	800a076 <_dtoa_r+0x36e>
 800a0b4:	f000 809f 	beq.w	800a1f6 <_dtoa_r+0x4ee>
 800a0b8:	f1cb 0600 	rsb	r6, fp, #0
 800a0bc:	4ba1      	ldr	r3, [pc, #644]	; (800a344 <_dtoa_r+0x63c>)
 800a0be:	4fa2      	ldr	r7, [pc, #648]	; (800a348 <_dtoa_r+0x640>)
 800a0c0:	f006 020f 	and.w	r2, r6, #15
 800a0c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0cc:	ec51 0b18 	vmov	r0, r1, d8
 800a0d0:	f7f6 faa2 	bl	8000618 <__aeabi_dmul>
 800a0d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0d8:	1136      	asrs	r6, r6, #4
 800a0da:	2300      	movs	r3, #0
 800a0dc:	2502      	movs	r5, #2
 800a0de:	2e00      	cmp	r6, #0
 800a0e0:	d17e      	bne.n	800a1e0 <_dtoa_r+0x4d8>
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d1d0      	bne.n	800a088 <_dtoa_r+0x380>
 800a0e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0e8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	f000 8084 	beq.w	800a1fa <_dtoa_r+0x4f2>
 800a0f2:	4b96      	ldr	r3, [pc, #600]	; (800a34c <_dtoa_r+0x644>)
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	4640      	mov	r0, r8
 800a0f8:	4649      	mov	r1, r9
 800a0fa:	f7f6 fcff 	bl	8000afc <__aeabi_dcmplt>
 800a0fe:	2800      	cmp	r0, #0
 800a100:	d07b      	beq.n	800a1fa <_dtoa_r+0x4f2>
 800a102:	9b04      	ldr	r3, [sp, #16]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d078      	beq.n	800a1fa <_dtoa_r+0x4f2>
 800a108:	9b01      	ldr	r3, [sp, #4]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	dd39      	ble.n	800a182 <_dtoa_r+0x47a>
 800a10e:	4b90      	ldr	r3, [pc, #576]	; (800a350 <_dtoa_r+0x648>)
 800a110:	2200      	movs	r2, #0
 800a112:	4640      	mov	r0, r8
 800a114:	4649      	mov	r1, r9
 800a116:	f7f6 fa7f 	bl	8000618 <__aeabi_dmul>
 800a11a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a11e:	9e01      	ldr	r6, [sp, #4]
 800a120:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a124:	3501      	adds	r5, #1
 800a126:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a12a:	4628      	mov	r0, r5
 800a12c:	f7f6 fa0a 	bl	8000544 <__aeabi_i2d>
 800a130:	4642      	mov	r2, r8
 800a132:	464b      	mov	r3, r9
 800a134:	f7f6 fa70 	bl	8000618 <__aeabi_dmul>
 800a138:	4b86      	ldr	r3, [pc, #536]	; (800a354 <_dtoa_r+0x64c>)
 800a13a:	2200      	movs	r2, #0
 800a13c:	f7f6 f8b6 	bl	80002ac <__adddf3>
 800a140:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a144:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a148:	9303      	str	r3, [sp, #12]
 800a14a:	2e00      	cmp	r6, #0
 800a14c:	d158      	bne.n	800a200 <_dtoa_r+0x4f8>
 800a14e:	4b82      	ldr	r3, [pc, #520]	; (800a358 <_dtoa_r+0x650>)
 800a150:	2200      	movs	r2, #0
 800a152:	4640      	mov	r0, r8
 800a154:	4649      	mov	r1, r9
 800a156:	f7f6 f8a7 	bl	80002a8 <__aeabi_dsub>
 800a15a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a15e:	4680      	mov	r8, r0
 800a160:	4689      	mov	r9, r1
 800a162:	f7f6 fce9 	bl	8000b38 <__aeabi_dcmpgt>
 800a166:	2800      	cmp	r0, #0
 800a168:	f040 8296 	bne.w	800a698 <_dtoa_r+0x990>
 800a16c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a170:	4640      	mov	r0, r8
 800a172:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a176:	4649      	mov	r1, r9
 800a178:	f7f6 fcc0 	bl	8000afc <__aeabi_dcmplt>
 800a17c:	2800      	cmp	r0, #0
 800a17e:	f040 8289 	bne.w	800a694 <_dtoa_r+0x98c>
 800a182:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a186:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a188:	2b00      	cmp	r3, #0
 800a18a:	f2c0 814e 	blt.w	800a42a <_dtoa_r+0x722>
 800a18e:	f1bb 0f0e 	cmp.w	fp, #14
 800a192:	f300 814a 	bgt.w	800a42a <_dtoa_r+0x722>
 800a196:	4b6b      	ldr	r3, [pc, #428]	; (800a344 <_dtoa_r+0x63c>)
 800a198:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a19c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a1a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	f280 80dc 	bge.w	800a360 <_dtoa_r+0x658>
 800a1a8:	9b04      	ldr	r3, [sp, #16]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	f300 80d8 	bgt.w	800a360 <_dtoa_r+0x658>
 800a1b0:	f040 826f 	bne.w	800a692 <_dtoa_r+0x98a>
 800a1b4:	4b68      	ldr	r3, [pc, #416]	; (800a358 <_dtoa_r+0x650>)
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	4640      	mov	r0, r8
 800a1ba:	4649      	mov	r1, r9
 800a1bc:	f7f6 fa2c 	bl	8000618 <__aeabi_dmul>
 800a1c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a1c4:	f7f6 fcae 	bl	8000b24 <__aeabi_dcmpge>
 800a1c8:	9e04      	ldr	r6, [sp, #16]
 800a1ca:	4637      	mov	r7, r6
 800a1cc:	2800      	cmp	r0, #0
 800a1ce:	f040 8245 	bne.w	800a65c <_dtoa_r+0x954>
 800a1d2:	9d00      	ldr	r5, [sp, #0]
 800a1d4:	2331      	movs	r3, #49	; 0x31
 800a1d6:	f805 3b01 	strb.w	r3, [r5], #1
 800a1da:	f10b 0b01 	add.w	fp, fp, #1
 800a1de:	e241      	b.n	800a664 <_dtoa_r+0x95c>
 800a1e0:	07f2      	lsls	r2, r6, #31
 800a1e2:	d505      	bpl.n	800a1f0 <_dtoa_r+0x4e8>
 800a1e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1e8:	f7f6 fa16 	bl	8000618 <__aeabi_dmul>
 800a1ec:	3501      	adds	r5, #1
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	1076      	asrs	r6, r6, #1
 800a1f2:	3708      	adds	r7, #8
 800a1f4:	e773      	b.n	800a0de <_dtoa_r+0x3d6>
 800a1f6:	2502      	movs	r5, #2
 800a1f8:	e775      	b.n	800a0e6 <_dtoa_r+0x3de>
 800a1fa:	9e04      	ldr	r6, [sp, #16]
 800a1fc:	465f      	mov	r7, fp
 800a1fe:	e792      	b.n	800a126 <_dtoa_r+0x41e>
 800a200:	9900      	ldr	r1, [sp, #0]
 800a202:	4b50      	ldr	r3, [pc, #320]	; (800a344 <_dtoa_r+0x63c>)
 800a204:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a208:	4431      	add	r1, r6
 800a20a:	9102      	str	r1, [sp, #8]
 800a20c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a20e:	eeb0 9a47 	vmov.f32	s18, s14
 800a212:	eef0 9a67 	vmov.f32	s19, s15
 800a216:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a21a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a21e:	2900      	cmp	r1, #0
 800a220:	d044      	beq.n	800a2ac <_dtoa_r+0x5a4>
 800a222:	494e      	ldr	r1, [pc, #312]	; (800a35c <_dtoa_r+0x654>)
 800a224:	2000      	movs	r0, #0
 800a226:	f7f6 fb21 	bl	800086c <__aeabi_ddiv>
 800a22a:	ec53 2b19 	vmov	r2, r3, d9
 800a22e:	f7f6 f83b 	bl	80002a8 <__aeabi_dsub>
 800a232:	9d00      	ldr	r5, [sp, #0]
 800a234:	ec41 0b19 	vmov	d9, r0, r1
 800a238:	4649      	mov	r1, r9
 800a23a:	4640      	mov	r0, r8
 800a23c:	f7f6 fc9c 	bl	8000b78 <__aeabi_d2iz>
 800a240:	4606      	mov	r6, r0
 800a242:	f7f6 f97f 	bl	8000544 <__aeabi_i2d>
 800a246:	4602      	mov	r2, r0
 800a248:	460b      	mov	r3, r1
 800a24a:	4640      	mov	r0, r8
 800a24c:	4649      	mov	r1, r9
 800a24e:	f7f6 f82b 	bl	80002a8 <__aeabi_dsub>
 800a252:	3630      	adds	r6, #48	; 0x30
 800a254:	f805 6b01 	strb.w	r6, [r5], #1
 800a258:	ec53 2b19 	vmov	r2, r3, d9
 800a25c:	4680      	mov	r8, r0
 800a25e:	4689      	mov	r9, r1
 800a260:	f7f6 fc4c 	bl	8000afc <__aeabi_dcmplt>
 800a264:	2800      	cmp	r0, #0
 800a266:	d164      	bne.n	800a332 <_dtoa_r+0x62a>
 800a268:	4642      	mov	r2, r8
 800a26a:	464b      	mov	r3, r9
 800a26c:	4937      	ldr	r1, [pc, #220]	; (800a34c <_dtoa_r+0x644>)
 800a26e:	2000      	movs	r0, #0
 800a270:	f7f6 f81a 	bl	80002a8 <__aeabi_dsub>
 800a274:	ec53 2b19 	vmov	r2, r3, d9
 800a278:	f7f6 fc40 	bl	8000afc <__aeabi_dcmplt>
 800a27c:	2800      	cmp	r0, #0
 800a27e:	f040 80b6 	bne.w	800a3ee <_dtoa_r+0x6e6>
 800a282:	9b02      	ldr	r3, [sp, #8]
 800a284:	429d      	cmp	r5, r3
 800a286:	f43f af7c 	beq.w	800a182 <_dtoa_r+0x47a>
 800a28a:	4b31      	ldr	r3, [pc, #196]	; (800a350 <_dtoa_r+0x648>)
 800a28c:	ec51 0b19 	vmov	r0, r1, d9
 800a290:	2200      	movs	r2, #0
 800a292:	f7f6 f9c1 	bl	8000618 <__aeabi_dmul>
 800a296:	4b2e      	ldr	r3, [pc, #184]	; (800a350 <_dtoa_r+0x648>)
 800a298:	ec41 0b19 	vmov	d9, r0, r1
 800a29c:	2200      	movs	r2, #0
 800a29e:	4640      	mov	r0, r8
 800a2a0:	4649      	mov	r1, r9
 800a2a2:	f7f6 f9b9 	bl	8000618 <__aeabi_dmul>
 800a2a6:	4680      	mov	r8, r0
 800a2a8:	4689      	mov	r9, r1
 800a2aa:	e7c5      	b.n	800a238 <_dtoa_r+0x530>
 800a2ac:	ec51 0b17 	vmov	r0, r1, d7
 800a2b0:	f7f6 f9b2 	bl	8000618 <__aeabi_dmul>
 800a2b4:	9b02      	ldr	r3, [sp, #8]
 800a2b6:	9d00      	ldr	r5, [sp, #0]
 800a2b8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a2ba:	ec41 0b19 	vmov	d9, r0, r1
 800a2be:	4649      	mov	r1, r9
 800a2c0:	4640      	mov	r0, r8
 800a2c2:	f7f6 fc59 	bl	8000b78 <__aeabi_d2iz>
 800a2c6:	4606      	mov	r6, r0
 800a2c8:	f7f6 f93c 	bl	8000544 <__aeabi_i2d>
 800a2cc:	3630      	adds	r6, #48	; 0x30
 800a2ce:	4602      	mov	r2, r0
 800a2d0:	460b      	mov	r3, r1
 800a2d2:	4640      	mov	r0, r8
 800a2d4:	4649      	mov	r1, r9
 800a2d6:	f7f5 ffe7 	bl	80002a8 <__aeabi_dsub>
 800a2da:	f805 6b01 	strb.w	r6, [r5], #1
 800a2de:	9b02      	ldr	r3, [sp, #8]
 800a2e0:	429d      	cmp	r5, r3
 800a2e2:	4680      	mov	r8, r0
 800a2e4:	4689      	mov	r9, r1
 800a2e6:	f04f 0200 	mov.w	r2, #0
 800a2ea:	d124      	bne.n	800a336 <_dtoa_r+0x62e>
 800a2ec:	4b1b      	ldr	r3, [pc, #108]	; (800a35c <_dtoa_r+0x654>)
 800a2ee:	ec51 0b19 	vmov	r0, r1, d9
 800a2f2:	f7f5 ffdb 	bl	80002ac <__adddf3>
 800a2f6:	4602      	mov	r2, r0
 800a2f8:	460b      	mov	r3, r1
 800a2fa:	4640      	mov	r0, r8
 800a2fc:	4649      	mov	r1, r9
 800a2fe:	f7f6 fc1b 	bl	8000b38 <__aeabi_dcmpgt>
 800a302:	2800      	cmp	r0, #0
 800a304:	d173      	bne.n	800a3ee <_dtoa_r+0x6e6>
 800a306:	ec53 2b19 	vmov	r2, r3, d9
 800a30a:	4914      	ldr	r1, [pc, #80]	; (800a35c <_dtoa_r+0x654>)
 800a30c:	2000      	movs	r0, #0
 800a30e:	f7f5 ffcb 	bl	80002a8 <__aeabi_dsub>
 800a312:	4602      	mov	r2, r0
 800a314:	460b      	mov	r3, r1
 800a316:	4640      	mov	r0, r8
 800a318:	4649      	mov	r1, r9
 800a31a:	f7f6 fbef 	bl	8000afc <__aeabi_dcmplt>
 800a31e:	2800      	cmp	r0, #0
 800a320:	f43f af2f 	beq.w	800a182 <_dtoa_r+0x47a>
 800a324:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a326:	1e6b      	subs	r3, r5, #1
 800a328:	930f      	str	r3, [sp, #60]	; 0x3c
 800a32a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a32e:	2b30      	cmp	r3, #48	; 0x30
 800a330:	d0f8      	beq.n	800a324 <_dtoa_r+0x61c>
 800a332:	46bb      	mov	fp, r7
 800a334:	e04a      	b.n	800a3cc <_dtoa_r+0x6c4>
 800a336:	4b06      	ldr	r3, [pc, #24]	; (800a350 <_dtoa_r+0x648>)
 800a338:	f7f6 f96e 	bl	8000618 <__aeabi_dmul>
 800a33c:	4680      	mov	r8, r0
 800a33e:	4689      	mov	r9, r1
 800a340:	e7bd      	b.n	800a2be <_dtoa_r+0x5b6>
 800a342:	bf00      	nop
 800a344:	0800be98 	.word	0x0800be98
 800a348:	0800be70 	.word	0x0800be70
 800a34c:	3ff00000 	.word	0x3ff00000
 800a350:	40240000 	.word	0x40240000
 800a354:	401c0000 	.word	0x401c0000
 800a358:	40140000 	.word	0x40140000
 800a35c:	3fe00000 	.word	0x3fe00000
 800a360:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a364:	9d00      	ldr	r5, [sp, #0]
 800a366:	4642      	mov	r2, r8
 800a368:	464b      	mov	r3, r9
 800a36a:	4630      	mov	r0, r6
 800a36c:	4639      	mov	r1, r7
 800a36e:	f7f6 fa7d 	bl	800086c <__aeabi_ddiv>
 800a372:	f7f6 fc01 	bl	8000b78 <__aeabi_d2iz>
 800a376:	9001      	str	r0, [sp, #4]
 800a378:	f7f6 f8e4 	bl	8000544 <__aeabi_i2d>
 800a37c:	4642      	mov	r2, r8
 800a37e:	464b      	mov	r3, r9
 800a380:	f7f6 f94a 	bl	8000618 <__aeabi_dmul>
 800a384:	4602      	mov	r2, r0
 800a386:	460b      	mov	r3, r1
 800a388:	4630      	mov	r0, r6
 800a38a:	4639      	mov	r1, r7
 800a38c:	f7f5 ff8c 	bl	80002a8 <__aeabi_dsub>
 800a390:	9e01      	ldr	r6, [sp, #4]
 800a392:	9f04      	ldr	r7, [sp, #16]
 800a394:	3630      	adds	r6, #48	; 0x30
 800a396:	f805 6b01 	strb.w	r6, [r5], #1
 800a39a:	9e00      	ldr	r6, [sp, #0]
 800a39c:	1bae      	subs	r6, r5, r6
 800a39e:	42b7      	cmp	r7, r6
 800a3a0:	4602      	mov	r2, r0
 800a3a2:	460b      	mov	r3, r1
 800a3a4:	d134      	bne.n	800a410 <_dtoa_r+0x708>
 800a3a6:	f7f5 ff81 	bl	80002ac <__adddf3>
 800a3aa:	4642      	mov	r2, r8
 800a3ac:	464b      	mov	r3, r9
 800a3ae:	4606      	mov	r6, r0
 800a3b0:	460f      	mov	r7, r1
 800a3b2:	f7f6 fbc1 	bl	8000b38 <__aeabi_dcmpgt>
 800a3b6:	b9c8      	cbnz	r0, 800a3ec <_dtoa_r+0x6e4>
 800a3b8:	4642      	mov	r2, r8
 800a3ba:	464b      	mov	r3, r9
 800a3bc:	4630      	mov	r0, r6
 800a3be:	4639      	mov	r1, r7
 800a3c0:	f7f6 fb92 	bl	8000ae8 <__aeabi_dcmpeq>
 800a3c4:	b110      	cbz	r0, 800a3cc <_dtoa_r+0x6c4>
 800a3c6:	9b01      	ldr	r3, [sp, #4]
 800a3c8:	07db      	lsls	r3, r3, #31
 800a3ca:	d40f      	bmi.n	800a3ec <_dtoa_r+0x6e4>
 800a3cc:	4651      	mov	r1, sl
 800a3ce:	4620      	mov	r0, r4
 800a3d0:	f000 fbcc 	bl	800ab6c <_Bfree>
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a3d8:	702b      	strb	r3, [r5, #0]
 800a3da:	f10b 0301 	add.w	r3, fp, #1
 800a3de:	6013      	str	r3, [r2, #0]
 800a3e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	f43f ace2 	beq.w	8009dac <_dtoa_r+0xa4>
 800a3e8:	601d      	str	r5, [r3, #0]
 800a3ea:	e4df      	b.n	8009dac <_dtoa_r+0xa4>
 800a3ec:	465f      	mov	r7, fp
 800a3ee:	462b      	mov	r3, r5
 800a3f0:	461d      	mov	r5, r3
 800a3f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a3f6:	2a39      	cmp	r2, #57	; 0x39
 800a3f8:	d106      	bne.n	800a408 <_dtoa_r+0x700>
 800a3fa:	9a00      	ldr	r2, [sp, #0]
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d1f7      	bne.n	800a3f0 <_dtoa_r+0x6e8>
 800a400:	9900      	ldr	r1, [sp, #0]
 800a402:	2230      	movs	r2, #48	; 0x30
 800a404:	3701      	adds	r7, #1
 800a406:	700a      	strb	r2, [r1, #0]
 800a408:	781a      	ldrb	r2, [r3, #0]
 800a40a:	3201      	adds	r2, #1
 800a40c:	701a      	strb	r2, [r3, #0]
 800a40e:	e790      	b.n	800a332 <_dtoa_r+0x62a>
 800a410:	4ba3      	ldr	r3, [pc, #652]	; (800a6a0 <_dtoa_r+0x998>)
 800a412:	2200      	movs	r2, #0
 800a414:	f7f6 f900 	bl	8000618 <__aeabi_dmul>
 800a418:	2200      	movs	r2, #0
 800a41a:	2300      	movs	r3, #0
 800a41c:	4606      	mov	r6, r0
 800a41e:	460f      	mov	r7, r1
 800a420:	f7f6 fb62 	bl	8000ae8 <__aeabi_dcmpeq>
 800a424:	2800      	cmp	r0, #0
 800a426:	d09e      	beq.n	800a366 <_dtoa_r+0x65e>
 800a428:	e7d0      	b.n	800a3cc <_dtoa_r+0x6c4>
 800a42a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a42c:	2a00      	cmp	r2, #0
 800a42e:	f000 80ca 	beq.w	800a5c6 <_dtoa_r+0x8be>
 800a432:	9a07      	ldr	r2, [sp, #28]
 800a434:	2a01      	cmp	r2, #1
 800a436:	f300 80ad 	bgt.w	800a594 <_dtoa_r+0x88c>
 800a43a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a43c:	2a00      	cmp	r2, #0
 800a43e:	f000 80a5 	beq.w	800a58c <_dtoa_r+0x884>
 800a442:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a446:	9e08      	ldr	r6, [sp, #32]
 800a448:	9d05      	ldr	r5, [sp, #20]
 800a44a:	9a05      	ldr	r2, [sp, #20]
 800a44c:	441a      	add	r2, r3
 800a44e:	9205      	str	r2, [sp, #20]
 800a450:	9a06      	ldr	r2, [sp, #24]
 800a452:	2101      	movs	r1, #1
 800a454:	441a      	add	r2, r3
 800a456:	4620      	mov	r0, r4
 800a458:	9206      	str	r2, [sp, #24]
 800a45a:	f000 fc3d 	bl	800acd8 <__i2b>
 800a45e:	4607      	mov	r7, r0
 800a460:	b165      	cbz	r5, 800a47c <_dtoa_r+0x774>
 800a462:	9b06      	ldr	r3, [sp, #24]
 800a464:	2b00      	cmp	r3, #0
 800a466:	dd09      	ble.n	800a47c <_dtoa_r+0x774>
 800a468:	42ab      	cmp	r3, r5
 800a46a:	9a05      	ldr	r2, [sp, #20]
 800a46c:	bfa8      	it	ge
 800a46e:	462b      	movge	r3, r5
 800a470:	1ad2      	subs	r2, r2, r3
 800a472:	9205      	str	r2, [sp, #20]
 800a474:	9a06      	ldr	r2, [sp, #24]
 800a476:	1aed      	subs	r5, r5, r3
 800a478:	1ad3      	subs	r3, r2, r3
 800a47a:	9306      	str	r3, [sp, #24]
 800a47c:	9b08      	ldr	r3, [sp, #32]
 800a47e:	b1f3      	cbz	r3, 800a4be <_dtoa_r+0x7b6>
 800a480:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a482:	2b00      	cmp	r3, #0
 800a484:	f000 80a3 	beq.w	800a5ce <_dtoa_r+0x8c6>
 800a488:	2e00      	cmp	r6, #0
 800a48a:	dd10      	ble.n	800a4ae <_dtoa_r+0x7a6>
 800a48c:	4639      	mov	r1, r7
 800a48e:	4632      	mov	r2, r6
 800a490:	4620      	mov	r0, r4
 800a492:	f000 fce1 	bl	800ae58 <__pow5mult>
 800a496:	4652      	mov	r2, sl
 800a498:	4601      	mov	r1, r0
 800a49a:	4607      	mov	r7, r0
 800a49c:	4620      	mov	r0, r4
 800a49e:	f000 fc31 	bl	800ad04 <__multiply>
 800a4a2:	4651      	mov	r1, sl
 800a4a4:	4680      	mov	r8, r0
 800a4a6:	4620      	mov	r0, r4
 800a4a8:	f000 fb60 	bl	800ab6c <_Bfree>
 800a4ac:	46c2      	mov	sl, r8
 800a4ae:	9b08      	ldr	r3, [sp, #32]
 800a4b0:	1b9a      	subs	r2, r3, r6
 800a4b2:	d004      	beq.n	800a4be <_dtoa_r+0x7b6>
 800a4b4:	4651      	mov	r1, sl
 800a4b6:	4620      	mov	r0, r4
 800a4b8:	f000 fcce 	bl	800ae58 <__pow5mult>
 800a4bc:	4682      	mov	sl, r0
 800a4be:	2101      	movs	r1, #1
 800a4c0:	4620      	mov	r0, r4
 800a4c2:	f000 fc09 	bl	800acd8 <__i2b>
 800a4c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	4606      	mov	r6, r0
 800a4cc:	f340 8081 	ble.w	800a5d2 <_dtoa_r+0x8ca>
 800a4d0:	461a      	mov	r2, r3
 800a4d2:	4601      	mov	r1, r0
 800a4d4:	4620      	mov	r0, r4
 800a4d6:	f000 fcbf 	bl	800ae58 <__pow5mult>
 800a4da:	9b07      	ldr	r3, [sp, #28]
 800a4dc:	2b01      	cmp	r3, #1
 800a4de:	4606      	mov	r6, r0
 800a4e0:	dd7a      	ble.n	800a5d8 <_dtoa_r+0x8d0>
 800a4e2:	f04f 0800 	mov.w	r8, #0
 800a4e6:	6933      	ldr	r3, [r6, #16]
 800a4e8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a4ec:	6918      	ldr	r0, [r3, #16]
 800a4ee:	f000 fba5 	bl	800ac3c <__hi0bits>
 800a4f2:	f1c0 0020 	rsb	r0, r0, #32
 800a4f6:	9b06      	ldr	r3, [sp, #24]
 800a4f8:	4418      	add	r0, r3
 800a4fa:	f010 001f 	ands.w	r0, r0, #31
 800a4fe:	f000 8094 	beq.w	800a62a <_dtoa_r+0x922>
 800a502:	f1c0 0320 	rsb	r3, r0, #32
 800a506:	2b04      	cmp	r3, #4
 800a508:	f340 8085 	ble.w	800a616 <_dtoa_r+0x90e>
 800a50c:	9b05      	ldr	r3, [sp, #20]
 800a50e:	f1c0 001c 	rsb	r0, r0, #28
 800a512:	4403      	add	r3, r0
 800a514:	9305      	str	r3, [sp, #20]
 800a516:	9b06      	ldr	r3, [sp, #24]
 800a518:	4403      	add	r3, r0
 800a51a:	4405      	add	r5, r0
 800a51c:	9306      	str	r3, [sp, #24]
 800a51e:	9b05      	ldr	r3, [sp, #20]
 800a520:	2b00      	cmp	r3, #0
 800a522:	dd05      	ble.n	800a530 <_dtoa_r+0x828>
 800a524:	4651      	mov	r1, sl
 800a526:	461a      	mov	r2, r3
 800a528:	4620      	mov	r0, r4
 800a52a:	f000 fcef 	bl	800af0c <__lshift>
 800a52e:	4682      	mov	sl, r0
 800a530:	9b06      	ldr	r3, [sp, #24]
 800a532:	2b00      	cmp	r3, #0
 800a534:	dd05      	ble.n	800a542 <_dtoa_r+0x83a>
 800a536:	4631      	mov	r1, r6
 800a538:	461a      	mov	r2, r3
 800a53a:	4620      	mov	r0, r4
 800a53c:	f000 fce6 	bl	800af0c <__lshift>
 800a540:	4606      	mov	r6, r0
 800a542:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a544:	2b00      	cmp	r3, #0
 800a546:	d072      	beq.n	800a62e <_dtoa_r+0x926>
 800a548:	4631      	mov	r1, r6
 800a54a:	4650      	mov	r0, sl
 800a54c:	f000 fd4a 	bl	800afe4 <__mcmp>
 800a550:	2800      	cmp	r0, #0
 800a552:	da6c      	bge.n	800a62e <_dtoa_r+0x926>
 800a554:	2300      	movs	r3, #0
 800a556:	4651      	mov	r1, sl
 800a558:	220a      	movs	r2, #10
 800a55a:	4620      	mov	r0, r4
 800a55c:	f000 fb28 	bl	800abb0 <__multadd>
 800a560:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a562:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a566:	4682      	mov	sl, r0
 800a568:	2b00      	cmp	r3, #0
 800a56a:	f000 81b0 	beq.w	800a8ce <_dtoa_r+0xbc6>
 800a56e:	2300      	movs	r3, #0
 800a570:	4639      	mov	r1, r7
 800a572:	220a      	movs	r2, #10
 800a574:	4620      	mov	r0, r4
 800a576:	f000 fb1b 	bl	800abb0 <__multadd>
 800a57a:	9b01      	ldr	r3, [sp, #4]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	4607      	mov	r7, r0
 800a580:	f300 8096 	bgt.w	800a6b0 <_dtoa_r+0x9a8>
 800a584:	9b07      	ldr	r3, [sp, #28]
 800a586:	2b02      	cmp	r3, #2
 800a588:	dc59      	bgt.n	800a63e <_dtoa_r+0x936>
 800a58a:	e091      	b.n	800a6b0 <_dtoa_r+0x9a8>
 800a58c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a58e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a592:	e758      	b.n	800a446 <_dtoa_r+0x73e>
 800a594:	9b04      	ldr	r3, [sp, #16]
 800a596:	1e5e      	subs	r6, r3, #1
 800a598:	9b08      	ldr	r3, [sp, #32]
 800a59a:	42b3      	cmp	r3, r6
 800a59c:	bfbf      	itttt	lt
 800a59e:	9b08      	ldrlt	r3, [sp, #32]
 800a5a0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a5a2:	9608      	strlt	r6, [sp, #32]
 800a5a4:	1af3      	sublt	r3, r6, r3
 800a5a6:	bfb4      	ite	lt
 800a5a8:	18d2      	addlt	r2, r2, r3
 800a5aa:	1b9e      	subge	r6, r3, r6
 800a5ac:	9b04      	ldr	r3, [sp, #16]
 800a5ae:	bfbc      	itt	lt
 800a5b0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a5b2:	2600      	movlt	r6, #0
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	bfb7      	itett	lt
 800a5b8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a5bc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a5c0:	1a9d      	sublt	r5, r3, r2
 800a5c2:	2300      	movlt	r3, #0
 800a5c4:	e741      	b.n	800a44a <_dtoa_r+0x742>
 800a5c6:	9e08      	ldr	r6, [sp, #32]
 800a5c8:	9d05      	ldr	r5, [sp, #20]
 800a5ca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a5cc:	e748      	b.n	800a460 <_dtoa_r+0x758>
 800a5ce:	9a08      	ldr	r2, [sp, #32]
 800a5d0:	e770      	b.n	800a4b4 <_dtoa_r+0x7ac>
 800a5d2:	9b07      	ldr	r3, [sp, #28]
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	dc19      	bgt.n	800a60c <_dtoa_r+0x904>
 800a5d8:	9b02      	ldr	r3, [sp, #8]
 800a5da:	b9bb      	cbnz	r3, 800a60c <_dtoa_r+0x904>
 800a5dc:	9b03      	ldr	r3, [sp, #12]
 800a5de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5e2:	b99b      	cbnz	r3, 800a60c <_dtoa_r+0x904>
 800a5e4:	9b03      	ldr	r3, [sp, #12]
 800a5e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a5ea:	0d1b      	lsrs	r3, r3, #20
 800a5ec:	051b      	lsls	r3, r3, #20
 800a5ee:	b183      	cbz	r3, 800a612 <_dtoa_r+0x90a>
 800a5f0:	9b05      	ldr	r3, [sp, #20]
 800a5f2:	3301      	adds	r3, #1
 800a5f4:	9305      	str	r3, [sp, #20]
 800a5f6:	9b06      	ldr	r3, [sp, #24]
 800a5f8:	3301      	adds	r3, #1
 800a5fa:	9306      	str	r3, [sp, #24]
 800a5fc:	f04f 0801 	mov.w	r8, #1
 800a600:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a602:	2b00      	cmp	r3, #0
 800a604:	f47f af6f 	bne.w	800a4e6 <_dtoa_r+0x7de>
 800a608:	2001      	movs	r0, #1
 800a60a:	e774      	b.n	800a4f6 <_dtoa_r+0x7ee>
 800a60c:	f04f 0800 	mov.w	r8, #0
 800a610:	e7f6      	b.n	800a600 <_dtoa_r+0x8f8>
 800a612:	4698      	mov	r8, r3
 800a614:	e7f4      	b.n	800a600 <_dtoa_r+0x8f8>
 800a616:	d082      	beq.n	800a51e <_dtoa_r+0x816>
 800a618:	9a05      	ldr	r2, [sp, #20]
 800a61a:	331c      	adds	r3, #28
 800a61c:	441a      	add	r2, r3
 800a61e:	9205      	str	r2, [sp, #20]
 800a620:	9a06      	ldr	r2, [sp, #24]
 800a622:	441a      	add	r2, r3
 800a624:	441d      	add	r5, r3
 800a626:	9206      	str	r2, [sp, #24]
 800a628:	e779      	b.n	800a51e <_dtoa_r+0x816>
 800a62a:	4603      	mov	r3, r0
 800a62c:	e7f4      	b.n	800a618 <_dtoa_r+0x910>
 800a62e:	9b04      	ldr	r3, [sp, #16]
 800a630:	2b00      	cmp	r3, #0
 800a632:	dc37      	bgt.n	800a6a4 <_dtoa_r+0x99c>
 800a634:	9b07      	ldr	r3, [sp, #28]
 800a636:	2b02      	cmp	r3, #2
 800a638:	dd34      	ble.n	800a6a4 <_dtoa_r+0x99c>
 800a63a:	9b04      	ldr	r3, [sp, #16]
 800a63c:	9301      	str	r3, [sp, #4]
 800a63e:	9b01      	ldr	r3, [sp, #4]
 800a640:	b963      	cbnz	r3, 800a65c <_dtoa_r+0x954>
 800a642:	4631      	mov	r1, r6
 800a644:	2205      	movs	r2, #5
 800a646:	4620      	mov	r0, r4
 800a648:	f000 fab2 	bl	800abb0 <__multadd>
 800a64c:	4601      	mov	r1, r0
 800a64e:	4606      	mov	r6, r0
 800a650:	4650      	mov	r0, sl
 800a652:	f000 fcc7 	bl	800afe4 <__mcmp>
 800a656:	2800      	cmp	r0, #0
 800a658:	f73f adbb 	bgt.w	800a1d2 <_dtoa_r+0x4ca>
 800a65c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a65e:	9d00      	ldr	r5, [sp, #0]
 800a660:	ea6f 0b03 	mvn.w	fp, r3
 800a664:	f04f 0800 	mov.w	r8, #0
 800a668:	4631      	mov	r1, r6
 800a66a:	4620      	mov	r0, r4
 800a66c:	f000 fa7e 	bl	800ab6c <_Bfree>
 800a670:	2f00      	cmp	r7, #0
 800a672:	f43f aeab 	beq.w	800a3cc <_dtoa_r+0x6c4>
 800a676:	f1b8 0f00 	cmp.w	r8, #0
 800a67a:	d005      	beq.n	800a688 <_dtoa_r+0x980>
 800a67c:	45b8      	cmp	r8, r7
 800a67e:	d003      	beq.n	800a688 <_dtoa_r+0x980>
 800a680:	4641      	mov	r1, r8
 800a682:	4620      	mov	r0, r4
 800a684:	f000 fa72 	bl	800ab6c <_Bfree>
 800a688:	4639      	mov	r1, r7
 800a68a:	4620      	mov	r0, r4
 800a68c:	f000 fa6e 	bl	800ab6c <_Bfree>
 800a690:	e69c      	b.n	800a3cc <_dtoa_r+0x6c4>
 800a692:	2600      	movs	r6, #0
 800a694:	4637      	mov	r7, r6
 800a696:	e7e1      	b.n	800a65c <_dtoa_r+0x954>
 800a698:	46bb      	mov	fp, r7
 800a69a:	4637      	mov	r7, r6
 800a69c:	e599      	b.n	800a1d2 <_dtoa_r+0x4ca>
 800a69e:	bf00      	nop
 800a6a0:	40240000 	.word	0x40240000
 800a6a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	f000 80c8 	beq.w	800a83c <_dtoa_r+0xb34>
 800a6ac:	9b04      	ldr	r3, [sp, #16]
 800a6ae:	9301      	str	r3, [sp, #4]
 800a6b0:	2d00      	cmp	r5, #0
 800a6b2:	dd05      	ble.n	800a6c0 <_dtoa_r+0x9b8>
 800a6b4:	4639      	mov	r1, r7
 800a6b6:	462a      	mov	r2, r5
 800a6b8:	4620      	mov	r0, r4
 800a6ba:	f000 fc27 	bl	800af0c <__lshift>
 800a6be:	4607      	mov	r7, r0
 800a6c0:	f1b8 0f00 	cmp.w	r8, #0
 800a6c4:	d05b      	beq.n	800a77e <_dtoa_r+0xa76>
 800a6c6:	6879      	ldr	r1, [r7, #4]
 800a6c8:	4620      	mov	r0, r4
 800a6ca:	f000 fa0f 	bl	800aaec <_Balloc>
 800a6ce:	4605      	mov	r5, r0
 800a6d0:	b928      	cbnz	r0, 800a6de <_dtoa_r+0x9d6>
 800a6d2:	4b83      	ldr	r3, [pc, #524]	; (800a8e0 <_dtoa_r+0xbd8>)
 800a6d4:	4602      	mov	r2, r0
 800a6d6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a6da:	f7ff bb2e 	b.w	8009d3a <_dtoa_r+0x32>
 800a6de:	693a      	ldr	r2, [r7, #16]
 800a6e0:	3202      	adds	r2, #2
 800a6e2:	0092      	lsls	r2, r2, #2
 800a6e4:	f107 010c 	add.w	r1, r7, #12
 800a6e8:	300c      	adds	r0, #12
 800a6ea:	f001 f985 	bl	800b9f8 <memcpy>
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	4629      	mov	r1, r5
 800a6f2:	4620      	mov	r0, r4
 800a6f4:	f000 fc0a 	bl	800af0c <__lshift>
 800a6f8:	9b00      	ldr	r3, [sp, #0]
 800a6fa:	3301      	adds	r3, #1
 800a6fc:	9304      	str	r3, [sp, #16]
 800a6fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a702:	4413      	add	r3, r2
 800a704:	9308      	str	r3, [sp, #32]
 800a706:	9b02      	ldr	r3, [sp, #8]
 800a708:	f003 0301 	and.w	r3, r3, #1
 800a70c:	46b8      	mov	r8, r7
 800a70e:	9306      	str	r3, [sp, #24]
 800a710:	4607      	mov	r7, r0
 800a712:	9b04      	ldr	r3, [sp, #16]
 800a714:	4631      	mov	r1, r6
 800a716:	3b01      	subs	r3, #1
 800a718:	4650      	mov	r0, sl
 800a71a:	9301      	str	r3, [sp, #4]
 800a71c:	f7ff fa6b 	bl	8009bf6 <quorem>
 800a720:	4641      	mov	r1, r8
 800a722:	9002      	str	r0, [sp, #8]
 800a724:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a728:	4650      	mov	r0, sl
 800a72a:	f000 fc5b 	bl	800afe4 <__mcmp>
 800a72e:	463a      	mov	r2, r7
 800a730:	9005      	str	r0, [sp, #20]
 800a732:	4631      	mov	r1, r6
 800a734:	4620      	mov	r0, r4
 800a736:	f000 fc71 	bl	800b01c <__mdiff>
 800a73a:	68c2      	ldr	r2, [r0, #12]
 800a73c:	4605      	mov	r5, r0
 800a73e:	bb02      	cbnz	r2, 800a782 <_dtoa_r+0xa7a>
 800a740:	4601      	mov	r1, r0
 800a742:	4650      	mov	r0, sl
 800a744:	f000 fc4e 	bl	800afe4 <__mcmp>
 800a748:	4602      	mov	r2, r0
 800a74a:	4629      	mov	r1, r5
 800a74c:	4620      	mov	r0, r4
 800a74e:	9209      	str	r2, [sp, #36]	; 0x24
 800a750:	f000 fa0c 	bl	800ab6c <_Bfree>
 800a754:	9b07      	ldr	r3, [sp, #28]
 800a756:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a758:	9d04      	ldr	r5, [sp, #16]
 800a75a:	ea43 0102 	orr.w	r1, r3, r2
 800a75e:	9b06      	ldr	r3, [sp, #24]
 800a760:	4319      	orrs	r1, r3
 800a762:	d110      	bne.n	800a786 <_dtoa_r+0xa7e>
 800a764:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a768:	d029      	beq.n	800a7be <_dtoa_r+0xab6>
 800a76a:	9b05      	ldr	r3, [sp, #20]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	dd02      	ble.n	800a776 <_dtoa_r+0xa6e>
 800a770:	9b02      	ldr	r3, [sp, #8]
 800a772:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a776:	9b01      	ldr	r3, [sp, #4]
 800a778:	f883 9000 	strb.w	r9, [r3]
 800a77c:	e774      	b.n	800a668 <_dtoa_r+0x960>
 800a77e:	4638      	mov	r0, r7
 800a780:	e7ba      	b.n	800a6f8 <_dtoa_r+0x9f0>
 800a782:	2201      	movs	r2, #1
 800a784:	e7e1      	b.n	800a74a <_dtoa_r+0xa42>
 800a786:	9b05      	ldr	r3, [sp, #20]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	db04      	blt.n	800a796 <_dtoa_r+0xa8e>
 800a78c:	9907      	ldr	r1, [sp, #28]
 800a78e:	430b      	orrs	r3, r1
 800a790:	9906      	ldr	r1, [sp, #24]
 800a792:	430b      	orrs	r3, r1
 800a794:	d120      	bne.n	800a7d8 <_dtoa_r+0xad0>
 800a796:	2a00      	cmp	r2, #0
 800a798:	dded      	ble.n	800a776 <_dtoa_r+0xa6e>
 800a79a:	4651      	mov	r1, sl
 800a79c:	2201      	movs	r2, #1
 800a79e:	4620      	mov	r0, r4
 800a7a0:	f000 fbb4 	bl	800af0c <__lshift>
 800a7a4:	4631      	mov	r1, r6
 800a7a6:	4682      	mov	sl, r0
 800a7a8:	f000 fc1c 	bl	800afe4 <__mcmp>
 800a7ac:	2800      	cmp	r0, #0
 800a7ae:	dc03      	bgt.n	800a7b8 <_dtoa_r+0xab0>
 800a7b0:	d1e1      	bne.n	800a776 <_dtoa_r+0xa6e>
 800a7b2:	f019 0f01 	tst.w	r9, #1
 800a7b6:	d0de      	beq.n	800a776 <_dtoa_r+0xa6e>
 800a7b8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a7bc:	d1d8      	bne.n	800a770 <_dtoa_r+0xa68>
 800a7be:	9a01      	ldr	r2, [sp, #4]
 800a7c0:	2339      	movs	r3, #57	; 0x39
 800a7c2:	7013      	strb	r3, [r2, #0]
 800a7c4:	462b      	mov	r3, r5
 800a7c6:	461d      	mov	r5, r3
 800a7c8:	3b01      	subs	r3, #1
 800a7ca:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a7ce:	2a39      	cmp	r2, #57	; 0x39
 800a7d0:	d06c      	beq.n	800a8ac <_dtoa_r+0xba4>
 800a7d2:	3201      	adds	r2, #1
 800a7d4:	701a      	strb	r2, [r3, #0]
 800a7d6:	e747      	b.n	800a668 <_dtoa_r+0x960>
 800a7d8:	2a00      	cmp	r2, #0
 800a7da:	dd07      	ble.n	800a7ec <_dtoa_r+0xae4>
 800a7dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a7e0:	d0ed      	beq.n	800a7be <_dtoa_r+0xab6>
 800a7e2:	9a01      	ldr	r2, [sp, #4]
 800a7e4:	f109 0301 	add.w	r3, r9, #1
 800a7e8:	7013      	strb	r3, [r2, #0]
 800a7ea:	e73d      	b.n	800a668 <_dtoa_r+0x960>
 800a7ec:	9b04      	ldr	r3, [sp, #16]
 800a7ee:	9a08      	ldr	r2, [sp, #32]
 800a7f0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	d043      	beq.n	800a880 <_dtoa_r+0xb78>
 800a7f8:	4651      	mov	r1, sl
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	220a      	movs	r2, #10
 800a7fe:	4620      	mov	r0, r4
 800a800:	f000 f9d6 	bl	800abb0 <__multadd>
 800a804:	45b8      	cmp	r8, r7
 800a806:	4682      	mov	sl, r0
 800a808:	f04f 0300 	mov.w	r3, #0
 800a80c:	f04f 020a 	mov.w	r2, #10
 800a810:	4641      	mov	r1, r8
 800a812:	4620      	mov	r0, r4
 800a814:	d107      	bne.n	800a826 <_dtoa_r+0xb1e>
 800a816:	f000 f9cb 	bl	800abb0 <__multadd>
 800a81a:	4680      	mov	r8, r0
 800a81c:	4607      	mov	r7, r0
 800a81e:	9b04      	ldr	r3, [sp, #16]
 800a820:	3301      	adds	r3, #1
 800a822:	9304      	str	r3, [sp, #16]
 800a824:	e775      	b.n	800a712 <_dtoa_r+0xa0a>
 800a826:	f000 f9c3 	bl	800abb0 <__multadd>
 800a82a:	4639      	mov	r1, r7
 800a82c:	4680      	mov	r8, r0
 800a82e:	2300      	movs	r3, #0
 800a830:	220a      	movs	r2, #10
 800a832:	4620      	mov	r0, r4
 800a834:	f000 f9bc 	bl	800abb0 <__multadd>
 800a838:	4607      	mov	r7, r0
 800a83a:	e7f0      	b.n	800a81e <_dtoa_r+0xb16>
 800a83c:	9b04      	ldr	r3, [sp, #16]
 800a83e:	9301      	str	r3, [sp, #4]
 800a840:	9d00      	ldr	r5, [sp, #0]
 800a842:	4631      	mov	r1, r6
 800a844:	4650      	mov	r0, sl
 800a846:	f7ff f9d6 	bl	8009bf6 <quorem>
 800a84a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a84e:	9b00      	ldr	r3, [sp, #0]
 800a850:	f805 9b01 	strb.w	r9, [r5], #1
 800a854:	1aea      	subs	r2, r5, r3
 800a856:	9b01      	ldr	r3, [sp, #4]
 800a858:	4293      	cmp	r3, r2
 800a85a:	dd07      	ble.n	800a86c <_dtoa_r+0xb64>
 800a85c:	4651      	mov	r1, sl
 800a85e:	2300      	movs	r3, #0
 800a860:	220a      	movs	r2, #10
 800a862:	4620      	mov	r0, r4
 800a864:	f000 f9a4 	bl	800abb0 <__multadd>
 800a868:	4682      	mov	sl, r0
 800a86a:	e7ea      	b.n	800a842 <_dtoa_r+0xb3a>
 800a86c:	9b01      	ldr	r3, [sp, #4]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	bfc8      	it	gt
 800a872:	461d      	movgt	r5, r3
 800a874:	9b00      	ldr	r3, [sp, #0]
 800a876:	bfd8      	it	le
 800a878:	2501      	movle	r5, #1
 800a87a:	441d      	add	r5, r3
 800a87c:	f04f 0800 	mov.w	r8, #0
 800a880:	4651      	mov	r1, sl
 800a882:	2201      	movs	r2, #1
 800a884:	4620      	mov	r0, r4
 800a886:	f000 fb41 	bl	800af0c <__lshift>
 800a88a:	4631      	mov	r1, r6
 800a88c:	4682      	mov	sl, r0
 800a88e:	f000 fba9 	bl	800afe4 <__mcmp>
 800a892:	2800      	cmp	r0, #0
 800a894:	dc96      	bgt.n	800a7c4 <_dtoa_r+0xabc>
 800a896:	d102      	bne.n	800a89e <_dtoa_r+0xb96>
 800a898:	f019 0f01 	tst.w	r9, #1
 800a89c:	d192      	bne.n	800a7c4 <_dtoa_r+0xabc>
 800a89e:	462b      	mov	r3, r5
 800a8a0:	461d      	mov	r5, r3
 800a8a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a8a6:	2a30      	cmp	r2, #48	; 0x30
 800a8a8:	d0fa      	beq.n	800a8a0 <_dtoa_r+0xb98>
 800a8aa:	e6dd      	b.n	800a668 <_dtoa_r+0x960>
 800a8ac:	9a00      	ldr	r2, [sp, #0]
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d189      	bne.n	800a7c6 <_dtoa_r+0xabe>
 800a8b2:	f10b 0b01 	add.w	fp, fp, #1
 800a8b6:	2331      	movs	r3, #49	; 0x31
 800a8b8:	e796      	b.n	800a7e8 <_dtoa_r+0xae0>
 800a8ba:	4b0a      	ldr	r3, [pc, #40]	; (800a8e4 <_dtoa_r+0xbdc>)
 800a8bc:	f7ff ba99 	b.w	8009df2 <_dtoa_r+0xea>
 800a8c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	f47f aa6d 	bne.w	8009da2 <_dtoa_r+0x9a>
 800a8c8:	4b07      	ldr	r3, [pc, #28]	; (800a8e8 <_dtoa_r+0xbe0>)
 800a8ca:	f7ff ba92 	b.w	8009df2 <_dtoa_r+0xea>
 800a8ce:	9b01      	ldr	r3, [sp, #4]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	dcb5      	bgt.n	800a840 <_dtoa_r+0xb38>
 800a8d4:	9b07      	ldr	r3, [sp, #28]
 800a8d6:	2b02      	cmp	r3, #2
 800a8d8:	f73f aeb1 	bgt.w	800a63e <_dtoa_r+0x936>
 800a8dc:	e7b0      	b.n	800a840 <_dtoa_r+0xb38>
 800a8de:	bf00      	nop
 800a8e0:	0800be00 	.word	0x0800be00
 800a8e4:	0800bd60 	.word	0x0800bd60
 800a8e8:	0800bd84 	.word	0x0800bd84

0800a8ec <_free_r>:
 800a8ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8ee:	2900      	cmp	r1, #0
 800a8f0:	d044      	beq.n	800a97c <_free_r+0x90>
 800a8f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8f6:	9001      	str	r0, [sp, #4]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	f1a1 0404 	sub.w	r4, r1, #4
 800a8fe:	bfb8      	it	lt
 800a900:	18e4      	addlt	r4, r4, r3
 800a902:	f000 f8e7 	bl	800aad4 <__malloc_lock>
 800a906:	4a1e      	ldr	r2, [pc, #120]	; (800a980 <_free_r+0x94>)
 800a908:	9801      	ldr	r0, [sp, #4]
 800a90a:	6813      	ldr	r3, [r2, #0]
 800a90c:	b933      	cbnz	r3, 800a91c <_free_r+0x30>
 800a90e:	6063      	str	r3, [r4, #4]
 800a910:	6014      	str	r4, [r2, #0]
 800a912:	b003      	add	sp, #12
 800a914:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a918:	f000 b8e2 	b.w	800aae0 <__malloc_unlock>
 800a91c:	42a3      	cmp	r3, r4
 800a91e:	d908      	bls.n	800a932 <_free_r+0x46>
 800a920:	6825      	ldr	r5, [r4, #0]
 800a922:	1961      	adds	r1, r4, r5
 800a924:	428b      	cmp	r3, r1
 800a926:	bf01      	itttt	eq
 800a928:	6819      	ldreq	r1, [r3, #0]
 800a92a:	685b      	ldreq	r3, [r3, #4]
 800a92c:	1949      	addeq	r1, r1, r5
 800a92e:	6021      	streq	r1, [r4, #0]
 800a930:	e7ed      	b.n	800a90e <_free_r+0x22>
 800a932:	461a      	mov	r2, r3
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	b10b      	cbz	r3, 800a93c <_free_r+0x50>
 800a938:	42a3      	cmp	r3, r4
 800a93a:	d9fa      	bls.n	800a932 <_free_r+0x46>
 800a93c:	6811      	ldr	r1, [r2, #0]
 800a93e:	1855      	adds	r5, r2, r1
 800a940:	42a5      	cmp	r5, r4
 800a942:	d10b      	bne.n	800a95c <_free_r+0x70>
 800a944:	6824      	ldr	r4, [r4, #0]
 800a946:	4421      	add	r1, r4
 800a948:	1854      	adds	r4, r2, r1
 800a94a:	42a3      	cmp	r3, r4
 800a94c:	6011      	str	r1, [r2, #0]
 800a94e:	d1e0      	bne.n	800a912 <_free_r+0x26>
 800a950:	681c      	ldr	r4, [r3, #0]
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	6053      	str	r3, [r2, #4]
 800a956:	440c      	add	r4, r1
 800a958:	6014      	str	r4, [r2, #0]
 800a95a:	e7da      	b.n	800a912 <_free_r+0x26>
 800a95c:	d902      	bls.n	800a964 <_free_r+0x78>
 800a95e:	230c      	movs	r3, #12
 800a960:	6003      	str	r3, [r0, #0]
 800a962:	e7d6      	b.n	800a912 <_free_r+0x26>
 800a964:	6825      	ldr	r5, [r4, #0]
 800a966:	1961      	adds	r1, r4, r5
 800a968:	428b      	cmp	r3, r1
 800a96a:	bf04      	itt	eq
 800a96c:	6819      	ldreq	r1, [r3, #0]
 800a96e:	685b      	ldreq	r3, [r3, #4]
 800a970:	6063      	str	r3, [r4, #4]
 800a972:	bf04      	itt	eq
 800a974:	1949      	addeq	r1, r1, r5
 800a976:	6021      	streq	r1, [r4, #0]
 800a978:	6054      	str	r4, [r2, #4]
 800a97a:	e7ca      	b.n	800a912 <_free_r+0x26>
 800a97c:	b003      	add	sp, #12
 800a97e:	bd30      	pop	{r4, r5, pc}
 800a980:	20001030 	.word	0x20001030

0800a984 <malloc>:
 800a984:	4b02      	ldr	r3, [pc, #8]	; (800a990 <malloc+0xc>)
 800a986:	4601      	mov	r1, r0
 800a988:	6818      	ldr	r0, [r3, #0]
 800a98a:	f000 b823 	b.w	800a9d4 <_malloc_r>
 800a98e:	bf00      	nop
 800a990:	20000064 	.word	0x20000064

0800a994 <sbrk_aligned>:
 800a994:	b570      	push	{r4, r5, r6, lr}
 800a996:	4e0e      	ldr	r6, [pc, #56]	; (800a9d0 <sbrk_aligned+0x3c>)
 800a998:	460c      	mov	r4, r1
 800a99a:	6831      	ldr	r1, [r6, #0]
 800a99c:	4605      	mov	r5, r0
 800a99e:	b911      	cbnz	r1, 800a9a6 <sbrk_aligned+0x12>
 800a9a0:	f001 f81a 	bl	800b9d8 <_sbrk_r>
 800a9a4:	6030      	str	r0, [r6, #0]
 800a9a6:	4621      	mov	r1, r4
 800a9a8:	4628      	mov	r0, r5
 800a9aa:	f001 f815 	bl	800b9d8 <_sbrk_r>
 800a9ae:	1c43      	adds	r3, r0, #1
 800a9b0:	d00a      	beq.n	800a9c8 <sbrk_aligned+0x34>
 800a9b2:	1cc4      	adds	r4, r0, #3
 800a9b4:	f024 0403 	bic.w	r4, r4, #3
 800a9b8:	42a0      	cmp	r0, r4
 800a9ba:	d007      	beq.n	800a9cc <sbrk_aligned+0x38>
 800a9bc:	1a21      	subs	r1, r4, r0
 800a9be:	4628      	mov	r0, r5
 800a9c0:	f001 f80a 	bl	800b9d8 <_sbrk_r>
 800a9c4:	3001      	adds	r0, #1
 800a9c6:	d101      	bne.n	800a9cc <sbrk_aligned+0x38>
 800a9c8:	f04f 34ff 	mov.w	r4, #4294967295
 800a9cc:	4620      	mov	r0, r4
 800a9ce:	bd70      	pop	{r4, r5, r6, pc}
 800a9d0:	20001034 	.word	0x20001034

0800a9d4 <_malloc_r>:
 800a9d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9d8:	1ccd      	adds	r5, r1, #3
 800a9da:	f025 0503 	bic.w	r5, r5, #3
 800a9de:	3508      	adds	r5, #8
 800a9e0:	2d0c      	cmp	r5, #12
 800a9e2:	bf38      	it	cc
 800a9e4:	250c      	movcc	r5, #12
 800a9e6:	2d00      	cmp	r5, #0
 800a9e8:	4607      	mov	r7, r0
 800a9ea:	db01      	blt.n	800a9f0 <_malloc_r+0x1c>
 800a9ec:	42a9      	cmp	r1, r5
 800a9ee:	d905      	bls.n	800a9fc <_malloc_r+0x28>
 800a9f0:	230c      	movs	r3, #12
 800a9f2:	603b      	str	r3, [r7, #0]
 800a9f4:	2600      	movs	r6, #0
 800a9f6:	4630      	mov	r0, r6
 800a9f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800aad0 <_malloc_r+0xfc>
 800aa00:	f000 f868 	bl	800aad4 <__malloc_lock>
 800aa04:	f8d8 3000 	ldr.w	r3, [r8]
 800aa08:	461c      	mov	r4, r3
 800aa0a:	bb5c      	cbnz	r4, 800aa64 <_malloc_r+0x90>
 800aa0c:	4629      	mov	r1, r5
 800aa0e:	4638      	mov	r0, r7
 800aa10:	f7ff ffc0 	bl	800a994 <sbrk_aligned>
 800aa14:	1c43      	adds	r3, r0, #1
 800aa16:	4604      	mov	r4, r0
 800aa18:	d155      	bne.n	800aac6 <_malloc_r+0xf2>
 800aa1a:	f8d8 4000 	ldr.w	r4, [r8]
 800aa1e:	4626      	mov	r6, r4
 800aa20:	2e00      	cmp	r6, #0
 800aa22:	d145      	bne.n	800aab0 <_malloc_r+0xdc>
 800aa24:	2c00      	cmp	r4, #0
 800aa26:	d048      	beq.n	800aaba <_malloc_r+0xe6>
 800aa28:	6823      	ldr	r3, [r4, #0]
 800aa2a:	4631      	mov	r1, r6
 800aa2c:	4638      	mov	r0, r7
 800aa2e:	eb04 0903 	add.w	r9, r4, r3
 800aa32:	f000 ffd1 	bl	800b9d8 <_sbrk_r>
 800aa36:	4581      	cmp	r9, r0
 800aa38:	d13f      	bne.n	800aaba <_malloc_r+0xe6>
 800aa3a:	6821      	ldr	r1, [r4, #0]
 800aa3c:	1a6d      	subs	r5, r5, r1
 800aa3e:	4629      	mov	r1, r5
 800aa40:	4638      	mov	r0, r7
 800aa42:	f7ff ffa7 	bl	800a994 <sbrk_aligned>
 800aa46:	3001      	adds	r0, #1
 800aa48:	d037      	beq.n	800aaba <_malloc_r+0xe6>
 800aa4a:	6823      	ldr	r3, [r4, #0]
 800aa4c:	442b      	add	r3, r5
 800aa4e:	6023      	str	r3, [r4, #0]
 800aa50:	f8d8 3000 	ldr.w	r3, [r8]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d038      	beq.n	800aaca <_malloc_r+0xf6>
 800aa58:	685a      	ldr	r2, [r3, #4]
 800aa5a:	42a2      	cmp	r2, r4
 800aa5c:	d12b      	bne.n	800aab6 <_malloc_r+0xe2>
 800aa5e:	2200      	movs	r2, #0
 800aa60:	605a      	str	r2, [r3, #4]
 800aa62:	e00f      	b.n	800aa84 <_malloc_r+0xb0>
 800aa64:	6822      	ldr	r2, [r4, #0]
 800aa66:	1b52      	subs	r2, r2, r5
 800aa68:	d41f      	bmi.n	800aaaa <_malloc_r+0xd6>
 800aa6a:	2a0b      	cmp	r2, #11
 800aa6c:	d917      	bls.n	800aa9e <_malloc_r+0xca>
 800aa6e:	1961      	adds	r1, r4, r5
 800aa70:	42a3      	cmp	r3, r4
 800aa72:	6025      	str	r5, [r4, #0]
 800aa74:	bf18      	it	ne
 800aa76:	6059      	strne	r1, [r3, #4]
 800aa78:	6863      	ldr	r3, [r4, #4]
 800aa7a:	bf08      	it	eq
 800aa7c:	f8c8 1000 	streq.w	r1, [r8]
 800aa80:	5162      	str	r2, [r4, r5]
 800aa82:	604b      	str	r3, [r1, #4]
 800aa84:	4638      	mov	r0, r7
 800aa86:	f104 060b 	add.w	r6, r4, #11
 800aa8a:	f000 f829 	bl	800aae0 <__malloc_unlock>
 800aa8e:	f026 0607 	bic.w	r6, r6, #7
 800aa92:	1d23      	adds	r3, r4, #4
 800aa94:	1af2      	subs	r2, r6, r3
 800aa96:	d0ae      	beq.n	800a9f6 <_malloc_r+0x22>
 800aa98:	1b9b      	subs	r3, r3, r6
 800aa9a:	50a3      	str	r3, [r4, r2]
 800aa9c:	e7ab      	b.n	800a9f6 <_malloc_r+0x22>
 800aa9e:	42a3      	cmp	r3, r4
 800aaa0:	6862      	ldr	r2, [r4, #4]
 800aaa2:	d1dd      	bne.n	800aa60 <_malloc_r+0x8c>
 800aaa4:	f8c8 2000 	str.w	r2, [r8]
 800aaa8:	e7ec      	b.n	800aa84 <_malloc_r+0xb0>
 800aaaa:	4623      	mov	r3, r4
 800aaac:	6864      	ldr	r4, [r4, #4]
 800aaae:	e7ac      	b.n	800aa0a <_malloc_r+0x36>
 800aab0:	4634      	mov	r4, r6
 800aab2:	6876      	ldr	r6, [r6, #4]
 800aab4:	e7b4      	b.n	800aa20 <_malloc_r+0x4c>
 800aab6:	4613      	mov	r3, r2
 800aab8:	e7cc      	b.n	800aa54 <_malloc_r+0x80>
 800aaba:	230c      	movs	r3, #12
 800aabc:	603b      	str	r3, [r7, #0]
 800aabe:	4638      	mov	r0, r7
 800aac0:	f000 f80e 	bl	800aae0 <__malloc_unlock>
 800aac4:	e797      	b.n	800a9f6 <_malloc_r+0x22>
 800aac6:	6025      	str	r5, [r4, #0]
 800aac8:	e7dc      	b.n	800aa84 <_malloc_r+0xb0>
 800aaca:	605b      	str	r3, [r3, #4]
 800aacc:	deff      	udf	#255	; 0xff
 800aace:	bf00      	nop
 800aad0:	20001030 	.word	0x20001030

0800aad4 <__malloc_lock>:
 800aad4:	4801      	ldr	r0, [pc, #4]	; (800aadc <__malloc_lock+0x8>)
 800aad6:	f7ff b88c 	b.w	8009bf2 <__retarget_lock_acquire_recursive>
 800aada:	bf00      	nop
 800aadc:	2000102c 	.word	0x2000102c

0800aae0 <__malloc_unlock>:
 800aae0:	4801      	ldr	r0, [pc, #4]	; (800aae8 <__malloc_unlock+0x8>)
 800aae2:	f7ff b887 	b.w	8009bf4 <__retarget_lock_release_recursive>
 800aae6:	bf00      	nop
 800aae8:	2000102c 	.word	0x2000102c

0800aaec <_Balloc>:
 800aaec:	b570      	push	{r4, r5, r6, lr}
 800aaee:	69c6      	ldr	r6, [r0, #28]
 800aaf0:	4604      	mov	r4, r0
 800aaf2:	460d      	mov	r5, r1
 800aaf4:	b976      	cbnz	r6, 800ab14 <_Balloc+0x28>
 800aaf6:	2010      	movs	r0, #16
 800aaf8:	f7ff ff44 	bl	800a984 <malloc>
 800aafc:	4602      	mov	r2, r0
 800aafe:	61e0      	str	r0, [r4, #28]
 800ab00:	b920      	cbnz	r0, 800ab0c <_Balloc+0x20>
 800ab02:	4b18      	ldr	r3, [pc, #96]	; (800ab64 <_Balloc+0x78>)
 800ab04:	4818      	ldr	r0, [pc, #96]	; (800ab68 <_Balloc+0x7c>)
 800ab06:	216b      	movs	r1, #107	; 0x6b
 800ab08:	f000 ff84 	bl	800ba14 <__assert_func>
 800ab0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab10:	6006      	str	r6, [r0, #0]
 800ab12:	60c6      	str	r6, [r0, #12]
 800ab14:	69e6      	ldr	r6, [r4, #28]
 800ab16:	68f3      	ldr	r3, [r6, #12]
 800ab18:	b183      	cbz	r3, 800ab3c <_Balloc+0x50>
 800ab1a:	69e3      	ldr	r3, [r4, #28]
 800ab1c:	68db      	ldr	r3, [r3, #12]
 800ab1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ab22:	b9b8      	cbnz	r0, 800ab54 <_Balloc+0x68>
 800ab24:	2101      	movs	r1, #1
 800ab26:	fa01 f605 	lsl.w	r6, r1, r5
 800ab2a:	1d72      	adds	r2, r6, #5
 800ab2c:	0092      	lsls	r2, r2, #2
 800ab2e:	4620      	mov	r0, r4
 800ab30:	f000 ff8e 	bl	800ba50 <_calloc_r>
 800ab34:	b160      	cbz	r0, 800ab50 <_Balloc+0x64>
 800ab36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ab3a:	e00e      	b.n	800ab5a <_Balloc+0x6e>
 800ab3c:	2221      	movs	r2, #33	; 0x21
 800ab3e:	2104      	movs	r1, #4
 800ab40:	4620      	mov	r0, r4
 800ab42:	f000 ff85 	bl	800ba50 <_calloc_r>
 800ab46:	69e3      	ldr	r3, [r4, #28]
 800ab48:	60f0      	str	r0, [r6, #12]
 800ab4a:	68db      	ldr	r3, [r3, #12]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d1e4      	bne.n	800ab1a <_Balloc+0x2e>
 800ab50:	2000      	movs	r0, #0
 800ab52:	bd70      	pop	{r4, r5, r6, pc}
 800ab54:	6802      	ldr	r2, [r0, #0]
 800ab56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ab60:	e7f7      	b.n	800ab52 <_Balloc+0x66>
 800ab62:	bf00      	nop
 800ab64:	0800bd91 	.word	0x0800bd91
 800ab68:	0800be11 	.word	0x0800be11

0800ab6c <_Bfree>:
 800ab6c:	b570      	push	{r4, r5, r6, lr}
 800ab6e:	69c6      	ldr	r6, [r0, #28]
 800ab70:	4605      	mov	r5, r0
 800ab72:	460c      	mov	r4, r1
 800ab74:	b976      	cbnz	r6, 800ab94 <_Bfree+0x28>
 800ab76:	2010      	movs	r0, #16
 800ab78:	f7ff ff04 	bl	800a984 <malloc>
 800ab7c:	4602      	mov	r2, r0
 800ab7e:	61e8      	str	r0, [r5, #28]
 800ab80:	b920      	cbnz	r0, 800ab8c <_Bfree+0x20>
 800ab82:	4b09      	ldr	r3, [pc, #36]	; (800aba8 <_Bfree+0x3c>)
 800ab84:	4809      	ldr	r0, [pc, #36]	; (800abac <_Bfree+0x40>)
 800ab86:	218f      	movs	r1, #143	; 0x8f
 800ab88:	f000 ff44 	bl	800ba14 <__assert_func>
 800ab8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab90:	6006      	str	r6, [r0, #0]
 800ab92:	60c6      	str	r6, [r0, #12]
 800ab94:	b13c      	cbz	r4, 800aba6 <_Bfree+0x3a>
 800ab96:	69eb      	ldr	r3, [r5, #28]
 800ab98:	6862      	ldr	r2, [r4, #4]
 800ab9a:	68db      	ldr	r3, [r3, #12]
 800ab9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aba0:	6021      	str	r1, [r4, #0]
 800aba2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aba6:	bd70      	pop	{r4, r5, r6, pc}
 800aba8:	0800bd91 	.word	0x0800bd91
 800abac:	0800be11 	.word	0x0800be11

0800abb0 <__multadd>:
 800abb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abb4:	690d      	ldr	r5, [r1, #16]
 800abb6:	4607      	mov	r7, r0
 800abb8:	460c      	mov	r4, r1
 800abba:	461e      	mov	r6, r3
 800abbc:	f101 0c14 	add.w	ip, r1, #20
 800abc0:	2000      	movs	r0, #0
 800abc2:	f8dc 3000 	ldr.w	r3, [ip]
 800abc6:	b299      	uxth	r1, r3
 800abc8:	fb02 6101 	mla	r1, r2, r1, r6
 800abcc:	0c1e      	lsrs	r6, r3, #16
 800abce:	0c0b      	lsrs	r3, r1, #16
 800abd0:	fb02 3306 	mla	r3, r2, r6, r3
 800abd4:	b289      	uxth	r1, r1
 800abd6:	3001      	adds	r0, #1
 800abd8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800abdc:	4285      	cmp	r5, r0
 800abde:	f84c 1b04 	str.w	r1, [ip], #4
 800abe2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800abe6:	dcec      	bgt.n	800abc2 <__multadd+0x12>
 800abe8:	b30e      	cbz	r6, 800ac2e <__multadd+0x7e>
 800abea:	68a3      	ldr	r3, [r4, #8]
 800abec:	42ab      	cmp	r3, r5
 800abee:	dc19      	bgt.n	800ac24 <__multadd+0x74>
 800abf0:	6861      	ldr	r1, [r4, #4]
 800abf2:	4638      	mov	r0, r7
 800abf4:	3101      	adds	r1, #1
 800abf6:	f7ff ff79 	bl	800aaec <_Balloc>
 800abfa:	4680      	mov	r8, r0
 800abfc:	b928      	cbnz	r0, 800ac0a <__multadd+0x5a>
 800abfe:	4602      	mov	r2, r0
 800ac00:	4b0c      	ldr	r3, [pc, #48]	; (800ac34 <__multadd+0x84>)
 800ac02:	480d      	ldr	r0, [pc, #52]	; (800ac38 <__multadd+0x88>)
 800ac04:	21ba      	movs	r1, #186	; 0xba
 800ac06:	f000 ff05 	bl	800ba14 <__assert_func>
 800ac0a:	6922      	ldr	r2, [r4, #16]
 800ac0c:	3202      	adds	r2, #2
 800ac0e:	f104 010c 	add.w	r1, r4, #12
 800ac12:	0092      	lsls	r2, r2, #2
 800ac14:	300c      	adds	r0, #12
 800ac16:	f000 feef 	bl	800b9f8 <memcpy>
 800ac1a:	4621      	mov	r1, r4
 800ac1c:	4638      	mov	r0, r7
 800ac1e:	f7ff ffa5 	bl	800ab6c <_Bfree>
 800ac22:	4644      	mov	r4, r8
 800ac24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ac28:	3501      	adds	r5, #1
 800ac2a:	615e      	str	r6, [r3, #20]
 800ac2c:	6125      	str	r5, [r4, #16]
 800ac2e:	4620      	mov	r0, r4
 800ac30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac34:	0800be00 	.word	0x0800be00
 800ac38:	0800be11 	.word	0x0800be11

0800ac3c <__hi0bits>:
 800ac3c:	0c03      	lsrs	r3, r0, #16
 800ac3e:	041b      	lsls	r3, r3, #16
 800ac40:	b9d3      	cbnz	r3, 800ac78 <__hi0bits+0x3c>
 800ac42:	0400      	lsls	r0, r0, #16
 800ac44:	2310      	movs	r3, #16
 800ac46:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ac4a:	bf04      	itt	eq
 800ac4c:	0200      	lsleq	r0, r0, #8
 800ac4e:	3308      	addeq	r3, #8
 800ac50:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ac54:	bf04      	itt	eq
 800ac56:	0100      	lsleq	r0, r0, #4
 800ac58:	3304      	addeq	r3, #4
 800ac5a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ac5e:	bf04      	itt	eq
 800ac60:	0080      	lsleq	r0, r0, #2
 800ac62:	3302      	addeq	r3, #2
 800ac64:	2800      	cmp	r0, #0
 800ac66:	db05      	blt.n	800ac74 <__hi0bits+0x38>
 800ac68:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ac6c:	f103 0301 	add.w	r3, r3, #1
 800ac70:	bf08      	it	eq
 800ac72:	2320      	moveq	r3, #32
 800ac74:	4618      	mov	r0, r3
 800ac76:	4770      	bx	lr
 800ac78:	2300      	movs	r3, #0
 800ac7a:	e7e4      	b.n	800ac46 <__hi0bits+0xa>

0800ac7c <__lo0bits>:
 800ac7c:	6803      	ldr	r3, [r0, #0]
 800ac7e:	f013 0207 	ands.w	r2, r3, #7
 800ac82:	d00c      	beq.n	800ac9e <__lo0bits+0x22>
 800ac84:	07d9      	lsls	r1, r3, #31
 800ac86:	d422      	bmi.n	800acce <__lo0bits+0x52>
 800ac88:	079a      	lsls	r2, r3, #30
 800ac8a:	bf49      	itett	mi
 800ac8c:	085b      	lsrmi	r3, r3, #1
 800ac8e:	089b      	lsrpl	r3, r3, #2
 800ac90:	6003      	strmi	r3, [r0, #0]
 800ac92:	2201      	movmi	r2, #1
 800ac94:	bf5c      	itt	pl
 800ac96:	6003      	strpl	r3, [r0, #0]
 800ac98:	2202      	movpl	r2, #2
 800ac9a:	4610      	mov	r0, r2
 800ac9c:	4770      	bx	lr
 800ac9e:	b299      	uxth	r1, r3
 800aca0:	b909      	cbnz	r1, 800aca6 <__lo0bits+0x2a>
 800aca2:	0c1b      	lsrs	r3, r3, #16
 800aca4:	2210      	movs	r2, #16
 800aca6:	b2d9      	uxtb	r1, r3
 800aca8:	b909      	cbnz	r1, 800acae <__lo0bits+0x32>
 800acaa:	3208      	adds	r2, #8
 800acac:	0a1b      	lsrs	r3, r3, #8
 800acae:	0719      	lsls	r1, r3, #28
 800acb0:	bf04      	itt	eq
 800acb2:	091b      	lsreq	r3, r3, #4
 800acb4:	3204      	addeq	r2, #4
 800acb6:	0799      	lsls	r1, r3, #30
 800acb8:	bf04      	itt	eq
 800acba:	089b      	lsreq	r3, r3, #2
 800acbc:	3202      	addeq	r2, #2
 800acbe:	07d9      	lsls	r1, r3, #31
 800acc0:	d403      	bmi.n	800acca <__lo0bits+0x4e>
 800acc2:	085b      	lsrs	r3, r3, #1
 800acc4:	f102 0201 	add.w	r2, r2, #1
 800acc8:	d003      	beq.n	800acd2 <__lo0bits+0x56>
 800acca:	6003      	str	r3, [r0, #0]
 800accc:	e7e5      	b.n	800ac9a <__lo0bits+0x1e>
 800acce:	2200      	movs	r2, #0
 800acd0:	e7e3      	b.n	800ac9a <__lo0bits+0x1e>
 800acd2:	2220      	movs	r2, #32
 800acd4:	e7e1      	b.n	800ac9a <__lo0bits+0x1e>
	...

0800acd8 <__i2b>:
 800acd8:	b510      	push	{r4, lr}
 800acda:	460c      	mov	r4, r1
 800acdc:	2101      	movs	r1, #1
 800acde:	f7ff ff05 	bl	800aaec <_Balloc>
 800ace2:	4602      	mov	r2, r0
 800ace4:	b928      	cbnz	r0, 800acf2 <__i2b+0x1a>
 800ace6:	4b05      	ldr	r3, [pc, #20]	; (800acfc <__i2b+0x24>)
 800ace8:	4805      	ldr	r0, [pc, #20]	; (800ad00 <__i2b+0x28>)
 800acea:	f240 1145 	movw	r1, #325	; 0x145
 800acee:	f000 fe91 	bl	800ba14 <__assert_func>
 800acf2:	2301      	movs	r3, #1
 800acf4:	6144      	str	r4, [r0, #20]
 800acf6:	6103      	str	r3, [r0, #16]
 800acf8:	bd10      	pop	{r4, pc}
 800acfa:	bf00      	nop
 800acfc:	0800be00 	.word	0x0800be00
 800ad00:	0800be11 	.word	0x0800be11

0800ad04 <__multiply>:
 800ad04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad08:	4691      	mov	r9, r2
 800ad0a:	690a      	ldr	r2, [r1, #16]
 800ad0c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ad10:	429a      	cmp	r2, r3
 800ad12:	bfb8      	it	lt
 800ad14:	460b      	movlt	r3, r1
 800ad16:	460c      	mov	r4, r1
 800ad18:	bfbc      	itt	lt
 800ad1a:	464c      	movlt	r4, r9
 800ad1c:	4699      	movlt	r9, r3
 800ad1e:	6927      	ldr	r7, [r4, #16]
 800ad20:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ad24:	68a3      	ldr	r3, [r4, #8]
 800ad26:	6861      	ldr	r1, [r4, #4]
 800ad28:	eb07 060a 	add.w	r6, r7, sl
 800ad2c:	42b3      	cmp	r3, r6
 800ad2e:	b085      	sub	sp, #20
 800ad30:	bfb8      	it	lt
 800ad32:	3101      	addlt	r1, #1
 800ad34:	f7ff feda 	bl	800aaec <_Balloc>
 800ad38:	b930      	cbnz	r0, 800ad48 <__multiply+0x44>
 800ad3a:	4602      	mov	r2, r0
 800ad3c:	4b44      	ldr	r3, [pc, #272]	; (800ae50 <__multiply+0x14c>)
 800ad3e:	4845      	ldr	r0, [pc, #276]	; (800ae54 <__multiply+0x150>)
 800ad40:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ad44:	f000 fe66 	bl	800ba14 <__assert_func>
 800ad48:	f100 0514 	add.w	r5, r0, #20
 800ad4c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ad50:	462b      	mov	r3, r5
 800ad52:	2200      	movs	r2, #0
 800ad54:	4543      	cmp	r3, r8
 800ad56:	d321      	bcc.n	800ad9c <__multiply+0x98>
 800ad58:	f104 0314 	add.w	r3, r4, #20
 800ad5c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ad60:	f109 0314 	add.w	r3, r9, #20
 800ad64:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ad68:	9202      	str	r2, [sp, #8]
 800ad6a:	1b3a      	subs	r2, r7, r4
 800ad6c:	3a15      	subs	r2, #21
 800ad6e:	f022 0203 	bic.w	r2, r2, #3
 800ad72:	3204      	adds	r2, #4
 800ad74:	f104 0115 	add.w	r1, r4, #21
 800ad78:	428f      	cmp	r7, r1
 800ad7a:	bf38      	it	cc
 800ad7c:	2204      	movcc	r2, #4
 800ad7e:	9201      	str	r2, [sp, #4]
 800ad80:	9a02      	ldr	r2, [sp, #8]
 800ad82:	9303      	str	r3, [sp, #12]
 800ad84:	429a      	cmp	r2, r3
 800ad86:	d80c      	bhi.n	800ada2 <__multiply+0x9e>
 800ad88:	2e00      	cmp	r6, #0
 800ad8a:	dd03      	ble.n	800ad94 <__multiply+0x90>
 800ad8c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d05b      	beq.n	800ae4c <__multiply+0x148>
 800ad94:	6106      	str	r6, [r0, #16]
 800ad96:	b005      	add	sp, #20
 800ad98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad9c:	f843 2b04 	str.w	r2, [r3], #4
 800ada0:	e7d8      	b.n	800ad54 <__multiply+0x50>
 800ada2:	f8b3 a000 	ldrh.w	sl, [r3]
 800ada6:	f1ba 0f00 	cmp.w	sl, #0
 800adaa:	d024      	beq.n	800adf6 <__multiply+0xf2>
 800adac:	f104 0e14 	add.w	lr, r4, #20
 800adb0:	46a9      	mov	r9, r5
 800adb2:	f04f 0c00 	mov.w	ip, #0
 800adb6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800adba:	f8d9 1000 	ldr.w	r1, [r9]
 800adbe:	fa1f fb82 	uxth.w	fp, r2
 800adc2:	b289      	uxth	r1, r1
 800adc4:	fb0a 110b 	mla	r1, sl, fp, r1
 800adc8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800adcc:	f8d9 2000 	ldr.w	r2, [r9]
 800add0:	4461      	add	r1, ip
 800add2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800add6:	fb0a c20b 	mla	r2, sl, fp, ip
 800adda:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800adde:	b289      	uxth	r1, r1
 800ade0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ade4:	4577      	cmp	r7, lr
 800ade6:	f849 1b04 	str.w	r1, [r9], #4
 800adea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800adee:	d8e2      	bhi.n	800adb6 <__multiply+0xb2>
 800adf0:	9a01      	ldr	r2, [sp, #4]
 800adf2:	f845 c002 	str.w	ip, [r5, r2]
 800adf6:	9a03      	ldr	r2, [sp, #12]
 800adf8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800adfc:	3304      	adds	r3, #4
 800adfe:	f1b9 0f00 	cmp.w	r9, #0
 800ae02:	d021      	beq.n	800ae48 <__multiply+0x144>
 800ae04:	6829      	ldr	r1, [r5, #0]
 800ae06:	f104 0c14 	add.w	ip, r4, #20
 800ae0a:	46ae      	mov	lr, r5
 800ae0c:	f04f 0a00 	mov.w	sl, #0
 800ae10:	f8bc b000 	ldrh.w	fp, [ip]
 800ae14:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ae18:	fb09 220b 	mla	r2, r9, fp, r2
 800ae1c:	4452      	add	r2, sl
 800ae1e:	b289      	uxth	r1, r1
 800ae20:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ae24:	f84e 1b04 	str.w	r1, [lr], #4
 800ae28:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ae2c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ae30:	f8be 1000 	ldrh.w	r1, [lr]
 800ae34:	fb09 110a 	mla	r1, r9, sl, r1
 800ae38:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ae3c:	4567      	cmp	r7, ip
 800ae3e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ae42:	d8e5      	bhi.n	800ae10 <__multiply+0x10c>
 800ae44:	9a01      	ldr	r2, [sp, #4]
 800ae46:	50a9      	str	r1, [r5, r2]
 800ae48:	3504      	adds	r5, #4
 800ae4a:	e799      	b.n	800ad80 <__multiply+0x7c>
 800ae4c:	3e01      	subs	r6, #1
 800ae4e:	e79b      	b.n	800ad88 <__multiply+0x84>
 800ae50:	0800be00 	.word	0x0800be00
 800ae54:	0800be11 	.word	0x0800be11

0800ae58 <__pow5mult>:
 800ae58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae5c:	4615      	mov	r5, r2
 800ae5e:	f012 0203 	ands.w	r2, r2, #3
 800ae62:	4606      	mov	r6, r0
 800ae64:	460f      	mov	r7, r1
 800ae66:	d007      	beq.n	800ae78 <__pow5mult+0x20>
 800ae68:	4c25      	ldr	r4, [pc, #148]	; (800af00 <__pow5mult+0xa8>)
 800ae6a:	3a01      	subs	r2, #1
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ae72:	f7ff fe9d 	bl	800abb0 <__multadd>
 800ae76:	4607      	mov	r7, r0
 800ae78:	10ad      	asrs	r5, r5, #2
 800ae7a:	d03d      	beq.n	800aef8 <__pow5mult+0xa0>
 800ae7c:	69f4      	ldr	r4, [r6, #28]
 800ae7e:	b97c      	cbnz	r4, 800aea0 <__pow5mult+0x48>
 800ae80:	2010      	movs	r0, #16
 800ae82:	f7ff fd7f 	bl	800a984 <malloc>
 800ae86:	4602      	mov	r2, r0
 800ae88:	61f0      	str	r0, [r6, #28]
 800ae8a:	b928      	cbnz	r0, 800ae98 <__pow5mult+0x40>
 800ae8c:	4b1d      	ldr	r3, [pc, #116]	; (800af04 <__pow5mult+0xac>)
 800ae8e:	481e      	ldr	r0, [pc, #120]	; (800af08 <__pow5mult+0xb0>)
 800ae90:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ae94:	f000 fdbe 	bl	800ba14 <__assert_func>
 800ae98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ae9c:	6004      	str	r4, [r0, #0]
 800ae9e:	60c4      	str	r4, [r0, #12]
 800aea0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800aea4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aea8:	b94c      	cbnz	r4, 800aebe <__pow5mult+0x66>
 800aeaa:	f240 2171 	movw	r1, #625	; 0x271
 800aeae:	4630      	mov	r0, r6
 800aeb0:	f7ff ff12 	bl	800acd8 <__i2b>
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	f8c8 0008 	str.w	r0, [r8, #8]
 800aeba:	4604      	mov	r4, r0
 800aebc:	6003      	str	r3, [r0, #0]
 800aebe:	f04f 0900 	mov.w	r9, #0
 800aec2:	07eb      	lsls	r3, r5, #31
 800aec4:	d50a      	bpl.n	800aedc <__pow5mult+0x84>
 800aec6:	4639      	mov	r1, r7
 800aec8:	4622      	mov	r2, r4
 800aeca:	4630      	mov	r0, r6
 800aecc:	f7ff ff1a 	bl	800ad04 <__multiply>
 800aed0:	4639      	mov	r1, r7
 800aed2:	4680      	mov	r8, r0
 800aed4:	4630      	mov	r0, r6
 800aed6:	f7ff fe49 	bl	800ab6c <_Bfree>
 800aeda:	4647      	mov	r7, r8
 800aedc:	106d      	asrs	r5, r5, #1
 800aede:	d00b      	beq.n	800aef8 <__pow5mult+0xa0>
 800aee0:	6820      	ldr	r0, [r4, #0]
 800aee2:	b938      	cbnz	r0, 800aef4 <__pow5mult+0x9c>
 800aee4:	4622      	mov	r2, r4
 800aee6:	4621      	mov	r1, r4
 800aee8:	4630      	mov	r0, r6
 800aeea:	f7ff ff0b 	bl	800ad04 <__multiply>
 800aeee:	6020      	str	r0, [r4, #0]
 800aef0:	f8c0 9000 	str.w	r9, [r0]
 800aef4:	4604      	mov	r4, r0
 800aef6:	e7e4      	b.n	800aec2 <__pow5mult+0x6a>
 800aef8:	4638      	mov	r0, r7
 800aefa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aefe:	bf00      	nop
 800af00:	0800bf60 	.word	0x0800bf60
 800af04:	0800bd91 	.word	0x0800bd91
 800af08:	0800be11 	.word	0x0800be11

0800af0c <__lshift>:
 800af0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af10:	460c      	mov	r4, r1
 800af12:	6849      	ldr	r1, [r1, #4]
 800af14:	6923      	ldr	r3, [r4, #16]
 800af16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800af1a:	68a3      	ldr	r3, [r4, #8]
 800af1c:	4607      	mov	r7, r0
 800af1e:	4691      	mov	r9, r2
 800af20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800af24:	f108 0601 	add.w	r6, r8, #1
 800af28:	42b3      	cmp	r3, r6
 800af2a:	db0b      	blt.n	800af44 <__lshift+0x38>
 800af2c:	4638      	mov	r0, r7
 800af2e:	f7ff fddd 	bl	800aaec <_Balloc>
 800af32:	4605      	mov	r5, r0
 800af34:	b948      	cbnz	r0, 800af4a <__lshift+0x3e>
 800af36:	4602      	mov	r2, r0
 800af38:	4b28      	ldr	r3, [pc, #160]	; (800afdc <__lshift+0xd0>)
 800af3a:	4829      	ldr	r0, [pc, #164]	; (800afe0 <__lshift+0xd4>)
 800af3c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800af40:	f000 fd68 	bl	800ba14 <__assert_func>
 800af44:	3101      	adds	r1, #1
 800af46:	005b      	lsls	r3, r3, #1
 800af48:	e7ee      	b.n	800af28 <__lshift+0x1c>
 800af4a:	2300      	movs	r3, #0
 800af4c:	f100 0114 	add.w	r1, r0, #20
 800af50:	f100 0210 	add.w	r2, r0, #16
 800af54:	4618      	mov	r0, r3
 800af56:	4553      	cmp	r3, sl
 800af58:	db33      	blt.n	800afc2 <__lshift+0xb6>
 800af5a:	6920      	ldr	r0, [r4, #16]
 800af5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800af60:	f104 0314 	add.w	r3, r4, #20
 800af64:	f019 091f 	ands.w	r9, r9, #31
 800af68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800af6c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800af70:	d02b      	beq.n	800afca <__lshift+0xbe>
 800af72:	f1c9 0e20 	rsb	lr, r9, #32
 800af76:	468a      	mov	sl, r1
 800af78:	2200      	movs	r2, #0
 800af7a:	6818      	ldr	r0, [r3, #0]
 800af7c:	fa00 f009 	lsl.w	r0, r0, r9
 800af80:	4310      	orrs	r0, r2
 800af82:	f84a 0b04 	str.w	r0, [sl], #4
 800af86:	f853 2b04 	ldr.w	r2, [r3], #4
 800af8a:	459c      	cmp	ip, r3
 800af8c:	fa22 f20e 	lsr.w	r2, r2, lr
 800af90:	d8f3      	bhi.n	800af7a <__lshift+0x6e>
 800af92:	ebac 0304 	sub.w	r3, ip, r4
 800af96:	3b15      	subs	r3, #21
 800af98:	f023 0303 	bic.w	r3, r3, #3
 800af9c:	3304      	adds	r3, #4
 800af9e:	f104 0015 	add.w	r0, r4, #21
 800afa2:	4584      	cmp	ip, r0
 800afa4:	bf38      	it	cc
 800afa6:	2304      	movcc	r3, #4
 800afa8:	50ca      	str	r2, [r1, r3]
 800afaa:	b10a      	cbz	r2, 800afb0 <__lshift+0xa4>
 800afac:	f108 0602 	add.w	r6, r8, #2
 800afb0:	3e01      	subs	r6, #1
 800afb2:	4638      	mov	r0, r7
 800afb4:	612e      	str	r6, [r5, #16]
 800afb6:	4621      	mov	r1, r4
 800afb8:	f7ff fdd8 	bl	800ab6c <_Bfree>
 800afbc:	4628      	mov	r0, r5
 800afbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afc2:	f842 0f04 	str.w	r0, [r2, #4]!
 800afc6:	3301      	adds	r3, #1
 800afc8:	e7c5      	b.n	800af56 <__lshift+0x4a>
 800afca:	3904      	subs	r1, #4
 800afcc:	f853 2b04 	ldr.w	r2, [r3], #4
 800afd0:	f841 2f04 	str.w	r2, [r1, #4]!
 800afd4:	459c      	cmp	ip, r3
 800afd6:	d8f9      	bhi.n	800afcc <__lshift+0xc0>
 800afd8:	e7ea      	b.n	800afb0 <__lshift+0xa4>
 800afda:	bf00      	nop
 800afdc:	0800be00 	.word	0x0800be00
 800afe0:	0800be11 	.word	0x0800be11

0800afe4 <__mcmp>:
 800afe4:	b530      	push	{r4, r5, lr}
 800afe6:	6902      	ldr	r2, [r0, #16]
 800afe8:	690c      	ldr	r4, [r1, #16]
 800afea:	1b12      	subs	r2, r2, r4
 800afec:	d10e      	bne.n	800b00c <__mcmp+0x28>
 800afee:	f100 0314 	add.w	r3, r0, #20
 800aff2:	3114      	adds	r1, #20
 800aff4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800aff8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800affc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b000:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b004:	42a5      	cmp	r5, r4
 800b006:	d003      	beq.n	800b010 <__mcmp+0x2c>
 800b008:	d305      	bcc.n	800b016 <__mcmp+0x32>
 800b00a:	2201      	movs	r2, #1
 800b00c:	4610      	mov	r0, r2
 800b00e:	bd30      	pop	{r4, r5, pc}
 800b010:	4283      	cmp	r3, r0
 800b012:	d3f3      	bcc.n	800affc <__mcmp+0x18>
 800b014:	e7fa      	b.n	800b00c <__mcmp+0x28>
 800b016:	f04f 32ff 	mov.w	r2, #4294967295
 800b01a:	e7f7      	b.n	800b00c <__mcmp+0x28>

0800b01c <__mdiff>:
 800b01c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b020:	460c      	mov	r4, r1
 800b022:	4606      	mov	r6, r0
 800b024:	4611      	mov	r1, r2
 800b026:	4620      	mov	r0, r4
 800b028:	4690      	mov	r8, r2
 800b02a:	f7ff ffdb 	bl	800afe4 <__mcmp>
 800b02e:	1e05      	subs	r5, r0, #0
 800b030:	d110      	bne.n	800b054 <__mdiff+0x38>
 800b032:	4629      	mov	r1, r5
 800b034:	4630      	mov	r0, r6
 800b036:	f7ff fd59 	bl	800aaec <_Balloc>
 800b03a:	b930      	cbnz	r0, 800b04a <__mdiff+0x2e>
 800b03c:	4b3a      	ldr	r3, [pc, #232]	; (800b128 <__mdiff+0x10c>)
 800b03e:	4602      	mov	r2, r0
 800b040:	f240 2137 	movw	r1, #567	; 0x237
 800b044:	4839      	ldr	r0, [pc, #228]	; (800b12c <__mdiff+0x110>)
 800b046:	f000 fce5 	bl	800ba14 <__assert_func>
 800b04a:	2301      	movs	r3, #1
 800b04c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b050:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b054:	bfa4      	itt	ge
 800b056:	4643      	movge	r3, r8
 800b058:	46a0      	movge	r8, r4
 800b05a:	4630      	mov	r0, r6
 800b05c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b060:	bfa6      	itte	ge
 800b062:	461c      	movge	r4, r3
 800b064:	2500      	movge	r5, #0
 800b066:	2501      	movlt	r5, #1
 800b068:	f7ff fd40 	bl	800aaec <_Balloc>
 800b06c:	b920      	cbnz	r0, 800b078 <__mdiff+0x5c>
 800b06e:	4b2e      	ldr	r3, [pc, #184]	; (800b128 <__mdiff+0x10c>)
 800b070:	4602      	mov	r2, r0
 800b072:	f240 2145 	movw	r1, #581	; 0x245
 800b076:	e7e5      	b.n	800b044 <__mdiff+0x28>
 800b078:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b07c:	6926      	ldr	r6, [r4, #16]
 800b07e:	60c5      	str	r5, [r0, #12]
 800b080:	f104 0914 	add.w	r9, r4, #20
 800b084:	f108 0514 	add.w	r5, r8, #20
 800b088:	f100 0e14 	add.w	lr, r0, #20
 800b08c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b090:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b094:	f108 0210 	add.w	r2, r8, #16
 800b098:	46f2      	mov	sl, lr
 800b09a:	2100      	movs	r1, #0
 800b09c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b0a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b0a4:	fa11 f88b 	uxtah	r8, r1, fp
 800b0a8:	b299      	uxth	r1, r3
 800b0aa:	0c1b      	lsrs	r3, r3, #16
 800b0ac:	eba8 0801 	sub.w	r8, r8, r1
 800b0b0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b0b4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b0b8:	fa1f f888 	uxth.w	r8, r8
 800b0bc:	1419      	asrs	r1, r3, #16
 800b0be:	454e      	cmp	r6, r9
 800b0c0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b0c4:	f84a 3b04 	str.w	r3, [sl], #4
 800b0c8:	d8e8      	bhi.n	800b09c <__mdiff+0x80>
 800b0ca:	1b33      	subs	r3, r6, r4
 800b0cc:	3b15      	subs	r3, #21
 800b0ce:	f023 0303 	bic.w	r3, r3, #3
 800b0d2:	3304      	adds	r3, #4
 800b0d4:	3415      	adds	r4, #21
 800b0d6:	42a6      	cmp	r6, r4
 800b0d8:	bf38      	it	cc
 800b0da:	2304      	movcc	r3, #4
 800b0dc:	441d      	add	r5, r3
 800b0de:	4473      	add	r3, lr
 800b0e0:	469e      	mov	lr, r3
 800b0e2:	462e      	mov	r6, r5
 800b0e4:	4566      	cmp	r6, ip
 800b0e6:	d30e      	bcc.n	800b106 <__mdiff+0xea>
 800b0e8:	f10c 0203 	add.w	r2, ip, #3
 800b0ec:	1b52      	subs	r2, r2, r5
 800b0ee:	f022 0203 	bic.w	r2, r2, #3
 800b0f2:	3d03      	subs	r5, #3
 800b0f4:	45ac      	cmp	ip, r5
 800b0f6:	bf38      	it	cc
 800b0f8:	2200      	movcc	r2, #0
 800b0fa:	4413      	add	r3, r2
 800b0fc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b100:	b17a      	cbz	r2, 800b122 <__mdiff+0x106>
 800b102:	6107      	str	r7, [r0, #16]
 800b104:	e7a4      	b.n	800b050 <__mdiff+0x34>
 800b106:	f856 8b04 	ldr.w	r8, [r6], #4
 800b10a:	fa11 f288 	uxtah	r2, r1, r8
 800b10e:	1414      	asrs	r4, r2, #16
 800b110:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b114:	b292      	uxth	r2, r2
 800b116:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b11a:	f84e 2b04 	str.w	r2, [lr], #4
 800b11e:	1421      	asrs	r1, r4, #16
 800b120:	e7e0      	b.n	800b0e4 <__mdiff+0xc8>
 800b122:	3f01      	subs	r7, #1
 800b124:	e7ea      	b.n	800b0fc <__mdiff+0xe0>
 800b126:	bf00      	nop
 800b128:	0800be00 	.word	0x0800be00
 800b12c:	0800be11 	.word	0x0800be11

0800b130 <__d2b>:
 800b130:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b134:	460f      	mov	r7, r1
 800b136:	2101      	movs	r1, #1
 800b138:	ec59 8b10 	vmov	r8, r9, d0
 800b13c:	4616      	mov	r6, r2
 800b13e:	f7ff fcd5 	bl	800aaec <_Balloc>
 800b142:	4604      	mov	r4, r0
 800b144:	b930      	cbnz	r0, 800b154 <__d2b+0x24>
 800b146:	4602      	mov	r2, r0
 800b148:	4b24      	ldr	r3, [pc, #144]	; (800b1dc <__d2b+0xac>)
 800b14a:	4825      	ldr	r0, [pc, #148]	; (800b1e0 <__d2b+0xb0>)
 800b14c:	f240 310f 	movw	r1, #783	; 0x30f
 800b150:	f000 fc60 	bl	800ba14 <__assert_func>
 800b154:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b158:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b15c:	bb2d      	cbnz	r5, 800b1aa <__d2b+0x7a>
 800b15e:	9301      	str	r3, [sp, #4]
 800b160:	f1b8 0300 	subs.w	r3, r8, #0
 800b164:	d026      	beq.n	800b1b4 <__d2b+0x84>
 800b166:	4668      	mov	r0, sp
 800b168:	9300      	str	r3, [sp, #0]
 800b16a:	f7ff fd87 	bl	800ac7c <__lo0bits>
 800b16e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b172:	b1e8      	cbz	r0, 800b1b0 <__d2b+0x80>
 800b174:	f1c0 0320 	rsb	r3, r0, #32
 800b178:	fa02 f303 	lsl.w	r3, r2, r3
 800b17c:	430b      	orrs	r3, r1
 800b17e:	40c2      	lsrs	r2, r0
 800b180:	6163      	str	r3, [r4, #20]
 800b182:	9201      	str	r2, [sp, #4]
 800b184:	9b01      	ldr	r3, [sp, #4]
 800b186:	61a3      	str	r3, [r4, #24]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	bf14      	ite	ne
 800b18c:	2202      	movne	r2, #2
 800b18e:	2201      	moveq	r2, #1
 800b190:	6122      	str	r2, [r4, #16]
 800b192:	b1bd      	cbz	r5, 800b1c4 <__d2b+0x94>
 800b194:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b198:	4405      	add	r5, r0
 800b19a:	603d      	str	r5, [r7, #0]
 800b19c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b1a0:	6030      	str	r0, [r6, #0]
 800b1a2:	4620      	mov	r0, r4
 800b1a4:	b003      	add	sp, #12
 800b1a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b1ae:	e7d6      	b.n	800b15e <__d2b+0x2e>
 800b1b0:	6161      	str	r1, [r4, #20]
 800b1b2:	e7e7      	b.n	800b184 <__d2b+0x54>
 800b1b4:	a801      	add	r0, sp, #4
 800b1b6:	f7ff fd61 	bl	800ac7c <__lo0bits>
 800b1ba:	9b01      	ldr	r3, [sp, #4]
 800b1bc:	6163      	str	r3, [r4, #20]
 800b1be:	3020      	adds	r0, #32
 800b1c0:	2201      	movs	r2, #1
 800b1c2:	e7e5      	b.n	800b190 <__d2b+0x60>
 800b1c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b1c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b1cc:	6038      	str	r0, [r7, #0]
 800b1ce:	6918      	ldr	r0, [r3, #16]
 800b1d0:	f7ff fd34 	bl	800ac3c <__hi0bits>
 800b1d4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b1d8:	e7e2      	b.n	800b1a0 <__d2b+0x70>
 800b1da:	bf00      	nop
 800b1dc:	0800be00 	.word	0x0800be00
 800b1e0:	0800be11 	.word	0x0800be11

0800b1e4 <__ssputs_r>:
 800b1e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1e8:	688e      	ldr	r6, [r1, #8]
 800b1ea:	461f      	mov	r7, r3
 800b1ec:	42be      	cmp	r6, r7
 800b1ee:	680b      	ldr	r3, [r1, #0]
 800b1f0:	4682      	mov	sl, r0
 800b1f2:	460c      	mov	r4, r1
 800b1f4:	4690      	mov	r8, r2
 800b1f6:	d82c      	bhi.n	800b252 <__ssputs_r+0x6e>
 800b1f8:	898a      	ldrh	r2, [r1, #12]
 800b1fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b1fe:	d026      	beq.n	800b24e <__ssputs_r+0x6a>
 800b200:	6965      	ldr	r5, [r4, #20]
 800b202:	6909      	ldr	r1, [r1, #16]
 800b204:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b208:	eba3 0901 	sub.w	r9, r3, r1
 800b20c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b210:	1c7b      	adds	r3, r7, #1
 800b212:	444b      	add	r3, r9
 800b214:	106d      	asrs	r5, r5, #1
 800b216:	429d      	cmp	r5, r3
 800b218:	bf38      	it	cc
 800b21a:	461d      	movcc	r5, r3
 800b21c:	0553      	lsls	r3, r2, #21
 800b21e:	d527      	bpl.n	800b270 <__ssputs_r+0x8c>
 800b220:	4629      	mov	r1, r5
 800b222:	f7ff fbd7 	bl	800a9d4 <_malloc_r>
 800b226:	4606      	mov	r6, r0
 800b228:	b360      	cbz	r0, 800b284 <__ssputs_r+0xa0>
 800b22a:	6921      	ldr	r1, [r4, #16]
 800b22c:	464a      	mov	r2, r9
 800b22e:	f000 fbe3 	bl	800b9f8 <memcpy>
 800b232:	89a3      	ldrh	r3, [r4, #12]
 800b234:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b23c:	81a3      	strh	r3, [r4, #12]
 800b23e:	6126      	str	r6, [r4, #16]
 800b240:	6165      	str	r5, [r4, #20]
 800b242:	444e      	add	r6, r9
 800b244:	eba5 0509 	sub.w	r5, r5, r9
 800b248:	6026      	str	r6, [r4, #0]
 800b24a:	60a5      	str	r5, [r4, #8]
 800b24c:	463e      	mov	r6, r7
 800b24e:	42be      	cmp	r6, r7
 800b250:	d900      	bls.n	800b254 <__ssputs_r+0x70>
 800b252:	463e      	mov	r6, r7
 800b254:	6820      	ldr	r0, [r4, #0]
 800b256:	4632      	mov	r2, r6
 800b258:	4641      	mov	r1, r8
 800b25a:	f000 fba3 	bl	800b9a4 <memmove>
 800b25e:	68a3      	ldr	r3, [r4, #8]
 800b260:	1b9b      	subs	r3, r3, r6
 800b262:	60a3      	str	r3, [r4, #8]
 800b264:	6823      	ldr	r3, [r4, #0]
 800b266:	4433      	add	r3, r6
 800b268:	6023      	str	r3, [r4, #0]
 800b26a:	2000      	movs	r0, #0
 800b26c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b270:	462a      	mov	r2, r5
 800b272:	f000 fc15 	bl	800baa0 <_realloc_r>
 800b276:	4606      	mov	r6, r0
 800b278:	2800      	cmp	r0, #0
 800b27a:	d1e0      	bne.n	800b23e <__ssputs_r+0x5a>
 800b27c:	6921      	ldr	r1, [r4, #16]
 800b27e:	4650      	mov	r0, sl
 800b280:	f7ff fb34 	bl	800a8ec <_free_r>
 800b284:	230c      	movs	r3, #12
 800b286:	f8ca 3000 	str.w	r3, [sl]
 800b28a:	89a3      	ldrh	r3, [r4, #12]
 800b28c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b290:	81a3      	strh	r3, [r4, #12]
 800b292:	f04f 30ff 	mov.w	r0, #4294967295
 800b296:	e7e9      	b.n	800b26c <__ssputs_r+0x88>

0800b298 <_svfiprintf_r>:
 800b298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b29c:	4698      	mov	r8, r3
 800b29e:	898b      	ldrh	r3, [r1, #12]
 800b2a0:	061b      	lsls	r3, r3, #24
 800b2a2:	b09d      	sub	sp, #116	; 0x74
 800b2a4:	4607      	mov	r7, r0
 800b2a6:	460d      	mov	r5, r1
 800b2a8:	4614      	mov	r4, r2
 800b2aa:	d50e      	bpl.n	800b2ca <_svfiprintf_r+0x32>
 800b2ac:	690b      	ldr	r3, [r1, #16]
 800b2ae:	b963      	cbnz	r3, 800b2ca <_svfiprintf_r+0x32>
 800b2b0:	2140      	movs	r1, #64	; 0x40
 800b2b2:	f7ff fb8f 	bl	800a9d4 <_malloc_r>
 800b2b6:	6028      	str	r0, [r5, #0]
 800b2b8:	6128      	str	r0, [r5, #16]
 800b2ba:	b920      	cbnz	r0, 800b2c6 <_svfiprintf_r+0x2e>
 800b2bc:	230c      	movs	r3, #12
 800b2be:	603b      	str	r3, [r7, #0]
 800b2c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b2c4:	e0d0      	b.n	800b468 <_svfiprintf_r+0x1d0>
 800b2c6:	2340      	movs	r3, #64	; 0x40
 800b2c8:	616b      	str	r3, [r5, #20]
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	9309      	str	r3, [sp, #36]	; 0x24
 800b2ce:	2320      	movs	r3, #32
 800b2d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b2d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2d8:	2330      	movs	r3, #48	; 0x30
 800b2da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b480 <_svfiprintf_r+0x1e8>
 800b2de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b2e2:	f04f 0901 	mov.w	r9, #1
 800b2e6:	4623      	mov	r3, r4
 800b2e8:	469a      	mov	sl, r3
 800b2ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2ee:	b10a      	cbz	r2, 800b2f4 <_svfiprintf_r+0x5c>
 800b2f0:	2a25      	cmp	r2, #37	; 0x25
 800b2f2:	d1f9      	bne.n	800b2e8 <_svfiprintf_r+0x50>
 800b2f4:	ebba 0b04 	subs.w	fp, sl, r4
 800b2f8:	d00b      	beq.n	800b312 <_svfiprintf_r+0x7a>
 800b2fa:	465b      	mov	r3, fp
 800b2fc:	4622      	mov	r2, r4
 800b2fe:	4629      	mov	r1, r5
 800b300:	4638      	mov	r0, r7
 800b302:	f7ff ff6f 	bl	800b1e4 <__ssputs_r>
 800b306:	3001      	adds	r0, #1
 800b308:	f000 80a9 	beq.w	800b45e <_svfiprintf_r+0x1c6>
 800b30c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b30e:	445a      	add	r2, fp
 800b310:	9209      	str	r2, [sp, #36]	; 0x24
 800b312:	f89a 3000 	ldrb.w	r3, [sl]
 800b316:	2b00      	cmp	r3, #0
 800b318:	f000 80a1 	beq.w	800b45e <_svfiprintf_r+0x1c6>
 800b31c:	2300      	movs	r3, #0
 800b31e:	f04f 32ff 	mov.w	r2, #4294967295
 800b322:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b326:	f10a 0a01 	add.w	sl, sl, #1
 800b32a:	9304      	str	r3, [sp, #16]
 800b32c:	9307      	str	r3, [sp, #28]
 800b32e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b332:	931a      	str	r3, [sp, #104]	; 0x68
 800b334:	4654      	mov	r4, sl
 800b336:	2205      	movs	r2, #5
 800b338:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b33c:	4850      	ldr	r0, [pc, #320]	; (800b480 <_svfiprintf_r+0x1e8>)
 800b33e:	f7f4 ff57 	bl	80001f0 <memchr>
 800b342:	9a04      	ldr	r2, [sp, #16]
 800b344:	b9d8      	cbnz	r0, 800b37e <_svfiprintf_r+0xe6>
 800b346:	06d0      	lsls	r0, r2, #27
 800b348:	bf44      	itt	mi
 800b34a:	2320      	movmi	r3, #32
 800b34c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b350:	0711      	lsls	r1, r2, #28
 800b352:	bf44      	itt	mi
 800b354:	232b      	movmi	r3, #43	; 0x2b
 800b356:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b35a:	f89a 3000 	ldrb.w	r3, [sl]
 800b35e:	2b2a      	cmp	r3, #42	; 0x2a
 800b360:	d015      	beq.n	800b38e <_svfiprintf_r+0xf6>
 800b362:	9a07      	ldr	r2, [sp, #28]
 800b364:	4654      	mov	r4, sl
 800b366:	2000      	movs	r0, #0
 800b368:	f04f 0c0a 	mov.w	ip, #10
 800b36c:	4621      	mov	r1, r4
 800b36e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b372:	3b30      	subs	r3, #48	; 0x30
 800b374:	2b09      	cmp	r3, #9
 800b376:	d94d      	bls.n	800b414 <_svfiprintf_r+0x17c>
 800b378:	b1b0      	cbz	r0, 800b3a8 <_svfiprintf_r+0x110>
 800b37a:	9207      	str	r2, [sp, #28]
 800b37c:	e014      	b.n	800b3a8 <_svfiprintf_r+0x110>
 800b37e:	eba0 0308 	sub.w	r3, r0, r8
 800b382:	fa09 f303 	lsl.w	r3, r9, r3
 800b386:	4313      	orrs	r3, r2
 800b388:	9304      	str	r3, [sp, #16]
 800b38a:	46a2      	mov	sl, r4
 800b38c:	e7d2      	b.n	800b334 <_svfiprintf_r+0x9c>
 800b38e:	9b03      	ldr	r3, [sp, #12]
 800b390:	1d19      	adds	r1, r3, #4
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	9103      	str	r1, [sp, #12]
 800b396:	2b00      	cmp	r3, #0
 800b398:	bfbb      	ittet	lt
 800b39a:	425b      	neglt	r3, r3
 800b39c:	f042 0202 	orrlt.w	r2, r2, #2
 800b3a0:	9307      	strge	r3, [sp, #28]
 800b3a2:	9307      	strlt	r3, [sp, #28]
 800b3a4:	bfb8      	it	lt
 800b3a6:	9204      	strlt	r2, [sp, #16]
 800b3a8:	7823      	ldrb	r3, [r4, #0]
 800b3aa:	2b2e      	cmp	r3, #46	; 0x2e
 800b3ac:	d10c      	bne.n	800b3c8 <_svfiprintf_r+0x130>
 800b3ae:	7863      	ldrb	r3, [r4, #1]
 800b3b0:	2b2a      	cmp	r3, #42	; 0x2a
 800b3b2:	d134      	bne.n	800b41e <_svfiprintf_r+0x186>
 800b3b4:	9b03      	ldr	r3, [sp, #12]
 800b3b6:	1d1a      	adds	r2, r3, #4
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	9203      	str	r2, [sp, #12]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	bfb8      	it	lt
 800b3c0:	f04f 33ff 	movlt.w	r3, #4294967295
 800b3c4:	3402      	adds	r4, #2
 800b3c6:	9305      	str	r3, [sp, #20]
 800b3c8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b490 <_svfiprintf_r+0x1f8>
 800b3cc:	7821      	ldrb	r1, [r4, #0]
 800b3ce:	2203      	movs	r2, #3
 800b3d0:	4650      	mov	r0, sl
 800b3d2:	f7f4 ff0d 	bl	80001f0 <memchr>
 800b3d6:	b138      	cbz	r0, 800b3e8 <_svfiprintf_r+0x150>
 800b3d8:	9b04      	ldr	r3, [sp, #16]
 800b3da:	eba0 000a 	sub.w	r0, r0, sl
 800b3de:	2240      	movs	r2, #64	; 0x40
 800b3e0:	4082      	lsls	r2, r0
 800b3e2:	4313      	orrs	r3, r2
 800b3e4:	3401      	adds	r4, #1
 800b3e6:	9304      	str	r3, [sp, #16]
 800b3e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3ec:	4825      	ldr	r0, [pc, #148]	; (800b484 <_svfiprintf_r+0x1ec>)
 800b3ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b3f2:	2206      	movs	r2, #6
 800b3f4:	f7f4 fefc 	bl	80001f0 <memchr>
 800b3f8:	2800      	cmp	r0, #0
 800b3fa:	d038      	beq.n	800b46e <_svfiprintf_r+0x1d6>
 800b3fc:	4b22      	ldr	r3, [pc, #136]	; (800b488 <_svfiprintf_r+0x1f0>)
 800b3fe:	bb1b      	cbnz	r3, 800b448 <_svfiprintf_r+0x1b0>
 800b400:	9b03      	ldr	r3, [sp, #12]
 800b402:	3307      	adds	r3, #7
 800b404:	f023 0307 	bic.w	r3, r3, #7
 800b408:	3308      	adds	r3, #8
 800b40a:	9303      	str	r3, [sp, #12]
 800b40c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b40e:	4433      	add	r3, r6
 800b410:	9309      	str	r3, [sp, #36]	; 0x24
 800b412:	e768      	b.n	800b2e6 <_svfiprintf_r+0x4e>
 800b414:	fb0c 3202 	mla	r2, ip, r2, r3
 800b418:	460c      	mov	r4, r1
 800b41a:	2001      	movs	r0, #1
 800b41c:	e7a6      	b.n	800b36c <_svfiprintf_r+0xd4>
 800b41e:	2300      	movs	r3, #0
 800b420:	3401      	adds	r4, #1
 800b422:	9305      	str	r3, [sp, #20]
 800b424:	4619      	mov	r1, r3
 800b426:	f04f 0c0a 	mov.w	ip, #10
 800b42a:	4620      	mov	r0, r4
 800b42c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b430:	3a30      	subs	r2, #48	; 0x30
 800b432:	2a09      	cmp	r2, #9
 800b434:	d903      	bls.n	800b43e <_svfiprintf_r+0x1a6>
 800b436:	2b00      	cmp	r3, #0
 800b438:	d0c6      	beq.n	800b3c8 <_svfiprintf_r+0x130>
 800b43a:	9105      	str	r1, [sp, #20]
 800b43c:	e7c4      	b.n	800b3c8 <_svfiprintf_r+0x130>
 800b43e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b442:	4604      	mov	r4, r0
 800b444:	2301      	movs	r3, #1
 800b446:	e7f0      	b.n	800b42a <_svfiprintf_r+0x192>
 800b448:	ab03      	add	r3, sp, #12
 800b44a:	9300      	str	r3, [sp, #0]
 800b44c:	462a      	mov	r2, r5
 800b44e:	4b0f      	ldr	r3, [pc, #60]	; (800b48c <_svfiprintf_r+0x1f4>)
 800b450:	a904      	add	r1, sp, #16
 800b452:	4638      	mov	r0, r7
 800b454:	f7fd fe52 	bl	80090fc <_printf_float>
 800b458:	1c42      	adds	r2, r0, #1
 800b45a:	4606      	mov	r6, r0
 800b45c:	d1d6      	bne.n	800b40c <_svfiprintf_r+0x174>
 800b45e:	89ab      	ldrh	r3, [r5, #12]
 800b460:	065b      	lsls	r3, r3, #25
 800b462:	f53f af2d 	bmi.w	800b2c0 <_svfiprintf_r+0x28>
 800b466:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b468:	b01d      	add	sp, #116	; 0x74
 800b46a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b46e:	ab03      	add	r3, sp, #12
 800b470:	9300      	str	r3, [sp, #0]
 800b472:	462a      	mov	r2, r5
 800b474:	4b05      	ldr	r3, [pc, #20]	; (800b48c <_svfiprintf_r+0x1f4>)
 800b476:	a904      	add	r1, sp, #16
 800b478:	4638      	mov	r0, r7
 800b47a:	f7fe f8e3 	bl	8009644 <_printf_i>
 800b47e:	e7eb      	b.n	800b458 <_svfiprintf_r+0x1c0>
 800b480:	0800bf6c 	.word	0x0800bf6c
 800b484:	0800bf76 	.word	0x0800bf76
 800b488:	080090fd 	.word	0x080090fd
 800b48c:	0800b1e5 	.word	0x0800b1e5
 800b490:	0800bf72 	.word	0x0800bf72

0800b494 <__sfputc_r>:
 800b494:	6893      	ldr	r3, [r2, #8]
 800b496:	3b01      	subs	r3, #1
 800b498:	2b00      	cmp	r3, #0
 800b49a:	b410      	push	{r4}
 800b49c:	6093      	str	r3, [r2, #8]
 800b49e:	da08      	bge.n	800b4b2 <__sfputc_r+0x1e>
 800b4a0:	6994      	ldr	r4, [r2, #24]
 800b4a2:	42a3      	cmp	r3, r4
 800b4a4:	db01      	blt.n	800b4aa <__sfputc_r+0x16>
 800b4a6:	290a      	cmp	r1, #10
 800b4a8:	d103      	bne.n	800b4b2 <__sfputc_r+0x1e>
 800b4aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4ae:	f000 b9e3 	b.w	800b878 <__swbuf_r>
 800b4b2:	6813      	ldr	r3, [r2, #0]
 800b4b4:	1c58      	adds	r0, r3, #1
 800b4b6:	6010      	str	r0, [r2, #0]
 800b4b8:	7019      	strb	r1, [r3, #0]
 800b4ba:	4608      	mov	r0, r1
 800b4bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4c0:	4770      	bx	lr

0800b4c2 <__sfputs_r>:
 800b4c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4c4:	4606      	mov	r6, r0
 800b4c6:	460f      	mov	r7, r1
 800b4c8:	4614      	mov	r4, r2
 800b4ca:	18d5      	adds	r5, r2, r3
 800b4cc:	42ac      	cmp	r4, r5
 800b4ce:	d101      	bne.n	800b4d4 <__sfputs_r+0x12>
 800b4d0:	2000      	movs	r0, #0
 800b4d2:	e007      	b.n	800b4e4 <__sfputs_r+0x22>
 800b4d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4d8:	463a      	mov	r2, r7
 800b4da:	4630      	mov	r0, r6
 800b4dc:	f7ff ffda 	bl	800b494 <__sfputc_r>
 800b4e0:	1c43      	adds	r3, r0, #1
 800b4e2:	d1f3      	bne.n	800b4cc <__sfputs_r+0xa>
 800b4e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b4e8 <_vfiprintf_r>:
 800b4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4ec:	460d      	mov	r5, r1
 800b4ee:	b09d      	sub	sp, #116	; 0x74
 800b4f0:	4614      	mov	r4, r2
 800b4f2:	4698      	mov	r8, r3
 800b4f4:	4606      	mov	r6, r0
 800b4f6:	b118      	cbz	r0, 800b500 <_vfiprintf_r+0x18>
 800b4f8:	6a03      	ldr	r3, [r0, #32]
 800b4fa:	b90b      	cbnz	r3, 800b500 <_vfiprintf_r+0x18>
 800b4fc:	f7fe fa50 	bl	80099a0 <__sinit>
 800b500:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b502:	07d9      	lsls	r1, r3, #31
 800b504:	d405      	bmi.n	800b512 <_vfiprintf_r+0x2a>
 800b506:	89ab      	ldrh	r3, [r5, #12]
 800b508:	059a      	lsls	r2, r3, #22
 800b50a:	d402      	bmi.n	800b512 <_vfiprintf_r+0x2a>
 800b50c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b50e:	f7fe fb70 	bl	8009bf2 <__retarget_lock_acquire_recursive>
 800b512:	89ab      	ldrh	r3, [r5, #12]
 800b514:	071b      	lsls	r3, r3, #28
 800b516:	d501      	bpl.n	800b51c <_vfiprintf_r+0x34>
 800b518:	692b      	ldr	r3, [r5, #16]
 800b51a:	b99b      	cbnz	r3, 800b544 <_vfiprintf_r+0x5c>
 800b51c:	4629      	mov	r1, r5
 800b51e:	4630      	mov	r0, r6
 800b520:	f000 f9e8 	bl	800b8f4 <__swsetup_r>
 800b524:	b170      	cbz	r0, 800b544 <_vfiprintf_r+0x5c>
 800b526:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b528:	07dc      	lsls	r4, r3, #31
 800b52a:	d504      	bpl.n	800b536 <_vfiprintf_r+0x4e>
 800b52c:	f04f 30ff 	mov.w	r0, #4294967295
 800b530:	b01d      	add	sp, #116	; 0x74
 800b532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b536:	89ab      	ldrh	r3, [r5, #12]
 800b538:	0598      	lsls	r0, r3, #22
 800b53a:	d4f7      	bmi.n	800b52c <_vfiprintf_r+0x44>
 800b53c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b53e:	f7fe fb59 	bl	8009bf4 <__retarget_lock_release_recursive>
 800b542:	e7f3      	b.n	800b52c <_vfiprintf_r+0x44>
 800b544:	2300      	movs	r3, #0
 800b546:	9309      	str	r3, [sp, #36]	; 0x24
 800b548:	2320      	movs	r3, #32
 800b54a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b54e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b552:	2330      	movs	r3, #48	; 0x30
 800b554:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b708 <_vfiprintf_r+0x220>
 800b558:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b55c:	f04f 0901 	mov.w	r9, #1
 800b560:	4623      	mov	r3, r4
 800b562:	469a      	mov	sl, r3
 800b564:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b568:	b10a      	cbz	r2, 800b56e <_vfiprintf_r+0x86>
 800b56a:	2a25      	cmp	r2, #37	; 0x25
 800b56c:	d1f9      	bne.n	800b562 <_vfiprintf_r+0x7a>
 800b56e:	ebba 0b04 	subs.w	fp, sl, r4
 800b572:	d00b      	beq.n	800b58c <_vfiprintf_r+0xa4>
 800b574:	465b      	mov	r3, fp
 800b576:	4622      	mov	r2, r4
 800b578:	4629      	mov	r1, r5
 800b57a:	4630      	mov	r0, r6
 800b57c:	f7ff ffa1 	bl	800b4c2 <__sfputs_r>
 800b580:	3001      	adds	r0, #1
 800b582:	f000 80a9 	beq.w	800b6d8 <_vfiprintf_r+0x1f0>
 800b586:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b588:	445a      	add	r2, fp
 800b58a:	9209      	str	r2, [sp, #36]	; 0x24
 800b58c:	f89a 3000 	ldrb.w	r3, [sl]
 800b590:	2b00      	cmp	r3, #0
 800b592:	f000 80a1 	beq.w	800b6d8 <_vfiprintf_r+0x1f0>
 800b596:	2300      	movs	r3, #0
 800b598:	f04f 32ff 	mov.w	r2, #4294967295
 800b59c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5a0:	f10a 0a01 	add.w	sl, sl, #1
 800b5a4:	9304      	str	r3, [sp, #16]
 800b5a6:	9307      	str	r3, [sp, #28]
 800b5a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b5ac:	931a      	str	r3, [sp, #104]	; 0x68
 800b5ae:	4654      	mov	r4, sl
 800b5b0:	2205      	movs	r2, #5
 800b5b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5b6:	4854      	ldr	r0, [pc, #336]	; (800b708 <_vfiprintf_r+0x220>)
 800b5b8:	f7f4 fe1a 	bl	80001f0 <memchr>
 800b5bc:	9a04      	ldr	r2, [sp, #16]
 800b5be:	b9d8      	cbnz	r0, 800b5f8 <_vfiprintf_r+0x110>
 800b5c0:	06d1      	lsls	r1, r2, #27
 800b5c2:	bf44      	itt	mi
 800b5c4:	2320      	movmi	r3, #32
 800b5c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5ca:	0713      	lsls	r3, r2, #28
 800b5cc:	bf44      	itt	mi
 800b5ce:	232b      	movmi	r3, #43	; 0x2b
 800b5d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5d4:	f89a 3000 	ldrb.w	r3, [sl]
 800b5d8:	2b2a      	cmp	r3, #42	; 0x2a
 800b5da:	d015      	beq.n	800b608 <_vfiprintf_r+0x120>
 800b5dc:	9a07      	ldr	r2, [sp, #28]
 800b5de:	4654      	mov	r4, sl
 800b5e0:	2000      	movs	r0, #0
 800b5e2:	f04f 0c0a 	mov.w	ip, #10
 800b5e6:	4621      	mov	r1, r4
 800b5e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5ec:	3b30      	subs	r3, #48	; 0x30
 800b5ee:	2b09      	cmp	r3, #9
 800b5f0:	d94d      	bls.n	800b68e <_vfiprintf_r+0x1a6>
 800b5f2:	b1b0      	cbz	r0, 800b622 <_vfiprintf_r+0x13a>
 800b5f4:	9207      	str	r2, [sp, #28]
 800b5f6:	e014      	b.n	800b622 <_vfiprintf_r+0x13a>
 800b5f8:	eba0 0308 	sub.w	r3, r0, r8
 800b5fc:	fa09 f303 	lsl.w	r3, r9, r3
 800b600:	4313      	orrs	r3, r2
 800b602:	9304      	str	r3, [sp, #16]
 800b604:	46a2      	mov	sl, r4
 800b606:	e7d2      	b.n	800b5ae <_vfiprintf_r+0xc6>
 800b608:	9b03      	ldr	r3, [sp, #12]
 800b60a:	1d19      	adds	r1, r3, #4
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	9103      	str	r1, [sp, #12]
 800b610:	2b00      	cmp	r3, #0
 800b612:	bfbb      	ittet	lt
 800b614:	425b      	neglt	r3, r3
 800b616:	f042 0202 	orrlt.w	r2, r2, #2
 800b61a:	9307      	strge	r3, [sp, #28]
 800b61c:	9307      	strlt	r3, [sp, #28]
 800b61e:	bfb8      	it	lt
 800b620:	9204      	strlt	r2, [sp, #16]
 800b622:	7823      	ldrb	r3, [r4, #0]
 800b624:	2b2e      	cmp	r3, #46	; 0x2e
 800b626:	d10c      	bne.n	800b642 <_vfiprintf_r+0x15a>
 800b628:	7863      	ldrb	r3, [r4, #1]
 800b62a:	2b2a      	cmp	r3, #42	; 0x2a
 800b62c:	d134      	bne.n	800b698 <_vfiprintf_r+0x1b0>
 800b62e:	9b03      	ldr	r3, [sp, #12]
 800b630:	1d1a      	adds	r2, r3, #4
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	9203      	str	r2, [sp, #12]
 800b636:	2b00      	cmp	r3, #0
 800b638:	bfb8      	it	lt
 800b63a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b63e:	3402      	adds	r4, #2
 800b640:	9305      	str	r3, [sp, #20]
 800b642:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b718 <_vfiprintf_r+0x230>
 800b646:	7821      	ldrb	r1, [r4, #0]
 800b648:	2203      	movs	r2, #3
 800b64a:	4650      	mov	r0, sl
 800b64c:	f7f4 fdd0 	bl	80001f0 <memchr>
 800b650:	b138      	cbz	r0, 800b662 <_vfiprintf_r+0x17a>
 800b652:	9b04      	ldr	r3, [sp, #16]
 800b654:	eba0 000a 	sub.w	r0, r0, sl
 800b658:	2240      	movs	r2, #64	; 0x40
 800b65a:	4082      	lsls	r2, r0
 800b65c:	4313      	orrs	r3, r2
 800b65e:	3401      	adds	r4, #1
 800b660:	9304      	str	r3, [sp, #16]
 800b662:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b666:	4829      	ldr	r0, [pc, #164]	; (800b70c <_vfiprintf_r+0x224>)
 800b668:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b66c:	2206      	movs	r2, #6
 800b66e:	f7f4 fdbf 	bl	80001f0 <memchr>
 800b672:	2800      	cmp	r0, #0
 800b674:	d03f      	beq.n	800b6f6 <_vfiprintf_r+0x20e>
 800b676:	4b26      	ldr	r3, [pc, #152]	; (800b710 <_vfiprintf_r+0x228>)
 800b678:	bb1b      	cbnz	r3, 800b6c2 <_vfiprintf_r+0x1da>
 800b67a:	9b03      	ldr	r3, [sp, #12]
 800b67c:	3307      	adds	r3, #7
 800b67e:	f023 0307 	bic.w	r3, r3, #7
 800b682:	3308      	adds	r3, #8
 800b684:	9303      	str	r3, [sp, #12]
 800b686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b688:	443b      	add	r3, r7
 800b68a:	9309      	str	r3, [sp, #36]	; 0x24
 800b68c:	e768      	b.n	800b560 <_vfiprintf_r+0x78>
 800b68e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b692:	460c      	mov	r4, r1
 800b694:	2001      	movs	r0, #1
 800b696:	e7a6      	b.n	800b5e6 <_vfiprintf_r+0xfe>
 800b698:	2300      	movs	r3, #0
 800b69a:	3401      	adds	r4, #1
 800b69c:	9305      	str	r3, [sp, #20]
 800b69e:	4619      	mov	r1, r3
 800b6a0:	f04f 0c0a 	mov.w	ip, #10
 800b6a4:	4620      	mov	r0, r4
 800b6a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6aa:	3a30      	subs	r2, #48	; 0x30
 800b6ac:	2a09      	cmp	r2, #9
 800b6ae:	d903      	bls.n	800b6b8 <_vfiprintf_r+0x1d0>
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d0c6      	beq.n	800b642 <_vfiprintf_r+0x15a>
 800b6b4:	9105      	str	r1, [sp, #20]
 800b6b6:	e7c4      	b.n	800b642 <_vfiprintf_r+0x15a>
 800b6b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6bc:	4604      	mov	r4, r0
 800b6be:	2301      	movs	r3, #1
 800b6c0:	e7f0      	b.n	800b6a4 <_vfiprintf_r+0x1bc>
 800b6c2:	ab03      	add	r3, sp, #12
 800b6c4:	9300      	str	r3, [sp, #0]
 800b6c6:	462a      	mov	r2, r5
 800b6c8:	4b12      	ldr	r3, [pc, #72]	; (800b714 <_vfiprintf_r+0x22c>)
 800b6ca:	a904      	add	r1, sp, #16
 800b6cc:	4630      	mov	r0, r6
 800b6ce:	f7fd fd15 	bl	80090fc <_printf_float>
 800b6d2:	4607      	mov	r7, r0
 800b6d4:	1c78      	adds	r0, r7, #1
 800b6d6:	d1d6      	bne.n	800b686 <_vfiprintf_r+0x19e>
 800b6d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6da:	07d9      	lsls	r1, r3, #31
 800b6dc:	d405      	bmi.n	800b6ea <_vfiprintf_r+0x202>
 800b6de:	89ab      	ldrh	r3, [r5, #12]
 800b6e0:	059a      	lsls	r2, r3, #22
 800b6e2:	d402      	bmi.n	800b6ea <_vfiprintf_r+0x202>
 800b6e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b6e6:	f7fe fa85 	bl	8009bf4 <__retarget_lock_release_recursive>
 800b6ea:	89ab      	ldrh	r3, [r5, #12]
 800b6ec:	065b      	lsls	r3, r3, #25
 800b6ee:	f53f af1d 	bmi.w	800b52c <_vfiprintf_r+0x44>
 800b6f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b6f4:	e71c      	b.n	800b530 <_vfiprintf_r+0x48>
 800b6f6:	ab03      	add	r3, sp, #12
 800b6f8:	9300      	str	r3, [sp, #0]
 800b6fa:	462a      	mov	r2, r5
 800b6fc:	4b05      	ldr	r3, [pc, #20]	; (800b714 <_vfiprintf_r+0x22c>)
 800b6fe:	a904      	add	r1, sp, #16
 800b700:	4630      	mov	r0, r6
 800b702:	f7fd ff9f 	bl	8009644 <_printf_i>
 800b706:	e7e4      	b.n	800b6d2 <_vfiprintf_r+0x1ea>
 800b708:	0800bf6c 	.word	0x0800bf6c
 800b70c:	0800bf76 	.word	0x0800bf76
 800b710:	080090fd 	.word	0x080090fd
 800b714:	0800b4c3 	.word	0x0800b4c3
 800b718:	0800bf72 	.word	0x0800bf72

0800b71c <__sflush_r>:
 800b71c:	898a      	ldrh	r2, [r1, #12]
 800b71e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b722:	4605      	mov	r5, r0
 800b724:	0710      	lsls	r0, r2, #28
 800b726:	460c      	mov	r4, r1
 800b728:	d458      	bmi.n	800b7dc <__sflush_r+0xc0>
 800b72a:	684b      	ldr	r3, [r1, #4]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	dc05      	bgt.n	800b73c <__sflush_r+0x20>
 800b730:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b732:	2b00      	cmp	r3, #0
 800b734:	dc02      	bgt.n	800b73c <__sflush_r+0x20>
 800b736:	2000      	movs	r0, #0
 800b738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b73c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b73e:	2e00      	cmp	r6, #0
 800b740:	d0f9      	beq.n	800b736 <__sflush_r+0x1a>
 800b742:	2300      	movs	r3, #0
 800b744:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b748:	682f      	ldr	r7, [r5, #0]
 800b74a:	6a21      	ldr	r1, [r4, #32]
 800b74c:	602b      	str	r3, [r5, #0]
 800b74e:	d032      	beq.n	800b7b6 <__sflush_r+0x9a>
 800b750:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b752:	89a3      	ldrh	r3, [r4, #12]
 800b754:	075a      	lsls	r2, r3, #29
 800b756:	d505      	bpl.n	800b764 <__sflush_r+0x48>
 800b758:	6863      	ldr	r3, [r4, #4]
 800b75a:	1ac0      	subs	r0, r0, r3
 800b75c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b75e:	b10b      	cbz	r3, 800b764 <__sflush_r+0x48>
 800b760:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b762:	1ac0      	subs	r0, r0, r3
 800b764:	2300      	movs	r3, #0
 800b766:	4602      	mov	r2, r0
 800b768:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b76a:	6a21      	ldr	r1, [r4, #32]
 800b76c:	4628      	mov	r0, r5
 800b76e:	47b0      	blx	r6
 800b770:	1c43      	adds	r3, r0, #1
 800b772:	89a3      	ldrh	r3, [r4, #12]
 800b774:	d106      	bne.n	800b784 <__sflush_r+0x68>
 800b776:	6829      	ldr	r1, [r5, #0]
 800b778:	291d      	cmp	r1, #29
 800b77a:	d82b      	bhi.n	800b7d4 <__sflush_r+0xb8>
 800b77c:	4a29      	ldr	r2, [pc, #164]	; (800b824 <__sflush_r+0x108>)
 800b77e:	410a      	asrs	r2, r1
 800b780:	07d6      	lsls	r6, r2, #31
 800b782:	d427      	bmi.n	800b7d4 <__sflush_r+0xb8>
 800b784:	2200      	movs	r2, #0
 800b786:	6062      	str	r2, [r4, #4]
 800b788:	04d9      	lsls	r1, r3, #19
 800b78a:	6922      	ldr	r2, [r4, #16]
 800b78c:	6022      	str	r2, [r4, #0]
 800b78e:	d504      	bpl.n	800b79a <__sflush_r+0x7e>
 800b790:	1c42      	adds	r2, r0, #1
 800b792:	d101      	bne.n	800b798 <__sflush_r+0x7c>
 800b794:	682b      	ldr	r3, [r5, #0]
 800b796:	b903      	cbnz	r3, 800b79a <__sflush_r+0x7e>
 800b798:	6560      	str	r0, [r4, #84]	; 0x54
 800b79a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b79c:	602f      	str	r7, [r5, #0]
 800b79e:	2900      	cmp	r1, #0
 800b7a0:	d0c9      	beq.n	800b736 <__sflush_r+0x1a>
 800b7a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7a6:	4299      	cmp	r1, r3
 800b7a8:	d002      	beq.n	800b7b0 <__sflush_r+0x94>
 800b7aa:	4628      	mov	r0, r5
 800b7ac:	f7ff f89e 	bl	800a8ec <_free_r>
 800b7b0:	2000      	movs	r0, #0
 800b7b2:	6360      	str	r0, [r4, #52]	; 0x34
 800b7b4:	e7c0      	b.n	800b738 <__sflush_r+0x1c>
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	4628      	mov	r0, r5
 800b7ba:	47b0      	blx	r6
 800b7bc:	1c41      	adds	r1, r0, #1
 800b7be:	d1c8      	bne.n	800b752 <__sflush_r+0x36>
 800b7c0:	682b      	ldr	r3, [r5, #0]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d0c5      	beq.n	800b752 <__sflush_r+0x36>
 800b7c6:	2b1d      	cmp	r3, #29
 800b7c8:	d001      	beq.n	800b7ce <__sflush_r+0xb2>
 800b7ca:	2b16      	cmp	r3, #22
 800b7cc:	d101      	bne.n	800b7d2 <__sflush_r+0xb6>
 800b7ce:	602f      	str	r7, [r5, #0]
 800b7d0:	e7b1      	b.n	800b736 <__sflush_r+0x1a>
 800b7d2:	89a3      	ldrh	r3, [r4, #12]
 800b7d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7d8:	81a3      	strh	r3, [r4, #12]
 800b7da:	e7ad      	b.n	800b738 <__sflush_r+0x1c>
 800b7dc:	690f      	ldr	r7, [r1, #16]
 800b7de:	2f00      	cmp	r7, #0
 800b7e0:	d0a9      	beq.n	800b736 <__sflush_r+0x1a>
 800b7e2:	0793      	lsls	r3, r2, #30
 800b7e4:	680e      	ldr	r6, [r1, #0]
 800b7e6:	bf08      	it	eq
 800b7e8:	694b      	ldreq	r3, [r1, #20]
 800b7ea:	600f      	str	r7, [r1, #0]
 800b7ec:	bf18      	it	ne
 800b7ee:	2300      	movne	r3, #0
 800b7f0:	eba6 0807 	sub.w	r8, r6, r7
 800b7f4:	608b      	str	r3, [r1, #8]
 800b7f6:	f1b8 0f00 	cmp.w	r8, #0
 800b7fa:	dd9c      	ble.n	800b736 <__sflush_r+0x1a>
 800b7fc:	6a21      	ldr	r1, [r4, #32]
 800b7fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b800:	4643      	mov	r3, r8
 800b802:	463a      	mov	r2, r7
 800b804:	4628      	mov	r0, r5
 800b806:	47b0      	blx	r6
 800b808:	2800      	cmp	r0, #0
 800b80a:	dc06      	bgt.n	800b81a <__sflush_r+0xfe>
 800b80c:	89a3      	ldrh	r3, [r4, #12]
 800b80e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b812:	81a3      	strh	r3, [r4, #12]
 800b814:	f04f 30ff 	mov.w	r0, #4294967295
 800b818:	e78e      	b.n	800b738 <__sflush_r+0x1c>
 800b81a:	4407      	add	r7, r0
 800b81c:	eba8 0800 	sub.w	r8, r8, r0
 800b820:	e7e9      	b.n	800b7f6 <__sflush_r+0xda>
 800b822:	bf00      	nop
 800b824:	dfbffffe 	.word	0xdfbffffe

0800b828 <_fflush_r>:
 800b828:	b538      	push	{r3, r4, r5, lr}
 800b82a:	690b      	ldr	r3, [r1, #16]
 800b82c:	4605      	mov	r5, r0
 800b82e:	460c      	mov	r4, r1
 800b830:	b913      	cbnz	r3, 800b838 <_fflush_r+0x10>
 800b832:	2500      	movs	r5, #0
 800b834:	4628      	mov	r0, r5
 800b836:	bd38      	pop	{r3, r4, r5, pc}
 800b838:	b118      	cbz	r0, 800b842 <_fflush_r+0x1a>
 800b83a:	6a03      	ldr	r3, [r0, #32]
 800b83c:	b90b      	cbnz	r3, 800b842 <_fflush_r+0x1a>
 800b83e:	f7fe f8af 	bl	80099a0 <__sinit>
 800b842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d0f3      	beq.n	800b832 <_fflush_r+0xa>
 800b84a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b84c:	07d0      	lsls	r0, r2, #31
 800b84e:	d404      	bmi.n	800b85a <_fflush_r+0x32>
 800b850:	0599      	lsls	r1, r3, #22
 800b852:	d402      	bmi.n	800b85a <_fflush_r+0x32>
 800b854:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b856:	f7fe f9cc 	bl	8009bf2 <__retarget_lock_acquire_recursive>
 800b85a:	4628      	mov	r0, r5
 800b85c:	4621      	mov	r1, r4
 800b85e:	f7ff ff5d 	bl	800b71c <__sflush_r>
 800b862:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b864:	07da      	lsls	r2, r3, #31
 800b866:	4605      	mov	r5, r0
 800b868:	d4e4      	bmi.n	800b834 <_fflush_r+0xc>
 800b86a:	89a3      	ldrh	r3, [r4, #12]
 800b86c:	059b      	lsls	r3, r3, #22
 800b86e:	d4e1      	bmi.n	800b834 <_fflush_r+0xc>
 800b870:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b872:	f7fe f9bf 	bl	8009bf4 <__retarget_lock_release_recursive>
 800b876:	e7dd      	b.n	800b834 <_fflush_r+0xc>

0800b878 <__swbuf_r>:
 800b878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b87a:	460e      	mov	r6, r1
 800b87c:	4614      	mov	r4, r2
 800b87e:	4605      	mov	r5, r0
 800b880:	b118      	cbz	r0, 800b88a <__swbuf_r+0x12>
 800b882:	6a03      	ldr	r3, [r0, #32]
 800b884:	b90b      	cbnz	r3, 800b88a <__swbuf_r+0x12>
 800b886:	f7fe f88b 	bl	80099a0 <__sinit>
 800b88a:	69a3      	ldr	r3, [r4, #24]
 800b88c:	60a3      	str	r3, [r4, #8]
 800b88e:	89a3      	ldrh	r3, [r4, #12]
 800b890:	071a      	lsls	r2, r3, #28
 800b892:	d525      	bpl.n	800b8e0 <__swbuf_r+0x68>
 800b894:	6923      	ldr	r3, [r4, #16]
 800b896:	b31b      	cbz	r3, 800b8e0 <__swbuf_r+0x68>
 800b898:	6823      	ldr	r3, [r4, #0]
 800b89a:	6922      	ldr	r2, [r4, #16]
 800b89c:	1a98      	subs	r0, r3, r2
 800b89e:	6963      	ldr	r3, [r4, #20]
 800b8a0:	b2f6      	uxtb	r6, r6
 800b8a2:	4283      	cmp	r3, r0
 800b8a4:	4637      	mov	r7, r6
 800b8a6:	dc04      	bgt.n	800b8b2 <__swbuf_r+0x3a>
 800b8a8:	4621      	mov	r1, r4
 800b8aa:	4628      	mov	r0, r5
 800b8ac:	f7ff ffbc 	bl	800b828 <_fflush_r>
 800b8b0:	b9e0      	cbnz	r0, 800b8ec <__swbuf_r+0x74>
 800b8b2:	68a3      	ldr	r3, [r4, #8]
 800b8b4:	3b01      	subs	r3, #1
 800b8b6:	60a3      	str	r3, [r4, #8]
 800b8b8:	6823      	ldr	r3, [r4, #0]
 800b8ba:	1c5a      	adds	r2, r3, #1
 800b8bc:	6022      	str	r2, [r4, #0]
 800b8be:	701e      	strb	r6, [r3, #0]
 800b8c0:	6962      	ldr	r2, [r4, #20]
 800b8c2:	1c43      	adds	r3, r0, #1
 800b8c4:	429a      	cmp	r2, r3
 800b8c6:	d004      	beq.n	800b8d2 <__swbuf_r+0x5a>
 800b8c8:	89a3      	ldrh	r3, [r4, #12]
 800b8ca:	07db      	lsls	r3, r3, #31
 800b8cc:	d506      	bpl.n	800b8dc <__swbuf_r+0x64>
 800b8ce:	2e0a      	cmp	r6, #10
 800b8d0:	d104      	bne.n	800b8dc <__swbuf_r+0x64>
 800b8d2:	4621      	mov	r1, r4
 800b8d4:	4628      	mov	r0, r5
 800b8d6:	f7ff ffa7 	bl	800b828 <_fflush_r>
 800b8da:	b938      	cbnz	r0, 800b8ec <__swbuf_r+0x74>
 800b8dc:	4638      	mov	r0, r7
 800b8de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8e0:	4621      	mov	r1, r4
 800b8e2:	4628      	mov	r0, r5
 800b8e4:	f000 f806 	bl	800b8f4 <__swsetup_r>
 800b8e8:	2800      	cmp	r0, #0
 800b8ea:	d0d5      	beq.n	800b898 <__swbuf_r+0x20>
 800b8ec:	f04f 37ff 	mov.w	r7, #4294967295
 800b8f0:	e7f4      	b.n	800b8dc <__swbuf_r+0x64>
	...

0800b8f4 <__swsetup_r>:
 800b8f4:	b538      	push	{r3, r4, r5, lr}
 800b8f6:	4b2a      	ldr	r3, [pc, #168]	; (800b9a0 <__swsetup_r+0xac>)
 800b8f8:	4605      	mov	r5, r0
 800b8fa:	6818      	ldr	r0, [r3, #0]
 800b8fc:	460c      	mov	r4, r1
 800b8fe:	b118      	cbz	r0, 800b908 <__swsetup_r+0x14>
 800b900:	6a03      	ldr	r3, [r0, #32]
 800b902:	b90b      	cbnz	r3, 800b908 <__swsetup_r+0x14>
 800b904:	f7fe f84c 	bl	80099a0 <__sinit>
 800b908:	89a3      	ldrh	r3, [r4, #12]
 800b90a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b90e:	0718      	lsls	r0, r3, #28
 800b910:	d422      	bmi.n	800b958 <__swsetup_r+0x64>
 800b912:	06d9      	lsls	r1, r3, #27
 800b914:	d407      	bmi.n	800b926 <__swsetup_r+0x32>
 800b916:	2309      	movs	r3, #9
 800b918:	602b      	str	r3, [r5, #0]
 800b91a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b91e:	81a3      	strh	r3, [r4, #12]
 800b920:	f04f 30ff 	mov.w	r0, #4294967295
 800b924:	e034      	b.n	800b990 <__swsetup_r+0x9c>
 800b926:	0758      	lsls	r0, r3, #29
 800b928:	d512      	bpl.n	800b950 <__swsetup_r+0x5c>
 800b92a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b92c:	b141      	cbz	r1, 800b940 <__swsetup_r+0x4c>
 800b92e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b932:	4299      	cmp	r1, r3
 800b934:	d002      	beq.n	800b93c <__swsetup_r+0x48>
 800b936:	4628      	mov	r0, r5
 800b938:	f7fe ffd8 	bl	800a8ec <_free_r>
 800b93c:	2300      	movs	r3, #0
 800b93e:	6363      	str	r3, [r4, #52]	; 0x34
 800b940:	89a3      	ldrh	r3, [r4, #12]
 800b942:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b946:	81a3      	strh	r3, [r4, #12]
 800b948:	2300      	movs	r3, #0
 800b94a:	6063      	str	r3, [r4, #4]
 800b94c:	6923      	ldr	r3, [r4, #16]
 800b94e:	6023      	str	r3, [r4, #0]
 800b950:	89a3      	ldrh	r3, [r4, #12]
 800b952:	f043 0308 	orr.w	r3, r3, #8
 800b956:	81a3      	strh	r3, [r4, #12]
 800b958:	6923      	ldr	r3, [r4, #16]
 800b95a:	b94b      	cbnz	r3, 800b970 <__swsetup_r+0x7c>
 800b95c:	89a3      	ldrh	r3, [r4, #12]
 800b95e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b962:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b966:	d003      	beq.n	800b970 <__swsetup_r+0x7c>
 800b968:	4621      	mov	r1, r4
 800b96a:	4628      	mov	r0, r5
 800b96c:	f000 f90c 	bl	800bb88 <__smakebuf_r>
 800b970:	89a0      	ldrh	r0, [r4, #12]
 800b972:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b976:	f010 0301 	ands.w	r3, r0, #1
 800b97a:	d00a      	beq.n	800b992 <__swsetup_r+0x9e>
 800b97c:	2300      	movs	r3, #0
 800b97e:	60a3      	str	r3, [r4, #8]
 800b980:	6963      	ldr	r3, [r4, #20]
 800b982:	425b      	negs	r3, r3
 800b984:	61a3      	str	r3, [r4, #24]
 800b986:	6923      	ldr	r3, [r4, #16]
 800b988:	b943      	cbnz	r3, 800b99c <__swsetup_r+0xa8>
 800b98a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b98e:	d1c4      	bne.n	800b91a <__swsetup_r+0x26>
 800b990:	bd38      	pop	{r3, r4, r5, pc}
 800b992:	0781      	lsls	r1, r0, #30
 800b994:	bf58      	it	pl
 800b996:	6963      	ldrpl	r3, [r4, #20]
 800b998:	60a3      	str	r3, [r4, #8]
 800b99a:	e7f4      	b.n	800b986 <__swsetup_r+0x92>
 800b99c:	2000      	movs	r0, #0
 800b99e:	e7f7      	b.n	800b990 <__swsetup_r+0x9c>
 800b9a0:	20000064 	.word	0x20000064

0800b9a4 <memmove>:
 800b9a4:	4288      	cmp	r0, r1
 800b9a6:	b510      	push	{r4, lr}
 800b9a8:	eb01 0402 	add.w	r4, r1, r2
 800b9ac:	d902      	bls.n	800b9b4 <memmove+0x10>
 800b9ae:	4284      	cmp	r4, r0
 800b9b0:	4623      	mov	r3, r4
 800b9b2:	d807      	bhi.n	800b9c4 <memmove+0x20>
 800b9b4:	1e43      	subs	r3, r0, #1
 800b9b6:	42a1      	cmp	r1, r4
 800b9b8:	d008      	beq.n	800b9cc <memmove+0x28>
 800b9ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b9be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b9c2:	e7f8      	b.n	800b9b6 <memmove+0x12>
 800b9c4:	4402      	add	r2, r0
 800b9c6:	4601      	mov	r1, r0
 800b9c8:	428a      	cmp	r2, r1
 800b9ca:	d100      	bne.n	800b9ce <memmove+0x2a>
 800b9cc:	bd10      	pop	{r4, pc}
 800b9ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b9d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b9d6:	e7f7      	b.n	800b9c8 <memmove+0x24>

0800b9d8 <_sbrk_r>:
 800b9d8:	b538      	push	{r3, r4, r5, lr}
 800b9da:	4d06      	ldr	r5, [pc, #24]	; (800b9f4 <_sbrk_r+0x1c>)
 800b9dc:	2300      	movs	r3, #0
 800b9de:	4604      	mov	r4, r0
 800b9e0:	4608      	mov	r0, r1
 800b9e2:	602b      	str	r3, [r5, #0]
 800b9e4:	f7f7 fe5c 	bl	80036a0 <_sbrk>
 800b9e8:	1c43      	adds	r3, r0, #1
 800b9ea:	d102      	bne.n	800b9f2 <_sbrk_r+0x1a>
 800b9ec:	682b      	ldr	r3, [r5, #0]
 800b9ee:	b103      	cbz	r3, 800b9f2 <_sbrk_r+0x1a>
 800b9f0:	6023      	str	r3, [r4, #0]
 800b9f2:	bd38      	pop	{r3, r4, r5, pc}
 800b9f4:	20001028 	.word	0x20001028

0800b9f8 <memcpy>:
 800b9f8:	440a      	add	r2, r1
 800b9fa:	4291      	cmp	r1, r2
 800b9fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba00:	d100      	bne.n	800ba04 <memcpy+0xc>
 800ba02:	4770      	bx	lr
 800ba04:	b510      	push	{r4, lr}
 800ba06:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba0e:	4291      	cmp	r1, r2
 800ba10:	d1f9      	bne.n	800ba06 <memcpy+0xe>
 800ba12:	bd10      	pop	{r4, pc}

0800ba14 <__assert_func>:
 800ba14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba16:	4614      	mov	r4, r2
 800ba18:	461a      	mov	r2, r3
 800ba1a:	4b09      	ldr	r3, [pc, #36]	; (800ba40 <__assert_func+0x2c>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	4605      	mov	r5, r0
 800ba20:	68d8      	ldr	r0, [r3, #12]
 800ba22:	b14c      	cbz	r4, 800ba38 <__assert_func+0x24>
 800ba24:	4b07      	ldr	r3, [pc, #28]	; (800ba44 <__assert_func+0x30>)
 800ba26:	9100      	str	r1, [sp, #0]
 800ba28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ba2c:	4906      	ldr	r1, [pc, #24]	; (800ba48 <__assert_func+0x34>)
 800ba2e:	462b      	mov	r3, r5
 800ba30:	f000 f872 	bl	800bb18 <fiprintf>
 800ba34:	f000 f906 	bl	800bc44 <abort>
 800ba38:	4b04      	ldr	r3, [pc, #16]	; (800ba4c <__assert_func+0x38>)
 800ba3a:	461c      	mov	r4, r3
 800ba3c:	e7f3      	b.n	800ba26 <__assert_func+0x12>
 800ba3e:	bf00      	nop
 800ba40:	20000064 	.word	0x20000064
 800ba44:	0800bf87 	.word	0x0800bf87
 800ba48:	0800bf94 	.word	0x0800bf94
 800ba4c:	0800bfc2 	.word	0x0800bfc2

0800ba50 <_calloc_r>:
 800ba50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba52:	fba1 2402 	umull	r2, r4, r1, r2
 800ba56:	b94c      	cbnz	r4, 800ba6c <_calloc_r+0x1c>
 800ba58:	4611      	mov	r1, r2
 800ba5a:	9201      	str	r2, [sp, #4]
 800ba5c:	f7fe ffba 	bl	800a9d4 <_malloc_r>
 800ba60:	9a01      	ldr	r2, [sp, #4]
 800ba62:	4605      	mov	r5, r0
 800ba64:	b930      	cbnz	r0, 800ba74 <_calloc_r+0x24>
 800ba66:	4628      	mov	r0, r5
 800ba68:	b003      	add	sp, #12
 800ba6a:	bd30      	pop	{r4, r5, pc}
 800ba6c:	220c      	movs	r2, #12
 800ba6e:	6002      	str	r2, [r0, #0]
 800ba70:	2500      	movs	r5, #0
 800ba72:	e7f8      	b.n	800ba66 <_calloc_r+0x16>
 800ba74:	4621      	mov	r1, r4
 800ba76:	f7fe f83e 	bl	8009af6 <memset>
 800ba7a:	e7f4      	b.n	800ba66 <_calloc_r+0x16>

0800ba7c <__ascii_mbtowc>:
 800ba7c:	b082      	sub	sp, #8
 800ba7e:	b901      	cbnz	r1, 800ba82 <__ascii_mbtowc+0x6>
 800ba80:	a901      	add	r1, sp, #4
 800ba82:	b142      	cbz	r2, 800ba96 <__ascii_mbtowc+0x1a>
 800ba84:	b14b      	cbz	r3, 800ba9a <__ascii_mbtowc+0x1e>
 800ba86:	7813      	ldrb	r3, [r2, #0]
 800ba88:	600b      	str	r3, [r1, #0]
 800ba8a:	7812      	ldrb	r2, [r2, #0]
 800ba8c:	1e10      	subs	r0, r2, #0
 800ba8e:	bf18      	it	ne
 800ba90:	2001      	movne	r0, #1
 800ba92:	b002      	add	sp, #8
 800ba94:	4770      	bx	lr
 800ba96:	4610      	mov	r0, r2
 800ba98:	e7fb      	b.n	800ba92 <__ascii_mbtowc+0x16>
 800ba9a:	f06f 0001 	mvn.w	r0, #1
 800ba9e:	e7f8      	b.n	800ba92 <__ascii_mbtowc+0x16>

0800baa0 <_realloc_r>:
 800baa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800baa4:	4680      	mov	r8, r0
 800baa6:	4614      	mov	r4, r2
 800baa8:	460e      	mov	r6, r1
 800baaa:	b921      	cbnz	r1, 800bab6 <_realloc_r+0x16>
 800baac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bab0:	4611      	mov	r1, r2
 800bab2:	f7fe bf8f 	b.w	800a9d4 <_malloc_r>
 800bab6:	b92a      	cbnz	r2, 800bac4 <_realloc_r+0x24>
 800bab8:	f7fe ff18 	bl	800a8ec <_free_r>
 800babc:	4625      	mov	r5, r4
 800babe:	4628      	mov	r0, r5
 800bac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bac4:	f000 f8c5 	bl	800bc52 <_malloc_usable_size_r>
 800bac8:	4284      	cmp	r4, r0
 800baca:	4607      	mov	r7, r0
 800bacc:	d802      	bhi.n	800bad4 <_realloc_r+0x34>
 800bace:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bad2:	d812      	bhi.n	800bafa <_realloc_r+0x5a>
 800bad4:	4621      	mov	r1, r4
 800bad6:	4640      	mov	r0, r8
 800bad8:	f7fe ff7c 	bl	800a9d4 <_malloc_r>
 800badc:	4605      	mov	r5, r0
 800bade:	2800      	cmp	r0, #0
 800bae0:	d0ed      	beq.n	800babe <_realloc_r+0x1e>
 800bae2:	42bc      	cmp	r4, r7
 800bae4:	4622      	mov	r2, r4
 800bae6:	4631      	mov	r1, r6
 800bae8:	bf28      	it	cs
 800baea:	463a      	movcs	r2, r7
 800baec:	f7ff ff84 	bl	800b9f8 <memcpy>
 800baf0:	4631      	mov	r1, r6
 800baf2:	4640      	mov	r0, r8
 800baf4:	f7fe fefa 	bl	800a8ec <_free_r>
 800baf8:	e7e1      	b.n	800babe <_realloc_r+0x1e>
 800bafa:	4635      	mov	r5, r6
 800bafc:	e7df      	b.n	800babe <_realloc_r+0x1e>

0800bafe <__ascii_wctomb>:
 800bafe:	b149      	cbz	r1, 800bb14 <__ascii_wctomb+0x16>
 800bb00:	2aff      	cmp	r2, #255	; 0xff
 800bb02:	bf85      	ittet	hi
 800bb04:	238a      	movhi	r3, #138	; 0x8a
 800bb06:	6003      	strhi	r3, [r0, #0]
 800bb08:	700a      	strbls	r2, [r1, #0]
 800bb0a:	f04f 30ff 	movhi.w	r0, #4294967295
 800bb0e:	bf98      	it	ls
 800bb10:	2001      	movls	r0, #1
 800bb12:	4770      	bx	lr
 800bb14:	4608      	mov	r0, r1
 800bb16:	4770      	bx	lr

0800bb18 <fiprintf>:
 800bb18:	b40e      	push	{r1, r2, r3}
 800bb1a:	b503      	push	{r0, r1, lr}
 800bb1c:	4601      	mov	r1, r0
 800bb1e:	ab03      	add	r3, sp, #12
 800bb20:	4805      	ldr	r0, [pc, #20]	; (800bb38 <fiprintf+0x20>)
 800bb22:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb26:	6800      	ldr	r0, [r0, #0]
 800bb28:	9301      	str	r3, [sp, #4]
 800bb2a:	f7ff fcdd 	bl	800b4e8 <_vfiprintf_r>
 800bb2e:	b002      	add	sp, #8
 800bb30:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb34:	b003      	add	sp, #12
 800bb36:	4770      	bx	lr
 800bb38:	20000064 	.word	0x20000064

0800bb3c <__swhatbuf_r>:
 800bb3c:	b570      	push	{r4, r5, r6, lr}
 800bb3e:	460c      	mov	r4, r1
 800bb40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb44:	2900      	cmp	r1, #0
 800bb46:	b096      	sub	sp, #88	; 0x58
 800bb48:	4615      	mov	r5, r2
 800bb4a:	461e      	mov	r6, r3
 800bb4c:	da0d      	bge.n	800bb6a <__swhatbuf_r+0x2e>
 800bb4e:	89a3      	ldrh	r3, [r4, #12]
 800bb50:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bb54:	f04f 0100 	mov.w	r1, #0
 800bb58:	bf0c      	ite	eq
 800bb5a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bb5e:	2340      	movne	r3, #64	; 0x40
 800bb60:	2000      	movs	r0, #0
 800bb62:	6031      	str	r1, [r6, #0]
 800bb64:	602b      	str	r3, [r5, #0]
 800bb66:	b016      	add	sp, #88	; 0x58
 800bb68:	bd70      	pop	{r4, r5, r6, pc}
 800bb6a:	466a      	mov	r2, sp
 800bb6c:	f000 f848 	bl	800bc00 <_fstat_r>
 800bb70:	2800      	cmp	r0, #0
 800bb72:	dbec      	blt.n	800bb4e <__swhatbuf_r+0x12>
 800bb74:	9901      	ldr	r1, [sp, #4]
 800bb76:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bb7a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bb7e:	4259      	negs	r1, r3
 800bb80:	4159      	adcs	r1, r3
 800bb82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb86:	e7eb      	b.n	800bb60 <__swhatbuf_r+0x24>

0800bb88 <__smakebuf_r>:
 800bb88:	898b      	ldrh	r3, [r1, #12]
 800bb8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bb8c:	079d      	lsls	r5, r3, #30
 800bb8e:	4606      	mov	r6, r0
 800bb90:	460c      	mov	r4, r1
 800bb92:	d507      	bpl.n	800bba4 <__smakebuf_r+0x1c>
 800bb94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bb98:	6023      	str	r3, [r4, #0]
 800bb9a:	6123      	str	r3, [r4, #16]
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	6163      	str	r3, [r4, #20]
 800bba0:	b002      	add	sp, #8
 800bba2:	bd70      	pop	{r4, r5, r6, pc}
 800bba4:	ab01      	add	r3, sp, #4
 800bba6:	466a      	mov	r2, sp
 800bba8:	f7ff ffc8 	bl	800bb3c <__swhatbuf_r>
 800bbac:	9900      	ldr	r1, [sp, #0]
 800bbae:	4605      	mov	r5, r0
 800bbb0:	4630      	mov	r0, r6
 800bbb2:	f7fe ff0f 	bl	800a9d4 <_malloc_r>
 800bbb6:	b948      	cbnz	r0, 800bbcc <__smakebuf_r+0x44>
 800bbb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbbc:	059a      	lsls	r2, r3, #22
 800bbbe:	d4ef      	bmi.n	800bba0 <__smakebuf_r+0x18>
 800bbc0:	f023 0303 	bic.w	r3, r3, #3
 800bbc4:	f043 0302 	orr.w	r3, r3, #2
 800bbc8:	81a3      	strh	r3, [r4, #12]
 800bbca:	e7e3      	b.n	800bb94 <__smakebuf_r+0xc>
 800bbcc:	89a3      	ldrh	r3, [r4, #12]
 800bbce:	6020      	str	r0, [r4, #0]
 800bbd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbd4:	81a3      	strh	r3, [r4, #12]
 800bbd6:	9b00      	ldr	r3, [sp, #0]
 800bbd8:	6163      	str	r3, [r4, #20]
 800bbda:	9b01      	ldr	r3, [sp, #4]
 800bbdc:	6120      	str	r0, [r4, #16]
 800bbde:	b15b      	cbz	r3, 800bbf8 <__smakebuf_r+0x70>
 800bbe0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bbe4:	4630      	mov	r0, r6
 800bbe6:	f000 f81d 	bl	800bc24 <_isatty_r>
 800bbea:	b128      	cbz	r0, 800bbf8 <__smakebuf_r+0x70>
 800bbec:	89a3      	ldrh	r3, [r4, #12]
 800bbee:	f023 0303 	bic.w	r3, r3, #3
 800bbf2:	f043 0301 	orr.w	r3, r3, #1
 800bbf6:	81a3      	strh	r3, [r4, #12]
 800bbf8:	89a3      	ldrh	r3, [r4, #12]
 800bbfa:	431d      	orrs	r5, r3
 800bbfc:	81a5      	strh	r5, [r4, #12]
 800bbfe:	e7cf      	b.n	800bba0 <__smakebuf_r+0x18>

0800bc00 <_fstat_r>:
 800bc00:	b538      	push	{r3, r4, r5, lr}
 800bc02:	4d07      	ldr	r5, [pc, #28]	; (800bc20 <_fstat_r+0x20>)
 800bc04:	2300      	movs	r3, #0
 800bc06:	4604      	mov	r4, r0
 800bc08:	4608      	mov	r0, r1
 800bc0a:	4611      	mov	r1, r2
 800bc0c:	602b      	str	r3, [r5, #0]
 800bc0e:	f7f7 fd1e 	bl	800364e <_fstat>
 800bc12:	1c43      	adds	r3, r0, #1
 800bc14:	d102      	bne.n	800bc1c <_fstat_r+0x1c>
 800bc16:	682b      	ldr	r3, [r5, #0]
 800bc18:	b103      	cbz	r3, 800bc1c <_fstat_r+0x1c>
 800bc1a:	6023      	str	r3, [r4, #0]
 800bc1c:	bd38      	pop	{r3, r4, r5, pc}
 800bc1e:	bf00      	nop
 800bc20:	20001028 	.word	0x20001028

0800bc24 <_isatty_r>:
 800bc24:	b538      	push	{r3, r4, r5, lr}
 800bc26:	4d06      	ldr	r5, [pc, #24]	; (800bc40 <_isatty_r+0x1c>)
 800bc28:	2300      	movs	r3, #0
 800bc2a:	4604      	mov	r4, r0
 800bc2c:	4608      	mov	r0, r1
 800bc2e:	602b      	str	r3, [r5, #0]
 800bc30:	f7f7 fd1d 	bl	800366e <_isatty>
 800bc34:	1c43      	adds	r3, r0, #1
 800bc36:	d102      	bne.n	800bc3e <_isatty_r+0x1a>
 800bc38:	682b      	ldr	r3, [r5, #0]
 800bc3a:	b103      	cbz	r3, 800bc3e <_isatty_r+0x1a>
 800bc3c:	6023      	str	r3, [r4, #0]
 800bc3e:	bd38      	pop	{r3, r4, r5, pc}
 800bc40:	20001028 	.word	0x20001028

0800bc44 <abort>:
 800bc44:	b508      	push	{r3, lr}
 800bc46:	2006      	movs	r0, #6
 800bc48:	f000 f834 	bl	800bcb4 <raise>
 800bc4c:	2001      	movs	r0, #1
 800bc4e:	f7f7 fccb 	bl	80035e8 <_exit>

0800bc52 <_malloc_usable_size_r>:
 800bc52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc56:	1f18      	subs	r0, r3, #4
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	bfbc      	itt	lt
 800bc5c:	580b      	ldrlt	r3, [r1, r0]
 800bc5e:	18c0      	addlt	r0, r0, r3
 800bc60:	4770      	bx	lr

0800bc62 <_raise_r>:
 800bc62:	291f      	cmp	r1, #31
 800bc64:	b538      	push	{r3, r4, r5, lr}
 800bc66:	4604      	mov	r4, r0
 800bc68:	460d      	mov	r5, r1
 800bc6a:	d904      	bls.n	800bc76 <_raise_r+0x14>
 800bc6c:	2316      	movs	r3, #22
 800bc6e:	6003      	str	r3, [r0, #0]
 800bc70:	f04f 30ff 	mov.w	r0, #4294967295
 800bc74:	bd38      	pop	{r3, r4, r5, pc}
 800bc76:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800bc78:	b112      	cbz	r2, 800bc80 <_raise_r+0x1e>
 800bc7a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc7e:	b94b      	cbnz	r3, 800bc94 <_raise_r+0x32>
 800bc80:	4620      	mov	r0, r4
 800bc82:	f000 f831 	bl	800bce8 <_getpid_r>
 800bc86:	462a      	mov	r2, r5
 800bc88:	4601      	mov	r1, r0
 800bc8a:	4620      	mov	r0, r4
 800bc8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc90:	f000 b818 	b.w	800bcc4 <_kill_r>
 800bc94:	2b01      	cmp	r3, #1
 800bc96:	d00a      	beq.n	800bcae <_raise_r+0x4c>
 800bc98:	1c59      	adds	r1, r3, #1
 800bc9a:	d103      	bne.n	800bca4 <_raise_r+0x42>
 800bc9c:	2316      	movs	r3, #22
 800bc9e:	6003      	str	r3, [r0, #0]
 800bca0:	2001      	movs	r0, #1
 800bca2:	e7e7      	b.n	800bc74 <_raise_r+0x12>
 800bca4:	2400      	movs	r4, #0
 800bca6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bcaa:	4628      	mov	r0, r5
 800bcac:	4798      	blx	r3
 800bcae:	2000      	movs	r0, #0
 800bcb0:	e7e0      	b.n	800bc74 <_raise_r+0x12>
	...

0800bcb4 <raise>:
 800bcb4:	4b02      	ldr	r3, [pc, #8]	; (800bcc0 <raise+0xc>)
 800bcb6:	4601      	mov	r1, r0
 800bcb8:	6818      	ldr	r0, [r3, #0]
 800bcba:	f7ff bfd2 	b.w	800bc62 <_raise_r>
 800bcbe:	bf00      	nop
 800bcc0:	20000064 	.word	0x20000064

0800bcc4 <_kill_r>:
 800bcc4:	b538      	push	{r3, r4, r5, lr}
 800bcc6:	4d07      	ldr	r5, [pc, #28]	; (800bce4 <_kill_r+0x20>)
 800bcc8:	2300      	movs	r3, #0
 800bcca:	4604      	mov	r4, r0
 800bccc:	4608      	mov	r0, r1
 800bcce:	4611      	mov	r1, r2
 800bcd0:	602b      	str	r3, [r5, #0]
 800bcd2:	f7f7 fc79 	bl	80035c8 <_kill>
 800bcd6:	1c43      	adds	r3, r0, #1
 800bcd8:	d102      	bne.n	800bce0 <_kill_r+0x1c>
 800bcda:	682b      	ldr	r3, [r5, #0]
 800bcdc:	b103      	cbz	r3, 800bce0 <_kill_r+0x1c>
 800bcde:	6023      	str	r3, [r4, #0]
 800bce0:	bd38      	pop	{r3, r4, r5, pc}
 800bce2:	bf00      	nop
 800bce4:	20001028 	.word	0x20001028

0800bce8 <_getpid_r>:
 800bce8:	f7f7 bc66 	b.w	80035b8 <_getpid>

0800bcec <_init>:
 800bcec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcee:	bf00      	nop
 800bcf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcf2:	bc08      	pop	{r3}
 800bcf4:	469e      	mov	lr, r3
 800bcf6:	4770      	bx	lr

0800bcf8 <_fini>:
 800bcf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcfa:	bf00      	nop
 800bcfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcfe:	bc08      	pop	{r3}
 800bd00:	469e      	mov	lr, r3
 800bd02:	4770      	bx	lr
