
motor_pid_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b854  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  0800ba08  0800ba08  0001ba08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bdc4  0800bdc4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800bdc4  0800bdc4  0001bdc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bdcc  0800bdcc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bdcc  0800bdcc  0001bdcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bdd0  0800bdd0  0001bdd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800bdd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000e38  200001e0  200001e0  000201e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20001018  20001018  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00018d98  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002c84  00000000  00000000  00038fe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001448  00000000  00000000  0003bc70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001340  00000000  00000000  0003d0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002768f  00000000  00000000  0003e3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00017074  00000000  00000000  00065a87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f1dc6  00000000  00000000  0007cafb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006960  00000000  00000000  0016e8c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b9ec 	.word	0x0800b9ec

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	0800b9ec 	.word	0x0800b9ec

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b970 	b.w	8000f60 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9e08      	ldr	r6, [sp, #32]
 8000c9e:	460d      	mov	r5, r1
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	460f      	mov	r7, r1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d14a      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4694      	mov	ip, r2
 8000cac:	d965      	bls.n	8000d7a <__udivmoddi4+0xe2>
 8000cae:	fab2 f382 	clz	r3, r2
 8000cb2:	b143      	cbz	r3, 8000cc6 <__udivmoddi4+0x2e>
 8000cb4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cb8:	f1c3 0220 	rsb	r2, r3, #32
 8000cbc:	409f      	lsls	r7, r3
 8000cbe:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc2:	4317      	orrs	r7, r2
 8000cc4:	409c      	lsls	r4, r3
 8000cc6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cca:	fa1f f58c 	uxth.w	r5, ip
 8000cce:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cd2:	0c22      	lsrs	r2, r4, #16
 8000cd4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cd8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cdc:	fb01 f005 	mul.w	r0, r1, r5
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	d90a      	bls.n	8000cfa <__udivmoddi4+0x62>
 8000ce4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ce8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cec:	f080 811c 	bcs.w	8000f28 <__udivmoddi4+0x290>
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	f240 8119 	bls.w	8000f28 <__udivmoddi4+0x290>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	4462      	add	r2, ip
 8000cfa:	1a12      	subs	r2, r2, r0
 8000cfc:	b2a4      	uxth	r4, r4
 8000cfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d06:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0a:	fb00 f505 	mul.w	r5, r0, r5
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	d90a      	bls.n	8000d28 <__udivmoddi4+0x90>
 8000d12:	eb1c 0404 	adds.w	r4, ip, r4
 8000d16:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1a:	f080 8107 	bcs.w	8000f2c <__udivmoddi4+0x294>
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	f240 8104 	bls.w	8000f2c <__udivmoddi4+0x294>
 8000d24:	4464      	add	r4, ip
 8000d26:	3802      	subs	r0, #2
 8000d28:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d2c:	1b64      	subs	r4, r4, r5
 8000d2e:	2100      	movs	r1, #0
 8000d30:	b11e      	cbz	r6, 8000d3a <__udivmoddi4+0xa2>
 8000d32:	40dc      	lsrs	r4, r3
 8000d34:	2300      	movs	r3, #0
 8000d36:	e9c6 4300 	strd	r4, r3, [r6]
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0xbc>
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	f000 80ed 	beq.w	8000f22 <__udivmoddi4+0x28a>
 8000d48:	2100      	movs	r1, #0
 8000d4a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d54:	fab3 f183 	clz	r1, r3
 8000d58:	2900      	cmp	r1, #0
 8000d5a:	d149      	bne.n	8000df0 <__udivmoddi4+0x158>
 8000d5c:	42ab      	cmp	r3, r5
 8000d5e:	d302      	bcc.n	8000d66 <__udivmoddi4+0xce>
 8000d60:	4282      	cmp	r2, r0
 8000d62:	f200 80f8 	bhi.w	8000f56 <__udivmoddi4+0x2be>
 8000d66:	1a84      	subs	r4, r0, r2
 8000d68:	eb65 0203 	sbc.w	r2, r5, r3
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	4617      	mov	r7, r2
 8000d70:	2e00      	cmp	r6, #0
 8000d72:	d0e2      	beq.n	8000d3a <__udivmoddi4+0xa2>
 8000d74:	e9c6 4700 	strd	r4, r7, [r6]
 8000d78:	e7df      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d7a:	b902      	cbnz	r2, 8000d7e <__udivmoddi4+0xe6>
 8000d7c:	deff      	udf	#255	; 0xff
 8000d7e:	fab2 f382 	clz	r3, r2
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f040 8090 	bne.w	8000ea8 <__udivmoddi4+0x210>
 8000d88:	1a8a      	subs	r2, r1, r2
 8000d8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d8e:	fa1f fe8c 	uxth.w	lr, ip
 8000d92:	2101      	movs	r1, #1
 8000d94:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d98:	fb07 2015 	mls	r0, r7, r5, r2
 8000d9c:	0c22      	lsrs	r2, r4, #16
 8000d9e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000da2:	fb0e f005 	mul.w	r0, lr, r5
 8000da6:	4290      	cmp	r0, r2
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000daa:	eb1c 0202 	adds.w	r2, ip, r2
 8000dae:	f105 38ff 	add.w	r8, r5, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x122>
 8000db4:	4290      	cmp	r0, r2
 8000db6:	f200 80cb 	bhi.w	8000f50 <__udivmoddi4+0x2b8>
 8000dba:	4645      	mov	r5, r8
 8000dbc:	1a12      	subs	r2, r2, r0
 8000dbe:	b2a4      	uxth	r4, r4
 8000dc0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dc4:	fb07 2210 	mls	r2, r7, r0, r2
 8000dc8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dcc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd0:	45a6      	cmp	lr, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x14e>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ddc:	d202      	bcs.n	8000de4 <__udivmoddi4+0x14c>
 8000dde:	45a6      	cmp	lr, r4
 8000de0:	f200 80bb 	bhi.w	8000f5a <__udivmoddi4+0x2c2>
 8000de4:	4610      	mov	r0, r2
 8000de6:	eba4 040e 	sub.w	r4, r4, lr
 8000dea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dee:	e79f      	b.n	8000d30 <__udivmoddi4+0x98>
 8000df0:	f1c1 0720 	rsb	r7, r1, #32
 8000df4:	408b      	lsls	r3, r1
 8000df6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dfa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dfe:	fa05 f401 	lsl.w	r4, r5, r1
 8000e02:	fa20 f307 	lsr.w	r3, r0, r7
 8000e06:	40fd      	lsrs	r5, r7
 8000e08:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e0c:	4323      	orrs	r3, r4
 8000e0e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e12:	fa1f fe8c 	uxth.w	lr, ip
 8000e16:	fb09 5518 	mls	r5, r9, r8, r5
 8000e1a:	0c1c      	lsrs	r4, r3, #16
 8000e1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e20:	fb08 f50e 	mul.w	r5, r8, lr
 8000e24:	42a5      	cmp	r5, r4
 8000e26:	fa02 f201 	lsl.w	r2, r2, r1
 8000e2a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e2e:	d90b      	bls.n	8000e48 <__udivmoddi4+0x1b0>
 8000e30:	eb1c 0404 	adds.w	r4, ip, r4
 8000e34:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e38:	f080 8088 	bcs.w	8000f4c <__udivmoddi4+0x2b4>
 8000e3c:	42a5      	cmp	r5, r4
 8000e3e:	f240 8085 	bls.w	8000f4c <__udivmoddi4+0x2b4>
 8000e42:	f1a8 0802 	sub.w	r8, r8, #2
 8000e46:	4464      	add	r4, ip
 8000e48:	1b64      	subs	r4, r4, r5
 8000e4a:	b29d      	uxth	r5, r3
 8000e4c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e50:	fb09 4413 	mls	r4, r9, r3, r4
 8000e54:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e58:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x1da>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e68:	d26c      	bcs.n	8000f44 <__udivmoddi4+0x2ac>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	d96a      	bls.n	8000f44 <__udivmoddi4+0x2ac>
 8000e6e:	3b02      	subs	r3, #2
 8000e70:	4464      	add	r4, ip
 8000e72:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e76:	fba3 9502 	umull	r9, r5, r3, r2
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	42ac      	cmp	r4, r5
 8000e80:	46c8      	mov	r8, r9
 8000e82:	46ae      	mov	lr, r5
 8000e84:	d356      	bcc.n	8000f34 <__udivmoddi4+0x29c>
 8000e86:	d053      	beq.n	8000f30 <__udivmoddi4+0x298>
 8000e88:	b156      	cbz	r6, 8000ea0 <__udivmoddi4+0x208>
 8000e8a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e8e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e92:	fa04 f707 	lsl.w	r7, r4, r7
 8000e96:	40ca      	lsrs	r2, r1
 8000e98:	40cc      	lsrs	r4, r1
 8000e9a:	4317      	orrs	r7, r2
 8000e9c:	e9c6 7400 	strd	r7, r4, [r6]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea8:	f1c3 0120 	rsb	r1, r3, #32
 8000eac:	fa02 fc03 	lsl.w	ip, r2, r3
 8000eb0:	fa20 f201 	lsr.w	r2, r0, r1
 8000eb4:	fa25 f101 	lsr.w	r1, r5, r1
 8000eb8:	409d      	lsls	r5, r3
 8000eba:	432a      	orrs	r2, r5
 8000ebc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec0:	fa1f fe8c 	uxth.w	lr, ip
 8000ec4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ec8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ed2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ed6:	428d      	cmp	r5, r1
 8000ed8:	fa04 f403 	lsl.w	r4, r4, r3
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x258>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ee6:	d22f      	bcs.n	8000f48 <__udivmoddi4+0x2b0>
 8000ee8:	428d      	cmp	r5, r1
 8000eea:	d92d      	bls.n	8000f48 <__udivmoddi4+0x2b0>
 8000eec:	3802      	subs	r0, #2
 8000eee:	4461      	add	r1, ip
 8000ef0:	1b49      	subs	r1, r1, r5
 8000ef2:	b292      	uxth	r2, r2
 8000ef4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ef8:	fb07 1115 	mls	r1, r7, r5, r1
 8000efc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f00:	fb05 f10e 	mul.w	r1, r5, lr
 8000f04:	4291      	cmp	r1, r2
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x282>
 8000f08:	eb1c 0202 	adds.w	r2, ip, r2
 8000f0c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f10:	d216      	bcs.n	8000f40 <__udivmoddi4+0x2a8>
 8000f12:	4291      	cmp	r1, r2
 8000f14:	d914      	bls.n	8000f40 <__udivmoddi4+0x2a8>
 8000f16:	3d02      	subs	r5, #2
 8000f18:	4462      	add	r2, ip
 8000f1a:	1a52      	subs	r2, r2, r1
 8000f1c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f20:	e738      	b.n	8000d94 <__udivmoddi4+0xfc>
 8000f22:	4631      	mov	r1, r6
 8000f24:	4630      	mov	r0, r6
 8000f26:	e708      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000f28:	4639      	mov	r1, r7
 8000f2a:	e6e6      	b.n	8000cfa <__udivmoddi4+0x62>
 8000f2c:	4610      	mov	r0, r2
 8000f2e:	e6fb      	b.n	8000d28 <__udivmoddi4+0x90>
 8000f30:	4548      	cmp	r0, r9
 8000f32:	d2a9      	bcs.n	8000e88 <__udivmoddi4+0x1f0>
 8000f34:	ebb9 0802 	subs.w	r8, r9, r2
 8000f38:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	e7a3      	b.n	8000e88 <__udivmoddi4+0x1f0>
 8000f40:	4645      	mov	r5, r8
 8000f42:	e7ea      	b.n	8000f1a <__udivmoddi4+0x282>
 8000f44:	462b      	mov	r3, r5
 8000f46:	e794      	b.n	8000e72 <__udivmoddi4+0x1da>
 8000f48:	4640      	mov	r0, r8
 8000f4a:	e7d1      	b.n	8000ef0 <__udivmoddi4+0x258>
 8000f4c:	46d0      	mov	r8, sl
 8000f4e:	e77b      	b.n	8000e48 <__udivmoddi4+0x1b0>
 8000f50:	3d02      	subs	r5, #2
 8000f52:	4462      	add	r2, ip
 8000f54:	e732      	b.n	8000dbc <__udivmoddi4+0x124>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e70a      	b.n	8000d70 <__udivmoddi4+0xd8>
 8000f5a:	4464      	add	r4, ip
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	e742      	b.n	8000de6 <__udivmoddi4+0x14e>

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f6c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f70:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d013      	beq.n	8000fa4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f7c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f80:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000f84:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d00b      	beq.n	8000fa4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f8c:	e000      	b.n	8000f90 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f8e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f90:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d0f9      	beq.n	8000f8e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f9a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	b2d2      	uxtb	r2, r2
 8000fa2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000fa4:	687b      	ldr	r3, [r7, #4]
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
	...

08000fb4 <SerialSendChar_PC>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
void SerialSendChar_PC(uint8_t Ch1) // 1문자 보내�?????????????????????????????? ?��?��
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
	// USART_SR_TXE(1<<7)=0?, TX Buffer NOT Empty?
	// TX buffer Empty?���?????????????????????????????? ?��?���?????????????????????????????? 계속 ??�??????????????????????????????(?��?�� �???????????????????????????????��?�� ?��?��까�? ??�??????????????????????????????)
        while((USART3->SR & 1<<7) == RESET);
 8000fbe:	bf00      	nop
 8000fc0:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <SerialSendChar_PC+0x2c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d0f9      	beq.n	8000fc0 <SerialSendChar_PC+0xc>
	USART3->DR = (Ch1 & 0x01FF);	// ?��?�� (최�? 9bit ?���??????????????????????????????�?????????????????????????????? 0x01FF�?????????????????????????????? masking)
 8000fcc:	4a04      	ldr	r2, [pc, #16]	; (8000fe0 <SerialSendChar_PC+0x2c>)
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	6053      	str	r3, [r2, #4]
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	40004800 	.word	0x40004800

08000fe4 <SerialSendChar_WIFI>:

void SerialSendChar_WIFI(uint8_t Ch2) // 1문자 보내�?????????????????????????????? ?��?��
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
	// USART_SR_TXE(1<<7)=0?, TX Buffer NOT Empty?
	// TX buffer Empty?���?????????????????????????????? ?��?���?????????????????????????????? 계속 ??�??????????????????????????????(?��?�� �???????????????????????????????��?�� ?��?��까�? ??�??????????????????????????????)
        while((UART4->SR & 1<<7) == RESET);
 8000fee:	bf00      	nop
 8000ff0:	4b07      	ldr	r3, [pc, #28]	; (8001010 <SerialSendChar_WIFI+0x2c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d0f9      	beq.n	8000ff0 <SerialSendChar_WIFI+0xc>
	UART4->DR = (Ch2 & 0x01FF);	// ?��?�� (최�? 9bit ?���??????????????????????????????�?????????????????????????????? 0x01FF�?????????????????????????????? masking)
 8000ffc:	4a04      	ldr	r2, [pc, #16]	; (8001010 <SerialSendChar_WIFI+0x2c>)
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	6053      	str	r3, [r2, #4]
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	40004c00 	.word	0x40004c00

08001014 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	encoder_count=TIM4->CNT;
 800101c:	4b9f      	ldr	r3, [pc, #636]	; (800129c <HAL_UART_RxCpltCallback+0x288>)
 800101e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001020:	4a9f      	ldr	r2, [pc, #636]	; (80012a0 <HAL_UART_RxCpltCallback+0x28c>)
 8001022:	6013      	str	r3, [r2, #0]

  if(huart->Instance == USART3)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a9e      	ldr	r2, [pc, #632]	; (80012a4 <HAL_UART_RxCpltCallback+0x290>)
 800102a:	4293      	cmp	r3, r2
 800102c:	f040 80b7 	bne.w	800119e <HAL_UART_RxCpltCallback+0x18a>
  {

	  HAL_UART_Receive_IT(&huart3, &key_value, 1);
 8001030:	2201      	movs	r2, #1
 8001032:	499d      	ldr	r1, [pc, #628]	; (80012a8 <HAL_UART_RxCpltCallback+0x294>)
 8001034:	489d      	ldr	r0, [pc, #628]	; (80012ac <HAL_UART_RxCpltCallback+0x298>)
 8001036:	f006 fbc6 	bl	80077c6 <HAL_UART_Receive_IT>
	  printf("%d,^^ %c \r\n", key_value,key_value);
 800103a:	4b9b      	ldr	r3, [pc, #620]	; (80012a8 <HAL_UART_RxCpltCallback+0x294>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	4619      	mov	r1, r3
 8001040:	4b99      	ldr	r3, [pc, #612]	; (80012a8 <HAL_UART_RxCpltCallback+0x294>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	461a      	mov	r2, r3
 8001046:	489a      	ldr	r0, [pc, #616]	; (80012b0 <HAL_UART_RxCpltCallback+0x29c>)
 8001048:	f008 fb60 	bl	800970c <iprintf>

	  if(key_value=='q')  // forward
 800104c:	4b96      	ldr	r3, [pc, #600]	; (80012a8 <HAL_UART_RxCpltCallback+0x294>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b71      	cmp	r3, #113	; 0x71
 8001052:	d10c      	bne.n	800106e <HAL_UART_RxCpltCallback+0x5a>
	  	 	  {
	  	 		  GPIOE->ODR |= 1<<0;  // forward
 8001054:	4b97      	ldr	r3, [pc, #604]	; (80012b4 <HAL_UART_RxCpltCallback+0x2a0>)
 8001056:	695b      	ldr	r3, [r3, #20]
 8001058:	4a96      	ldr	r2, [pc, #600]	; (80012b4 <HAL_UART_RxCpltCallback+0x2a0>)
 800105a:	f043 0301 	orr.w	r3, r3, #1
 800105e:	6153      	str	r3, [r2, #20]
	  	 		  GPIOB->ODR |= 1<<0;  //LD1
 8001060:	4b95      	ldr	r3, [pc, #596]	; (80012b8 <HAL_UART_RxCpltCallback+0x2a4>)
 8001062:	695b      	ldr	r3, [r3, #20]
 8001064:	4a94      	ldr	r2, [pc, #592]	; (80012b8 <HAL_UART_RxCpltCallback+0x2a4>)
 8001066:	f043 0301 	orr.w	r3, r3, #1
 800106a:	6153      	str	r3, [r2, #20]
 800106c:	e097      	b.n	800119e <HAL_UART_RxCpltCallback+0x18a>

	  	 	  }
	  else if(key_value=='w')  // back
 800106e:	4b8e      	ldr	r3, [pc, #568]	; (80012a8 <HAL_UART_RxCpltCallback+0x294>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b77      	cmp	r3, #119	; 0x77
 8001074:	d10c      	bne.n	8001090 <HAL_UART_RxCpltCallback+0x7c>
		  	 	  {
		  	 		  GPIOE->ODR &= ~1<<0;  // back
 8001076:	4b8f      	ldr	r3, [pc, #572]	; (80012b4 <HAL_UART_RxCpltCallback+0x2a0>)
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	4a8e      	ldr	r2, [pc, #568]	; (80012b4 <HAL_UART_RxCpltCallback+0x2a0>)
 800107c:	f023 0301 	bic.w	r3, r3, #1
 8001080:	6153      	str	r3, [r2, #20]
		  	 		GPIOB->ODR &= ~1<<0;  //LD1
 8001082:	4b8d      	ldr	r3, [pc, #564]	; (80012b8 <HAL_UART_RxCpltCallback+0x2a4>)
 8001084:	695b      	ldr	r3, [r3, #20]
 8001086:	4a8c      	ldr	r2, [pc, #560]	; (80012b8 <HAL_UART_RxCpltCallback+0x2a4>)
 8001088:	f023 0301 	bic.w	r3, r3, #1
 800108c:	6153      	str	r3, [r2, #20]
 800108e:	e086      	b.n	800119e <HAL_UART_RxCpltCallback+0x18a>
		  	 	  }

	  else if(key_value=='1')
 8001090:	4b85      	ldr	r3, [pc, #532]	; (80012a8 <HAL_UART_RxCpltCallback+0x294>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b31      	cmp	r3, #49	; 0x31
 8001096:	d106      	bne.n	80010a6 <HAL_UART_RxCpltCallback+0x92>
	 	  {
	 		  GPIOG->ODR |= 1<<0;  //stop
 8001098:	4b88      	ldr	r3, [pc, #544]	; (80012bc <HAL_UART_RxCpltCallback+0x2a8>)
 800109a:	695b      	ldr	r3, [r3, #20]
 800109c:	4a87      	ldr	r2, [pc, #540]	; (80012bc <HAL_UART_RxCpltCallback+0x2a8>)
 800109e:	f043 0301 	orr.w	r3, r3, #1
 80010a2:	6153      	str	r3, [r2, #20]
 80010a4:	e07b      	b.n	800119e <HAL_UART_RxCpltCallback+0x18a>

	 	  }

	  else  if(key_value=='2')
 80010a6:	4b80      	ldr	r3, [pc, #512]	; (80012a8 <HAL_UART_RxCpltCallback+0x294>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b32      	cmp	r3, #50	; 0x32
 80010ac:	d106      	bne.n	80010bc <HAL_UART_RxCpltCallback+0xa8>
	  {
		  GPIOG->ODR &= ~1<<0;  //start
 80010ae:	4b83      	ldr	r3, [pc, #524]	; (80012bc <HAL_UART_RxCpltCallback+0x2a8>)
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	4a82      	ldr	r2, [pc, #520]	; (80012bc <HAL_UART_RxCpltCallback+0x2a8>)
 80010b4:	f023 0301 	bic.w	r3, r3, #1
 80010b8:	6153      	str	r3, [r2, #20]
 80010ba:	e070      	b.n	800119e <HAL_UART_RxCpltCallback+0x18a>

	  }
	  else if(key_value=='3')
 80010bc:	4b7a      	ldr	r3, [pc, #488]	; (80012a8 <HAL_UART_RxCpltCallback+0x294>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b33      	cmp	r3, #51	; 0x33
 80010c2:	d106      	bne.n	80010d2 <HAL_UART_RxCpltCallback+0xbe>
	  {

			TIM3->CCR1 = 50;
 80010c4:	4b7e      	ldr	r3, [pc, #504]	; (80012c0 <HAL_UART_RxCpltCallback+0x2ac>)
 80010c6:	2232      	movs	r2, #50	; 0x32
 80010c8:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 50;
 80010ca:	4b7d      	ldr	r3, [pc, #500]	; (80012c0 <HAL_UART_RxCpltCallback+0x2ac>)
 80010cc:	2232      	movs	r2, #50	; 0x32
 80010ce:	639a      	str	r2, [r3, #56]	; 0x38
 80010d0:	e065      	b.n	800119e <HAL_UART_RxCpltCallback+0x18a>
	  }
	  else if(key_value=='4')
 80010d2:	4b75      	ldr	r3, [pc, #468]	; (80012a8 <HAL_UART_RxCpltCallback+0x294>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2b34      	cmp	r3, #52	; 0x34
 80010d8:	d106      	bne.n	80010e8 <HAL_UART_RxCpltCallback+0xd4>
	  	  {

	  			TIM3->CCR1 = 100;
 80010da:	4b79      	ldr	r3, [pc, #484]	; (80012c0 <HAL_UART_RxCpltCallback+0x2ac>)
 80010dc:	2264      	movs	r2, #100	; 0x64
 80010de:	635a      	str	r2, [r3, #52]	; 0x34
	  			TIM3->CCR2 = 100;
 80010e0:	4b77      	ldr	r3, [pc, #476]	; (80012c0 <HAL_UART_RxCpltCallback+0x2ac>)
 80010e2:	2264      	movs	r2, #100	; 0x64
 80010e4:	639a      	str	r2, [r3, #56]	; 0x38
 80010e6:	e05a      	b.n	800119e <HAL_UART_RxCpltCallback+0x18a>
	  	  }
	  else if(key_value=='5')
 80010e8:	4b6f      	ldr	r3, [pc, #444]	; (80012a8 <HAL_UART_RxCpltCallback+0x294>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b35      	cmp	r3, #53	; 0x35
 80010ee:	d108      	bne.n	8001102 <HAL_UART_RxCpltCallback+0xee>
	  	  	  {

	  	  			TIM3->CCR1 = 500;
 80010f0:	4b73      	ldr	r3, [pc, #460]	; (80012c0 <HAL_UART_RxCpltCallback+0x2ac>)
 80010f2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80010f6:	635a      	str	r2, [r3, #52]	; 0x34
	  	  		TIM3->CCR2 = 500;
 80010f8:	4b71      	ldr	r3, [pc, #452]	; (80012c0 <HAL_UART_RxCpltCallback+0x2ac>)
 80010fa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80010fe:	639a      	str	r2, [r3, #56]	; 0x38
 8001100:	e04d      	b.n	800119e <HAL_UART_RxCpltCallback+0x18a>
	  	  	  }
	  else if(key_value=='6')
 8001102:	4b69      	ldr	r3, [pc, #420]	; (80012a8 <HAL_UART_RxCpltCallback+0x294>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b36      	cmp	r3, #54	; 0x36
 8001108:	d108      	bne.n	800111c <HAL_UART_RxCpltCallback+0x108>
	  	  	  {

	  	  			TIM3->CCR1 = 800;
 800110a:	4b6d      	ldr	r3, [pc, #436]	; (80012c0 <HAL_UART_RxCpltCallback+0x2ac>)
 800110c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001110:	635a      	str	r2, [r3, #52]	; 0x34
	  	  		TIM3->CCR2 = 800;
 8001112:	4b6b      	ldr	r3, [pc, #428]	; (80012c0 <HAL_UART_RxCpltCallback+0x2ac>)
 8001114:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001118:	639a      	str	r2, [r3, #56]	; 0x38
 800111a:	e040      	b.n	800119e <HAL_UART_RxCpltCallback+0x18a>
	  	  	  }
	  else if(key_value=='7')
 800111c:	4b62      	ldr	r3, [pc, #392]	; (80012a8 <HAL_UART_RxCpltCallback+0x294>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b37      	cmp	r3, #55	; 0x37
 8001122:	d108      	bne.n	8001136 <HAL_UART_RxCpltCallback+0x122>
	  	  	  {

	  	  			TIM3->CCR1 = 1000;
 8001124:	4b66      	ldr	r3, [pc, #408]	; (80012c0 <HAL_UART_RxCpltCallback+0x2ac>)
 8001126:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800112a:	635a      	str	r2, [r3, #52]	; 0x34
	  	  		TIM3->CCR2 = 1000;
 800112c:	4b64      	ldr	r3, [pc, #400]	; (80012c0 <HAL_UART_RxCpltCallback+0x2ac>)
 800112e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001132:	639a      	str	r2, [r3, #56]	; 0x38
 8001134:	e033      	b.n	800119e <HAL_UART_RxCpltCallback+0x18a>
	  	  	  }
	  else if(key_value=='a')
 8001136:	4b5c      	ldr	r3, [pc, #368]	; (80012a8 <HAL_UART_RxCpltCallback+0x294>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b61      	cmp	r3, #97	; 0x61
 800113c:	d107      	bne.n	800114e <HAL_UART_RxCpltCallback+0x13a>
	  {
		  TIM4->CNT=10000;
 800113e:	4b57      	ldr	r3, [pc, #348]	; (800129c <HAL_UART_RxCpltCallback+0x288>)
 8001140:	f242 7210 	movw	r2, #10000	; 0x2710
 8001144:	625a      	str	r2, [r3, #36]	; 0x24

		  key_flag=1;
 8001146:	4b5f      	ldr	r3, [pc, #380]	; (80012c4 <HAL_UART_RxCpltCallback+0x2b0>)
 8001148:	2201      	movs	r2, #1
 800114a:	701a      	strb	r2, [r3, #0]
 800114c:	e027      	b.n	800119e <HAL_UART_RxCpltCallback+0x18a>
	  }
	  else if(key_value=='b')
 800114e:	4b56      	ldr	r3, [pc, #344]	; (80012a8 <HAL_UART_RxCpltCallback+0x294>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b62      	cmp	r3, #98	; 0x62
 8001154:	d103      	bne.n	800115e <HAL_UART_RxCpltCallback+0x14a>
	 {

		 speed_input=(2*pi/60)*20;
 8001156:	4b5c      	ldr	r3, [pc, #368]	; (80012c8 <HAL_UART_RxCpltCallback+0x2b4>)
 8001158:	4a5c      	ldr	r2, [pc, #368]	; (80012cc <HAL_UART_RxCpltCallback+0x2b8>)
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	e01f      	b.n	800119e <HAL_UART_RxCpltCallback+0x18a>
     }
	  else if(key_value=='z')
 800115e:	4b52      	ldr	r3, [pc, #328]	; (80012a8 <HAL_UART_RxCpltCallback+0x294>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2b7a      	cmp	r3, #122	; 0x7a
 8001164:	d103      	bne.n	800116e <HAL_UART_RxCpltCallback+0x15a>
	  	 	  {



	  	  	  	 speed_input=10*2*pi/60;
 8001166:	4b58      	ldr	r3, [pc, #352]	; (80012c8 <HAL_UART_RxCpltCallback+0x2b4>)
 8001168:	4a59      	ldr	r2, [pc, #356]	; (80012d0 <HAL_UART_RxCpltCallback+0x2bc>)
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	e017      	b.n	800119e <HAL_UART_RxCpltCallback+0x18a>
	  	  //[%]

	  	//  	TIM3->CCR1 = 1000*duty/100;
	  	//  		TIM3->CCR2 = 1000*duty/100;
	  	  	  	  }
	  else if(key_value=='x')
 800116e:	4b4e      	ldr	r3, [pc, #312]	; (80012a8 <HAL_UART_RxCpltCallback+0x294>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b78      	cmp	r3, #120	; 0x78
 8001174:	d109      	bne.n	800118a <HAL_UART_RxCpltCallback+0x176>
	  	  	  	  {
	  	  	  	GPIOB->ODR &= ~1<<0;
 8001176:	4b50      	ldr	r3, [pc, #320]	; (80012b8 <HAL_UART_RxCpltCallback+0x2a4>)
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	4a4f      	ldr	r2, [pc, #316]	; (80012b8 <HAL_UART_RxCpltCallback+0x2a4>)
 800117c:	f023 0301 	bic.w	r3, r3, #1
 8001180:	6153      	str	r3, [r2, #20]


	  	  	   speed_input=45*2*pi/60;
 8001182:	4b51      	ldr	r3, [pc, #324]	; (80012c8 <HAL_UART_RxCpltCallback+0x2b4>)
 8001184:	4a53      	ldr	r2, [pc, #332]	; (80012d4 <HAL_UART_RxCpltCallback+0x2c0>)
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	e009      	b.n	800119e <HAL_UART_RxCpltCallback+0x18a>
	  	  		 	  //[%]
	  	//	  TIM3->CCR1 = 1000*duty/100;
	  	//		  	TIM3->CCR2 = 1000*duty/100;

	  	  	  	  }
	  else if(key_value=='c')
 800118a:	4b47      	ldr	r3, [pc, #284]	; (80012a8 <HAL_UART_RxCpltCallback+0x294>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	2b63      	cmp	r3, #99	; 0x63
 8001190:	d105      	bne.n	800119e <HAL_UART_RxCpltCallback+0x18a>
 	  	  	  {
	  	  	  	GPIOB->ODR &= ~1<<0;
 8001192:	4b49      	ldr	r3, [pc, #292]	; (80012b8 <HAL_UART_RxCpltCallback+0x2a4>)
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	4a48      	ldr	r2, [pc, #288]	; (80012b8 <HAL_UART_RxCpltCallback+0x2a4>)
 8001198:	f023 0301 	bic.w	r3, r3, #1
 800119c:	6153      	str	r3, [r2, #20]




  }
  if(huart->Instance == UART4)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a4d      	ldr	r2, [pc, #308]	; (80012d8 <HAL_UART_RxCpltCallback+0x2c4>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	f040 80ca 	bne.w	800133e <HAL_UART_RxCpltCallback+0x32a>
    {
	  HAL_UART_Receive_IT(&huart4, &data, 1);
 80011aa:	2201      	movs	r2, #1
 80011ac:	494b      	ldr	r1, [pc, #300]	; (80012dc <HAL_UART_RxCpltCallback+0x2c8>)
 80011ae:	484c      	ldr	r0, [pc, #304]	; (80012e0 <HAL_UART_RxCpltCallback+0x2cc>)
 80011b0:	f006 fb09 	bl	80077c6 <HAL_UART_Receive_IT>


		switch(data)
 80011b4:	4b49      	ldr	r3, [pc, #292]	; (80012dc <HAL_UART_RxCpltCallback+0x2c8>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	3b21      	subs	r3, #33	; 0x21
 80011ba:	2b20      	cmp	r3, #32
 80011bc:	f200 80bf 	bhi.w	800133e <HAL_UART_RxCpltCallback+0x32a>
 80011c0:	a201      	add	r2, pc, #4	; (adr r2, 80011c8 <HAL_UART_RxCpltCallback+0x1b4>)
 80011c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c6:	bf00      	nop
 80011c8:	08001321 	.word	0x08001321
 80011cc:	0800133f 	.word	0x0800133f
 80011d0:	0800133f 	.word	0x0800133f
 80011d4:	0800133f 	.word	0x0800133f
 80011d8:	0800133f 	.word	0x0800133f
 80011dc:	0800133f 	.word	0x0800133f
 80011e0:	0800133f 	.word	0x0800133f
 80011e4:	0800133f 	.word	0x0800133f
 80011e8:	0800133f 	.word	0x0800133f
 80011ec:	0800133f 	.word	0x0800133f
 80011f0:	0800133f 	.word	0x0800133f
 80011f4:	0800133f 	.word	0x0800133f
 80011f8:	0800133f 	.word	0x0800133f
 80011fc:	0800133f 	.word	0x0800133f
 8001200:	0800133f 	.word	0x0800133f
 8001204:	0800124d 	.word	0x0800124d
 8001208:	08001267 	.word	0x08001267
 800120c:	08001281 	.word	0x08001281
 8001210:	0800128f 	.word	0x0800128f
 8001214:	080012e5 	.word	0x080012e5
 8001218:	080012f3 	.word	0x080012f3
 800121c:	08001301 	.word	0x08001301
 8001220:	0800130f 	.word	0x0800130f
 8001224:	0800133f 	.word	0x0800133f
 8001228:	0800133f 	.word	0x0800133f
 800122c:	0800133f 	.word	0x0800133f
 8001230:	0800133f 	.word	0x0800133f
 8001234:	0800133f 	.word	0x0800133f
 8001238:	0800133f 	.word	0x0800133f
 800123c:	0800133f 	.word	0x0800133f
 8001240:	0800133f 	.word	0x0800133f
 8001244:	0800133f 	.word	0x0800133f
 8001248:	08001337 	.word	0x08001337
		{
		case '0':
			 GPIOB->ODR |= 1<<0;
 800124c:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <HAL_UART_RxCpltCallback+0x2a4>)
 800124e:	695b      	ldr	r3, [r3, #20]
 8001250:	4a19      	ldr	r2, [pc, #100]	; (80012b8 <HAL_UART_RxCpltCallback+0x2a4>)
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	6153      	str	r3, [r2, #20]
			GPIOG->ODR &= ~1<<0;// start
 8001258:	4b18      	ldr	r3, [pc, #96]	; (80012bc <HAL_UART_RxCpltCallback+0x2a8>)
 800125a:	695b      	ldr	r3, [r3, #20]
 800125c:	4a17      	ldr	r2, [pc, #92]	; (80012bc <HAL_UART_RxCpltCallback+0x2a8>)
 800125e:	f023 0301 	bic.w	r3, r3, #1
 8001262:	6153      	str	r3, [r2, #20]

			break;
 8001264:	e06b      	b.n	800133e <HAL_UART_RxCpltCallback+0x32a>

		case '1':  //stop
			  GPIOB->ODR &= ~1<<0;
 8001266:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <HAL_UART_RxCpltCallback+0x2a4>)
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	4a13      	ldr	r2, [pc, #76]	; (80012b8 <HAL_UART_RxCpltCallback+0x2a4>)
 800126c:	f023 0301 	bic.w	r3, r3, #1
 8001270:	6153      	str	r3, [r2, #20]
	          GPIOG->ODR |= 1<<0;
 8001272:	4b12      	ldr	r3, [pc, #72]	; (80012bc <HAL_UART_RxCpltCallback+0x2a8>)
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	4a11      	ldr	r2, [pc, #68]	; (80012bc <HAL_UART_RxCpltCallback+0x2a8>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	6153      	str	r3, [r2, #20]
			break;
 800127e:	e05e      	b.n	800133e <HAL_UART_RxCpltCallback+0x32a>

		case '2':  //dir
			  GPIOE->ODR |= 1<<0;  // forward
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <HAL_UART_RxCpltCallback+0x2a0>)
 8001282:	695b      	ldr	r3, [r3, #20]
 8001284:	4a0b      	ldr	r2, [pc, #44]	; (80012b4 <HAL_UART_RxCpltCallback+0x2a0>)
 8001286:	f043 0301 	orr.w	r3, r3, #1
 800128a:	6153      	str	r3, [r2, #20]
			break;
 800128c:	e057      	b.n	800133e <HAL_UART_RxCpltCallback+0x32a>

		case '3'://dir
			 GPIOE->ODR &= ~1<<0;  //back
 800128e:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <HAL_UART_RxCpltCallback+0x2a0>)
 8001290:	695b      	ldr	r3, [r3, #20]
 8001292:	4a08      	ldr	r2, [pc, #32]	; (80012b4 <HAL_UART_RxCpltCallback+0x2a0>)
 8001294:	f023 0301 	bic.w	r3, r3, #1
 8001298:	6153      	str	r3, [r2, #20]
			break;
 800129a:	e050      	b.n	800133e <HAL_UART_RxCpltCallback+0x32a>
 800129c:	40000800 	.word	0x40000800
 80012a0:	20000394 	.word	0x20000394
 80012a4:	40004800 	.word	0x40004800
 80012a8:	200002fc 	.word	0x200002fc
 80012ac:	20000300 	.word	0x20000300
 80012b0:	0800ba08 	.word	0x0800ba08
 80012b4:	40021000 	.word	0x40021000
 80012b8:	40020400 	.word	0x40020400
 80012bc:	40021800 	.word	0x40021800
 80012c0:	40000400 	.word	0x40000400
 80012c4:	200003dc 	.word	0x200003dc
 80012c8:	200003c0 	.word	0x200003c0
 80012cc:	40060a90 	.word	0x40060a90
 80012d0:	3f860a90 	.word	0x3f860a90
 80012d4:	4096cbe2 	.word	0x4096cbe2
 80012d8:	40004c00 	.word	0x40004c00
 80012dc:	20000348 	.word	0x20000348
 80012e0:	2000034c 	.word	0x2000034c

		case '4':

		    TIM3->CCR1 = 0;
 80012e4:	4b18      	ldr	r3, [pc, #96]	; (8001348 <HAL_UART_RxCpltCallback+0x334>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 0;
 80012ea:	4b17      	ldr	r3, [pc, #92]	; (8001348 <HAL_UART_RxCpltCallback+0x334>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	639a      	str	r2, [r3, #56]	; 0x38

			break;
 80012f0:	e025      	b.n	800133e <HAL_UART_RxCpltCallback+0x32a>

		case '5':
			TIM3->CCR1 = 50;
 80012f2:	4b15      	ldr	r3, [pc, #84]	; (8001348 <HAL_UART_RxCpltCallback+0x334>)
 80012f4:	2232      	movs	r2, #50	; 0x32
 80012f6:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 50;
 80012f8:	4b13      	ldr	r3, [pc, #76]	; (8001348 <HAL_UART_RxCpltCallback+0x334>)
 80012fa:	2232      	movs	r2, #50	; 0x32
 80012fc:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 80012fe:	e01e      	b.n	800133e <HAL_UART_RxCpltCallback+0x32a>

		case '6':
			TIM3->CCR1 = 200;
 8001300:	4b11      	ldr	r3, [pc, #68]	; (8001348 <HAL_UART_RxCpltCallback+0x334>)
 8001302:	22c8      	movs	r2, #200	; 0xc8
 8001304:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 200;
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <HAL_UART_RxCpltCallback+0x334>)
 8001308:	22c8      	movs	r2, #200	; 0xc8
 800130a:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 800130c:	e017      	b.n	800133e <HAL_UART_RxCpltCallback+0x32a>

		case '7':
			TIM3->CCR1 = 1000;
 800130e:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <HAL_UART_RxCpltCallback+0x334>)
 8001310:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001314:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 1000;
 8001316:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <HAL_UART_RxCpltCallback+0x334>)
 8001318:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800131c:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 800131e:	e00e      	b.n	800133e <HAL_UART_RxCpltCallback+0x32a>

		case '!':
			RX_flag=1;
 8001320:	4b0a      	ldr	r3, [pc, #40]	; (800134c <HAL_UART_RxCpltCallback+0x338>)
 8001322:	2201      	movs	r2, #1
 8001324:	701a      	strb	r2, [r3, #0]
			 TIM2->CNT=0;
 8001326:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800132a:	2200      	movs	r2, #0
 800132c:	625a      	str	r2, [r3, #36]	; 0x24
			 TIM4->CNT=0;
 800132e:	4b08      	ldr	r3, [pc, #32]	; (8001350 <HAL_UART_RxCpltCallback+0x33c>)
 8001330:	2200      	movs	r2, #0
 8001332:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8001334:	e003      	b.n	800133e <HAL_UART_RxCpltCallback+0x32a>
		case 'A':  //Tx

			RX_flag=2;
 8001336:	4b05      	ldr	r3, [pc, #20]	; (800134c <HAL_UART_RxCpltCallback+0x338>)
 8001338:	2202      	movs	r2, #2
 800133a:	701a      	strb	r2, [r3, #0]
				break;
 800133c:	bf00      	nop



    }

}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40000400 	.word	0x40000400
 800134c:	20000398 	.word	0x20000398
 8001350:	40000800 	.word	0x40000800

08001354 <_write>:

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
int _write(int file, char* p, int len){
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
	for(int i=0; i<len; i++){
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]
 8001364:	e009      	b.n	800137a <_write+0x26>
		ITM_SendChar((*p++));
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	1c5a      	adds	r2, r3, #1
 800136a:	60ba      	str	r2, [r7, #8]
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fdf8 	bl	8000f64 <ITM_SendChar>
	for(int i=0; i<len; i++){
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	3301      	adds	r3, #1
 8001378:	617b      	str	r3, [r7, #20]
 800137a:	697a      	ldr	r2, [r7, #20]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	429a      	cmp	r2, r3
 8001380:	dbf1      	blt.n	8001366 <_write+0x12>
	}
	return len;
 8001382:	687b      	ldr	r3, [r7, #4]
}
 8001384:	4618      	mov	r0, r3
 8001386:	3718      	adds	r7, #24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	0000      	movs	r0, r0
	...

08001390 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001390:	b598      	push	{r3, r4, r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8001394:	f002 f876 	bl	8003484 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001398:	f000 fab0 	bl	80018fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800139c:	f000 ffd6 	bl	800234c <MX_GPIO_Init>
  MX_DMA_Init();
 80013a0:	f000 ff9e 	bl	80022e0 <MX_DMA_Init>
  MX_ETH_Init();
 80013a4:	f000 fb82 	bl	8001aac <MX_ETH_Init>
  MX_USART3_UART_Init();
 80013a8:	f000 ff42 	bl	8002230 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80013ac:	f000 ff6a 	bl	8002284 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 80013b0:	f000 fc72 	bl	8001c98 <MX_TIM3_Init>
  MX_TIM14_Init();
 80013b4:	f000 feda 	bl	800216c <MX_TIM14_Init>
  MX_ADC1_Init();
 80013b8:	f000 fb0a 	bl	80019d0 <MX_ADC1_Init>
  MX_TIM4_Init();
 80013bc:	f000 fd1c 	bl	8001df8 <MX_TIM4_Init>
  MX_UART4_Init();
 80013c0:	f000 ff0c 	bl	80021dc <MX_UART4_Init>
  MX_TIM2_Init();
 80013c4:	f000 fc10 	bl	8001be8 <MX_TIM2_Init>
  MX_TIM8_Init();
 80013c8:	f000 fde0 	bl	8001f8c <MX_TIM8_Init>
  MX_TIM6_Init();
 80013cc:	f000 fd6e 	bl	8001eac <MX_TIM6_Init>
  MX_TIM7_Init();
 80013d0:	f000 fda4 	bl	8001f1c <MX_TIM7_Init>
  MX_TIM13_Init();
 80013d4:	f000 fe7a 	bl	80020cc <MX_TIM13_Init>
  MX_TIM1_Init();
 80013d8:	f000 fbb6 	bl	8001b48 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */


  HAL_UART_Receive_IT(&huart3, &key_value, 1);     //추�?****************************
 80013dc:	2201      	movs	r2, #1
 80013de:	49b8      	ldr	r1, [pc, #736]	; (80016c0 <main+0x330>)
 80013e0:	48b8      	ldr	r0, [pc, #736]	; (80016c4 <main+0x334>)
 80013e2:	f006 f9f0 	bl	80077c6 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart4, &data, 1);
 80013e6:	2201      	movs	r2, #1
 80013e8:	49b7      	ldr	r1, [pc, #732]	; (80016c8 <main+0x338>)
 80013ea:	48b8      	ldr	r0, [pc, #736]	; (80016cc <main+0x33c>)
 80013ec:	f006 f9eb 	bl	80077c6 <HAL_UART_Receive_IT>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC1_value, 2);
 80013f0:	2202      	movs	r2, #2
 80013f2:	49b7      	ldr	r1, [pc, #732]	; (80016d0 <main+0x340>)
 80013f4:	48b7      	ldr	r0, [pc, #732]	; (80016d4 <main+0x344>)
 80013f6:	f002 fa2f 	bl	8003858 <HAL_ADC_Start_DMA>




   sprintf((char *)buffer, "Hello, World!\n");
 80013fa:	49b7      	ldr	r1, [pc, #732]	; (80016d8 <main+0x348>)
 80013fc:	48b7      	ldr	r0, [pc, #732]	; (80016dc <main+0x34c>)
 80013fe:	f008 f997 	bl	8009730 <siprintf>
   HAL_UART_Transmit(&huart4, buffer, strlen((char *)buffer), 100);
 8001402:	48b6      	ldr	r0, [pc, #728]	; (80016dc <main+0x34c>)
 8001404:	f7fe ff44 	bl	8000290 <strlen>
 8001408:	4603      	mov	r3, r0
 800140a:	b29a      	uxth	r2, r3
 800140c:	2364      	movs	r3, #100	; 0x64
 800140e:	49b3      	ldr	r1, [pc, #716]	; (80016dc <main+0x34c>)
 8001410:	48ae      	ldr	r0, [pc, #696]	; (80016cc <main+0x33c>)
 8001412:	f006 f94d 	bl	80076b0 <HAL_UART_Transmit>


   HAL_TIM_Base_Start_IT(&htim6);
 8001416:	48b2      	ldr	r0, [pc, #712]	; (80016e0 <main+0x350>)
 8001418:	f004 fe88 	bl	800612c <HAL_TIM_Base_Start_IT>
   HAL_TIM_Base_Start_IT(&htim7);
 800141c:	48b1      	ldr	r0, [pc, #708]	; (80016e4 <main+0x354>)
 800141e:	f004 fe85 	bl	800612c <HAL_TIM_Base_Start_IT>

   HAL_TIM_Base_Start(&htim1);
 8001422:	48b1      	ldr	r0, [pc, #708]	; (80016e8 <main+0x358>)
 8001424:	f004 fe1a 	bl	800605c <HAL_TIM_Base_Start>
     HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001428:	2200      	movs	r2, #0
 800142a:	2180      	movs	r1, #128	; 0x80
 800142c:	48af      	ldr	r0, [pc, #700]	; (80016ec <main+0x35c>)
 800142e:	f004 f805 	bl	800543c <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(tim6_flag==1)
 8001432:	4baf      	ldr	r3, [pc, #700]	; (80016f0 <main+0x360>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d16c      	bne.n	8001514 <main+0x184>
	  {

	  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 800143a:	2201      	movs	r2, #1
 800143c:	2180      	movs	r1, #128	; 0x80
 800143e:	48ab      	ldr	r0, [pc, #684]	; (80016ec <main+0x35c>)
 8001440:	f003 fffc 	bl	800543c <HAL_GPIO_WritePin>
	    	      __HAL_TIM_SET_COUNTER(&htim1, 0);
 8001444:	4ba8      	ldr	r3, [pc, #672]	; (80016e8 <main+0x358>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2200      	movs	r2, #0
 800144a:	625a      	str	r2, [r3, #36]	; 0x24
	    	      while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 800144c:	bf00      	nop
 800144e:	4ba6      	ldr	r3, [pc, #664]	; (80016e8 <main+0x358>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001454:	2b09      	cmp	r3, #9
 8001456:	d9fa      	bls.n	800144e <main+0xbe>
	    	      HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001458:	2200      	movs	r2, #0
 800145a:	2180      	movs	r1, #128	; 0x80
 800145c:	48a3      	ldr	r0, [pc, #652]	; (80016ec <main+0x35c>)
 800145e:	f003 ffed 	bl	800543c <HAL_GPIO_WritePin>

	    	      pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8001462:	f002 f875 	bl	8003550 <HAL_GetTick>
 8001466:	4603      	mov	r3, r0
 8001468:	4aa2      	ldr	r2, [pc, #648]	; (80016f4 <main+0x364>)
 800146a:	6013      	str	r3, [r2, #0]
	    	      // wait for the echo pin to go high
	    	      while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 800146c:	bf00      	nop
 800146e:	2140      	movs	r1, #64	; 0x40
 8001470:	489e      	ldr	r0, [pc, #632]	; (80016ec <main+0x35c>)
 8001472:	f003 ffcb 	bl	800540c <HAL_GPIO_ReadPin>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d108      	bne.n	800148e <main+0xfe>
 800147c:	4b9d      	ldr	r3, [pc, #628]	; (80016f4 <main+0x364>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f103 040a 	add.w	r4, r3, #10
 8001484:	f002 f864 	bl	8003550 <HAL_GetTick>
 8001488:	4603      	mov	r3, r0
 800148a:	429c      	cmp	r4, r3
 800148c:	d8ef      	bhi.n	800146e <main+0xde>
	    	      Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 800148e:	4b96      	ldr	r3, [pc, #600]	; (80016e8 <main+0x358>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001494:	4a98      	ldr	r2, [pc, #608]	; (80016f8 <main+0x368>)
 8001496:	6013      	str	r3, [r2, #0]

	    	      pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8001498:	f002 f85a 	bl	8003550 <HAL_GetTick>
 800149c:	4603      	mov	r3, r0
 800149e:	4a95      	ldr	r2, [pc, #596]	; (80016f4 <main+0x364>)
 80014a0:	6013      	str	r3, [r2, #0]
	    	      // wait for the echo pin to go low
	    	      while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 80014a2:	bf00      	nop
 80014a4:	2140      	movs	r1, #64	; 0x40
 80014a6:	4891      	ldr	r0, [pc, #580]	; (80016ec <main+0x35c>)
 80014a8:	f003 ffb0 	bl	800540c <HAL_GPIO_ReadPin>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d008      	beq.n	80014c4 <main+0x134>
 80014b2:	4b90      	ldr	r3, [pc, #576]	; (80016f4 <main+0x364>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f103 0432 	add.w	r4, r3, #50	; 0x32
 80014ba:	f002 f849 	bl	8003550 <HAL_GetTick>
 80014be:	4603      	mov	r3, r0
 80014c0:	429c      	cmp	r4, r3
 80014c2:	d8ef      	bhi.n	80014a4 <main+0x114>
	    	      Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 80014c4:	4b88      	ldr	r3, [pc, #544]	; (80016e8 <main+0x358>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ca:	4a8c      	ldr	r2, [pc, #560]	; (80016fc <main+0x36c>)
 80014cc:	6013      	str	r3, [r2, #0]

	    	      Distance = (Value2-Value1)* 0.017/2;
 80014ce:	4b8b      	ldr	r3, [pc, #556]	; (80016fc <main+0x36c>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	4b89      	ldr	r3, [pc, #548]	; (80016f8 <main+0x368>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff f823 	bl	8000524 <__aeabi_ui2d>
 80014de:	a374      	add	r3, pc, #464	; (adr r3, 80016b0 <main+0x320>)
 80014e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e4:	f7ff f898 	bl	8000618 <__aeabi_dmul>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4610      	mov	r0, r2
 80014ee:	4619      	mov	r1, r3
 80014f0:	f04f 0200 	mov.w	r2, #0
 80014f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014f8:	f7ff f9b8 	bl	800086c <__aeabi_ddiv>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4610      	mov	r0, r2
 8001502:	4619      	mov	r1, r3
 8001504:	f7ff fb60 	bl	8000bc8 <__aeabi_d2f>
 8001508:	4603      	mov	r3, r0
 800150a:	4a7d      	ldr	r2, [pc, #500]	; (8001700 <main+0x370>)
 800150c:	6013      	str	r3, [r2, #0]
	    	 //     printf("Distance = %f \r\n",Distance);
	    	//      sprintf((char *)buffer, "%d \r\n",Distance);
	    	 //     HAL_UART_Transmit(&huart3, buffer, strlen((char *)buffer), 100);
	    	      tim6_flag=0;
 800150e:	4b78      	ldr	r3, [pc, #480]	; (80016f0 <main+0x360>)
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
	  }
	  if(tim14_flag==200) //2s
 8001514:	4b7b      	ldr	r3, [pc, #492]	; (8001704 <main+0x374>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2bc8      	cmp	r3, #200	; 0xc8
 800151a:	f040 8093 	bne.w	8001644 <main+0x2b4>
	  {
		    RPM_uint16=RPM*100;
 800151e:	4b7a      	ldr	r3, [pc, #488]	; (8001708 <main+0x378>)
 8001520:	edd3 7a00 	vldr	s15, [r3]
 8001524:	ed9f 7a79 	vldr	s14, [pc, #484]	; 800170c <main+0x37c>
 8001528:	ee67 7a87 	vmul.f32	s15, s15, s14
 800152c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001530:	ee17 3a90 	vmov	r3, s15
 8001534:	b29a      	uxth	r2, r3
 8001536:	4b76      	ldr	r3, [pc, #472]	; (8001710 <main+0x380>)
 8001538:	801a      	strh	r2, [r3, #0]
		    ENC[3]=RPM_uint16 / 1000;		// 10000 ?���??????????????????????????????
 800153a:	4b75      	ldr	r3, [pc, #468]	; (8001710 <main+0x380>)
 800153c:	881b      	ldrh	r3, [r3, #0]
 800153e:	4a75      	ldr	r2, [pc, #468]	; (8001714 <main+0x384>)
 8001540:	fba2 2303 	umull	r2, r3, r2, r3
 8001544:	099b      	lsrs	r3, r3, #6
 8001546:	b29b      	uxth	r3, r3
 8001548:	b2da      	uxtb	r2, r3
 800154a:	4b73      	ldr	r3, [pc, #460]	; (8001718 <main+0x388>)
 800154c:	70da      	strb	r2, [r3, #3]
    	    ENC[2]=RPM_uint16 % 1000/100;	// 1000 ?���??????????????????????????????
 800154e:	4b70      	ldr	r3, [pc, #448]	; (8001710 <main+0x380>)
 8001550:	881b      	ldrh	r3, [r3, #0]
 8001552:	4a70      	ldr	r2, [pc, #448]	; (8001714 <main+0x384>)
 8001554:	fba2 1203 	umull	r1, r2, r2, r3
 8001558:	0992      	lsrs	r2, r2, #6
 800155a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800155e:	fb01 f202 	mul.w	r2, r1, r2
 8001562:	1a9b      	subs	r3, r3, r2
 8001564:	b29b      	uxth	r3, r3
 8001566:	4a6d      	ldr	r2, [pc, #436]	; (800171c <main+0x38c>)
 8001568:	fba2 2303 	umull	r2, r3, r2, r3
 800156c:	095b      	lsrs	r3, r3, #5
 800156e:	b29b      	uxth	r3, r3
 8001570:	b2da      	uxtb	r2, r3
 8001572:	4b69      	ldr	r3, [pc, #420]	; (8001718 <main+0x388>)
 8001574:	709a      	strb	r2, [r3, #2]
			ENC[1]= RPM_uint16 % 100/10;	// 100 ?���??????????????????????????????
 8001576:	4b66      	ldr	r3, [pc, #408]	; (8001710 <main+0x380>)
 8001578:	881b      	ldrh	r3, [r3, #0]
 800157a:	4a68      	ldr	r2, [pc, #416]	; (800171c <main+0x38c>)
 800157c:	fba2 1203 	umull	r1, r2, r2, r3
 8001580:	0952      	lsrs	r2, r2, #5
 8001582:	2164      	movs	r1, #100	; 0x64
 8001584:	fb01 f202 	mul.w	r2, r1, r2
 8001588:	1a9b      	subs	r3, r3, r2
 800158a:	b29b      	uxth	r3, r3
 800158c:	4a64      	ldr	r2, [pc, #400]	; (8001720 <main+0x390>)
 800158e:	fba2 2303 	umull	r2, r3, r2, r3
 8001592:	08db      	lsrs	r3, r3, #3
 8001594:	b29b      	uxth	r3, r3
 8001596:	b2da      	uxtb	r2, r3
 8001598:	4b5f      	ldr	r3, [pc, #380]	; (8001718 <main+0x388>)
 800159a:	705a      	strb	r2, [r3, #1]
		 	ENC[0]=RPM_uint16 % 10/1;		// 10 ?���??????????????????????????????
 800159c:	4b5c      	ldr	r3, [pc, #368]	; (8001710 <main+0x380>)
 800159e:	881a      	ldrh	r2, [r3, #0]
 80015a0:	4b5f      	ldr	r3, [pc, #380]	; (8001720 <main+0x390>)
 80015a2:	fba3 1302 	umull	r1, r3, r3, r2
 80015a6:	08d9      	lsrs	r1, r3, #3
 80015a8:	460b      	mov	r3, r1
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	440b      	add	r3, r1
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	4b58      	ldr	r3, [pc, #352]	; (8001718 <main+0x388>)
 80015b8:	701a      	strb	r2, [r3, #0]

		   	SerialSendChar_WIFI('?');
 80015ba:	203f      	movs	r0, #63	; 0x3f
 80015bc:	f7ff fd12 	bl	8000fe4 <SerialSendChar_WIFI>

			SerialSendChar_WIFI('0');
 80015c0:	2030      	movs	r0, #48	; 0x30
 80015c2:	f7ff fd0f 	bl	8000fe4 <SerialSendChar_WIFI>
			SerialSendChar_WIFI('0');
 80015c6:	2030      	movs	r0, #48	; 0x30
 80015c8:	f7ff fd0c 	bl	8000fe4 <SerialSendChar_WIFI>
			SerialSendChar_WIFI('0');
 80015cc:	2030      	movs	r0, #48	; 0x30
 80015ce:	f7ff fd09 	bl	8000fe4 <SerialSendChar_WIFI>
	     	SerialSendChar_WIFI('0');
 80015d2:	2030      	movs	r0, #48	; 0x30
 80015d4:	f7ff fd06 	bl	8000fe4 <SerialSendChar_WIFI>

		    SerialSendChar_WIFI(ENC[3]+0x30);
 80015d8:	4b4f      	ldr	r3, [pc, #316]	; (8001718 <main+0x388>)
 80015da:	78db      	ldrb	r3, [r3, #3]
 80015dc:	3330      	adds	r3, #48	; 0x30
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff fcff 	bl	8000fe4 <SerialSendChar_WIFI>
		    SerialSendChar_WIFI(ENC[2]+0x30);
 80015e6:	4b4c      	ldr	r3, [pc, #304]	; (8001718 <main+0x388>)
 80015e8:	789b      	ldrb	r3, [r3, #2]
 80015ea:	3330      	adds	r3, #48	; 0x30
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff fcf8 	bl	8000fe4 <SerialSendChar_WIFI>
		 	SerialSendChar_WIFI(ENC[1]+0x30);
 80015f4:	4b48      	ldr	r3, [pc, #288]	; (8001718 <main+0x388>)
 80015f6:	785b      	ldrb	r3, [r3, #1]
 80015f8:	3330      	adds	r3, #48	; 0x30
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fcf1 	bl	8000fe4 <SerialSendChar_WIFI>
	        SerialSendChar_WIFI(ENC[0]+0x30);
 8001602:	4b45      	ldr	r3, [pc, #276]	; (8001718 <main+0x388>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	3330      	adds	r3, #48	; 0x30
 8001608:	b2db      	uxtb	r3, r3
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff fcea 	bl	8000fe4 <SerialSendChar_WIFI>

	  		  sprintf((char *)buffer, "%d \r\n",RPM_uint16);
 8001610:	4b3f      	ldr	r3, [pc, #252]	; (8001710 <main+0x380>)
 8001612:	881b      	ldrh	r3, [r3, #0]
 8001614:	461a      	mov	r2, r3
 8001616:	4943      	ldr	r1, [pc, #268]	; (8001724 <main+0x394>)
 8001618:	4830      	ldr	r0, [pc, #192]	; (80016dc <main+0x34c>)
 800161a:	f008 f889 	bl	8009730 <siprintf>
  		  		 	  		  	  HAL_UART_Transmit(&huart3, buffer, strlen((char *)buffer), 100);
 800161e:	482f      	ldr	r0, [pc, #188]	; (80016dc <main+0x34c>)
 8001620:	f7fe fe36 	bl	8000290 <strlen>
 8001624:	4603      	mov	r3, r0
 8001626:	b29a      	uxth	r2, r3
 8001628:	2364      	movs	r3, #100	; 0x64
 800162a:	492c      	ldr	r1, [pc, #176]	; (80016dc <main+0x34c>)
 800162c:	4825      	ldr	r0, [pc, #148]	; (80016c4 <main+0x334>)
 800162e:	f006 f83f 	bl	80076b0 <HAL_UART_Transmit>



		  	SerialSendChar_PC('\n');
 8001632:	200a      	movs	r0, #10
 8001634:	f7ff fcbe 	bl	8000fb4 <SerialSendChar_PC>
		 	SerialSendChar_PC('\r');
 8001638:	200d      	movs	r0, #13
 800163a:	f7ff fcbb 	bl	8000fb4 <SerialSendChar_PC>
		 	//  	  HAL_UART_Transmit(&huart4, buffer, strlen((char *)buffer), 100);


		 	//  	  HAL_Delay(2000);

		  tim14_flag=0;
 800163e:	4b31      	ldr	r3, [pc, #196]	; (8001704 <main+0x374>)
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
	  }

	  if(tim13_flag==1)
 8001644:	4b38      	ldr	r3, [pc, #224]	; (8001728 <main+0x398>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b01      	cmp	r3, #1
 800164a:	f040 80f2 	bne.w	8001832 <main+0x4a2>
	  {
		  ENCODER_OLD= ENCODER_NEW;
 800164e:	4b37      	ldr	r3, [pc, #220]	; (800172c <main+0x39c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a37      	ldr	r2, [pc, #220]	; (8001730 <main+0x3a0>)
 8001654:	6013      	str	r3, [r2, #0]
		   ENCODER_NEW = TIM4->CNT;
 8001656:	4b37      	ldr	r3, [pc, #220]	; (8001734 <main+0x3a4>)
 8001658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165a:	4a34      	ldr	r2, [pc, #208]	; (800172c <main+0x39c>)
 800165c:	6013      	str	r3, [r2, #0]


		    	RPM =  ((abs(ENCODER_NEW-ENCODER_OLD)*60))/512.0/0.01;	// ?��코더 ?��?��: 1 turn?�� 3 pulse 출력
 800165e:	4b33      	ldr	r3, [pc, #204]	; (800172c <main+0x39c>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	4b33      	ldr	r3, [pc, #204]	; (8001730 <main+0x3a0>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800166c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001670:	4613      	mov	r3, r2
 8001672:	011b      	lsls	r3, r3, #4
 8001674:	1a9b      	subs	r3, r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	4618      	mov	r0, r3
 800167a:	f7fe ff63 	bl	8000544 <__aeabi_i2d>
 800167e:	f04f 0200 	mov.w	r2, #0
 8001682:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8001686:	f7ff f8f1 	bl	800086c <__aeabi_ddiv>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	4610      	mov	r0, r2
 8001690:	4619      	mov	r1, r3
 8001692:	a309      	add	r3, pc, #36	; (adr r3, 80016b8 <main+0x328>)
 8001694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001698:	f7ff f8e8 	bl	800086c <__aeabi_ddiv>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	4610      	mov	r0, r2
 80016a2:	4619      	mov	r1, r3
 80016a4:	f7ff fa90 	bl	8000bc8 <__aeabi_d2f>
 80016a8:	e046      	b.n	8001738 <main+0x3a8>
 80016aa:	bf00      	nop
 80016ac:	f3af 8000 	nop.w
 80016b0:	b020c49c 	.word	0xb020c49c
 80016b4:	3f916872 	.word	0x3f916872
 80016b8:	47ae147b 	.word	0x47ae147b
 80016bc:	3f847ae1 	.word	0x3f847ae1
 80016c0:	200002fc 	.word	0x200002fc
 80016c4:	20000300 	.word	0x20000300
 80016c8:	20000348 	.word	0x20000348
 80016cc:	2000034c 	.word	0x2000034c
 80016d0:	200003b0 	.word	0x200003b0
 80016d4:	20000558 	.word	0x20000558
 80016d8:	0800ba18 	.word	0x0800ba18
 80016dc:	200001fc 	.word	0x200001fc
 80016e0:	200007d0 	.word	0x200007d0
 80016e4:	20000818 	.word	0x20000818
 80016e8:	200006b0 	.word	0x200006b0
 80016ec:	40020c00 	.word	0x40020c00
 80016f0:	20000e94 	.word	0x20000e94
 80016f4:	20000e7c 	.word	0x20000e7c
 80016f8:	20000e80 	.word	0x20000e80
 80016fc:	20000e84 	.word	0x20000e84
 8001700:	20000e88 	.word	0x20000e88
 8001704:	20000e98 	.word	0x20000e98
 8001708:	200003a4 	.word	0x200003a4
 800170c:	42c80000 	.word	0x42c80000
 8001710:	200003ac 	.word	0x200003ac
 8001714:	10624dd3 	.word	0x10624dd3
 8001718:	200003bc 	.word	0x200003bc
 800171c:	51eb851f 	.word	0x51eb851f
 8001720:	cccccccd 	.word	0xcccccccd
 8001724:	0800ba28 	.word	0x0800ba28
 8001728:	20000e9c 	.word	0x20000e9c
 800172c:	2000039c 	.word	0x2000039c
 8001730:	200003a0 	.word	0x200003a0
 8001734:	40000800 	.word	0x40000800
 8001738:	4603      	mov	r3, r0
 800173a:	4a5d      	ldr	r2, [pc, #372]	; (80018b0 <main+0x520>)
 800173c:	6013      	str	r3, [r2, #0]
		     	RPS=RPM/60;
 800173e:	4b5c      	ldr	r3, [pc, #368]	; (80018b0 <main+0x520>)
 8001740:	ed93 7a00 	vldr	s14, [r3]
 8001744:	eddf 6a5b 	vldr	s13, [pc, #364]	; 80018b4 <main+0x524>
 8001748:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800174c:	4b5a      	ldr	r3, [pc, #360]	; (80018b8 <main+0x528>)
 800174e:	edc3 7a00 	vstr	s15, [r3]
		     	Omega= RPS*2*pi;
 8001752:	4b59      	ldr	r3, [pc, #356]	; (80018b8 <main+0x528>)
 8001754:	edd3 7a00 	vldr	s15, [r3]
 8001758:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800175c:	ee17 0a90 	vmov	r0, s15
 8001760:	f7fe ff02 	bl	8000568 <__aeabi_f2d>
 8001764:	a34e      	add	r3, pc, #312	; (adr r3, 80018a0 <main+0x510>)
 8001766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176a:	f7fe ff55 	bl	8000618 <__aeabi_dmul>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	4610      	mov	r0, r2
 8001774:	4619      	mov	r1, r3
 8001776:	f7ff fa27 	bl	8000bc8 <__aeabi_d2f>
 800177a:	4603      	mov	r3, r0
 800177c:	4a4f      	ldr	r2, [pc, #316]	; (80018bc <main+0x52c>)
 800177e:	6013      	str	r3, [r2, #0]


		  speed_sensor=Omega;
 8001780:	4b4e      	ldr	r3, [pc, #312]	; (80018bc <main+0x52c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a4e      	ldr	r2, [pc, #312]	; (80018c0 <main+0x530>)
 8001786:	6013      	str	r3, [r2, #0]

		 	 speed_error = (speed_input - speed_sensor);
 8001788:	4b4e      	ldr	r3, [pc, #312]	; (80018c4 <main+0x534>)
 800178a:	ed93 7a00 	vldr	s14, [r3]
 800178e:	4b4c      	ldr	r3, [pc, #304]	; (80018c0 <main+0x530>)
 8001790:	edd3 7a00 	vldr	s15, [r3]
 8001794:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001798:	4b4b      	ldr	r3, [pc, #300]	; (80018c8 <main+0x538>)
 800179a:	edc3 7a00 	vstr	s15, [r3]

		 	 S_KP = speed_error*speed_kp;
 800179e:	4b4a      	ldr	r3, [pc, #296]	; (80018c8 <main+0x538>)
 80017a0:	ed93 7a00 	vldr	s14, [r3]
 80017a4:	4b49      	ldr	r3, [pc, #292]	; (80018cc <main+0x53c>)
 80017a6:	edd3 7a00 	vldr	s15, [r3]
 80017aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ae:	4b48      	ldr	r3, [pc, #288]	; (80018d0 <main+0x540>)
 80017b0:	edc3 7a00 	vstr	s15, [r3]

		 	 // if(duty==0) speed_error_sum=0;
	//	 	  S_KI = speed_error_sum  * speed_ki;

		 	//  speed_is = S_KP + S_KI -speed_sensor*speed_kps;
		 	 speed_is = S_KP -speed_sensor*speed_kps;
 80017b4:	4b46      	ldr	r3, [pc, #280]	; (80018d0 <main+0x540>)
 80017b6:	ed93 7a00 	vldr	s14, [r3]
 80017ba:	4b41      	ldr	r3, [pc, #260]	; (80018c0 <main+0x530>)
 80017bc:	edd3 6a00 	vldr	s13, [r3]
 80017c0:	4b44      	ldr	r3, [pc, #272]	; (80018d4 <main+0x544>)
 80017c2:	edd3 7a00 	vldr	s15, [r3]
 80017c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017ce:	4b42      	ldr	r3, [pc, #264]	; (80018d8 <main+0x548>)
 80017d0:	edc3 7a00 	vstr	s15, [r3]

		 	  if(speed_is>=0.5)
 80017d4:	4b40      	ldr	r3, [pc, #256]	; (80018d8 <main+0x548>)
 80017d6:	edd3 7a00 	vldr	s15, [r3]
 80017da:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80017de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e6:	db04      	blt.n	80017f2 <main+0x462>
		 	  {
		 	  	speed_i_ref=0.5;
 80017e8:	4b3c      	ldr	r3, [pc, #240]	; (80018dc <main+0x54c>)
 80017ea:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	e00f      	b.n	8001812 <main+0x482>
		 	  }
		 	  else if(speed_is<=0.1)
 80017f2:	4b39      	ldr	r3, [pc, #228]	; (80018d8 <main+0x548>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7fe feb6 	bl	8000568 <__aeabi_f2d>
 80017fc:	a32a      	add	r3, pc, #168	; (adr r3, 80018a8 <main+0x518>)
 80017fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001802:	f7ff f985 	bl	8000b10 <__aeabi_dcmple>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d002      	beq.n	8001812 <main+0x482>
		 	  {
		 	  	speed_i_ref=0.1;
 800180c:	4b33      	ldr	r3, [pc, #204]	; (80018dc <main+0x54c>)
 800180e:	4a34      	ldr	r2, [pc, #208]	; (80018e0 <main+0x550>)
 8001810:	601a      	str	r2, [r3, #0]
		 		   }

		 	  TIM3->CCR1 = 50+1000*duty/100;
*/

		 	 TIM3->CCR1= 1000*speed_i_ref;
 8001812:	4b32      	ldr	r3, [pc, #200]	; (80018dc <main+0x54c>)
 8001814:	edd3 7a00 	vldr	s15, [r3]
 8001818:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80018e4 <main+0x554>
 800181c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001820:	4b31      	ldr	r3, [pc, #196]	; (80018e8 <main+0x558>)
 8001822:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001826:	ee17 2a90 	vmov	r2, s15
 800182a:	635a      	str	r2, [r3, #52]	; 0x34
		  tim13_flag=0;
 800182c:	4b2f      	ldr	r3, [pc, #188]	; (80018ec <main+0x55c>)
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
if(encoder_count>=512)
{
	TIM3->CCR1 = 0;  //TIM3->CCR1
}
*/
	  if(RX_flag==1)
 8001832:	4b2f      	ldr	r3, [pc, #188]	; (80018f0 <main+0x560>)
 8001834:	f993 3000 	ldrsb.w	r3, [r3]
 8001838:	2b01      	cmp	r3, #1
 800183a:	f47f adfa 	bne.w	8001432 <main+0xa2>
	  {
		 // RX_flag=0;
		//  TIM4->CNT=0;
	  	 		TIM3->CCR1 = 1000;
 800183e:	4b2a      	ldr	r3, [pc, #168]	; (80018e8 <main+0x558>)
 8001840:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001844:	635a      	str	r2, [r3, #52]	; 0x34
	  	 		TIM3->CCR2 = 1000;
 8001846:	4b28      	ldr	r3, [pc, #160]	; (80018e8 <main+0x558>)
 8001848:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800184c:	639a      	str	r2, [r3, #56]	; 0x38
	  	 			if(encoder_count>=1200)
 800184e:	4b29      	ldr	r3, [pc, #164]	; (80018f4 <main+0x564>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001856:	f4ff adec 	bcc.w	8001432 <main+0xa2>
	  		 		{
	  	 				TIM3->CCR1 = 50;
 800185a:	4b23      	ldr	r3, [pc, #140]	; (80018e8 <main+0x558>)
 800185c:	2232      	movs	r2, #50	; 0x32
 800185e:	635a      	str	r2, [r3, #52]	; 0x34

	  	 				GPIOG->ODR |= 1<<0;
 8001860:	4b25      	ldr	r3, [pc, #148]	; (80018f8 <main+0x568>)
 8001862:	695b      	ldr	r3, [r3, #20]
 8001864:	4a24      	ldr	r2, [pc, #144]	; (80018f8 <main+0x568>)
 8001866:	f043 0301 	orr.w	r3, r3, #1
 800186a:	6153      	str	r3, [r2, #20]
	  	 				HAL_Delay(100);
 800186c:	2064      	movs	r0, #100	; 0x64
 800186e:	f001 fe7b 	bl	8003568 <HAL_Delay>
	  	 				GPIOG->ODR &= ~1<<0;
 8001872:	4b21      	ldr	r3, [pc, #132]	; (80018f8 <main+0x568>)
 8001874:	695b      	ldr	r3, [r3, #20]
 8001876:	4a20      	ldr	r2, [pc, #128]	; (80018f8 <main+0x568>)
 8001878:	f023 0301 	bic.w	r3, r3, #1
 800187c:	6153      	str	r3, [r2, #20]
	  	 				TIM3->CCR1 = 50;
 800187e:	4b1a      	ldr	r3, [pc, #104]	; (80018e8 <main+0x558>)
 8001880:	2232      	movs	r2, #50	; 0x32
 8001882:	635a      	str	r2, [r3, #52]	; 0x34
	  	 				if(encoder_count>=512*3)
 8001884:	4b1b      	ldr	r3, [pc, #108]	; (80018f4 <main+0x564>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800188c:	f4ff add1 	bcc.w	8001432 <main+0xa2>
	  	 				{
	  	 					TIM3->CCR1 = 0;
 8001890:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <main+0x558>)
 8001892:	2200      	movs	r2, #0
 8001894:	635a      	str	r2, [r3, #52]	; 0x34
	  	 					RX_flag=0;
 8001896:	4b16      	ldr	r3, [pc, #88]	; (80018f0 <main+0x560>)
 8001898:	2200      	movs	r2, #0
 800189a:	701a      	strb	r2, [r3, #0]
	  if(tim6_flag==1)
 800189c:	e5c9      	b.n	8001432 <main+0xa2>
 800189e:	bf00      	nop
 80018a0:	fc8b007a 	.word	0xfc8b007a
 80018a4:	400921fa 	.word	0x400921fa
 80018a8:	9999999a 	.word	0x9999999a
 80018ac:	3fb99999 	.word	0x3fb99999
 80018b0:	200003a4 	.word	0x200003a4
 80018b4:	42700000 	.word	0x42700000
 80018b8:	200003a8 	.word	0x200003a8
 80018bc:	200003d8 	.word	0x200003d8
 80018c0:	200003c4 	.word	0x200003c4
 80018c4:	200003c0 	.word	0x200003c0
 80018c8:	200003c8 	.word	0x200003c8
 80018cc:	20000000 	.word	0x20000000
 80018d0:	200003d4 	.word	0x200003d4
 80018d4:	20000004 	.word	0x20000004
 80018d8:	200003cc 	.word	0x200003cc
 80018dc:	200003d0 	.word	0x200003d0
 80018e0:	3dcccccd 	.word	0x3dcccccd
 80018e4:	447a0000 	.word	0x447a0000
 80018e8:	40000400 	.word	0x40000400
 80018ec:	20000e9c 	.word	0x20000e9c
 80018f0:	20000398 	.word	0x20000398
 80018f4:	20000394 	.word	0x20000394
 80018f8:	40021800 	.word	0x40021800

080018fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b094      	sub	sp, #80	; 0x50
 8001900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001902:	f107 0320 	add.w	r3, r7, #32
 8001906:	2230      	movs	r2, #48	; 0x30
 8001908:	2100      	movs	r1, #0
 800190a:	4618      	mov	r0, r3
 800190c:	f007 ff73 	bl	80097f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001910:	f107 030c 	add.w	r3, r7, #12
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001920:	2300      	movs	r3, #0
 8001922:	60bb      	str	r3, [r7, #8]
 8001924:	4b28      	ldr	r3, [pc, #160]	; (80019c8 <SystemClock_Config+0xcc>)
 8001926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001928:	4a27      	ldr	r2, [pc, #156]	; (80019c8 <SystemClock_Config+0xcc>)
 800192a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800192e:	6413      	str	r3, [r2, #64]	; 0x40
 8001930:	4b25      	ldr	r3, [pc, #148]	; (80019c8 <SystemClock_Config+0xcc>)
 8001932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001938:	60bb      	str	r3, [r7, #8]
 800193a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800193c:	2300      	movs	r3, #0
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	4b22      	ldr	r3, [pc, #136]	; (80019cc <SystemClock_Config+0xd0>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a21      	ldr	r2, [pc, #132]	; (80019cc <SystemClock_Config+0xd0>)
 8001946:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800194a:	6013      	str	r3, [r2, #0]
 800194c:	4b1f      	ldr	r3, [pc, #124]	; (80019cc <SystemClock_Config+0xd0>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001954:	607b      	str	r3, [r7, #4]
 8001956:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001958:	2301      	movs	r3, #1
 800195a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800195c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001962:	2302      	movs	r3, #2
 8001964:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001966:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800196a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800196c:	2304      	movs	r3, #4
 800196e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001970:	23a8      	movs	r3, #168	; 0xa8
 8001972:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001974:	2302      	movs	r3, #2
 8001976:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001978:	2307      	movs	r3, #7
 800197a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800197c:	f107 0320 	add.w	r3, r7, #32
 8001980:	4618      	mov	r0, r3
 8001982:	f003 fe83 	bl	800568c <HAL_RCC_OscConfig>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800198c:	f000 fdea 	bl	8002564 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001990:	230f      	movs	r3, #15
 8001992:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001994:	2302      	movs	r3, #2
 8001996:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800199c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80019a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80019a8:	f107 030c 	add.w	r3, r7, #12
 80019ac:	2105      	movs	r1, #5
 80019ae:	4618      	mov	r0, r3
 80019b0:	f004 f8e4 	bl	8005b7c <HAL_RCC_ClockConfig>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80019ba:	f000 fdd3 	bl	8002564 <Error_Handler>
  }
}
 80019be:	bf00      	nop
 80019c0:	3750      	adds	r7, #80	; 0x50
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40023800 	.word	0x40023800
 80019cc:	40007000 	.word	0x40007000

080019d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019d6:	463b      	mov	r3, r7
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80019e2:	4b2f      	ldr	r3, [pc, #188]	; (8001aa0 <MX_ADC1_Init+0xd0>)
 80019e4:	4a2f      	ldr	r2, [pc, #188]	; (8001aa4 <MX_ADC1_Init+0xd4>)
 80019e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80019e8:	4b2d      	ldr	r3, [pc, #180]	; (8001aa0 <MX_ADC1_Init+0xd0>)
 80019ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019f0:	4b2b      	ldr	r3, [pc, #172]	; (8001aa0 <MX_ADC1_Init+0xd0>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80019f6:	4b2a      	ldr	r3, [pc, #168]	; (8001aa0 <MX_ADC1_Init+0xd0>)
 80019f8:	2201      	movs	r2, #1
 80019fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019fc:	4b28      	ldr	r3, [pc, #160]	; (8001aa0 <MX_ADC1_Init+0xd0>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a02:	4b27      	ldr	r3, [pc, #156]	; (8001aa0 <MX_ADC1_Init+0xd0>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001a0a:	4b25      	ldr	r3, [pc, #148]	; (8001aa0 <MX_ADC1_Init+0xd0>)
 8001a0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a10:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8001a12:	4b23      	ldr	r3, [pc, #140]	; (8001aa0 <MX_ADC1_Init+0xd0>)
 8001a14:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001a18:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a1a:	4b21      	ldr	r3, [pc, #132]	; (8001aa0 <MX_ADC1_Init+0xd0>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001a20:	4b1f      	ldr	r3, [pc, #124]	; (8001aa0 <MX_ADC1_Init+0xd0>)
 8001a22:	2202      	movs	r2, #2
 8001a24:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001a26:	4b1e      	ldr	r3, [pc, #120]	; (8001aa0 <MX_ADC1_Init+0xd0>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a2e:	4b1c      	ldr	r3, [pc, #112]	; (8001aa0 <MX_ADC1_Init+0xd0>)
 8001a30:	2201      	movs	r2, #1
 8001a32:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a34:	481a      	ldr	r0, [pc, #104]	; (8001aa0 <MX_ADC1_Init+0xd0>)
 8001a36:	f001 fdbb 	bl	80035b0 <HAL_ADC_Init>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001a40:	f000 fd90 	bl	8002564 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001a44:	2303      	movs	r3, #3
 8001a46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001a4c:	2307      	movs	r3, #7
 8001a4e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a50:	463b      	mov	r3, r7
 8001a52:	4619      	mov	r1, r3
 8001a54:	4812      	ldr	r0, [pc, #72]	; (8001aa0 <MX_ADC1_Init+0xd0>)
 8001a56:	f002 f837 	bl	8003ac8 <HAL_ADC_ConfigChannel>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001a60:	f000 fd80 	bl	8002564 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001a64:	2304      	movs	r3, #4
 8001a66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a6c:	463b      	mov	r3, r7
 8001a6e:	4619      	mov	r1, r3
 8001a70:	480b      	ldr	r0, [pc, #44]	; (8001aa0 <MX_ADC1_Init+0xd0>)
 8001a72:	f002 f829 	bl	8003ac8 <HAL_ADC_ConfigChannel>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001a7c:	f000 fd72 	bl	8002564 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  ADC1->CR1 |=  (1<<5);		// EOCIE=1: Interrupt enable for EOC
 8001a80:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <MX_ADC1_Init+0xd4>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	4a07      	ldr	r2, [pc, #28]	; (8001aa4 <MX_ADC1_Init+0xd4>)
 8001a86:	f043 0320 	orr.w	r3, r3, #32
 8001a8a:	6053      	str	r3, [r2, #4]
  NVIC->ISER[0] |= (1<<18);	// Enable ADC global Interrupt             ?��링파?��?��?�� 추�?
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <MX_ADC1_Init+0xd8>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a05      	ldr	r2, [pc, #20]	; (8001aa8 <MX_ADC1_Init+0xd8>)
 8001a92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a96:	6013      	str	r3, [r2, #0]

  //HAL_ADC_Start_DMA(&hadc1, &ADC1_value,2);
  // HAL_ADC_Start_DMA(&hadc1, &ADC1_value[1], 1);
  /* USER CODE END ADC1_Init 2 */

}
 8001a98:	bf00      	nop
 8001a9a:	3710      	adds	r7, #16
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20000558 	.word	0x20000558
 8001aa4:	40012000 	.word	0x40012000
 8001aa8:	e000e100 	.word	0xe000e100

08001aac <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001ab0:	4b1f      	ldr	r3, [pc, #124]	; (8001b30 <MX_ETH_Init+0x84>)
 8001ab2:	4a20      	ldr	r2, [pc, #128]	; (8001b34 <MX_ETH_Init+0x88>)
 8001ab4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001ab6:	4b20      	ldr	r3, [pc, #128]	; (8001b38 <MX_ETH_Init+0x8c>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001abc:	4b1e      	ldr	r3, [pc, #120]	; (8001b38 <MX_ETH_Init+0x8c>)
 8001abe:	2280      	movs	r2, #128	; 0x80
 8001ac0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001ac2:	4b1d      	ldr	r3, [pc, #116]	; (8001b38 <MX_ETH_Init+0x8c>)
 8001ac4:	22e1      	movs	r2, #225	; 0xe1
 8001ac6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001ac8:	4b1b      	ldr	r3, [pc, #108]	; (8001b38 <MX_ETH_Init+0x8c>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001ace:	4b1a      	ldr	r3, [pc, #104]	; (8001b38 <MX_ETH_Init+0x8c>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001ad4:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <MX_ETH_Init+0x8c>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001ada:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <MX_ETH_Init+0x84>)
 8001adc:	4a16      	ldr	r2, [pc, #88]	; (8001b38 <MX_ETH_Init+0x8c>)
 8001ade:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001ae0:	4b13      	ldr	r3, [pc, #76]	; (8001b30 <MX_ETH_Init+0x84>)
 8001ae2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001ae6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001ae8:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <MX_ETH_Init+0x84>)
 8001aea:	4a14      	ldr	r2, [pc, #80]	; (8001b3c <MX_ETH_Init+0x90>)
 8001aec:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001aee:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <MX_ETH_Init+0x84>)
 8001af0:	4a13      	ldr	r2, [pc, #76]	; (8001b40 <MX_ETH_Init+0x94>)
 8001af2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001af4:	4b0e      	ldr	r3, [pc, #56]	; (8001b30 <MX_ETH_Init+0x84>)
 8001af6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001afa:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001afc:	480c      	ldr	r0, [pc, #48]	; (8001b30 <MX_ETH_Init+0x84>)
 8001afe:	f002 ffb1 	bl	8004a64 <HAL_ETH_Init>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001b08:	f000 fd2c 	bl	8002564 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001b0c:	2238      	movs	r2, #56	; 0x38
 8001b0e:	2100      	movs	r1, #0
 8001b10:	480c      	ldr	r0, [pc, #48]	; (8001b44 <MX_ETH_Init+0x98>)
 8001b12:	f007 fe70 	bl	80097f6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001b16:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <MX_ETH_Init+0x98>)
 8001b18:	2221      	movs	r2, #33	; 0x21
 8001b1a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001b1c:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <MX_ETH_Init+0x98>)
 8001b1e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001b22:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001b24:	4b07      	ldr	r3, [pc, #28]	; (8001b44 <MX_ETH_Init+0x98>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000600 	.word	0x20000600
 8001b34:	40028000 	.word	0x40028000
 8001b38:	20000e8c 	.word	0x20000e8c
 8001b3c:	200004b8 	.word	0x200004b8
 8001b40:	20000418 	.word	0x20000418
 8001b44:	200003e0 	.word	0x200003e0

08001b48 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b4e:	f107 0308 	add.w	r3, r7, #8
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	605a      	str	r2, [r3, #4]
 8001b58:	609a      	str	r2, [r3, #8]
 8001b5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b5c:	463b      	mov	r3, r7
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b64:	4b1e      	ldr	r3, [pc, #120]	; (8001be0 <MX_TIM1_Init+0x98>)
 8001b66:	4a1f      	ldr	r2, [pc, #124]	; (8001be4 <MX_TIM1_Init+0x9c>)
 8001b68:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001b6a:	4b1d      	ldr	r3, [pc, #116]	; (8001be0 <MX_TIM1_Init+0x98>)
 8001b6c:	2253      	movs	r2, #83	; 0x53
 8001b6e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b70:	4b1b      	ldr	r3, [pc, #108]	; (8001be0 <MX_TIM1_Init+0x98>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001b76:	4b1a      	ldr	r3, [pc, #104]	; (8001be0 <MX_TIM1_Init+0x98>)
 8001b78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b7c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b7e:	4b18      	ldr	r3, [pc, #96]	; (8001be0 <MX_TIM1_Init+0x98>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b84:	4b16      	ldr	r3, [pc, #88]	; (8001be0 <MX_TIM1_Init+0x98>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b8a:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <MX_TIM1_Init+0x98>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b90:	4813      	ldr	r0, [pc, #76]	; (8001be0 <MX_TIM1_Init+0x98>)
 8001b92:	f004 fa13 	bl	8005fbc <HAL_TIM_Base_Init>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001b9c:	f000 fce2 	bl	8002564 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ba0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ba4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ba6:	f107 0308 	add.w	r3, r7, #8
 8001baa:	4619      	mov	r1, r3
 8001bac:	480c      	ldr	r0, [pc, #48]	; (8001be0 <MX_TIM1_Init+0x98>)
 8001bae:	f005 f837 	bl	8006c20 <HAL_TIM_ConfigClockSource>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001bb8:	f000 fcd4 	bl	8002564 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bc4:	463b      	mov	r3, r7
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4805      	ldr	r0, [pc, #20]	; (8001be0 <MX_TIM1_Init+0x98>)
 8001bca:	f005 fc3f 	bl	800744c <HAL_TIMEx_MasterConfigSynchronization>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001bd4:	f000 fcc6 	bl	8002564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001bd8:	bf00      	nop
 8001bda:	3718      	adds	r7, #24
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	200006b0 	.word	0x200006b0
 8001be4:	40010000 	.word	0x40010000

08001be8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08c      	sub	sp, #48	; 0x30
 8001bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bee:	f107 030c 	add.w	r3, r7, #12
 8001bf2:	2224      	movs	r2, #36	; 0x24
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f007 fdfd 	bl	80097f6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bfc:	1d3b      	adds	r3, r7, #4
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c04:	4b23      	ldr	r3, [pc, #140]	; (8001c94 <MX_TIM2_Init+0xac>)
 8001c06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 340;
 8001c0c:	4b21      	ldr	r3, [pc, #132]	; (8001c94 <MX_TIM2_Init+0xac>)
 8001c0e:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8001c12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c14:	4b1f      	ldr	r3, [pc, #124]	; (8001c94 <MX_TIM2_Init+0xac>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65000;
 8001c1a:	4b1e      	ldr	r3, [pc, #120]	; (8001c94 <MX_TIM2_Init+0xac>)
 8001c1c:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001c20:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c22:	4b1c      	ldr	r3, [pc, #112]	; (8001c94 <MX_TIM2_Init+0xac>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c28:	4b1a      	ldr	r3, [pc, #104]	; (8001c94 <MX_TIM2_Init+0xac>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c32:	2300      	movs	r3, #0
 8001c34:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c36:	2301      	movs	r3, #1
 8001c38:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c42:	2300      	movs	r3, #0
 8001c44:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c46:	2301      	movs	r3, #1
 8001c48:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001c52:	f107 030c 	add.w	r3, r7, #12
 8001c56:	4619      	mov	r1, r3
 8001c58:	480e      	ldr	r0, [pc, #56]	; (8001c94 <MX_TIM2_Init+0xac>)
 8001c5a:	f004 fc9f 	bl	800659c <HAL_TIM_Encoder_Init>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001c64:	f000 fc7e 	bl	8002564 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c70:	1d3b      	adds	r3, r7, #4
 8001c72:	4619      	mov	r1, r3
 8001c74:	4807      	ldr	r0, [pc, #28]	; (8001c94 <MX_TIM2_Init+0xac>)
 8001c76:	f005 fbe9 	bl	800744c <HAL_TIMEx_MasterConfigSynchronization>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001c80:	f000 fc70 	bl	8002564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001c84:	213c      	movs	r1, #60	; 0x3c
 8001c86:	4803      	ldr	r0, [pc, #12]	; (8001c94 <MX_TIM2_Init+0xac>)
 8001c88:	f004 fd2e 	bl	80066e8 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM2_Init 2 */

}
 8001c8c:	bf00      	nop
 8001c8e:	3730      	adds	r7, #48	; 0x30
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	200006f8 	.word	0x200006f8

08001c98 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b08e      	sub	sp, #56	; 0x38
 8001c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	605a      	str	r2, [r3, #4]
 8001ca8:	609a      	str	r2, [r3, #8]
 8001caa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cac:	f107 0320 	add.w	r3, r7, #32
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cb6:	1d3b      	adds	r3, r7, #4
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]
 8001cc4:	615a      	str	r2, [r3, #20]
 8001cc6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cc8:	4b48      	ldr	r3, [pc, #288]	; (8001dec <MX_TIM3_Init+0x154>)
 8001cca:	4a49      	ldr	r2, [pc, #292]	; (8001df0 <MX_TIM3_Init+0x158>)
 8001ccc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 840-1;
 8001cce:	4b47      	ldr	r3, [pc, #284]	; (8001dec <MX_TIM3_Init+0x154>)
 8001cd0:	f240 3247 	movw	r2, #839	; 0x347
 8001cd4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cd6:	4b45      	ldr	r3, [pc, #276]	; (8001dec <MX_TIM3_Init+0x154>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001cdc:	4b43      	ldr	r3, [pc, #268]	; (8001dec <MX_TIM3_Init+0x154>)
 8001cde:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ce2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ce4:	4b41      	ldr	r3, [pc, #260]	; (8001dec <MX_TIM3_Init+0x154>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cea:	4b40      	ldr	r3, [pc, #256]	; (8001dec <MX_TIM3_Init+0x154>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001cf0:	483e      	ldr	r0, [pc, #248]	; (8001dec <MX_TIM3_Init+0x154>)
 8001cf2:	f004 f963 	bl	8005fbc <HAL_TIM_Base_Init>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001cfc:	f000 fc32 	bl	8002564 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d04:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4837      	ldr	r0, [pc, #220]	; (8001dec <MX_TIM3_Init+0x154>)
 8001d0e:	f004 ff87 	bl	8006c20 <HAL_TIM_ConfigClockSource>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001d18:	f000 fc24 	bl	8002564 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d1c:	4833      	ldr	r0, [pc, #204]	; (8001dec <MX_TIM3_Init+0x154>)
 8001d1e:	f004 face 	bl	80062be <HAL_TIM_PWM_Init>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001d28:	f000 fc1c 	bl	8002564 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d30:	2300      	movs	r3, #0
 8001d32:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d34:	f107 0320 	add.w	r3, r7, #32
 8001d38:	4619      	mov	r1, r3
 8001d3a:	482c      	ldr	r0, [pc, #176]	; (8001dec <MX_TIM3_Init+0x154>)
 8001d3c:	f005 fb86 	bl	800744c <HAL_TIMEx_MasterConfigSynchronization>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001d46:	f000 fc0d 	bl	8002564 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d4a:	2360      	movs	r3, #96	; 0x60
 8001d4c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8001d4e:	2364      	movs	r3, #100	; 0x64
 8001d50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d52:	2300      	movs	r3, #0
 8001d54:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d5a:	1d3b      	adds	r3, r7, #4
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4822      	ldr	r0, [pc, #136]	; (8001dec <MX_TIM3_Init+0x154>)
 8001d62:	f004 fe9b 	bl	8006a9c <HAL_TIM_PWM_ConfigChannel>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001d6c:	f000 fbfa 	bl	8002564 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 8001d70:	4b1e      	ldr	r3, [pc, #120]	; (8001dec <MX_TIM3_Init+0x154>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	699a      	ldr	r2, [r3, #24]
 8001d76:	4b1d      	ldr	r3, [pc, #116]	; (8001dec <MX_TIM3_Init+0x154>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f022 0208 	bic.w	r2, r2, #8
 8001d7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d80:	1d3b      	adds	r3, r7, #4
 8001d82:	2204      	movs	r2, #4
 8001d84:	4619      	mov	r1, r3
 8001d86:	4819      	ldr	r0, [pc, #100]	; (8001dec <MX_TIM3_Init+0x154>)
 8001d88:	f004 fe88 	bl	8006a9c <HAL_TIM_PWM_ConfigChannel>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_TIM3_Init+0xfe>
  {
    Error_Handler();
 8001d92:	f000 fbe7 	bl	8002564 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_2);
 8001d96:	4b15      	ldr	r3, [pc, #84]	; (8001dec <MX_TIM3_Init+0x154>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	699a      	ldr	r2, [r3, #24]
 8001d9c:	4b13      	ldr	r3, [pc, #76]	; (8001dec <MX_TIM3_Init+0x154>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001da4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM3_Init 2 */
  TIM3->DIER |= (1<<1);   // CC1IE: Enable the Tim3 CC1 interrupt
 8001da6:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <MX_TIM3_Init+0x158>)
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	4a11      	ldr	r2, [pc, #68]	; (8001df0 <MX_TIM3_Init+0x158>)
 8001dac:	f043 0302 	orr.w	r3, r3, #2
 8001db0:	60d3      	str	r3, [r2, #12]
   NVIC->ISER[0] |= (1<<29); // TIM3_CC
 8001db2:	4b10      	ldr	r3, [pc, #64]	; (8001df4 <MX_TIM3_Init+0x15c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a0f      	ldr	r2, [pc, #60]	; (8001df4 <MX_TIM3_Init+0x15c>)
 8001db8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001dbc:	6013      	str	r3, [r2, #0]
   TIM3->CCER	|= (1<<0);	// CC1E=1: OC1(TIM5_CH1) Active(Capture/Compare 1 output enable)
 8001dbe:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <MX_TIM3_Init+0x158>)
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	4a0b      	ldr	r2, [pc, #44]	; (8001df0 <MX_TIM3_Init+0x158>)
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	6213      	str	r3, [r2, #32]
    					// ?��?��??(40�?????????????????????????????????)?�� ?��?�� ?��?��출력
   TIM3->CR1	|= (1<<0);	// CEN: Counter TIM3 enable
 8001dca:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <MX_TIM3_Init+0x158>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a08      	ldr	r2, [pc, #32]	; (8001df0 <MX_TIM3_Init+0x158>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6013      	str	r3, [r2, #0]

  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	4804      	ldr	r0, [pc, #16]	; (8001dec <MX_TIM3_Init+0x154>)
 8001dda:	f004 fac9 	bl	8006370 <HAL_TIM_PWM_Start_IT>

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001dde:	4803      	ldr	r0, [pc, #12]	; (8001dec <MX_TIM3_Init+0x154>)
 8001de0:	f000 fee2 	bl	8002ba8 <HAL_TIM_MspPostInit>

}
 8001de4:	bf00      	nop
 8001de6:	3738      	adds	r7, #56	; 0x38
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20000740 	.word	0x20000740
 8001df0:	40000400 	.word	0x40000400
 8001df4:	e000e100 	.word	0xe000e100

08001df8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08c      	sub	sp, #48	; 0x30
 8001dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001dfe:	f107 030c 	add.w	r3, r7, #12
 8001e02:	2224      	movs	r2, #36	; 0x24
 8001e04:	2100      	movs	r1, #0
 8001e06:	4618      	mov	r0, r3
 8001e08:	f007 fcf5 	bl	80097f6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e0c:	1d3b      	adds	r3, r7, #4
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e14:	4b23      	ldr	r3, [pc, #140]	; (8001ea4 <MX_TIM4_Init+0xac>)
 8001e16:	4a24      	ldr	r2, [pc, #144]	; (8001ea8 <MX_TIM4_Init+0xb0>)
 8001e18:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 340;
 8001e1a:	4b22      	ldr	r3, [pc, #136]	; (8001ea4 <MX_TIM4_Init+0xac>)
 8001e1c:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8001e20:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e22:	4b20      	ldr	r3, [pc, #128]	; (8001ea4 <MX_TIM4_Init+0xac>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65000;
 8001e28:	4b1e      	ldr	r3, [pc, #120]	; (8001ea4 <MX_TIM4_Init+0xac>)
 8001e2a:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001e2e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e30:	4b1c      	ldr	r3, [pc, #112]	; (8001ea4 <MX_TIM4_Init+0xac>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e36:	4b1b      	ldr	r3, [pc, #108]	; (8001ea4 <MX_TIM4_Init+0xac>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e40:	2300      	movs	r3, #0
 8001e42:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e44:	2301      	movs	r3, #1
 8001e46:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e50:	2300      	movs	r3, #0
 8001e52:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e54:	2301      	movs	r3, #1
 8001e56:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001e60:	f107 030c 	add.w	r3, r7, #12
 8001e64:	4619      	mov	r1, r3
 8001e66:	480f      	ldr	r0, [pc, #60]	; (8001ea4 <MX_TIM4_Init+0xac>)
 8001e68:	f004 fb98 	bl	800659c <HAL_TIM_Encoder_Init>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001e72:	f000 fb77 	bl	8002564 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e76:	2300      	movs	r3, #0
 8001e78:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e7e:	1d3b      	adds	r3, r7, #4
 8001e80:	4619      	mov	r1, r3
 8001e82:	4808      	ldr	r0, [pc, #32]	; (8001ea4 <MX_TIM4_Init+0xac>)
 8001e84:	f005 fae2 	bl	800744c <HAL_TIMEx_MasterConfigSynchronization>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001e8e:	f000 fb69 	bl	8002564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001e92:	213c      	movs	r1, #60	; 0x3c
 8001e94:	4803      	ldr	r0, [pc, #12]	; (8001ea4 <MX_TIM4_Init+0xac>)
 8001e96:	f004 fc27 	bl	80066e8 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM4_Init 2 */

}
 8001e9a:	bf00      	nop
 8001e9c:	3730      	adds	r7, #48	; 0x30
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20000788 	.word	0x20000788
 8001ea8:	40000800 	.word	0x40000800

08001eac <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eb2:	463b      	mov	r3, r7
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001eba:	4b16      	ldr	r3, [pc, #88]	; (8001f14 <MX_TIM6_Init+0x68>)
 8001ebc:	4a16      	ldr	r2, [pc, #88]	; (8001f18 <MX_TIM6_Init+0x6c>)
 8001ebe:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 8001ec0:	4b14      	ldr	r3, [pc, #80]	; (8001f14 <MX_TIM6_Init+0x68>)
 8001ec2:	2253      	movs	r2, #83	; 0x53
 8001ec4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ec6:	4b13      	ldr	r3, [pc, #76]	; (8001f14 <MX_TIM6_Init+0x68>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 8001ecc:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <MX_TIM6_Init+0x68>)
 8001ece:	2263      	movs	r2, #99	; 0x63
 8001ed0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ed2:	4b10      	ldr	r3, [pc, #64]	; (8001f14 <MX_TIM6_Init+0x68>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001ed8:	480e      	ldr	r0, [pc, #56]	; (8001f14 <MX_TIM6_Init+0x68>)
 8001eda:	f004 f86f 	bl	8005fbc <HAL_TIM_Base_Init>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8001ee4:	f000 fb3e 	bl	8002564 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eec:	2300      	movs	r3, #0
 8001eee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001ef0:	463b      	mov	r3, r7
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4807      	ldr	r0, [pc, #28]	; (8001f14 <MX_TIM6_Init+0x68>)
 8001ef6:	f005 faa9 	bl	800744c <HAL_TIMEx_MasterConfigSynchronization>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8001f00:	f000 fb30 	bl	8002564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8001f04:	4803      	ldr	r0, [pc, #12]	; (8001f14 <MX_TIM6_Init+0x68>)
 8001f06:	f004 f911 	bl	800612c <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM6_Init 2 */

}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	200007d0 	.word	0x200007d0
 8001f18:	40001000 	.word	0x40001000

08001f1c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f22:	463b      	mov	r3, r7
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001f2a:	4b16      	ldr	r3, [pc, #88]	; (8001f84 <MX_TIM7_Init+0x68>)
 8001f2c:	4a16      	ldr	r2, [pc, #88]	; (8001f88 <MX_TIM7_Init+0x6c>)
 8001f2e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 84-1;
 8001f30:	4b14      	ldr	r3, [pc, #80]	; (8001f84 <MX_TIM7_Init+0x68>)
 8001f32:	2253      	movs	r2, #83	; 0x53
 8001f34:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f36:	4b13      	ldr	r3, [pc, #76]	; (8001f84 <MX_TIM7_Init+0x68>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8001f3c:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <MX_TIM7_Init+0x68>)
 8001f3e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f42:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f44:	4b0f      	ldr	r3, [pc, #60]	; (8001f84 <MX_TIM7_Init+0x68>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001f4a:	480e      	ldr	r0, [pc, #56]	; (8001f84 <MX_TIM7_Init+0x68>)
 8001f4c:	f004 f836 	bl	8005fbc <HAL_TIM_Base_Init>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001f56:	f000 fb05 	bl	8002564 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001f62:	463b      	mov	r3, r7
 8001f64:	4619      	mov	r1, r3
 8001f66:	4807      	ldr	r0, [pc, #28]	; (8001f84 <MX_TIM7_Init+0x68>)
 8001f68:	f005 fa70 	bl	800744c <HAL_TIMEx_MasterConfigSynchronization>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001f72:	f000 faf7 	bl	8002564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  HAL_TIM_Base_Start(&htim7);
 8001f76:	4803      	ldr	r0, [pc, #12]	; (8001f84 <MX_TIM7_Init+0x68>)
 8001f78:	f004 f870 	bl	800605c <HAL_TIM_Base_Start>
  /* USER CODE END TIM7_Init 2 */

}
 8001f7c:	bf00      	nop
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20000818 	.word	0x20000818
 8001f88:	40001400 	.word	0x40001400

08001f8c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b096      	sub	sp, #88	; 0x58
 8001f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f92:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	605a      	str	r2, [r3, #4]
 8001f9c:	609a      	str	r2, [r3, #8]
 8001f9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fa0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001faa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	605a      	str	r2, [r3, #4]
 8001fb4:	609a      	str	r2, [r3, #8]
 8001fb6:	60da      	str	r2, [r3, #12]
 8001fb8:	611a      	str	r2, [r3, #16]
 8001fba:	615a      	str	r2, [r3, #20]
 8001fbc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001fbe:	1d3b      	adds	r3, r7, #4
 8001fc0:	2220      	movs	r2, #32
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f007 fc16 	bl	80097f6 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001fca:	4b3e      	ldr	r3, [pc, #248]	; (80020c4 <MX_TIM8_Init+0x138>)
 8001fcc:	4a3e      	ldr	r2, [pc, #248]	; (80020c8 <MX_TIM8_Init+0x13c>)
 8001fce:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 840-1;
 8001fd0:	4b3c      	ldr	r3, [pc, #240]	; (80020c4 <MX_TIM8_Init+0x138>)
 8001fd2:	f240 3247 	movw	r2, #839	; 0x347
 8001fd6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fd8:	4b3a      	ldr	r3, [pc, #232]	; (80020c4 <MX_TIM8_Init+0x138>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 50-1;
 8001fde:	4b39      	ldr	r3, [pc, #228]	; (80020c4 <MX_TIM8_Init+0x138>)
 8001fe0:	2231      	movs	r2, #49	; 0x31
 8001fe2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fe4:	4b37      	ldr	r3, [pc, #220]	; (80020c4 <MX_TIM8_Init+0x138>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001fea:	4b36      	ldr	r3, [pc, #216]	; (80020c4 <MX_TIM8_Init+0x138>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ff0:	4b34      	ldr	r3, [pc, #208]	; (80020c4 <MX_TIM8_Init+0x138>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001ff6:	4833      	ldr	r0, [pc, #204]	; (80020c4 <MX_TIM8_Init+0x138>)
 8001ff8:	f003 ffe0 	bl	8005fbc <HAL_TIM_Base_Init>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8002002:	f000 faaf 	bl	8002564 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002006:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800200a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800200c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002010:	4619      	mov	r1, r3
 8002012:	482c      	ldr	r0, [pc, #176]	; (80020c4 <MX_TIM8_Init+0x138>)
 8002014:	f004 fe04 	bl	8006c20 <HAL_TIM_ConfigClockSource>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800201e:	f000 faa1 	bl	8002564 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8002022:	4828      	ldr	r0, [pc, #160]	; (80020c4 <MX_TIM8_Init+0x138>)
 8002024:	f004 f8f2 	bl	800620c <HAL_TIM_OC_Init>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800202e:	f000 fa99 	bl	8002564 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002032:	2320      	movs	r3, #32
 8002034:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002036:	2300      	movs	r3, #0
 8002038:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800203a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800203e:	4619      	mov	r1, r3
 8002040:	4820      	ldr	r0, [pc, #128]	; (80020c4 <MX_TIM8_Init+0x138>)
 8002042:	f005 fa03 	bl	800744c <HAL_TIMEx_MasterConfigSynchronization>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 800204c:	f000 fa8a 	bl	8002564 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002050:	2300      	movs	r3, #0
 8002052:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2000;
 8002054:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002058:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800205a:	2300      	movs	r3, #0
 800205c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800205e:	2300      	movs	r3, #0
 8002060:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002062:	2300      	movs	r3, #0
 8002064:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002066:	2300      	movs	r3, #0
 8002068:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800206a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800206e:	220c      	movs	r2, #12
 8002070:	4619      	mov	r1, r3
 8002072:	4814      	ldr	r0, [pc, #80]	; (80020c4 <MX_TIM8_Init+0x138>)
 8002074:	f004 fcb6 	bl	80069e4 <HAL_TIM_OC_ConfigChannel>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 800207e:	f000 fa71 	bl	8002564 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002082:	2300      	movs	r3, #0
 8002084:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002086:	2300      	movs	r3, #0
 8002088:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800208a:	2300      	movs	r3, #0
 800208c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800208e:	2300      	movs	r3, #0
 8002090:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002092:	2300      	movs	r3, #0
 8002094:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002096:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800209a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800209c:	2300      	movs	r3, #0
 800209e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80020a0:	1d3b      	adds	r3, r7, #4
 80020a2:	4619      	mov	r1, r3
 80020a4:	4807      	ldr	r0, [pc, #28]	; (80020c4 <MX_TIM8_Init+0x138>)
 80020a6:	f005 fa4d 	bl	8007544 <HAL_TIMEx_ConfigBreakDeadTime>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 80020b0:	f000 fa58 	bl	8002564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */
  HAL_TIM_Base_Start_IT(&htim8);
 80020b4:	4803      	ldr	r0, [pc, #12]	; (80020c4 <MX_TIM8_Init+0x138>)
 80020b6:	f004 f839 	bl	800612c <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM8_Init 2 */

}
 80020ba:	bf00      	nop
 80020bc:	3758      	adds	r7, #88	; 0x58
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000860 	.word	0x20000860
 80020c8:	40010400 	.word	0x40010400

080020cc <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b088      	sub	sp, #32
 80020d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80020d2:	1d3b      	adds	r3, r7, #4
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	60da      	str	r2, [r3, #12]
 80020de:	611a      	str	r2, [r3, #16]
 80020e0:	615a      	str	r2, [r3, #20]
 80020e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80020e4:	4b1f      	ldr	r3, [pc, #124]	; (8002164 <MX_TIM13_Init+0x98>)
 80020e6:	4a20      	ldr	r2, [pc, #128]	; (8002168 <MX_TIM13_Init+0x9c>)
 80020e8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 21-1;
 80020ea:	4b1e      	ldr	r3, [pc, #120]	; (8002164 <MX_TIM13_Init+0x98>)
 80020ec:	2214      	movs	r2, #20
 80020ee:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020f0:	4b1c      	ldr	r3, [pc, #112]	; (8002164 <MX_TIM13_Init+0x98>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 80020f6:	4b1b      	ldr	r3, [pc, #108]	; (8002164 <MX_TIM13_Init+0x98>)
 80020f8:	2263      	movs	r2, #99	; 0x63
 80020fa:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020fc:	4b19      	ldr	r3, [pc, #100]	; (8002164 <MX_TIM13_Init+0x98>)
 80020fe:	2200      	movs	r2, #0
 8002100:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002102:	4b18      	ldr	r3, [pc, #96]	; (8002164 <MX_TIM13_Init+0x98>)
 8002104:	2200      	movs	r2, #0
 8002106:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002108:	4816      	ldr	r0, [pc, #88]	; (8002164 <MX_TIM13_Init+0x98>)
 800210a:	f003 ff57 	bl	8005fbc <HAL_TIM_Base_Init>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <MX_TIM13_Init+0x4c>
  {
    Error_Handler();
 8002114:	f000 fa26 	bl	8002564 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8002118:	4812      	ldr	r0, [pc, #72]	; (8002164 <MX_TIM13_Init+0x98>)
 800211a:	f004 f8d0 	bl	80062be <HAL_TIM_PWM_Init>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_TIM13_Init+0x5c>
  {
    Error_Handler();
 8002124:	f000 fa1e 	bl	8002564 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002128:	2360      	movs	r3, #96	; 0x60
 800212a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 800212c:	2332      	movs	r3, #50	; 0x32
 800212e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002130:	2300      	movs	r3, #0
 8002132:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002138:	1d3b      	adds	r3, r7, #4
 800213a:	2200      	movs	r2, #0
 800213c:	4619      	mov	r1, r3
 800213e:	4809      	ldr	r0, [pc, #36]	; (8002164 <MX_TIM13_Init+0x98>)
 8002140:	f004 fcac 	bl	8006a9c <HAL_TIM_PWM_ConfigChannel>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <MX_TIM13_Init+0x82>
  {
    Error_Handler();
 800214a:	f000 fa0b 	bl	8002564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 800214e:	4805      	ldr	r0, [pc, #20]	; (8002164 <MX_TIM13_Init+0x98>)
 8002150:	f000 fd2a 	bl	8002ba8 <HAL_TIM_MspPostInit>
  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002154:	4803      	ldr	r0, [pc, #12]	; (8002164 <MX_TIM13_Init+0x98>)
 8002156:	f000 fd27 	bl	8002ba8 <HAL_TIM_MspPostInit>

}
 800215a:	bf00      	nop
 800215c:	3720      	adds	r7, #32
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	200008a8 	.word	0x200008a8
 8002168:	40001c00 	.word	0x40001c00

0800216c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002170:	4b17      	ldr	r3, [pc, #92]	; (80021d0 <MX_TIM14_Init+0x64>)
 8002172:	4a18      	ldr	r2, [pc, #96]	; (80021d4 <MX_TIM14_Init+0x68>)
 8002174:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8400-1;
 8002176:	4b16      	ldr	r3, [pc, #88]	; (80021d0 <MX_TIM14_Init+0x64>)
 8002178:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800217c:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800217e:	4b14      	ldr	r3, [pc, #80]	; (80021d0 <MX_TIM14_Init+0x64>)
 8002180:	2200      	movs	r2, #0
 8002182:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 100-1;
 8002184:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <MX_TIM14_Init+0x64>)
 8002186:	2263      	movs	r2, #99	; 0x63
 8002188:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800218a:	4b11      	ldr	r3, [pc, #68]	; (80021d0 <MX_TIM14_Init+0x64>)
 800218c:	2200      	movs	r2, #0
 800218e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002190:	4b0f      	ldr	r3, [pc, #60]	; (80021d0 <MX_TIM14_Init+0x64>)
 8002192:	2200      	movs	r2, #0
 8002194:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002196:	480e      	ldr	r0, [pc, #56]	; (80021d0 <MX_TIM14_Init+0x64>)
 8002198:	f003 ff10 	bl	8005fbc <HAL_TIM_Base_Init>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 80021a2:	f000 f9df 	bl	8002564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */
  TIM14->DIER |= (1<<0);   // CC1IE: Enable the Tim14 UG interrupt
 80021a6:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <MX_TIM14_Init+0x68>)
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	4a0a      	ldr	r2, [pc, #40]	; (80021d4 <MX_TIM14_Init+0x68>)
 80021ac:	f043 0301 	orr.w	r3, r3, #1
 80021b0:	60d3      	str	r3, [r2, #12]
   NVIC->ISER[1] |= (1<<(45-32)); // TIM14_CC
 80021b2:	4b09      	ldr	r3, [pc, #36]	; (80021d8 <MX_TIM14_Init+0x6c>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	4a08      	ldr	r2, [pc, #32]	; (80021d8 <MX_TIM14_Init+0x6c>)
 80021b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021bc:	6053      	str	r3, [r2, #4]

   TIM14->CR1	|= (1<<0);	// CEN: Counter TIM14 enable
 80021be:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <MX_TIM14_Init+0x68>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a04      	ldr	r2, [pc, #16]	; (80021d4 <MX_TIM14_Init+0x68>)
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM14_Init 2 */

}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	200008f0 	.word	0x200008f0
 80021d4:	40002000 	.word	0x40002000
 80021d8:	e000e100 	.word	0xe000e100

080021dc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80021e0:	4b11      	ldr	r3, [pc, #68]	; (8002228 <MX_UART4_Init+0x4c>)
 80021e2:	4a12      	ldr	r2, [pc, #72]	; (800222c <MX_UART4_Init+0x50>)
 80021e4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80021e6:	4b10      	ldr	r3, [pc, #64]	; (8002228 <MX_UART4_Init+0x4c>)
 80021e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021ec:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80021ee:	4b0e      	ldr	r3, [pc, #56]	; (8002228 <MX_UART4_Init+0x4c>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80021f4:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <MX_UART4_Init+0x4c>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 80021fa:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <MX_UART4_Init+0x4c>)
 80021fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002200:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002202:	4b09      	ldr	r3, [pc, #36]	; (8002228 <MX_UART4_Init+0x4c>)
 8002204:	220c      	movs	r2, #12
 8002206:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002208:	4b07      	ldr	r3, [pc, #28]	; (8002228 <MX_UART4_Init+0x4c>)
 800220a:	2200      	movs	r2, #0
 800220c:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800220e:	4b06      	ldr	r3, [pc, #24]	; (8002228 <MX_UART4_Init+0x4c>)
 8002210:	2200      	movs	r2, #0
 8002212:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002214:	4804      	ldr	r0, [pc, #16]	; (8002228 <MX_UART4_Init+0x4c>)
 8002216:	f005 f9fb 	bl	8007610 <HAL_UART_Init>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <MX_UART4_Init+0x48>
  {
    Error_Handler();
 8002220:	f000 f9a0 	bl	8002564 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002224:	bf00      	nop
 8002226:	bd80      	pop	{r7, pc}
 8002228:	2000034c 	.word	0x2000034c
 800222c:	40004c00 	.word	0x40004c00

08002230 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002234:	4b11      	ldr	r3, [pc, #68]	; (800227c <MX_USART3_UART_Init+0x4c>)
 8002236:	4a12      	ldr	r2, [pc, #72]	; (8002280 <MX_USART3_UART_Init+0x50>)
 8002238:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800223a:	4b10      	ldr	r3, [pc, #64]	; (800227c <MX_USART3_UART_Init+0x4c>)
 800223c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002240:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002242:	4b0e      	ldr	r3, [pc, #56]	; (800227c <MX_USART3_UART_Init+0x4c>)
 8002244:	2200      	movs	r2, #0
 8002246:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002248:	4b0c      	ldr	r3, [pc, #48]	; (800227c <MX_USART3_UART_Init+0x4c>)
 800224a:	2200      	movs	r2, #0
 800224c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800224e:	4b0b      	ldr	r3, [pc, #44]	; (800227c <MX_USART3_UART_Init+0x4c>)
 8002250:	2200      	movs	r2, #0
 8002252:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002254:	4b09      	ldr	r3, [pc, #36]	; (800227c <MX_USART3_UART_Init+0x4c>)
 8002256:	220c      	movs	r2, #12
 8002258:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800225a:	4b08      	ldr	r3, [pc, #32]	; (800227c <MX_USART3_UART_Init+0x4c>)
 800225c:	2200      	movs	r2, #0
 800225e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002260:	4b06      	ldr	r3, [pc, #24]	; (800227c <MX_USART3_UART_Init+0x4c>)
 8002262:	2200      	movs	r2, #0
 8002264:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002266:	4805      	ldr	r0, [pc, #20]	; (800227c <MX_USART3_UART_Init+0x4c>)
 8002268:	f005 f9d2 	bl	8007610 <HAL_UART_Init>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002272:	f000 f977 	bl	8002564 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	20000300 	.word	0x20000300
 8002280:	40004800 	.word	0x40004800

08002284 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002288:	4b14      	ldr	r3, [pc, #80]	; (80022dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800228a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800228e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8002290:	4b12      	ldr	r3, [pc, #72]	; (80022dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002292:	2204      	movs	r2, #4
 8002294:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002296:	4b11      	ldr	r3, [pc, #68]	; (80022dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002298:	2202      	movs	r2, #2
 800229a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800229c:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800229e:	2200      	movs	r2, #0
 80022a0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80022a2:	4b0e      	ldr	r3, [pc, #56]	; (80022dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022a4:	2202      	movs	r2, #2
 80022a6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80022a8:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022aa:	2201      	movs	r2, #1
 80022ac:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80022ae:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80022b4:	4b09      	ldr	r3, [pc, #36]	; (80022dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80022ba:	4b08      	ldr	r3, [pc, #32]	; (80022dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022bc:	2201      	movs	r2, #1
 80022be:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80022c0:	4b06      	ldr	r3, [pc, #24]	; (80022dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80022c6:	4805      	ldr	r0, [pc, #20]	; (80022dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022c8:	f003 f8d1 	bl	800546e <HAL_PCD_Init>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80022d2:	f000 f947 	bl	8002564 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20000998 	.word	0x20000998

080022e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	607b      	str	r3, [r7, #4]
 80022ea:	4b17      	ldr	r3, [pc, #92]	; (8002348 <MX_DMA_Init+0x68>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	4a16      	ldr	r2, [pc, #88]	; (8002348 <MX_DMA_Init+0x68>)
 80022f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022f4:	6313      	str	r3, [r2, #48]	; 0x30
 80022f6:	4b14      	ldr	r3, [pc, #80]	; (8002348 <MX_DMA_Init+0x68>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022fe:	607b      	str	r3, [r7, #4]
 8002300:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	603b      	str	r3, [r7, #0]
 8002306:	4b10      	ldr	r3, [pc, #64]	; (8002348 <MX_DMA_Init+0x68>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	4a0f      	ldr	r2, [pc, #60]	; (8002348 <MX_DMA_Init+0x68>)
 800230c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002310:	6313      	str	r3, [r2, #48]	; 0x30
 8002312:	4b0d      	ldr	r3, [pc, #52]	; (8002348 <MX_DMA_Init+0x68>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800231a:	603b      	str	r3, [r7, #0]
 800231c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800231e:	2200      	movs	r2, #0
 8002320:	2100      	movs	r1, #0
 8002322:	2011      	movs	r0, #17
 8002324:	f001 ff65 	bl	80041f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002328:	2011      	movs	r0, #17
 800232a:	f001 ff7e 	bl	800422a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800232e:	2200      	movs	r2, #0
 8002330:	2100      	movs	r1, #0
 8002332:	2038      	movs	r0, #56	; 0x38
 8002334:	f001 ff5d 	bl	80041f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002338:	2038      	movs	r0, #56	; 0x38
 800233a:	f001 ff76 	bl	800422a <HAL_NVIC_EnableIRQ>

}
 800233e:	bf00      	nop
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40023800 	.word	0x40023800

0800234c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b08e      	sub	sp, #56	; 0x38
 8002350:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002352:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	605a      	str	r2, [r3, #4]
 800235c:	609a      	str	r2, [r3, #8]
 800235e:	60da      	str	r2, [r3, #12]
 8002360:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002362:	2300      	movs	r3, #0
 8002364:	623b      	str	r3, [r7, #32]
 8002366:	4b79      	ldr	r3, [pc, #484]	; (800254c <MX_GPIO_Init+0x200>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	4a78      	ldr	r2, [pc, #480]	; (800254c <MX_GPIO_Init+0x200>)
 800236c:	f043 0304 	orr.w	r3, r3, #4
 8002370:	6313      	str	r3, [r2, #48]	; 0x30
 8002372:	4b76      	ldr	r3, [pc, #472]	; (800254c <MX_GPIO_Init+0x200>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	f003 0304 	and.w	r3, r3, #4
 800237a:	623b      	str	r3, [r7, #32]
 800237c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	61fb      	str	r3, [r7, #28]
 8002382:	4b72      	ldr	r3, [pc, #456]	; (800254c <MX_GPIO_Init+0x200>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	4a71      	ldr	r2, [pc, #452]	; (800254c <MX_GPIO_Init+0x200>)
 8002388:	f043 0320 	orr.w	r3, r3, #32
 800238c:	6313      	str	r3, [r2, #48]	; 0x30
 800238e:	4b6f      	ldr	r3, [pc, #444]	; (800254c <MX_GPIO_Init+0x200>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	f003 0320 	and.w	r3, r3, #32
 8002396:	61fb      	str	r3, [r7, #28]
 8002398:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	61bb      	str	r3, [r7, #24]
 800239e:	4b6b      	ldr	r3, [pc, #428]	; (800254c <MX_GPIO_Init+0x200>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	4a6a      	ldr	r2, [pc, #424]	; (800254c <MX_GPIO_Init+0x200>)
 80023a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023a8:	6313      	str	r3, [r2, #48]	; 0x30
 80023aa:	4b68      	ldr	r3, [pc, #416]	; (800254c <MX_GPIO_Init+0x200>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b2:	61bb      	str	r3, [r7, #24]
 80023b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	4b64      	ldr	r3, [pc, #400]	; (800254c <MX_GPIO_Init+0x200>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	4a63      	ldr	r2, [pc, #396]	; (800254c <MX_GPIO_Init+0x200>)
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	6313      	str	r3, [r2, #48]	; 0x30
 80023c6:	4b61      	ldr	r3, [pc, #388]	; (800254c <MX_GPIO_Init+0x200>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	617b      	str	r3, [r7, #20]
 80023d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	613b      	str	r3, [r7, #16]
 80023d6:	4b5d      	ldr	r3, [pc, #372]	; (800254c <MX_GPIO_Init+0x200>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	4a5c      	ldr	r2, [pc, #368]	; (800254c <MX_GPIO_Init+0x200>)
 80023dc:	f043 0302 	orr.w	r3, r3, #2
 80023e0:	6313      	str	r3, [r2, #48]	; 0x30
 80023e2:	4b5a      	ldr	r3, [pc, #360]	; (800254c <MX_GPIO_Init+0x200>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	613b      	str	r3, [r7, #16]
 80023ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	4b56      	ldr	r3, [pc, #344]	; (800254c <MX_GPIO_Init+0x200>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	4a55      	ldr	r2, [pc, #340]	; (800254c <MX_GPIO_Init+0x200>)
 80023f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023fc:	6313      	str	r3, [r2, #48]	; 0x30
 80023fe:	4b53      	ldr	r3, [pc, #332]	; (800254c <MX_GPIO_Init+0x200>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	60bb      	str	r3, [r7, #8]
 800240e:	4b4f      	ldr	r3, [pc, #316]	; (800254c <MX_GPIO_Init+0x200>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	4a4e      	ldr	r2, [pc, #312]	; (800254c <MX_GPIO_Init+0x200>)
 8002414:	f043 0308 	orr.w	r3, r3, #8
 8002418:	6313      	str	r3, [r2, #48]	; 0x30
 800241a:	4b4c      	ldr	r3, [pc, #304]	; (800254c <MX_GPIO_Init+0x200>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	f003 0308 	and.w	r3, r3, #8
 8002422:	60bb      	str	r3, [r7, #8]
 8002424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002426:	2300      	movs	r3, #0
 8002428:	607b      	str	r3, [r7, #4]
 800242a:	4b48      	ldr	r3, [pc, #288]	; (800254c <MX_GPIO_Init+0x200>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	4a47      	ldr	r2, [pc, #284]	; (800254c <MX_GPIO_Init+0x200>)
 8002430:	f043 0310 	orr.w	r3, r3, #16
 8002434:	6313      	str	r3, [r2, #48]	; 0x30
 8002436:	4b45      	ldr	r3, [pc, #276]	; (800254c <MX_GPIO_Init+0x200>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	f003 0310 	and.w	r3, r3, #16
 800243e:	607b      	str	r3, [r7, #4]
 8002440:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD3_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 8002442:	2200      	movs	r2, #0
 8002444:	f244 0181 	movw	r1, #16513	; 0x4081
 8002448:	4841      	ldr	r0, [pc, #260]	; (8002550 <MX_GPIO_Init+0x204>)
 800244a:	f002 fff7 	bl	800543c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800244e:	2200      	movs	r2, #0
 8002450:	2103      	movs	r1, #3
 8002452:	4840      	ldr	r0, [pc, #256]	; (8002554 <MX_GPIO_Init+0x208>)
 8002454:	f002 fff2 	bl	800543c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8002458:	2200      	movs	r2, #0
 800245a:	2180      	movs	r1, #128	; 0x80
 800245c:	483e      	ldr	r0, [pc, #248]	; (8002558 <MX_GPIO_Init+0x20c>)
 800245e:	f002 ffed 	bl	800543c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
 8002462:	2200      	movs	r2, #0
 8002464:	2101      	movs	r1, #1
 8002466:	483d      	ldr	r0, [pc, #244]	; (800255c <MX_GPIO_Init+0x210>)
 8002468:	f002 ffe8 	bl	800543c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800246c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002470:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002472:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002476:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002478:	2300      	movs	r3, #0
 800247a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800247c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002480:	4619      	mov	r1, r3
 8002482:	4837      	ldr	r0, [pc, #220]	; (8002560 <MX_GPIO_Init+0x214>)
 8002484:	f002 fe16 	bl	80050b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 LD3_Pin PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin|GPIO_PIN_7;
 8002488:	f244 0381 	movw	r3, #16513	; 0x4081
 800248c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800248e:	2301      	movs	r3, #1
 8002490:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002492:	2300      	movs	r3, #0
 8002494:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002496:	2300      	movs	r3, #0
 8002498:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800249a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800249e:	4619      	mov	r1, r3
 80024a0:	482b      	ldr	r0, [pc, #172]	; (8002550 <MX_GPIO_Init+0x204>)
 80024a2:	f002 fe07 	bl	80050b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80024a6:	2303      	movs	r3, #3
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024aa:	2301      	movs	r3, #1
 80024ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ae:	2300      	movs	r3, #0
 80024b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b2:	2300      	movs	r3, #0
 80024b4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ba:	4619      	mov	r1, r3
 80024bc:	4825      	ldr	r0, [pc, #148]	; (8002554 <MX_GPIO_Init+0x208>)
 80024be:	f002 fdf9 	bl	80050b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80024c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024c8:	2300      	movs	r3, #0
 80024ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024d4:	4619      	mov	r1, r3
 80024d6:	481e      	ldr	r0, [pc, #120]	; (8002550 <MX_GPIO_Init+0x204>)
 80024d8:	f002 fdec 	bl	80050b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80024dc:	2380      	movs	r3, #128	; 0x80
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024e0:	2300      	movs	r3, #0
 80024e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80024e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ec:	4619      	mov	r1, r3
 80024ee:	4819      	ldr	r0, [pc, #100]	; (8002554 <MX_GPIO_Init+0x208>)
 80024f0:	f002 fde0 	bl	80050b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80024f4:	2340      	movs	r3, #64	; 0x40
 80024f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024f8:	2300      	movs	r3, #0
 80024fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002500:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002504:	4619      	mov	r1, r3
 8002506:	4814      	ldr	r0, [pc, #80]	; (8002558 <MX_GPIO_Init+0x20c>)
 8002508:	f002 fdd4 	bl	80050b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800250c:	2380      	movs	r3, #128	; 0x80
 800250e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002510:	2301      	movs	r3, #1
 8002512:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002514:	2300      	movs	r3, #0
 8002516:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002518:	2300      	movs	r3, #0
 800251a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800251c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002520:	4619      	mov	r1, r3
 8002522:	480d      	ldr	r0, [pc, #52]	; (8002558 <MX_GPIO_Init+0x20c>)
 8002524:	f002 fdc6 	bl	80050b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002528:	2301      	movs	r3, #1
 800252a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800252c:	2301      	movs	r3, #1
 800252e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002530:	2300      	movs	r3, #0
 8002532:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002534:	2300      	movs	r3, #0
 8002536:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002538:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800253c:	4619      	mov	r1, r3
 800253e:	4807      	ldr	r0, [pc, #28]	; (800255c <MX_GPIO_Init+0x210>)
 8002540:	f002 fdb8 	bl	80050b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002544:	bf00      	nop
 8002546:	3738      	adds	r7, #56	; 0x38
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40023800 	.word	0x40023800
 8002550:	40020400 	.word	0x40020400
 8002554:	40021800 	.word	0x40021800
 8002558:	40020c00 	.word	0x40020c00
 800255c:	40021000 	.word	0x40021000
 8002560:	40020800 	.word	0x40020800

08002564 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002568:	b672      	cpsid	i
}
 800256a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800256c:	e7fe      	b.n	800256c <Error_Handler+0x8>
	...

08002570 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002576:	2300      	movs	r3, #0
 8002578:	607b      	str	r3, [r7, #4]
 800257a:	4b10      	ldr	r3, [pc, #64]	; (80025bc <HAL_MspInit+0x4c>)
 800257c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257e:	4a0f      	ldr	r2, [pc, #60]	; (80025bc <HAL_MspInit+0x4c>)
 8002580:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002584:	6453      	str	r3, [r2, #68]	; 0x44
 8002586:	4b0d      	ldr	r3, [pc, #52]	; (80025bc <HAL_MspInit+0x4c>)
 8002588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800258e:	607b      	str	r3, [r7, #4]
 8002590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002592:	2300      	movs	r3, #0
 8002594:	603b      	str	r3, [r7, #0]
 8002596:	4b09      	ldr	r3, [pc, #36]	; (80025bc <HAL_MspInit+0x4c>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	4a08      	ldr	r2, [pc, #32]	; (80025bc <HAL_MspInit+0x4c>)
 800259c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a0:	6413      	str	r3, [r2, #64]	; 0x40
 80025a2:	4b06      	ldr	r3, [pc, #24]	; (80025bc <HAL_MspInit+0x4c>)
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025aa:	603b      	str	r3, [r7, #0]
 80025ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	40023800 	.word	0x40023800

080025c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b08a      	sub	sp, #40	; 0x28
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c8:	f107 0314 	add.w	r3, r7, #20
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	609a      	str	r2, [r3, #8]
 80025d4:	60da      	str	r2, [r3, #12]
 80025d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a33      	ldr	r2, [pc, #204]	; (80026ac <HAL_ADC_MspInit+0xec>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d15f      	bne.n	80026a2 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80025e2:	2300      	movs	r3, #0
 80025e4:	613b      	str	r3, [r7, #16]
 80025e6:	4b32      	ldr	r3, [pc, #200]	; (80026b0 <HAL_ADC_MspInit+0xf0>)
 80025e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ea:	4a31      	ldr	r2, [pc, #196]	; (80026b0 <HAL_ADC_MspInit+0xf0>)
 80025ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f0:	6453      	str	r3, [r2, #68]	; 0x44
 80025f2:	4b2f      	ldr	r3, [pc, #188]	; (80026b0 <HAL_ADC_MspInit+0xf0>)
 80025f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fa:	613b      	str	r3, [r7, #16]
 80025fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025fe:	2300      	movs	r3, #0
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	4b2b      	ldr	r3, [pc, #172]	; (80026b0 <HAL_ADC_MspInit+0xf0>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	4a2a      	ldr	r2, [pc, #168]	; (80026b0 <HAL_ADC_MspInit+0xf0>)
 8002608:	f043 0301 	orr.w	r3, r3, #1
 800260c:	6313      	str	r3, [r2, #48]	; 0x30
 800260e:	4b28      	ldr	r3, [pc, #160]	; (80026b0 <HAL_ADC_MspInit+0xf0>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800261a:	2318      	movs	r3, #24
 800261c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800261e:	2303      	movs	r3, #3
 8002620:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002622:	2300      	movs	r3, #0
 8002624:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002626:	f107 0314 	add.w	r3, r7, #20
 800262a:	4619      	mov	r1, r3
 800262c:	4821      	ldr	r0, [pc, #132]	; (80026b4 <HAL_ADC_MspInit+0xf4>)
 800262e:	f002 fd41 	bl	80050b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002632:	4b21      	ldr	r3, [pc, #132]	; (80026b8 <HAL_ADC_MspInit+0xf8>)
 8002634:	4a21      	ldr	r2, [pc, #132]	; (80026bc <HAL_ADC_MspInit+0xfc>)
 8002636:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002638:	4b1f      	ldr	r3, [pc, #124]	; (80026b8 <HAL_ADC_MspInit+0xf8>)
 800263a:	2200      	movs	r2, #0
 800263c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800263e:	4b1e      	ldr	r3, [pc, #120]	; (80026b8 <HAL_ADC_MspInit+0xf8>)
 8002640:	2200      	movs	r2, #0
 8002642:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002644:	4b1c      	ldr	r3, [pc, #112]	; (80026b8 <HAL_ADC_MspInit+0xf8>)
 8002646:	2200      	movs	r2, #0
 8002648:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800264a:	4b1b      	ldr	r3, [pc, #108]	; (80026b8 <HAL_ADC_MspInit+0xf8>)
 800264c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002650:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002652:	4b19      	ldr	r3, [pc, #100]	; (80026b8 <HAL_ADC_MspInit+0xf8>)
 8002654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002658:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800265a:	4b17      	ldr	r3, [pc, #92]	; (80026b8 <HAL_ADC_MspInit+0xf8>)
 800265c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002660:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002662:	4b15      	ldr	r3, [pc, #84]	; (80026b8 <HAL_ADC_MspInit+0xf8>)
 8002664:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002668:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800266a:	4b13      	ldr	r3, [pc, #76]	; (80026b8 <HAL_ADC_MspInit+0xf8>)
 800266c:	2200      	movs	r2, #0
 800266e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002670:	4b11      	ldr	r3, [pc, #68]	; (80026b8 <HAL_ADC_MspInit+0xf8>)
 8002672:	2200      	movs	r2, #0
 8002674:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002676:	4810      	ldr	r0, [pc, #64]	; (80026b8 <HAL_ADC_MspInit+0xf8>)
 8002678:	f001 fdf2 	bl	8004260 <HAL_DMA_Init>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002682:	f7ff ff6f 	bl	8002564 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a0b      	ldr	r2, [pc, #44]	; (80026b8 <HAL_ADC_MspInit+0xf8>)
 800268a:	639a      	str	r2, [r3, #56]	; 0x38
 800268c:	4a0a      	ldr	r2, [pc, #40]	; (80026b8 <HAL_ADC_MspInit+0xf8>)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002692:	2200      	movs	r2, #0
 8002694:	2100      	movs	r1, #0
 8002696:	2012      	movs	r0, #18
 8002698:	f001 fdab 	bl	80041f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800269c:	2012      	movs	r0, #18
 800269e:	f001 fdc4 	bl	800422a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80026a2:	bf00      	nop
 80026a4:	3728      	adds	r7, #40	; 0x28
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	40012000 	.word	0x40012000
 80026b0:	40023800 	.word	0x40023800
 80026b4:	40020000 	.word	0x40020000
 80026b8:	200005a0 	.word	0x200005a0
 80026bc:	40026410 	.word	0x40026410

080026c0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b08e      	sub	sp, #56	; 0x38
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	605a      	str	r2, [r3, #4]
 80026d2:	609a      	str	r2, [r3, #8]
 80026d4:	60da      	str	r2, [r3, #12]
 80026d6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a55      	ldr	r2, [pc, #340]	; (8002834 <HAL_ETH_MspInit+0x174>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	f040 80a4 	bne.w	800282c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80026e4:	2300      	movs	r3, #0
 80026e6:	623b      	str	r3, [r7, #32]
 80026e8:	4b53      	ldr	r3, [pc, #332]	; (8002838 <HAL_ETH_MspInit+0x178>)
 80026ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ec:	4a52      	ldr	r2, [pc, #328]	; (8002838 <HAL_ETH_MspInit+0x178>)
 80026ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026f2:	6313      	str	r3, [r2, #48]	; 0x30
 80026f4:	4b50      	ldr	r3, [pc, #320]	; (8002838 <HAL_ETH_MspInit+0x178>)
 80026f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fc:	623b      	str	r3, [r7, #32]
 80026fe:	6a3b      	ldr	r3, [r7, #32]
 8002700:	2300      	movs	r3, #0
 8002702:	61fb      	str	r3, [r7, #28]
 8002704:	4b4c      	ldr	r3, [pc, #304]	; (8002838 <HAL_ETH_MspInit+0x178>)
 8002706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002708:	4a4b      	ldr	r2, [pc, #300]	; (8002838 <HAL_ETH_MspInit+0x178>)
 800270a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800270e:	6313      	str	r3, [r2, #48]	; 0x30
 8002710:	4b49      	ldr	r3, [pc, #292]	; (8002838 <HAL_ETH_MspInit+0x178>)
 8002712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002714:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002718:	61fb      	str	r3, [r7, #28]
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	2300      	movs	r3, #0
 800271e:	61bb      	str	r3, [r7, #24]
 8002720:	4b45      	ldr	r3, [pc, #276]	; (8002838 <HAL_ETH_MspInit+0x178>)
 8002722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002724:	4a44      	ldr	r2, [pc, #272]	; (8002838 <HAL_ETH_MspInit+0x178>)
 8002726:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800272a:	6313      	str	r3, [r2, #48]	; 0x30
 800272c:	4b42      	ldr	r3, [pc, #264]	; (8002838 <HAL_ETH_MspInit+0x178>)
 800272e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002730:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002734:	61bb      	str	r3, [r7, #24]
 8002736:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]
 800273c:	4b3e      	ldr	r3, [pc, #248]	; (8002838 <HAL_ETH_MspInit+0x178>)
 800273e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002740:	4a3d      	ldr	r2, [pc, #244]	; (8002838 <HAL_ETH_MspInit+0x178>)
 8002742:	f043 0304 	orr.w	r3, r3, #4
 8002746:	6313      	str	r3, [r2, #48]	; 0x30
 8002748:	4b3b      	ldr	r3, [pc, #236]	; (8002838 <HAL_ETH_MspInit+0x178>)
 800274a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	617b      	str	r3, [r7, #20]
 8002752:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002754:	2300      	movs	r3, #0
 8002756:	613b      	str	r3, [r7, #16]
 8002758:	4b37      	ldr	r3, [pc, #220]	; (8002838 <HAL_ETH_MspInit+0x178>)
 800275a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275c:	4a36      	ldr	r2, [pc, #216]	; (8002838 <HAL_ETH_MspInit+0x178>)
 800275e:	f043 0301 	orr.w	r3, r3, #1
 8002762:	6313      	str	r3, [r2, #48]	; 0x30
 8002764:	4b34      	ldr	r3, [pc, #208]	; (8002838 <HAL_ETH_MspInit+0x178>)
 8002766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	613b      	str	r3, [r7, #16]
 800276e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002770:	2300      	movs	r3, #0
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	4b30      	ldr	r3, [pc, #192]	; (8002838 <HAL_ETH_MspInit+0x178>)
 8002776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002778:	4a2f      	ldr	r2, [pc, #188]	; (8002838 <HAL_ETH_MspInit+0x178>)
 800277a:	f043 0302 	orr.w	r3, r3, #2
 800277e:	6313      	str	r3, [r2, #48]	; 0x30
 8002780:	4b2d      	ldr	r3, [pc, #180]	; (8002838 <HAL_ETH_MspInit+0x178>)
 8002782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	60fb      	str	r3, [r7, #12]
 800278a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800278c:	2300      	movs	r3, #0
 800278e:	60bb      	str	r3, [r7, #8]
 8002790:	4b29      	ldr	r3, [pc, #164]	; (8002838 <HAL_ETH_MspInit+0x178>)
 8002792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002794:	4a28      	ldr	r2, [pc, #160]	; (8002838 <HAL_ETH_MspInit+0x178>)
 8002796:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800279a:	6313      	str	r3, [r2, #48]	; 0x30
 800279c:	4b26      	ldr	r3, [pc, #152]	; (8002838 <HAL_ETH_MspInit+0x178>)
 800279e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a4:	60bb      	str	r3, [r7, #8]
 80027a6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80027a8:	2332      	movs	r3, #50	; 0x32
 80027aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ac:	2302      	movs	r3, #2
 80027ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b0:	2300      	movs	r3, #0
 80027b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b4:	2303      	movs	r3, #3
 80027b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80027b8:	230b      	movs	r3, #11
 80027ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027c0:	4619      	mov	r1, r3
 80027c2:	481e      	ldr	r0, [pc, #120]	; (800283c <HAL_ETH_MspInit+0x17c>)
 80027c4:	f002 fc76 	bl	80050b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80027c8:	2386      	movs	r3, #134	; 0x86
 80027ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027cc:	2302      	movs	r3, #2
 80027ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d0:	2300      	movs	r3, #0
 80027d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027d4:	2303      	movs	r3, #3
 80027d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80027d8:	230b      	movs	r3, #11
 80027da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027e0:	4619      	mov	r1, r3
 80027e2:	4817      	ldr	r0, [pc, #92]	; (8002840 <HAL_ETH_MspInit+0x180>)
 80027e4:	f002 fc66 	bl	80050b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80027e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ee:	2302      	movs	r3, #2
 80027f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f2:	2300      	movs	r3, #0
 80027f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027f6:	2303      	movs	r3, #3
 80027f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80027fa:	230b      	movs	r3, #11
 80027fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80027fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002802:	4619      	mov	r1, r3
 8002804:	480f      	ldr	r0, [pc, #60]	; (8002844 <HAL_ETH_MspInit+0x184>)
 8002806:	f002 fc55 	bl	80050b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800280a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800280e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002810:	2302      	movs	r3, #2
 8002812:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002814:	2300      	movs	r3, #0
 8002816:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002818:	2303      	movs	r3, #3
 800281a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800281c:	230b      	movs	r3, #11
 800281e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002820:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002824:	4619      	mov	r1, r3
 8002826:	4808      	ldr	r0, [pc, #32]	; (8002848 <HAL_ETH_MspInit+0x188>)
 8002828:	f002 fc44 	bl	80050b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800282c:	bf00      	nop
 800282e:	3738      	adds	r7, #56	; 0x38
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40028000 	.word	0x40028000
 8002838:	40023800 	.word	0x40023800
 800283c:	40020800 	.word	0x40020800
 8002840:	40020000 	.word	0x40020000
 8002844:	40020400 	.word	0x40020400
 8002848:	40021800 	.word	0x40021800

0800284c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b08a      	sub	sp, #40	; 0x28
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a62      	ldr	r2, [pc, #392]	; (80029e4 <HAL_TIM_Base_MspInit+0x198>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d10e      	bne.n	800287c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800285e:	2300      	movs	r3, #0
 8002860:	627b      	str	r3, [r7, #36]	; 0x24
 8002862:	4b61      	ldr	r3, [pc, #388]	; (80029e8 <HAL_TIM_Base_MspInit+0x19c>)
 8002864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002866:	4a60      	ldr	r2, [pc, #384]	; (80029e8 <HAL_TIM_Base_MspInit+0x19c>)
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	6453      	str	r3, [r2, #68]	; 0x44
 800286e:	4b5e      	ldr	r3, [pc, #376]	; (80029e8 <HAL_TIM_Base_MspInit+0x19c>)
 8002870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	627b      	str	r3, [r7, #36]	; 0x24
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800287a:	e0ae      	b.n	80029da <HAL_TIM_Base_MspInit+0x18e>
  else if(htim_base->Instance==TIM3)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a5a      	ldr	r2, [pc, #360]	; (80029ec <HAL_TIM_Base_MspInit+0x1a0>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d116      	bne.n	80028b4 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002886:	2300      	movs	r3, #0
 8002888:	623b      	str	r3, [r7, #32]
 800288a:	4b57      	ldr	r3, [pc, #348]	; (80029e8 <HAL_TIM_Base_MspInit+0x19c>)
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	4a56      	ldr	r2, [pc, #344]	; (80029e8 <HAL_TIM_Base_MspInit+0x19c>)
 8002890:	f043 0302 	orr.w	r3, r3, #2
 8002894:	6413      	str	r3, [r2, #64]	; 0x40
 8002896:	4b54      	ldr	r3, [pc, #336]	; (80029e8 <HAL_TIM_Base_MspInit+0x19c>)
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	623b      	str	r3, [r7, #32]
 80028a0:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80028a2:	2200      	movs	r2, #0
 80028a4:	2100      	movs	r1, #0
 80028a6:	201d      	movs	r0, #29
 80028a8:	f001 fca3 	bl	80041f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80028ac:	201d      	movs	r0, #29
 80028ae:	f001 fcbc 	bl	800422a <HAL_NVIC_EnableIRQ>
}
 80028b2:	e092      	b.n	80029da <HAL_TIM_Base_MspInit+0x18e>
  else if(htim_base->Instance==TIM6)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a4d      	ldr	r2, [pc, #308]	; (80029f0 <HAL_TIM_Base_MspInit+0x1a4>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d116      	bne.n	80028ec <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	61fb      	str	r3, [r7, #28]
 80028c2:	4b49      	ldr	r3, [pc, #292]	; (80029e8 <HAL_TIM_Base_MspInit+0x19c>)
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	4a48      	ldr	r2, [pc, #288]	; (80029e8 <HAL_TIM_Base_MspInit+0x19c>)
 80028c8:	f043 0310 	orr.w	r3, r3, #16
 80028cc:	6413      	str	r3, [r2, #64]	; 0x40
 80028ce:	4b46      	ldr	r3, [pc, #280]	; (80029e8 <HAL_TIM_Base_MspInit+0x19c>)
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	f003 0310 	and.w	r3, r3, #16
 80028d6:	61fb      	str	r3, [r7, #28]
 80028d8:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 80028da:	2200      	movs	r2, #0
 80028dc:	2106      	movs	r1, #6
 80028de:	2036      	movs	r0, #54	; 0x36
 80028e0:	f001 fc87 	bl	80041f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80028e4:	2036      	movs	r0, #54	; 0x36
 80028e6:	f001 fca0 	bl	800422a <HAL_NVIC_EnableIRQ>
}
 80028ea:	e076      	b.n	80029da <HAL_TIM_Base_MspInit+0x18e>
  else if(htim_base->Instance==TIM7)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a40      	ldr	r2, [pc, #256]	; (80029f4 <HAL_TIM_Base_MspInit+0x1a8>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d116      	bne.n	8002924 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	61bb      	str	r3, [r7, #24]
 80028fa:	4b3b      	ldr	r3, [pc, #236]	; (80029e8 <HAL_TIM_Base_MspInit+0x19c>)
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	4a3a      	ldr	r2, [pc, #232]	; (80029e8 <HAL_TIM_Base_MspInit+0x19c>)
 8002900:	f043 0320 	orr.w	r3, r3, #32
 8002904:	6413      	str	r3, [r2, #64]	; 0x40
 8002906:	4b38      	ldr	r3, [pc, #224]	; (80029e8 <HAL_TIM_Base_MspInit+0x19c>)
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	f003 0320 	and.w	r3, r3, #32
 800290e:	61bb      	str	r3, [r7, #24]
 8002910:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8002912:	2200      	movs	r2, #0
 8002914:	2105      	movs	r1, #5
 8002916:	2037      	movs	r0, #55	; 0x37
 8002918:	f001 fc6b 	bl	80041f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800291c:	2037      	movs	r0, #55	; 0x37
 800291e:	f001 fc84 	bl	800422a <HAL_NVIC_EnableIRQ>
}
 8002922:	e05a      	b.n	80029da <HAL_TIM_Base_MspInit+0x18e>
  else if(htim_base->Instance==TIM8)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a33      	ldr	r2, [pc, #204]	; (80029f8 <HAL_TIM_Base_MspInit+0x1ac>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d11e      	bne.n	800296c <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	617b      	str	r3, [r7, #20]
 8002932:	4b2d      	ldr	r3, [pc, #180]	; (80029e8 <HAL_TIM_Base_MspInit+0x19c>)
 8002934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002936:	4a2c      	ldr	r2, [pc, #176]	; (80029e8 <HAL_TIM_Base_MspInit+0x19c>)
 8002938:	f043 0302 	orr.w	r3, r3, #2
 800293c:	6453      	str	r3, [r2, #68]	; 0x44
 800293e:	4b2a      	ldr	r3, [pc, #168]	; (80029e8 <HAL_TIM_Base_MspInit+0x19c>)
 8002940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	617b      	str	r3, [r7, #20]
 8002948:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800294a:	2200      	movs	r2, #0
 800294c:	2100      	movs	r1, #0
 800294e:	202c      	movs	r0, #44	; 0x2c
 8002950:	f001 fc4f 	bl	80041f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002954:	202c      	movs	r0, #44	; 0x2c
 8002956:	f001 fc68 	bl	800422a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800295a:	2200      	movs	r2, #0
 800295c:	2100      	movs	r1, #0
 800295e:	202d      	movs	r0, #45	; 0x2d
 8002960:	f001 fc47 	bl	80041f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002964:	202d      	movs	r0, #45	; 0x2d
 8002966:	f001 fc60 	bl	800422a <HAL_NVIC_EnableIRQ>
}
 800296a:	e036      	b.n	80029da <HAL_TIM_Base_MspInit+0x18e>
  else if(htim_base->Instance==TIM13)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a22      	ldr	r2, [pc, #136]	; (80029fc <HAL_TIM_Base_MspInit+0x1b0>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d116      	bne.n	80029a4 <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	613b      	str	r3, [r7, #16]
 800297a:	4b1b      	ldr	r3, [pc, #108]	; (80029e8 <HAL_TIM_Base_MspInit+0x19c>)
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	4a1a      	ldr	r2, [pc, #104]	; (80029e8 <HAL_TIM_Base_MspInit+0x19c>)
 8002980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002984:	6413      	str	r3, [r2, #64]	; 0x40
 8002986:	4b18      	ldr	r3, [pc, #96]	; (80029e8 <HAL_TIM_Base_MspInit+0x19c>)
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800298e:	613b      	str	r3, [r7, #16]
 8002990:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002992:	2200      	movs	r2, #0
 8002994:	2100      	movs	r1, #0
 8002996:	202c      	movs	r0, #44	; 0x2c
 8002998:	f001 fc2b 	bl	80041f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800299c:	202c      	movs	r0, #44	; 0x2c
 800299e:	f001 fc44 	bl	800422a <HAL_NVIC_EnableIRQ>
}
 80029a2:	e01a      	b.n	80029da <HAL_TIM_Base_MspInit+0x18e>
  else if(htim_base->Instance==TIM14)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a15      	ldr	r2, [pc, #84]	; (8002a00 <HAL_TIM_Base_MspInit+0x1b4>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d115      	bne.n	80029da <HAL_TIM_Base_MspInit+0x18e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80029ae:	2300      	movs	r3, #0
 80029b0:	60fb      	str	r3, [r7, #12]
 80029b2:	4b0d      	ldr	r3, [pc, #52]	; (80029e8 <HAL_TIM_Base_MspInit+0x19c>)
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	4a0c      	ldr	r2, [pc, #48]	; (80029e8 <HAL_TIM_Base_MspInit+0x19c>)
 80029b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029bc:	6413      	str	r3, [r2, #64]	; 0x40
 80029be:	4b0a      	ldr	r3, [pc, #40]	; (80029e8 <HAL_TIM_Base_MspInit+0x19c>)
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80029ca:	2200      	movs	r2, #0
 80029cc:	2100      	movs	r1, #0
 80029ce:	202d      	movs	r0, #45	; 0x2d
 80029d0:	f001 fc0f 	bl	80041f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80029d4:	202d      	movs	r0, #45	; 0x2d
 80029d6:	f001 fc28 	bl	800422a <HAL_NVIC_EnableIRQ>
}
 80029da:	bf00      	nop
 80029dc:	3728      	adds	r7, #40	; 0x28
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	40010000 	.word	0x40010000
 80029e8:	40023800 	.word	0x40023800
 80029ec:	40000400 	.word	0x40000400
 80029f0:	40001000 	.word	0x40001000
 80029f4:	40001400 	.word	0x40001400
 80029f8:	40010400 	.word	0x40010400
 80029fc:	40001c00 	.word	0x40001c00
 8002a00:	40002000 	.word	0x40002000

08002a04 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b08c      	sub	sp, #48	; 0x30
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a0c:	f107 031c 	add.w	r3, r7, #28
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	605a      	str	r2, [r3, #4]
 8002a16:	609a      	str	r2, [r3, #8]
 8002a18:	60da      	str	r2, [r3, #12]
 8002a1a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a24:	d14b      	bne.n	8002abe <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a26:	2300      	movs	r3, #0
 8002a28:	61bb      	str	r3, [r7, #24]
 8002a2a:	4b58      	ldr	r3, [pc, #352]	; (8002b8c <HAL_TIM_Encoder_MspInit+0x188>)
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	4a57      	ldr	r2, [pc, #348]	; (8002b8c <HAL_TIM_Encoder_MspInit+0x188>)
 8002a30:	f043 0301 	orr.w	r3, r3, #1
 8002a34:	6413      	str	r3, [r2, #64]	; 0x40
 8002a36:	4b55      	ldr	r3, [pc, #340]	; (8002b8c <HAL_TIM_Encoder_MspInit+0x188>)
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	61bb      	str	r3, [r7, #24]
 8002a40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a42:	2300      	movs	r3, #0
 8002a44:	617b      	str	r3, [r7, #20]
 8002a46:	4b51      	ldr	r3, [pc, #324]	; (8002b8c <HAL_TIM_Encoder_MspInit+0x188>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4a:	4a50      	ldr	r2, [pc, #320]	; (8002b8c <HAL_TIM_Encoder_MspInit+0x188>)
 8002a4c:	f043 0301 	orr.w	r3, r3, #1
 8002a50:	6313      	str	r3, [r2, #48]	; 0x30
 8002a52:	4b4e      	ldr	r3, [pc, #312]	; (8002b8c <HAL_TIM_Encoder_MspInit+0x188>)
 8002a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	617b      	str	r3, [r7, #20]
 8002a5c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a5e:	2300      	movs	r3, #0
 8002a60:	613b      	str	r3, [r7, #16]
 8002a62:	4b4a      	ldr	r3, [pc, #296]	; (8002b8c <HAL_TIM_Encoder_MspInit+0x188>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a66:	4a49      	ldr	r2, [pc, #292]	; (8002b8c <HAL_TIM_Encoder_MspInit+0x188>)
 8002a68:	f043 0302 	orr.w	r3, r3, #2
 8002a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a6e:	4b47      	ldr	r3, [pc, #284]	; (8002b8c <HAL_TIM_Encoder_MspInit+0x188>)
 8002a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	613b      	str	r3, [r7, #16]
 8002a78:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002a7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a80:	2302      	movs	r3, #2
 8002a82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a84:	2300      	movs	r3, #0
 8002a86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a90:	f107 031c 	add.w	r3, r7, #28
 8002a94:	4619      	mov	r1, r3
 8002a96:	483e      	ldr	r0, [pc, #248]	; (8002b90 <HAL_TIM_Encoder_MspInit+0x18c>)
 8002a98:	f002 fb0c 	bl	80050b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a9c:	2308      	movs	r3, #8
 8002a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002aac:	2301      	movs	r3, #1
 8002aae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ab0:	f107 031c 	add.w	r3, r7, #28
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4837      	ldr	r0, [pc, #220]	; (8002b94 <HAL_TIM_Encoder_MspInit+0x190>)
 8002ab8:	f002 fafc 	bl	80050b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002abc:	e061      	b.n	8002b82 <HAL_TIM_Encoder_MspInit+0x17e>
  else if(htim_encoder->Instance==TIM4)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a35      	ldr	r2, [pc, #212]	; (8002b98 <HAL_TIM_Encoder_MspInit+0x194>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d15c      	bne.n	8002b82 <HAL_TIM_Encoder_MspInit+0x17e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002ac8:	2300      	movs	r3, #0
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	4b2f      	ldr	r3, [pc, #188]	; (8002b8c <HAL_TIM_Encoder_MspInit+0x188>)
 8002ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad0:	4a2e      	ldr	r2, [pc, #184]	; (8002b8c <HAL_TIM_Encoder_MspInit+0x188>)
 8002ad2:	f043 0304 	orr.w	r3, r3, #4
 8002ad6:	6413      	str	r3, [r2, #64]	; 0x40
 8002ad8:	4b2c      	ldr	r3, [pc, #176]	; (8002b8c <HAL_TIM_Encoder_MspInit+0x188>)
 8002ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002adc:	f003 0304 	and.w	r3, r3, #4
 8002ae0:	60fb      	str	r3, [r7, #12]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	60bb      	str	r3, [r7, #8]
 8002ae8:	4b28      	ldr	r3, [pc, #160]	; (8002b8c <HAL_TIM_Encoder_MspInit+0x188>)
 8002aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aec:	4a27      	ldr	r2, [pc, #156]	; (8002b8c <HAL_TIM_Encoder_MspInit+0x188>)
 8002aee:	f043 0308 	orr.w	r3, r3, #8
 8002af2:	6313      	str	r3, [r2, #48]	; 0x30
 8002af4:	4b25      	ldr	r3, [pc, #148]	; (8002b8c <HAL_TIM_Encoder_MspInit+0x188>)
 8002af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af8:	f003 0308 	and.w	r3, r3, #8
 8002afc:	60bb      	str	r3, [r7, #8]
 8002afe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002b00:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b06:	2302      	movs	r3, #2
 8002b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002b12:	2302      	movs	r3, #2
 8002b14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b16:	f107 031c 	add.w	r3, r7, #28
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	481f      	ldr	r0, [pc, #124]	; (8002b9c <HAL_TIM_Encoder_MspInit+0x198>)
 8002b1e:	f002 fac9 	bl	80050b4 <HAL_GPIO_Init>
    hdma_tim4_up.Instance = DMA1_Stream6;
 8002b22:	4b1f      	ldr	r3, [pc, #124]	; (8002ba0 <HAL_TIM_Encoder_MspInit+0x19c>)
 8002b24:	4a1f      	ldr	r2, [pc, #124]	; (8002ba4 <HAL_TIM_Encoder_MspInit+0x1a0>)
 8002b26:	601a      	str	r2, [r3, #0]
    hdma_tim4_up.Init.Channel = DMA_CHANNEL_2;
 8002b28:	4b1d      	ldr	r3, [pc, #116]	; (8002ba0 <HAL_TIM_Encoder_MspInit+0x19c>)
 8002b2a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002b2e:	605a      	str	r2, [r3, #4]
    hdma_tim4_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b30:	4b1b      	ldr	r3, [pc, #108]	; (8002ba0 <HAL_TIM_Encoder_MspInit+0x19c>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	609a      	str	r2, [r3, #8]
    hdma_tim4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b36:	4b1a      	ldr	r3, [pc, #104]	; (8002ba0 <HAL_TIM_Encoder_MspInit+0x19c>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	60da      	str	r2, [r3, #12]
    hdma_tim4_up.Init.MemInc = DMA_MINC_ENABLE;
 8002b3c:	4b18      	ldr	r3, [pc, #96]	; (8002ba0 <HAL_TIM_Encoder_MspInit+0x19c>)
 8002b3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b42:	611a      	str	r2, [r3, #16]
    hdma_tim4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b44:	4b16      	ldr	r3, [pc, #88]	; (8002ba0 <HAL_TIM_Encoder_MspInit+0x19c>)
 8002b46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b4a:	615a      	str	r2, [r3, #20]
    hdma_tim4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b4c:	4b14      	ldr	r3, [pc, #80]	; (8002ba0 <HAL_TIM_Encoder_MspInit+0x19c>)
 8002b4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b52:	619a      	str	r2, [r3, #24]
    hdma_tim4_up.Init.Mode = DMA_NORMAL;
 8002b54:	4b12      	ldr	r3, [pc, #72]	; (8002ba0 <HAL_TIM_Encoder_MspInit+0x19c>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	61da      	str	r2, [r3, #28]
    hdma_tim4_up.Init.Priority = DMA_PRIORITY_LOW;
 8002b5a:	4b11      	ldr	r3, [pc, #68]	; (8002ba0 <HAL_TIM_Encoder_MspInit+0x19c>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	621a      	str	r2, [r3, #32]
    hdma_tim4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b60:	4b0f      	ldr	r3, [pc, #60]	; (8002ba0 <HAL_TIM_Encoder_MspInit+0x19c>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_up) != HAL_OK)
 8002b66:	480e      	ldr	r0, [pc, #56]	; (8002ba0 <HAL_TIM_Encoder_MspInit+0x19c>)
 8002b68:	f001 fb7a 	bl	8004260 <HAL_DMA_Init>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <HAL_TIM_Encoder_MspInit+0x172>
      Error_Handler();
 8002b72:	f7ff fcf7 	bl	8002564 <Error_Handler>
    __HAL_LINKDMA(htim_encoder,hdma[TIM_DMA_ID_UPDATE],hdma_tim4_up);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a09      	ldr	r2, [pc, #36]	; (8002ba0 <HAL_TIM_Encoder_MspInit+0x19c>)
 8002b7a:	621a      	str	r2, [r3, #32]
 8002b7c:	4a08      	ldr	r2, [pc, #32]	; (8002ba0 <HAL_TIM_Encoder_MspInit+0x19c>)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002b82:	bf00      	nop
 8002b84:	3730      	adds	r7, #48	; 0x30
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	40020000 	.word	0x40020000
 8002b94:	40020400 	.word	0x40020400
 8002b98:	40000800 	.word	0x40000800
 8002b9c:	40020c00 	.word	0x40020c00
 8002ba0:	20000938 	.word	0x20000938
 8002ba4:	400260a0 	.word	0x400260a0

08002ba8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b08a      	sub	sp, #40	; 0x28
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb0:	f107 0314 	add.w	r3, r7, #20
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	605a      	str	r2, [r3, #4]
 8002bba:	609a      	str	r2, [r3, #8]
 8002bbc:	60da      	str	r2, [r3, #12]
 8002bbe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a33      	ldr	r2, [pc, #204]	; (8002c94 <HAL_TIM_MspPostInit+0xec>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d13c      	bne.n	8002c44 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bca:	2300      	movs	r3, #0
 8002bcc:	613b      	str	r3, [r7, #16]
 8002bce:	4b32      	ldr	r3, [pc, #200]	; (8002c98 <HAL_TIM_MspPostInit+0xf0>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd2:	4a31      	ldr	r2, [pc, #196]	; (8002c98 <HAL_TIM_MspPostInit+0xf0>)
 8002bd4:	f043 0301 	orr.w	r3, r3, #1
 8002bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bda:	4b2f      	ldr	r3, [pc, #188]	; (8002c98 <HAL_TIM_MspPostInit+0xf0>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	613b      	str	r3, [r7, #16]
 8002be4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002be6:	2300      	movs	r3, #0
 8002be8:	60fb      	str	r3, [r7, #12]
 8002bea:	4b2b      	ldr	r3, [pc, #172]	; (8002c98 <HAL_TIM_MspPostInit+0xf0>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	4a2a      	ldr	r2, [pc, #168]	; (8002c98 <HAL_TIM_MspPostInit+0xf0>)
 8002bf0:	f043 0304 	orr.w	r3, r3, #4
 8002bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bf6:	4b28      	ldr	r3, [pc, #160]	; (8002c98 <HAL_TIM_MspPostInit+0xf0>)
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfa:	f003 0304 	and.w	r3, r3, #4
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002c02:	2340      	movs	r3, #64	; 0x40
 8002c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c06:	2302      	movs	r3, #2
 8002c08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c12:	2302      	movs	r3, #2
 8002c14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c16:	f107 0314 	add.w	r3, r7, #20
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	481f      	ldr	r0, [pc, #124]	; (8002c9c <HAL_TIM_MspPostInit+0xf4>)
 8002c1e:	f002 fa49 	bl	80050b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002c22:	2380      	movs	r3, #128	; 0x80
 8002c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c26:	2302      	movs	r3, #2
 8002c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c32:	2302      	movs	r3, #2
 8002c34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c36:	f107 0314 	add.w	r3, r7, #20
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4818      	ldr	r0, [pc, #96]	; (8002ca0 <HAL_TIM_MspPostInit+0xf8>)
 8002c3e:	f002 fa39 	bl	80050b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8002c42:	e023      	b.n	8002c8c <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM13)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a16      	ldr	r2, [pc, #88]	; (8002ca4 <HAL_TIM_MspPostInit+0xfc>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d11e      	bne.n	8002c8c <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60bb      	str	r3, [r7, #8]
 8002c52:	4b11      	ldr	r3, [pc, #68]	; (8002c98 <HAL_TIM_MspPostInit+0xf0>)
 8002c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c56:	4a10      	ldr	r2, [pc, #64]	; (8002c98 <HAL_TIM_MspPostInit+0xf0>)
 8002c58:	f043 0320 	orr.w	r3, r3, #32
 8002c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c5e:	4b0e      	ldr	r3, [pc, #56]	; (8002c98 <HAL_TIM_MspPostInit+0xf0>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c62:	f003 0320 	and.w	r3, r3, #32
 8002c66:	60bb      	str	r3, [r7, #8]
 8002c68:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002c6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c70:	2302      	movs	r3, #2
 8002c72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c74:	2300      	movs	r3, #0
 8002c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002c7c:	2309      	movs	r3, #9
 8002c7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c80:	f107 0314 	add.w	r3, r7, #20
 8002c84:	4619      	mov	r1, r3
 8002c86:	4808      	ldr	r0, [pc, #32]	; (8002ca8 <HAL_TIM_MspPostInit+0x100>)
 8002c88:	f002 fa14 	bl	80050b4 <HAL_GPIO_Init>
}
 8002c8c:	bf00      	nop
 8002c8e:	3728      	adds	r7, #40	; 0x28
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40000400 	.word	0x40000400
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	40020000 	.word	0x40020000
 8002ca0:	40020800 	.word	0x40020800
 8002ca4:	40001c00 	.word	0x40001c00
 8002ca8:	40021400 	.word	0x40021400

08002cac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08c      	sub	sp, #48	; 0x30
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb4:	f107 031c 	add.w	r3, r7, #28
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	605a      	str	r2, [r3, #4]
 8002cbe:	609a      	str	r2, [r3, #8]
 8002cc0:	60da      	str	r2, [r3, #12]
 8002cc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a3b      	ldr	r2, [pc, #236]	; (8002db8 <HAL_UART_MspInit+0x10c>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d135      	bne.n	8002d3a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002cce:	2300      	movs	r3, #0
 8002cd0:	61bb      	str	r3, [r7, #24]
 8002cd2:	4b3a      	ldr	r3, [pc, #232]	; (8002dbc <HAL_UART_MspInit+0x110>)
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	4a39      	ldr	r2, [pc, #228]	; (8002dbc <HAL_UART_MspInit+0x110>)
 8002cd8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8002cde:	4b37      	ldr	r3, [pc, #220]	; (8002dbc <HAL_UART_MspInit+0x110>)
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ce6:	61bb      	str	r3, [r7, #24]
 8002ce8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	4b33      	ldr	r3, [pc, #204]	; (8002dbc <HAL_UART_MspInit+0x110>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	4a32      	ldr	r2, [pc, #200]	; (8002dbc <HAL_UART_MspInit+0x110>)
 8002cf4:	f043 0304 	orr.w	r3, r3, #4
 8002cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cfa:	4b30      	ldr	r3, [pc, #192]	; (8002dbc <HAL_UART_MspInit+0x110>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	f003 0304 	and.w	r3, r3, #4
 8002d02:	617b      	str	r3, [r7, #20]
 8002d04:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002d06:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d10:	2300      	movs	r3, #0
 8002d12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d14:	2303      	movs	r3, #3
 8002d16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002d18:	2308      	movs	r3, #8
 8002d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d1c:	f107 031c 	add.w	r3, r7, #28
 8002d20:	4619      	mov	r1, r3
 8002d22:	4827      	ldr	r0, [pc, #156]	; (8002dc0 <HAL_UART_MspInit+0x114>)
 8002d24:	f002 f9c6 	bl	80050b4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002d28:	2200      	movs	r2, #0
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	2034      	movs	r0, #52	; 0x34
 8002d2e:	f001 fa60 	bl	80041f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002d32:	2034      	movs	r0, #52	; 0x34
 8002d34:	f001 fa79 	bl	800422a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002d38:	e039      	b.n	8002dae <HAL_UART_MspInit+0x102>
  else if(huart->Instance==USART3)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a21      	ldr	r2, [pc, #132]	; (8002dc4 <HAL_UART_MspInit+0x118>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d134      	bne.n	8002dae <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d44:	2300      	movs	r3, #0
 8002d46:	613b      	str	r3, [r7, #16]
 8002d48:	4b1c      	ldr	r3, [pc, #112]	; (8002dbc <HAL_UART_MspInit+0x110>)
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4c:	4a1b      	ldr	r2, [pc, #108]	; (8002dbc <HAL_UART_MspInit+0x110>)
 8002d4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d52:	6413      	str	r3, [r2, #64]	; 0x40
 8002d54:	4b19      	ldr	r3, [pc, #100]	; (8002dbc <HAL_UART_MspInit+0x110>)
 8002d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d5c:	613b      	str	r3, [r7, #16]
 8002d5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d60:	2300      	movs	r3, #0
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	4b15      	ldr	r3, [pc, #84]	; (8002dbc <HAL_UART_MspInit+0x110>)
 8002d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d68:	4a14      	ldr	r2, [pc, #80]	; (8002dbc <HAL_UART_MspInit+0x110>)
 8002d6a:	f043 0308 	orr.w	r3, r3, #8
 8002d6e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d70:	4b12      	ldr	r3, [pc, #72]	; (8002dbc <HAL_UART_MspInit+0x110>)
 8002d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d74:	f003 0308 	and.w	r3, r3, #8
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002d7c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d82:	2302      	movs	r3, #2
 8002d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d86:	2300      	movs	r3, #0
 8002d88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d8e:	2307      	movs	r3, #7
 8002d90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d92:	f107 031c 	add.w	r3, r7, #28
 8002d96:	4619      	mov	r1, r3
 8002d98:	480b      	ldr	r0, [pc, #44]	; (8002dc8 <HAL_UART_MspInit+0x11c>)
 8002d9a:	f002 f98b 	bl	80050b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002d9e:	2200      	movs	r2, #0
 8002da0:	2100      	movs	r1, #0
 8002da2:	2027      	movs	r0, #39	; 0x27
 8002da4:	f001 fa25 	bl	80041f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002da8:	2027      	movs	r0, #39	; 0x27
 8002daa:	f001 fa3e 	bl	800422a <HAL_NVIC_EnableIRQ>
}
 8002dae:	bf00      	nop
 8002db0:	3730      	adds	r7, #48	; 0x30
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	40004c00 	.word	0x40004c00
 8002dbc:	40023800 	.word	0x40023800
 8002dc0:	40020800 	.word	0x40020800
 8002dc4:	40004800 	.word	0x40004800
 8002dc8:	40020c00 	.word	0x40020c00

08002dcc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b08a      	sub	sp, #40	; 0x28
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd4:	f107 0314 	add.w	r3, r7, #20
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	605a      	str	r2, [r3, #4]
 8002dde:	609a      	str	r2, [r3, #8]
 8002de0:	60da      	str	r2, [r3, #12]
 8002de2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dec:	d13f      	bne.n	8002e6e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dee:	2300      	movs	r3, #0
 8002df0:	613b      	str	r3, [r7, #16]
 8002df2:	4b21      	ldr	r3, [pc, #132]	; (8002e78 <HAL_PCD_MspInit+0xac>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	4a20      	ldr	r2, [pc, #128]	; (8002e78 <HAL_PCD_MspInit+0xac>)
 8002df8:	f043 0301 	orr.w	r3, r3, #1
 8002dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dfe:	4b1e      	ldr	r3, [pc, #120]	; (8002e78 <HAL_PCD_MspInit+0xac>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	613b      	str	r3, [r7, #16]
 8002e08:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002e0a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002e0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e10:	2302      	movs	r3, #2
 8002e12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e14:	2300      	movs	r3, #0
 8002e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002e1c:	230a      	movs	r3, #10
 8002e1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e20:	f107 0314 	add.w	r3, r7, #20
 8002e24:	4619      	mov	r1, r3
 8002e26:	4815      	ldr	r0, [pc, #84]	; (8002e7c <HAL_PCD_MspInit+0xb0>)
 8002e28:	f002 f944 	bl	80050b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002e2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e32:	2300      	movs	r3, #0
 8002e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e36:	2300      	movs	r3, #0
 8002e38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002e3a:	f107 0314 	add.w	r3, r7, #20
 8002e3e:	4619      	mov	r1, r3
 8002e40:	480e      	ldr	r0, [pc, #56]	; (8002e7c <HAL_PCD_MspInit+0xb0>)
 8002e42:	f002 f937 	bl	80050b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002e46:	4b0c      	ldr	r3, [pc, #48]	; (8002e78 <HAL_PCD_MspInit+0xac>)
 8002e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e4a:	4a0b      	ldr	r2, [pc, #44]	; (8002e78 <HAL_PCD_MspInit+0xac>)
 8002e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e50:	6353      	str	r3, [r2, #52]	; 0x34
 8002e52:	2300      	movs	r3, #0
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	4b08      	ldr	r3, [pc, #32]	; (8002e78 <HAL_PCD_MspInit+0xac>)
 8002e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5a:	4a07      	ldr	r2, [pc, #28]	; (8002e78 <HAL_PCD_MspInit+0xac>)
 8002e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e60:	6453      	str	r3, [r2, #68]	; 0x44
 8002e62:	4b05      	ldr	r3, [pc, #20]	; (8002e78 <HAL_PCD_MspInit+0xac>)
 8002e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e6a:	60fb      	str	r3, [r7, #12]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002e6e:	bf00      	nop
 8002e70:	3728      	adds	r7, #40	; 0x28
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	40023800 	.word	0x40023800
 8002e7c:	40020000 	.word	0x40020000

08002e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e84:	e7fe      	b.n	8002e84 <NMI_Handler+0x4>

08002e86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e86:	b480      	push	{r7}
 8002e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e8a:	e7fe      	b.n	8002e8a <HardFault_Handler+0x4>

08002e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e90:	e7fe      	b.n	8002e90 <MemManage_Handler+0x4>

08002e92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e92:	b480      	push	{r7}
 8002e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e96:	e7fe      	b.n	8002e96 <BusFault_Handler+0x4>

08002e98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e9c:	e7fe      	b.n	8002e9c <UsageFault_Handler+0x4>

08002e9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ea2:	bf00      	nop
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002eb0:	bf00      	nop
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ebe:	bf00      	nop
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ecc:	f000 fb2c 	bl	8003528 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ed0:	bf00      	nop
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_up);
 8002ed8:	4802      	ldr	r0, [pc, #8]	; (8002ee4 <DMA1_Stream6_IRQHandler+0x10>)
 8002eda:	f001 fb59 	bl	8004590 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002ede:	bf00      	nop
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	20000938 	.word	0x20000938

08002ee8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002ee8:	b5b0      	push	{r4, r5, r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002eec:	4870      	ldr	r0, [pc, #448]	; (80030b0 <ADC_IRQHandler+0x1c8>)
 8002eee:	f000 fba2 	bl	8003636 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */


  ADC1_0= ADC1_value[0];
 8002ef2:	4b70      	ldr	r3, [pc, #448]	; (80030b4 <ADC_IRQHandler+0x1cc>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a70      	ldr	r2, [pc, #448]	; (80030b8 <ADC_IRQHandler+0x1d0>)
 8002ef8:	6013      	str	r3, [r2, #0]

  V=ADC1_0 * 0.6547877;  //3227 > 2113(ref)= 2.58V
 8002efa:	4b6f      	ldr	r3, [pc, #444]	; (80030b8 <ADC_IRQHandler+0x1d0>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fd fb10 	bl	8000524 <__aeabi_ui2d>
 8002f04:	a364      	add	r3, pc, #400	; (adr r3, 8003098 <ADC_IRQHandler+0x1b0>)
 8002f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f0a:	f7fd fb85 	bl	8000618 <__aeabi_dmul>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	460b      	mov	r3, r1
 8002f12:	4610      	mov	r0, r2
 8002f14:	4619      	mov	r1, r3
 8002f16:	f7fd fe57 	bl	8000bc8 <__aeabi_d2f>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	4a67      	ldr	r2, [pc, #412]	; (80030bc <ADC_IRQHandler+0x1d4>)
 8002f1e:	6013      	str	r3, [r2, #0]
  V1_mV = V *5000 / 4095.0; //[mV]
 8002f20:	4b66      	ldr	r3, [pc, #408]	; (80030bc <ADC_IRQHandler+0x1d4>)
 8002f22:	edd3 7a00 	vldr	s15, [r3]
 8002f26:	ed9f 7a66 	vldr	s14, [pc, #408]	; 80030c0 <ADC_IRQHandler+0x1d8>
 8002f2a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f2e:	eddf 6a65 	vldr	s13, [pc, #404]	; 80030c4 <ADC_IRQHandler+0x1dc>
 8002f32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f36:	4b64      	ldr	r3, [pc, #400]	; (80030c8 <ADC_IRQHandler+0x1e0>)
 8002f38:	edc3 7a00 	vstr	s15, [r3]
  V1_V = V *5 / 4095.0; //[V]
 8002f3c:	4b5f      	ldr	r3, [pc, #380]	; (80030bc <ADC_IRQHandler+0x1d4>)
 8002f3e:	edd3 7a00 	vldr	s15, [r3]
 8002f42:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002f46:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f4a:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80030c4 <ADC_IRQHandler+0x1dc>
 8002f4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f52:	4b5e      	ldr	r3, [pc, #376]	; (80030cc <ADC_IRQHandler+0x1e4>)
 8002f54:	edc3 7a00 	vstr	s15, [r3]


  if(V1_V - 2.58>=0)
 8002f58:	4b5c      	ldr	r3, [pc, #368]	; (80030cc <ADC_IRQHandler+0x1e4>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7fd fb03 	bl	8000568 <__aeabi_f2d>
 8002f62:	a34f      	add	r3, pc, #316	; (adr r3, 80030a0 <ADC_IRQHandler+0x1b8>)
 8002f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f68:	f7fd f99e 	bl	80002a8 <__aeabi_dsub>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	460b      	mov	r3, r1
 8002f70:	4610      	mov	r0, r2
 8002f72:	4619      	mov	r1, r3
 8002f74:	f04f 0200 	mov.w	r2, #0
 8002f78:	f04f 0300 	mov.w	r3, #0
 8002f7c:	f7fd fdd2 	bl	8000b24 <__aeabi_dcmpge>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d025      	beq.n	8002fd2 <ADC_IRQHandler+0xea>
  {
	  amp_A = (V1_V -2.58) /285*1000;
 8002f86:	4b51      	ldr	r3, [pc, #324]	; (80030cc <ADC_IRQHandler+0x1e4>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fd faec 	bl	8000568 <__aeabi_f2d>
 8002f90:	a343      	add	r3, pc, #268	; (adr r3, 80030a0 <ADC_IRQHandler+0x1b8>)
 8002f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f96:	f7fd f987 	bl	80002a8 <__aeabi_dsub>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	4610      	mov	r0, r2
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	a341      	add	r3, pc, #260	; (adr r3, 80030a8 <ADC_IRQHandler+0x1c0>)
 8002fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa8:	f7fd fc60 	bl	800086c <__aeabi_ddiv>
 8002fac:	4602      	mov	r2, r0
 8002fae:	460b      	mov	r3, r1
 8002fb0:	4610      	mov	r0, r2
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	f04f 0200 	mov.w	r2, #0
 8002fb8:	4b45      	ldr	r3, [pc, #276]	; (80030d0 <ADC_IRQHandler+0x1e8>)
 8002fba:	f7fd fb2d 	bl	8000618 <__aeabi_dmul>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	4610      	mov	r0, r2
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	f7fd fdff 	bl	8000bc8 <__aeabi_d2f>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	4a41      	ldr	r2, [pc, #260]	; (80030d4 <ADC_IRQHandler+0x1ec>)
 8002fce:	6013      	str	r3, [r2, #0]
 8002fd0:	e03e      	b.n	8003050 <ADC_IRQHandler+0x168>
  }
  else if(V1_V - 2.58 < 0)
 8002fd2:	4b3e      	ldr	r3, [pc, #248]	; (80030cc <ADC_IRQHandler+0x1e4>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fd fac6 	bl	8000568 <__aeabi_f2d>
 8002fdc:	a330      	add	r3, pc, #192	; (adr r3, 80030a0 <ADC_IRQHandler+0x1b8>)
 8002fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe2:	f7fd f961 	bl	80002a8 <__aeabi_dsub>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	4610      	mov	r0, r2
 8002fec:	4619      	mov	r1, r3
 8002fee:	f04f 0200 	mov.w	r2, #0
 8002ff2:	f04f 0300 	mov.w	r3, #0
 8002ff6:	f7fd fd81 	bl	8000afc <__aeabi_dcmplt>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d027      	beq.n	8003050 <ADC_IRQHandler+0x168>
  {
	  amp_A = -(V1_V - 2.58) /285*1000;
 8003000:	4b32      	ldr	r3, [pc, #200]	; (80030cc <ADC_IRQHandler+0x1e4>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4618      	mov	r0, r3
 8003006:	f7fd faaf 	bl	8000568 <__aeabi_f2d>
 800300a:	a325      	add	r3, pc, #148	; (adr r3, 80030a0 <ADC_IRQHandler+0x1b8>)
 800300c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003010:	f7fd f94a 	bl	80002a8 <__aeabi_dsub>
 8003014:	4602      	mov	r2, r0
 8003016:	460b      	mov	r3, r1
 8003018:	4614      	mov	r4, r2
 800301a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800301e:	a322      	add	r3, pc, #136	; (adr r3, 80030a8 <ADC_IRQHandler+0x1c0>)
 8003020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003024:	4620      	mov	r0, r4
 8003026:	4629      	mov	r1, r5
 8003028:	f7fd fc20 	bl	800086c <__aeabi_ddiv>
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	4610      	mov	r0, r2
 8003032:	4619      	mov	r1, r3
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	4b25      	ldr	r3, [pc, #148]	; (80030d0 <ADC_IRQHandler+0x1e8>)
 800303a:	f7fd faed 	bl	8000618 <__aeabi_dmul>
 800303e:	4602      	mov	r2, r0
 8003040:	460b      	mov	r3, r1
 8003042:	4610      	mov	r0, r2
 8003044:	4619      	mov	r1, r3
 8003046:	f7fd fdbf 	bl	8000bc8 <__aeabi_d2f>
 800304a:	4603      	mov	r3, r0
 800304c:	4a21      	ldr	r2, [pc, #132]	; (80030d4 <ADC_IRQHandler+0x1ec>)
 800304e:	6013      	str	r3, [r2, #0]
  }


  amp_mA = amp_A * 1000;
 8003050:	4b20      	ldr	r3, [pc, #128]	; (80030d4 <ADC_IRQHandler+0x1ec>)
 8003052:	edd3 7a00 	vldr	s15, [r3]
 8003056:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80030d8 <ADC_IRQHandler+0x1f0>
 800305a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800305e:	4b1f      	ldr	r3, [pc, #124]	; (80030dc <ADC_IRQHandler+0x1f4>)
 8003060:	edc3 7a00 	vstr	s15, [r3]

  sum=amp_mA + sum;
 8003064:	4b1d      	ldr	r3, [pc, #116]	; (80030dc <ADC_IRQHandler+0x1f4>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4618      	mov	r0, r3
 800306a:	f7fd fa7d 	bl	8000568 <__aeabi_f2d>
 800306e:	4b1c      	ldr	r3, [pc, #112]	; (80030e0 <ADC_IRQHandler+0x1f8>)
 8003070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003074:	f7fd f91a 	bl	80002ac <__adddf3>
 8003078:	4602      	mov	r2, r0
 800307a:	460b      	mov	r3, r1
 800307c:	4918      	ldr	r1, [pc, #96]	; (80030e0 <ADC_IRQHandler+0x1f8>)
 800307e:	e9c1 2300 	strd	r2, r3, [r1]
 	  i++;
 8003082:	4b18      	ldr	r3, [pc, #96]	; (80030e4 <ADC_IRQHandler+0x1fc>)
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	3301      	adds	r3, #1
 8003088:	b2da      	uxtb	r2, r3
 800308a:	4b16      	ldr	r3, [pc, #88]	; (80030e4 <ADC_IRQHandler+0x1fc>)
 800308c:	701a      	strb	r2, [r3, #0]
 	 			  sum=0;
 	 	  }


  /* USER CODE END ADC_IRQn 1 */
}
 800308e:	bf00      	nop
 8003090:	bdb0      	pop	{r4, r5, r7, pc}
 8003092:	bf00      	nop
 8003094:	f3af 8000 	nop.w
 8003098:	55aa5680 	.word	0x55aa5680
 800309c:	3fe4f405 	.word	0x3fe4f405
 80030a0:	0a3d70a4 	.word	0x0a3d70a4
 80030a4:	4004a3d7 	.word	0x4004a3d7
 80030a8:	00000000 	.word	0x00000000
 80030ac:	4071d000 	.word	0x4071d000
 80030b0:	20000558 	.word	0x20000558
 80030b4:	200003b0 	.word	0x200003b0
 80030b8:	200003b8 	.word	0x200003b8
 80030bc:	20000ea0 	.word	0x20000ea0
 80030c0:	459c4000 	.word	0x459c4000
 80030c4:	457ff000 	.word	0x457ff000
 80030c8:	20000ea4 	.word	0x20000ea4
 80030cc:	20000ea8 	.word	0x20000ea8
 80030d0:	408f4000 	.word	0x408f4000
 80030d4:	20000eac 	.word	0x20000eac
 80030d8:	447a0000 	.word	0x447a0000
 80030dc:	20000eb0 	.word	0x20000eb0
 80030e0:	20000eb8 	.word	0x20000eb8
 80030e4:	20000ec0 	.word	0x20000ec0

080030e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80030ec:	4802      	ldr	r0, [pc, #8]	; (80030f8 <TIM3_IRQHandler+0x10>)
 80030ee:	f003 fb89 	bl	8006804 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */


  /* USER CODE END TIM3_IRQn 1 */
}
 80030f2:	bf00      	nop
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	20000740 	.word	0x20000740

080030fc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003100:	4802      	ldr	r0, [pc, #8]	; (800310c <USART3_IRQHandler+0x10>)
 8003102:	f004 fb85 	bl	8007810 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003106:	bf00      	nop
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	20000300 	.word	0x20000300

08003110 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003114:	4805      	ldr	r0, [pc, #20]	; (800312c <TIM8_UP_TIM13_IRQHandler+0x1c>)
 8003116:	f003 fb75 	bl	8006804 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 800311a:	4805      	ldr	r0, [pc, #20]	; (8003130 <TIM8_UP_TIM13_IRQHandler+0x20>)
 800311c:	f003 fb72 	bl	8006804 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */
  //0.0001/4

  //GPIOB->ODR ^=1<<0;  //ok

  tim13_flag=1;
 8003120:	4b04      	ldr	r3, [pc, #16]	; (8003134 <TIM8_UP_TIM13_IRQHandler+0x24>)
 8003122:	2201      	movs	r2, #1
 8003124:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003126:	bf00      	nop
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	20000860 	.word	0x20000860
 8003130:	200008a8 	.word	0x200008a8
 8003134:	20000e9c 	.word	0x20000e9c

08003138 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800313c:	4809      	ldr	r0, [pc, #36]	; (8003164 <TIM8_TRG_COM_TIM14_IRQHandler+0x2c>)
 800313e:	f003 fb61 	bl	8006804 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 8003142:	4809      	ldr	r0, [pc, #36]	; (8003168 <TIM8_TRG_COM_TIM14_IRQHandler+0x30>)
 8003144:	f003 fb5e 	bl	8006804 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  tim14_flag++;
 8003148:	4b08      	ldr	r3, [pc, #32]	; (800316c <TIM8_TRG_COM_TIM14_IRQHandler+0x34>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	3301      	adds	r3, #1
 800314e:	4a07      	ldr	r2, [pc, #28]	; (800316c <TIM8_TRG_COM_TIM14_IRQHandler+0x34>)
 8003150:	6013      	str	r3, [r2, #0]





    	GPIOB->ODR ^= 1<<7;
 8003152:	4b07      	ldr	r3, [pc, #28]	; (8003170 <TIM8_TRG_COM_TIM14_IRQHandler+0x38>)
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	4a06      	ldr	r2, [pc, #24]	; (8003170 <TIM8_TRG_COM_TIM14_IRQHandler+0x38>)
 8003158:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 800315c:	6153      	str	r3, [r2, #20]
  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800315e:	bf00      	nop
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	20000860 	.word	0x20000860
 8003168:	200008f0 	.word	0x200008f0
 800316c:	20000e98 	.word	0x20000e98
 8003170:	40020400 	.word	0x40020400

08003174 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003178:	4802      	ldr	r0, [pc, #8]	; (8003184 <UART4_IRQHandler+0x10>)
 800317a:	f004 fb49 	bl	8007810 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800317e:	bf00      	nop
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	2000034c 	.word	0x2000034c

08003188 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800318c:	4837      	ldr	r0, [pc, #220]	; (800326c <TIM6_DAC_IRQHandler+0xe4>)
 800318e:	f003 fb39 	bl	8006804 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  tim6_flag=1;
 8003192:	4b37      	ldr	r3, [pc, #220]	; (8003270 <TIM6_DAC_IRQHandler+0xe8>)
 8003194:	2201      	movs	r2, #1
 8003196:	601a      	str	r2, [r3, #0]





  encoder_count=TIM4->CNT;
 8003198:	4b36      	ldr	r3, [pc, #216]	; (8003274 <TIM6_DAC_IRQHandler+0xec>)
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	4a36      	ldr	r2, [pc, #216]	; (8003278 <TIM6_DAC_IRQHandler+0xf0>)
 800319e:	6013      	str	r3, [r2, #0]



	if(key_flag==1)
 80031a0:	4b36      	ldr	r3, [pc, #216]	; (800327c <TIM6_DAC_IRQHandler+0xf4>)
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d12d      	bne.n	8003204 <TIM6_DAC_IRQHandler+0x7c>
	  {
		  GPIOE->ODR |= 1<<0;  // forward
 80031a8:	4b35      	ldr	r3, [pc, #212]	; (8003280 <TIM6_DAC_IRQHandler+0xf8>)
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	4a34      	ldr	r2, [pc, #208]	; (8003280 <TIM6_DAC_IRQHandler+0xf8>)
 80031ae:	f043 0301 	orr.w	r3, r3, #1
 80031b2:	6153      	str	r3, [r2, #20]

	      GPIOG->ODR &= ~1<<0;  //start
 80031b4:	4b33      	ldr	r3, [pc, #204]	; (8003284 <TIM6_DAC_IRQHandler+0xfc>)
 80031b6:	695b      	ldr	r3, [r3, #20]
 80031b8:	4a32      	ldr	r2, [pc, #200]	; (8003284 <TIM6_DAC_IRQHandler+0xfc>)
 80031ba:	f023 0301 	bic.w	r3, r3, #1
 80031be:	6153      	str	r3, [r2, #20]

		  TIM3->CCR1 = 250;
 80031c0:	4b31      	ldr	r3, [pc, #196]	; (8003288 <TIM6_DAC_IRQHandler+0x100>)
 80031c2:	22fa      	movs	r2, #250	; 0xfa
 80031c4:	635a      	str	r2, [r3, #52]	; 0x34

		    if(TIM4->CNT>=10220)
 80031c6:	4b2b      	ldr	r3, [pc, #172]	; (8003274 <TIM6_DAC_IRQHandler+0xec>)
 80031c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ca:	f242 72eb 	movw	r2, #10219	; 0x27eb
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d918      	bls.n	8003204 <TIM6_DAC_IRQHandler+0x7c>
			{
		    	TIM3->CCR1 = 100;
 80031d2:	4b2d      	ldr	r3, [pc, #180]	; (8003288 <TIM6_DAC_IRQHandler+0x100>)
 80031d4:	2264      	movs	r2, #100	; 0x64
 80031d6:	635a      	str	r2, [r3, #52]	; 0x34

		 		if(TIM4->CNT>=10512)
 80031d8:	4b26      	ldr	r3, [pc, #152]	; (8003274 <TIM6_DAC_IRQHandler+0xec>)
 80031da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031dc:	f642 120f 	movw	r2, #10511	; 0x290f
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d90f      	bls.n	8003204 <TIM6_DAC_IRQHandler+0x7c>
		  		{
			         GPIOG->ODR |= 1<<0;  //stop
 80031e4:	4b27      	ldr	r3, [pc, #156]	; (8003284 <TIM6_DAC_IRQHandler+0xfc>)
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	4a26      	ldr	r2, [pc, #152]	; (8003284 <TIM6_DAC_IRQHandler+0xfc>)
 80031ea:	f043 0301 	orr.w	r3, r3, #1
 80031ee:	6153      	str	r3, [r2, #20]
			        //  key_flag=0;
			          stop_flag=1;
 80031f0:	4b26      	ldr	r3, [pc, #152]	; (800328c <TIM6_DAC_IRQHandler+0x104>)
 80031f2:	2201      	movs	r2, #1
 80031f4:	701a      	strb	r2, [r3, #0]
			          key_flag=0;
 80031f6:	4b21      	ldr	r3, [pc, #132]	; (800327c <TIM6_DAC_IRQHandler+0xf4>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	701a      	strb	r2, [r3, #0]
			          HAL_Delay(2000);
 80031fc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003200:	f000 f9b2 	bl	8003568 <HAL_Delay>


	  }


	  if(stop_flag==1)
 8003204:	4b21      	ldr	r3, [pc, #132]	; (800328c <TIM6_DAC_IRQHandler+0x104>)
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d12c      	bne.n	8003266 <TIM6_DAC_IRQHandler+0xde>
	      	    {
	      	          GPIOE->ODR &= ~1<<0;  //back
 800320c:	4b1c      	ldr	r3, [pc, #112]	; (8003280 <TIM6_DAC_IRQHandler+0xf8>)
 800320e:	695b      	ldr	r3, [r3, #20]
 8003210:	4a1b      	ldr	r2, [pc, #108]	; (8003280 <TIM6_DAC_IRQHandler+0xf8>)
 8003212:	f023 0301 	bic.w	r3, r3, #1
 8003216:	6153      	str	r3, [r2, #20]
	      	          GPIOG->ODR &= ~1<<0;  //start
 8003218:	4b1a      	ldr	r3, [pc, #104]	; (8003284 <TIM6_DAC_IRQHandler+0xfc>)
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	4a19      	ldr	r2, [pc, #100]	; (8003284 <TIM6_DAC_IRQHandler+0xfc>)
 800321e:	f023 0301 	bic.w	r3, r3, #1
 8003222:	6153      	str	r3, [r2, #20]
	      	          TIM3->CCR1 = 250;
 8003224:	4b18      	ldr	r3, [pc, #96]	; (8003288 <TIM6_DAC_IRQHandler+0x100>)
 8003226:	22fa      	movs	r2, #250	; 0xfa
 8003228:	635a      	str	r2, [r3, #52]	; 0x34

	      	            if(encoder_count<=10280)
 800322a:	4b13      	ldr	r3, [pc, #76]	; (8003278 <TIM6_DAC_IRQHandler+0xf0>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f642 0228 	movw	r2, #10280	; 0x2828
 8003232:	4293      	cmp	r3, r2
 8003234:	d817      	bhi.n	8003266 <TIM6_DAC_IRQHandler+0xde>
	      	            {
	      	            	  TIM3->CCR1 = 87;
 8003236:	4b14      	ldr	r3, [pc, #80]	; (8003288 <TIM6_DAC_IRQHandler+0x100>)
 8003238:	2257      	movs	r2, #87	; 0x57
 800323a:	635a      	str	r2, [r3, #52]	; 0x34
	      	             	  if(encoder_count<=10000)
 800323c:	4b0e      	ldr	r3, [pc, #56]	; (8003278 <TIM6_DAC_IRQHandler+0xf0>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f242 7210 	movw	r2, #10000	; 0x2710
 8003244:	4293      	cmp	r3, r2
 8003246:	d80e      	bhi.n	8003266 <TIM6_DAC_IRQHandler+0xde>
	      	    	      	    {
	      	    	  		 		  GPIOG->ODR |= 1<<0;  //stop
 8003248:	4b0e      	ldr	r3, [pc, #56]	; (8003284 <TIM6_DAC_IRQHandler+0xfc>)
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	4a0d      	ldr	r2, [pc, #52]	; (8003284 <TIM6_DAC_IRQHandler+0xfc>)
 800324e:	f043 0301 	orr.w	r3, r3, #1
 8003252:	6153      	str	r3, [r2, #20]
	      	    	          		  GPIOE->ODR |= 1<<0;  //go
 8003254:	4b0a      	ldr	r3, [pc, #40]	; (8003280 <TIM6_DAC_IRQHandler+0xf8>)
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	4a09      	ldr	r2, [pc, #36]	; (8003280 <TIM6_DAC_IRQHandler+0xf8>)
 800325a:	f043 0301 	orr.w	r3, r3, #1
 800325e:	6153      	str	r3, [r2, #20]
	      	    	  		         stop_flag=0;
 8003260:	4b0a      	ldr	r3, [pc, #40]	; (800328c <TIM6_DAC_IRQHandler+0x104>)
 8003262:	2200      	movs	r2, #0
 8003264:	701a      	strb	r2, [r3, #0]




  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003266:	bf00      	nop
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	200007d0 	.word	0x200007d0
 8003270:	20000e94 	.word	0x20000e94
 8003274:	40000800 	.word	0x40000800
 8003278:	20000394 	.word	0x20000394
 800327c:	200003dc 	.word	0x200003dc
 8003280:	40021000 	.word	0x40021000
 8003284:	40021800 	.word	0x40021800
 8003288:	40000400 	.word	0x40000400
 800328c:	20000ec1 	.word	0x20000ec1

08003290 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003294:	4802      	ldr	r0, [pc, #8]	; (80032a0 <TIM7_IRQHandler+0x10>)
 8003296:	f003 fab5 	bl	8006804 <HAL_TIM_IRQHandler>
  	  		          }

  }*/

  /* USER CODE END TIM7_IRQn 1 */
}
 800329a:	bf00      	nop
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	20000818 	.word	0x20000818

080032a4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80032a8:	4802      	ldr	r0, [pc, #8]	; (80032b4 <DMA2_Stream0_IRQHandler+0x10>)
 80032aa:	f001 f971 	bl	8004590 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80032ae:	bf00      	nop
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	200005a0 	.word	0x200005a0

080032b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  return 1;
 80032bc:	2301      	movs	r3, #1
}
 80032be:	4618      	mov	r0, r3
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <_kill>:

int _kill(int pid, int sig)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80032d2:	f006 fae3 	bl	800989c <__errno>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2216      	movs	r2, #22
 80032da:	601a      	str	r2, [r3, #0]
  return -1;
 80032dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <_exit>:

void _exit (int status)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80032f0:	f04f 31ff 	mov.w	r1, #4294967295
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f7ff ffe7 	bl	80032c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80032fa:	e7fe      	b.n	80032fa <_exit+0x12>

080032fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003308:	2300      	movs	r3, #0
 800330a:	617b      	str	r3, [r7, #20]
 800330c:	e00a      	b.n	8003324 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800330e:	f3af 8000 	nop.w
 8003312:	4601      	mov	r1, r0
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	1c5a      	adds	r2, r3, #1
 8003318:	60ba      	str	r2, [r7, #8]
 800331a:	b2ca      	uxtb	r2, r1
 800331c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	3301      	adds	r3, #1
 8003322:	617b      	str	r3, [r7, #20]
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	429a      	cmp	r2, r3
 800332a:	dbf0      	blt.n	800330e <_read+0x12>
  }

  return len;
 800332c:	687b      	ldr	r3, [r7, #4]
}
 800332e:	4618      	mov	r0, r3
 8003330:	3718      	adds	r7, #24
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800333e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003342:	4618      	mov	r0, r3
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr

0800334e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800334e:	b480      	push	{r7}
 8003350:	b083      	sub	sp, #12
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
 8003356:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800335e:	605a      	str	r2, [r3, #4]
  return 0;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr

0800336e <_isatty>:

int _isatty(int file)
{
 800336e:	b480      	push	{r7}
 8003370:	b083      	sub	sp, #12
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003376:	2301      	movs	r3, #1
}
 8003378:	4618      	mov	r0, r3
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3714      	adds	r7, #20
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
	...

080033a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033a8:	4a14      	ldr	r2, [pc, #80]	; (80033fc <_sbrk+0x5c>)
 80033aa:	4b15      	ldr	r3, [pc, #84]	; (8003400 <_sbrk+0x60>)
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033b4:	4b13      	ldr	r3, [pc, #76]	; (8003404 <_sbrk+0x64>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d102      	bne.n	80033c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033bc:	4b11      	ldr	r3, [pc, #68]	; (8003404 <_sbrk+0x64>)
 80033be:	4a12      	ldr	r2, [pc, #72]	; (8003408 <_sbrk+0x68>)
 80033c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033c2:	4b10      	ldr	r3, [pc, #64]	; (8003404 <_sbrk+0x64>)
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4413      	add	r3, r2
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d207      	bcs.n	80033e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033d0:	f006 fa64 	bl	800989c <__errno>
 80033d4:	4603      	mov	r3, r0
 80033d6:	220c      	movs	r2, #12
 80033d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033da:	f04f 33ff 	mov.w	r3, #4294967295
 80033de:	e009      	b.n	80033f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033e0:	4b08      	ldr	r3, [pc, #32]	; (8003404 <_sbrk+0x64>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033e6:	4b07      	ldr	r3, [pc, #28]	; (8003404 <_sbrk+0x64>)
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4413      	add	r3, r2
 80033ee:	4a05      	ldr	r2, [pc, #20]	; (8003404 <_sbrk+0x64>)
 80033f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80033f2:	68fb      	ldr	r3, [r7, #12]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3718      	adds	r7, #24
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	20030000 	.word	0x20030000
 8003400:	00000400 	.word	0x00000400
 8003404:	20000ec4 	.word	0x20000ec4
 8003408:	20001018 	.word	0x20001018

0800340c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003410:	4b06      	ldr	r3, [pc, #24]	; (800342c <SystemInit+0x20>)
 8003412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003416:	4a05      	ldr	r2, [pc, #20]	; (800342c <SystemInit+0x20>)
 8003418:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800341c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003420:	bf00      	nop
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	e000ed00 	.word	0xe000ed00

08003430 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003430:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003468 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003434:	f7ff ffea 	bl	800340c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003438:	480c      	ldr	r0, [pc, #48]	; (800346c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800343a:	490d      	ldr	r1, [pc, #52]	; (8003470 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800343c:	4a0d      	ldr	r2, [pc, #52]	; (8003474 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800343e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003440:	e002      	b.n	8003448 <LoopCopyDataInit>

08003442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003446:	3304      	adds	r3, #4

08003448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800344a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800344c:	d3f9      	bcc.n	8003442 <CopyDataInit>
  


/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800344e:	4a0a      	ldr	r2, [pc, #40]	; (8003478 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003450:	4c0a      	ldr	r4, [pc, #40]	; (800347c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003454:	e001      	b.n	800345a <LoopFillZerobss>

08003456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003458:	3204      	adds	r2, #4

0800345a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800345a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800345c:	d3fb      	bcc.n	8003456 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800345e:	f006 fa23 	bl	80098a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003462:	f7fd ff95 	bl	8001390 <main>
  bx  lr    
 8003466:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003468:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800346c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003470:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003474:	0800bdd4 	.word	0x0800bdd4
  ldr r2, =_sbss
 8003478:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800347c:	20001018 	.word	0x20001018

08003480 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003480:	e7fe      	b.n	8003480 <CAN1_RX0_IRQHandler>
	...

08003484 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003488:	4b0e      	ldr	r3, [pc, #56]	; (80034c4 <HAL_Init+0x40>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a0d      	ldr	r2, [pc, #52]	; (80034c4 <HAL_Init+0x40>)
 800348e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003492:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003494:	4b0b      	ldr	r3, [pc, #44]	; (80034c4 <HAL_Init+0x40>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a0a      	ldr	r2, [pc, #40]	; (80034c4 <HAL_Init+0x40>)
 800349a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800349e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034a0:	4b08      	ldr	r3, [pc, #32]	; (80034c4 <HAL_Init+0x40>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a07      	ldr	r2, [pc, #28]	; (80034c4 <HAL_Init+0x40>)
 80034a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034ac:	2003      	movs	r0, #3
 80034ae:	f000 fe95 	bl	80041dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034b2:	2000      	movs	r0, #0
 80034b4:	f000 f808 	bl	80034c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034b8:	f7ff f85a 	bl	8002570 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	40023c00 	.word	0x40023c00

080034c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034d0:	4b12      	ldr	r3, [pc, #72]	; (800351c <HAL_InitTick+0x54>)
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	4b12      	ldr	r3, [pc, #72]	; (8003520 <HAL_InitTick+0x58>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	4619      	mov	r1, r3
 80034da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034de:	fbb3 f3f1 	udiv	r3, r3, r1
 80034e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 fead 	bl	8004246 <HAL_SYSTICK_Config>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e00e      	b.n	8003514 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b0f      	cmp	r3, #15
 80034fa:	d80a      	bhi.n	8003512 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034fc:	2200      	movs	r2, #0
 80034fe:	6879      	ldr	r1, [r7, #4]
 8003500:	f04f 30ff 	mov.w	r0, #4294967295
 8003504:	f000 fe75 	bl	80041f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003508:	4a06      	ldr	r2, [pc, #24]	; (8003524 <HAL_InitTick+0x5c>)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800350e:	2300      	movs	r3, #0
 8003510:	e000      	b.n	8003514 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
}
 8003514:	4618      	mov	r0, r3
 8003516:	3708      	adds	r7, #8
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	20000008 	.word	0x20000008
 8003520:	20000010 	.word	0x20000010
 8003524:	2000000c 	.word	0x2000000c

08003528 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800352c:	4b06      	ldr	r3, [pc, #24]	; (8003548 <HAL_IncTick+0x20>)
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	461a      	mov	r2, r3
 8003532:	4b06      	ldr	r3, [pc, #24]	; (800354c <HAL_IncTick+0x24>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4413      	add	r3, r2
 8003538:	4a04      	ldr	r2, [pc, #16]	; (800354c <HAL_IncTick+0x24>)
 800353a:	6013      	str	r3, [r2, #0]
}
 800353c:	bf00      	nop
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	20000010 	.word	0x20000010
 800354c:	20000ec8 	.word	0x20000ec8

08003550 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  return uwTick;
 8003554:	4b03      	ldr	r3, [pc, #12]	; (8003564 <HAL_GetTick+0x14>)
 8003556:	681b      	ldr	r3, [r3, #0]
}
 8003558:	4618      	mov	r0, r3
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	20000ec8 	.word	0x20000ec8

08003568 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003570:	f7ff ffee 	bl	8003550 <HAL_GetTick>
 8003574:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003580:	d005      	beq.n	800358e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003582:	4b0a      	ldr	r3, [pc, #40]	; (80035ac <HAL_Delay+0x44>)
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	461a      	mov	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	4413      	add	r3, r2
 800358c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800358e:	bf00      	nop
 8003590:	f7ff ffde 	bl	8003550 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	429a      	cmp	r2, r3
 800359e:	d8f7      	bhi.n	8003590 <HAL_Delay+0x28>
  {
  }
}
 80035a0:	bf00      	nop
 80035a2:	bf00      	nop
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	20000010 	.word	0x20000010

080035b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035b8:	2300      	movs	r3, #0
 80035ba:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e033      	b.n	800362e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d109      	bne.n	80035e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7fe fff6 	bl	80025c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	f003 0310 	and.w	r3, r3, #16
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d118      	bne.n	8003620 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80035f6:	f023 0302 	bic.w	r3, r3, #2
 80035fa:	f043 0202 	orr.w	r2, r3, #2
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 fb92 	bl	8003d2c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003612:	f023 0303 	bic.w	r3, r3, #3
 8003616:	f043 0201 	orr.w	r2, r3, #1
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	641a      	str	r2, [r3, #64]	; 0x40
 800361e:	e001      	b.n	8003624 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800362c:	7bfb      	ldrb	r3, [r7, #15]
}
 800362e:	4618      	mov	r0, r3
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b086      	sub	sp, #24
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800363e:	2300      	movs	r3, #0
 8003640:	617b      	str	r3, [r7, #20]
 8003642:	2300      	movs	r3, #0
 8003644:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	f003 0320 	and.w	r3, r3, #32
 8003664:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d049      	beq.n	8003700 <HAL_ADC_IRQHandler+0xca>
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d046      	beq.n	8003700 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	f003 0310 	and.w	r3, r3, #16
 800367a:	2b00      	cmp	r3, #0
 800367c:	d105      	bne.n	800368a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d12b      	bne.n	80036f0 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800369c:	2b00      	cmp	r3, #0
 800369e:	d127      	bne.n	80036f0 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d006      	beq.n	80036bc <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d119      	bne.n	80036f0 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 0220 	bic.w	r2, r2, #32
 80036ca:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d105      	bne.n	80036f0 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e8:	f043 0201 	orr.w	r2, r3, #1
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 f9c1 	bl	8003a78 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f06f 0212 	mvn.w	r2, #18
 80036fe:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f003 0304 	and.w	r3, r3, #4
 8003706:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800370e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d057      	beq.n	80037c6 <HAL_ADC_IRQHandler+0x190>
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d054      	beq.n	80037c6 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003720:	f003 0310 	and.w	r3, r3, #16
 8003724:	2b00      	cmp	r3, #0
 8003726:	d105      	bne.n	8003734 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d139      	bne.n	80037b6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003748:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800374c:	2b00      	cmp	r3, #0
 800374e:	d006      	beq.n	800375e <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800375a:	2b00      	cmp	r3, #0
 800375c:	d12b      	bne.n	80037b6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003768:	2b00      	cmp	r3, #0
 800376a:	d124      	bne.n	80037b6 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003776:	2b00      	cmp	r3, #0
 8003778:	d11d      	bne.n	80037b6 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800377e:	2b00      	cmp	r3, #0
 8003780:	d119      	bne.n	80037b6 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003790:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d105      	bne.n	80037b6 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	f043 0201 	orr.w	r2, r3, #1
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 fc36 	bl	8004028 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f06f 020c 	mvn.w	r2, #12
 80037c4:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d4:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d017      	beq.n	800380c <HAL_ADC_IRQHandler+0x1d6>
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d014      	beq.n	800380c <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d10d      	bne.n	800380c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 f94f 	bl	8003aa0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f06f 0201 	mvn.w	r2, #1
 800380a:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f003 0320 	and.w	r3, r3, #32
 8003812:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800381a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d015      	beq.n	800384e <HAL_ADC_IRQHandler+0x218>
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d012      	beq.n	800384e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382c:	f043 0202 	orr.w	r2, r3, #2
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f06f 0220 	mvn.w	r2, #32
 800383c:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f938 	bl	8003ab4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f06f 0220 	mvn.w	r2, #32
 800384c:	601a      	str	r2, [r3, #0]
  }
}
 800384e:	bf00      	nop
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
	...

08003858 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003864:	2300      	movs	r3, #0
 8003866:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800386e:	2b01      	cmp	r3, #1
 8003870:	d101      	bne.n	8003876 <HAL_ADC_Start_DMA+0x1e>
 8003872:	2302      	movs	r3, #2
 8003874:	e0e9      	b.n	8003a4a <HAL_ADC_Start_DMA+0x1f2>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	2b01      	cmp	r3, #1
 800388a:	d018      	beq.n	80038be <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689a      	ldr	r2, [r3, #8]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0201 	orr.w	r2, r2, #1
 800389a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800389c:	4b6d      	ldr	r3, [pc, #436]	; (8003a54 <HAL_ADC_Start_DMA+0x1fc>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a6d      	ldr	r2, [pc, #436]	; (8003a58 <HAL_ADC_Start_DMA+0x200>)
 80038a2:	fba2 2303 	umull	r2, r3, r2, r3
 80038a6:	0c9a      	lsrs	r2, r3, #18
 80038a8:	4613      	mov	r3, r2
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	4413      	add	r3, r2
 80038ae:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80038b0:	e002      	b.n	80038b8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	3b01      	subs	r3, #1
 80038b6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1f9      	bne.n	80038b2 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038cc:	d107      	bne.n	80038de <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038dc:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f003 0301 	and.w	r3, r3, #1
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	f040 80a1 	bne.w	8003a30 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80038f6:	f023 0301 	bic.w	r3, r3, #1
 80038fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800390c:	2b00      	cmp	r3, #0
 800390e:	d007      	beq.n	8003920 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003914:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003918:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003924:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800392c:	d106      	bne.n	800393c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003932:	f023 0206 	bic.w	r2, r3, #6
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	645a      	str	r2, [r3, #68]	; 0x44
 800393a:	e002      	b.n	8003942 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800394a:	4b44      	ldr	r3, [pc, #272]	; (8003a5c <HAL_ADC_Start_DMA+0x204>)
 800394c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003952:	4a43      	ldr	r2, [pc, #268]	; (8003a60 <HAL_ADC_Start_DMA+0x208>)
 8003954:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395a:	4a42      	ldr	r2, [pc, #264]	; (8003a64 <HAL_ADC_Start_DMA+0x20c>)
 800395c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003962:	4a41      	ldr	r2, [pc, #260]	; (8003a68 <HAL_ADC_Start_DMA+0x210>)
 8003964:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800396e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	685a      	ldr	r2, [r3, #4]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800397e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	689a      	ldr	r2, [r3, #8]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800398e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	334c      	adds	r3, #76	; 0x4c
 800399a:	4619      	mov	r1, r3
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f000 fd0c 	bl	80043bc <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f003 031f 	and.w	r3, r3, #31
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d12a      	bne.n	8003a06 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a2d      	ldr	r2, [pc, #180]	; (8003a6c <HAL_ADC_Start_DMA+0x214>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d015      	beq.n	80039e6 <HAL_ADC_Start_DMA+0x18e>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a2c      	ldr	r2, [pc, #176]	; (8003a70 <HAL_ADC_Start_DMA+0x218>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d105      	bne.n	80039d0 <HAL_ADC_Start_DMA+0x178>
 80039c4:	4b25      	ldr	r3, [pc, #148]	; (8003a5c <HAL_ADC_Start_DMA+0x204>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f003 031f 	and.w	r3, r3, #31
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00a      	beq.n	80039e6 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a27      	ldr	r2, [pc, #156]	; (8003a74 <HAL_ADC_Start_DMA+0x21c>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d136      	bne.n	8003a48 <HAL_ADC_Start_DMA+0x1f0>
 80039da:	4b20      	ldr	r3, [pc, #128]	; (8003a5c <HAL_ADC_Start_DMA+0x204>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f003 0310 	and.w	r3, r3, #16
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d130      	bne.n	8003a48 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d129      	bne.n	8003a48 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689a      	ldr	r2, [r3, #8]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003a02:	609a      	str	r2, [r3, #8]
 8003a04:	e020      	b.n	8003a48 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a18      	ldr	r2, [pc, #96]	; (8003a6c <HAL_ADC_Start_DMA+0x214>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d11b      	bne.n	8003a48 <HAL_ADC_Start_DMA+0x1f0>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d114      	bne.n	8003a48 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	689a      	ldr	r2, [r3, #8]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003a2c:	609a      	str	r2, [r3, #8]
 8003a2e:	e00b      	b.n	8003a48 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a34:	f043 0210 	orr.w	r2, r3, #16
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a40:	f043 0201 	orr.w	r2, r3, #1
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3718      	adds	r7, #24
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	20000008 	.word	0x20000008
 8003a58:	431bde83 	.word	0x431bde83
 8003a5c:	40012300 	.word	0x40012300
 8003a60:	08003f25 	.word	0x08003f25
 8003a64:	08003fdf 	.word	0x08003fdf
 8003a68:	08003ffb 	.word	0x08003ffb
 8003a6c:	40012000 	.word	0x40012000
 8003a70:	40012100 	.word	0x40012100
 8003a74:	40012200 	.word	0x40012200

08003a78 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d101      	bne.n	8003ae4 <HAL_ADC_ConfigChannel+0x1c>
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	e113      	b.n	8003d0c <HAL_ADC_ConfigChannel+0x244>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2b09      	cmp	r3, #9
 8003af2:	d925      	bls.n	8003b40 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68d9      	ldr	r1, [r3, #12]
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	461a      	mov	r2, r3
 8003b02:	4613      	mov	r3, r2
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	4413      	add	r3, r2
 8003b08:	3b1e      	subs	r3, #30
 8003b0a:	2207      	movs	r2, #7
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	43da      	mvns	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	400a      	ands	r2, r1
 8003b18:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68d9      	ldr	r1, [r3, #12]
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	4403      	add	r3, r0
 8003b32:	3b1e      	subs	r3, #30
 8003b34:	409a      	lsls	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	60da      	str	r2, [r3, #12]
 8003b3e:	e022      	b.n	8003b86 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6919      	ldr	r1, [r3, #16]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	4613      	mov	r3, r2
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	4413      	add	r3, r2
 8003b54:	2207      	movs	r2, #7
 8003b56:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5a:	43da      	mvns	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	400a      	ands	r2, r1
 8003b62:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6919      	ldr	r1, [r3, #16]
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	689a      	ldr	r2, [r3, #8]
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	4618      	mov	r0, r3
 8003b76:	4603      	mov	r3, r0
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	4403      	add	r3, r0
 8003b7c:	409a      	lsls	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	2b06      	cmp	r3, #6
 8003b8c:	d824      	bhi.n	8003bd8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685a      	ldr	r2, [r3, #4]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	4413      	add	r3, r2
 8003b9e:	3b05      	subs	r3, #5
 8003ba0:	221f      	movs	r2, #31
 8003ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba6:	43da      	mvns	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	400a      	ands	r2, r1
 8003bae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	685a      	ldr	r2, [r3, #4]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	4413      	add	r3, r2
 8003bc8:	3b05      	subs	r3, #5
 8003bca:	fa00 f203 	lsl.w	r2, r0, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	635a      	str	r2, [r3, #52]	; 0x34
 8003bd6:	e04c      	b.n	8003c72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	2b0c      	cmp	r3, #12
 8003bde:	d824      	bhi.n	8003c2a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	685a      	ldr	r2, [r3, #4]
 8003bea:	4613      	mov	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4413      	add	r3, r2
 8003bf0:	3b23      	subs	r3, #35	; 0x23
 8003bf2:	221f      	movs	r2, #31
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	43da      	mvns	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	400a      	ands	r2, r1
 8003c00:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	4618      	mov	r0, r3
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685a      	ldr	r2, [r3, #4]
 8003c14:	4613      	mov	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	4413      	add	r3, r2
 8003c1a:	3b23      	subs	r3, #35	; 0x23
 8003c1c:	fa00 f203 	lsl.w	r2, r0, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	430a      	orrs	r2, r1
 8003c26:	631a      	str	r2, [r3, #48]	; 0x30
 8003c28:	e023      	b.n	8003c72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	4613      	mov	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	4413      	add	r3, r2
 8003c3a:	3b41      	subs	r3, #65	; 0x41
 8003c3c:	221f      	movs	r2, #31
 8003c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c42:	43da      	mvns	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	400a      	ands	r2, r1
 8003c4a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	4618      	mov	r0, r3
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	685a      	ldr	r2, [r3, #4]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	4413      	add	r3, r2
 8003c64:	3b41      	subs	r3, #65	; 0x41
 8003c66:	fa00 f203 	lsl.w	r2, r0, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c72:	4b29      	ldr	r3, [pc, #164]	; (8003d18 <HAL_ADC_ConfigChannel+0x250>)
 8003c74:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a28      	ldr	r2, [pc, #160]	; (8003d1c <HAL_ADC_ConfigChannel+0x254>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d10f      	bne.n	8003ca0 <HAL_ADC_ConfigChannel+0x1d8>
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2b12      	cmp	r3, #18
 8003c86:	d10b      	bne.n	8003ca0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a1d      	ldr	r2, [pc, #116]	; (8003d1c <HAL_ADC_ConfigChannel+0x254>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d12b      	bne.n	8003d02 <HAL_ADC_ConfigChannel+0x23a>
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a1c      	ldr	r2, [pc, #112]	; (8003d20 <HAL_ADC_ConfigChannel+0x258>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d003      	beq.n	8003cbc <HAL_ADC_ConfigChannel+0x1f4>
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2b11      	cmp	r3, #17
 8003cba:	d122      	bne.n	8003d02 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a11      	ldr	r2, [pc, #68]	; (8003d20 <HAL_ADC_ConfigChannel+0x258>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d111      	bne.n	8003d02 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003cde:	4b11      	ldr	r3, [pc, #68]	; (8003d24 <HAL_ADC_ConfigChannel+0x25c>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a11      	ldr	r2, [pc, #68]	; (8003d28 <HAL_ADC_ConfigChannel+0x260>)
 8003ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce8:	0c9a      	lsrs	r2, r3, #18
 8003cea:	4613      	mov	r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	4413      	add	r3, r2
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003cf4:	e002      	b.n	8003cfc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1f9      	bne.n	8003cf6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3714      	adds	r7, #20
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	40012300 	.word	0x40012300
 8003d1c:	40012000 	.word	0x40012000
 8003d20:	10000012 	.word	0x10000012
 8003d24:	20000008 	.word	0x20000008
 8003d28:	431bde83 	.word	0x431bde83

08003d2c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d34:	4b79      	ldr	r3, [pc, #484]	; (8003f1c <ADC_Init+0x1f0>)
 8003d36:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	685a      	ldr	r2, [r3, #4]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	431a      	orrs	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6859      	ldr	r1, [r3, #4]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	021a      	lsls	r2, r3, #8
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003d84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	6859      	ldr	r1, [r3, #4]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689a      	ldr	r2, [r3, #8]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	430a      	orrs	r2, r1
 8003d96:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689a      	ldr	r2, [r3, #8]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003da6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6899      	ldr	r1, [r3, #8]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	68da      	ldr	r2, [r3, #12]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dbe:	4a58      	ldr	r2, [pc, #352]	; (8003f20 <ADC_Init+0x1f4>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d022      	beq.n	8003e0a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689a      	ldr	r2, [r3, #8]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003dd2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6899      	ldr	r1, [r3, #8]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	430a      	orrs	r2, r1
 8003de4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	689a      	ldr	r2, [r3, #8]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003df4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	6899      	ldr	r1, [r3, #8]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	430a      	orrs	r2, r1
 8003e06:	609a      	str	r2, [r3, #8]
 8003e08:	e00f      	b.n	8003e2a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	689a      	ldr	r2, [r3, #8]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	689a      	ldr	r2, [r3, #8]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003e28:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 0202 	bic.w	r2, r2, #2
 8003e38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6899      	ldr	r1, [r3, #8]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	7e1b      	ldrb	r3, [r3, #24]
 8003e44:	005a      	lsls	r2, r3, #1
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d01b      	beq.n	8003e90 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	685a      	ldr	r2, [r3, #4]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e66:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	685a      	ldr	r2, [r3, #4]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003e76:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	6859      	ldr	r1, [r3, #4]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e82:	3b01      	subs	r3, #1
 8003e84:	035a      	lsls	r2, r3, #13
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	605a      	str	r2, [r3, #4]
 8003e8e:	e007      	b.n	8003ea0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e9e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003eae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	051a      	lsls	r2, r3, #20
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	689a      	ldr	r2, [r3, #8]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ed4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	6899      	ldr	r1, [r3, #8]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003ee2:	025a      	lsls	r2, r3, #9
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689a      	ldr	r2, [r3, #8]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003efa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6899      	ldr	r1, [r3, #8]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	029a      	lsls	r2, r3, #10
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	609a      	str	r2, [r3, #8]
}
 8003f10:	bf00      	nop
 8003f12:	3714      	adds	r7, #20
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr
 8003f1c:	40012300 	.word	0x40012300
 8003f20:	0f000001 	.word	0x0f000001

08003f24 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f30:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f36:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d13c      	bne.n	8003fb8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d12b      	bne.n	8003fb0 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d127      	bne.n	8003fb0 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f66:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d006      	beq.n	8003f7c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d119      	bne.n	8003fb0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 0220 	bic.w	r2, r2, #32
 8003f8a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d105      	bne.n	8003fb0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa8:	f043 0201 	orr.w	r2, r3, #1
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f7ff fd61 	bl	8003a78 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003fb6:	e00e      	b.n	8003fd6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbc:	f003 0310 	and.w	r3, r3, #16
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d003      	beq.n	8003fcc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f7ff fd75 	bl	8003ab4 <HAL_ADC_ErrorCallback>
}
 8003fca:	e004      	b.n	8003fd6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	4798      	blx	r3
}
 8003fd6:	bf00      	nop
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b084      	sub	sp, #16
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fea:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f7ff fd4d 	bl	8003a8c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ff2:	bf00      	nop
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b084      	sub	sp, #16
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004006:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2240      	movs	r2, #64	; 0x40
 800400c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004012:	f043 0204 	orr.w	r2, r3, #4
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f7ff fd4a 	bl	8003ab4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004020:	bf00      	nop
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <__NVIC_SetPriorityGrouping>:
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f003 0307 	and.w	r3, r3, #7
 800404a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800404c:	4b0c      	ldr	r3, [pc, #48]	; (8004080 <__NVIC_SetPriorityGrouping+0x44>)
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004052:	68ba      	ldr	r2, [r7, #8]
 8004054:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004058:	4013      	ands	r3, r2
 800405a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004064:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800406c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800406e:	4a04      	ldr	r2, [pc, #16]	; (8004080 <__NVIC_SetPriorityGrouping+0x44>)
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	60d3      	str	r3, [r2, #12]
}
 8004074:	bf00      	nop
 8004076:	3714      	adds	r7, #20
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr
 8004080:	e000ed00 	.word	0xe000ed00

08004084 <__NVIC_GetPriorityGrouping>:
{
 8004084:	b480      	push	{r7}
 8004086:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004088:	4b04      	ldr	r3, [pc, #16]	; (800409c <__NVIC_GetPriorityGrouping+0x18>)
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	0a1b      	lsrs	r3, r3, #8
 800408e:	f003 0307 	and.w	r3, r3, #7
}
 8004092:	4618      	mov	r0, r3
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	e000ed00 	.word	0xe000ed00

080040a0 <__NVIC_EnableIRQ>:
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	4603      	mov	r3, r0
 80040a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	db0b      	blt.n	80040ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040b2:	79fb      	ldrb	r3, [r7, #7]
 80040b4:	f003 021f 	and.w	r2, r3, #31
 80040b8:	4907      	ldr	r1, [pc, #28]	; (80040d8 <__NVIC_EnableIRQ+0x38>)
 80040ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040be:	095b      	lsrs	r3, r3, #5
 80040c0:	2001      	movs	r0, #1
 80040c2:	fa00 f202 	lsl.w	r2, r0, r2
 80040c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80040ca:	bf00      	nop
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	e000e100 	.word	0xe000e100

080040dc <__NVIC_SetPriority>:
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	4603      	mov	r3, r0
 80040e4:	6039      	str	r1, [r7, #0]
 80040e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	db0a      	blt.n	8004106 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	b2da      	uxtb	r2, r3
 80040f4:	490c      	ldr	r1, [pc, #48]	; (8004128 <__NVIC_SetPriority+0x4c>)
 80040f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040fa:	0112      	lsls	r2, r2, #4
 80040fc:	b2d2      	uxtb	r2, r2
 80040fe:	440b      	add	r3, r1
 8004100:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004104:	e00a      	b.n	800411c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	b2da      	uxtb	r2, r3
 800410a:	4908      	ldr	r1, [pc, #32]	; (800412c <__NVIC_SetPriority+0x50>)
 800410c:	79fb      	ldrb	r3, [r7, #7]
 800410e:	f003 030f 	and.w	r3, r3, #15
 8004112:	3b04      	subs	r3, #4
 8004114:	0112      	lsls	r2, r2, #4
 8004116:	b2d2      	uxtb	r2, r2
 8004118:	440b      	add	r3, r1
 800411a:	761a      	strb	r2, [r3, #24]
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr
 8004128:	e000e100 	.word	0xe000e100
 800412c:	e000ed00 	.word	0xe000ed00

08004130 <NVIC_EncodePriority>:
{
 8004130:	b480      	push	{r7}
 8004132:	b089      	sub	sp, #36	; 0x24
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f003 0307 	and.w	r3, r3, #7
 8004142:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	f1c3 0307 	rsb	r3, r3, #7
 800414a:	2b04      	cmp	r3, #4
 800414c:	bf28      	it	cs
 800414e:	2304      	movcs	r3, #4
 8004150:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	3304      	adds	r3, #4
 8004156:	2b06      	cmp	r3, #6
 8004158:	d902      	bls.n	8004160 <NVIC_EncodePriority+0x30>
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	3b03      	subs	r3, #3
 800415e:	e000      	b.n	8004162 <NVIC_EncodePriority+0x32>
 8004160:	2300      	movs	r3, #0
 8004162:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004164:	f04f 32ff 	mov.w	r2, #4294967295
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	fa02 f303 	lsl.w	r3, r2, r3
 800416e:	43da      	mvns	r2, r3
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	401a      	ands	r2, r3
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004178:	f04f 31ff 	mov.w	r1, #4294967295
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	fa01 f303 	lsl.w	r3, r1, r3
 8004182:	43d9      	mvns	r1, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004188:	4313      	orrs	r3, r2
}
 800418a:	4618      	mov	r0, r3
 800418c:	3724      	adds	r7, #36	; 0x24
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
	...

08004198 <SysTick_Config>:
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	3b01      	subs	r3, #1
 80041a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041a8:	d301      	bcc.n	80041ae <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80041aa:	2301      	movs	r3, #1
 80041ac:	e00f      	b.n	80041ce <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041ae:	4a0a      	ldr	r2, [pc, #40]	; (80041d8 <SysTick_Config+0x40>)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	3b01      	subs	r3, #1
 80041b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041b6:	210f      	movs	r1, #15
 80041b8:	f04f 30ff 	mov.w	r0, #4294967295
 80041bc:	f7ff ff8e 	bl	80040dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041c0:	4b05      	ldr	r3, [pc, #20]	; (80041d8 <SysTick_Config+0x40>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041c6:	4b04      	ldr	r3, [pc, #16]	; (80041d8 <SysTick_Config+0x40>)
 80041c8:	2207      	movs	r2, #7
 80041ca:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	e000e010 	.word	0xe000e010

080041dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f7ff ff29 	bl	800403c <__NVIC_SetPriorityGrouping>
}
 80041ea:	bf00      	nop
 80041ec:	3708      	adds	r7, #8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b086      	sub	sp, #24
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	4603      	mov	r3, r0
 80041fa:	60b9      	str	r1, [r7, #8]
 80041fc:	607a      	str	r2, [r7, #4]
 80041fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004200:	2300      	movs	r3, #0
 8004202:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004204:	f7ff ff3e 	bl	8004084 <__NVIC_GetPriorityGrouping>
 8004208:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	68b9      	ldr	r1, [r7, #8]
 800420e:	6978      	ldr	r0, [r7, #20]
 8004210:	f7ff ff8e 	bl	8004130 <NVIC_EncodePriority>
 8004214:	4602      	mov	r2, r0
 8004216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800421a:	4611      	mov	r1, r2
 800421c:	4618      	mov	r0, r3
 800421e:	f7ff ff5d 	bl	80040dc <__NVIC_SetPriority>
}
 8004222:	bf00      	nop
 8004224:	3718      	adds	r7, #24
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b082      	sub	sp, #8
 800422e:	af00      	add	r7, sp, #0
 8004230:	4603      	mov	r3, r0
 8004232:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004238:	4618      	mov	r0, r3
 800423a:	f7ff ff31 	bl	80040a0 <__NVIC_EnableIRQ>
}
 800423e:	bf00      	nop
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b082      	sub	sp, #8
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7ff ffa2 	bl	8004198 <SysTick_Config>
 8004254:	4603      	mov	r3, r0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
	...

08004260 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004268:	2300      	movs	r3, #0
 800426a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800426c:	f7ff f970 	bl	8003550 <HAL_GetTick>
 8004270:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d101      	bne.n	800427c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e099      	b.n	80043b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2202      	movs	r2, #2
 8004280:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 0201 	bic.w	r2, r2, #1
 800429a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800429c:	e00f      	b.n	80042be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800429e:	f7ff f957 	bl	8003550 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	2b05      	cmp	r3, #5
 80042aa:	d908      	bls.n	80042be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2220      	movs	r2, #32
 80042b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2203      	movs	r2, #3
 80042b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e078      	b.n	80043b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1e8      	bne.n	800429e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	4b38      	ldr	r3, [pc, #224]	; (80043b8 <HAL_DMA_Init+0x158>)
 80042d8:	4013      	ands	r3, r2
 80042da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004302:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a1b      	ldr	r3, [r3, #32]
 8004308:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	4313      	orrs	r3, r2
 800430e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004314:	2b04      	cmp	r3, #4
 8004316:	d107      	bne.n	8004328 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004320:	4313      	orrs	r3, r2
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	4313      	orrs	r3, r2
 8004326:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	f023 0307 	bic.w	r3, r3, #7
 800433e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	4313      	orrs	r3, r2
 8004348:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434e:	2b04      	cmp	r3, #4
 8004350:	d117      	bne.n	8004382 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	4313      	orrs	r3, r2
 800435a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00e      	beq.n	8004382 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 fb01 	bl	800496c <DMA_CheckFifoParam>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d008      	beq.n	8004382 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2240      	movs	r2, #64	; 0x40
 8004374:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800437e:	2301      	movs	r3, #1
 8004380:	e016      	b.n	80043b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 fab8 	bl	8004900 <DMA_CalcBaseAndBitshift>
 8004390:	4603      	mov	r3, r0
 8004392:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004398:	223f      	movs	r2, #63	; 0x3f
 800439a:	409a      	lsls	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2201      	movs	r2, #1
 80043aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3718      	adds	r7, #24
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	f010803f 	.word	0xf010803f

080043bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
 80043c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043ca:	2300      	movs	r3, #0
 80043cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d101      	bne.n	80043e2 <HAL_DMA_Start_IT+0x26>
 80043de:	2302      	movs	r3, #2
 80043e0:	e040      	b.n	8004464 <HAL_DMA_Start_IT+0xa8>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d12f      	bne.n	8004456 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2202      	movs	r2, #2
 80043fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	68b9      	ldr	r1, [r7, #8]
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f000 fa4a 	bl	80048a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004414:	223f      	movs	r2, #63	; 0x3f
 8004416:	409a      	lsls	r2, r3
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f042 0216 	orr.w	r2, r2, #22
 800442a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004430:	2b00      	cmp	r3, #0
 8004432:	d007      	beq.n	8004444 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f042 0208 	orr.w	r2, r2, #8
 8004442:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f042 0201 	orr.w	r2, r2, #1
 8004452:	601a      	str	r2, [r3, #0]
 8004454:	e005      	b.n	8004462 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800445e:	2302      	movs	r3, #2
 8004460:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004462:	7dfb      	ldrb	r3, [r7, #23]
}
 8004464:	4618      	mov	r0, r3
 8004466:	3718      	adds	r7, #24
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004478:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800447a:	f7ff f869 	bl	8003550 <HAL_GetTick>
 800447e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004486:	b2db      	uxtb	r3, r3
 8004488:	2b02      	cmp	r3, #2
 800448a:	d008      	beq.n	800449e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2280      	movs	r2, #128	; 0x80
 8004490:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e052      	b.n	8004544 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f022 0216 	bic.w	r2, r2, #22
 80044ac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	695a      	ldr	r2, [r3, #20]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044bc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d103      	bne.n	80044ce <HAL_DMA_Abort+0x62>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d007      	beq.n	80044de <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0208 	bic.w	r2, r2, #8
 80044dc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f022 0201 	bic.w	r2, r2, #1
 80044ec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044ee:	e013      	b.n	8004518 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80044f0:	f7ff f82e 	bl	8003550 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b05      	cmp	r3, #5
 80044fc:	d90c      	bls.n	8004518 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2220      	movs	r2, #32
 8004502:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2203      	movs	r2, #3
 8004508:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e015      	b.n	8004544 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1e4      	bne.n	80044f0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800452a:	223f      	movs	r2, #63	; 0x3f
 800452c:	409a      	lsls	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800455a:	b2db      	uxtb	r3, r3
 800455c:	2b02      	cmp	r3, #2
 800455e:	d004      	beq.n	800456a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2280      	movs	r2, #128	; 0x80
 8004564:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e00c      	b.n	8004584 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2205      	movs	r2, #5
 800456e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f022 0201 	bic.w	r2, r2, #1
 8004580:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b086      	sub	sp, #24
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004598:	2300      	movs	r3, #0
 800459a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800459c:	4b8e      	ldr	r3, [pc, #568]	; (80047d8 <HAL_DMA_IRQHandler+0x248>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a8e      	ldr	r2, [pc, #568]	; (80047dc <HAL_DMA_IRQHandler+0x24c>)
 80045a2:	fba2 2303 	umull	r2, r3, r2, r3
 80045a6:	0a9b      	lsrs	r3, r3, #10
 80045a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ba:	2208      	movs	r2, #8
 80045bc:	409a      	lsls	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	4013      	ands	r3, r2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d01a      	beq.n	80045fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0304 	and.w	r3, r3, #4
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d013      	beq.n	80045fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 0204 	bic.w	r2, r2, #4
 80045e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045e8:	2208      	movs	r2, #8
 80045ea:	409a      	lsls	r2, r3
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f4:	f043 0201 	orr.w	r2, r3, #1
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004600:	2201      	movs	r2, #1
 8004602:	409a      	lsls	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	4013      	ands	r3, r2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d012      	beq.n	8004632 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00b      	beq.n	8004632 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800461e:	2201      	movs	r2, #1
 8004620:	409a      	lsls	r2, r3
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800462a:	f043 0202 	orr.w	r2, r3, #2
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004636:	2204      	movs	r2, #4
 8004638:	409a      	lsls	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	4013      	ands	r3, r2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d012      	beq.n	8004668 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00b      	beq.n	8004668 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004654:	2204      	movs	r2, #4
 8004656:	409a      	lsls	r2, r3
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004660:	f043 0204 	orr.w	r2, r3, #4
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800466c:	2210      	movs	r2, #16
 800466e:	409a      	lsls	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	4013      	ands	r3, r2
 8004674:	2b00      	cmp	r3, #0
 8004676:	d043      	beq.n	8004700 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0308 	and.w	r3, r3, #8
 8004682:	2b00      	cmp	r3, #0
 8004684:	d03c      	beq.n	8004700 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800468a:	2210      	movs	r2, #16
 800468c:	409a      	lsls	r2, r3
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d018      	beq.n	80046d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d108      	bne.n	80046c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d024      	beq.n	8004700 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	4798      	blx	r3
 80046be:	e01f      	b.n	8004700 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d01b      	beq.n	8004700 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	4798      	blx	r3
 80046d0:	e016      	b.n	8004700 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d107      	bne.n	80046f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 0208 	bic.w	r2, r2, #8
 80046ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d003      	beq.n	8004700 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004704:	2220      	movs	r2, #32
 8004706:	409a      	lsls	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	4013      	ands	r3, r2
 800470c:	2b00      	cmp	r3, #0
 800470e:	f000 808f 	beq.w	8004830 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0310 	and.w	r3, r3, #16
 800471c:	2b00      	cmp	r3, #0
 800471e:	f000 8087 	beq.w	8004830 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004726:	2220      	movs	r2, #32
 8004728:	409a      	lsls	r2, r3
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2b05      	cmp	r3, #5
 8004738:	d136      	bne.n	80047a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f022 0216 	bic.w	r2, r2, #22
 8004748:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	695a      	ldr	r2, [r3, #20]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004758:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475e:	2b00      	cmp	r3, #0
 8004760:	d103      	bne.n	800476a <HAL_DMA_IRQHandler+0x1da>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004766:	2b00      	cmp	r3, #0
 8004768:	d007      	beq.n	800477a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f022 0208 	bic.w	r2, r2, #8
 8004778:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800477e:	223f      	movs	r2, #63	; 0x3f
 8004780:	409a      	lsls	r2, r3
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800479a:	2b00      	cmp	r3, #0
 800479c:	d07e      	beq.n	800489c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	4798      	blx	r3
        }
        return;
 80047a6:	e079      	b.n	800489c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d01d      	beq.n	80047f2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d10d      	bne.n	80047e0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d031      	beq.n	8004830 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	4798      	blx	r3
 80047d4:	e02c      	b.n	8004830 <HAL_DMA_IRQHandler+0x2a0>
 80047d6:	bf00      	nop
 80047d8:	20000008 	.word	0x20000008
 80047dc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d023      	beq.n	8004830 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	4798      	blx	r3
 80047f0:	e01e      	b.n	8004830 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10f      	bne.n	8004820 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 0210 	bic.w	r2, r2, #16
 800480e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004824:	2b00      	cmp	r3, #0
 8004826:	d003      	beq.n	8004830 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004834:	2b00      	cmp	r3, #0
 8004836:	d032      	beq.n	800489e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800483c:	f003 0301 	and.w	r3, r3, #1
 8004840:	2b00      	cmp	r3, #0
 8004842:	d022      	beq.n	800488a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2205      	movs	r2, #5
 8004848:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 0201 	bic.w	r2, r2, #1
 800485a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	3301      	adds	r3, #1
 8004860:	60bb      	str	r3, [r7, #8]
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	429a      	cmp	r2, r3
 8004866:	d307      	bcc.n	8004878 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1f2      	bne.n	800485c <HAL_DMA_IRQHandler+0x2cc>
 8004876:	e000      	b.n	800487a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004878:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800488e:	2b00      	cmp	r3, #0
 8004890:	d005      	beq.n	800489e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	4798      	blx	r3
 800489a:	e000      	b.n	800489e <HAL_DMA_IRQHandler+0x30e>
        return;
 800489c:	bf00      	nop
    }
  }
}
 800489e:	3718      	adds	r7, #24
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	607a      	str	r2, [r7, #4]
 80048b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80048c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	2b40      	cmp	r3, #64	; 0x40
 80048d0:	d108      	bne.n	80048e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80048e2:	e007      	b.n	80048f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68ba      	ldr	r2, [r7, #8]
 80048ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	60da      	str	r2, [r3, #12]
}
 80048f4:	bf00      	nop
 80048f6:	3714      	adds	r7, #20
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	b2db      	uxtb	r3, r3
 800490e:	3b10      	subs	r3, #16
 8004910:	4a14      	ldr	r2, [pc, #80]	; (8004964 <DMA_CalcBaseAndBitshift+0x64>)
 8004912:	fba2 2303 	umull	r2, r3, r2, r3
 8004916:	091b      	lsrs	r3, r3, #4
 8004918:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800491a:	4a13      	ldr	r2, [pc, #76]	; (8004968 <DMA_CalcBaseAndBitshift+0x68>)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	4413      	add	r3, r2
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	461a      	mov	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2b03      	cmp	r3, #3
 800492c:	d909      	bls.n	8004942 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004936:	f023 0303 	bic.w	r3, r3, #3
 800493a:	1d1a      	adds	r2, r3, #4
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	659a      	str	r2, [r3, #88]	; 0x58
 8004940:	e007      	b.n	8004952 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800494a:	f023 0303 	bic.w	r3, r3, #3
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004956:	4618      	mov	r0, r3
 8004958:	3714      	adds	r7, #20
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	aaaaaaab 	.word	0xaaaaaaab
 8004968:	0800ba48 	.word	0x0800ba48

0800496c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004974:	2300      	movs	r3, #0
 8004976:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d11f      	bne.n	80049c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	2b03      	cmp	r3, #3
 800498a:	d856      	bhi.n	8004a3a <DMA_CheckFifoParam+0xce>
 800498c:	a201      	add	r2, pc, #4	; (adr r2, 8004994 <DMA_CheckFifoParam+0x28>)
 800498e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004992:	bf00      	nop
 8004994:	080049a5 	.word	0x080049a5
 8004998:	080049b7 	.word	0x080049b7
 800499c:	080049a5 	.word	0x080049a5
 80049a0:	08004a3b 	.word	0x08004a3b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d046      	beq.n	8004a3e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049b4:	e043      	b.n	8004a3e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80049be:	d140      	bne.n	8004a42 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049c4:	e03d      	b.n	8004a42 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049ce:	d121      	bne.n	8004a14 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	2b03      	cmp	r3, #3
 80049d4:	d837      	bhi.n	8004a46 <DMA_CheckFifoParam+0xda>
 80049d6:	a201      	add	r2, pc, #4	; (adr r2, 80049dc <DMA_CheckFifoParam+0x70>)
 80049d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049dc:	080049ed 	.word	0x080049ed
 80049e0:	080049f3 	.word	0x080049f3
 80049e4:	080049ed 	.word	0x080049ed
 80049e8:	08004a05 	.word	0x08004a05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	73fb      	strb	r3, [r7, #15]
      break;
 80049f0:	e030      	b.n	8004a54 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d025      	beq.n	8004a4a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a02:	e022      	b.n	8004a4a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a0c:	d11f      	bne.n	8004a4e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004a12:	e01c      	b.n	8004a4e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d903      	bls.n	8004a22 <DMA_CheckFifoParam+0xb6>
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	2b03      	cmp	r3, #3
 8004a1e:	d003      	beq.n	8004a28 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004a20:	e018      	b.n	8004a54 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	73fb      	strb	r3, [r7, #15]
      break;
 8004a26:	e015      	b.n	8004a54 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00e      	beq.n	8004a52 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	73fb      	strb	r3, [r7, #15]
      break;
 8004a38:	e00b      	b.n	8004a52 <DMA_CheckFifoParam+0xe6>
      break;
 8004a3a:	bf00      	nop
 8004a3c:	e00a      	b.n	8004a54 <DMA_CheckFifoParam+0xe8>
      break;
 8004a3e:	bf00      	nop
 8004a40:	e008      	b.n	8004a54 <DMA_CheckFifoParam+0xe8>
      break;
 8004a42:	bf00      	nop
 8004a44:	e006      	b.n	8004a54 <DMA_CheckFifoParam+0xe8>
      break;
 8004a46:	bf00      	nop
 8004a48:	e004      	b.n	8004a54 <DMA_CheckFifoParam+0xe8>
      break;
 8004a4a:	bf00      	nop
 8004a4c:	e002      	b.n	8004a54 <DMA_CheckFifoParam+0xe8>
      break;   
 8004a4e:	bf00      	nop
 8004a50:	e000      	b.n	8004a54 <DMA_CheckFifoParam+0xe8>
      break;
 8004a52:	bf00      	nop
    }
  } 
  
  return status; 
 8004a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop

08004a64 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e06c      	b.n	8004b50 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d106      	bne.n	8004a8e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2223      	movs	r2, #35	; 0x23
 8004a84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f7fd fe19 	bl	80026c0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a8e:	2300      	movs	r3, #0
 8004a90:	60bb      	str	r3, [r7, #8]
 8004a92:	4b31      	ldr	r3, [pc, #196]	; (8004b58 <HAL_ETH_Init+0xf4>)
 8004a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a96:	4a30      	ldr	r2, [pc, #192]	; (8004b58 <HAL_ETH_Init+0xf4>)
 8004a98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8004a9e:	4b2e      	ldr	r3, [pc, #184]	; (8004b58 <HAL_ETH_Init+0xf4>)
 8004aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aa6:	60bb      	str	r3, [r7, #8]
 8004aa8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004aaa:	4b2c      	ldr	r3, [pc, #176]	; (8004b5c <HAL_ETH_Init+0xf8>)
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	4a2b      	ldr	r2, [pc, #172]	; (8004b5c <HAL_ETH_Init+0xf8>)
 8004ab0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004ab4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004ab6:	4b29      	ldr	r3, [pc, #164]	; (8004b5c <HAL_ETH_Init+0xf8>)
 8004ab8:	685a      	ldr	r2, [r3, #4]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	4927      	ldr	r1, [pc, #156]	; (8004b5c <HAL_ETH_Init+0xf8>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8004ac4:	4b25      	ldr	r3, [pc, #148]	; (8004b5c <HAL_ETH_Init+0xf8>)
 8004ac6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	6812      	ldr	r2, [r2, #0]
 8004ad6:	f043 0301 	orr.w	r3, r3, #1
 8004ada:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004ade:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ae0:	f7fe fd36 	bl	8003550 <HAL_GetTick>
 8004ae4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004ae6:	e011      	b.n	8004b0c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004ae8:	f7fe fd32 	bl	8003550 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004af6:	d909      	bls.n	8004b0c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2204      	movs	r2, #4
 8004afc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	22e0      	movs	r2, #224	; 0xe0
 8004b04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e021      	b.n	8004b50 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1e4      	bne.n	8004ae8 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f958 	bl	8004dd4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 f9ff 	bl	8004f28 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 fa55 	bl	8004fda <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	461a      	mov	r2, r3
 8004b36:	2100      	movs	r1, #0
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 f9bd 	bl	8004eb8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2210      	movs	r2, #16
 8004b4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	40023800 	.word	0x40023800
 8004b5c:	40013800 	.word	0x40013800

08004b60 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	4b51      	ldr	r3, [pc, #324]	; (8004cbc <ETH_SetMACConfig+0x15c>)
 8004b76:	4013      	ands	r3, r2
 8004b78:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	7c1b      	ldrb	r3, [r3, #16]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d102      	bne.n	8004b88 <ETH_SetMACConfig+0x28>
 8004b82:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004b86:	e000      	b.n	8004b8a <ETH_SetMACConfig+0x2a>
 8004b88:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	7c5b      	ldrb	r3, [r3, #17]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d102      	bne.n	8004b98 <ETH_SetMACConfig+0x38>
 8004b92:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004b96:	e000      	b.n	8004b9a <ETH_SetMACConfig+0x3a>
 8004b98:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004b9a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004ba0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	7fdb      	ldrb	r3, [r3, #31]
 8004ba6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004ba8:	431a      	orrs	r2, r3
                        macconf->Speed |
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004bae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004bb0:	683a      	ldr	r2, [r7, #0]
 8004bb2:	7f92      	ldrb	r2, [r2, #30]
 8004bb4:	2a00      	cmp	r2, #0
 8004bb6:	d102      	bne.n	8004bbe <ETH_SetMACConfig+0x5e>
 8004bb8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004bbc:	e000      	b.n	8004bc0 <ETH_SetMACConfig+0x60>
 8004bbe:	2200      	movs	r2, #0
                        macconf->Speed |
 8004bc0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	7f1b      	ldrb	r3, [r3, #28]
 8004bc6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004bc8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004bce:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	791b      	ldrb	r3, [r3, #4]
 8004bd4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8004bd6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004bd8:	683a      	ldr	r2, [r7, #0]
 8004bda:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004bde:	2a00      	cmp	r2, #0
 8004be0:	d102      	bne.n	8004be8 <ETH_SetMACConfig+0x88>
 8004be2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004be6:	e000      	b.n	8004bea <ETH_SetMACConfig+0x8a>
 8004be8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004bea:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	7bdb      	ldrb	r3, [r3, #15]
 8004bf0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004bf2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004bf8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c00:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004c02:	4313      	orrs	r3, r2
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004c1a:	2001      	movs	r0, #1
 8004c1c:	f7fe fca4 	bl	8003568 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004c36:	4013      	ands	r3, r2
 8004c38:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c3e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004c46:	2a00      	cmp	r2, #0
 8004c48:	d101      	bne.n	8004c4e <ETH_SetMACConfig+0xee>
 8004c4a:	2280      	movs	r2, #128	; 0x80
 8004c4c:	e000      	b.n	8004c50 <ETH_SetMACConfig+0xf0>
 8004c4e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004c50:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004c56:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004c58:	683a      	ldr	r2, [r7, #0]
 8004c5a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8004c5e:	2a01      	cmp	r2, #1
 8004c60:	d101      	bne.n	8004c66 <ETH_SetMACConfig+0x106>
 8004c62:	2208      	movs	r2, #8
 8004c64:	e000      	b.n	8004c68 <ETH_SetMACConfig+0x108>
 8004c66:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004c68:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8004c70:	2a01      	cmp	r2, #1
 8004c72:	d101      	bne.n	8004c78 <ETH_SetMACConfig+0x118>
 8004c74:	2204      	movs	r2, #4
 8004c76:	e000      	b.n	8004c7a <ETH_SetMACConfig+0x11a>
 8004c78:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004c7a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8004c7c:	683a      	ldr	r2, [r7, #0]
 8004c7e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8004c82:	2a01      	cmp	r2, #1
 8004c84:	d101      	bne.n	8004c8a <ETH_SetMACConfig+0x12a>
 8004c86:	2202      	movs	r2, #2
 8004c88:	e000      	b.n	8004c8c <ETH_SetMACConfig+0x12c>
 8004c8a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004ca4:	2001      	movs	r0, #1
 8004ca6:	f7fe fc5f 	bl	8003568 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	619a      	str	r2, [r3, #24]
}
 8004cb2:	bf00      	nop
 8004cb4:	3710      	adds	r7, #16
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	ff20810f 	.word	0xff20810f

08004cc0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	4b3d      	ldr	r3, [pc, #244]	; (8004dd0 <ETH_SetDMAConfig+0x110>)
 8004cda:	4013      	ands	r3, r2
 8004cdc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	7b1b      	ldrb	r3, [r3, #12]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d102      	bne.n	8004cec <ETH_SetDMAConfig+0x2c>
 8004ce6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004cea:	e000      	b.n	8004cee <ETH_SetDMAConfig+0x2e>
 8004cec:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	7b5b      	ldrb	r3, [r3, #13]
 8004cf2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004cf4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004cf6:	683a      	ldr	r2, [r7, #0]
 8004cf8:	7f52      	ldrb	r2, [r2, #29]
 8004cfa:	2a00      	cmp	r2, #0
 8004cfc:	d102      	bne.n	8004d04 <ETH_SetDMAConfig+0x44>
 8004cfe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004d02:	e000      	b.n	8004d06 <ETH_SetDMAConfig+0x46>
 8004d04:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004d06:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	7b9b      	ldrb	r3, [r3, #14]
 8004d0c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004d0e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004d14:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	7f1b      	ldrb	r3, [r3, #28]
 8004d1a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004d1c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	7f9b      	ldrb	r3, [r3, #30]
 8004d22:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004d24:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004d2a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d32:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004d34:	4313      	orrs	r3, r2
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d44:	461a      	mov	r2, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004d56:	2001      	movs	r0, #1
 8004d58:	f7fe fc06 	bl	8003568 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d64:	461a      	mov	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	791b      	ldrb	r3, [r3, #4]
 8004d6e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004d74:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8004d7a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004d80:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004d88:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8004d8a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d90:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004d92:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004d98:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	6812      	ldr	r2, [r2, #0]
 8004d9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004da2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004da6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004db4:	2001      	movs	r0, #1
 8004db6:	f7fe fbd7 	bl	8003568 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6013      	str	r3, [r2, #0]
}
 8004dc8:	bf00      	nop
 8004dca:	3710      	adds	r7, #16
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	f8de3f23 	.word	0xf8de3f23

08004dd4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b0a6      	sub	sp, #152	; 0x98
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8004de2:	2301      	movs	r3, #1
 8004de4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004de8:	2300      	movs	r3, #0
 8004dea:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004dec:	2300      	movs	r3, #0
 8004dee:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004df2:	2301      	movs	r3, #1
 8004df4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004e04:	2300      	movs	r3, #0
 8004e06:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004e10:	2300      	movs	r3, #0
 8004e12:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004e14:	2300      	movs	r3, #0
 8004e16:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004e24:	2300      	movs	r3, #0
 8004e26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004e30:	2300      	movs	r3, #0
 8004e32:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004e36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e3a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004e3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004e40:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004e42:	2300      	movs	r3, #0
 8004e44:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004e48:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7ff fe86 	bl	8004b60 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004e54:	2301      	movs	r3, #1
 8004e56:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004e62:	2301      	movs	r3, #1
 8004e64:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004e66:	2300      	movs	r3, #0
 8004e68:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004e70:	2300      	movs	r3, #0
 8004e72:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004e76:	2300      	movs	r3, #0
 8004e78:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004e80:	2301      	movs	r3, #1
 8004e82:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004e84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004e88:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004e8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004e8e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004e90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e94:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004e96:	2301      	movs	r3, #1
 8004e98:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004ea4:	f107 0308 	add.w	r3, r7, #8
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f7ff ff08 	bl	8004cc0 <ETH_SetDMAConfig>
}
 8004eb0:	bf00      	nop
 8004eb2:	3798      	adds	r7, #152	; 0x98
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b087      	sub	sp, #28
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	3305      	adds	r3, #5
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	021b      	lsls	r3, r3, #8
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	3204      	adds	r2, #4
 8004ed0:	7812      	ldrb	r2, [r2, #0]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	4b11      	ldr	r3, [pc, #68]	; (8004f20 <ETH_MACAddressConfig+0x68>)
 8004eda:	4413      	add	r3, r2
 8004edc:	461a      	mov	r2, r3
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	3303      	adds	r3, #3
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	061a      	lsls	r2, r3, #24
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	3302      	adds	r3, #2
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	041b      	lsls	r3, r3, #16
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	021b      	lsls	r3, r3, #8
 8004efc:	4313      	orrs	r3, r2
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	7812      	ldrb	r2, [r2, #0]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004f06:	68ba      	ldr	r2, [r7, #8]
 8004f08:	4b06      	ldr	r3, [pc, #24]	; (8004f24 <ETH_MACAddressConfig+0x6c>)
 8004f0a:	4413      	add	r3, r2
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	6013      	str	r3, [r2, #0]
}
 8004f12:	bf00      	nop
 8004f14:	371c      	adds	r7, #28
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	40028040 	.word	0x40028040
 8004f24:	40028044 	.word	0x40028044

08004f28 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004f30:	2300      	movs	r3, #0
 8004f32:	60fb      	str	r3, [r7, #12]
 8004f34:	e03e      	b.n	8004fb4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	68d9      	ldr	r1, [r3, #12]
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	4413      	add	r3, r2
 8004f42:	00db      	lsls	r3, r3, #3
 8004f44:	440b      	add	r3, r1
 8004f46:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	2200      	movs	r2, #0
 8004f52:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	2200      	movs	r2, #0
 8004f58:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004f60:	68b9      	ldr	r1, [r7, #8]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	3206      	adds	r2, #6
 8004f68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d80c      	bhi.n	8004f98 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	68d9      	ldr	r1, [r3, #12]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	1c5a      	adds	r2, r3, #1
 8004f86:	4613      	mov	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	4413      	add	r3, r2
 8004f8c:	00db      	lsls	r3, r3, #3
 8004f8e:	440b      	add	r3, r1
 8004f90:	461a      	mov	r2, r3
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	60da      	str	r2, [r3, #12]
 8004f96:	e004      	b.n	8004fa2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	60fb      	str	r3, [r7, #12]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2b03      	cmp	r3, #3
 8004fb8:	d9bd      	bls.n	8004f36 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68da      	ldr	r2, [r3, #12]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fcc:	611a      	str	r2, [r3, #16]
}
 8004fce:	bf00      	nop
 8004fd0:	3714      	adds	r7, #20
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr

08004fda <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b085      	sub	sp, #20
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	60fb      	str	r3, [r7, #12]
 8004fe6:	e046      	b.n	8005076 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6919      	ldr	r1, [r3, #16]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4413      	add	r3, r2
 8004ff4:	00db      	lsls	r3, r3, #3
 8004ff6:	440b      	add	r3, r1
 8004ff8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	2200      	movs	r2, #0
 8005004:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	2200      	movs	r2, #0
 800500a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	2200      	movs	r2, #0
 8005010:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	2200      	movs	r2, #0
 8005016:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	2200      	movs	r2, #0
 800501c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005024:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800502c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800503a:	68b9      	ldr	r1, [r7, #8]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	3212      	adds	r2, #18
 8005042:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2b02      	cmp	r3, #2
 800504a:	d80c      	bhi.n	8005066 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6919      	ldr	r1, [r3, #16]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	1c5a      	adds	r2, r3, #1
 8005054:	4613      	mov	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4413      	add	r3, r2
 800505a:	00db      	lsls	r3, r3, #3
 800505c:	440b      	add	r3, r1
 800505e:	461a      	mov	r2, r3
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	60da      	str	r2, [r3, #12]
 8005064:	e004      	b.n	8005070 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	461a      	mov	r2, r3
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	3301      	adds	r3, #1
 8005074:	60fb      	str	r3, [r7, #12]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2b03      	cmp	r3, #3
 800507a:	d9b5      	bls.n	8004fe8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	691a      	ldr	r2, [r3, #16]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050a6:	60da      	str	r2, [r3, #12]
}
 80050a8:	bf00      	nop
 80050aa:	3714      	adds	r7, #20
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b089      	sub	sp, #36	; 0x24
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80050be:	2300      	movs	r3, #0
 80050c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80050c2:	2300      	movs	r3, #0
 80050c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80050c6:	2300      	movs	r3, #0
 80050c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050ca:	2300      	movs	r3, #0
 80050cc:	61fb      	str	r3, [r7, #28]
 80050ce:	e177      	b.n	80053c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80050d0:	2201      	movs	r2, #1
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	fa02 f303 	lsl.w	r3, r2, r3
 80050d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	4013      	ands	r3, r2
 80050e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	f040 8166 	bne.w	80053ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f003 0303 	and.w	r3, r3, #3
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d005      	beq.n	8005106 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005102:	2b02      	cmp	r3, #2
 8005104:	d130      	bne.n	8005168 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	005b      	lsls	r3, r3, #1
 8005110:	2203      	movs	r2, #3
 8005112:	fa02 f303 	lsl.w	r3, r2, r3
 8005116:	43db      	mvns	r3, r3
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	4013      	ands	r3, r2
 800511c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	68da      	ldr	r2, [r3, #12]
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	005b      	lsls	r3, r3, #1
 8005126:	fa02 f303 	lsl.w	r3, r2, r3
 800512a:	69ba      	ldr	r2, [r7, #24]
 800512c:	4313      	orrs	r3, r2
 800512e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	69ba      	ldr	r2, [r7, #24]
 8005134:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800513c:	2201      	movs	r2, #1
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	fa02 f303 	lsl.w	r3, r2, r3
 8005144:	43db      	mvns	r3, r3
 8005146:	69ba      	ldr	r2, [r7, #24]
 8005148:	4013      	ands	r3, r2
 800514a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	091b      	lsrs	r3, r3, #4
 8005152:	f003 0201 	and.w	r2, r3, #1
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	fa02 f303 	lsl.w	r3, r2, r3
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	4313      	orrs	r3, r2
 8005160:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f003 0303 	and.w	r3, r3, #3
 8005170:	2b03      	cmp	r3, #3
 8005172:	d017      	beq.n	80051a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	005b      	lsls	r3, r3, #1
 800517e:	2203      	movs	r2, #3
 8005180:	fa02 f303 	lsl.w	r3, r2, r3
 8005184:	43db      	mvns	r3, r3
 8005186:	69ba      	ldr	r2, [r7, #24]
 8005188:	4013      	ands	r3, r2
 800518a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	689a      	ldr	r2, [r3, #8]
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	005b      	lsls	r3, r3, #1
 8005194:	fa02 f303 	lsl.w	r3, r2, r3
 8005198:	69ba      	ldr	r2, [r7, #24]
 800519a:	4313      	orrs	r3, r2
 800519c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	f003 0303 	and.w	r3, r3, #3
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d123      	bne.n	80051f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	08da      	lsrs	r2, r3, #3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	3208      	adds	r2, #8
 80051b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	f003 0307 	and.w	r3, r3, #7
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	220f      	movs	r2, #15
 80051c8:	fa02 f303 	lsl.w	r3, r2, r3
 80051cc:	43db      	mvns	r3, r3
 80051ce:	69ba      	ldr	r2, [r7, #24]
 80051d0:	4013      	ands	r3, r2
 80051d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	691a      	ldr	r2, [r3, #16]
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	f003 0307 	and.w	r3, r3, #7
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	fa02 f303 	lsl.w	r3, r2, r3
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	08da      	lsrs	r2, r3, #3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	3208      	adds	r2, #8
 80051f2:	69b9      	ldr	r1, [r7, #24]
 80051f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	005b      	lsls	r3, r3, #1
 8005202:	2203      	movs	r2, #3
 8005204:	fa02 f303 	lsl.w	r3, r2, r3
 8005208:	43db      	mvns	r3, r3
 800520a:	69ba      	ldr	r2, [r7, #24]
 800520c:	4013      	ands	r3, r2
 800520e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f003 0203 	and.w	r2, r3, #3
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	005b      	lsls	r3, r3, #1
 800521c:	fa02 f303 	lsl.w	r3, r2, r3
 8005220:	69ba      	ldr	r2, [r7, #24]
 8005222:	4313      	orrs	r3, r2
 8005224:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	69ba      	ldr	r2, [r7, #24]
 800522a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005234:	2b00      	cmp	r3, #0
 8005236:	f000 80c0 	beq.w	80053ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800523a:	2300      	movs	r3, #0
 800523c:	60fb      	str	r3, [r7, #12]
 800523e:	4b66      	ldr	r3, [pc, #408]	; (80053d8 <HAL_GPIO_Init+0x324>)
 8005240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005242:	4a65      	ldr	r2, [pc, #404]	; (80053d8 <HAL_GPIO_Init+0x324>)
 8005244:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005248:	6453      	str	r3, [r2, #68]	; 0x44
 800524a:	4b63      	ldr	r3, [pc, #396]	; (80053d8 <HAL_GPIO_Init+0x324>)
 800524c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800524e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005252:	60fb      	str	r3, [r7, #12]
 8005254:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005256:	4a61      	ldr	r2, [pc, #388]	; (80053dc <HAL_GPIO_Init+0x328>)
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	089b      	lsrs	r3, r3, #2
 800525c:	3302      	adds	r3, #2
 800525e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005262:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	f003 0303 	and.w	r3, r3, #3
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	220f      	movs	r2, #15
 800526e:	fa02 f303 	lsl.w	r3, r2, r3
 8005272:	43db      	mvns	r3, r3
 8005274:	69ba      	ldr	r2, [r7, #24]
 8005276:	4013      	ands	r3, r2
 8005278:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a58      	ldr	r2, [pc, #352]	; (80053e0 <HAL_GPIO_Init+0x32c>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d037      	beq.n	80052f2 <HAL_GPIO_Init+0x23e>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a57      	ldr	r2, [pc, #348]	; (80053e4 <HAL_GPIO_Init+0x330>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d031      	beq.n	80052ee <HAL_GPIO_Init+0x23a>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a56      	ldr	r2, [pc, #344]	; (80053e8 <HAL_GPIO_Init+0x334>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d02b      	beq.n	80052ea <HAL_GPIO_Init+0x236>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a55      	ldr	r2, [pc, #340]	; (80053ec <HAL_GPIO_Init+0x338>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d025      	beq.n	80052e6 <HAL_GPIO_Init+0x232>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a54      	ldr	r2, [pc, #336]	; (80053f0 <HAL_GPIO_Init+0x33c>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d01f      	beq.n	80052e2 <HAL_GPIO_Init+0x22e>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a53      	ldr	r2, [pc, #332]	; (80053f4 <HAL_GPIO_Init+0x340>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d019      	beq.n	80052de <HAL_GPIO_Init+0x22a>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a52      	ldr	r2, [pc, #328]	; (80053f8 <HAL_GPIO_Init+0x344>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d013      	beq.n	80052da <HAL_GPIO_Init+0x226>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a51      	ldr	r2, [pc, #324]	; (80053fc <HAL_GPIO_Init+0x348>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d00d      	beq.n	80052d6 <HAL_GPIO_Init+0x222>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a50      	ldr	r2, [pc, #320]	; (8005400 <HAL_GPIO_Init+0x34c>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d007      	beq.n	80052d2 <HAL_GPIO_Init+0x21e>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a4f      	ldr	r2, [pc, #316]	; (8005404 <HAL_GPIO_Init+0x350>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d101      	bne.n	80052ce <HAL_GPIO_Init+0x21a>
 80052ca:	2309      	movs	r3, #9
 80052cc:	e012      	b.n	80052f4 <HAL_GPIO_Init+0x240>
 80052ce:	230a      	movs	r3, #10
 80052d0:	e010      	b.n	80052f4 <HAL_GPIO_Init+0x240>
 80052d2:	2308      	movs	r3, #8
 80052d4:	e00e      	b.n	80052f4 <HAL_GPIO_Init+0x240>
 80052d6:	2307      	movs	r3, #7
 80052d8:	e00c      	b.n	80052f4 <HAL_GPIO_Init+0x240>
 80052da:	2306      	movs	r3, #6
 80052dc:	e00a      	b.n	80052f4 <HAL_GPIO_Init+0x240>
 80052de:	2305      	movs	r3, #5
 80052e0:	e008      	b.n	80052f4 <HAL_GPIO_Init+0x240>
 80052e2:	2304      	movs	r3, #4
 80052e4:	e006      	b.n	80052f4 <HAL_GPIO_Init+0x240>
 80052e6:	2303      	movs	r3, #3
 80052e8:	e004      	b.n	80052f4 <HAL_GPIO_Init+0x240>
 80052ea:	2302      	movs	r3, #2
 80052ec:	e002      	b.n	80052f4 <HAL_GPIO_Init+0x240>
 80052ee:	2301      	movs	r3, #1
 80052f0:	e000      	b.n	80052f4 <HAL_GPIO_Init+0x240>
 80052f2:	2300      	movs	r3, #0
 80052f4:	69fa      	ldr	r2, [r7, #28]
 80052f6:	f002 0203 	and.w	r2, r2, #3
 80052fa:	0092      	lsls	r2, r2, #2
 80052fc:	4093      	lsls	r3, r2
 80052fe:	69ba      	ldr	r2, [r7, #24]
 8005300:	4313      	orrs	r3, r2
 8005302:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005304:	4935      	ldr	r1, [pc, #212]	; (80053dc <HAL_GPIO_Init+0x328>)
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	089b      	lsrs	r3, r3, #2
 800530a:	3302      	adds	r3, #2
 800530c:	69ba      	ldr	r2, [r7, #24]
 800530e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005312:	4b3d      	ldr	r3, [pc, #244]	; (8005408 <HAL_GPIO_Init+0x354>)
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	43db      	mvns	r3, r3
 800531c:	69ba      	ldr	r2, [r7, #24]
 800531e:	4013      	ands	r3, r2
 8005320:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d003      	beq.n	8005336 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800532e:	69ba      	ldr	r2, [r7, #24]
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	4313      	orrs	r3, r2
 8005334:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005336:	4a34      	ldr	r2, [pc, #208]	; (8005408 <HAL_GPIO_Init+0x354>)
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800533c:	4b32      	ldr	r3, [pc, #200]	; (8005408 <HAL_GPIO_Init+0x354>)
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	43db      	mvns	r3, r3
 8005346:	69ba      	ldr	r2, [r7, #24]
 8005348:	4013      	ands	r3, r2
 800534a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d003      	beq.n	8005360 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005358:	69ba      	ldr	r2, [r7, #24]
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	4313      	orrs	r3, r2
 800535e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005360:	4a29      	ldr	r2, [pc, #164]	; (8005408 <HAL_GPIO_Init+0x354>)
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005366:	4b28      	ldr	r3, [pc, #160]	; (8005408 <HAL_GPIO_Init+0x354>)
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	43db      	mvns	r3, r3
 8005370:	69ba      	ldr	r2, [r7, #24]
 8005372:	4013      	ands	r3, r2
 8005374:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d003      	beq.n	800538a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005382:	69ba      	ldr	r2, [r7, #24]
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	4313      	orrs	r3, r2
 8005388:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800538a:	4a1f      	ldr	r2, [pc, #124]	; (8005408 <HAL_GPIO_Init+0x354>)
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005390:	4b1d      	ldr	r3, [pc, #116]	; (8005408 <HAL_GPIO_Init+0x354>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	43db      	mvns	r3, r3
 800539a:	69ba      	ldr	r2, [r7, #24]
 800539c:	4013      	ands	r3, r2
 800539e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d003      	beq.n	80053b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80053ac:	69ba      	ldr	r2, [r7, #24]
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80053b4:	4a14      	ldr	r2, [pc, #80]	; (8005408 <HAL_GPIO_Init+0x354>)
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	3301      	adds	r3, #1
 80053be:	61fb      	str	r3, [r7, #28]
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	2b0f      	cmp	r3, #15
 80053c4:	f67f ae84 	bls.w	80050d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80053c8:	bf00      	nop
 80053ca:	bf00      	nop
 80053cc:	3724      	adds	r7, #36	; 0x24
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	40023800 	.word	0x40023800
 80053dc:	40013800 	.word	0x40013800
 80053e0:	40020000 	.word	0x40020000
 80053e4:	40020400 	.word	0x40020400
 80053e8:	40020800 	.word	0x40020800
 80053ec:	40020c00 	.word	0x40020c00
 80053f0:	40021000 	.word	0x40021000
 80053f4:	40021400 	.word	0x40021400
 80053f8:	40021800 	.word	0x40021800
 80053fc:	40021c00 	.word	0x40021c00
 8005400:	40022000 	.word	0x40022000
 8005404:	40022400 	.word	0x40022400
 8005408:	40013c00 	.word	0x40013c00

0800540c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800540c:	b480      	push	{r7}
 800540e:	b085      	sub	sp, #20
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	460b      	mov	r3, r1
 8005416:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	691a      	ldr	r2, [r3, #16]
 800541c:	887b      	ldrh	r3, [r7, #2]
 800541e:	4013      	ands	r3, r2
 8005420:	2b00      	cmp	r3, #0
 8005422:	d002      	beq.n	800542a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005424:	2301      	movs	r3, #1
 8005426:	73fb      	strb	r3, [r7, #15]
 8005428:	e001      	b.n	800542e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800542a:	2300      	movs	r3, #0
 800542c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800542e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005430:	4618      	mov	r0, r3
 8005432:	3714      	adds	r7, #20
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	460b      	mov	r3, r1
 8005446:	807b      	strh	r3, [r7, #2]
 8005448:	4613      	mov	r3, r2
 800544a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800544c:	787b      	ldrb	r3, [r7, #1]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d003      	beq.n	800545a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005452:	887a      	ldrh	r2, [r7, #2]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005458:	e003      	b.n	8005462 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800545a:	887b      	ldrh	r3, [r7, #2]
 800545c:	041a      	lsls	r2, r3, #16
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	619a      	str	r2, [r3, #24]
}
 8005462:	bf00      	nop
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr

0800546e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b086      	sub	sp, #24
 8005472:	af02      	add	r7, sp, #8
 8005474:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d101      	bne.n	8005480 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e101      	b.n	8005684 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d106      	bne.n	80054a0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f7fd fc96 	bl	8002dcc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2203      	movs	r2, #3
 80054a4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80054ae:	d102      	bne.n	80054b6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4618      	mov	r0, r3
 80054bc:	f003 f962 	bl	8008784 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6818      	ldr	r0, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	7c1a      	ldrb	r2, [r3, #16]
 80054c8:	f88d 2000 	strb.w	r2, [sp]
 80054cc:	3304      	adds	r3, #4
 80054ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80054d0:	f003 f8f4 	bl	80086bc <USB_CoreInit>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d005      	beq.n	80054e6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2202      	movs	r2, #2
 80054de:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e0ce      	b.n	8005684 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2100      	movs	r1, #0
 80054ec:	4618      	mov	r0, r3
 80054ee:	f003 f95a 	bl	80087a6 <USB_SetCurrentMode>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d005      	beq.n	8005504 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2202      	movs	r2, #2
 80054fc:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e0bf      	b.n	8005684 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005504:	2300      	movs	r3, #0
 8005506:	73fb      	strb	r3, [r7, #15]
 8005508:	e04a      	b.n	80055a0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800550a:	7bfa      	ldrb	r2, [r7, #15]
 800550c:	6879      	ldr	r1, [r7, #4]
 800550e:	4613      	mov	r3, r2
 8005510:	00db      	lsls	r3, r3, #3
 8005512:	4413      	add	r3, r2
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	440b      	add	r3, r1
 8005518:	3315      	adds	r3, #21
 800551a:	2201      	movs	r2, #1
 800551c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800551e:	7bfa      	ldrb	r2, [r7, #15]
 8005520:	6879      	ldr	r1, [r7, #4]
 8005522:	4613      	mov	r3, r2
 8005524:	00db      	lsls	r3, r3, #3
 8005526:	4413      	add	r3, r2
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	440b      	add	r3, r1
 800552c:	3314      	adds	r3, #20
 800552e:	7bfa      	ldrb	r2, [r7, #15]
 8005530:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005532:	7bfa      	ldrb	r2, [r7, #15]
 8005534:	7bfb      	ldrb	r3, [r7, #15]
 8005536:	b298      	uxth	r0, r3
 8005538:	6879      	ldr	r1, [r7, #4]
 800553a:	4613      	mov	r3, r2
 800553c:	00db      	lsls	r3, r3, #3
 800553e:	4413      	add	r3, r2
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	440b      	add	r3, r1
 8005544:	332e      	adds	r3, #46	; 0x2e
 8005546:	4602      	mov	r2, r0
 8005548:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800554a:	7bfa      	ldrb	r2, [r7, #15]
 800554c:	6879      	ldr	r1, [r7, #4]
 800554e:	4613      	mov	r3, r2
 8005550:	00db      	lsls	r3, r3, #3
 8005552:	4413      	add	r3, r2
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	440b      	add	r3, r1
 8005558:	3318      	adds	r3, #24
 800555a:	2200      	movs	r2, #0
 800555c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800555e:	7bfa      	ldrb	r2, [r7, #15]
 8005560:	6879      	ldr	r1, [r7, #4]
 8005562:	4613      	mov	r3, r2
 8005564:	00db      	lsls	r3, r3, #3
 8005566:	4413      	add	r3, r2
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	440b      	add	r3, r1
 800556c:	331c      	adds	r3, #28
 800556e:	2200      	movs	r2, #0
 8005570:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005572:	7bfa      	ldrb	r2, [r7, #15]
 8005574:	6879      	ldr	r1, [r7, #4]
 8005576:	4613      	mov	r3, r2
 8005578:	00db      	lsls	r3, r3, #3
 800557a:	4413      	add	r3, r2
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	440b      	add	r3, r1
 8005580:	3320      	adds	r3, #32
 8005582:	2200      	movs	r2, #0
 8005584:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005586:	7bfa      	ldrb	r2, [r7, #15]
 8005588:	6879      	ldr	r1, [r7, #4]
 800558a:	4613      	mov	r3, r2
 800558c:	00db      	lsls	r3, r3, #3
 800558e:	4413      	add	r3, r2
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	440b      	add	r3, r1
 8005594:	3324      	adds	r3, #36	; 0x24
 8005596:	2200      	movs	r2, #0
 8005598:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800559a:	7bfb      	ldrb	r3, [r7, #15]
 800559c:	3301      	adds	r3, #1
 800559e:	73fb      	strb	r3, [r7, #15]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	791b      	ldrb	r3, [r3, #4]
 80055a4:	7bfa      	ldrb	r2, [r7, #15]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d3af      	bcc.n	800550a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055aa:	2300      	movs	r3, #0
 80055ac:	73fb      	strb	r3, [r7, #15]
 80055ae:	e044      	b.n	800563a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80055b0:	7bfa      	ldrb	r2, [r7, #15]
 80055b2:	6879      	ldr	r1, [r7, #4]
 80055b4:	4613      	mov	r3, r2
 80055b6:	00db      	lsls	r3, r3, #3
 80055b8:	4413      	add	r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	440b      	add	r3, r1
 80055be:	f203 2355 	addw	r3, r3, #597	; 0x255
 80055c2:	2200      	movs	r2, #0
 80055c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80055c6:	7bfa      	ldrb	r2, [r7, #15]
 80055c8:	6879      	ldr	r1, [r7, #4]
 80055ca:	4613      	mov	r3, r2
 80055cc:	00db      	lsls	r3, r3, #3
 80055ce:	4413      	add	r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	440b      	add	r3, r1
 80055d4:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80055d8:	7bfa      	ldrb	r2, [r7, #15]
 80055da:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80055dc:	7bfa      	ldrb	r2, [r7, #15]
 80055de:	6879      	ldr	r1, [r7, #4]
 80055e0:	4613      	mov	r3, r2
 80055e2:	00db      	lsls	r3, r3, #3
 80055e4:	4413      	add	r3, r2
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	440b      	add	r3, r1
 80055ea:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80055ee:	2200      	movs	r2, #0
 80055f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80055f2:	7bfa      	ldrb	r2, [r7, #15]
 80055f4:	6879      	ldr	r1, [r7, #4]
 80055f6:	4613      	mov	r3, r2
 80055f8:	00db      	lsls	r3, r3, #3
 80055fa:	4413      	add	r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	440b      	add	r3, r1
 8005600:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8005604:	2200      	movs	r2, #0
 8005606:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005608:	7bfa      	ldrb	r2, [r7, #15]
 800560a:	6879      	ldr	r1, [r7, #4]
 800560c:	4613      	mov	r3, r2
 800560e:	00db      	lsls	r3, r3, #3
 8005610:	4413      	add	r3, r2
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	440b      	add	r3, r1
 8005616:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800561a:	2200      	movs	r2, #0
 800561c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800561e:	7bfa      	ldrb	r2, [r7, #15]
 8005620:	6879      	ldr	r1, [r7, #4]
 8005622:	4613      	mov	r3, r2
 8005624:	00db      	lsls	r3, r3, #3
 8005626:	4413      	add	r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	440b      	add	r3, r1
 800562c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8005630:	2200      	movs	r2, #0
 8005632:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005634:	7bfb      	ldrb	r3, [r7, #15]
 8005636:	3301      	adds	r3, #1
 8005638:	73fb      	strb	r3, [r7, #15]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	791b      	ldrb	r3, [r3, #4]
 800563e:	7bfa      	ldrb	r2, [r7, #15]
 8005640:	429a      	cmp	r2, r3
 8005642:	d3b5      	bcc.n	80055b0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6818      	ldr	r0, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	7c1a      	ldrb	r2, [r3, #16]
 800564c:	f88d 2000 	strb.w	r2, [sp]
 8005650:	3304      	adds	r3, #4
 8005652:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005654:	f003 f8f4 	bl	8008840 <USB_DevInit>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d005      	beq.n	800566a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2202      	movs	r2, #2
 8005662:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e00c      	b.n	8005684 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4618      	mov	r0, r3
 800567e:	f003 fabc 	bl	8008bfa <USB_DevDisconnect>

  return HAL_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	3710      	adds	r7, #16
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d101      	bne.n	800569e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e267      	b.n	8005b6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0301 	and.w	r3, r3, #1
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d075      	beq.n	8005796 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80056aa:	4b88      	ldr	r3, [pc, #544]	; (80058cc <HAL_RCC_OscConfig+0x240>)
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f003 030c 	and.w	r3, r3, #12
 80056b2:	2b04      	cmp	r3, #4
 80056b4:	d00c      	beq.n	80056d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056b6:	4b85      	ldr	r3, [pc, #532]	; (80058cc <HAL_RCC_OscConfig+0x240>)
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80056be:	2b08      	cmp	r3, #8
 80056c0:	d112      	bne.n	80056e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056c2:	4b82      	ldr	r3, [pc, #520]	; (80058cc <HAL_RCC_OscConfig+0x240>)
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056ce:	d10b      	bne.n	80056e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056d0:	4b7e      	ldr	r3, [pc, #504]	; (80058cc <HAL_RCC_OscConfig+0x240>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d05b      	beq.n	8005794 <HAL_RCC_OscConfig+0x108>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d157      	bne.n	8005794 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e242      	b.n	8005b6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056f0:	d106      	bne.n	8005700 <HAL_RCC_OscConfig+0x74>
 80056f2:	4b76      	ldr	r3, [pc, #472]	; (80058cc <HAL_RCC_OscConfig+0x240>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a75      	ldr	r2, [pc, #468]	; (80058cc <HAL_RCC_OscConfig+0x240>)
 80056f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056fc:	6013      	str	r3, [r2, #0]
 80056fe:	e01d      	b.n	800573c <HAL_RCC_OscConfig+0xb0>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005708:	d10c      	bne.n	8005724 <HAL_RCC_OscConfig+0x98>
 800570a:	4b70      	ldr	r3, [pc, #448]	; (80058cc <HAL_RCC_OscConfig+0x240>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a6f      	ldr	r2, [pc, #444]	; (80058cc <HAL_RCC_OscConfig+0x240>)
 8005710:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005714:	6013      	str	r3, [r2, #0]
 8005716:	4b6d      	ldr	r3, [pc, #436]	; (80058cc <HAL_RCC_OscConfig+0x240>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a6c      	ldr	r2, [pc, #432]	; (80058cc <HAL_RCC_OscConfig+0x240>)
 800571c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005720:	6013      	str	r3, [r2, #0]
 8005722:	e00b      	b.n	800573c <HAL_RCC_OscConfig+0xb0>
 8005724:	4b69      	ldr	r3, [pc, #420]	; (80058cc <HAL_RCC_OscConfig+0x240>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a68      	ldr	r2, [pc, #416]	; (80058cc <HAL_RCC_OscConfig+0x240>)
 800572a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800572e:	6013      	str	r3, [r2, #0]
 8005730:	4b66      	ldr	r3, [pc, #408]	; (80058cc <HAL_RCC_OscConfig+0x240>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a65      	ldr	r2, [pc, #404]	; (80058cc <HAL_RCC_OscConfig+0x240>)
 8005736:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800573a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d013      	beq.n	800576c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005744:	f7fd ff04 	bl	8003550 <HAL_GetTick>
 8005748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800574a:	e008      	b.n	800575e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800574c:	f7fd ff00 	bl	8003550 <HAL_GetTick>
 8005750:	4602      	mov	r2, r0
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	2b64      	cmp	r3, #100	; 0x64
 8005758:	d901      	bls.n	800575e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e207      	b.n	8005b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800575e:	4b5b      	ldr	r3, [pc, #364]	; (80058cc <HAL_RCC_OscConfig+0x240>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d0f0      	beq.n	800574c <HAL_RCC_OscConfig+0xc0>
 800576a:	e014      	b.n	8005796 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800576c:	f7fd fef0 	bl	8003550 <HAL_GetTick>
 8005770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005772:	e008      	b.n	8005786 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005774:	f7fd feec 	bl	8003550 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	2b64      	cmp	r3, #100	; 0x64
 8005780:	d901      	bls.n	8005786 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e1f3      	b.n	8005b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005786:	4b51      	ldr	r3, [pc, #324]	; (80058cc <HAL_RCC_OscConfig+0x240>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1f0      	bne.n	8005774 <HAL_RCC_OscConfig+0xe8>
 8005792:	e000      	b.n	8005796 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005794:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0302 	and.w	r3, r3, #2
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d063      	beq.n	800586a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80057a2:	4b4a      	ldr	r3, [pc, #296]	; (80058cc <HAL_RCC_OscConfig+0x240>)
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f003 030c 	and.w	r3, r3, #12
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00b      	beq.n	80057c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057ae:	4b47      	ldr	r3, [pc, #284]	; (80058cc <HAL_RCC_OscConfig+0x240>)
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80057b6:	2b08      	cmp	r3, #8
 80057b8:	d11c      	bne.n	80057f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057ba:	4b44      	ldr	r3, [pc, #272]	; (80058cc <HAL_RCC_OscConfig+0x240>)
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d116      	bne.n	80057f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057c6:	4b41      	ldr	r3, [pc, #260]	; (80058cc <HAL_RCC_OscConfig+0x240>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d005      	beq.n	80057de <HAL_RCC_OscConfig+0x152>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d001      	beq.n	80057de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e1c7      	b.n	8005b6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057de:	4b3b      	ldr	r3, [pc, #236]	; (80058cc <HAL_RCC_OscConfig+0x240>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	00db      	lsls	r3, r3, #3
 80057ec:	4937      	ldr	r1, [pc, #220]	; (80058cc <HAL_RCC_OscConfig+0x240>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057f2:	e03a      	b.n	800586a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d020      	beq.n	800583e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057fc:	4b34      	ldr	r3, [pc, #208]	; (80058d0 <HAL_RCC_OscConfig+0x244>)
 80057fe:	2201      	movs	r2, #1
 8005800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005802:	f7fd fea5 	bl	8003550 <HAL_GetTick>
 8005806:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005808:	e008      	b.n	800581c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800580a:	f7fd fea1 	bl	8003550 <HAL_GetTick>
 800580e:	4602      	mov	r2, r0
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	2b02      	cmp	r3, #2
 8005816:	d901      	bls.n	800581c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e1a8      	b.n	8005b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800581c:	4b2b      	ldr	r3, [pc, #172]	; (80058cc <HAL_RCC_OscConfig+0x240>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0302 	and.w	r3, r3, #2
 8005824:	2b00      	cmp	r3, #0
 8005826:	d0f0      	beq.n	800580a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005828:	4b28      	ldr	r3, [pc, #160]	; (80058cc <HAL_RCC_OscConfig+0x240>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	00db      	lsls	r3, r3, #3
 8005836:	4925      	ldr	r1, [pc, #148]	; (80058cc <HAL_RCC_OscConfig+0x240>)
 8005838:	4313      	orrs	r3, r2
 800583a:	600b      	str	r3, [r1, #0]
 800583c:	e015      	b.n	800586a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800583e:	4b24      	ldr	r3, [pc, #144]	; (80058d0 <HAL_RCC_OscConfig+0x244>)
 8005840:	2200      	movs	r2, #0
 8005842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005844:	f7fd fe84 	bl	8003550 <HAL_GetTick>
 8005848:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800584a:	e008      	b.n	800585e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800584c:	f7fd fe80 	bl	8003550 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	2b02      	cmp	r3, #2
 8005858:	d901      	bls.n	800585e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e187      	b.n	8005b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800585e:	4b1b      	ldr	r3, [pc, #108]	; (80058cc <HAL_RCC_OscConfig+0x240>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0302 	and.w	r3, r3, #2
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1f0      	bne.n	800584c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 0308 	and.w	r3, r3, #8
 8005872:	2b00      	cmp	r3, #0
 8005874:	d036      	beq.n	80058e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d016      	beq.n	80058ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800587e:	4b15      	ldr	r3, [pc, #84]	; (80058d4 <HAL_RCC_OscConfig+0x248>)
 8005880:	2201      	movs	r2, #1
 8005882:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005884:	f7fd fe64 	bl	8003550 <HAL_GetTick>
 8005888:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800588a:	e008      	b.n	800589e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800588c:	f7fd fe60 	bl	8003550 <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	2b02      	cmp	r3, #2
 8005898:	d901      	bls.n	800589e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	e167      	b.n	8005b6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800589e:	4b0b      	ldr	r3, [pc, #44]	; (80058cc <HAL_RCC_OscConfig+0x240>)
 80058a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058a2:	f003 0302 	and.w	r3, r3, #2
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d0f0      	beq.n	800588c <HAL_RCC_OscConfig+0x200>
 80058aa:	e01b      	b.n	80058e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058ac:	4b09      	ldr	r3, [pc, #36]	; (80058d4 <HAL_RCC_OscConfig+0x248>)
 80058ae:	2200      	movs	r2, #0
 80058b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058b2:	f7fd fe4d 	bl	8003550 <HAL_GetTick>
 80058b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058b8:	e00e      	b.n	80058d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058ba:	f7fd fe49 	bl	8003550 <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d907      	bls.n	80058d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e150      	b.n	8005b6e <HAL_RCC_OscConfig+0x4e2>
 80058cc:	40023800 	.word	0x40023800
 80058d0:	42470000 	.word	0x42470000
 80058d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058d8:	4b88      	ldr	r3, [pc, #544]	; (8005afc <HAL_RCC_OscConfig+0x470>)
 80058da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058dc:	f003 0302 	and.w	r3, r3, #2
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1ea      	bne.n	80058ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0304 	and.w	r3, r3, #4
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f000 8097 	beq.w	8005a20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058f2:	2300      	movs	r3, #0
 80058f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058f6:	4b81      	ldr	r3, [pc, #516]	; (8005afc <HAL_RCC_OscConfig+0x470>)
 80058f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d10f      	bne.n	8005922 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005902:	2300      	movs	r3, #0
 8005904:	60bb      	str	r3, [r7, #8]
 8005906:	4b7d      	ldr	r3, [pc, #500]	; (8005afc <HAL_RCC_OscConfig+0x470>)
 8005908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590a:	4a7c      	ldr	r2, [pc, #496]	; (8005afc <HAL_RCC_OscConfig+0x470>)
 800590c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005910:	6413      	str	r3, [r2, #64]	; 0x40
 8005912:	4b7a      	ldr	r3, [pc, #488]	; (8005afc <HAL_RCC_OscConfig+0x470>)
 8005914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800591a:	60bb      	str	r3, [r7, #8]
 800591c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800591e:	2301      	movs	r3, #1
 8005920:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005922:	4b77      	ldr	r3, [pc, #476]	; (8005b00 <HAL_RCC_OscConfig+0x474>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800592a:	2b00      	cmp	r3, #0
 800592c:	d118      	bne.n	8005960 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800592e:	4b74      	ldr	r3, [pc, #464]	; (8005b00 <HAL_RCC_OscConfig+0x474>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a73      	ldr	r2, [pc, #460]	; (8005b00 <HAL_RCC_OscConfig+0x474>)
 8005934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005938:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800593a:	f7fd fe09 	bl	8003550 <HAL_GetTick>
 800593e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005940:	e008      	b.n	8005954 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005942:	f7fd fe05 	bl	8003550 <HAL_GetTick>
 8005946:	4602      	mov	r2, r0
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	2b02      	cmp	r3, #2
 800594e:	d901      	bls.n	8005954 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e10c      	b.n	8005b6e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005954:	4b6a      	ldr	r3, [pc, #424]	; (8005b00 <HAL_RCC_OscConfig+0x474>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800595c:	2b00      	cmp	r3, #0
 800595e:	d0f0      	beq.n	8005942 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d106      	bne.n	8005976 <HAL_RCC_OscConfig+0x2ea>
 8005968:	4b64      	ldr	r3, [pc, #400]	; (8005afc <HAL_RCC_OscConfig+0x470>)
 800596a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800596c:	4a63      	ldr	r2, [pc, #396]	; (8005afc <HAL_RCC_OscConfig+0x470>)
 800596e:	f043 0301 	orr.w	r3, r3, #1
 8005972:	6713      	str	r3, [r2, #112]	; 0x70
 8005974:	e01c      	b.n	80059b0 <HAL_RCC_OscConfig+0x324>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	2b05      	cmp	r3, #5
 800597c:	d10c      	bne.n	8005998 <HAL_RCC_OscConfig+0x30c>
 800597e:	4b5f      	ldr	r3, [pc, #380]	; (8005afc <HAL_RCC_OscConfig+0x470>)
 8005980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005982:	4a5e      	ldr	r2, [pc, #376]	; (8005afc <HAL_RCC_OscConfig+0x470>)
 8005984:	f043 0304 	orr.w	r3, r3, #4
 8005988:	6713      	str	r3, [r2, #112]	; 0x70
 800598a:	4b5c      	ldr	r3, [pc, #368]	; (8005afc <HAL_RCC_OscConfig+0x470>)
 800598c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800598e:	4a5b      	ldr	r2, [pc, #364]	; (8005afc <HAL_RCC_OscConfig+0x470>)
 8005990:	f043 0301 	orr.w	r3, r3, #1
 8005994:	6713      	str	r3, [r2, #112]	; 0x70
 8005996:	e00b      	b.n	80059b0 <HAL_RCC_OscConfig+0x324>
 8005998:	4b58      	ldr	r3, [pc, #352]	; (8005afc <HAL_RCC_OscConfig+0x470>)
 800599a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800599c:	4a57      	ldr	r2, [pc, #348]	; (8005afc <HAL_RCC_OscConfig+0x470>)
 800599e:	f023 0301 	bic.w	r3, r3, #1
 80059a2:	6713      	str	r3, [r2, #112]	; 0x70
 80059a4:	4b55      	ldr	r3, [pc, #340]	; (8005afc <HAL_RCC_OscConfig+0x470>)
 80059a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059a8:	4a54      	ldr	r2, [pc, #336]	; (8005afc <HAL_RCC_OscConfig+0x470>)
 80059aa:	f023 0304 	bic.w	r3, r3, #4
 80059ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d015      	beq.n	80059e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059b8:	f7fd fdca 	bl	8003550 <HAL_GetTick>
 80059bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059be:	e00a      	b.n	80059d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059c0:	f7fd fdc6 	bl	8003550 <HAL_GetTick>
 80059c4:	4602      	mov	r2, r0
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d901      	bls.n	80059d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e0cb      	b.n	8005b6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059d6:	4b49      	ldr	r3, [pc, #292]	; (8005afc <HAL_RCC_OscConfig+0x470>)
 80059d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059da:	f003 0302 	and.w	r3, r3, #2
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d0ee      	beq.n	80059c0 <HAL_RCC_OscConfig+0x334>
 80059e2:	e014      	b.n	8005a0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059e4:	f7fd fdb4 	bl	8003550 <HAL_GetTick>
 80059e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059ea:	e00a      	b.n	8005a02 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059ec:	f7fd fdb0 	bl	8003550 <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d901      	bls.n	8005a02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e0b5      	b.n	8005b6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a02:	4b3e      	ldr	r3, [pc, #248]	; (8005afc <HAL_RCC_OscConfig+0x470>)
 8005a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a06:	f003 0302 	and.w	r3, r3, #2
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1ee      	bne.n	80059ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a0e:	7dfb      	ldrb	r3, [r7, #23]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d105      	bne.n	8005a20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a14:	4b39      	ldr	r3, [pc, #228]	; (8005afc <HAL_RCC_OscConfig+0x470>)
 8005a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a18:	4a38      	ldr	r2, [pc, #224]	; (8005afc <HAL_RCC_OscConfig+0x470>)
 8005a1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	699b      	ldr	r3, [r3, #24]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f000 80a1 	beq.w	8005b6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a2a:	4b34      	ldr	r3, [pc, #208]	; (8005afc <HAL_RCC_OscConfig+0x470>)
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f003 030c 	and.w	r3, r3, #12
 8005a32:	2b08      	cmp	r3, #8
 8005a34:	d05c      	beq.n	8005af0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d141      	bne.n	8005ac2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a3e:	4b31      	ldr	r3, [pc, #196]	; (8005b04 <HAL_RCC_OscConfig+0x478>)
 8005a40:	2200      	movs	r2, #0
 8005a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a44:	f7fd fd84 	bl	8003550 <HAL_GetTick>
 8005a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a4a:	e008      	b.n	8005a5e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a4c:	f7fd fd80 	bl	8003550 <HAL_GetTick>
 8005a50:	4602      	mov	r2, r0
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d901      	bls.n	8005a5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e087      	b.n	8005b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a5e:	4b27      	ldr	r3, [pc, #156]	; (8005afc <HAL_RCC_OscConfig+0x470>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1f0      	bne.n	8005a4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	69da      	ldr	r2, [r3, #28]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a1b      	ldr	r3, [r3, #32]
 8005a72:	431a      	orrs	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a78:	019b      	lsls	r3, r3, #6
 8005a7a:	431a      	orrs	r2, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a80:	085b      	lsrs	r3, r3, #1
 8005a82:	3b01      	subs	r3, #1
 8005a84:	041b      	lsls	r3, r3, #16
 8005a86:	431a      	orrs	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8c:	061b      	lsls	r3, r3, #24
 8005a8e:	491b      	ldr	r1, [pc, #108]	; (8005afc <HAL_RCC_OscConfig+0x470>)
 8005a90:	4313      	orrs	r3, r2
 8005a92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a94:	4b1b      	ldr	r3, [pc, #108]	; (8005b04 <HAL_RCC_OscConfig+0x478>)
 8005a96:	2201      	movs	r2, #1
 8005a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a9a:	f7fd fd59 	bl	8003550 <HAL_GetTick>
 8005a9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005aa0:	e008      	b.n	8005ab4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005aa2:	f7fd fd55 	bl	8003550 <HAL_GetTick>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	d901      	bls.n	8005ab4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	e05c      	b.n	8005b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ab4:	4b11      	ldr	r3, [pc, #68]	; (8005afc <HAL_RCC_OscConfig+0x470>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d0f0      	beq.n	8005aa2 <HAL_RCC_OscConfig+0x416>
 8005ac0:	e054      	b.n	8005b6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ac2:	4b10      	ldr	r3, [pc, #64]	; (8005b04 <HAL_RCC_OscConfig+0x478>)
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ac8:	f7fd fd42 	bl	8003550 <HAL_GetTick>
 8005acc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ace:	e008      	b.n	8005ae2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ad0:	f7fd fd3e 	bl	8003550 <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d901      	bls.n	8005ae2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e045      	b.n	8005b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ae2:	4b06      	ldr	r3, [pc, #24]	; (8005afc <HAL_RCC_OscConfig+0x470>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1f0      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x444>
 8005aee:	e03d      	b.n	8005b6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	699b      	ldr	r3, [r3, #24]
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d107      	bne.n	8005b08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e038      	b.n	8005b6e <HAL_RCC_OscConfig+0x4e2>
 8005afc:	40023800 	.word	0x40023800
 8005b00:	40007000 	.word	0x40007000
 8005b04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b08:	4b1b      	ldr	r3, [pc, #108]	; (8005b78 <HAL_RCC_OscConfig+0x4ec>)
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d028      	beq.n	8005b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d121      	bne.n	8005b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d11a      	bne.n	8005b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b38:	4013      	ands	r3, r2
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d111      	bne.n	8005b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b4e:	085b      	lsrs	r3, r3, #1
 8005b50:	3b01      	subs	r3, #1
 8005b52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d107      	bne.n	8005b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d001      	beq.n	8005b6c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e000      	b.n	8005b6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3718      	adds	r7, #24
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	40023800 	.word	0x40023800

08005b7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d101      	bne.n	8005b90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e0cc      	b.n	8005d2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b90:	4b68      	ldr	r3, [pc, #416]	; (8005d34 <HAL_RCC_ClockConfig+0x1b8>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 030f 	and.w	r3, r3, #15
 8005b98:	683a      	ldr	r2, [r7, #0]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d90c      	bls.n	8005bb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b9e:	4b65      	ldr	r3, [pc, #404]	; (8005d34 <HAL_RCC_ClockConfig+0x1b8>)
 8005ba0:	683a      	ldr	r2, [r7, #0]
 8005ba2:	b2d2      	uxtb	r2, r2
 8005ba4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ba6:	4b63      	ldr	r3, [pc, #396]	; (8005d34 <HAL_RCC_ClockConfig+0x1b8>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 030f 	and.w	r3, r3, #15
 8005bae:	683a      	ldr	r2, [r7, #0]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d001      	beq.n	8005bb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e0b8      	b.n	8005d2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0302 	and.w	r3, r3, #2
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d020      	beq.n	8005c06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0304 	and.w	r3, r3, #4
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d005      	beq.n	8005bdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005bd0:	4b59      	ldr	r3, [pc, #356]	; (8005d38 <HAL_RCC_ClockConfig+0x1bc>)
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	4a58      	ldr	r2, [pc, #352]	; (8005d38 <HAL_RCC_ClockConfig+0x1bc>)
 8005bd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005bda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0308 	and.w	r3, r3, #8
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d005      	beq.n	8005bf4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005be8:	4b53      	ldr	r3, [pc, #332]	; (8005d38 <HAL_RCC_ClockConfig+0x1bc>)
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	4a52      	ldr	r2, [pc, #328]	; (8005d38 <HAL_RCC_ClockConfig+0x1bc>)
 8005bee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005bf2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bf4:	4b50      	ldr	r3, [pc, #320]	; (8005d38 <HAL_RCC_ClockConfig+0x1bc>)
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	494d      	ldr	r1, [pc, #308]	; (8005d38 <HAL_RCC_ClockConfig+0x1bc>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d044      	beq.n	8005c9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d107      	bne.n	8005c2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c1a:	4b47      	ldr	r3, [pc, #284]	; (8005d38 <HAL_RCC_ClockConfig+0x1bc>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d119      	bne.n	8005c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e07f      	b.n	8005d2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d003      	beq.n	8005c3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c36:	2b03      	cmp	r3, #3
 8005c38:	d107      	bne.n	8005c4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c3a:	4b3f      	ldr	r3, [pc, #252]	; (8005d38 <HAL_RCC_ClockConfig+0x1bc>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d109      	bne.n	8005c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e06f      	b.n	8005d2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c4a:	4b3b      	ldr	r3, [pc, #236]	; (8005d38 <HAL_RCC_ClockConfig+0x1bc>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 0302 	and.w	r3, r3, #2
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d101      	bne.n	8005c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e067      	b.n	8005d2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c5a:	4b37      	ldr	r3, [pc, #220]	; (8005d38 <HAL_RCC_ClockConfig+0x1bc>)
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	f023 0203 	bic.w	r2, r3, #3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	4934      	ldr	r1, [pc, #208]	; (8005d38 <HAL_RCC_ClockConfig+0x1bc>)
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c6c:	f7fd fc70 	bl	8003550 <HAL_GetTick>
 8005c70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c72:	e00a      	b.n	8005c8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c74:	f7fd fc6c 	bl	8003550 <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d901      	bls.n	8005c8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e04f      	b.n	8005d2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c8a:	4b2b      	ldr	r3, [pc, #172]	; (8005d38 <HAL_RCC_ClockConfig+0x1bc>)
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	f003 020c 	and.w	r2, r3, #12
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d1eb      	bne.n	8005c74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c9c:	4b25      	ldr	r3, [pc, #148]	; (8005d34 <HAL_RCC_ClockConfig+0x1b8>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 030f 	and.w	r3, r3, #15
 8005ca4:	683a      	ldr	r2, [r7, #0]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d20c      	bcs.n	8005cc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005caa:	4b22      	ldr	r3, [pc, #136]	; (8005d34 <HAL_RCC_ClockConfig+0x1b8>)
 8005cac:	683a      	ldr	r2, [r7, #0]
 8005cae:	b2d2      	uxtb	r2, r2
 8005cb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cb2:	4b20      	ldr	r3, [pc, #128]	; (8005d34 <HAL_RCC_ClockConfig+0x1b8>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 030f 	and.w	r3, r3, #15
 8005cba:	683a      	ldr	r2, [r7, #0]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d001      	beq.n	8005cc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e032      	b.n	8005d2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0304 	and.w	r3, r3, #4
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d008      	beq.n	8005ce2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005cd0:	4b19      	ldr	r3, [pc, #100]	; (8005d38 <HAL_RCC_ClockConfig+0x1bc>)
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	4916      	ldr	r1, [pc, #88]	; (8005d38 <HAL_RCC_ClockConfig+0x1bc>)
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0308 	and.w	r3, r3, #8
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d009      	beq.n	8005d02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005cee:	4b12      	ldr	r3, [pc, #72]	; (8005d38 <HAL_RCC_ClockConfig+0x1bc>)
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	00db      	lsls	r3, r3, #3
 8005cfc:	490e      	ldr	r1, [pc, #56]	; (8005d38 <HAL_RCC_ClockConfig+0x1bc>)
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005d02:	f000 f821 	bl	8005d48 <HAL_RCC_GetSysClockFreq>
 8005d06:	4602      	mov	r2, r0
 8005d08:	4b0b      	ldr	r3, [pc, #44]	; (8005d38 <HAL_RCC_ClockConfig+0x1bc>)
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	091b      	lsrs	r3, r3, #4
 8005d0e:	f003 030f 	and.w	r3, r3, #15
 8005d12:	490a      	ldr	r1, [pc, #40]	; (8005d3c <HAL_RCC_ClockConfig+0x1c0>)
 8005d14:	5ccb      	ldrb	r3, [r1, r3]
 8005d16:	fa22 f303 	lsr.w	r3, r2, r3
 8005d1a:	4a09      	ldr	r2, [pc, #36]	; (8005d40 <HAL_RCC_ClockConfig+0x1c4>)
 8005d1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005d1e:	4b09      	ldr	r3, [pc, #36]	; (8005d44 <HAL_RCC_ClockConfig+0x1c8>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7fd fbd0 	bl	80034c8 <HAL_InitTick>

  return HAL_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	40023c00 	.word	0x40023c00
 8005d38:	40023800 	.word	0x40023800
 8005d3c:	0800ba30 	.word	0x0800ba30
 8005d40:	20000008 	.word	0x20000008
 8005d44:	2000000c 	.word	0x2000000c

08005d48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d4c:	b094      	sub	sp, #80	; 0x50
 8005d4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005d50:	2300      	movs	r3, #0
 8005d52:	647b      	str	r3, [r7, #68]	; 0x44
 8005d54:	2300      	movs	r3, #0
 8005d56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d58:	2300      	movs	r3, #0
 8005d5a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d60:	4b79      	ldr	r3, [pc, #484]	; (8005f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	f003 030c 	and.w	r3, r3, #12
 8005d68:	2b08      	cmp	r3, #8
 8005d6a:	d00d      	beq.n	8005d88 <HAL_RCC_GetSysClockFreq+0x40>
 8005d6c:	2b08      	cmp	r3, #8
 8005d6e:	f200 80e1 	bhi.w	8005f34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d002      	beq.n	8005d7c <HAL_RCC_GetSysClockFreq+0x34>
 8005d76:	2b04      	cmp	r3, #4
 8005d78:	d003      	beq.n	8005d82 <HAL_RCC_GetSysClockFreq+0x3a>
 8005d7a:	e0db      	b.n	8005f34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d7c:	4b73      	ldr	r3, [pc, #460]	; (8005f4c <HAL_RCC_GetSysClockFreq+0x204>)
 8005d7e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005d80:	e0db      	b.n	8005f3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d82:	4b73      	ldr	r3, [pc, #460]	; (8005f50 <HAL_RCC_GetSysClockFreq+0x208>)
 8005d84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d86:	e0d8      	b.n	8005f3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d88:	4b6f      	ldr	r3, [pc, #444]	; (8005f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d90:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d92:	4b6d      	ldr	r3, [pc, #436]	; (8005f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d063      	beq.n	8005e66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d9e:	4b6a      	ldr	r3, [pc, #424]	; (8005f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	099b      	lsrs	r3, r3, #6
 8005da4:	2200      	movs	r2, #0
 8005da6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005da8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005db0:	633b      	str	r3, [r7, #48]	; 0x30
 8005db2:	2300      	movs	r3, #0
 8005db4:	637b      	str	r3, [r7, #52]	; 0x34
 8005db6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005dba:	4622      	mov	r2, r4
 8005dbc:	462b      	mov	r3, r5
 8005dbe:	f04f 0000 	mov.w	r0, #0
 8005dc2:	f04f 0100 	mov.w	r1, #0
 8005dc6:	0159      	lsls	r1, r3, #5
 8005dc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005dcc:	0150      	lsls	r0, r2, #5
 8005dce:	4602      	mov	r2, r0
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	4621      	mov	r1, r4
 8005dd4:	1a51      	subs	r1, r2, r1
 8005dd6:	6139      	str	r1, [r7, #16]
 8005dd8:	4629      	mov	r1, r5
 8005dda:	eb63 0301 	sbc.w	r3, r3, r1
 8005dde:	617b      	str	r3, [r7, #20]
 8005de0:	f04f 0200 	mov.w	r2, #0
 8005de4:	f04f 0300 	mov.w	r3, #0
 8005de8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005dec:	4659      	mov	r1, fp
 8005dee:	018b      	lsls	r3, r1, #6
 8005df0:	4651      	mov	r1, sl
 8005df2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005df6:	4651      	mov	r1, sl
 8005df8:	018a      	lsls	r2, r1, #6
 8005dfa:	4651      	mov	r1, sl
 8005dfc:	ebb2 0801 	subs.w	r8, r2, r1
 8005e00:	4659      	mov	r1, fp
 8005e02:	eb63 0901 	sbc.w	r9, r3, r1
 8005e06:	f04f 0200 	mov.w	r2, #0
 8005e0a:	f04f 0300 	mov.w	r3, #0
 8005e0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e1a:	4690      	mov	r8, r2
 8005e1c:	4699      	mov	r9, r3
 8005e1e:	4623      	mov	r3, r4
 8005e20:	eb18 0303 	adds.w	r3, r8, r3
 8005e24:	60bb      	str	r3, [r7, #8]
 8005e26:	462b      	mov	r3, r5
 8005e28:	eb49 0303 	adc.w	r3, r9, r3
 8005e2c:	60fb      	str	r3, [r7, #12]
 8005e2e:	f04f 0200 	mov.w	r2, #0
 8005e32:	f04f 0300 	mov.w	r3, #0
 8005e36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005e3a:	4629      	mov	r1, r5
 8005e3c:	024b      	lsls	r3, r1, #9
 8005e3e:	4621      	mov	r1, r4
 8005e40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005e44:	4621      	mov	r1, r4
 8005e46:	024a      	lsls	r2, r1, #9
 8005e48:	4610      	mov	r0, r2
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e4e:	2200      	movs	r2, #0
 8005e50:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e58:	f7fa ff06 	bl	8000c68 <__aeabi_uldivmod>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	460b      	mov	r3, r1
 8005e60:	4613      	mov	r3, r2
 8005e62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e64:	e058      	b.n	8005f18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e66:	4b38      	ldr	r3, [pc, #224]	; (8005f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	099b      	lsrs	r3, r3, #6
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	4618      	mov	r0, r3
 8005e70:	4611      	mov	r1, r2
 8005e72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005e76:	623b      	str	r3, [r7, #32]
 8005e78:	2300      	movs	r3, #0
 8005e7a:	627b      	str	r3, [r7, #36]	; 0x24
 8005e7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005e80:	4642      	mov	r2, r8
 8005e82:	464b      	mov	r3, r9
 8005e84:	f04f 0000 	mov.w	r0, #0
 8005e88:	f04f 0100 	mov.w	r1, #0
 8005e8c:	0159      	lsls	r1, r3, #5
 8005e8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e92:	0150      	lsls	r0, r2, #5
 8005e94:	4602      	mov	r2, r0
 8005e96:	460b      	mov	r3, r1
 8005e98:	4641      	mov	r1, r8
 8005e9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005e9e:	4649      	mov	r1, r9
 8005ea0:	eb63 0b01 	sbc.w	fp, r3, r1
 8005ea4:	f04f 0200 	mov.w	r2, #0
 8005ea8:	f04f 0300 	mov.w	r3, #0
 8005eac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005eb0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005eb4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005eb8:	ebb2 040a 	subs.w	r4, r2, sl
 8005ebc:	eb63 050b 	sbc.w	r5, r3, fp
 8005ec0:	f04f 0200 	mov.w	r2, #0
 8005ec4:	f04f 0300 	mov.w	r3, #0
 8005ec8:	00eb      	lsls	r3, r5, #3
 8005eca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ece:	00e2      	lsls	r2, r4, #3
 8005ed0:	4614      	mov	r4, r2
 8005ed2:	461d      	mov	r5, r3
 8005ed4:	4643      	mov	r3, r8
 8005ed6:	18e3      	adds	r3, r4, r3
 8005ed8:	603b      	str	r3, [r7, #0]
 8005eda:	464b      	mov	r3, r9
 8005edc:	eb45 0303 	adc.w	r3, r5, r3
 8005ee0:	607b      	str	r3, [r7, #4]
 8005ee2:	f04f 0200 	mov.w	r2, #0
 8005ee6:	f04f 0300 	mov.w	r3, #0
 8005eea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005eee:	4629      	mov	r1, r5
 8005ef0:	028b      	lsls	r3, r1, #10
 8005ef2:	4621      	mov	r1, r4
 8005ef4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ef8:	4621      	mov	r1, r4
 8005efa:	028a      	lsls	r2, r1, #10
 8005efc:	4610      	mov	r0, r2
 8005efe:	4619      	mov	r1, r3
 8005f00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f02:	2200      	movs	r2, #0
 8005f04:	61bb      	str	r3, [r7, #24]
 8005f06:	61fa      	str	r2, [r7, #28]
 8005f08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f0c:	f7fa feac 	bl	8000c68 <__aeabi_uldivmod>
 8005f10:	4602      	mov	r2, r0
 8005f12:	460b      	mov	r3, r1
 8005f14:	4613      	mov	r3, r2
 8005f16:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005f18:	4b0b      	ldr	r3, [pc, #44]	; (8005f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	0c1b      	lsrs	r3, r3, #16
 8005f1e:	f003 0303 	and.w	r3, r3, #3
 8005f22:	3301      	adds	r3, #1
 8005f24:	005b      	lsls	r3, r3, #1
 8005f26:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005f28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f32:	e002      	b.n	8005f3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f34:	4b05      	ldr	r3, [pc, #20]	; (8005f4c <HAL_RCC_GetSysClockFreq+0x204>)
 8005f36:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3750      	adds	r7, #80	; 0x50
 8005f40:	46bd      	mov	sp, r7
 8005f42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f46:	bf00      	nop
 8005f48:	40023800 	.word	0x40023800
 8005f4c:	00f42400 	.word	0x00f42400
 8005f50:	007a1200 	.word	0x007a1200

08005f54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f54:	b480      	push	{r7}
 8005f56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f58:	4b03      	ldr	r3, [pc, #12]	; (8005f68 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop
 8005f68:	20000008 	.word	0x20000008

08005f6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005f70:	f7ff fff0 	bl	8005f54 <HAL_RCC_GetHCLKFreq>
 8005f74:	4602      	mov	r2, r0
 8005f76:	4b05      	ldr	r3, [pc, #20]	; (8005f8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	0a9b      	lsrs	r3, r3, #10
 8005f7c:	f003 0307 	and.w	r3, r3, #7
 8005f80:	4903      	ldr	r1, [pc, #12]	; (8005f90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f82:	5ccb      	ldrb	r3, [r1, r3]
 8005f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	40023800 	.word	0x40023800
 8005f90:	0800ba40 	.word	0x0800ba40

08005f94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005f98:	f7ff ffdc 	bl	8005f54 <HAL_RCC_GetHCLKFreq>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	4b05      	ldr	r3, [pc, #20]	; (8005fb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	0b5b      	lsrs	r3, r3, #13
 8005fa4:	f003 0307 	and.w	r3, r3, #7
 8005fa8:	4903      	ldr	r1, [pc, #12]	; (8005fb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005faa:	5ccb      	ldrb	r3, [r1, r3]
 8005fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	40023800 	.word	0x40023800
 8005fb8:	0800ba40 	.word	0x0800ba40

08005fbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d101      	bne.n	8005fce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e041      	b.n	8006052 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d106      	bne.n	8005fe8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f7fc fc32 	bl	800284c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2202      	movs	r2, #2
 8005fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	3304      	adds	r3, #4
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	4610      	mov	r0, r2
 8005ffc:	f000 ff0a 	bl	8006e14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3708      	adds	r7, #8
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
	...

0800605c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800605c:	b480      	push	{r7}
 800605e:	b085      	sub	sp, #20
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800606a:	b2db      	uxtb	r3, r3
 800606c:	2b01      	cmp	r3, #1
 800606e:	d001      	beq.n	8006074 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e046      	b.n	8006102 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2202      	movs	r2, #2
 8006078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a23      	ldr	r2, [pc, #140]	; (8006110 <HAL_TIM_Base_Start+0xb4>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d022      	beq.n	80060cc <HAL_TIM_Base_Start+0x70>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800608e:	d01d      	beq.n	80060cc <HAL_TIM_Base_Start+0x70>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a1f      	ldr	r2, [pc, #124]	; (8006114 <HAL_TIM_Base_Start+0xb8>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d018      	beq.n	80060cc <HAL_TIM_Base_Start+0x70>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a1e      	ldr	r2, [pc, #120]	; (8006118 <HAL_TIM_Base_Start+0xbc>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d013      	beq.n	80060cc <HAL_TIM_Base_Start+0x70>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a1c      	ldr	r2, [pc, #112]	; (800611c <HAL_TIM_Base_Start+0xc0>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d00e      	beq.n	80060cc <HAL_TIM_Base_Start+0x70>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a1b      	ldr	r2, [pc, #108]	; (8006120 <HAL_TIM_Base_Start+0xc4>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d009      	beq.n	80060cc <HAL_TIM_Base_Start+0x70>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a19      	ldr	r2, [pc, #100]	; (8006124 <HAL_TIM_Base_Start+0xc8>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d004      	beq.n	80060cc <HAL_TIM_Base_Start+0x70>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a18      	ldr	r2, [pc, #96]	; (8006128 <HAL_TIM_Base_Start+0xcc>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d111      	bne.n	80060f0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	f003 0307 	and.w	r3, r3, #7
 80060d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2b06      	cmp	r3, #6
 80060dc:	d010      	beq.n	8006100 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f042 0201 	orr.w	r2, r2, #1
 80060ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060ee:	e007      	b.n	8006100 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f042 0201 	orr.w	r2, r2, #1
 80060fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3714      	adds	r7, #20
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop
 8006110:	40010000 	.word	0x40010000
 8006114:	40000400 	.word	0x40000400
 8006118:	40000800 	.word	0x40000800
 800611c:	40000c00 	.word	0x40000c00
 8006120:	40010400 	.word	0x40010400
 8006124:	40014000 	.word	0x40014000
 8006128:	40001800 	.word	0x40001800

0800612c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800612c:	b480      	push	{r7}
 800612e:	b085      	sub	sp, #20
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800613a:	b2db      	uxtb	r3, r3
 800613c:	2b01      	cmp	r3, #1
 800613e:	d001      	beq.n	8006144 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e04e      	b.n	80061e2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2202      	movs	r2, #2
 8006148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68da      	ldr	r2, [r3, #12]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f042 0201 	orr.w	r2, r2, #1
 800615a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a23      	ldr	r2, [pc, #140]	; (80061f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d022      	beq.n	80061ac <HAL_TIM_Base_Start_IT+0x80>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800616e:	d01d      	beq.n	80061ac <HAL_TIM_Base_Start_IT+0x80>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a1f      	ldr	r2, [pc, #124]	; (80061f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d018      	beq.n	80061ac <HAL_TIM_Base_Start_IT+0x80>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a1e      	ldr	r2, [pc, #120]	; (80061f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d013      	beq.n	80061ac <HAL_TIM_Base_Start_IT+0x80>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a1c      	ldr	r2, [pc, #112]	; (80061fc <HAL_TIM_Base_Start_IT+0xd0>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d00e      	beq.n	80061ac <HAL_TIM_Base_Start_IT+0x80>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a1b      	ldr	r2, [pc, #108]	; (8006200 <HAL_TIM_Base_Start_IT+0xd4>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d009      	beq.n	80061ac <HAL_TIM_Base_Start_IT+0x80>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a19      	ldr	r2, [pc, #100]	; (8006204 <HAL_TIM_Base_Start_IT+0xd8>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d004      	beq.n	80061ac <HAL_TIM_Base_Start_IT+0x80>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a18      	ldr	r2, [pc, #96]	; (8006208 <HAL_TIM_Base_Start_IT+0xdc>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d111      	bne.n	80061d0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	f003 0307 	and.w	r3, r3, #7
 80061b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2b06      	cmp	r3, #6
 80061bc:	d010      	beq.n	80061e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f042 0201 	orr.w	r2, r2, #1
 80061cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061ce:	e007      	b.n	80061e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f042 0201 	orr.w	r2, r2, #1
 80061de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3714      	adds	r7, #20
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr
 80061ee:	bf00      	nop
 80061f0:	40010000 	.word	0x40010000
 80061f4:	40000400 	.word	0x40000400
 80061f8:	40000800 	.word	0x40000800
 80061fc:	40000c00 	.word	0x40000c00
 8006200:	40010400 	.word	0x40010400
 8006204:	40014000 	.word	0x40014000
 8006208:	40001800 	.word	0x40001800

0800620c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b082      	sub	sp, #8
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d101      	bne.n	800621e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e041      	b.n	80062a2 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b00      	cmp	r3, #0
 8006228:	d106      	bne.n	8006238 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 f839 	bl	80062aa <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2202      	movs	r2, #2
 800623c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	3304      	adds	r3, #4
 8006248:	4619      	mov	r1, r3
 800624a:	4610      	mov	r0, r2
 800624c:	f000 fde2 	bl	8006e14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062a0:	2300      	movs	r3, #0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3708      	adds	r7, #8
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}

080062aa <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80062aa:	b480      	push	{r7}
 80062ac:	b083      	sub	sp, #12
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80062b2:	bf00      	nop
 80062b4:	370c      	adds	r7, #12
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr

080062be <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b082      	sub	sp, #8
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d101      	bne.n	80062d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e041      	b.n	8006354 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d106      	bne.n	80062ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 f839 	bl	800635c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2202      	movs	r2, #2
 80062ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	3304      	adds	r3, #4
 80062fa:	4619      	mov	r1, r3
 80062fc:	4610      	mov	r0, r2
 80062fe:	f000 fd89 	bl	8006e14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2201      	movs	r2, #1
 8006306:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2201      	movs	r2, #1
 800630e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2201      	movs	r2, #1
 8006316:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2201      	movs	r2, #1
 800631e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2201      	movs	r2, #1
 8006326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2201      	movs	r2, #1
 800632e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2201      	movs	r2, #1
 8006336:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2201      	movs	r2, #1
 800633e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2201      	movs	r2, #1
 8006346:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2201      	movs	r2, #1
 800634e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3708      	adds	r7, #8
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800637a:	2300      	movs	r3, #0
 800637c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d109      	bne.n	8006398 <HAL_TIM_PWM_Start_IT+0x28>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800638a:	b2db      	uxtb	r3, r3
 800638c:	2b01      	cmp	r3, #1
 800638e:	bf14      	ite	ne
 8006390:	2301      	movne	r3, #1
 8006392:	2300      	moveq	r3, #0
 8006394:	b2db      	uxtb	r3, r3
 8006396:	e022      	b.n	80063de <HAL_TIM_PWM_Start_IT+0x6e>
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	2b04      	cmp	r3, #4
 800639c:	d109      	bne.n	80063b2 <HAL_TIM_PWM_Start_IT+0x42>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	bf14      	ite	ne
 80063aa:	2301      	movne	r3, #1
 80063ac:	2300      	moveq	r3, #0
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	e015      	b.n	80063de <HAL_TIM_PWM_Start_IT+0x6e>
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	2b08      	cmp	r3, #8
 80063b6:	d109      	bne.n	80063cc <HAL_TIM_PWM_Start_IT+0x5c>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	bf14      	ite	ne
 80063c4:	2301      	movne	r3, #1
 80063c6:	2300      	moveq	r3, #0
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	e008      	b.n	80063de <HAL_TIM_PWM_Start_IT+0x6e>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	bf14      	ite	ne
 80063d8:	2301      	movne	r3, #1
 80063da:	2300      	moveq	r3, #0
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d001      	beq.n	80063e6 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e0c7      	b.n	8006576 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d104      	bne.n	80063f6 <HAL_TIM_PWM_Start_IT+0x86>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2202      	movs	r2, #2
 80063f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063f4:	e013      	b.n	800641e <HAL_TIM_PWM_Start_IT+0xae>
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	2b04      	cmp	r3, #4
 80063fa:	d104      	bne.n	8006406 <HAL_TIM_PWM_Start_IT+0x96>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2202      	movs	r2, #2
 8006400:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006404:	e00b      	b.n	800641e <HAL_TIM_PWM_Start_IT+0xae>
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	2b08      	cmp	r3, #8
 800640a:	d104      	bne.n	8006416 <HAL_TIM_PWM_Start_IT+0xa6>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2202      	movs	r2, #2
 8006410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006414:	e003      	b.n	800641e <HAL_TIM_PWM_Start_IT+0xae>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2202      	movs	r2, #2
 800641a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	2b0c      	cmp	r3, #12
 8006422:	d841      	bhi.n	80064a8 <HAL_TIM_PWM_Start_IT+0x138>
 8006424:	a201      	add	r2, pc, #4	; (adr r2, 800642c <HAL_TIM_PWM_Start_IT+0xbc>)
 8006426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800642a:	bf00      	nop
 800642c:	08006461 	.word	0x08006461
 8006430:	080064a9 	.word	0x080064a9
 8006434:	080064a9 	.word	0x080064a9
 8006438:	080064a9 	.word	0x080064a9
 800643c:	08006473 	.word	0x08006473
 8006440:	080064a9 	.word	0x080064a9
 8006444:	080064a9 	.word	0x080064a9
 8006448:	080064a9 	.word	0x080064a9
 800644c:	08006485 	.word	0x08006485
 8006450:	080064a9 	.word	0x080064a9
 8006454:	080064a9 	.word	0x080064a9
 8006458:	080064a9 	.word	0x080064a9
 800645c:	08006497 	.word	0x08006497
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68da      	ldr	r2, [r3, #12]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f042 0202 	orr.w	r2, r2, #2
 800646e:	60da      	str	r2, [r3, #12]
      break;
 8006470:	e01d      	b.n	80064ae <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68da      	ldr	r2, [r3, #12]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f042 0204 	orr.w	r2, r2, #4
 8006480:	60da      	str	r2, [r3, #12]
      break;
 8006482:	e014      	b.n	80064ae <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68da      	ldr	r2, [r3, #12]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f042 0208 	orr.w	r2, r2, #8
 8006492:	60da      	str	r2, [r3, #12]
      break;
 8006494:	e00b      	b.n	80064ae <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68da      	ldr	r2, [r3, #12]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f042 0210 	orr.w	r2, r2, #16
 80064a4:	60da      	str	r2, [r3, #12]
      break;
 80064a6:	e002      	b.n	80064ae <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	73fb      	strb	r3, [r7, #15]
      break;
 80064ac:	bf00      	nop
  }

  if (status == HAL_OK)
 80064ae:	7bfb      	ldrb	r3, [r7, #15]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d15f      	bne.n	8006574 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2201      	movs	r2, #1
 80064ba:	6839      	ldr	r1, [r7, #0]
 80064bc:	4618      	mov	r0, r3
 80064be:	f000 ff9f 	bl	8007400 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a2e      	ldr	r2, [pc, #184]	; (8006580 <HAL_TIM_PWM_Start_IT+0x210>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d004      	beq.n	80064d6 <HAL_TIM_PWM_Start_IT+0x166>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a2c      	ldr	r2, [pc, #176]	; (8006584 <HAL_TIM_PWM_Start_IT+0x214>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d101      	bne.n	80064da <HAL_TIM_PWM_Start_IT+0x16a>
 80064d6:	2301      	movs	r3, #1
 80064d8:	e000      	b.n	80064dc <HAL_TIM_PWM_Start_IT+0x16c>
 80064da:	2300      	movs	r3, #0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d007      	beq.n	80064f0 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064ee:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a22      	ldr	r2, [pc, #136]	; (8006580 <HAL_TIM_PWM_Start_IT+0x210>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d022      	beq.n	8006540 <HAL_TIM_PWM_Start_IT+0x1d0>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006502:	d01d      	beq.n	8006540 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a1f      	ldr	r2, [pc, #124]	; (8006588 <HAL_TIM_PWM_Start_IT+0x218>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d018      	beq.n	8006540 <HAL_TIM_PWM_Start_IT+0x1d0>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a1e      	ldr	r2, [pc, #120]	; (800658c <HAL_TIM_PWM_Start_IT+0x21c>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d013      	beq.n	8006540 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a1c      	ldr	r2, [pc, #112]	; (8006590 <HAL_TIM_PWM_Start_IT+0x220>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d00e      	beq.n	8006540 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a17      	ldr	r2, [pc, #92]	; (8006584 <HAL_TIM_PWM_Start_IT+0x214>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d009      	beq.n	8006540 <HAL_TIM_PWM_Start_IT+0x1d0>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a18      	ldr	r2, [pc, #96]	; (8006594 <HAL_TIM_PWM_Start_IT+0x224>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d004      	beq.n	8006540 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a17      	ldr	r2, [pc, #92]	; (8006598 <HAL_TIM_PWM_Start_IT+0x228>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d111      	bne.n	8006564 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f003 0307 	and.w	r3, r3, #7
 800654a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	2b06      	cmp	r3, #6
 8006550:	d010      	beq.n	8006574 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f042 0201 	orr.w	r2, r2, #1
 8006560:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006562:	e007      	b.n	8006574 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f042 0201 	orr.w	r2, r2, #1
 8006572:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006574:	7bfb      	ldrb	r3, [r7, #15]
}
 8006576:	4618      	mov	r0, r3
 8006578:	3710      	adds	r7, #16
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	40010000 	.word	0x40010000
 8006584:	40010400 	.word	0x40010400
 8006588:	40000400 	.word	0x40000400
 800658c:	40000800 	.word	0x40000800
 8006590:	40000c00 	.word	0x40000c00
 8006594:	40014000 	.word	0x40014000
 8006598:	40001800 	.word	0x40001800

0800659c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b086      	sub	sp, #24
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d101      	bne.n	80065b0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	e097      	b.n	80066e0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d106      	bne.n	80065ca <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f7fc fa1d 	bl	8002a04 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2202      	movs	r2, #2
 80065ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	6812      	ldr	r2, [r2, #0]
 80065dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065e0:	f023 0307 	bic.w	r3, r3, #7
 80065e4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	3304      	adds	r3, #4
 80065ee:	4619      	mov	r1, r3
 80065f0:	4610      	mov	r0, r2
 80065f2:	f000 fc0f 	bl	8006e14 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	699b      	ldr	r3, [r3, #24]
 8006604:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	6a1b      	ldr	r3, [r3, #32]
 800660c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	697a      	ldr	r2, [r7, #20]
 8006614:	4313      	orrs	r3, r2
 8006616:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800661e:	f023 0303 	bic.w	r3, r3, #3
 8006622:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	689a      	ldr	r2, [r3, #8]
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	021b      	lsls	r3, r3, #8
 800662e:	4313      	orrs	r3, r2
 8006630:	693a      	ldr	r2, [r7, #16]
 8006632:	4313      	orrs	r3, r2
 8006634:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800663c:	f023 030c 	bic.w	r3, r3, #12
 8006640:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006648:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800664c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	68da      	ldr	r2, [r3, #12]
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	69db      	ldr	r3, [r3, #28]
 8006656:	021b      	lsls	r3, r3, #8
 8006658:	4313      	orrs	r3, r2
 800665a:	693a      	ldr	r2, [r7, #16]
 800665c:	4313      	orrs	r3, r2
 800665e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	011a      	lsls	r2, r3, #4
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	6a1b      	ldr	r3, [r3, #32]
 800666a:	031b      	lsls	r3, r3, #12
 800666c:	4313      	orrs	r3, r2
 800666e:	693a      	ldr	r2, [r7, #16]
 8006670:	4313      	orrs	r3, r2
 8006672:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800667a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006682:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	685a      	ldr	r2, [r3, #4]
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	695b      	ldr	r3, [r3, #20]
 800668c:	011b      	lsls	r3, r3, #4
 800668e:	4313      	orrs	r3, r2
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	4313      	orrs	r3, r2
 8006694:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	697a      	ldr	r2, [r7, #20]
 800669c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	693a      	ldr	r2, [r7, #16]
 80066a4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2201      	movs	r2, #1
 80066b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2201      	movs	r2, #1
 80066ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2201      	movs	r2, #1
 80066c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2201      	movs	r2, #1
 80066d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2201      	movs	r2, #1
 80066da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3718      	adds	r7, #24
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066f8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006700:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006708:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006710:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d110      	bne.n	800673a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006718:	7bfb      	ldrb	r3, [r7, #15]
 800671a:	2b01      	cmp	r3, #1
 800671c:	d102      	bne.n	8006724 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800671e:	7b7b      	ldrb	r3, [r7, #13]
 8006720:	2b01      	cmp	r3, #1
 8006722:	d001      	beq.n	8006728 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	e069      	b.n	80067fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2202      	movs	r2, #2
 800672c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2202      	movs	r2, #2
 8006734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006738:	e031      	b.n	800679e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	2b04      	cmp	r3, #4
 800673e:	d110      	bne.n	8006762 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006740:	7bbb      	ldrb	r3, [r7, #14]
 8006742:	2b01      	cmp	r3, #1
 8006744:	d102      	bne.n	800674c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006746:	7b3b      	ldrb	r3, [r7, #12]
 8006748:	2b01      	cmp	r3, #1
 800674a:	d001      	beq.n	8006750 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	e055      	b.n	80067fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2202      	movs	r2, #2
 8006754:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2202      	movs	r2, #2
 800675c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006760:	e01d      	b.n	800679e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006762:	7bfb      	ldrb	r3, [r7, #15]
 8006764:	2b01      	cmp	r3, #1
 8006766:	d108      	bne.n	800677a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006768:	7bbb      	ldrb	r3, [r7, #14]
 800676a:	2b01      	cmp	r3, #1
 800676c:	d105      	bne.n	800677a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800676e:	7b7b      	ldrb	r3, [r7, #13]
 8006770:	2b01      	cmp	r3, #1
 8006772:	d102      	bne.n	800677a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006774:	7b3b      	ldrb	r3, [r7, #12]
 8006776:	2b01      	cmp	r3, #1
 8006778:	d001      	beq.n	800677e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	e03e      	b.n	80067fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2202      	movs	r2, #2
 8006782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2202      	movs	r2, #2
 800678a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2202      	movs	r2, #2
 8006792:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2202      	movs	r2, #2
 800679a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d003      	beq.n	80067ac <HAL_TIM_Encoder_Start+0xc4>
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	2b04      	cmp	r3, #4
 80067a8:	d008      	beq.n	80067bc <HAL_TIM_Encoder_Start+0xd4>
 80067aa:	e00f      	b.n	80067cc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2201      	movs	r2, #1
 80067b2:	2100      	movs	r1, #0
 80067b4:	4618      	mov	r0, r3
 80067b6:	f000 fe23 	bl	8007400 <TIM_CCxChannelCmd>
      break;
 80067ba:	e016      	b.n	80067ea <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2201      	movs	r2, #1
 80067c2:	2104      	movs	r1, #4
 80067c4:	4618      	mov	r0, r3
 80067c6:	f000 fe1b 	bl	8007400 <TIM_CCxChannelCmd>
      break;
 80067ca:	e00e      	b.n	80067ea <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2201      	movs	r2, #1
 80067d2:	2100      	movs	r1, #0
 80067d4:	4618      	mov	r0, r3
 80067d6:	f000 fe13 	bl	8007400 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2201      	movs	r2, #1
 80067e0:	2104      	movs	r1, #4
 80067e2:	4618      	mov	r0, r3
 80067e4:	f000 fe0c 	bl	8007400 <TIM_CCxChannelCmd>
      break;
 80067e8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f042 0201 	orr.w	r2, r2, #1
 80067f8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3710      	adds	r7, #16
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	f003 0302 	and.w	r3, r3, #2
 8006822:	2b00      	cmp	r3, #0
 8006824:	d020      	beq.n	8006868 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f003 0302 	and.w	r3, r3, #2
 800682c:	2b00      	cmp	r3, #0
 800682e:	d01b      	beq.n	8006868 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f06f 0202 	mvn.w	r2, #2
 8006838:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2201      	movs	r2, #1
 800683e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	f003 0303 	and.w	r3, r3, #3
 800684a:	2b00      	cmp	r3, #0
 800684c:	d003      	beq.n	8006856 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 fac1 	bl	8006dd6 <HAL_TIM_IC_CaptureCallback>
 8006854:	e005      	b.n	8006862 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 fab3 	bl	8006dc2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 fac4 	bl	8006dea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	f003 0304 	and.w	r3, r3, #4
 800686e:	2b00      	cmp	r3, #0
 8006870:	d020      	beq.n	80068b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f003 0304 	and.w	r3, r3, #4
 8006878:	2b00      	cmp	r3, #0
 800687a:	d01b      	beq.n	80068b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f06f 0204 	mvn.w	r2, #4
 8006884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2202      	movs	r2, #2
 800688a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006896:	2b00      	cmp	r3, #0
 8006898:	d003      	beq.n	80068a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 fa9b 	bl	8006dd6 <HAL_TIM_IC_CaptureCallback>
 80068a0:	e005      	b.n	80068ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 fa8d 	bl	8006dc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 fa9e 	bl	8006dea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	f003 0308 	and.w	r3, r3, #8
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d020      	beq.n	8006900 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f003 0308 	and.w	r3, r3, #8
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d01b      	beq.n	8006900 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f06f 0208 	mvn.w	r2, #8
 80068d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2204      	movs	r2, #4
 80068d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	69db      	ldr	r3, [r3, #28]
 80068de:	f003 0303 	and.w	r3, r3, #3
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d003      	beq.n	80068ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 fa75 	bl	8006dd6 <HAL_TIM_IC_CaptureCallback>
 80068ec:	e005      	b.n	80068fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 fa67 	bl	8006dc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 fa78 	bl	8006dea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	f003 0310 	and.w	r3, r3, #16
 8006906:	2b00      	cmp	r3, #0
 8006908:	d020      	beq.n	800694c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f003 0310 	and.w	r3, r3, #16
 8006910:	2b00      	cmp	r3, #0
 8006912:	d01b      	beq.n	800694c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f06f 0210 	mvn.w	r2, #16
 800691c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2208      	movs	r2, #8
 8006922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	69db      	ldr	r3, [r3, #28]
 800692a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800692e:	2b00      	cmp	r3, #0
 8006930:	d003      	beq.n	800693a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 fa4f 	bl	8006dd6 <HAL_TIM_IC_CaptureCallback>
 8006938:	e005      	b.n	8006946 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 fa41 	bl	8006dc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 fa52 	bl	8006dea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	2b00      	cmp	r3, #0
 8006954:	d00c      	beq.n	8006970 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f003 0301 	and.w	r3, r3, #1
 800695c:	2b00      	cmp	r3, #0
 800695e:	d007      	beq.n	8006970 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f06f 0201 	mvn.w	r2, #1
 8006968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 fa1f 	bl	8006dae <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00c      	beq.n	8006994 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006980:	2b00      	cmp	r3, #0
 8006982:	d007      	beq.n	8006994 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800698c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 fe34 	bl	80075fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00c      	beq.n	80069b8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d007      	beq.n	80069b8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80069b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 fa23 	bl	8006dfe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	f003 0320 	and.w	r3, r3, #32
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d00c      	beq.n	80069dc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f003 0320 	and.w	r3, r3, #32
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d007      	beq.n	80069dc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f06f 0220 	mvn.w	r2, #32
 80069d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 fe06 	bl	80075e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069dc:	bf00      	nop
 80069de:	3710      	adds	r7, #16
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b086      	sub	sp, #24
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069f0:	2300      	movs	r3, #0
 80069f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d101      	bne.n	8006a02 <HAL_TIM_OC_ConfigChannel+0x1e>
 80069fe:	2302      	movs	r3, #2
 8006a00:	e048      	b.n	8006a94 <HAL_TIM_OC_ConfigChannel+0xb0>
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2201      	movs	r2, #1
 8006a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2b0c      	cmp	r3, #12
 8006a0e:	d839      	bhi.n	8006a84 <HAL_TIM_OC_ConfigChannel+0xa0>
 8006a10:	a201      	add	r2, pc, #4	; (adr r2, 8006a18 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a16:	bf00      	nop
 8006a18:	08006a4d 	.word	0x08006a4d
 8006a1c:	08006a85 	.word	0x08006a85
 8006a20:	08006a85 	.word	0x08006a85
 8006a24:	08006a85 	.word	0x08006a85
 8006a28:	08006a5b 	.word	0x08006a5b
 8006a2c:	08006a85 	.word	0x08006a85
 8006a30:	08006a85 	.word	0x08006a85
 8006a34:	08006a85 	.word	0x08006a85
 8006a38:	08006a69 	.word	0x08006a69
 8006a3c:	08006a85 	.word	0x08006a85
 8006a40:	08006a85 	.word	0x08006a85
 8006a44:	08006a85 	.word	0x08006a85
 8006a48:	08006a77 	.word	0x08006a77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	68b9      	ldr	r1, [r7, #8]
 8006a52:	4618      	mov	r0, r3
 8006a54:	f000 fa8a 	bl	8006f6c <TIM_OC1_SetConfig>
      break;
 8006a58:	e017      	b.n	8006a8a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	68b9      	ldr	r1, [r7, #8]
 8006a60:	4618      	mov	r0, r3
 8006a62:	f000 faf3 	bl	800704c <TIM_OC2_SetConfig>
      break;
 8006a66:	e010      	b.n	8006a8a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68b9      	ldr	r1, [r7, #8]
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f000 fb62 	bl	8007138 <TIM_OC3_SetConfig>
      break;
 8006a74:	e009      	b.n	8006a8a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68b9      	ldr	r1, [r7, #8]
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f000 fbcf 	bl	8007220 <TIM_OC4_SetConfig>
      break;
 8006a82:	e002      	b.n	8006a8a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	75fb      	strb	r3, [r7, #23]
      break;
 8006a88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3718      	adds	r7, #24
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b086      	sub	sp, #24
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d101      	bne.n	8006aba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006ab6:	2302      	movs	r3, #2
 8006ab8:	e0ae      	b.n	8006c18 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2201      	movs	r2, #1
 8006abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2b0c      	cmp	r3, #12
 8006ac6:	f200 809f 	bhi.w	8006c08 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006aca:	a201      	add	r2, pc, #4	; (adr r2, 8006ad0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad0:	08006b05 	.word	0x08006b05
 8006ad4:	08006c09 	.word	0x08006c09
 8006ad8:	08006c09 	.word	0x08006c09
 8006adc:	08006c09 	.word	0x08006c09
 8006ae0:	08006b45 	.word	0x08006b45
 8006ae4:	08006c09 	.word	0x08006c09
 8006ae8:	08006c09 	.word	0x08006c09
 8006aec:	08006c09 	.word	0x08006c09
 8006af0:	08006b87 	.word	0x08006b87
 8006af4:	08006c09 	.word	0x08006c09
 8006af8:	08006c09 	.word	0x08006c09
 8006afc:	08006c09 	.word	0x08006c09
 8006b00:	08006bc7 	.word	0x08006bc7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	68b9      	ldr	r1, [r7, #8]
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f000 fa2e 	bl	8006f6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	699a      	ldr	r2, [r3, #24]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f042 0208 	orr.w	r2, r2, #8
 8006b1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	699a      	ldr	r2, [r3, #24]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f022 0204 	bic.w	r2, r2, #4
 8006b2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	6999      	ldr	r1, [r3, #24]
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	691a      	ldr	r2, [r3, #16]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	430a      	orrs	r2, r1
 8006b40:	619a      	str	r2, [r3, #24]
      break;
 8006b42:	e064      	b.n	8006c0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68b9      	ldr	r1, [r7, #8]
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f000 fa7e 	bl	800704c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	699a      	ldr	r2, [r3, #24]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	699a      	ldr	r2, [r3, #24]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	6999      	ldr	r1, [r3, #24]
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	021a      	lsls	r2, r3, #8
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	430a      	orrs	r2, r1
 8006b82:	619a      	str	r2, [r3, #24]
      break;
 8006b84:	e043      	b.n	8006c0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	68b9      	ldr	r1, [r7, #8]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f000 fad3 	bl	8007138 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	69da      	ldr	r2, [r3, #28]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f042 0208 	orr.w	r2, r2, #8
 8006ba0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	69da      	ldr	r2, [r3, #28]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f022 0204 	bic.w	r2, r2, #4
 8006bb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	69d9      	ldr	r1, [r3, #28]
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	691a      	ldr	r2, [r3, #16]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	430a      	orrs	r2, r1
 8006bc2:	61da      	str	r2, [r3, #28]
      break;
 8006bc4:	e023      	b.n	8006c0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	68b9      	ldr	r1, [r7, #8]
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f000 fb27 	bl	8007220 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	69da      	ldr	r2, [r3, #28]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006be0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	69da      	ldr	r2, [r3, #28]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	69d9      	ldr	r1, [r3, #28]
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	021a      	lsls	r2, r3, #8
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	430a      	orrs	r2, r1
 8006c04:	61da      	str	r2, [r3, #28]
      break;
 8006c06:	e002      	b.n	8006c0e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c0c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c16:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3718      	adds	r7, #24
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d101      	bne.n	8006c3c <HAL_TIM_ConfigClockSource+0x1c>
 8006c38:	2302      	movs	r3, #2
 8006c3a:	e0b4      	b.n	8006da6 <HAL_TIM_ConfigClockSource+0x186>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2202      	movs	r2, #2
 8006c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006c5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	68ba      	ldr	r2, [r7, #8]
 8006c6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c74:	d03e      	beq.n	8006cf4 <HAL_TIM_ConfigClockSource+0xd4>
 8006c76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c7a:	f200 8087 	bhi.w	8006d8c <HAL_TIM_ConfigClockSource+0x16c>
 8006c7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c82:	f000 8086 	beq.w	8006d92 <HAL_TIM_ConfigClockSource+0x172>
 8006c86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c8a:	d87f      	bhi.n	8006d8c <HAL_TIM_ConfigClockSource+0x16c>
 8006c8c:	2b70      	cmp	r3, #112	; 0x70
 8006c8e:	d01a      	beq.n	8006cc6 <HAL_TIM_ConfigClockSource+0xa6>
 8006c90:	2b70      	cmp	r3, #112	; 0x70
 8006c92:	d87b      	bhi.n	8006d8c <HAL_TIM_ConfigClockSource+0x16c>
 8006c94:	2b60      	cmp	r3, #96	; 0x60
 8006c96:	d050      	beq.n	8006d3a <HAL_TIM_ConfigClockSource+0x11a>
 8006c98:	2b60      	cmp	r3, #96	; 0x60
 8006c9a:	d877      	bhi.n	8006d8c <HAL_TIM_ConfigClockSource+0x16c>
 8006c9c:	2b50      	cmp	r3, #80	; 0x50
 8006c9e:	d03c      	beq.n	8006d1a <HAL_TIM_ConfigClockSource+0xfa>
 8006ca0:	2b50      	cmp	r3, #80	; 0x50
 8006ca2:	d873      	bhi.n	8006d8c <HAL_TIM_ConfigClockSource+0x16c>
 8006ca4:	2b40      	cmp	r3, #64	; 0x40
 8006ca6:	d058      	beq.n	8006d5a <HAL_TIM_ConfigClockSource+0x13a>
 8006ca8:	2b40      	cmp	r3, #64	; 0x40
 8006caa:	d86f      	bhi.n	8006d8c <HAL_TIM_ConfigClockSource+0x16c>
 8006cac:	2b30      	cmp	r3, #48	; 0x30
 8006cae:	d064      	beq.n	8006d7a <HAL_TIM_ConfigClockSource+0x15a>
 8006cb0:	2b30      	cmp	r3, #48	; 0x30
 8006cb2:	d86b      	bhi.n	8006d8c <HAL_TIM_ConfigClockSource+0x16c>
 8006cb4:	2b20      	cmp	r3, #32
 8006cb6:	d060      	beq.n	8006d7a <HAL_TIM_ConfigClockSource+0x15a>
 8006cb8:	2b20      	cmp	r3, #32
 8006cba:	d867      	bhi.n	8006d8c <HAL_TIM_ConfigClockSource+0x16c>
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d05c      	beq.n	8006d7a <HAL_TIM_ConfigClockSource+0x15a>
 8006cc0:	2b10      	cmp	r3, #16
 8006cc2:	d05a      	beq.n	8006d7a <HAL_TIM_ConfigClockSource+0x15a>
 8006cc4:	e062      	b.n	8006d8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006cd6:	f000 fb73 	bl	80073c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ce8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	68ba      	ldr	r2, [r7, #8]
 8006cf0:	609a      	str	r2, [r3, #8]
      break;
 8006cf2:	e04f      	b.n	8006d94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d04:	f000 fb5c 	bl	80073c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	689a      	ldr	r2, [r3, #8]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d16:	609a      	str	r2, [r3, #8]
      break;
 8006d18:	e03c      	b.n	8006d94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d26:	461a      	mov	r2, r3
 8006d28:	f000 fad0 	bl	80072cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2150      	movs	r1, #80	; 0x50
 8006d32:	4618      	mov	r0, r3
 8006d34:	f000 fb29 	bl	800738a <TIM_ITRx_SetConfig>
      break;
 8006d38:	e02c      	b.n	8006d94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d46:	461a      	mov	r2, r3
 8006d48:	f000 faef 	bl	800732a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2160      	movs	r1, #96	; 0x60
 8006d52:	4618      	mov	r0, r3
 8006d54:	f000 fb19 	bl	800738a <TIM_ITRx_SetConfig>
      break;
 8006d58:	e01c      	b.n	8006d94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d66:	461a      	mov	r2, r3
 8006d68:	f000 fab0 	bl	80072cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2140      	movs	r1, #64	; 0x40
 8006d72:	4618      	mov	r0, r3
 8006d74:	f000 fb09 	bl	800738a <TIM_ITRx_SetConfig>
      break;
 8006d78:	e00c      	b.n	8006d94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4619      	mov	r1, r3
 8006d84:	4610      	mov	r0, r2
 8006d86:	f000 fb00 	bl	800738a <TIM_ITRx_SetConfig>
      break;
 8006d8a:	e003      	b.n	8006d94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	73fb      	strb	r3, [r7, #15]
      break;
 8006d90:	e000      	b.n	8006d94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006d92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3710      	adds	r7, #16
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006dae:	b480      	push	{r7}
 8006db0:	b083      	sub	sp, #12
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006db6:	bf00      	nop
 8006db8:	370c      	adds	r7, #12
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr

08006dc2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006dc2:	b480      	push	{r7}
 8006dc4:	b083      	sub	sp, #12
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006dca:	bf00      	nop
 8006dcc:	370c      	adds	r7, #12
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr

08006dd6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006dd6:	b480      	push	{r7}
 8006dd8:	b083      	sub	sp, #12
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006dde:	bf00      	nop
 8006de0:	370c      	adds	r7, #12
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr

08006dea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006dea:	b480      	push	{r7}
 8006dec:	b083      	sub	sp, #12
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006df2:	bf00      	nop
 8006df4:	370c      	adds	r7, #12
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr

08006dfe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006dfe:	b480      	push	{r7}
 8006e00:	b083      	sub	sp, #12
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e06:	bf00      	nop
 8006e08:	370c      	adds	r7, #12
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr
	...

08006e14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b085      	sub	sp, #20
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4a46      	ldr	r2, [pc, #280]	; (8006f40 <TIM_Base_SetConfig+0x12c>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d013      	beq.n	8006e54 <TIM_Base_SetConfig+0x40>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e32:	d00f      	beq.n	8006e54 <TIM_Base_SetConfig+0x40>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	4a43      	ldr	r2, [pc, #268]	; (8006f44 <TIM_Base_SetConfig+0x130>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d00b      	beq.n	8006e54 <TIM_Base_SetConfig+0x40>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a42      	ldr	r2, [pc, #264]	; (8006f48 <TIM_Base_SetConfig+0x134>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d007      	beq.n	8006e54 <TIM_Base_SetConfig+0x40>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a41      	ldr	r2, [pc, #260]	; (8006f4c <TIM_Base_SetConfig+0x138>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d003      	beq.n	8006e54 <TIM_Base_SetConfig+0x40>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4a40      	ldr	r2, [pc, #256]	; (8006f50 <TIM_Base_SetConfig+0x13c>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d108      	bne.n	8006e66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	68fa      	ldr	r2, [r7, #12]
 8006e62:	4313      	orrs	r3, r2
 8006e64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4a35      	ldr	r2, [pc, #212]	; (8006f40 <TIM_Base_SetConfig+0x12c>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d02b      	beq.n	8006ec6 <TIM_Base_SetConfig+0xb2>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e74:	d027      	beq.n	8006ec6 <TIM_Base_SetConfig+0xb2>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4a32      	ldr	r2, [pc, #200]	; (8006f44 <TIM_Base_SetConfig+0x130>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d023      	beq.n	8006ec6 <TIM_Base_SetConfig+0xb2>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4a31      	ldr	r2, [pc, #196]	; (8006f48 <TIM_Base_SetConfig+0x134>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d01f      	beq.n	8006ec6 <TIM_Base_SetConfig+0xb2>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a30      	ldr	r2, [pc, #192]	; (8006f4c <TIM_Base_SetConfig+0x138>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d01b      	beq.n	8006ec6 <TIM_Base_SetConfig+0xb2>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a2f      	ldr	r2, [pc, #188]	; (8006f50 <TIM_Base_SetConfig+0x13c>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d017      	beq.n	8006ec6 <TIM_Base_SetConfig+0xb2>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a2e      	ldr	r2, [pc, #184]	; (8006f54 <TIM_Base_SetConfig+0x140>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d013      	beq.n	8006ec6 <TIM_Base_SetConfig+0xb2>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4a2d      	ldr	r2, [pc, #180]	; (8006f58 <TIM_Base_SetConfig+0x144>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d00f      	beq.n	8006ec6 <TIM_Base_SetConfig+0xb2>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a2c      	ldr	r2, [pc, #176]	; (8006f5c <TIM_Base_SetConfig+0x148>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d00b      	beq.n	8006ec6 <TIM_Base_SetConfig+0xb2>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a2b      	ldr	r2, [pc, #172]	; (8006f60 <TIM_Base_SetConfig+0x14c>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d007      	beq.n	8006ec6 <TIM_Base_SetConfig+0xb2>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a2a      	ldr	r2, [pc, #168]	; (8006f64 <TIM_Base_SetConfig+0x150>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d003      	beq.n	8006ec6 <TIM_Base_SetConfig+0xb2>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4a29      	ldr	r2, [pc, #164]	; (8006f68 <TIM_Base_SetConfig+0x154>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d108      	bne.n	8006ed8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ecc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	68db      	ldr	r3, [r3, #12]
 8006ed2:	68fa      	ldr	r2, [r7, #12]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	695b      	ldr	r3, [r3, #20]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	68fa      	ldr	r2, [r7, #12]
 8006eea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	689a      	ldr	r2, [r3, #8]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4a10      	ldr	r2, [pc, #64]	; (8006f40 <TIM_Base_SetConfig+0x12c>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d003      	beq.n	8006f0c <TIM_Base_SetConfig+0xf8>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	4a12      	ldr	r2, [pc, #72]	; (8006f50 <TIM_Base_SetConfig+0x13c>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d103      	bne.n	8006f14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	691a      	ldr	r2, [r3, #16]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	f003 0301 	and.w	r3, r3, #1
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d105      	bne.n	8006f32 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	f023 0201 	bic.w	r2, r3, #1
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	611a      	str	r2, [r3, #16]
  }
}
 8006f32:	bf00      	nop
 8006f34:	3714      	adds	r7, #20
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	40010000 	.word	0x40010000
 8006f44:	40000400 	.word	0x40000400
 8006f48:	40000800 	.word	0x40000800
 8006f4c:	40000c00 	.word	0x40000c00
 8006f50:	40010400 	.word	0x40010400
 8006f54:	40014000 	.word	0x40014000
 8006f58:	40014400 	.word	0x40014400
 8006f5c:	40014800 	.word	0x40014800
 8006f60:	40001800 	.word	0x40001800
 8006f64:	40001c00 	.word	0x40001c00
 8006f68:	40002000 	.word	0x40002000

08006f6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b087      	sub	sp, #28
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a1b      	ldr	r3, [r3, #32]
 8006f7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6a1b      	ldr	r3, [r3, #32]
 8006f80:	f023 0201 	bic.w	r2, r3, #1
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	699b      	ldr	r3, [r3, #24]
 8006f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f023 0303 	bic.w	r3, r3, #3
 8006fa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	f023 0302 	bic.w	r3, r3, #2
 8006fb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	697a      	ldr	r2, [r7, #20]
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4a20      	ldr	r2, [pc, #128]	; (8007044 <TIM_OC1_SetConfig+0xd8>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d003      	beq.n	8006fd0 <TIM_OC1_SetConfig+0x64>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a1f      	ldr	r2, [pc, #124]	; (8007048 <TIM_OC1_SetConfig+0xdc>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d10c      	bne.n	8006fea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	f023 0308 	bic.w	r3, r3, #8
 8006fd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	697a      	ldr	r2, [r7, #20]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	f023 0304 	bic.w	r3, r3, #4
 8006fe8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a15      	ldr	r2, [pc, #84]	; (8007044 <TIM_OC1_SetConfig+0xd8>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d003      	beq.n	8006ffa <TIM_OC1_SetConfig+0x8e>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a14      	ldr	r2, [pc, #80]	; (8007048 <TIM_OC1_SetConfig+0xdc>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d111      	bne.n	800701e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007000:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007008:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	695b      	ldr	r3, [r3, #20]
 800700e:	693a      	ldr	r2, [r7, #16]
 8007010:	4313      	orrs	r3, r2
 8007012:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	699b      	ldr	r3, [r3, #24]
 8007018:	693a      	ldr	r2, [r7, #16]
 800701a:	4313      	orrs	r3, r2
 800701c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	693a      	ldr	r2, [r7, #16]
 8007022:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	68fa      	ldr	r2, [r7, #12]
 8007028:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	685a      	ldr	r2, [r3, #4]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	697a      	ldr	r2, [r7, #20]
 8007036:	621a      	str	r2, [r3, #32]
}
 8007038:	bf00      	nop
 800703a:	371c      	adds	r7, #28
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr
 8007044:	40010000 	.word	0x40010000
 8007048:	40010400 	.word	0x40010400

0800704c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800704c:	b480      	push	{r7}
 800704e:	b087      	sub	sp, #28
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a1b      	ldr	r3, [r3, #32]
 800705a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6a1b      	ldr	r3, [r3, #32]
 8007060:	f023 0210 	bic.w	r2, r3, #16
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	699b      	ldr	r3, [r3, #24]
 8007072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800707a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007082:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	021b      	lsls	r3, r3, #8
 800708a:	68fa      	ldr	r2, [r7, #12]
 800708c:	4313      	orrs	r3, r2
 800708e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	f023 0320 	bic.w	r3, r3, #32
 8007096:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	011b      	lsls	r3, r3, #4
 800709e:	697a      	ldr	r2, [r7, #20]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4a22      	ldr	r2, [pc, #136]	; (8007130 <TIM_OC2_SetConfig+0xe4>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d003      	beq.n	80070b4 <TIM_OC2_SetConfig+0x68>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4a21      	ldr	r2, [pc, #132]	; (8007134 <TIM_OC2_SetConfig+0xe8>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d10d      	bne.n	80070d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	011b      	lsls	r3, r3, #4
 80070c2:	697a      	ldr	r2, [r7, #20]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	4a17      	ldr	r2, [pc, #92]	; (8007130 <TIM_OC2_SetConfig+0xe4>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d003      	beq.n	80070e0 <TIM_OC2_SetConfig+0x94>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	4a16      	ldr	r2, [pc, #88]	; (8007134 <TIM_OC2_SetConfig+0xe8>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d113      	bne.n	8007108 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	695b      	ldr	r3, [r3, #20]
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	693a      	ldr	r2, [r7, #16]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	699b      	ldr	r3, [r3, #24]
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	693a      	ldr	r2, [r7, #16]
 8007104:	4313      	orrs	r3, r2
 8007106:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	693a      	ldr	r2, [r7, #16]
 800710c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	685a      	ldr	r2, [r3, #4]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	697a      	ldr	r2, [r7, #20]
 8007120:	621a      	str	r2, [r3, #32]
}
 8007122:	bf00      	nop
 8007124:	371c      	adds	r7, #28
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr
 800712e:	bf00      	nop
 8007130:	40010000 	.word	0x40010000
 8007134:	40010400 	.word	0x40010400

08007138 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007138:	b480      	push	{r7}
 800713a:	b087      	sub	sp, #28
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a1b      	ldr	r3, [r3, #32]
 8007146:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6a1b      	ldr	r3, [r3, #32]
 800714c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	69db      	ldr	r3, [r3, #28]
 800715e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f023 0303 	bic.w	r3, r3, #3
 800716e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68fa      	ldr	r2, [r7, #12]
 8007176:	4313      	orrs	r3, r2
 8007178:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007180:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	021b      	lsls	r3, r3, #8
 8007188:	697a      	ldr	r2, [r7, #20]
 800718a:	4313      	orrs	r3, r2
 800718c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4a21      	ldr	r2, [pc, #132]	; (8007218 <TIM_OC3_SetConfig+0xe0>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d003      	beq.n	800719e <TIM_OC3_SetConfig+0x66>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4a20      	ldr	r2, [pc, #128]	; (800721c <TIM_OC3_SetConfig+0xe4>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d10d      	bne.n	80071ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	021b      	lsls	r3, r3, #8
 80071ac:	697a      	ldr	r2, [r7, #20]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4a16      	ldr	r2, [pc, #88]	; (8007218 <TIM_OC3_SetConfig+0xe0>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d003      	beq.n	80071ca <TIM_OC3_SetConfig+0x92>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4a15      	ldr	r2, [pc, #84]	; (800721c <TIM_OC3_SetConfig+0xe4>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d113      	bne.n	80071f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	695b      	ldr	r3, [r3, #20]
 80071de:	011b      	lsls	r3, r3, #4
 80071e0:	693a      	ldr	r2, [r7, #16]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	699b      	ldr	r3, [r3, #24]
 80071ea:	011b      	lsls	r3, r3, #4
 80071ec:	693a      	ldr	r2, [r7, #16]
 80071ee:	4313      	orrs	r3, r2
 80071f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	693a      	ldr	r2, [r7, #16]
 80071f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	68fa      	ldr	r2, [r7, #12]
 80071fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	685a      	ldr	r2, [r3, #4]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	697a      	ldr	r2, [r7, #20]
 800720a:	621a      	str	r2, [r3, #32]
}
 800720c:	bf00      	nop
 800720e:	371c      	adds	r7, #28
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr
 8007218:	40010000 	.word	0x40010000
 800721c:	40010400 	.word	0x40010400

08007220 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007220:	b480      	push	{r7}
 8007222:	b087      	sub	sp, #28
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a1b      	ldr	r3, [r3, #32]
 800722e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6a1b      	ldr	r3, [r3, #32]
 8007234:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	69db      	ldr	r3, [r3, #28]
 8007246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800724e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007256:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	021b      	lsls	r3, r3, #8
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	4313      	orrs	r3, r2
 8007262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800726a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	031b      	lsls	r3, r3, #12
 8007272:	693a      	ldr	r2, [r7, #16]
 8007274:	4313      	orrs	r3, r2
 8007276:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	4a12      	ldr	r2, [pc, #72]	; (80072c4 <TIM_OC4_SetConfig+0xa4>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d003      	beq.n	8007288 <TIM_OC4_SetConfig+0x68>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4a11      	ldr	r2, [pc, #68]	; (80072c8 <TIM_OC4_SetConfig+0xa8>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d109      	bne.n	800729c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800728e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	695b      	ldr	r3, [r3, #20]
 8007294:	019b      	lsls	r3, r3, #6
 8007296:	697a      	ldr	r2, [r7, #20]
 8007298:	4313      	orrs	r3, r2
 800729a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	697a      	ldr	r2, [r7, #20]
 80072a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	685a      	ldr	r2, [r3, #4]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	693a      	ldr	r2, [r7, #16]
 80072b4:	621a      	str	r2, [r3, #32]
}
 80072b6:	bf00      	nop
 80072b8:	371c      	adds	r7, #28
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr
 80072c2:	bf00      	nop
 80072c4:	40010000 	.word	0x40010000
 80072c8:	40010400 	.word	0x40010400

080072cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b087      	sub	sp, #28
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	60b9      	str	r1, [r7, #8]
 80072d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6a1b      	ldr	r3, [r3, #32]
 80072dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6a1b      	ldr	r3, [r3, #32]
 80072e2:	f023 0201 	bic.w	r2, r3, #1
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	699b      	ldr	r3, [r3, #24]
 80072ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	011b      	lsls	r3, r3, #4
 80072fc:	693a      	ldr	r2, [r7, #16]
 80072fe:	4313      	orrs	r3, r2
 8007300:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	f023 030a 	bic.w	r3, r3, #10
 8007308:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800730a:	697a      	ldr	r2, [r7, #20]
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	4313      	orrs	r3, r2
 8007310:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	693a      	ldr	r2, [r7, #16]
 8007316:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	697a      	ldr	r2, [r7, #20]
 800731c:	621a      	str	r2, [r3, #32]
}
 800731e:	bf00      	nop
 8007320:	371c      	adds	r7, #28
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr

0800732a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800732a:	b480      	push	{r7}
 800732c:	b087      	sub	sp, #28
 800732e:	af00      	add	r7, sp, #0
 8007330:	60f8      	str	r0, [r7, #12]
 8007332:	60b9      	str	r1, [r7, #8]
 8007334:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	6a1b      	ldr	r3, [r3, #32]
 800733a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	6a1b      	ldr	r3, [r3, #32]
 8007340:	f023 0210 	bic.w	r2, r3, #16
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007354:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	031b      	lsls	r3, r3, #12
 800735a:	693a      	ldr	r2, [r7, #16]
 800735c:	4313      	orrs	r3, r2
 800735e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007366:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	011b      	lsls	r3, r3, #4
 800736c:	697a      	ldr	r2, [r7, #20]
 800736e:	4313      	orrs	r3, r2
 8007370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	693a      	ldr	r2, [r7, #16]
 8007376:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	697a      	ldr	r2, [r7, #20]
 800737c:	621a      	str	r2, [r3, #32]
}
 800737e:	bf00      	nop
 8007380:	371c      	adds	r7, #28
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr

0800738a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800738a:	b480      	push	{r7}
 800738c:	b085      	sub	sp, #20
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
 8007392:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80073a2:	683a      	ldr	r2, [r7, #0]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	4313      	orrs	r3, r2
 80073a8:	f043 0307 	orr.w	r3, r3, #7
 80073ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	68fa      	ldr	r2, [r7, #12]
 80073b2:	609a      	str	r2, [r3, #8]
}
 80073b4:	bf00      	nop
 80073b6:	3714      	adds	r7, #20
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b087      	sub	sp, #28
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
 80073cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	021a      	lsls	r2, r3, #8
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	431a      	orrs	r2, r3
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	4313      	orrs	r3, r2
 80073e8:	697a      	ldr	r2, [r7, #20]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	697a      	ldr	r2, [r7, #20]
 80073f2:	609a      	str	r2, [r3, #8]
}
 80073f4:	bf00      	nop
 80073f6:	371c      	adds	r7, #28
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007400:	b480      	push	{r7}
 8007402:	b087      	sub	sp, #28
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	f003 031f 	and.w	r3, r3, #31
 8007412:	2201      	movs	r2, #1
 8007414:	fa02 f303 	lsl.w	r3, r2, r3
 8007418:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	6a1a      	ldr	r2, [r3, #32]
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	43db      	mvns	r3, r3
 8007422:	401a      	ands	r2, r3
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	6a1a      	ldr	r2, [r3, #32]
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	f003 031f 	and.w	r3, r3, #31
 8007432:	6879      	ldr	r1, [r7, #4]
 8007434:	fa01 f303 	lsl.w	r3, r1, r3
 8007438:	431a      	orrs	r2, r3
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	621a      	str	r2, [r3, #32]
}
 800743e:	bf00      	nop
 8007440:	371c      	adds	r7, #28
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr
	...

0800744c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800744c:	b480      	push	{r7}
 800744e:	b085      	sub	sp, #20
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800745c:	2b01      	cmp	r3, #1
 800745e:	d101      	bne.n	8007464 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007460:	2302      	movs	r3, #2
 8007462:	e05a      	b.n	800751a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2201      	movs	r2, #1
 8007468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2202      	movs	r2, #2
 8007470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800748a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	68fa      	ldr	r2, [r7, #12]
 8007492:	4313      	orrs	r3, r2
 8007494:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	68fa      	ldr	r2, [r7, #12]
 800749c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a21      	ldr	r2, [pc, #132]	; (8007528 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d022      	beq.n	80074ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074b0:	d01d      	beq.n	80074ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a1d      	ldr	r2, [pc, #116]	; (800752c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d018      	beq.n	80074ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a1b      	ldr	r2, [pc, #108]	; (8007530 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d013      	beq.n	80074ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a1a      	ldr	r2, [pc, #104]	; (8007534 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d00e      	beq.n	80074ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a18      	ldr	r2, [pc, #96]	; (8007538 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d009      	beq.n	80074ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a17      	ldr	r2, [pc, #92]	; (800753c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d004      	beq.n	80074ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a15      	ldr	r2, [pc, #84]	; (8007540 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d10c      	bne.n	8007508 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	68ba      	ldr	r2, [r7, #8]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68ba      	ldr	r2, [r7, #8]
 8007506:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	3714      	adds	r7, #20
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr
 8007526:	bf00      	nop
 8007528:	40010000 	.word	0x40010000
 800752c:	40000400 	.word	0x40000400
 8007530:	40000800 	.word	0x40000800
 8007534:	40000c00 	.word	0x40000c00
 8007538:	40010400 	.word	0x40010400
 800753c:	40014000 	.word	0x40014000
 8007540:	40001800 	.word	0x40001800

08007544 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007544:	b480      	push	{r7}
 8007546:	b085      	sub	sp, #20
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800754e:	2300      	movs	r3, #0
 8007550:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007558:	2b01      	cmp	r3, #1
 800755a:	d101      	bne.n	8007560 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800755c:	2302      	movs	r3, #2
 800755e:	e03d      	b.n	80075dc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2201      	movs	r2, #1
 8007564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	4313      	orrs	r3, r2
 8007574:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	4313      	orrs	r3, r2
 8007582:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	4313      	orrs	r3, r2
 8007590:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4313      	orrs	r3, r2
 800759e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	4313      	orrs	r3, r2
 80075ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	695b      	ldr	r3, [r3, #20]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	69db      	ldr	r3, [r3, #28]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	68fa      	ldr	r2, [r7, #12]
 80075d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075da:	2300      	movs	r3, #0
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3714      	adds	r7, #20
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075f0:	bf00      	nop
 80075f2:	370c      	adds	r7, #12
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007604:	bf00      	nop
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d101      	bne.n	8007622 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	e042      	b.n	80076a8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007628:	b2db      	uxtb	r3, r3
 800762a:	2b00      	cmp	r3, #0
 800762c:	d106      	bne.n	800763c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f7fb fb38 	bl	8002cac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2224      	movs	r2, #36	; 0x24
 8007640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	68da      	ldr	r2, [r3, #12]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007652:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 fdbd 	bl	80081d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	691a      	ldr	r2, [r3, #16]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007668:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	695a      	ldr	r2, [r3, #20]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007678:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	68da      	ldr	r2, [r3, #12]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007688:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2220      	movs	r2, #32
 8007694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2220      	movs	r2, #32
 800769c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3708      	adds	r7, #8
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b08a      	sub	sp, #40	; 0x28
 80076b4:	af02      	add	r7, sp, #8
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	603b      	str	r3, [r7, #0]
 80076bc:	4613      	mov	r3, r2
 80076be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80076c0:	2300      	movs	r3, #0
 80076c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	2b20      	cmp	r3, #32
 80076ce:	d175      	bne.n	80077bc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d002      	beq.n	80076dc <HAL_UART_Transmit+0x2c>
 80076d6:	88fb      	ldrh	r3, [r7, #6]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d101      	bne.n	80076e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	e06e      	b.n	80077be <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2200      	movs	r2, #0
 80076e4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2221      	movs	r2, #33	; 0x21
 80076ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80076ee:	f7fb ff2f 	bl	8003550 <HAL_GetTick>
 80076f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	88fa      	ldrh	r2, [r7, #6]
 80076f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	88fa      	ldrh	r2, [r7, #6]
 80076fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007708:	d108      	bne.n	800771c <HAL_UART_Transmit+0x6c>
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d104      	bne.n	800771c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007712:	2300      	movs	r3, #0
 8007714:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	61bb      	str	r3, [r7, #24]
 800771a:	e003      	b.n	8007724 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007720:	2300      	movs	r3, #0
 8007722:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007724:	e02e      	b.n	8007784 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	9300      	str	r3, [sp, #0]
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	2200      	movs	r2, #0
 800772e:	2180      	movs	r1, #128	; 0x80
 8007730:	68f8      	ldr	r0, [r7, #12]
 8007732:	f000 fb1f 	bl	8007d74 <UART_WaitOnFlagUntilTimeout>
 8007736:	4603      	mov	r3, r0
 8007738:	2b00      	cmp	r3, #0
 800773a:	d005      	beq.n	8007748 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2220      	movs	r2, #32
 8007740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8007744:	2303      	movs	r3, #3
 8007746:	e03a      	b.n	80077be <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007748:	69fb      	ldr	r3, [r7, #28]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d10b      	bne.n	8007766 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	881b      	ldrh	r3, [r3, #0]
 8007752:	461a      	mov	r2, r3
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800775c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	3302      	adds	r3, #2
 8007762:	61bb      	str	r3, [r7, #24]
 8007764:	e007      	b.n	8007776 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007766:	69fb      	ldr	r3, [r7, #28]
 8007768:	781a      	ldrb	r2, [r3, #0]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	3301      	adds	r3, #1
 8007774:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800777a:	b29b      	uxth	r3, r3
 800777c:	3b01      	subs	r3, #1
 800777e:	b29a      	uxth	r2, r3
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007788:	b29b      	uxth	r3, r3
 800778a:	2b00      	cmp	r3, #0
 800778c:	d1cb      	bne.n	8007726 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	9300      	str	r3, [sp, #0]
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	2200      	movs	r2, #0
 8007796:	2140      	movs	r1, #64	; 0x40
 8007798:	68f8      	ldr	r0, [r7, #12]
 800779a:	f000 faeb 	bl	8007d74 <UART_WaitOnFlagUntilTimeout>
 800779e:	4603      	mov	r3, r0
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d005      	beq.n	80077b0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2220      	movs	r2, #32
 80077a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80077ac:	2303      	movs	r3, #3
 80077ae:	e006      	b.n	80077be <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2220      	movs	r2, #32
 80077b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80077b8:	2300      	movs	r3, #0
 80077ba:	e000      	b.n	80077be <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80077bc:	2302      	movs	r3, #2
  }
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3720      	adds	r7, #32
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b084      	sub	sp, #16
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	60f8      	str	r0, [r7, #12]
 80077ce:	60b9      	str	r1, [r7, #8]
 80077d0:	4613      	mov	r3, r2
 80077d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	2b20      	cmp	r3, #32
 80077de:	d112      	bne.n	8007806 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d002      	beq.n	80077ec <HAL_UART_Receive_IT+0x26>
 80077e6:	88fb      	ldrh	r3, [r7, #6]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d101      	bne.n	80077f0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	e00b      	b.n	8007808 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2200      	movs	r2, #0
 80077f4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80077f6:	88fb      	ldrh	r3, [r7, #6]
 80077f8:	461a      	mov	r2, r3
 80077fa:	68b9      	ldr	r1, [r7, #8]
 80077fc:	68f8      	ldr	r0, [r7, #12]
 80077fe:	f000 fb12 	bl	8007e26 <UART_Start_Receive_IT>
 8007802:	4603      	mov	r3, r0
 8007804:	e000      	b.n	8007808 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007806:	2302      	movs	r3, #2
  }
}
 8007808:	4618      	mov	r0, r3
 800780a:	3710      	adds	r7, #16
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b0ba      	sub	sp, #232	; 0xe8
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	695b      	ldr	r3, [r3, #20]
 8007832:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007836:	2300      	movs	r3, #0
 8007838:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800783c:	2300      	movs	r3, #0
 800783e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007846:	f003 030f 	and.w	r3, r3, #15
 800784a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800784e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007852:	2b00      	cmp	r3, #0
 8007854:	d10f      	bne.n	8007876 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800785a:	f003 0320 	and.w	r3, r3, #32
 800785e:	2b00      	cmp	r3, #0
 8007860:	d009      	beq.n	8007876 <HAL_UART_IRQHandler+0x66>
 8007862:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007866:	f003 0320 	and.w	r3, r3, #32
 800786a:	2b00      	cmp	r3, #0
 800786c:	d003      	beq.n	8007876 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 fbf2 	bl	8008058 <UART_Receive_IT>
      return;
 8007874:	e25b      	b.n	8007d2e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007876:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800787a:	2b00      	cmp	r3, #0
 800787c:	f000 80de 	beq.w	8007a3c <HAL_UART_IRQHandler+0x22c>
 8007880:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007884:	f003 0301 	and.w	r3, r3, #1
 8007888:	2b00      	cmp	r3, #0
 800788a:	d106      	bne.n	800789a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800788c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007890:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007894:	2b00      	cmp	r3, #0
 8007896:	f000 80d1 	beq.w	8007a3c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800789a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800789e:	f003 0301 	and.w	r3, r3, #1
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d00b      	beq.n	80078be <HAL_UART_IRQHandler+0xae>
 80078a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d005      	beq.n	80078be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078b6:	f043 0201 	orr.w	r2, r3, #1
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80078be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078c2:	f003 0304 	and.w	r3, r3, #4
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00b      	beq.n	80078e2 <HAL_UART_IRQHandler+0xd2>
 80078ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078ce:	f003 0301 	and.w	r3, r3, #1
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d005      	beq.n	80078e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078da:	f043 0202 	orr.w	r2, r3, #2
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80078e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078e6:	f003 0302 	and.w	r3, r3, #2
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d00b      	beq.n	8007906 <HAL_UART_IRQHandler+0xf6>
 80078ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078f2:	f003 0301 	and.w	r3, r3, #1
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d005      	beq.n	8007906 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078fe:	f043 0204 	orr.w	r2, r3, #4
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800790a:	f003 0308 	and.w	r3, r3, #8
 800790e:	2b00      	cmp	r3, #0
 8007910:	d011      	beq.n	8007936 <HAL_UART_IRQHandler+0x126>
 8007912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007916:	f003 0320 	and.w	r3, r3, #32
 800791a:	2b00      	cmp	r3, #0
 800791c:	d105      	bne.n	800792a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800791e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007922:	f003 0301 	and.w	r3, r3, #1
 8007926:	2b00      	cmp	r3, #0
 8007928:	d005      	beq.n	8007936 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800792e:	f043 0208 	orr.w	r2, r3, #8
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800793a:	2b00      	cmp	r3, #0
 800793c:	f000 81f2 	beq.w	8007d24 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007944:	f003 0320 	and.w	r3, r3, #32
 8007948:	2b00      	cmp	r3, #0
 800794a:	d008      	beq.n	800795e <HAL_UART_IRQHandler+0x14e>
 800794c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007950:	f003 0320 	and.w	r3, r3, #32
 8007954:	2b00      	cmp	r3, #0
 8007956:	d002      	beq.n	800795e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 fb7d 	bl	8008058 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	695b      	ldr	r3, [r3, #20]
 8007964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007968:	2b40      	cmp	r3, #64	; 0x40
 800796a:	bf0c      	ite	eq
 800796c:	2301      	moveq	r3, #1
 800796e:	2300      	movne	r3, #0
 8007970:	b2db      	uxtb	r3, r3
 8007972:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800797a:	f003 0308 	and.w	r3, r3, #8
 800797e:	2b00      	cmp	r3, #0
 8007980:	d103      	bne.n	800798a <HAL_UART_IRQHandler+0x17a>
 8007982:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007986:	2b00      	cmp	r3, #0
 8007988:	d04f      	beq.n	8007a2a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 fa85 	bl	8007e9a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	695b      	ldr	r3, [r3, #20]
 8007996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800799a:	2b40      	cmp	r3, #64	; 0x40
 800799c:	d141      	bne.n	8007a22 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	3314      	adds	r3, #20
 80079a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80079ac:	e853 3f00 	ldrex	r3, [r3]
 80079b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80079b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	3314      	adds	r3, #20
 80079c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80079ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80079ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80079d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80079da:	e841 2300 	strex	r3, r2, [r1]
 80079de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80079e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1d9      	bne.n	800799e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d013      	beq.n	8007a1a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079f6:	4a7e      	ldr	r2, [pc, #504]	; (8007bf0 <HAL_UART_IRQHandler+0x3e0>)
 80079f8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079fe:	4618      	mov	r0, r3
 8007a00:	f7fc fda4 	bl	800454c <HAL_DMA_Abort_IT>
 8007a04:	4603      	mov	r3, r0
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d016      	beq.n	8007a38 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007a14:	4610      	mov	r0, r2
 8007a16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a18:	e00e      	b.n	8007a38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 f994 	bl	8007d48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a20:	e00a      	b.n	8007a38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 f990 	bl	8007d48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a28:	e006      	b.n	8007a38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 f98c 	bl	8007d48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8007a36:	e175      	b.n	8007d24 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a38:	bf00      	nop
    return;
 8007a3a:	e173      	b.n	8007d24 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	f040 814f 	bne.w	8007ce4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a4a:	f003 0310 	and.w	r3, r3, #16
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	f000 8148 	beq.w	8007ce4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a58:	f003 0310 	and.w	r3, r3, #16
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	f000 8141 	beq.w	8007ce4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a62:	2300      	movs	r3, #0
 8007a64:	60bb      	str	r3, [r7, #8]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	60bb      	str	r3, [r7, #8]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	60bb      	str	r3, [r7, #8]
 8007a76:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	695b      	ldr	r3, [r3, #20]
 8007a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a82:	2b40      	cmp	r3, #64	; 0x40
 8007a84:	f040 80b6 	bne.w	8007bf4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007a94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f000 8145 	beq.w	8007d28 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007aa2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	f080 813e 	bcs.w	8007d28 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ab2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ab8:	69db      	ldr	r3, [r3, #28]
 8007aba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007abe:	f000 8088 	beq.w	8007bd2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	330c      	adds	r3, #12
 8007ac8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007acc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ad0:	e853 3f00 	ldrex	r3, [r3]
 8007ad4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007ad8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007adc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ae0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	330c      	adds	r3, #12
 8007aea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007aee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007af2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007afa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007afe:	e841 2300 	strex	r3, r2, [r1]
 8007b02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007b06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d1d9      	bne.n	8007ac2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	3314      	adds	r3, #20
 8007b14:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b18:	e853 3f00 	ldrex	r3, [r3]
 8007b1c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007b1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b20:	f023 0301 	bic.w	r3, r3, #1
 8007b24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	3314      	adds	r3, #20
 8007b2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007b32:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007b36:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b38:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007b3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007b3e:	e841 2300 	strex	r3, r2, [r1]
 8007b42:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007b44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d1e1      	bne.n	8007b0e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	3314      	adds	r3, #20
 8007b50:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b54:	e853 3f00 	ldrex	r3, [r3]
 8007b58:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007b5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	3314      	adds	r3, #20
 8007b6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007b6e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007b70:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b72:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007b74:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007b76:	e841 2300 	strex	r3, r2, [r1]
 8007b7a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007b7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d1e3      	bne.n	8007b4a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2220      	movs	r2, #32
 8007b86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	330c      	adds	r3, #12
 8007b96:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b9a:	e853 3f00 	ldrex	r3, [r3]
 8007b9e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007ba0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ba2:	f023 0310 	bic.w	r3, r3, #16
 8007ba6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	330c      	adds	r3, #12
 8007bb0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007bb4:	65ba      	str	r2, [r7, #88]	; 0x58
 8007bb6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007bba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007bbc:	e841 2300 	strex	r3, r2, [r1]
 8007bc0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007bc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d1e3      	bne.n	8007b90 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f7fc fc4d 	bl	800446c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2202      	movs	r2, #2
 8007bd6:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	1ad3      	subs	r3, r2, r3
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	4619      	mov	r1, r3
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 f8b7 	bl	8007d5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007bee:	e09b      	b.n	8007d28 <HAL_UART_IRQHandler+0x518>
 8007bf0:	08007f61 	.word	0x08007f61
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	1ad3      	subs	r3, r2, r3
 8007c00:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	f000 808e 	beq.w	8007d2c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007c10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	f000 8089 	beq.w	8007d2c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	330c      	adds	r3, #12
 8007c20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c24:	e853 3f00 	ldrex	r3, [r3]
 8007c28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	330c      	adds	r3, #12
 8007c3a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007c3e:	647a      	str	r2, [r7, #68]	; 0x44
 8007c40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c46:	e841 2300 	strex	r3, r2, [r1]
 8007c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d1e3      	bne.n	8007c1a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	3314      	adds	r3, #20
 8007c58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5c:	e853 3f00 	ldrex	r3, [r3]
 8007c60:	623b      	str	r3, [r7, #32]
   return(result);
 8007c62:	6a3b      	ldr	r3, [r7, #32]
 8007c64:	f023 0301 	bic.w	r3, r3, #1
 8007c68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	3314      	adds	r3, #20
 8007c72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007c76:	633a      	str	r2, [r7, #48]	; 0x30
 8007c78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c7e:	e841 2300 	strex	r3, r2, [r1]
 8007c82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1e3      	bne.n	8007c52 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2220      	movs	r2, #32
 8007c8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	330c      	adds	r3, #12
 8007c9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	e853 3f00 	ldrex	r3, [r3]
 8007ca6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f023 0310 	bic.w	r3, r3, #16
 8007cae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	330c      	adds	r3, #12
 8007cb8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007cbc:	61fa      	str	r2, [r7, #28]
 8007cbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc0:	69b9      	ldr	r1, [r7, #24]
 8007cc2:	69fa      	ldr	r2, [r7, #28]
 8007cc4:	e841 2300 	strex	r3, r2, [r1]
 8007cc8:	617b      	str	r3, [r7, #20]
   return(result);
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d1e3      	bne.n	8007c98 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2202      	movs	r2, #2
 8007cd4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007cd6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007cda:	4619      	mov	r1, r3
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 f83d 	bl	8007d5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007ce2:	e023      	b.n	8007d2c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d009      	beq.n	8007d04 <HAL_UART_IRQHandler+0x4f4>
 8007cf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d003      	beq.n	8007d04 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 f943 	bl	8007f88 <UART_Transmit_IT>
    return;
 8007d02:	e014      	b.n	8007d2e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007d04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d00e      	beq.n	8007d2e <HAL_UART_IRQHandler+0x51e>
 8007d10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d008      	beq.n	8007d2e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 f983 	bl	8008028 <UART_EndTransmit_IT>
    return;
 8007d22:	e004      	b.n	8007d2e <HAL_UART_IRQHandler+0x51e>
    return;
 8007d24:	bf00      	nop
 8007d26:	e002      	b.n	8007d2e <HAL_UART_IRQHandler+0x51e>
      return;
 8007d28:	bf00      	nop
 8007d2a:	e000      	b.n	8007d2e <HAL_UART_IRQHandler+0x51e>
      return;
 8007d2c:	bf00      	nop
  }
}
 8007d2e:	37e8      	adds	r7, #232	; 0xe8
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b083      	sub	sp, #12
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007d3c:	bf00      	nop
 8007d3e:	370c      	adds	r7, #12
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007d50:	bf00      	nop
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	460b      	mov	r3, r1
 8007d66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d68:	bf00      	nop
 8007d6a:	370c      	adds	r7, #12
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr

08007d74 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b086      	sub	sp, #24
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	603b      	str	r3, [r7, #0]
 8007d80:	4613      	mov	r3, r2
 8007d82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d84:	e03b      	b.n	8007dfe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d86:	6a3b      	ldr	r3, [r7, #32]
 8007d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d8c:	d037      	beq.n	8007dfe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d8e:	f7fb fbdf 	bl	8003550 <HAL_GetTick>
 8007d92:	4602      	mov	r2, r0
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	1ad3      	subs	r3, r2, r3
 8007d98:	6a3a      	ldr	r2, [r7, #32]
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d302      	bcc.n	8007da4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d9e:	6a3b      	ldr	r3, [r7, #32]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d101      	bne.n	8007da8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007da4:	2303      	movs	r3, #3
 8007da6:	e03a      	b.n	8007e1e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	68db      	ldr	r3, [r3, #12]
 8007dae:	f003 0304 	and.w	r3, r3, #4
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d023      	beq.n	8007dfe <UART_WaitOnFlagUntilTimeout+0x8a>
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	2b80      	cmp	r3, #128	; 0x80
 8007dba:	d020      	beq.n	8007dfe <UART_WaitOnFlagUntilTimeout+0x8a>
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	2b40      	cmp	r3, #64	; 0x40
 8007dc0:	d01d      	beq.n	8007dfe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f003 0308 	and.w	r3, r3, #8
 8007dcc:	2b08      	cmp	r3, #8
 8007dce:	d116      	bne.n	8007dfe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	617b      	str	r3, [r7, #20]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	617b      	str	r3, [r7, #20]
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	617b      	str	r3, [r7, #20]
 8007de4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007de6:	68f8      	ldr	r0, [r7, #12]
 8007de8:	f000 f857 	bl	8007e9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2208      	movs	r2, #8
 8007df0:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2200      	movs	r2, #0
 8007df6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e00f      	b.n	8007e1e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	4013      	ands	r3, r2
 8007e08:	68ba      	ldr	r2, [r7, #8]
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	bf0c      	ite	eq
 8007e0e:	2301      	moveq	r3, #1
 8007e10:	2300      	movne	r3, #0
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	461a      	mov	r2, r3
 8007e16:	79fb      	ldrb	r3, [r7, #7]
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d0b4      	beq.n	8007d86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3718      	adds	r7, #24
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}

08007e26 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e26:	b480      	push	{r7}
 8007e28:	b085      	sub	sp, #20
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	60f8      	str	r0, [r7, #12]
 8007e2e:	60b9      	str	r1, [r7, #8]
 8007e30:	4613      	mov	r3, r2
 8007e32:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	68ba      	ldr	r2, [r7, #8]
 8007e38:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	88fa      	ldrh	r2, [r7, #6]
 8007e3e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	88fa      	ldrh	r2, [r7, #6]
 8007e44:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2222      	movs	r2, #34	; 0x22
 8007e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	691b      	ldr	r3, [r3, #16]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d007      	beq.n	8007e6c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	68da      	ldr	r2, [r3, #12]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e6a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	695a      	ldr	r2, [r3, #20]
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f042 0201 	orr.w	r2, r2, #1
 8007e7a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	68da      	ldr	r2, [r3, #12]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f042 0220 	orr.w	r2, r2, #32
 8007e8a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007e8c:	2300      	movs	r3, #0
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3714      	adds	r7, #20
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr

08007e9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e9a:	b480      	push	{r7}
 8007e9c:	b095      	sub	sp, #84	; 0x54
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	330c      	adds	r3, #12
 8007ea8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eac:	e853 3f00 	ldrex	r3, [r3]
 8007eb0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007eb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	330c      	adds	r3, #12
 8007ec0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007ec2:	643a      	str	r2, [r7, #64]	; 0x40
 8007ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ec8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007eca:	e841 2300 	strex	r3, r2, [r1]
 8007ece:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d1e5      	bne.n	8007ea2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	3314      	adds	r3, #20
 8007edc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ede:	6a3b      	ldr	r3, [r7, #32]
 8007ee0:	e853 3f00 	ldrex	r3, [r3]
 8007ee4:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ee6:	69fb      	ldr	r3, [r7, #28]
 8007ee8:	f023 0301 	bic.w	r3, r3, #1
 8007eec:	64bb      	str	r3, [r7, #72]	; 0x48
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	3314      	adds	r3, #20
 8007ef4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ef6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ef8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007efa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007efc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007efe:	e841 2300 	strex	r3, r2, [r1]
 8007f02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d1e5      	bne.n	8007ed6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d119      	bne.n	8007f46 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	330c      	adds	r3, #12
 8007f18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	e853 3f00 	ldrex	r3, [r3]
 8007f20:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	f023 0310 	bic.w	r3, r3, #16
 8007f28:	647b      	str	r3, [r7, #68]	; 0x44
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	330c      	adds	r3, #12
 8007f30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f32:	61ba      	str	r2, [r7, #24]
 8007f34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f36:	6979      	ldr	r1, [r7, #20]
 8007f38:	69ba      	ldr	r2, [r7, #24]
 8007f3a:	e841 2300 	strex	r3, r2, [r1]
 8007f3e:	613b      	str	r3, [r7, #16]
   return(result);
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d1e5      	bne.n	8007f12 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2220      	movs	r2, #32
 8007f4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2200      	movs	r2, #0
 8007f52:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007f54:	bf00      	nop
 8007f56:	3754      	adds	r7, #84	; 0x54
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f6c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2200      	movs	r2, #0
 8007f72:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2200      	movs	r2, #0
 8007f78:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f7a:	68f8      	ldr	r0, [r7, #12]
 8007f7c:	f7ff fee4 	bl	8007d48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f80:	bf00      	nop
 8007f82:	3710      	adds	r7, #16
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b085      	sub	sp, #20
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	2b21      	cmp	r3, #33	; 0x21
 8007f9a:	d13e      	bne.n	800801a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fa4:	d114      	bne.n	8007fd0 <UART_Transmit_IT+0x48>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	691b      	ldr	r3, [r3, #16]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d110      	bne.n	8007fd0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6a1b      	ldr	r3, [r3, #32]
 8007fb2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	881b      	ldrh	r3, [r3, #0]
 8007fb8:	461a      	mov	r2, r3
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007fc2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6a1b      	ldr	r3, [r3, #32]
 8007fc8:	1c9a      	adds	r2, r3, #2
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	621a      	str	r2, [r3, #32]
 8007fce:	e008      	b.n	8007fe2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6a1b      	ldr	r3, [r3, #32]
 8007fd4:	1c59      	adds	r1, r3, #1
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	6211      	str	r1, [r2, #32]
 8007fda:	781a      	ldrb	r2, [r3, #0]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	3b01      	subs	r3, #1
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	4619      	mov	r1, r3
 8007ff0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d10f      	bne.n	8008016 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	68da      	ldr	r2, [r3, #12]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008004:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	68da      	ldr	r2, [r3, #12]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008014:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008016:	2300      	movs	r3, #0
 8008018:	e000      	b.n	800801c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800801a:	2302      	movs	r3, #2
  }
}
 800801c:	4618      	mov	r0, r3
 800801e:	3714      	adds	r7, #20
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr

08008028 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	68da      	ldr	r2, [r3, #12]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800803e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2220      	movs	r2, #32
 8008044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f7ff fe73 	bl	8007d34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800804e:	2300      	movs	r3, #0
}
 8008050:	4618      	mov	r0, r3
 8008052:	3708      	adds	r7, #8
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b08c      	sub	sp, #48	; 0x30
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008066:	b2db      	uxtb	r3, r3
 8008068:	2b22      	cmp	r3, #34	; 0x22
 800806a:	f040 80ae 	bne.w	80081ca <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008076:	d117      	bne.n	80080a8 <UART_Receive_IT+0x50>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	691b      	ldr	r3, [r3, #16]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d113      	bne.n	80080a8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008080:	2300      	movs	r3, #0
 8008082:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008088:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	b29b      	uxth	r3, r3
 8008092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008096:	b29a      	uxth	r2, r3
 8008098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800809a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080a0:	1c9a      	adds	r2, r3, #2
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	629a      	str	r2, [r3, #40]	; 0x28
 80080a6:	e026      	b.n	80080f6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80080ae:	2300      	movs	r3, #0
 80080b0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	689b      	ldr	r3, [r3, #8]
 80080b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080ba:	d007      	beq.n	80080cc <UART_Receive_IT+0x74>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d10a      	bne.n	80080da <UART_Receive_IT+0x82>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	691b      	ldr	r3, [r3, #16]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d106      	bne.n	80080da <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	b2da      	uxtb	r2, r3
 80080d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080d6:	701a      	strb	r2, [r3, #0]
 80080d8:	e008      	b.n	80080ec <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080e6:	b2da      	uxtb	r2, r3
 80080e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ea:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080f0:	1c5a      	adds	r2, r3, #1
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	3b01      	subs	r3, #1
 80080fe:	b29b      	uxth	r3, r3
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	4619      	mov	r1, r3
 8008104:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008106:	2b00      	cmp	r3, #0
 8008108:	d15d      	bne.n	80081c6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	68da      	ldr	r2, [r3, #12]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f022 0220 	bic.w	r2, r2, #32
 8008118:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	68da      	ldr	r2, [r3, #12]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008128:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	695a      	ldr	r2, [r3, #20]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f022 0201 	bic.w	r2, r2, #1
 8008138:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2220      	movs	r2, #32
 800813e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2200      	movs	r2, #0
 8008146:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800814c:	2b01      	cmp	r3, #1
 800814e:	d135      	bne.n	80081bc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2200      	movs	r2, #0
 8008154:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	330c      	adds	r3, #12
 800815c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	e853 3f00 	ldrex	r3, [r3]
 8008164:	613b      	str	r3, [r7, #16]
   return(result);
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	f023 0310 	bic.w	r3, r3, #16
 800816c:	627b      	str	r3, [r7, #36]	; 0x24
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	330c      	adds	r3, #12
 8008174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008176:	623a      	str	r2, [r7, #32]
 8008178:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800817a:	69f9      	ldr	r1, [r7, #28]
 800817c:	6a3a      	ldr	r2, [r7, #32]
 800817e:	e841 2300 	strex	r3, r2, [r1]
 8008182:	61bb      	str	r3, [r7, #24]
   return(result);
 8008184:	69bb      	ldr	r3, [r7, #24]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d1e5      	bne.n	8008156 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f003 0310 	and.w	r3, r3, #16
 8008194:	2b10      	cmp	r3, #16
 8008196:	d10a      	bne.n	80081ae <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008198:	2300      	movs	r3, #0
 800819a:	60fb      	str	r3, [r7, #12]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	60fb      	str	r3, [r7, #12]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	60fb      	str	r3, [r7, #12]
 80081ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80081b2:	4619      	mov	r1, r3
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f7ff fdd1 	bl	8007d5c <HAL_UARTEx_RxEventCallback>
 80081ba:	e002      	b.n	80081c2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f7f8 ff29 	bl	8001014 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80081c2:	2300      	movs	r3, #0
 80081c4:	e002      	b.n	80081cc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80081c6:	2300      	movs	r3, #0
 80081c8:	e000      	b.n	80081cc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80081ca:	2302      	movs	r3, #2
  }
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3730      	adds	r7, #48	; 0x30
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081d8:	b0c0      	sub	sp, #256	; 0x100
 80081da:	af00      	add	r7, sp, #0
 80081dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	691b      	ldr	r3, [r3, #16]
 80081e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80081ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081f0:	68d9      	ldr	r1, [r3, #12]
 80081f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	ea40 0301 	orr.w	r3, r0, r1
 80081fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80081fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008202:	689a      	ldr	r2, [r3, #8]
 8008204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008208:	691b      	ldr	r3, [r3, #16]
 800820a:	431a      	orrs	r2, r3
 800820c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008210:	695b      	ldr	r3, [r3, #20]
 8008212:	431a      	orrs	r2, r3
 8008214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008218:	69db      	ldr	r3, [r3, #28]
 800821a:	4313      	orrs	r3, r2
 800821c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	68db      	ldr	r3, [r3, #12]
 8008228:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800822c:	f021 010c 	bic.w	r1, r1, #12
 8008230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800823a:	430b      	orrs	r3, r1
 800823c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800823e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	695b      	ldr	r3, [r3, #20]
 8008246:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800824a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800824e:	6999      	ldr	r1, [r3, #24]
 8008250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	ea40 0301 	orr.w	r3, r0, r1
 800825a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800825c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008260:	681a      	ldr	r2, [r3, #0]
 8008262:	4b8f      	ldr	r3, [pc, #572]	; (80084a0 <UART_SetConfig+0x2cc>)
 8008264:	429a      	cmp	r2, r3
 8008266:	d005      	beq.n	8008274 <UART_SetConfig+0xa0>
 8008268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	4b8d      	ldr	r3, [pc, #564]	; (80084a4 <UART_SetConfig+0x2d0>)
 8008270:	429a      	cmp	r2, r3
 8008272:	d104      	bne.n	800827e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008274:	f7fd fe8e 	bl	8005f94 <HAL_RCC_GetPCLK2Freq>
 8008278:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800827c:	e003      	b.n	8008286 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800827e:	f7fd fe75 	bl	8005f6c <HAL_RCC_GetPCLK1Freq>
 8008282:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800828a:	69db      	ldr	r3, [r3, #28]
 800828c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008290:	f040 810c 	bne.w	80084ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008294:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008298:	2200      	movs	r2, #0
 800829a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800829e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80082a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80082a6:	4622      	mov	r2, r4
 80082a8:	462b      	mov	r3, r5
 80082aa:	1891      	adds	r1, r2, r2
 80082ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80082ae:	415b      	adcs	r3, r3
 80082b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80082b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80082b6:	4621      	mov	r1, r4
 80082b8:	eb12 0801 	adds.w	r8, r2, r1
 80082bc:	4629      	mov	r1, r5
 80082be:	eb43 0901 	adc.w	r9, r3, r1
 80082c2:	f04f 0200 	mov.w	r2, #0
 80082c6:	f04f 0300 	mov.w	r3, #0
 80082ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80082ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80082d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80082d6:	4690      	mov	r8, r2
 80082d8:	4699      	mov	r9, r3
 80082da:	4623      	mov	r3, r4
 80082dc:	eb18 0303 	adds.w	r3, r8, r3
 80082e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80082e4:	462b      	mov	r3, r5
 80082e6:	eb49 0303 	adc.w	r3, r9, r3
 80082ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80082ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80082fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80082fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008302:	460b      	mov	r3, r1
 8008304:	18db      	adds	r3, r3, r3
 8008306:	653b      	str	r3, [r7, #80]	; 0x50
 8008308:	4613      	mov	r3, r2
 800830a:	eb42 0303 	adc.w	r3, r2, r3
 800830e:	657b      	str	r3, [r7, #84]	; 0x54
 8008310:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008314:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008318:	f7f8 fca6 	bl	8000c68 <__aeabi_uldivmod>
 800831c:	4602      	mov	r2, r0
 800831e:	460b      	mov	r3, r1
 8008320:	4b61      	ldr	r3, [pc, #388]	; (80084a8 <UART_SetConfig+0x2d4>)
 8008322:	fba3 2302 	umull	r2, r3, r3, r2
 8008326:	095b      	lsrs	r3, r3, #5
 8008328:	011c      	lsls	r4, r3, #4
 800832a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800832e:	2200      	movs	r2, #0
 8008330:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008334:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008338:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800833c:	4642      	mov	r2, r8
 800833e:	464b      	mov	r3, r9
 8008340:	1891      	adds	r1, r2, r2
 8008342:	64b9      	str	r1, [r7, #72]	; 0x48
 8008344:	415b      	adcs	r3, r3
 8008346:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008348:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800834c:	4641      	mov	r1, r8
 800834e:	eb12 0a01 	adds.w	sl, r2, r1
 8008352:	4649      	mov	r1, r9
 8008354:	eb43 0b01 	adc.w	fp, r3, r1
 8008358:	f04f 0200 	mov.w	r2, #0
 800835c:	f04f 0300 	mov.w	r3, #0
 8008360:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008364:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008368:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800836c:	4692      	mov	sl, r2
 800836e:	469b      	mov	fp, r3
 8008370:	4643      	mov	r3, r8
 8008372:	eb1a 0303 	adds.w	r3, sl, r3
 8008376:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800837a:	464b      	mov	r3, r9
 800837c:	eb4b 0303 	adc.w	r3, fp, r3
 8008380:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008390:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008394:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008398:	460b      	mov	r3, r1
 800839a:	18db      	adds	r3, r3, r3
 800839c:	643b      	str	r3, [r7, #64]	; 0x40
 800839e:	4613      	mov	r3, r2
 80083a0:	eb42 0303 	adc.w	r3, r2, r3
 80083a4:	647b      	str	r3, [r7, #68]	; 0x44
 80083a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80083aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80083ae:	f7f8 fc5b 	bl	8000c68 <__aeabi_uldivmod>
 80083b2:	4602      	mov	r2, r0
 80083b4:	460b      	mov	r3, r1
 80083b6:	4611      	mov	r1, r2
 80083b8:	4b3b      	ldr	r3, [pc, #236]	; (80084a8 <UART_SetConfig+0x2d4>)
 80083ba:	fba3 2301 	umull	r2, r3, r3, r1
 80083be:	095b      	lsrs	r3, r3, #5
 80083c0:	2264      	movs	r2, #100	; 0x64
 80083c2:	fb02 f303 	mul.w	r3, r2, r3
 80083c6:	1acb      	subs	r3, r1, r3
 80083c8:	00db      	lsls	r3, r3, #3
 80083ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80083ce:	4b36      	ldr	r3, [pc, #216]	; (80084a8 <UART_SetConfig+0x2d4>)
 80083d0:	fba3 2302 	umull	r2, r3, r3, r2
 80083d4:	095b      	lsrs	r3, r3, #5
 80083d6:	005b      	lsls	r3, r3, #1
 80083d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80083dc:	441c      	add	r4, r3
 80083de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083e2:	2200      	movs	r2, #0
 80083e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80083e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80083ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80083f0:	4642      	mov	r2, r8
 80083f2:	464b      	mov	r3, r9
 80083f4:	1891      	adds	r1, r2, r2
 80083f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80083f8:	415b      	adcs	r3, r3
 80083fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008400:	4641      	mov	r1, r8
 8008402:	1851      	adds	r1, r2, r1
 8008404:	6339      	str	r1, [r7, #48]	; 0x30
 8008406:	4649      	mov	r1, r9
 8008408:	414b      	adcs	r3, r1
 800840a:	637b      	str	r3, [r7, #52]	; 0x34
 800840c:	f04f 0200 	mov.w	r2, #0
 8008410:	f04f 0300 	mov.w	r3, #0
 8008414:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008418:	4659      	mov	r1, fp
 800841a:	00cb      	lsls	r3, r1, #3
 800841c:	4651      	mov	r1, sl
 800841e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008422:	4651      	mov	r1, sl
 8008424:	00ca      	lsls	r2, r1, #3
 8008426:	4610      	mov	r0, r2
 8008428:	4619      	mov	r1, r3
 800842a:	4603      	mov	r3, r0
 800842c:	4642      	mov	r2, r8
 800842e:	189b      	adds	r3, r3, r2
 8008430:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008434:	464b      	mov	r3, r9
 8008436:	460a      	mov	r2, r1
 8008438:	eb42 0303 	adc.w	r3, r2, r3
 800843c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	2200      	movs	r2, #0
 8008448:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800844c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008450:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008454:	460b      	mov	r3, r1
 8008456:	18db      	adds	r3, r3, r3
 8008458:	62bb      	str	r3, [r7, #40]	; 0x28
 800845a:	4613      	mov	r3, r2
 800845c:	eb42 0303 	adc.w	r3, r2, r3
 8008460:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008462:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008466:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800846a:	f7f8 fbfd 	bl	8000c68 <__aeabi_uldivmod>
 800846e:	4602      	mov	r2, r0
 8008470:	460b      	mov	r3, r1
 8008472:	4b0d      	ldr	r3, [pc, #52]	; (80084a8 <UART_SetConfig+0x2d4>)
 8008474:	fba3 1302 	umull	r1, r3, r3, r2
 8008478:	095b      	lsrs	r3, r3, #5
 800847a:	2164      	movs	r1, #100	; 0x64
 800847c:	fb01 f303 	mul.w	r3, r1, r3
 8008480:	1ad3      	subs	r3, r2, r3
 8008482:	00db      	lsls	r3, r3, #3
 8008484:	3332      	adds	r3, #50	; 0x32
 8008486:	4a08      	ldr	r2, [pc, #32]	; (80084a8 <UART_SetConfig+0x2d4>)
 8008488:	fba2 2303 	umull	r2, r3, r2, r3
 800848c:	095b      	lsrs	r3, r3, #5
 800848e:	f003 0207 	and.w	r2, r3, #7
 8008492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4422      	add	r2, r4
 800849a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800849c:	e106      	b.n	80086ac <UART_SetConfig+0x4d8>
 800849e:	bf00      	nop
 80084a0:	40011000 	.word	0x40011000
 80084a4:	40011400 	.word	0x40011400
 80084a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80084ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084b0:	2200      	movs	r2, #0
 80084b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80084b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80084ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80084be:	4642      	mov	r2, r8
 80084c0:	464b      	mov	r3, r9
 80084c2:	1891      	adds	r1, r2, r2
 80084c4:	6239      	str	r1, [r7, #32]
 80084c6:	415b      	adcs	r3, r3
 80084c8:	627b      	str	r3, [r7, #36]	; 0x24
 80084ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80084ce:	4641      	mov	r1, r8
 80084d0:	1854      	adds	r4, r2, r1
 80084d2:	4649      	mov	r1, r9
 80084d4:	eb43 0501 	adc.w	r5, r3, r1
 80084d8:	f04f 0200 	mov.w	r2, #0
 80084dc:	f04f 0300 	mov.w	r3, #0
 80084e0:	00eb      	lsls	r3, r5, #3
 80084e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80084e6:	00e2      	lsls	r2, r4, #3
 80084e8:	4614      	mov	r4, r2
 80084ea:	461d      	mov	r5, r3
 80084ec:	4643      	mov	r3, r8
 80084ee:	18e3      	adds	r3, r4, r3
 80084f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80084f4:	464b      	mov	r3, r9
 80084f6:	eb45 0303 	adc.w	r3, r5, r3
 80084fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80084fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	2200      	movs	r2, #0
 8008506:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800850a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800850e:	f04f 0200 	mov.w	r2, #0
 8008512:	f04f 0300 	mov.w	r3, #0
 8008516:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800851a:	4629      	mov	r1, r5
 800851c:	008b      	lsls	r3, r1, #2
 800851e:	4621      	mov	r1, r4
 8008520:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008524:	4621      	mov	r1, r4
 8008526:	008a      	lsls	r2, r1, #2
 8008528:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800852c:	f7f8 fb9c 	bl	8000c68 <__aeabi_uldivmod>
 8008530:	4602      	mov	r2, r0
 8008532:	460b      	mov	r3, r1
 8008534:	4b60      	ldr	r3, [pc, #384]	; (80086b8 <UART_SetConfig+0x4e4>)
 8008536:	fba3 2302 	umull	r2, r3, r3, r2
 800853a:	095b      	lsrs	r3, r3, #5
 800853c:	011c      	lsls	r4, r3, #4
 800853e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008542:	2200      	movs	r2, #0
 8008544:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008548:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800854c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008550:	4642      	mov	r2, r8
 8008552:	464b      	mov	r3, r9
 8008554:	1891      	adds	r1, r2, r2
 8008556:	61b9      	str	r1, [r7, #24]
 8008558:	415b      	adcs	r3, r3
 800855a:	61fb      	str	r3, [r7, #28]
 800855c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008560:	4641      	mov	r1, r8
 8008562:	1851      	adds	r1, r2, r1
 8008564:	6139      	str	r1, [r7, #16]
 8008566:	4649      	mov	r1, r9
 8008568:	414b      	adcs	r3, r1
 800856a:	617b      	str	r3, [r7, #20]
 800856c:	f04f 0200 	mov.w	r2, #0
 8008570:	f04f 0300 	mov.w	r3, #0
 8008574:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008578:	4659      	mov	r1, fp
 800857a:	00cb      	lsls	r3, r1, #3
 800857c:	4651      	mov	r1, sl
 800857e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008582:	4651      	mov	r1, sl
 8008584:	00ca      	lsls	r2, r1, #3
 8008586:	4610      	mov	r0, r2
 8008588:	4619      	mov	r1, r3
 800858a:	4603      	mov	r3, r0
 800858c:	4642      	mov	r2, r8
 800858e:	189b      	adds	r3, r3, r2
 8008590:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008594:	464b      	mov	r3, r9
 8008596:	460a      	mov	r2, r1
 8008598:	eb42 0303 	adc.w	r3, r2, r3
 800859c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80085a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	2200      	movs	r2, #0
 80085a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80085aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80085ac:	f04f 0200 	mov.w	r2, #0
 80085b0:	f04f 0300 	mov.w	r3, #0
 80085b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80085b8:	4649      	mov	r1, r9
 80085ba:	008b      	lsls	r3, r1, #2
 80085bc:	4641      	mov	r1, r8
 80085be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80085c2:	4641      	mov	r1, r8
 80085c4:	008a      	lsls	r2, r1, #2
 80085c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80085ca:	f7f8 fb4d 	bl	8000c68 <__aeabi_uldivmod>
 80085ce:	4602      	mov	r2, r0
 80085d0:	460b      	mov	r3, r1
 80085d2:	4611      	mov	r1, r2
 80085d4:	4b38      	ldr	r3, [pc, #224]	; (80086b8 <UART_SetConfig+0x4e4>)
 80085d6:	fba3 2301 	umull	r2, r3, r3, r1
 80085da:	095b      	lsrs	r3, r3, #5
 80085dc:	2264      	movs	r2, #100	; 0x64
 80085de:	fb02 f303 	mul.w	r3, r2, r3
 80085e2:	1acb      	subs	r3, r1, r3
 80085e4:	011b      	lsls	r3, r3, #4
 80085e6:	3332      	adds	r3, #50	; 0x32
 80085e8:	4a33      	ldr	r2, [pc, #204]	; (80086b8 <UART_SetConfig+0x4e4>)
 80085ea:	fba2 2303 	umull	r2, r3, r2, r3
 80085ee:	095b      	lsrs	r3, r3, #5
 80085f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80085f4:	441c      	add	r4, r3
 80085f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085fa:	2200      	movs	r2, #0
 80085fc:	673b      	str	r3, [r7, #112]	; 0x70
 80085fe:	677a      	str	r2, [r7, #116]	; 0x74
 8008600:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008604:	4642      	mov	r2, r8
 8008606:	464b      	mov	r3, r9
 8008608:	1891      	adds	r1, r2, r2
 800860a:	60b9      	str	r1, [r7, #8]
 800860c:	415b      	adcs	r3, r3
 800860e:	60fb      	str	r3, [r7, #12]
 8008610:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008614:	4641      	mov	r1, r8
 8008616:	1851      	adds	r1, r2, r1
 8008618:	6039      	str	r1, [r7, #0]
 800861a:	4649      	mov	r1, r9
 800861c:	414b      	adcs	r3, r1
 800861e:	607b      	str	r3, [r7, #4]
 8008620:	f04f 0200 	mov.w	r2, #0
 8008624:	f04f 0300 	mov.w	r3, #0
 8008628:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800862c:	4659      	mov	r1, fp
 800862e:	00cb      	lsls	r3, r1, #3
 8008630:	4651      	mov	r1, sl
 8008632:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008636:	4651      	mov	r1, sl
 8008638:	00ca      	lsls	r2, r1, #3
 800863a:	4610      	mov	r0, r2
 800863c:	4619      	mov	r1, r3
 800863e:	4603      	mov	r3, r0
 8008640:	4642      	mov	r2, r8
 8008642:	189b      	adds	r3, r3, r2
 8008644:	66bb      	str	r3, [r7, #104]	; 0x68
 8008646:	464b      	mov	r3, r9
 8008648:	460a      	mov	r2, r1
 800864a:	eb42 0303 	adc.w	r3, r2, r3
 800864e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	663b      	str	r3, [r7, #96]	; 0x60
 800865a:	667a      	str	r2, [r7, #100]	; 0x64
 800865c:	f04f 0200 	mov.w	r2, #0
 8008660:	f04f 0300 	mov.w	r3, #0
 8008664:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008668:	4649      	mov	r1, r9
 800866a:	008b      	lsls	r3, r1, #2
 800866c:	4641      	mov	r1, r8
 800866e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008672:	4641      	mov	r1, r8
 8008674:	008a      	lsls	r2, r1, #2
 8008676:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800867a:	f7f8 faf5 	bl	8000c68 <__aeabi_uldivmod>
 800867e:	4602      	mov	r2, r0
 8008680:	460b      	mov	r3, r1
 8008682:	4b0d      	ldr	r3, [pc, #52]	; (80086b8 <UART_SetConfig+0x4e4>)
 8008684:	fba3 1302 	umull	r1, r3, r3, r2
 8008688:	095b      	lsrs	r3, r3, #5
 800868a:	2164      	movs	r1, #100	; 0x64
 800868c:	fb01 f303 	mul.w	r3, r1, r3
 8008690:	1ad3      	subs	r3, r2, r3
 8008692:	011b      	lsls	r3, r3, #4
 8008694:	3332      	adds	r3, #50	; 0x32
 8008696:	4a08      	ldr	r2, [pc, #32]	; (80086b8 <UART_SetConfig+0x4e4>)
 8008698:	fba2 2303 	umull	r2, r3, r2, r3
 800869c:	095b      	lsrs	r3, r3, #5
 800869e:	f003 020f 	and.w	r2, r3, #15
 80086a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4422      	add	r2, r4
 80086aa:	609a      	str	r2, [r3, #8]
}
 80086ac:	bf00      	nop
 80086ae:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80086b2:	46bd      	mov	sp, r7
 80086b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80086b8:	51eb851f 	.word	0x51eb851f

080086bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80086bc:	b084      	sub	sp, #16
 80086be:	b580      	push	{r7, lr}
 80086c0:	b084      	sub	sp, #16
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
 80086c6:	f107 001c 	add.w	r0, r7, #28
 80086ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80086ce:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d123      	bne.n	800871e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	68db      	ldr	r3, [r3, #12]
 80086e6:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80086ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	68db      	ldr	r3, [r3, #12]
 80086f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80086fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008702:	2b01      	cmp	r3, #1
 8008704:	d105      	bne.n	8008712 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	68db      	ldr	r3, [r3, #12]
 800870a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 faa0 	bl	8008c58 <USB_CoreReset>
 8008718:	4603      	mov	r3, r0
 800871a:	73fb      	strb	r3, [r7, #15]
 800871c:	e01b      	b.n	8008756 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 fa94 	bl	8008c58 <USB_CoreReset>
 8008730:	4603      	mov	r3, r0
 8008732:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008734:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008738:	2b00      	cmp	r3, #0
 800873a:	d106      	bne.n	800874a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008740:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	639a      	str	r2, [r3, #56]	; 0x38
 8008748:	e005      	b.n	8008756 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800874e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008756:	7fbb      	ldrb	r3, [r7, #30]
 8008758:	2b01      	cmp	r3, #1
 800875a:	d10b      	bne.n	8008774 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	f043 0206 	orr.w	r2, r3, #6
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	689b      	ldr	r3, [r3, #8]
 800876c:	f043 0220 	orr.w	r2, r3, #32
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008774:	7bfb      	ldrb	r3, [r7, #15]
}
 8008776:	4618      	mov	r0, r3
 8008778:	3710      	adds	r7, #16
 800877a:	46bd      	mov	sp, r7
 800877c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008780:	b004      	add	sp, #16
 8008782:	4770      	bx	lr

08008784 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008784:	b480      	push	{r7}
 8008786:	b083      	sub	sp, #12
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	689b      	ldr	r3, [r3, #8]
 8008790:	f023 0201 	bic.w	r2, r3, #1
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008798:	2300      	movs	r3, #0
}
 800879a:	4618      	mov	r0, r3
 800879c:	370c      	adds	r7, #12
 800879e:	46bd      	mov	sp, r7
 80087a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a4:	4770      	bx	lr

080087a6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80087a6:	b580      	push	{r7, lr}
 80087a8:	b084      	sub	sp, #16
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]
 80087ae:	460b      	mov	r3, r1
 80087b0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80087b2:	2300      	movs	r3, #0
 80087b4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	68db      	ldr	r3, [r3, #12]
 80087ba:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80087c2:	78fb      	ldrb	r3, [r7, #3]
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d115      	bne.n	80087f4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	68db      	ldr	r3, [r3, #12]
 80087cc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80087d4:	200a      	movs	r0, #10
 80087d6:	f7fa fec7 	bl	8003568 <HAL_Delay>
      ms += 10U;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	330a      	adds	r3, #10
 80087de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 fa2b 	bl	8008c3c <USB_GetMode>
 80087e6:	4603      	mov	r3, r0
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	d01e      	beq.n	800882a <USB_SetCurrentMode+0x84>
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2bc7      	cmp	r3, #199	; 0xc7
 80087f0:	d9f0      	bls.n	80087d4 <USB_SetCurrentMode+0x2e>
 80087f2:	e01a      	b.n	800882a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80087f4:	78fb      	ldrb	r3, [r7, #3]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d115      	bne.n	8008826 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	68db      	ldr	r3, [r3, #12]
 80087fe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008806:	200a      	movs	r0, #10
 8008808:	f7fa feae 	bl	8003568 <HAL_Delay>
      ms += 10U;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	330a      	adds	r3, #10
 8008810:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 fa12 	bl	8008c3c <USB_GetMode>
 8008818:	4603      	mov	r3, r0
 800881a:	2b00      	cmp	r3, #0
 800881c:	d005      	beq.n	800882a <USB_SetCurrentMode+0x84>
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2bc7      	cmp	r3, #199	; 0xc7
 8008822:	d9f0      	bls.n	8008806 <USB_SetCurrentMode+0x60>
 8008824:	e001      	b.n	800882a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008826:	2301      	movs	r3, #1
 8008828:	e005      	b.n	8008836 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2bc8      	cmp	r3, #200	; 0xc8
 800882e:	d101      	bne.n	8008834 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008830:	2301      	movs	r3, #1
 8008832:	e000      	b.n	8008836 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008834:	2300      	movs	r3, #0
}
 8008836:	4618      	mov	r0, r3
 8008838:	3710      	adds	r7, #16
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
	...

08008840 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008840:	b084      	sub	sp, #16
 8008842:	b580      	push	{r7, lr}
 8008844:	b086      	sub	sp, #24
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
 800884a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800884e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008852:	2300      	movs	r3, #0
 8008854:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800885a:	2300      	movs	r3, #0
 800885c:	613b      	str	r3, [r7, #16]
 800885e:	e009      	b.n	8008874 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	3340      	adds	r3, #64	; 0x40
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	4413      	add	r3, r2
 800886a:	2200      	movs	r2, #0
 800886c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	3301      	adds	r3, #1
 8008872:	613b      	str	r3, [r7, #16]
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	2b0e      	cmp	r3, #14
 8008878:	d9f2      	bls.n	8008860 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800887a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800887e:	2b00      	cmp	r3, #0
 8008880:	d11c      	bne.n	80088bc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	68fa      	ldr	r2, [r7, #12]
 800888c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008890:	f043 0302 	orr.w	r3, r3, #2
 8008894:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800889a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088a6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	639a      	str	r2, [r3, #56]	; 0x38
 80088ba:	e00b      	b.n	80088d4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088c0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088cc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80088da:	461a      	mov	r2, r3
 80088dc:	2300      	movs	r3, #0
 80088de:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80088e0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d10d      	bne.n	8008904 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80088e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d104      	bne.n	80088fa <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80088f0:	2100      	movs	r1, #0
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 f968 	bl	8008bc8 <USB_SetDevSpeed>
 80088f8:	e008      	b.n	800890c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80088fa:	2101      	movs	r1, #1
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 f963 	bl	8008bc8 <USB_SetDevSpeed>
 8008902:	e003      	b.n	800890c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008904:	2103      	movs	r1, #3
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 f95e 	bl	8008bc8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800890c:	2110      	movs	r1, #16
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f000 f8fa 	bl	8008b08 <USB_FlushTxFifo>
 8008914:	4603      	mov	r3, r0
 8008916:	2b00      	cmp	r3, #0
 8008918:	d001      	beq.n	800891e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 f924 	bl	8008b6c <USB_FlushRxFifo>
 8008924:	4603      	mov	r3, r0
 8008926:	2b00      	cmp	r3, #0
 8008928:	d001      	beq.n	800892e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800892a:	2301      	movs	r3, #1
 800892c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008934:	461a      	mov	r2, r3
 8008936:	2300      	movs	r3, #0
 8008938:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008940:	461a      	mov	r2, r3
 8008942:	2300      	movs	r3, #0
 8008944:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800894c:	461a      	mov	r2, r3
 800894e:	2300      	movs	r3, #0
 8008950:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008952:	2300      	movs	r3, #0
 8008954:	613b      	str	r3, [r7, #16]
 8008956:	e043      	b.n	80089e0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	015a      	lsls	r2, r3, #5
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	4413      	add	r3, r2
 8008960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800896a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800896e:	d118      	bne.n	80089a2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d10a      	bne.n	800898c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	015a      	lsls	r2, r3, #5
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	4413      	add	r3, r2
 800897e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008982:	461a      	mov	r2, r3
 8008984:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008988:	6013      	str	r3, [r2, #0]
 800898a:	e013      	b.n	80089b4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	015a      	lsls	r2, r3, #5
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	4413      	add	r3, r2
 8008994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008998:	461a      	mov	r2, r3
 800899a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800899e:	6013      	str	r3, [r2, #0]
 80089a0:	e008      	b.n	80089b4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	015a      	lsls	r2, r3, #5
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	4413      	add	r3, r2
 80089aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089ae:	461a      	mov	r2, r3
 80089b0:	2300      	movs	r3, #0
 80089b2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	015a      	lsls	r2, r3, #5
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	4413      	add	r3, r2
 80089bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089c0:	461a      	mov	r2, r3
 80089c2:	2300      	movs	r3, #0
 80089c4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	015a      	lsls	r2, r3, #5
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	4413      	add	r3, r2
 80089ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089d2:	461a      	mov	r2, r3
 80089d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80089d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	3301      	adds	r3, #1
 80089de:	613b      	str	r3, [r7, #16]
 80089e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80089e4:	461a      	mov	r2, r3
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d3b5      	bcc.n	8008958 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80089ec:	2300      	movs	r3, #0
 80089ee:	613b      	str	r3, [r7, #16]
 80089f0:	e043      	b.n	8008a7a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	015a      	lsls	r2, r3, #5
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	4413      	add	r3, r2
 80089fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a08:	d118      	bne.n	8008a3c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d10a      	bne.n	8008a26 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	015a      	lsls	r2, r3, #5
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	4413      	add	r3, r2
 8008a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a1c:	461a      	mov	r2, r3
 8008a1e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008a22:	6013      	str	r3, [r2, #0]
 8008a24:	e013      	b.n	8008a4e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	015a      	lsls	r2, r3, #5
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	4413      	add	r3, r2
 8008a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a32:	461a      	mov	r2, r3
 8008a34:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008a38:	6013      	str	r3, [r2, #0]
 8008a3a:	e008      	b.n	8008a4e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	015a      	lsls	r2, r3, #5
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	4413      	add	r3, r2
 8008a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a48:	461a      	mov	r2, r3
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	015a      	lsls	r2, r3, #5
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	4413      	add	r3, r2
 8008a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	015a      	lsls	r2, r3, #5
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	4413      	add	r3, r2
 8008a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008a72:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	3301      	adds	r3, #1
 8008a78:	613b      	str	r3, [r7, #16]
 8008a7a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008a7e:	461a      	mov	r2, r3
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d3b5      	bcc.n	80089f2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a8c:	691b      	ldr	r3, [r3, #16]
 8008a8e:	68fa      	ldr	r2, [r7, #12]
 8008a90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a98:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008aa6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008aa8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d105      	bne.n	8008abc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	699b      	ldr	r3, [r3, #24]
 8008ab4:	f043 0210 	orr.w	r2, r3, #16
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	699a      	ldr	r2, [r3, #24]
 8008ac0:	4b10      	ldr	r3, [pc, #64]	; (8008b04 <USB_DevInit+0x2c4>)
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008ac8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d005      	beq.n	8008adc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	699b      	ldr	r3, [r3, #24]
 8008ad4:	f043 0208 	orr.w	r2, r3, #8
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008adc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d107      	bne.n	8008af4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	699b      	ldr	r3, [r3, #24]
 8008ae8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008aec:	f043 0304 	orr.w	r3, r3, #4
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008af4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3718      	adds	r7, #24
 8008afa:	46bd      	mov	sp, r7
 8008afc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008b00:	b004      	add	sp, #16
 8008b02:	4770      	bx	lr
 8008b04:	803c3800 	.word	0x803c3800

08008b08 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b085      	sub	sp, #20
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008b12:	2300      	movs	r3, #0
 8008b14:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	3301      	adds	r3, #1
 8008b1a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008b22:	d901      	bls.n	8008b28 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008b24:	2303      	movs	r3, #3
 8008b26:	e01b      	b.n	8008b60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	691b      	ldr	r3, [r3, #16]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	daf2      	bge.n	8008b16 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008b30:	2300      	movs	r3, #0
 8008b32:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	019b      	lsls	r3, r3, #6
 8008b38:	f043 0220 	orr.w	r2, r3, #32
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	3301      	adds	r3, #1
 8008b44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008b4c:	d901      	bls.n	8008b52 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008b4e:	2303      	movs	r3, #3
 8008b50:	e006      	b.n	8008b60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	691b      	ldr	r3, [r3, #16]
 8008b56:	f003 0320 	and.w	r3, r3, #32
 8008b5a:	2b20      	cmp	r3, #32
 8008b5c:	d0f0      	beq.n	8008b40 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008b5e:	2300      	movs	r3, #0
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3714      	adds	r7, #20
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b085      	sub	sp, #20
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008b74:	2300      	movs	r3, #0
 8008b76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008b84:	d901      	bls.n	8008b8a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008b86:	2303      	movs	r3, #3
 8008b88:	e018      	b.n	8008bbc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	691b      	ldr	r3, [r3, #16]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	daf2      	bge.n	8008b78 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008b92:	2300      	movs	r3, #0
 8008b94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2210      	movs	r2, #16
 8008b9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	3301      	adds	r3, #1
 8008ba0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008ba8:	d901      	bls.n	8008bae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008baa:	2303      	movs	r3, #3
 8008bac:	e006      	b.n	8008bbc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	691b      	ldr	r3, [r3, #16]
 8008bb2:	f003 0310 	and.w	r3, r3, #16
 8008bb6:	2b10      	cmp	r3, #16
 8008bb8:	d0f0      	beq.n	8008b9c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008bba:	2300      	movs	r3, #0
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3714      	adds	r7, #20
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc6:	4770      	bx	lr

08008bc8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b085      	sub	sp, #20
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	78fb      	ldrb	r3, [r7, #3]
 8008be2:	68f9      	ldr	r1, [r7, #12]
 8008be4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008be8:	4313      	orrs	r3, r2
 8008bea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008bec:	2300      	movs	r3, #0
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3714      	adds	r7, #20
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf8:	4770      	bx	lr

08008bfa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008bfa:	b480      	push	{r7}
 8008bfc:	b085      	sub	sp, #20
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	68fa      	ldr	r2, [r7, #12]
 8008c10:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008c14:	f023 0303 	bic.w	r3, r3, #3
 8008c18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	68fa      	ldr	r2, [r7, #12]
 8008c24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c28:	f043 0302 	orr.w	r3, r3, #2
 8008c2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008c2e:	2300      	movs	r3, #0
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3714      	adds	r7, #20
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr

08008c3c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b083      	sub	sp, #12
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	695b      	ldr	r3, [r3, #20]
 8008c48:	f003 0301 	and.w	r3, r3, #1
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	370c      	adds	r7, #12
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr

08008c58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b085      	sub	sp, #20
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008c60:	2300      	movs	r3, #0
 8008c62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	3301      	adds	r3, #1
 8008c68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008c70:	d901      	bls.n	8008c76 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008c72:	2303      	movs	r3, #3
 8008c74:	e01b      	b.n	8008cae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	691b      	ldr	r3, [r3, #16]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	daf2      	bge.n	8008c64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	691b      	ldr	r3, [r3, #16]
 8008c86:	f043 0201 	orr.w	r2, r3, #1
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	3301      	adds	r3, #1
 8008c92:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008c9a:	d901      	bls.n	8008ca0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008c9c:	2303      	movs	r3, #3
 8008c9e:	e006      	b.n	8008cae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	691b      	ldr	r3, [r3, #16]
 8008ca4:	f003 0301 	and.w	r3, r3, #1
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d0f0      	beq.n	8008c8e <USB_CoreReset+0x36>

  return HAL_OK;
 8008cac:	2300      	movs	r3, #0
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3714      	adds	r7, #20
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr

08008cba <__cvt>:
 8008cba:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cbe:	ec55 4b10 	vmov	r4, r5, d0
 8008cc2:	2d00      	cmp	r5, #0
 8008cc4:	460e      	mov	r6, r1
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	462b      	mov	r3, r5
 8008cca:	bfbb      	ittet	lt
 8008ccc:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008cd0:	461d      	movlt	r5, r3
 8008cd2:	2300      	movge	r3, #0
 8008cd4:	232d      	movlt	r3, #45	; 0x2d
 8008cd6:	700b      	strb	r3, [r1, #0]
 8008cd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008cda:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008cde:	4691      	mov	r9, r2
 8008ce0:	f023 0820 	bic.w	r8, r3, #32
 8008ce4:	bfbc      	itt	lt
 8008ce6:	4622      	movlt	r2, r4
 8008ce8:	4614      	movlt	r4, r2
 8008cea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008cee:	d005      	beq.n	8008cfc <__cvt+0x42>
 8008cf0:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008cf4:	d100      	bne.n	8008cf8 <__cvt+0x3e>
 8008cf6:	3601      	adds	r6, #1
 8008cf8:	2102      	movs	r1, #2
 8008cfa:	e000      	b.n	8008cfe <__cvt+0x44>
 8008cfc:	2103      	movs	r1, #3
 8008cfe:	ab03      	add	r3, sp, #12
 8008d00:	9301      	str	r3, [sp, #4]
 8008d02:	ab02      	add	r3, sp, #8
 8008d04:	9300      	str	r3, [sp, #0]
 8008d06:	ec45 4b10 	vmov	d0, r4, r5
 8008d0a:	4653      	mov	r3, sl
 8008d0c:	4632      	mov	r2, r6
 8008d0e:	f000 fe7b 	bl	8009a08 <_dtoa_r>
 8008d12:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008d16:	4607      	mov	r7, r0
 8008d18:	d102      	bne.n	8008d20 <__cvt+0x66>
 8008d1a:	f019 0f01 	tst.w	r9, #1
 8008d1e:	d022      	beq.n	8008d66 <__cvt+0xac>
 8008d20:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008d24:	eb07 0906 	add.w	r9, r7, r6
 8008d28:	d110      	bne.n	8008d4c <__cvt+0x92>
 8008d2a:	783b      	ldrb	r3, [r7, #0]
 8008d2c:	2b30      	cmp	r3, #48	; 0x30
 8008d2e:	d10a      	bne.n	8008d46 <__cvt+0x8c>
 8008d30:	2200      	movs	r2, #0
 8008d32:	2300      	movs	r3, #0
 8008d34:	4620      	mov	r0, r4
 8008d36:	4629      	mov	r1, r5
 8008d38:	f7f7 fed6 	bl	8000ae8 <__aeabi_dcmpeq>
 8008d3c:	b918      	cbnz	r0, 8008d46 <__cvt+0x8c>
 8008d3e:	f1c6 0601 	rsb	r6, r6, #1
 8008d42:	f8ca 6000 	str.w	r6, [sl]
 8008d46:	f8da 3000 	ldr.w	r3, [sl]
 8008d4a:	4499      	add	r9, r3
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	2300      	movs	r3, #0
 8008d50:	4620      	mov	r0, r4
 8008d52:	4629      	mov	r1, r5
 8008d54:	f7f7 fec8 	bl	8000ae8 <__aeabi_dcmpeq>
 8008d58:	b108      	cbz	r0, 8008d5e <__cvt+0xa4>
 8008d5a:	f8cd 900c 	str.w	r9, [sp, #12]
 8008d5e:	2230      	movs	r2, #48	; 0x30
 8008d60:	9b03      	ldr	r3, [sp, #12]
 8008d62:	454b      	cmp	r3, r9
 8008d64:	d307      	bcc.n	8008d76 <__cvt+0xbc>
 8008d66:	9b03      	ldr	r3, [sp, #12]
 8008d68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d6a:	1bdb      	subs	r3, r3, r7
 8008d6c:	4638      	mov	r0, r7
 8008d6e:	6013      	str	r3, [r2, #0]
 8008d70:	b004      	add	sp, #16
 8008d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d76:	1c59      	adds	r1, r3, #1
 8008d78:	9103      	str	r1, [sp, #12]
 8008d7a:	701a      	strb	r2, [r3, #0]
 8008d7c:	e7f0      	b.n	8008d60 <__cvt+0xa6>

08008d7e <__exponent>:
 8008d7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d80:	4603      	mov	r3, r0
 8008d82:	2900      	cmp	r1, #0
 8008d84:	bfb8      	it	lt
 8008d86:	4249      	neglt	r1, r1
 8008d88:	f803 2b02 	strb.w	r2, [r3], #2
 8008d8c:	bfb4      	ite	lt
 8008d8e:	222d      	movlt	r2, #45	; 0x2d
 8008d90:	222b      	movge	r2, #43	; 0x2b
 8008d92:	2909      	cmp	r1, #9
 8008d94:	7042      	strb	r2, [r0, #1]
 8008d96:	dd2a      	ble.n	8008dee <__exponent+0x70>
 8008d98:	f10d 0207 	add.w	r2, sp, #7
 8008d9c:	4617      	mov	r7, r2
 8008d9e:	260a      	movs	r6, #10
 8008da0:	4694      	mov	ip, r2
 8008da2:	fb91 f5f6 	sdiv	r5, r1, r6
 8008da6:	fb06 1415 	mls	r4, r6, r5, r1
 8008daa:	3430      	adds	r4, #48	; 0x30
 8008dac:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008db0:	460c      	mov	r4, r1
 8008db2:	2c63      	cmp	r4, #99	; 0x63
 8008db4:	f102 32ff 	add.w	r2, r2, #4294967295
 8008db8:	4629      	mov	r1, r5
 8008dba:	dcf1      	bgt.n	8008da0 <__exponent+0x22>
 8008dbc:	3130      	adds	r1, #48	; 0x30
 8008dbe:	f1ac 0402 	sub.w	r4, ip, #2
 8008dc2:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008dc6:	1c41      	adds	r1, r0, #1
 8008dc8:	4622      	mov	r2, r4
 8008dca:	42ba      	cmp	r2, r7
 8008dcc:	d30a      	bcc.n	8008de4 <__exponent+0x66>
 8008dce:	f10d 0209 	add.w	r2, sp, #9
 8008dd2:	eba2 020c 	sub.w	r2, r2, ip
 8008dd6:	42bc      	cmp	r4, r7
 8008dd8:	bf88      	it	hi
 8008dda:	2200      	movhi	r2, #0
 8008ddc:	4413      	add	r3, r2
 8008dde:	1a18      	subs	r0, r3, r0
 8008de0:	b003      	add	sp, #12
 8008de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008de4:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008de8:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008dec:	e7ed      	b.n	8008dca <__exponent+0x4c>
 8008dee:	2330      	movs	r3, #48	; 0x30
 8008df0:	3130      	adds	r1, #48	; 0x30
 8008df2:	7083      	strb	r3, [r0, #2]
 8008df4:	70c1      	strb	r1, [r0, #3]
 8008df6:	1d03      	adds	r3, r0, #4
 8008df8:	e7f1      	b.n	8008dde <__exponent+0x60>
	...

08008dfc <_printf_float>:
 8008dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e00:	ed2d 8b02 	vpush	{d8}
 8008e04:	b08d      	sub	sp, #52	; 0x34
 8008e06:	460c      	mov	r4, r1
 8008e08:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008e0c:	4616      	mov	r6, r2
 8008e0e:	461f      	mov	r7, r3
 8008e10:	4605      	mov	r5, r0
 8008e12:	f000 fcf9 	bl	8009808 <_localeconv_r>
 8008e16:	f8d0 a000 	ldr.w	sl, [r0]
 8008e1a:	4650      	mov	r0, sl
 8008e1c:	f7f7 fa38 	bl	8000290 <strlen>
 8008e20:	2300      	movs	r3, #0
 8008e22:	930a      	str	r3, [sp, #40]	; 0x28
 8008e24:	6823      	ldr	r3, [r4, #0]
 8008e26:	9305      	str	r3, [sp, #20]
 8008e28:	f8d8 3000 	ldr.w	r3, [r8]
 8008e2c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008e30:	3307      	adds	r3, #7
 8008e32:	f023 0307 	bic.w	r3, r3, #7
 8008e36:	f103 0208 	add.w	r2, r3, #8
 8008e3a:	f8c8 2000 	str.w	r2, [r8]
 8008e3e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e42:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008e46:	9307      	str	r3, [sp, #28]
 8008e48:	f8cd 8018 	str.w	r8, [sp, #24]
 8008e4c:	ee08 0a10 	vmov	s16, r0
 8008e50:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008e54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e58:	4b9e      	ldr	r3, [pc, #632]	; (80090d4 <_printf_float+0x2d8>)
 8008e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e5e:	f7f7 fe75 	bl	8000b4c <__aeabi_dcmpun>
 8008e62:	bb88      	cbnz	r0, 8008ec8 <_printf_float+0xcc>
 8008e64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e68:	4b9a      	ldr	r3, [pc, #616]	; (80090d4 <_printf_float+0x2d8>)
 8008e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e6e:	f7f7 fe4f 	bl	8000b10 <__aeabi_dcmple>
 8008e72:	bb48      	cbnz	r0, 8008ec8 <_printf_float+0xcc>
 8008e74:	2200      	movs	r2, #0
 8008e76:	2300      	movs	r3, #0
 8008e78:	4640      	mov	r0, r8
 8008e7a:	4649      	mov	r1, r9
 8008e7c:	f7f7 fe3e 	bl	8000afc <__aeabi_dcmplt>
 8008e80:	b110      	cbz	r0, 8008e88 <_printf_float+0x8c>
 8008e82:	232d      	movs	r3, #45	; 0x2d
 8008e84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e88:	4a93      	ldr	r2, [pc, #588]	; (80090d8 <_printf_float+0x2dc>)
 8008e8a:	4b94      	ldr	r3, [pc, #592]	; (80090dc <_printf_float+0x2e0>)
 8008e8c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008e90:	bf94      	ite	ls
 8008e92:	4690      	movls	r8, r2
 8008e94:	4698      	movhi	r8, r3
 8008e96:	2303      	movs	r3, #3
 8008e98:	6123      	str	r3, [r4, #16]
 8008e9a:	9b05      	ldr	r3, [sp, #20]
 8008e9c:	f023 0304 	bic.w	r3, r3, #4
 8008ea0:	6023      	str	r3, [r4, #0]
 8008ea2:	f04f 0900 	mov.w	r9, #0
 8008ea6:	9700      	str	r7, [sp, #0]
 8008ea8:	4633      	mov	r3, r6
 8008eaa:	aa0b      	add	r2, sp, #44	; 0x2c
 8008eac:	4621      	mov	r1, r4
 8008eae:	4628      	mov	r0, r5
 8008eb0:	f000 f9da 	bl	8009268 <_printf_common>
 8008eb4:	3001      	adds	r0, #1
 8008eb6:	f040 8090 	bne.w	8008fda <_printf_float+0x1de>
 8008eba:	f04f 30ff 	mov.w	r0, #4294967295
 8008ebe:	b00d      	add	sp, #52	; 0x34
 8008ec0:	ecbd 8b02 	vpop	{d8}
 8008ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ec8:	4642      	mov	r2, r8
 8008eca:	464b      	mov	r3, r9
 8008ecc:	4640      	mov	r0, r8
 8008ece:	4649      	mov	r1, r9
 8008ed0:	f7f7 fe3c 	bl	8000b4c <__aeabi_dcmpun>
 8008ed4:	b140      	cbz	r0, 8008ee8 <_printf_float+0xec>
 8008ed6:	464b      	mov	r3, r9
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	bfbc      	itt	lt
 8008edc:	232d      	movlt	r3, #45	; 0x2d
 8008ede:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008ee2:	4a7f      	ldr	r2, [pc, #508]	; (80090e0 <_printf_float+0x2e4>)
 8008ee4:	4b7f      	ldr	r3, [pc, #508]	; (80090e4 <_printf_float+0x2e8>)
 8008ee6:	e7d1      	b.n	8008e8c <_printf_float+0x90>
 8008ee8:	6863      	ldr	r3, [r4, #4]
 8008eea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008eee:	9206      	str	r2, [sp, #24]
 8008ef0:	1c5a      	adds	r2, r3, #1
 8008ef2:	d13f      	bne.n	8008f74 <_printf_float+0x178>
 8008ef4:	2306      	movs	r3, #6
 8008ef6:	6063      	str	r3, [r4, #4]
 8008ef8:	9b05      	ldr	r3, [sp, #20]
 8008efa:	6861      	ldr	r1, [r4, #4]
 8008efc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008f00:	2300      	movs	r3, #0
 8008f02:	9303      	str	r3, [sp, #12]
 8008f04:	ab0a      	add	r3, sp, #40	; 0x28
 8008f06:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008f0a:	ab09      	add	r3, sp, #36	; 0x24
 8008f0c:	ec49 8b10 	vmov	d0, r8, r9
 8008f10:	9300      	str	r3, [sp, #0]
 8008f12:	6022      	str	r2, [r4, #0]
 8008f14:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008f18:	4628      	mov	r0, r5
 8008f1a:	f7ff fece 	bl	8008cba <__cvt>
 8008f1e:	9b06      	ldr	r3, [sp, #24]
 8008f20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f22:	2b47      	cmp	r3, #71	; 0x47
 8008f24:	4680      	mov	r8, r0
 8008f26:	d108      	bne.n	8008f3a <_printf_float+0x13e>
 8008f28:	1cc8      	adds	r0, r1, #3
 8008f2a:	db02      	blt.n	8008f32 <_printf_float+0x136>
 8008f2c:	6863      	ldr	r3, [r4, #4]
 8008f2e:	4299      	cmp	r1, r3
 8008f30:	dd41      	ble.n	8008fb6 <_printf_float+0x1ba>
 8008f32:	f1ab 0302 	sub.w	r3, fp, #2
 8008f36:	fa5f fb83 	uxtb.w	fp, r3
 8008f3a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008f3e:	d820      	bhi.n	8008f82 <_printf_float+0x186>
 8008f40:	3901      	subs	r1, #1
 8008f42:	465a      	mov	r2, fp
 8008f44:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008f48:	9109      	str	r1, [sp, #36]	; 0x24
 8008f4a:	f7ff ff18 	bl	8008d7e <__exponent>
 8008f4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f50:	1813      	adds	r3, r2, r0
 8008f52:	2a01      	cmp	r2, #1
 8008f54:	4681      	mov	r9, r0
 8008f56:	6123      	str	r3, [r4, #16]
 8008f58:	dc02      	bgt.n	8008f60 <_printf_float+0x164>
 8008f5a:	6822      	ldr	r2, [r4, #0]
 8008f5c:	07d2      	lsls	r2, r2, #31
 8008f5e:	d501      	bpl.n	8008f64 <_printf_float+0x168>
 8008f60:	3301      	adds	r3, #1
 8008f62:	6123      	str	r3, [r4, #16]
 8008f64:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d09c      	beq.n	8008ea6 <_printf_float+0xaa>
 8008f6c:	232d      	movs	r3, #45	; 0x2d
 8008f6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f72:	e798      	b.n	8008ea6 <_printf_float+0xaa>
 8008f74:	9a06      	ldr	r2, [sp, #24]
 8008f76:	2a47      	cmp	r2, #71	; 0x47
 8008f78:	d1be      	bne.n	8008ef8 <_printf_float+0xfc>
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d1bc      	bne.n	8008ef8 <_printf_float+0xfc>
 8008f7e:	2301      	movs	r3, #1
 8008f80:	e7b9      	b.n	8008ef6 <_printf_float+0xfa>
 8008f82:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008f86:	d118      	bne.n	8008fba <_printf_float+0x1be>
 8008f88:	2900      	cmp	r1, #0
 8008f8a:	6863      	ldr	r3, [r4, #4]
 8008f8c:	dd0b      	ble.n	8008fa6 <_printf_float+0x1aa>
 8008f8e:	6121      	str	r1, [r4, #16]
 8008f90:	b913      	cbnz	r3, 8008f98 <_printf_float+0x19c>
 8008f92:	6822      	ldr	r2, [r4, #0]
 8008f94:	07d0      	lsls	r0, r2, #31
 8008f96:	d502      	bpl.n	8008f9e <_printf_float+0x1a2>
 8008f98:	3301      	adds	r3, #1
 8008f9a:	440b      	add	r3, r1
 8008f9c:	6123      	str	r3, [r4, #16]
 8008f9e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008fa0:	f04f 0900 	mov.w	r9, #0
 8008fa4:	e7de      	b.n	8008f64 <_printf_float+0x168>
 8008fa6:	b913      	cbnz	r3, 8008fae <_printf_float+0x1b2>
 8008fa8:	6822      	ldr	r2, [r4, #0]
 8008faa:	07d2      	lsls	r2, r2, #31
 8008fac:	d501      	bpl.n	8008fb2 <_printf_float+0x1b6>
 8008fae:	3302      	adds	r3, #2
 8008fb0:	e7f4      	b.n	8008f9c <_printf_float+0x1a0>
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	e7f2      	b.n	8008f9c <_printf_float+0x1a0>
 8008fb6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008fba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fbc:	4299      	cmp	r1, r3
 8008fbe:	db05      	blt.n	8008fcc <_printf_float+0x1d0>
 8008fc0:	6823      	ldr	r3, [r4, #0]
 8008fc2:	6121      	str	r1, [r4, #16]
 8008fc4:	07d8      	lsls	r0, r3, #31
 8008fc6:	d5ea      	bpl.n	8008f9e <_printf_float+0x1a2>
 8008fc8:	1c4b      	adds	r3, r1, #1
 8008fca:	e7e7      	b.n	8008f9c <_printf_float+0x1a0>
 8008fcc:	2900      	cmp	r1, #0
 8008fce:	bfd4      	ite	le
 8008fd0:	f1c1 0202 	rsble	r2, r1, #2
 8008fd4:	2201      	movgt	r2, #1
 8008fd6:	4413      	add	r3, r2
 8008fd8:	e7e0      	b.n	8008f9c <_printf_float+0x1a0>
 8008fda:	6823      	ldr	r3, [r4, #0]
 8008fdc:	055a      	lsls	r2, r3, #21
 8008fde:	d407      	bmi.n	8008ff0 <_printf_float+0x1f4>
 8008fe0:	6923      	ldr	r3, [r4, #16]
 8008fe2:	4642      	mov	r2, r8
 8008fe4:	4631      	mov	r1, r6
 8008fe6:	4628      	mov	r0, r5
 8008fe8:	47b8      	blx	r7
 8008fea:	3001      	adds	r0, #1
 8008fec:	d12c      	bne.n	8009048 <_printf_float+0x24c>
 8008fee:	e764      	b.n	8008eba <_printf_float+0xbe>
 8008ff0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008ff4:	f240 80e0 	bls.w	80091b8 <_printf_float+0x3bc>
 8008ff8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	2300      	movs	r3, #0
 8009000:	f7f7 fd72 	bl	8000ae8 <__aeabi_dcmpeq>
 8009004:	2800      	cmp	r0, #0
 8009006:	d034      	beq.n	8009072 <_printf_float+0x276>
 8009008:	4a37      	ldr	r2, [pc, #220]	; (80090e8 <_printf_float+0x2ec>)
 800900a:	2301      	movs	r3, #1
 800900c:	4631      	mov	r1, r6
 800900e:	4628      	mov	r0, r5
 8009010:	47b8      	blx	r7
 8009012:	3001      	adds	r0, #1
 8009014:	f43f af51 	beq.w	8008eba <_printf_float+0xbe>
 8009018:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800901c:	429a      	cmp	r2, r3
 800901e:	db02      	blt.n	8009026 <_printf_float+0x22a>
 8009020:	6823      	ldr	r3, [r4, #0]
 8009022:	07d8      	lsls	r0, r3, #31
 8009024:	d510      	bpl.n	8009048 <_printf_float+0x24c>
 8009026:	ee18 3a10 	vmov	r3, s16
 800902a:	4652      	mov	r2, sl
 800902c:	4631      	mov	r1, r6
 800902e:	4628      	mov	r0, r5
 8009030:	47b8      	blx	r7
 8009032:	3001      	adds	r0, #1
 8009034:	f43f af41 	beq.w	8008eba <_printf_float+0xbe>
 8009038:	f04f 0800 	mov.w	r8, #0
 800903c:	f104 091a 	add.w	r9, r4, #26
 8009040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009042:	3b01      	subs	r3, #1
 8009044:	4543      	cmp	r3, r8
 8009046:	dc09      	bgt.n	800905c <_printf_float+0x260>
 8009048:	6823      	ldr	r3, [r4, #0]
 800904a:	079b      	lsls	r3, r3, #30
 800904c:	f100 8107 	bmi.w	800925e <_printf_float+0x462>
 8009050:	68e0      	ldr	r0, [r4, #12]
 8009052:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009054:	4298      	cmp	r0, r3
 8009056:	bfb8      	it	lt
 8009058:	4618      	movlt	r0, r3
 800905a:	e730      	b.n	8008ebe <_printf_float+0xc2>
 800905c:	2301      	movs	r3, #1
 800905e:	464a      	mov	r2, r9
 8009060:	4631      	mov	r1, r6
 8009062:	4628      	mov	r0, r5
 8009064:	47b8      	blx	r7
 8009066:	3001      	adds	r0, #1
 8009068:	f43f af27 	beq.w	8008eba <_printf_float+0xbe>
 800906c:	f108 0801 	add.w	r8, r8, #1
 8009070:	e7e6      	b.n	8009040 <_printf_float+0x244>
 8009072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009074:	2b00      	cmp	r3, #0
 8009076:	dc39      	bgt.n	80090ec <_printf_float+0x2f0>
 8009078:	4a1b      	ldr	r2, [pc, #108]	; (80090e8 <_printf_float+0x2ec>)
 800907a:	2301      	movs	r3, #1
 800907c:	4631      	mov	r1, r6
 800907e:	4628      	mov	r0, r5
 8009080:	47b8      	blx	r7
 8009082:	3001      	adds	r0, #1
 8009084:	f43f af19 	beq.w	8008eba <_printf_float+0xbe>
 8009088:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800908c:	4313      	orrs	r3, r2
 800908e:	d102      	bne.n	8009096 <_printf_float+0x29a>
 8009090:	6823      	ldr	r3, [r4, #0]
 8009092:	07d9      	lsls	r1, r3, #31
 8009094:	d5d8      	bpl.n	8009048 <_printf_float+0x24c>
 8009096:	ee18 3a10 	vmov	r3, s16
 800909a:	4652      	mov	r2, sl
 800909c:	4631      	mov	r1, r6
 800909e:	4628      	mov	r0, r5
 80090a0:	47b8      	blx	r7
 80090a2:	3001      	adds	r0, #1
 80090a4:	f43f af09 	beq.w	8008eba <_printf_float+0xbe>
 80090a8:	f04f 0900 	mov.w	r9, #0
 80090ac:	f104 0a1a 	add.w	sl, r4, #26
 80090b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090b2:	425b      	negs	r3, r3
 80090b4:	454b      	cmp	r3, r9
 80090b6:	dc01      	bgt.n	80090bc <_printf_float+0x2c0>
 80090b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090ba:	e792      	b.n	8008fe2 <_printf_float+0x1e6>
 80090bc:	2301      	movs	r3, #1
 80090be:	4652      	mov	r2, sl
 80090c0:	4631      	mov	r1, r6
 80090c2:	4628      	mov	r0, r5
 80090c4:	47b8      	blx	r7
 80090c6:	3001      	adds	r0, #1
 80090c8:	f43f aef7 	beq.w	8008eba <_printf_float+0xbe>
 80090cc:	f109 0901 	add.w	r9, r9, #1
 80090d0:	e7ee      	b.n	80090b0 <_printf_float+0x2b4>
 80090d2:	bf00      	nop
 80090d4:	7fefffff 	.word	0x7fefffff
 80090d8:	0800ba50 	.word	0x0800ba50
 80090dc:	0800ba54 	.word	0x0800ba54
 80090e0:	0800ba58 	.word	0x0800ba58
 80090e4:	0800ba5c 	.word	0x0800ba5c
 80090e8:	0800ba60 	.word	0x0800ba60
 80090ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80090ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80090f0:	429a      	cmp	r2, r3
 80090f2:	bfa8      	it	ge
 80090f4:	461a      	movge	r2, r3
 80090f6:	2a00      	cmp	r2, #0
 80090f8:	4691      	mov	r9, r2
 80090fa:	dc37      	bgt.n	800916c <_printf_float+0x370>
 80090fc:	f04f 0b00 	mov.w	fp, #0
 8009100:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009104:	f104 021a 	add.w	r2, r4, #26
 8009108:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800910a:	9305      	str	r3, [sp, #20]
 800910c:	eba3 0309 	sub.w	r3, r3, r9
 8009110:	455b      	cmp	r3, fp
 8009112:	dc33      	bgt.n	800917c <_printf_float+0x380>
 8009114:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009118:	429a      	cmp	r2, r3
 800911a:	db3b      	blt.n	8009194 <_printf_float+0x398>
 800911c:	6823      	ldr	r3, [r4, #0]
 800911e:	07da      	lsls	r2, r3, #31
 8009120:	d438      	bmi.n	8009194 <_printf_float+0x398>
 8009122:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009126:	eba2 0903 	sub.w	r9, r2, r3
 800912a:	9b05      	ldr	r3, [sp, #20]
 800912c:	1ad2      	subs	r2, r2, r3
 800912e:	4591      	cmp	r9, r2
 8009130:	bfa8      	it	ge
 8009132:	4691      	movge	r9, r2
 8009134:	f1b9 0f00 	cmp.w	r9, #0
 8009138:	dc35      	bgt.n	80091a6 <_printf_float+0x3aa>
 800913a:	f04f 0800 	mov.w	r8, #0
 800913e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009142:	f104 0a1a 	add.w	sl, r4, #26
 8009146:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800914a:	1a9b      	subs	r3, r3, r2
 800914c:	eba3 0309 	sub.w	r3, r3, r9
 8009150:	4543      	cmp	r3, r8
 8009152:	f77f af79 	ble.w	8009048 <_printf_float+0x24c>
 8009156:	2301      	movs	r3, #1
 8009158:	4652      	mov	r2, sl
 800915a:	4631      	mov	r1, r6
 800915c:	4628      	mov	r0, r5
 800915e:	47b8      	blx	r7
 8009160:	3001      	adds	r0, #1
 8009162:	f43f aeaa 	beq.w	8008eba <_printf_float+0xbe>
 8009166:	f108 0801 	add.w	r8, r8, #1
 800916a:	e7ec      	b.n	8009146 <_printf_float+0x34a>
 800916c:	4613      	mov	r3, r2
 800916e:	4631      	mov	r1, r6
 8009170:	4642      	mov	r2, r8
 8009172:	4628      	mov	r0, r5
 8009174:	47b8      	blx	r7
 8009176:	3001      	adds	r0, #1
 8009178:	d1c0      	bne.n	80090fc <_printf_float+0x300>
 800917a:	e69e      	b.n	8008eba <_printf_float+0xbe>
 800917c:	2301      	movs	r3, #1
 800917e:	4631      	mov	r1, r6
 8009180:	4628      	mov	r0, r5
 8009182:	9205      	str	r2, [sp, #20]
 8009184:	47b8      	blx	r7
 8009186:	3001      	adds	r0, #1
 8009188:	f43f ae97 	beq.w	8008eba <_printf_float+0xbe>
 800918c:	9a05      	ldr	r2, [sp, #20]
 800918e:	f10b 0b01 	add.w	fp, fp, #1
 8009192:	e7b9      	b.n	8009108 <_printf_float+0x30c>
 8009194:	ee18 3a10 	vmov	r3, s16
 8009198:	4652      	mov	r2, sl
 800919a:	4631      	mov	r1, r6
 800919c:	4628      	mov	r0, r5
 800919e:	47b8      	blx	r7
 80091a0:	3001      	adds	r0, #1
 80091a2:	d1be      	bne.n	8009122 <_printf_float+0x326>
 80091a4:	e689      	b.n	8008eba <_printf_float+0xbe>
 80091a6:	9a05      	ldr	r2, [sp, #20]
 80091a8:	464b      	mov	r3, r9
 80091aa:	4442      	add	r2, r8
 80091ac:	4631      	mov	r1, r6
 80091ae:	4628      	mov	r0, r5
 80091b0:	47b8      	blx	r7
 80091b2:	3001      	adds	r0, #1
 80091b4:	d1c1      	bne.n	800913a <_printf_float+0x33e>
 80091b6:	e680      	b.n	8008eba <_printf_float+0xbe>
 80091b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091ba:	2a01      	cmp	r2, #1
 80091bc:	dc01      	bgt.n	80091c2 <_printf_float+0x3c6>
 80091be:	07db      	lsls	r3, r3, #31
 80091c0:	d53a      	bpl.n	8009238 <_printf_float+0x43c>
 80091c2:	2301      	movs	r3, #1
 80091c4:	4642      	mov	r2, r8
 80091c6:	4631      	mov	r1, r6
 80091c8:	4628      	mov	r0, r5
 80091ca:	47b8      	blx	r7
 80091cc:	3001      	adds	r0, #1
 80091ce:	f43f ae74 	beq.w	8008eba <_printf_float+0xbe>
 80091d2:	ee18 3a10 	vmov	r3, s16
 80091d6:	4652      	mov	r2, sl
 80091d8:	4631      	mov	r1, r6
 80091da:	4628      	mov	r0, r5
 80091dc:	47b8      	blx	r7
 80091de:	3001      	adds	r0, #1
 80091e0:	f43f ae6b 	beq.w	8008eba <_printf_float+0xbe>
 80091e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80091e8:	2200      	movs	r2, #0
 80091ea:	2300      	movs	r3, #0
 80091ec:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80091f0:	f7f7 fc7a 	bl	8000ae8 <__aeabi_dcmpeq>
 80091f4:	b9d8      	cbnz	r0, 800922e <_printf_float+0x432>
 80091f6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80091fa:	f108 0201 	add.w	r2, r8, #1
 80091fe:	4631      	mov	r1, r6
 8009200:	4628      	mov	r0, r5
 8009202:	47b8      	blx	r7
 8009204:	3001      	adds	r0, #1
 8009206:	d10e      	bne.n	8009226 <_printf_float+0x42a>
 8009208:	e657      	b.n	8008eba <_printf_float+0xbe>
 800920a:	2301      	movs	r3, #1
 800920c:	4652      	mov	r2, sl
 800920e:	4631      	mov	r1, r6
 8009210:	4628      	mov	r0, r5
 8009212:	47b8      	blx	r7
 8009214:	3001      	adds	r0, #1
 8009216:	f43f ae50 	beq.w	8008eba <_printf_float+0xbe>
 800921a:	f108 0801 	add.w	r8, r8, #1
 800921e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009220:	3b01      	subs	r3, #1
 8009222:	4543      	cmp	r3, r8
 8009224:	dcf1      	bgt.n	800920a <_printf_float+0x40e>
 8009226:	464b      	mov	r3, r9
 8009228:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800922c:	e6da      	b.n	8008fe4 <_printf_float+0x1e8>
 800922e:	f04f 0800 	mov.w	r8, #0
 8009232:	f104 0a1a 	add.w	sl, r4, #26
 8009236:	e7f2      	b.n	800921e <_printf_float+0x422>
 8009238:	2301      	movs	r3, #1
 800923a:	4642      	mov	r2, r8
 800923c:	e7df      	b.n	80091fe <_printf_float+0x402>
 800923e:	2301      	movs	r3, #1
 8009240:	464a      	mov	r2, r9
 8009242:	4631      	mov	r1, r6
 8009244:	4628      	mov	r0, r5
 8009246:	47b8      	blx	r7
 8009248:	3001      	adds	r0, #1
 800924a:	f43f ae36 	beq.w	8008eba <_printf_float+0xbe>
 800924e:	f108 0801 	add.w	r8, r8, #1
 8009252:	68e3      	ldr	r3, [r4, #12]
 8009254:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009256:	1a5b      	subs	r3, r3, r1
 8009258:	4543      	cmp	r3, r8
 800925a:	dcf0      	bgt.n	800923e <_printf_float+0x442>
 800925c:	e6f8      	b.n	8009050 <_printf_float+0x254>
 800925e:	f04f 0800 	mov.w	r8, #0
 8009262:	f104 0919 	add.w	r9, r4, #25
 8009266:	e7f4      	b.n	8009252 <_printf_float+0x456>

08009268 <_printf_common>:
 8009268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800926c:	4616      	mov	r6, r2
 800926e:	4699      	mov	r9, r3
 8009270:	688a      	ldr	r2, [r1, #8]
 8009272:	690b      	ldr	r3, [r1, #16]
 8009274:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009278:	4293      	cmp	r3, r2
 800927a:	bfb8      	it	lt
 800927c:	4613      	movlt	r3, r2
 800927e:	6033      	str	r3, [r6, #0]
 8009280:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009284:	4607      	mov	r7, r0
 8009286:	460c      	mov	r4, r1
 8009288:	b10a      	cbz	r2, 800928e <_printf_common+0x26>
 800928a:	3301      	adds	r3, #1
 800928c:	6033      	str	r3, [r6, #0]
 800928e:	6823      	ldr	r3, [r4, #0]
 8009290:	0699      	lsls	r1, r3, #26
 8009292:	bf42      	ittt	mi
 8009294:	6833      	ldrmi	r3, [r6, #0]
 8009296:	3302      	addmi	r3, #2
 8009298:	6033      	strmi	r3, [r6, #0]
 800929a:	6825      	ldr	r5, [r4, #0]
 800929c:	f015 0506 	ands.w	r5, r5, #6
 80092a0:	d106      	bne.n	80092b0 <_printf_common+0x48>
 80092a2:	f104 0a19 	add.w	sl, r4, #25
 80092a6:	68e3      	ldr	r3, [r4, #12]
 80092a8:	6832      	ldr	r2, [r6, #0]
 80092aa:	1a9b      	subs	r3, r3, r2
 80092ac:	42ab      	cmp	r3, r5
 80092ae:	dc26      	bgt.n	80092fe <_printf_common+0x96>
 80092b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80092b4:	1e13      	subs	r3, r2, #0
 80092b6:	6822      	ldr	r2, [r4, #0]
 80092b8:	bf18      	it	ne
 80092ba:	2301      	movne	r3, #1
 80092bc:	0692      	lsls	r2, r2, #26
 80092be:	d42b      	bmi.n	8009318 <_printf_common+0xb0>
 80092c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80092c4:	4649      	mov	r1, r9
 80092c6:	4638      	mov	r0, r7
 80092c8:	47c0      	blx	r8
 80092ca:	3001      	adds	r0, #1
 80092cc:	d01e      	beq.n	800930c <_printf_common+0xa4>
 80092ce:	6823      	ldr	r3, [r4, #0]
 80092d0:	6922      	ldr	r2, [r4, #16]
 80092d2:	f003 0306 	and.w	r3, r3, #6
 80092d6:	2b04      	cmp	r3, #4
 80092d8:	bf02      	ittt	eq
 80092da:	68e5      	ldreq	r5, [r4, #12]
 80092dc:	6833      	ldreq	r3, [r6, #0]
 80092de:	1aed      	subeq	r5, r5, r3
 80092e0:	68a3      	ldr	r3, [r4, #8]
 80092e2:	bf0c      	ite	eq
 80092e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80092e8:	2500      	movne	r5, #0
 80092ea:	4293      	cmp	r3, r2
 80092ec:	bfc4      	itt	gt
 80092ee:	1a9b      	subgt	r3, r3, r2
 80092f0:	18ed      	addgt	r5, r5, r3
 80092f2:	2600      	movs	r6, #0
 80092f4:	341a      	adds	r4, #26
 80092f6:	42b5      	cmp	r5, r6
 80092f8:	d11a      	bne.n	8009330 <_printf_common+0xc8>
 80092fa:	2000      	movs	r0, #0
 80092fc:	e008      	b.n	8009310 <_printf_common+0xa8>
 80092fe:	2301      	movs	r3, #1
 8009300:	4652      	mov	r2, sl
 8009302:	4649      	mov	r1, r9
 8009304:	4638      	mov	r0, r7
 8009306:	47c0      	blx	r8
 8009308:	3001      	adds	r0, #1
 800930a:	d103      	bne.n	8009314 <_printf_common+0xac>
 800930c:	f04f 30ff 	mov.w	r0, #4294967295
 8009310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009314:	3501      	adds	r5, #1
 8009316:	e7c6      	b.n	80092a6 <_printf_common+0x3e>
 8009318:	18e1      	adds	r1, r4, r3
 800931a:	1c5a      	adds	r2, r3, #1
 800931c:	2030      	movs	r0, #48	; 0x30
 800931e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009322:	4422      	add	r2, r4
 8009324:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009328:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800932c:	3302      	adds	r3, #2
 800932e:	e7c7      	b.n	80092c0 <_printf_common+0x58>
 8009330:	2301      	movs	r3, #1
 8009332:	4622      	mov	r2, r4
 8009334:	4649      	mov	r1, r9
 8009336:	4638      	mov	r0, r7
 8009338:	47c0      	blx	r8
 800933a:	3001      	adds	r0, #1
 800933c:	d0e6      	beq.n	800930c <_printf_common+0xa4>
 800933e:	3601      	adds	r6, #1
 8009340:	e7d9      	b.n	80092f6 <_printf_common+0x8e>
	...

08009344 <_printf_i>:
 8009344:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009348:	7e0f      	ldrb	r7, [r1, #24]
 800934a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800934c:	2f78      	cmp	r7, #120	; 0x78
 800934e:	4691      	mov	r9, r2
 8009350:	4680      	mov	r8, r0
 8009352:	460c      	mov	r4, r1
 8009354:	469a      	mov	sl, r3
 8009356:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800935a:	d807      	bhi.n	800936c <_printf_i+0x28>
 800935c:	2f62      	cmp	r7, #98	; 0x62
 800935e:	d80a      	bhi.n	8009376 <_printf_i+0x32>
 8009360:	2f00      	cmp	r7, #0
 8009362:	f000 80d4 	beq.w	800950e <_printf_i+0x1ca>
 8009366:	2f58      	cmp	r7, #88	; 0x58
 8009368:	f000 80c0 	beq.w	80094ec <_printf_i+0x1a8>
 800936c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009370:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009374:	e03a      	b.n	80093ec <_printf_i+0xa8>
 8009376:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800937a:	2b15      	cmp	r3, #21
 800937c:	d8f6      	bhi.n	800936c <_printf_i+0x28>
 800937e:	a101      	add	r1, pc, #4	; (adr r1, 8009384 <_printf_i+0x40>)
 8009380:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009384:	080093dd 	.word	0x080093dd
 8009388:	080093f1 	.word	0x080093f1
 800938c:	0800936d 	.word	0x0800936d
 8009390:	0800936d 	.word	0x0800936d
 8009394:	0800936d 	.word	0x0800936d
 8009398:	0800936d 	.word	0x0800936d
 800939c:	080093f1 	.word	0x080093f1
 80093a0:	0800936d 	.word	0x0800936d
 80093a4:	0800936d 	.word	0x0800936d
 80093a8:	0800936d 	.word	0x0800936d
 80093ac:	0800936d 	.word	0x0800936d
 80093b0:	080094f5 	.word	0x080094f5
 80093b4:	0800941d 	.word	0x0800941d
 80093b8:	080094af 	.word	0x080094af
 80093bc:	0800936d 	.word	0x0800936d
 80093c0:	0800936d 	.word	0x0800936d
 80093c4:	08009517 	.word	0x08009517
 80093c8:	0800936d 	.word	0x0800936d
 80093cc:	0800941d 	.word	0x0800941d
 80093d0:	0800936d 	.word	0x0800936d
 80093d4:	0800936d 	.word	0x0800936d
 80093d8:	080094b7 	.word	0x080094b7
 80093dc:	682b      	ldr	r3, [r5, #0]
 80093de:	1d1a      	adds	r2, r3, #4
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	602a      	str	r2, [r5, #0]
 80093e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80093ec:	2301      	movs	r3, #1
 80093ee:	e09f      	b.n	8009530 <_printf_i+0x1ec>
 80093f0:	6820      	ldr	r0, [r4, #0]
 80093f2:	682b      	ldr	r3, [r5, #0]
 80093f4:	0607      	lsls	r7, r0, #24
 80093f6:	f103 0104 	add.w	r1, r3, #4
 80093fa:	6029      	str	r1, [r5, #0]
 80093fc:	d501      	bpl.n	8009402 <_printf_i+0xbe>
 80093fe:	681e      	ldr	r6, [r3, #0]
 8009400:	e003      	b.n	800940a <_printf_i+0xc6>
 8009402:	0646      	lsls	r6, r0, #25
 8009404:	d5fb      	bpl.n	80093fe <_printf_i+0xba>
 8009406:	f9b3 6000 	ldrsh.w	r6, [r3]
 800940a:	2e00      	cmp	r6, #0
 800940c:	da03      	bge.n	8009416 <_printf_i+0xd2>
 800940e:	232d      	movs	r3, #45	; 0x2d
 8009410:	4276      	negs	r6, r6
 8009412:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009416:	485a      	ldr	r0, [pc, #360]	; (8009580 <_printf_i+0x23c>)
 8009418:	230a      	movs	r3, #10
 800941a:	e012      	b.n	8009442 <_printf_i+0xfe>
 800941c:	682b      	ldr	r3, [r5, #0]
 800941e:	6820      	ldr	r0, [r4, #0]
 8009420:	1d19      	adds	r1, r3, #4
 8009422:	6029      	str	r1, [r5, #0]
 8009424:	0605      	lsls	r5, r0, #24
 8009426:	d501      	bpl.n	800942c <_printf_i+0xe8>
 8009428:	681e      	ldr	r6, [r3, #0]
 800942a:	e002      	b.n	8009432 <_printf_i+0xee>
 800942c:	0641      	lsls	r1, r0, #25
 800942e:	d5fb      	bpl.n	8009428 <_printf_i+0xe4>
 8009430:	881e      	ldrh	r6, [r3, #0]
 8009432:	4853      	ldr	r0, [pc, #332]	; (8009580 <_printf_i+0x23c>)
 8009434:	2f6f      	cmp	r7, #111	; 0x6f
 8009436:	bf0c      	ite	eq
 8009438:	2308      	moveq	r3, #8
 800943a:	230a      	movne	r3, #10
 800943c:	2100      	movs	r1, #0
 800943e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009442:	6865      	ldr	r5, [r4, #4]
 8009444:	60a5      	str	r5, [r4, #8]
 8009446:	2d00      	cmp	r5, #0
 8009448:	bfa2      	ittt	ge
 800944a:	6821      	ldrge	r1, [r4, #0]
 800944c:	f021 0104 	bicge.w	r1, r1, #4
 8009450:	6021      	strge	r1, [r4, #0]
 8009452:	b90e      	cbnz	r6, 8009458 <_printf_i+0x114>
 8009454:	2d00      	cmp	r5, #0
 8009456:	d04b      	beq.n	80094f0 <_printf_i+0x1ac>
 8009458:	4615      	mov	r5, r2
 800945a:	fbb6 f1f3 	udiv	r1, r6, r3
 800945e:	fb03 6711 	mls	r7, r3, r1, r6
 8009462:	5dc7      	ldrb	r7, [r0, r7]
 8009464:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009468:	4637      	mov	r7, r6
 800946a:	42bb      	cmp	r3, r7
 800946c:	460e      	mov	r6, r1
 800946e:	d9f4      	bls.n	800945a <_printf_i+0x116>
 8009470:	2b08      	cmp	r3, #8
 8009472:	d10b      	bne.n	800948c <_printf_i+0x148>
 8009474:	6823      	ldr	r3, [r4, #0]
 8009476:	07de      	lsls	r6, r3, #31
 8009478:	d508      	bpl.n	800948c <_printf_i+0x148>
 800947a:	6923      	ldr	r3, [r4, #16]
 800947c:	6861      	ldr	r1, [r4, #4]
 800947e:	4299      	cmp	r1, r3
 8009480:	bfde      	ittt	le
 8009482:	2330      	movle	r3, #48	; 0x30
 8009484:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009488:	f105 35ff 	addle.w	r5, r5, #4294967295
 800948c:	1b52      	subs	r2, r2, r5
 800948e:	6122      	str	r2, [r4, #16]
 8009490:	f8cd a000 	str.w	sl, [sp]
 8009494:	464b      	mov	r3, r9
 8009496:	aa03      	add	r2, sp, #12
 8009498:	4621      	mov	r1, r4
 800949a:	4640      	mov	r0, r8
 800949c:	f7ff fee4 	bl	8009268 <_printf_common>
 80094a0:	3001      	adds	r0, #1
 80094a2:	d14a      	bne.n	800953a <_printf_i+0x1f6>
 80094a4:	f04f 30ff 	mov.w	r0, #4294967295
 80094a8:	b004      	add	sp, #16
 80094aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094ae:	6823      	ldr	r3, [r4, #0]
 80094b0:	f043 0320 	orr.w	r3, r3, #32
 80094b4:	6023      	str	r3, [r4, #0]
 80094b6:	4833      	ldr	r0, [pc, #204]	; (8009584 <_printf_i+0x240>)
 80094b8:	2778      	movs	r7, #120	; 0x78
 80094ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80094be:	6823      	ldr	r3, [r4, #0]
 80094c0:	6829      	ldr	r1, [r5, #0]
 80094c2:	061f      	lsls	r7, r3, #24
 80094c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80094c8:	d402      	bmi.n	80094d0 <_printf_i+0x18c>
 80094ca:	065f      	lsls	r7, r3, #25
 80094cc:	bf48      	it	mi
 80094ce:	b2b6      	uxthmi	r6, r6
 80094d0:	07df      	lsls	r7, r3, #31
 80094d2:	bf48      	it	mi
 80094d4:	f043 0320 	orrmi.w	r3, r3, #32
 80094d8:	6029      	str	r1, [r5, #0]
 80094da:	bf48      	it	mi
 80094dc:	6023      	strmi	r3, [r4, #0]
 80094de:	b91e      	cbnz	r6, 80094e8 <_printf_i+0x1a4>
 80094e0:	6823      	ldr	r3, [r4, #0]
 80094e2:	f023 0320 	bic.w	r3, r3, #32
 80094e6:	6023      	str	r3, [r4, #0]
 80094e8:	2310      	movs	r3, #16
 80094ea:	e7a7      	b.n	800943c <_printf_i+0xf8>
 80094ec:	4824      	ldr	r0, [pc, #144]	; (8009580 <_printf_i+0x23c>)
 80094ee:	e7e4      	b.n	80094ba <_printf_i+0x176>
 80094f0:	4615      	mov	r5, r2
 80094f2:	e7bd      	b.n	8009470 <_printf_i+0x12c>
 80094f4:	682b      	ldr	r3, [r5, #0]
 80094f6:	6826      	ldr	r6, [r4, #0]
 80094f8:	6961      	ldr	r1, [r4, #20]
 80094fa:	1d18      	adds	r0, r3, #4
 80094fc:	6028      	str	r0, [r5, #0]
 80094fe:	0635      	lsls	r5, r6, #24
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	d501      	bpl.n	8009508 <_printf_i+0x1c4>
 8009504:	6019      	str	r1, [r3, #0]
 8009506:	e002      	b.n	800950e <_printf_i+0x1ca>
 8009508:	0670      	lsls	r0, r6, #25
 800950a:	d5fb      	bpl.n	8009504 <_printf_i+0x1c0>
 800950c:	8019      	strh	r1, [r3, #0]
 800950e:	2300      	movs	r3, #0
 8009510:	6123      	str	r3, [r4, #16]
 8009512:	4615      	mov	r5, r2
 8009514:	e7bc      	b.n	8009490 <_printf_i+0x14c>
 8009516:	682b      	ldr	r3, [r5, #0]
 8009518:	1d1a      	adds	r2, r3, #4
 800951a:	602a      	str	r2, [r5, #0]
 800951c:	681d      	ldr	r5, [r3, #0]
 800951e:	6862      	ldr	r2, [r4, #4]
 8009520:	2100      	movs	r1, #0
 8009522:	4628      	mov	r0, r5
 8009524:	f7f6 fe64 	bl	80001f0 <memchr>
 8009528:	b108      	cbz	r0, 800952e <_printf_i+0x1ea>
 800952a:	1b40      	subs	r0, r0, r5
 800952c:	6060      	str	r0, [r4, #4]
 800952e:	6863      	ldr	r3, [r4, #4]
 8009530:	6123      	str	r3, [r4, #16]
 8009532:	2300      	movs	r3, #0
 8009534:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009538:	e7aa      	b.n	8009490 <_printf_i+0x14c>
 800953a:	6923      	ldr	r3, [r4, #16]
 800953c:	462a      	mov	r2, r5
 800953e:	4649      	mov	r1, r9
 8009540:	4640      	mov	r0, r8
 8009542:	47d0      	blx	sl
 8009544:	3001      	adds	r0, #1
 8009546:	d0ad      	beq.n	80094a4 <_printf_i+0x160>
 8009548:	6823      	ldr	r3, [r4, #0]
 800954a:	079b      	lsls	r3, r3, #30
 800954c:	d413      	bmi.n	8009576 <_printf_i+0x232>
 800954e:	68e0      	ldr	r0, [r4, #12]
 8009550:	9b03      	ldr	r3, [sp, #12]
 8009552:	4298      	cmp	r0, r3
 8009554:	bfb8      	it	lt
 8009556:	4618      	movlt	r0, r3
 8009558:	e7a6      	b.n	80094a8 <_printf_i+0x164>
 800955a:	2301      	movs	r3, #1
 800955c:	4632      	mov	r2, r6
 800955e:	4649      	mov	r1, r9
 8009560:	4640      	mov	r0, r8
 8009562:	47d0      	blx	sl
 8009564:	3001      	adds	r0, #1
 8009566:	d09d      	beq.n	80094a4 <_printf_i+0x160>
 8009568:	3501      	adds	r5, #1
 800956a:	68e3      	ldr	r3, [r4, #12]
 800956c:	9903      	ldr	r1, [sp, #12]
 800956e:	1a5b      	subs	r3, r3, r1
 8009570:	42ab      	cmp	r3, r5
 8009572:	dcf2      	bgt.n	800955a <_printf_i+0x216>
 8009574:	e7eb      	b.n	800954e <_printf_i+0x20a>
 8009576:	2500      	movs	r5, #0
 8009578:	f104 0619 	add.w	r6, r4, #25
 800957c:	e7f5      	b.n	800956a <_printf_i+0x226>
 800957e:	bf00      	nop
 8009580:	0800ba62 	.word	0x0800ba62
 8009584:	0800ba73 	.word	0x0800ba73

08009588 <std>:
 8009588:	2300      	movs	r3, #0
 800958a:	b510      	push	{r4, lr}
 800958c:	4604      	mov	r4, r0
 800958e:	e9c0 3300 	strd	r3, r3, [r0]
 8009592:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009596:	6083      	str	r3, [r0, #8]
 8009598:	8181      	strh	r1, [r0, #12]
 800959a:	6643      	str	r3, [r0, #100]	; 0x64
 800959c:	81c2      	strh	r2, [r0, #14]
 800959e:	6183      	str	r3, [r0, #24]
 80095a0:	4619      	mov	r1, r3
 80095a2:	2208      	movs	r2, #8
 80095a4:	305c      	adds	r0, #92	; 0x5c
 80095a6:	f000 f926 	bl	80097f6 <memset>
 80095aa:	4b0d      	ldr	r3, [pc, #52]	; (80095e0 <std+0x58>)
 80095ac:	6263      	str	r3, [r4, #36]	; 0x24
 80095ae:	4b0d      	ldr	r3, [pc, #52]	; (80095e4 <std+0x5c>)
 80095b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80095b2:	4b0d      	ldr	r3, [pc, #52]	; (80095e8 <std+0x60>)
 80095b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80095b6:	4b0d      	ldr	r3, [pc, #52]	; (80095ec <std+0x64>)
 80095b8:	6323      	str	r3, [r4, #48]	; 0x30
 80095ba:	4b0d      	ldr	r3, [pc, #52]	; (80095f0 <std+0x68>)
 80095bc:	6224      	str	r4, [r4, #32]
 80095be:	429c      	cmp	r4, r3
 80095c0:	d006      	beq.n	80095d0 <std+0x48>
 80095c2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80095c6:	4294      	cmp	r4, r2
 80095c8:	d002      	beq.n	80095d0 <std+0x48>
 80095ca:	33d0      	adds	r3, #208	; 0xd0
 80095cc:	429c      	cmp	r4, r3
 80095ce:	d105      	bne.n	80095dc <std+0x54>
 80095d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80095d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095d8:	f000 b98a 	b.w	80098f0 <__retarget_lock_init_recursive>
 80095dc:	bd10      	pop	{r4, pc}
 80095de:	bf00      	nop
 80095e0:	08009771 	.word	0x08009771
 80095e4:	08009793 	.word	0x08009793
 80095e8:	080097cb 	.word	0x080097cb
 80095ec:	080097ef 	.word	0x080097ef
 80095f0:	20000ecc 	.word	0x20000ecc

080095f4 <stdio_exit_handler>:
 80095f4:	4a02      	ldr	r2, [pc, #8]	; (8009600 <stdio_exit_handler+0xc>)
 80095f6:	4903      	ldr	r1, [pc, #12]	; (8009604 <stdio_exit_handler+0x10>)
 80095f8:	4803      	ldr	r0, [pc, #12]	; (8009608 <stdio_exit_handler+0x14>)
 80095fa:	f000 b869 	b.w	80096d0 <_fwalk_sglue>
 80095fe:	bf00      	nop
 8009600:	20000014 	.word	0x20000014
 8009604:	0800b529 	.word	0x0800b529
 8009608:	20000020 	.word	0x20000020

0800960c <cleanup_stdio>:
 800960c:	6841      	ldr	r1, [r0, #4]
 800960e:	4b0c      	ldr	r3, [pc, #48]	; (8009640 <cleanup_stdio+0x34>)
 8009610:	4299      	cmp	r1, r3
 8009612:	b510      	push	{r4, lr}
 8009614:	4604      	mov	r4, r0
 8009616:	d001      	beq.n	800961c <cleanup_stdio+0x10>
 8009618:	f001 ff86 	bl	800b528 <_fflush_r>
 800961c:	68a1      	ldr	r1, [r4, #8]
 800961e:	4b09      	ldr	r3, [pc, #36]	; (8009644 <cleanup_stdio+0x38>)
 8009620:	4299      	cmp	r1, r3
 8009622:	d002      	beq.n	800962a <cleanup_stdio+0x1e>
 8009624:	4620      	mov	r0, r4
 8009626:	f001 ff7f 	bl	800b528 <_fflush_r>
 800962a:	68e1      	ldr	r1, [r4, #12]
 800962c:	4b06      	ldr	r3, [pc, #24]	; (8009648 <cleanup_stdio+0x3c>)
 800962e:	4299      	cmp	r1, r3
 8009630:	d004      	beq.n	800963c <cleanup_stdio+0x30>
 8009632:	4620      	mov	r0, r4
 8009634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009638:	f001 bf76 	b.w	800b528 <_fflush_r>
 800963c:	bd10      	pop	{r4, pc}
 800963e:	bf00      	nop
 8009640:	20000ecc 	.word	0x20000ecc
 8009644:	20000f34 	.word	0x20000f34
 8009648:	20000f9c 	.word	0x20000f9c

0800964c <global_stdio_init.part.0>:
 800964c:	b510      	push	{r4, lr}
 800964e:	4b0b      	ldr	r3, [pc, #44]	; (800967c <global_stdio_init.part.0+0x30>)
 8009650:	4c0b      	ldr	r4, [pc, #44]	; (8009680 <global_stdio_init.part.0+0x34>)
 8009652:	4a0c      	ldr	r2, [pc, #48]	; (8009684 <global_stdio_init.part.0+0x38>)
 8009654:	601a      	str	r2, [r3, #0]
 8009656:	4620      	mov	r0, r4
 8009658:	2200      	movs	r2, #0
 800965a:	2104      	movs	r1, #4
 800965c:	f7ff ff94 	bl	8009588 <std>
 8009660:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009664:	2201      	movs	r2, #1
 8009666:	2109      	movs	r1, #9
 8009668:	f7ff ff8e 	bl	8009588 <std>
 800966c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009670:	2202      	movs	r2, #2
 8009672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009676:	2112      	movs	r1, #18
 8009678:	f7ff bf86 	b.w	8009588 <std>
 800967c:	20001004 	.word	0x20001004
 8009680:	20000ecc 	.word	0x20000ecc
 8009684:	080095f5 	.word	0x080095f5

08009688 <__sfp_lock_acquire>:
 8009688:	4801      	ldr	r0, [pc, #4]	; (8009690 <__sfp_lock_acquire+0x8>)
 800968a:	f000 b932 	b.w	80098f2 <__retarget_lock_acquire_recursive>
 800968e:	bf00      	nop
 8009690:	2000100d 	.word	0x2000100d

08009694 <__sfp_lock_release>:
 8009694:	4801      	ldr	r0, [pc, #4]	; (800969c <__sfp_lock_release+0x8>)
 8009696:	f000 b92d 	b.w	80098f4 <__retarget_lock_release_recursive>
 800969a:	bf00      	nop
 800969c:	2000100d 	.word	0x2000100d

080096a0 <__sinit>:
 80096a0:	b510      	push	{r4, lr}
 80096a2:	4604      	mov	r4, r0
 80096a4:	f7ff fff0 	bl	8009688 <__sfp_lock_acquire>
 80096a8:	6a23      	ldr	r3, [r4, #32]
 80096aa:	b11b      	cbz	r3, 80096b4 <__sinit+0x14>
 80096ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096b0:	f7ff bff0 	b.w	8009694 <__sfp_lock_release>
 80096b4:	4b04      	ldr	r3, [pc, #16]	; (80096c8 <__sinit+0x28>)
 80096b6:	6223      	str	r3, [r4, #32]
 80096b8:	4b04      	ldr	r3, [pc, #16]	; (80096cc <__sinit+0x2c>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d1f5      	bne.n	80096ac <__sinit+0xc>
 80096c0:	f7ff ffc4 	bl	800964c <global_stdio_init.part.0>
 80096c4:	e7f2      	b.n	80096ac <__sinit+0xc>
 80096c6:	bf00      	nop
 80096c8:	0800960d 	.word	0x0800960d
 80096cc:	20001004 	.word	0x20001004

080096d0 <_fwalk_sglue>:
 80096d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096d4:	4607      	mov	r7, r0
 80096d6:	4688      	mov	r8, r1
 80096d8:	4614      	mov	r4, r2
 80096da:	2600      	movs	r6, #0
 80096dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80096e0:	f1b9 0901 	subs.w	r9, r9, #1
 80096e4:	d505      	bpl.n	80096f2 <_fwalk_sglue+0x22>
 80096e6:	6824      	ldr	r4, [r4, #0]
 80096e8:	2c00      	cmp	r4, #0
 80096ea:	d1f7      	bne.n	80096dc <_fwalk_sglue+0xc>
 80096ec:	4630      	mov	r0, r6
 80096ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096f2:	89ab      	ldrh	r3, [r5, #12]
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	d907      	bls.n	8009708 <_fwalk_sglue+0x38>
 80096f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80096fc:	3301      	adds	r3, #1
 80096fe:	d003      	beq.n	8009708 <_fwalk_sglue+0x38>
 8009700:	4629      	mov	r1, r5
 8009702:	4638      	mov	r0, r7
 8009704:	47c0      	blx	r8
 8009706:	4306      	orrs	r6, r0
 8009708:	3568      	adds	r5, #104	; 0x68
 800970a:	e7e9      	b.n	80096e0 <_fwalk_sglue+0x10>

0800970c <iprintf>:
 800970c:	b40f      	push	{r0, r1, r2, r3}
 800970e:	b507      	push	{r0, r1, r2, lr}
 8009710:	4906      	ldr	r1, [pc, #24]	; (800972c <iprintf+0x20>)
 8009712:	ab04      	add	r3, sp, #16
 8009714:	6808      	ldr	r0, [r1, #0]
 8009716:	f853 2b04 	ldr.w	r2, [r3], #4
 800971a:	6881      	ldr	r1, [r0, #8]
 800971c:	9301      	str	r3, [sp, #4]
 800971e:	f001 fd63 	bl	800b1e8 <_vfiprintf_r>
 8009722:	b003      	add	sp, #12
 8009724:	f85d eb04 	ldr.w	lr, [sp], #4
 8009728:	b004      	add	sp, #16
 800972a:	4770      	bx	lr
 800972c:	2000006c 	.word	0x2000006c

08009730 <siprintf>:
 8009730:	b40e      	push	{r1, r2, r3}
 8009732:	b500      	push	{lr}
 8009734:	b09c      	sub	sp, #112	; 0x70
 8009736:	ab1d      	add	r3, sp, #116	; 0x74
 8009738:	9002      	str	r0, [sp, #8]
 800973a:	9006      	str	r0, [sp, #24]
 800973c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009740:	4809      	ldr	r0, [pc, #36]	; (8009768 <siprintf+0x38>)
 8009742:	9107      	str	r1, [sp, #28]
 8009744:	9104      	str	r1, [sp, #16]
 8009746:	4909      	ldr	r1, [pc, #36]	; (800976c <siprintf+0x3c>)
 8009748:	f853 2b04 	ldr.w	r2, [r3], #4
 800974c:	9105      	str	r1, [sp, #20]
 800974e:	6800      	ldr	r0, [r0, #0]
 8009750:	9301      	str	r3, [sp, #4]
 8009752:	a902      	add	r1, sp, #8
 8009754:	f001 fc20 	bl	800af98 <_svfiprintf_r>
 8009758:	9b02      	ldr	r3, [sp, #8]
 800975a:	2200      	movs	r2, #0
 800975c:	701a      	strb	r2, [r3, #0]
 800975e:	b01c      	add	sp, #112	; 0x70
 8009760:	f85d eb04 	ldr.w	lr, [sp], #4
 8009764:	b003      	add	sp, #12
 8009766:	4770      	bx	lr
 8009768:	2000006c 	.word	0x2000006c
 800976c:	ffff0208 	.word	0xffff0208

08009770 <__sread>:
 8009770:	b510      	push	{r4, lr}
 8009772:	460c      	mov	r4, r1
 8009774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009778:	f000 f86c 	bl	8009854 <_read_r>
 800977c:	2800      	cmp	r0, #0
 800977e:	bfab      	itete	ge
 8009780:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009782:	89a3      	ldrhlt	r3, [r4, #12]
 8009784:	181b      	addge	r3, r3, r0
 8009786:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800978a:	bfac      	ite	ge
 800978c:	6563      	strge	r3, [r4, #84]	; 0x54
 800978e:	81a3      	strhlt	r3, [r4, #12]
 8009790:	bd10      	pop	{r4, pc}

08009792 <__swrite>:
 8009792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009796:	461f      	mov	r7, r3
 8009798:	898b      	ldrh	r3, [r1, #12]
 800979a:	05db      	lsls	r3, r3, #23
 800979c:	4605      	mov	r5, r0
 800979e:	460c      	mov	r4, r1
 80097a0:	4616      	mov	r6, r2
 80097a2:	d505      	bpl.n	80097b0 <__swrite+0x1e>
 80097a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097a8:	2302      	movs	r3, #2
 80097aa:	2200      	movs	r2, #0
 80097ac:	f000 f840 	bl	8009830 <_lseek_r>
 80097b0:	89a3      	ldrh	r3, [r4, #12]
 80097b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80097ba:	81a3      	strh	r3, [r4, #12]
 80097bc:	4632      	mov	r2, r6
 80097be:	463b      	mov	r3, r7
 80097c0:	4628      	mov	r0, r5
 80097c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097c6:	f000 b857 	b.w	8009878 <_write_r>

080097ca <__sseek>:
 80097ca:	b510      	push	{r4, lr}
 80097cc:	460c      	mov	r4, r1
 80097ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097d2:	f000 f82d 	bl	8009830 <_lseek_r>
 80097d6:	1c43      	adds	r3, r0, #1
 80097d8:	89a3      	ldrh	r3, [r4, #12]
 80097da:	bf15      	itete	ne
 80097dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80097de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80097e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80097e6:	81a3      	strheq	r3, [r4, #12]
 80097e8:	bf18      	it	ne
 80097ea:	81a3      	strhne	r3, [r4, #12]
 80097ec:	bd10      	pop	{r4, pc}

080097ee <__sclose>:
 80097ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097f2:	f000 b80d 	b.w	8009810 <_close_r>

080097f6 <memset>:
 80097f6:	4402      	add	r2, r0
 80097f8:	4603      	mov	r3, r0
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d100      	bne.n	8009800 <memset+0xa>
 80097fe:	4770      	bx	lr
 8009800:	f803 1b01 	strb.w	r1, [r3], #1
 8009804:	e7f9      	b.n	80097fa <memset+0x4>
	...

08009808 <_localeconv_r>:
 8009808:	4800      	ldr	r0, [pc, #0]	; (800980c <_localeconv_r+0x4>)
 800980a:	4770      	bx	lr
 800980c:	20000160 	.word	0x20000160

08009810 <_close_r>:
 8009810:	b538      	push	{r3, r4, r5, lr}
 8009812:	4d06      	ldr	r5, [pc, #24]	; (800982c <_close_r+0x1c>)
 8009814:	2300      	movs	r3, #0
 8009816:	4604      	mov	r4, r0
 8009818:	4608      	mov	r0, r1
 800981a:	602b      	str	r3, [r5, #0]
 800981c:	f7f9 fd8b 	bl	8003336 <_close>
 8009820:	1c43      	adds	r3, r0, #1
 8009822:	d102      	bne.n	800982a <_close_r+0x1a>
 8009824:	682b      	ldr	r3, [r5, #0]
 8009826:	b103      	cbz	r3, 800982a <_close_r+0x1a>
 8009828:	6023      	str	r3, [r4, #0]
 800982a:	bd38      	pop	{r3, r4, r5, pc}
 800982c:	20001008 	.word	0x20001008

08009830 <_lseek_r>:
 8009830:	b538      	push	{r3, r4, r5, lr}
 8009832:	4d07      	ldr	r5, [pc, #28]	; (8009850 <_lseek_r+0x20>)
 8009834:	4604      	mov	r4, r0
 8009836:	4608      	mov	r0, r1
 8009838:	4611      	mov	r1, r2
 800983a:	2200      	movs	r2, #0
 800983c:	602a      	str	r2, [r5, #0]
 800983e:	461a      	mov	r2, r3
 8009840:	f7f9 fda0 	bl	8003384 <_lseek>
 8009844:	1c43      	adds	r3, r0, #1
 8009846:	d102      	bne.n	800984e <_lseek_r+0x1e>
 8009848:	682b      	ldr	r3, [r5, #0]
 800984a:	b103      	cbz	r3, 800984e <_lseek_r+0x1e>
 800984c:	6023      	str	r3, [r4, #0]
 800984e:	bd38      	pop	{r3, r4, r5, pc}
 8009850:	20001008 	.word	0x20001008

08009854 <_read_r>:
 8009854:	b538      	push	{r3, r4, r5, lr}
 8009856:	4d07      	ldr	r5, [pc, #28]	; (8009874 <_read_r+0x20>)
 8009858:	4604      	mov	r4, r0
 800985a:	4608      	mov	r0, r1
 800985c:	4611      	mov	r1, r2
 800985e:	2200      	movs	r2, #0
 8009860:	602a      	str	r2, [r5, #0]
 8009862:	461a      	mov	r2, r3
 8009864:	f7f9 fd4a 	bl	80032fc <_read>
 8009868:	1c43      	adds	r3, r0, #1
 800986a:	d102      	bne.n	8009872 <_read_r+0x1e>
 800986c:	682b      	ldr	r3, [r5, #0]
 800986e:	b103      	cbz	r3, 8009872 <_read_r+0x1e>
 8009870:	6023      	str	r3, [r4, #0]
 8009872:	bd38      	pop	{r3, r4, r5, pc}
 8009874:	20001008 	.word	0x20001008

08009878 <_write_r>:
 8009878:	b538      	push	{r3, r4, r5, lr}
 800987a:	4d07      	ldr	r5, [pc, #28]	; (8009898 <_write_r+0x20>)
 800987c:	4604      	mov	r4, r0
 800987e:	4608      	mov	r0, r1
 8009880:	4611      	mov	r1, r2
 8009882:	2200      	movs	r2, #0
 8009884:	602a      	str	r2, [r5, #0]
 8009886:	461a      	mov	r2, r3
 8009888:	f7f7 fd64 	bl	8001354 <_write>
 800988c:	1c43      	adds	r3, r0, #1
 800988e:	d102      	bne.n	8009896 <_write_r+0x1e>
 8009890:	682b      	ldr	r3, [r5, #0]
 8009892:	b103      	cbz	r3, 8009896 <_write_r+0x1e>
 8009894:	6023      	str	r3, [r4, #0]
 8009896:	bd38      	pop	{r3, r4, r5, pc}
 8009898:	20001008 	.word	0x20001008

0800989c <__errno>:
 800989c:	4b01      	ldr	r3, [pc, #4]	; (80098a4 <__errno+0x8>)
 800989e:	6818      	ldr	r0, [r3, #0]
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	2000006c 	.word	0x2000006c

080098a8 <__libc_init_array>:
 80098a8:	b570      	push	{r4, r5, r6, lr}
 80098aa:	4d0d      	ldr	r5, [pc, #52]	; (80098e0 <__libc_init_array+0x38>)
 80098ac:	4c0d      	ldr	r4, [pc, #52]	; (80098e4 <__libc_init_array+0x3c>)
 80098ae:	1b64      	subs	r4, r4, r5
 80098b0:	10a4      	asrs	r4, r4, #2
 80098b2:	2600      	movs	r6, #0
 80098b4:	42a6      	cmp	r6, r4
 80098b6:	d109      	bne.n	80098cc <__libc_init_array+0x24>
 80098b8:	4d0b      	ldr	r5, [pc, #44]	; (80098e8 <__libc_init_array+0x40>)
 80098ba:	4c0c      	ldr	r4, [pc, #48]	; (80098ec <__libc_init_array+0x44>)
 80098bc:	f002 f896 	bl	800b9ec <_init>
 80098c0:	1b64      	subs	r4, r4, r5
 80098c2:	10a4      	asrs	r4, r4, #2
 80098c4:	2600      	movs	r6, #0
 80098c6:	42a6      	cmp	r6, r4
 80098c8:	d105      	bne.n	80098d6 <__libc_init_array+0x2e>
 80098ca:	bd70      	pop	{r4, r5, r6, pc}
 80098cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80098d0:	4798      	blx	r3
 80098d2:	3601      	adds	r6, #1
 80098d4:	e7ee      	b.n	80098b4 <__libc_init_array+0xc>
 80098d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80098da:	4798      	blx	r3
 80098dc:	3601      	adds	r6, #1
 80098de:	e7f2      	b.n	80098c6 <__libc_init_array+0x1e>
 80098e0:	0800bdcc 	.word	0x0800bdcc
 80098e4:	0800bdcc 	.word	0x0800bdcc
 80098e8:	0800bdcc 	.word	0x0800bdcc
 80098ec:	0800bdd0 	.word	0x0800bdd0

080098f0 <__retarget_lock_init_recursive>:
 80098f0:	4770      	bx	lr

080098f2 <__retarget_lock_acquire_recursive>:
 80098f2:	4770      	bx	lr

080098f4 <__retarget_lock_release_recursive>:
 80098f4:	4770      	bx	lr

080098f6 <quorem>:
 80098f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098fa:	6903      	ldr	r3, [r0, #16]
 80098fc:	690c      	ldr	r4, [r1, #16]
 80098fe:	42a3      	cmp	r3, r4
 8009900:	4607      	mov	r7, r0
 8009902:	db7e      	blt.n	8009a02 <quorem+0x10c>
 8009904:	3c01      	subs	r4, #1
 8009906:	f101 0814 	add.w	r8, r1, #20
 800990a:	f100 0514 	add.w	r5, r0, #20
 800990e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009912:	9301      	str	r3, [sp, #4]
 8009914:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009918:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800991c:	3301      	adds	r3, #1
 800991e:	429a      	cmp	r2, r3
 8009920:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009924:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009928:	fbb2 f6f3 	udiv	r6, r2, r3
 800992c:	d331      	bcc.n	8009992 <quorem+0x9c>
 800992e:	f04f 0e00 	mov.w	lr, #0
 8009932:	4640      	mov	r0, r8
 8009934:	46ac      	mov	ip, r5
 8009936:	46f2      	mov	sl, lr
 8009938:	f850 2b04 	ldr.w	r2, [r0], #4
 800993c:	b293      	uxth	r3, r2
 800993e:	fb06 e303 	mla	r3, r6, r3, lr
 8009942:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009946:	0c1a      	lsrs	r2, r3, #16
 8009948:	b29b      	uxth	r3, r3
 800994a:	ebaa 0303 	sub.w	r3, sl, r3
 800994e:	f8dc a000 	ldr.w	sl, [ip]
 8009952:	fa13 f38a 	uxtah	r3, r3, sl
 8009956:	fb06 220e 	mla	r2, r6, lr, r2
 800995a:	9300      	str	r3, [sp, #0]
 800995c:	9b00      	ldr	r3, [sp, #0]
 800995e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009962:	b292      	uxth	r2, r2
 8009964:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009968:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800996c:	f8bd 3000 	ldrh.w	r3, [sp]
 8009970:	4581      	cmp	r9, r0
 8009972:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009976:	f84c 3b04 	str.w	r3, [ip], #4
 800997a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800997e:	d2db      	bcs.n	8009938 <quorem+0x42>
 8009980:	f855 300b 	ldr.w	r3, [r5, fp]
 8009984:	b92b      	cbnz	r3, 8009992 <quorem+0x9c>
 8009986:	9b01      	ldr	r3, [sp, #4]
 8009988:	3b04      	subs	r3, #4
 800998a:	429d      	cmp	r5, r3
 800998c:	461a      	mov	r2, r3
 800998e:	d32c      	bcc.n	80099ea <quorem+0xf4>
 8009990:	613c      	str	r4, [r7, #16]
 8009992:	4638      	mov	r0, r7
 8009994:	f001 f9a6 	bl	800ace4 <__mcmp>
 8009998:	2800      	cmp	r0, #0
 800999a:	db22      	blt.n	80099e2 <quorem+0xec>
 800999c:	3601      	adds	r6, #1
 800999e:	4629      	mov	r1, r5
 80099a0:	2000      	movs	r0, #0
 80099a2:	f858 2b04 	ldr.w	r2, [r8], #4
 80099a6:	f8d1 c000 	ldr.w	ip, [r1]
 80099aa:	b293      	uxth	r3, r2
 80099ac:	1ac3      	subs	r3, r0, r3
 80099ae:	0c12      	lsrs	r2, r2, #16
 80099b0:	fa13 f38c 	uxtah	r3, r3, ip
 80099b4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80099b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80099bc:	b29b      	uxth	r3, r3
 80099be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80099c2:	45c1      	cmp	r9, r8
 80099c4:	f841 3b04 	str.w	r3, [r1], #4
 80099c8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80099cc:	d2e9      	bcs.n	80099a2 <quorem+0xac>
 80099ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80099d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80099d6:	b922      	cbnz	r2, 80099e2 <quorem+0xec>
 80099d8:	3b04      	subs	r3, #4
 80099da:	429d      	cmp	r5, r3
 80099dc:	461a      	mov	r2, r3
 80099de:	d30a      	bcc.n	80099f6 <quorem+0x100>
 80099e0:	613c      	str	r4, [r7, #16]
 80099e2:	4630      	mov	r0, r6
 80099e4:	b003      	add	sp, #12
 80099e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099ea:	6812      	ldr	r2, [r2, #0]
 80099ec:	3b04      	subs	r3, #4
 80099ee:	2a00      	cmp	r2, #0
 80099f0:	d1ce      	bne.n	8009990 <quorem+0x9a>
 80099f2:	3c01      	subs	r4, #1
 80099f4:	e7c9      	b.n	800998a <quorem+0x94>
 80099f6:	6812      	ldr	r2, [r2, #0]
 80099f8:	3b04      	subs	r3, #4
 80099fa:	2a00      	cmp	r2, #0
 80099fc:	d1f0      	bne.n	80099e0 <quorem+0xea>
 80099fe:	3c01      	subs	r4, #1
 8009a00:	e7eb      	b.n	80099da <quorem+0xe4>
 8009a02:	2000      	movs	r0, #0
 8009a04:	e7ee      	b.n	80099e4 <quorem+0xee>
	...

08009a08 <_dtoa_r>:
 8009a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a0c:	ed2d 8b04 	vpush	{d8-d9}
 8009a10:	69c5      	ldr	r5, [r0, #28]
 8009a12:	b093      	sub	sp, #76	; 0x4c
 8009a14:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009a18:	ec57 6b10 	vmov	r6, r7, d0
 8009a1c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009a20:	9107      	str	r1, [sp, #28]
 8009a22:	4604      	mov	r4, r0
 8009a24:	920a      	str	r2, [sp, #40]	; 0x28
 8009a26:	930d      	str	r3, [sp, #52]	; 0x34
 8009a28:	b975      	cbnz	r5, 8009a48 <_dtoa_r+0x40>
 8009a2a:	2010      	movs	r0, #16
 8009a2c:	f000 fe2a 	bl	800a684 <malloc>
 8009a30:	4602      	mov	r2, r0
 8009a32:	61e0      	str	r0, [r4, #28]
 8009a34:	b920      	cbnz	r0, 8009a40 <_dtoa_r+0x38>
 8009a36:	4bae      	ldr	r3, [pc, #696]	; (8009cf0 <_dtoa_r+0x2e8>)
 8009a38:	21ef      	movs	r1, #239	; 0xef
 8009a3a:	48ae      	ldr	r0, [pc, #696]	; (8009cf4 <_dtoa_r+0x2ec>)
 8009a3c:	f001 fe6a 	bl	800b714 <__assert_func>
 8009a40:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009a44:	6005      	str	r5, [r0, #0]
 8009a46:	60c5      	str	r5, [r0, #12]
 8009a48:	69e3      	ldr	r3, [r4, #28]
 8009a4a:	6819      	ldr	r1, [r3, #0]
 8009a4c:	b151      	cbz	r1, 8009a64 <_dtoa_r+0x5c>
 8009a4e:	685a      	ldr	r2, [r3, #4]
 8009a50:	604a      	str	r2, [r1, #4]
 8009a52:	2301      	movs	r3, #1
 8009a54:	4093      	lsls	r3, r2
 8009a56:	608b      	str	r3, [r1, #8]
 8009a58:	4620      	mov	r0, r4
 8009a5a:	f000 ff07 	bl	800a86c <_Bfree>
 8009a5e:	69e3      	ldr	r3, [r4, #28]
 8009a60:	2200      	movs	r2, #0
 8009a62:	601a      	str	r2, [r3, #0]
 8009a64:	1e3b      	subs	r3, r7, #0
 8009a66:	bfbb      	ittet	lt
 8009a68:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009a6c:	9303      	strlt	r3, [sp, #12]
 8009a6e:	2300      	movge	r3, #0
 8009a70:	2201      	movlt	r2, #1
 8009a72:	bfac      	ite	ge
 8009a74:	f8c8 3000 	strge.w	r3, [r8]
 8009a78:	f8c8 2000 	strlt.w	r2, [r8]
 8009a7c:	4b9e      	ldr	r3, [pc, #632]	; (8009cf8 <_dtoa_r+0x2f0>)
 8009a7e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009a82:	ea33 0308 	bics.w	r3, r3, r8
 8009a86:	d11b      	bne.n	8009ac0 <_dtoa_r+0xb8>
 8009a88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a8a:	f242 730f 	movw	r3, #9999	; 0x270f
 8009a8e:	6013      	str	r3, [r2, #0]
 8009a90:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009a94:	4333      	orrs	r3, r6
 8009a96:	f000 8593 	beq.w	800a5c0 <_dtoa_r+0xbb8>
 8009a9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a9c:	b963      	cbnz	r3, 8009ab8 <_dtoa_r+0xb0>
 8009a9e:	4b97      	ldr	r3, [pc, #604]	; (8009cfc <_dtoa_r+0x2f4>)
 8009aa0:	e027      	b.n	8009af2 <_dtoa_r+0xea>
 8009aa2:	4b97      	ldr	r3, [pc, #604]	; (8009d00 <_dtoa_r+0x2f8>)
 8009aa4:	9300      	str	r3, [sp, #0]
 8009aa6:	3308      	adds	r3, #8
 8009aa8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009aaa:	6013      	str	r3, [r2, #0]
 8009aac:	9800      	ldr	r0, [sp, #0]
 8009aae:	b013      	add	sp, #76	; 0x4c
 8009ab0:	ecbd 8b04 	vpop	{d8-d9}
 8009ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ab8:	4b90      	ldr	r3, [pc, #576]	; (8009cfc <_dtoa_r+0x2f4>)
 8009aba:	9300      	str	r3, [sp, #0]
 8009abc:	3303      	adds	r3, #3
 8009abe:	e7f3      	b.n	8009aa8 <_dtoa_r+0xa0>
 8009ac0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	ec51 0b17 	vmov	r0, r1, d7
 8009aca:	eeb0 8a47 	vmov.f32	s16, s14
 8009ace:	eef0 8a67 	vmov.f32	s17, s15
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	f7f7 f808 	bl	8000ae8 <__aeabi_dcmpeq>
 8009ad8:	4681      	mov	r9, r0
 8009ada:	b160      	cbz	r0, 8009af6 <_dtoa_r+0xee>
 8009adc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009ade:	2301      	movs	r3, #1
 8009ae0:	6013      	str	r3, [r2, #0]
 8009ae2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	f000 8568 	beq.w	800a5ba <_dtoa_r+0xbb2>
 8009aea:	4b86      	ldr	r3, [pc, #536]	; (8009d04 <_dtoa_r+0x2fc>)
 8009aec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009aee:	6013      	str	r3, [r2, #0]
 8009af0:	3b01      	subs	r3, #1
 8009af2:	9300      	str	r3, [sp, #0]
 8009af4:	e7da      	b.n	8009aac <_dtoa_r+0xa4>
 8009af6:	aa10      	add	r2, sp, #64	; 0x40
 8009af8:	a911      	add	r1, sp, #68	; 0x44
 8009afa:	4620      	mov	r0, r4
 8009afc:	eeb0 0a48 	vmov.f32	s0, s16
 8009b00:	eef0 0a68 	vmov.f32	s1, s17
 8009b04:	f001 f994 	bl	800ae30 <__d2b>
 8009b08:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009b0c:	4682      	mov	sl, r0
 8009b0e:	2d00      	cmp	r5, #0
 8009b10:	d07f      	beq.n	8009c12 <_dtoa_r+0x20a>
 8009b12:	ee18 3a90 	vmov	r3, s17
 8009b16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b1a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009b1e:	ec51 0b18 	vmov	r0, r1, d8
 8009b22:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009b26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009b2a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009b2e:	4619      	mov	r1, r3
 8009b30:	2200      	movs	r2, #0
 8009b32:	4b75      	ldr	r3, [pc, #468]	; (8009d08 <_dtoa_r+0x300>)
 8009b34:	f7f6 fbb8 	bl	80002a8 <__aeabi_dsub>
 8009b38:	a367      	add	r3, pc, #412	; (adr r3, 8009cd8 <_dtoa_r+0x2d0>)
 8009b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b3e:	f7f6 fd6b 	bl	8000618 <__aeabi_dmul>
 8009b42:	a367      	add	r3, pc, #412	; (adr r3, 8009ce0 <_dtoa_r+0x2d8>)
 8009b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b48:	f7f6 fbb0 	bl	80002ac <__adddf3>
 8009b4c:	4606      	mov	r6, r0
 8009b4e:	4628      	mov	r0, r5
 8009b50:	460f      	mov	r7, r1
 8009b52:	f7f6 fcf7 	bl	8000544 <__aeabi_i2d>
 8009b56:	a364      	add	r3, pc, #400	; (adr r3, 8009ce8 <_dtoa_r+0x2e0>)
 8009b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b5c:	f7f6 fd5c 	bl	8000618 <__aeabi_dmul>
 8009b60:	4602      	mov	r2, r0
 8009b62:	460b      	mov	r3, r1
 8009b64:	4630      	mov	r0, r6
 8009b66:	4639      	mov	r1, r7
 8009b68:	f7f6 fba0 	bl	80002ac <__adddf3>
 8009b6c:	4606      	mov	r6, r0
 8009b6e:	460f      	mov	r7, r1
 8009b70:	f7f7 f802 	bl	8000b78 <__aeabi_d2iz>
 8009b74:	2200      	movs	r2, #0
 8009b76:	4683      	mov	fp, r0
 8009b78:	2300      	movs	r3, #0
 8009b7a:	4630      	mov	r0, r6
 8009b7c:	4639      	mov	r1, r7
 8009b7e:	f7f6 ffbd 	bl	8000afc <__aeabi_dcmplt>
 8009b82:	b148      	cbz	r0, 8009b98 <_dtoa_r+0x190>
 8009b84:	4658      	mov	r0, fp
 8009b86:	f7f6 fcdd 	bl	8000544 <__aeabi_i2d>
 8009b8a:	4632      	mov	r2, r6
 8009b8c:	463b      	mov	r3, r7
 8009b8e:	f7f6 ffab 	bl	8000ae8 <__aeabi_dcmpeq>
 8009b92:	b908      	cbnz	r0, 8009b98 <_dtoa_r+0x190>
 8009b94:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009b98:	f1bb 0f16 	cmp.w	fp, #22
 8009b9c:	d857      	bhi.n	8009c4e <_dtoa_r+0x246>
 8009b9e:	4b5b      	ldr	r3, [pc, #364]	; (8009d0c <_dtoa_r+0x304>)
 8009ba0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba8:	ec51 0b18 	vmov	r0, r1, d8
 8009bac:	f7f6 ffa6 	bl	8000afc <__aeabi_dcmplt>
 8009bb0:	2800      	cmp	r0, #0
 8009bb2:	d04e      	beq.n	8009c52 <_dtoa_r+0x24a>
 8009bb4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009bb8:	2300      	movs	r3, #0
 8009bba:	930c      	str	r3, [sp, #48]	; 0x30
 8009bbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009bbe:	1b5b      	subs	r3, r3, r5
 8009bc0:	1e5a      	subs	r2, r3, #1
 8009bc2:	bf45      	ittet	mi
 8009bc4:	f1c3 0301 	rsbmi	r3, r3, #1
 8009bc8:	9305      	strmi	r3, [sp, #20]
 8009bca:	2300      	movpl	r3, #0
 8009bcc:	2300      	movmi	r3, #0
 8009bce:	9206      	str	r2, [sp, #24]
 8009bd0:	bf54      	ite	pl
 8009bd2:	9305      	strpl	r3, [sp, #20]
 8009bd4:	9306      	strmi	r3, [sp, #24]
 8009bd6:	f1bb 0f00 	cmp.w	fp, #0
 8009bda:	db3c      	blt.n	8009c56 <_dtoa_r+0x24e>
 8009bdc:	9b06      	ldr	r3, [sp, #24]
 8009bde:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009be2:	445b      	add	r3, fp
 8009be4:	9306      	str	r3, [sp, #24]
 8009be6:	2300      	movs	r3, #0
 8009be8:	9308      	str	r3, [sp, #32]
 8009bea:	9b07      	ldr	r3, [sp, #28]
 8009bec:	2b09      	cmp	r3, #9
 8009bee:	d868      	bhi.n	8009cc2 <_dtoa_r+0x2ba>
 8009bf0:	2b05      	cmp	r3, #5
 8009bf2:	bfc4      	itt	gt
 8009bf4:	3b04      	subgt	r3, #4
 8009bf6:	9307      	strgt	r3, [sp, #28]
 8009bf8:	9b07      	ldr	r3, [sp, #28]
 8009bfa:	f1a3 0302 	sub.w	r3, r3, #2
 8009bfe:	bfcc      	ite	gt
 8009c00:	2500      	movgt	r5, #0
 8009c02:	2501      	movle	r5, #1
 8009c04:	2b03      	cmp	r3, #3
 8009c06:	f200 8085 	bhi.w	8009d14 <_dtoa_r+0x30c>
 8009c0a:	e8df f003 	tbb	[pc, r3]
 8009c0e:	3b2e      	.short	0x3b2e
 8009c10:	5839      	.short	0x5839
 8009c12:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009c16:	441d      	add	r5, r3
 8009c18:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009c1c:	2b20      	cmp	r3, #32
 8009c1e:	bfc1      	itttt	gt
 8009c20:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009c24:	fa08 f803 	lslgt.w	r8, r8, r3
 8009c28:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009c2c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009c30:	bfd6      	itet	le
 8009c32:	f1c3 0320 	rsble	r3, r3, #32
 8009c36:	ea48 0003 	orrgt.w	r0, r8, r3
 8009c3a:	fa06 f003 	lslle.w	r0, r6, r3
 8009c3e:	f7f6 fc71 	bl	8000524 <__aeabi_ui2d>
 8009c42:	2201      	movs	r2, #1
 8009c44:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009c48:	3d01      	subs	r5, #1
 8009c4a:	920e      	str	r2, [sp, #56]	; 0x38
 8009c4c:	e76f      	b.n	8009b2e <_dtoa_r+0x126>
 8009c4e:	2301      	movs	r3, #1
 8009c50:	e7b3      	b.n	8009bba <_dtoa_r+0x1b2>
 8009c52:	900c      	str	r0, [sp, #48]	; 0x30
 8009c54:	e7b2      	b.n	8009bbc <_dtoa_r+0x1b4>
 8009c56:	9b05      	ldr	r3, [sp, #20]
 8009c58:	eba3 030b 	sub.w	r3, r3, fp
 8009c5c:	9305      	str	r3, [sp, #20]
 8009c5e:	f1cb 0300 	rsb	r3, fp, #0
 8009c62:	9308      	str	r3, [sp, #32]
 8009c64:	2300      	movs	r3, #0
 8009c66:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c68:	e7bf      	b.n	8009bea <_dtoa_r+0x1e2>
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8009c6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	dc52      	bgt.n	8009d1a <_dtoa_r+0x312>
 8009c74:	2301      	movs	r3, #1
 8009c76:	9301      	str	r3, [sp, #4]
 8009c78:	9304      	str	r3, [sp, #16]
 8009c7a:	461a      	mov	r2, r3
 8009c7c:	920a      	str	r2, [sp, #40]	; 0x28
 8009c7e:	e00b      	b.n	8009c98 <_dtoa_r+0x290>
 8009c80:	2301      	movs	r3, #1
 8009c82:	e7f3      	b.n	8009c6c <_dtoa_r+0x264>
 8009c84:	2300      	movs	r3, #0
 8009c86:	9309      	str	r3, [sp, #36]	; 0x24
 8009c88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c8a:	445b      	add	r3, fp
 8009c8c:	9301      	str	r3, [sp, #4]
 8009c8e:	3301      	adds	r3, #1
 8009c90:	2b01      	cmp	r3, #1
 8009c92:	9304      	str	r3, [sp, #16]
 8009c94:	bfb8      	it	lt
 8009c96:	2301      	movlt	r3, #1
 8009c98:	69e0      	ldr	r0, [r4, #28]
 8009c9a:	2100      	movs	r1, #0
 8009c9c:	2204      	movs	r2, #4
 8009c9e:	f102 0614 	add.w	r6, r2, #20
 8009ca2:	429e      	cmp	r6, r3
 8009ca4:	d93d      	bls.n	8009d22 <_dtoa_r+0x31a>
 8009ca6:	6041      	str	r1, [r0, #4]
 8009ca8:	4620      	mov	r0, r4
 8009caa:	f000 fd9f 	bl	800a7ec <_Balloc>
 8009cae:	9000      	str	r0, [sp, #0]
 8009cb0:	2800      	cmp	r0, #0
 8009cb2:	d139      	bne.n	8009d28 <_dtoa_r+0x320>
 8009cb4:	4b16      	ldr	r3, [pc, #88]	; (8009d10 <_dtoa_r+0x308>)
 8009cb6:	4602      	mov	r2, r0
 8009cb8:	f240 11af 	movw	r1, #431	; 0x1af
 8009cbc:	e6bd      	b.n	8009a3a <_dtoa_r+0x32>
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	e7e1      	b.n	8009c86 <_dtoa_r+0x27e>
 8009cc2:	2501      	movs	r5, #1
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	9307      	str	r3, [sp, #28]
 8009cc8:	9509      	str	r5, [sp, #36]	; 0x24
 8009cca:	f04f 33ff 	mov.w	r3, #4294967295
 8009cce:	9301      	str	r3, [sp, #4]
 8009cd0:	9304      	str	r3, [sp, #16]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	2312      	movs	r3, #18
 8009cd6:	e7d1      	b.n	8009c7c <_dtoa_r+0x274>
 8009cd8:	636f4361 	.word	0x636f4361
 8009cdc:	3fd287a7 	.word	0x3fd287a7
 8009ce0:	8b60c8b3 	.word	0x8b60c8b3
 8009ce4:	3fc68a28 	.word	0x3fc68a28
 8009ce8:	509f79fb 	.word	0x509f79fb
 8009cec:	3fd34413 	.word	0x3fd34413
 8009cf0:	0800ba91 	.word	0x0800ba91
 8009cf4:	0800baa8 	.word	0x0800baa8
 8009cf8:	7ff00000 	.word	0x7ff00000
 8009cfc:	0800ba8d 	.word	0x0800ba8d
 8009d00:	0800ba84 	.word	0x0800ba84
 8009d04:	0800ba61 	.word	0x0800ba61
 8009d08:	3ff80000 	.word	0x3ff80000
 8009d0c:	0800bb98 	.word	0x0800bb98
 8009d10:	0800bb00 	.word	0x0800bb00
 8009d14:	2301      	movs	r3, #1
 8009d16:	9309      	str	r3, [sp, #36]	; 0x24
 8009d18:	e7d7      	b.n	8009cca <_dtoa_r+0x2c2>
 8009d1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d1c:	9301      	str	r3, [sp, #4]
 8009d1e:	9304      	str	r3, [sp, #16]
 8009d20:	e7ba      	b.n	8009c98 <_dtoa_r+0x290>
 8009d22:	3101      	adds	r1, #1
 8009d24:	0052      	lsls	r2, r2, #1
 8009d26:	e7ba      	b.n	8009c9e <_dtoa_r+0x296>
 8009d28:	69e3      	ldr	r3, [r4, #28]
 8009d2a:	9a00      	ldr	r2, [sp, #0]
 8009d2c:	601a      	str	r2, [r3, #0]
 8009d2e:	9b04      	ldr	r3, [sp, #16]
 8009d30:	2b0e      	cmp	r3, #14
 8009d32:	f200 80a8 	bhi.w	8009e86 <_dtoa_r+0x47e>
 8009d36:	2d00      	cmp	r5, #0
 8009d38:	f000 80a5 	beq.w	8009e86 <_dtoa_r+0x47e>
 8009d3c:	f1bb 0f00 	cmp.w	fp, #0
 8009d40:	dd38      	ble.n	8009db4 <_dtoa_r+0x3ac>
 8009d42:	4bc0      	ldr	r3, [pc, #768]	; (800a044 <_dtoa_r+0x63c>)
 8009d44:	f00b 020f 	and.w	r2, fp, #15
 8009d48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d4c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009d50:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009d54:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009d58:	d019      	beq.n	8009d8e <_dtoa_r+0x386>
 8009d5a:	4bbb      	ldr	r3, [pc, #748]	; (800a048 <_dtoa_r+0x640>)
 8009d5c:	ec51 0b18 	vmov	r0, r1, d8
 8009d60:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009d64:	f7f6 fd82 	bl	800086c <__aeabi_ddiv>
 8009d68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d6c:	f008 080f 	and.w	r8, r8, #15
 8009d70:	2503      	movs	r5, #3
 8009d72:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a048 <_dtoa_r+0x640>
 8009d76:	f1b8 0f00 	cmp.w	r8, #0
 8009d7a:	d10a      	bne.n	8009d92 <_dtoa_r+0x38a>
 8009d7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d80:	4632      	mov	r2, r6
 8009d82:	463b      	mov	r3, r7
 8009d84:	f7f6 fd72 	bl	800086c <__aeabi_ddiv>
 8009d88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d8c:	e02b      	b.n	8009de6 <_dtoa_r+0x3de>
 8009d8e:	2502      	movs	r5, #2
 8009d90:	e7ef      	b.n	8009d72 <_dtoa_r+0x36a>
 8009d92:	f018 0f01 	tst.w	r8, #1
 8009d96:	d008      	beq.n	8009daa <_dtoa_r+0x3a2>
 8009d98:	4630      	mov	r0, r6
 8009d9a:	4639      	mov	r1, r7
 8009d9c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009da0:	f7f6 fc3a 	bl	8000618 <__aeabi_dmul>
 8009da4:	3501      	adds	r5, #1
 8009da6:	4606      	mov	r6, r0
 8009da8:	460f      	mov	r7, r1
 8009daa:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009dae:	f109 0908 	add.w	r9, r9, #8
 8009db2:	e7e0      	b.n	8009d76 <_dtoa_r+0x36e>
 8009db4:	f000 809f 	beq.w	8009ef6 <_dtoa_r+0x4ee>
 8009db8:	f1cb 0600 	rsb	r6, fp, #0
 8009dbc:	4ba1      	ldr	r3, [pc, #644]	; (800a044 <_dtoa_r+0x63c>)
 8009dbe:	4fa2      	ldr	r7, [pc, #648]	; (800a048 <_dtoa_r+0x640>)
 8009dc0:	f006 020f 	and.w	r2, r6, #15
 8009dc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dcc:	ec51 0b18 	vmov	r0, r1, d8
 8009dd0:	f7f6 fc22 	bl	8000618 <__aeabi_dmul>
 8009dd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009dd8:	1136      	asrs	r6, r6, #4
 8009dda:	2300      	movs	r3, #0
 8009ddc:	2502      	movs	r5, #2
 8009dde:	2e00      	cmp	r6, #0
 8009de0:	d17e      	bne.n	8009ee0 <_dtoa_r+0x4d8>
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d1d0      	bne.n	8009d88 <_dtoa_r+0x380>
 8009de6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009de8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	f000 8084 	beq.w	8009efa <_dtoa_r+0x4f2>
 8009df2:	4b96      	ldr	r3, [pc, #600]	; (800a04c <_dtoa_r+0x644>)
 8009df4:	2200      	movs	r2, #0
 8009df6:	4640      	mov	r0, r8
 8009df8:	4649      	mov	r1, r9
 8009dfa:	f7f6 fe7f 	bl	8000afc <__aeabi_dcmplt>
 8009dfe:	2800      	cmp	r0, #0
 8009e00:	d07b      	beq.n	8009efa <_dtoa_r+0x4f2>
 8009e02:	9b04      	ldr	r3, [sp, #16]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d078      	beq.n	8009efa <_dtoa_r+0x4f2>
 8009e08:	9b01      	ldr	r3, [sp, #4]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	dd39      	ble.n	8009e82 <_dtoa_r+0x47a>
 8009e0e:	4b90      	ldr	r3, [pc, #576]	; (800a050 <_dtoa_r+0x648>)
 8009e10:	2200      	movs	r2, #0
 8009e12:	4640      	mov	r0, r8
 8009e14:	4649      	mov	r1, r9
 8009e16:	f7f6 fbff 	bl	8000618 <__aeabi_dmul>
 8009e1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e1e:	9e01      	ldr	r6, [sp, #4]
 8009e20:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009e24:	3501      	adds	r5, #1
 8009e26:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009e2a:	4628      	mov	r0, r5
 8009e2c:	f7f6 fb8a 	bl	8000544 <__aeabi_i2d>
 8009e30:	4642      	mov	r2, r8
 8009e32:	464b      	mov	r3, r9
 8009e34:	f7f6 fbf0 	bl	8000618 <__aeabi_dmul>
 8009e38:	4b86      	ldr	r3, [pc, #536]	; (800a054 <_dtoa_r+0x64c>)
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	f7f6 fa36 	bl	80002ac <__adddf3>
 8009e40:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009e44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e48:	9303      	str	r3, [sp, #12]
 8009e4a:	2e00      	cmp	r6, #0
 8009e4c:	d158      	bne.n	8009f00 <_dtoa_r+0x4f8>
 8009e4e:	4b82      	ldr	r3, [pc, #520]	; (800a058 <_dtoa_r+0x650>)
 8009e50:	2200      	movs	r2, #0
 8009e52:	4640      	mov	r0, r8
 8009e54:	4649      	mov	r1, r9
 8009e56:	f7f6 fa27 	bl	80002a8 <__aeabi_dsub>
 8009e5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e5e:	4680      	mov	r8, r0
 8009e60:	4689      	mov	r9, r1
 8009e62:	f7f6 fe69 	bl	8000b38 <__aeabi_dcmpgt>
 8009e66:	2800      	cmp	r0, #0
 8009e68:	f040 8296 	bne.w	800a398 <_dtoa_r+0x990>
 8009e6c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009e70:	4640      	mov	r0, r8
 8009e72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e76:	4649      	mov	r1, r9
 8009e78:	f7f6 fe40 	bl	8000afc <__aeabi_dcmplt>
 8009e7c:	2800      	cmp	r0, #0
 8009e7e:	f040 8289 	bne.w	800a394 <_dtoa_r+0x98c>
 8009e82:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009e86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	f2c0 814e 	blt.w	800a12a <_dtoa_r+0x722>
 8009e8e:	f1bb 0f0e 	cmp.w	fp, #14
 8009e92:	f300 814a 	bgt.w	800a12a <_dtoa_r+0x722>
 8009e96:	4b6b      	ldr	r3, [pc, #428]	; (800a044 <_dtoa_r+0x63c>)
 8009e98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009e9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009ea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	f280 80dc 	bge.w	800a060 <_dtoa_r+0x658>
 8009ea8:	9b04      	ldr	r3, [sp, #16]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	f300 80d8 	bgt.w	800a060 <_dtoa_r+0x658>
 8009eb0:	f040 826f 	bne.w	800a392 <_dtoa_r+0x98a>
 8009eb4:	4b68      	ldr	r3, [pc, #416]	; (800a058 <_dtoa_r+0x650>)
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	4640      	mov	r0, r8
 8009eba:	4649      	mov	r1, r9
 8009ebc:	f7f6 fbac 	bl	8000618 <__aeabi_dmul>
 8009ec0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ec4:	f7f6 fe2e 	bl	8000b24 <__aeabi_dcmpge>
 8009ec8:	9e04      	ldr	r6, [sp, #16]
 8009eca:	4637      	mov	r7, r6
 8009ecc:	2800      	cmp	r0, #0
 8009ece:	f040 8245 	bne.w	800a35c <_dtoa_r+0x954>
 8009ed2:	9d00      	ldr	r5, [sp, #0]
 8009ed4:	2331      	movs	r3, #49	; 0x31
 8009ed6:	f805 3b01 	strb.w	r3, [r5], #1
 8009eda:	f10b 0b01 	add.w	fp, fp, #1
 8009ede:	e241      	b.n	800a364 <_dtoa_r+0x95c>
 8009ee0:	07f2      	lsls	r2, r6, #31
 8009ee2:	d505      	bpl.n	8009ef0 <_dtoa_r+0x4e8>
 8009ee4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ee8:	f7f6 fb96 	bl	8000618 <__aeabi_dmul>
 8009eec:	3501      	adds	r5, #1
 8009eee:	2301      	movs	r3, #1
 8009ef0:	1076      	asrs	r6, r6, #1
 8009ef2:	3708      	adds	r7, #8
 8009ef4:	e773      	b.n	8009dde <_dtoa_r+0x3d6>
 8009ef6:	2502      	movs	r5, #2
 8009ef8:	e775      	b.n	8009de6 <_dtoa_r+0x3de>
 8009efa:	9e04      	ldr	r6, [sp, #16]
 8009efc:	465f      	mov	r7, fp
 8009efe:	e792      	b.n	8009e26 <_dtoa_r+0x41e>
 8009f00:	9900      	ldr	r1, [sp, #0]
 8009f02:	4b50      	ldr	r3, [pc, #320]	; (800a044 <_dtoa_r+0x63c>)
 8009f04:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009f08:	4431      	add	r1, r6
 8009f0a:	9102      	str	r1, [sp, #8]
 8009f0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f0e:	eeb0 9a47 	vmov.f32	s18, s14
 8009f12:	eef0 9a67 	vmov.f32	s19, s15
 8009f16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009f1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009f1e:	2900      	cmp	r1, #0
 8009f20:	d044      	beq.n	8009fac <_dtoa_r+0x5a4>
 8009f22:	494e      	ldr	r1, [pc, #312]	; (800a05c <_dtoa_r+0x654>)
 8009f24:	2000      	movs	r0, #0
 8009f26:	f7f6 fca1 	bl	800086c <__aeabi_ddiv>
 8009f2a:	ec53 2b19 	vmov	r2, r3, d9
 8009f2e:	f7f6 f9bb 	bl	80002a8 <__aeabi_dsub>
 8009f32:	9d00      	ldr	r5, [sp, #0]
 8009f34:	ec41 0b19 	vmov	d9, r0, r1
 8009f38:	4649      	mov	r1, r9
 8009f3a:	4640      	mov	r0, r8
 8009f3c:	f7f6 fe1c 	bl	8000b78 <__aeabi_d2iz>
 8009f40:	4606      	mov	r6, r0
 8009f42:	f7f6 faff 	bl	8000544 <__aeabi_i2d>
 8009f46:	4602      	mov	r2, r0
 8009f48:	460b      	mov	r3, r1
 8009f4a:	4640      	mov	r0, r8
 8009f4c:	4649      	mov	r1, r9
 8009f4e:	f7f6 f9ab 	bl	80002a8 <__aeabi_dsub>
 8009f52:	3630      	adds	r6, #48	; 0x30
 8009f54:	f805 6b01 	strb.w	r6, [r5], #1
 8009f58:	ec53 2b19 	vmov	r2, r3, d9
 8009f5c:	4680      	mov	r8, r0
 8009f5e:	4689      	mov	r9, r1
 8009f60:	f7f6 fdcc 	bl	8000afc <__aeabi_dcmplt>
 8009f64:	2800      	cmp	r0, #0
 8009f66:	d164      	bne.n	800a032 <_dtoa_r+0x62a>
 8009f68:	4642      	mov	r2, r8
 8009f6a:	464b      	mov	r3, r9
 8009f6c:	4937      	ldr	r1, [pc, #220]	; (800a04c <_dtoa_r+0x644>)
 8009f6e:	2000      	movs	r0, #0
 8009f70:	f7f6 f99a 	bl	80002a8 <__aeabi_dsub>
 8009f74:	ec53 2b19 	vmov	r2, r3, d9
 8009f78:	f7f6 fdc0 	bl	8000afc <__aeabi_dcmplt>
 8009f7c:	2800      	cmp	r0, #0
 8009f7e:	f040 80b6 	bne.w	800a0ee <_dtoa_r+0x6e6>
 8009f82:	9b02      	ldr	r3, [sp, #8]
 8009f84:	429d      	cmp	r5, r3
 8009f86:	f43f af7c 	beq.w	8009e82 <_dtoa_r+0x47a>
 8009f8a:	4b31      	ldr	r3, [pc, #196]	; (800a050 <_dtoa_r+0x648>)
 8009f8c:	ec51 0b19 	vmov	r0, r1, d9
 8009f90:	2200      	movs	r2, #0
 8009f92:	f7f6 fb41 	bl	8000618 <__aeabi_dmul>
 8009f96:	4b2e      	ldr	r3, [pc, #184]	; (800a050 <_dtoa_r+0x648>)
 8009f98:	ec41 0b19 	vmov	d9, r0, r1
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	4640      	mov	r0, r8
 8009fa0:	4649      	mov	r1, r9
 8009fa2:	f7f6 fb39 	bl	8000618 <__aeabi_dmul>
 8009fa6:	4680      	mov	r8, r0
 8009fa8:	4689      	mov	r9, r1
 8009faa:	e7c5      	b.n	8009f38 <_dtoa_r+0x530>
 8009fac:	ec51 0b17 	vmov	r0, r1, d7
 8009fb0:	f7f6 fb32 	bl	8000618 <__aeabi_dmul>
 8009fb4:	9b02      	ldr	r3, [sp, #8]
 8009fb6:	9d00      	ldr	r5, [sp, #0]
 8009fb8:	930f      	str	r3, [sp, #60]	; 0x3c
 8009fba:	ec41 0b19 	vmov	d9, r0, r1
 8009fbe:	4649      	mov	r1, r9
 8009fc0:	4640      	mov	r0, r8
 8009fc2:	f7f6 fdd9 	bl	8000b78 <__aeabi_d2iz>
 8009fc6:	4606      	mov	r6, r0
 8009fc8:	f7f6 fabc 	bl	8000544 <__aeabi_i2d>
 8009fcc:	3630      	adds	r6, #48	; 0x30
 8009fce:	4602      	mov	r2, r0
 8009fd0:	460b      	mov	r3, r1
 8009fd2:	4640      	mov	r0, r8
 8009fd4:	4649      	mov	r1, r9
 8009fd6:	f7f6 f967 	bl	80002a8 <__aeabi_dsub>
 8009fda:	f805 6b01 	strb.w	r6, [r5], #1
 8009fde:	9b02      	ldr	r3, [sp, #8]
 8009fe0:	429d      	cmp	r5, r3
 8009fe2:	4680      	mov	r8, r0
 8009fe4:	4689      	mov	r9, r1
 8009fe6:	f04f 0200 	mov.w	r2, #0
 8009fea:	d124      	bne.n	800a036 <_dtoa_r+0x62e>
 8009fec:	4b1b      	ldr	r3, [pc, #108]	; (800a05c <_dtoa_r+0x654>)
 8009fee:	ec51 0b19 	vmov	r0, r1, d9
 8009ff2:	f7f6 f95b 	bl	80002ac <__adddf3>
 8009ff6:	4602      	mov	r2, r0
 8009ff8:	460b      	mov	r3, r1
 8009ffa:	4640      	mov	r0, r8
 8009ffc:	4649      	mov	r1, r9
 8009ffe:	f7f6 fd9b 	bl	8000b38 <__aeabi_dcmpgt>
 800a002:	2800      	cmp	r0, #0
 800a004:	d173      	bne.n	800a0ee <_dtoa_r+0x6e6>
 800a006:	ec53 2b19 	vmov	r2, r3, d9
 800a00a:	4914      	ldr	r1, [pc, #80]	; (800a05c <_dtoa_r+0x654>)
 800a00c:	2000      	movs	r0, #0
 800a00e:	f7f6 f94b 	bl	80002a8 <__aeabi_dsub>
 800a012:	4602      	mov	r2, r0
 800a014:	460b      	mov	r3, r1
 800a016:	4640      	mov	r0, r8
 800a018:	4649      	mov	r1, r9
 800a01a:	f7f6 fd6f 	bl	8000afc <__aeabi_dcmplt>
 800a01e:	2800      	cmp	r0, #0
 800a020:	f43f af2f 	beq.w	8009e82 <_dtoa_r+0x47a>
 800a024:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a026:	1e6b      	subs	r3, r5, #1
 800a028:	930f      	str	r3, [sp, #60]	; 0x3c
 800a02a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a02e:	2b30      	cmp	r3, #48	; 0x30
 800a030:	d0f8      	beq.n	800a024 <_dtoa_r+0x61c>
 800a032:	46bb      	mov	fp, r7
 800a034:	e04a      	b.n	800a0cc <_dtoa_r+0x6c4>
 800a036:	4b06      	ldr	r3, [pc, #24]	; (800a050 <_dtoa_r+0x648>)
 800a038:	f7f6 faee 	bl	8000618 <__aeabi_dmul>
 800a03c:	4680      	mov	r8, r0
 800a03e:	4689      	mov	r9, r1
 800a040:	e7bd      	b.n	8009fbe <_dtoa_r+0x5b6>
 800a042:	bf00      	nop
 800a044:	0800bb98 	.word	0x0800bb98
 800a048:	0800bb70 	.word	0x0800bb70
 800a04c:	3ff00000 	.word	0x3ff00000
 800a050:	40240000 	.word	0x40240000
 800a054:	401c0000 	.word	0x401c0000
 800a058:	40140000 	.word	0x40140000
 800a05c:	3fe00000 	.word	0x3fe00000
 800a060:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a064:	9d00      	ldr	r5, [sp, #0]
 800a066:	4642      	mov	r2, r8
 800a068:	464b      	mov	r3, r9
 800a06a:	4630      	mov	r0, r6
 800a06c:	4639      	mov	r1, r7
 800a06e:	f7f6 fbfd 	bl	800086c <__aeabi_ddiv>
 800a072:	f7f6 fd81 	bl	8000b78 <__aeabi_d2iz>
 800a076:	9001      	str	r0, [sp, #4]
 800a078:	f7f6 fa64 	bl	8000544 <__aeabi_i2d>
 800a07c:	4642      	mov	r2, r8
 800a07e:	464b      	mov	r3, r9
 800a080:	f7f6 faca 	bl	8000618 <__aeabi_dmul>
 800a084:	4602      	mov	r2, r0
 800a086:	460b      	mov	r3, r1
 800a088:	4630      	mov	r0, r6
 800a08a:	4639      	mov	r1, r7
 800a08c:	f7f6 f90c 	bl	80002a8 <__aeabi_dsub>
 800a090:	9e01      	ldr	r6, [sp, #4]
 800a092:	9f04      	ldr	r7, [sp, #16]
 800a094:	3630      	adds	r6, #48	; 0x30
 800a096:	f805 6b01 	strb.w	r6, [r5], #1
 800a09a:	9e00      	ldr	r6, [sp, #0]
 800a09c:	1bae      	subs	r6, r5, r6
 800a09e:	42b7      	cmp	r7, r6
 800a0a0:	4602      	mov	r2, r0
 800a0a2:	460b      	mov	r3, r1
 800a0a4:	d134      	bne.n	800a110 <_dtoa_r+0x708>
 800a0a6:	f7f6 f901 	bl	80002ac <__adddf3>
 800a0aa:	4642      	mov	r2, r8
 800a0ac:	464b      	mov	r3, r9
 800a0ae:	4606      	mov	r6, r0
 800a0b0:	460f      	mov	r7, r1
 800a0b2:	f7f6 fd41 	bl	8000b38 <__aeabi_dcmpgt>
 800a0b6:	b9c8      	cbnz	r0, 800a0ec <_dtoa_r+0x6e4>
 800a0b8:	4642      	mov	r2, r8
 800a0ba:	464b      	mov	r3, r9
 800a0bc:	4630      	mov	r0, r6
 800a0be:	4639      	mov	r1, r7
 800a0c0:	f7f6 fd12 	bl	8000ae8 <__aeabi_dcmpeq>
 800a0c4:	b110      	cbz	r0, 800a0cc <_dtoa_r+0x6c4>
 800a0c6:	9b01      	ldr	r3, [sp, #4]
 800a0c8:	07db      	lsls	r3, r3, #31
 800a0ca:	d40f      	bmi.n	800a0ec <_dtoa_r+0x6e4>
 800a0cc:	4651      	mov	r1, sl
 800a0ce:	4620      	mov	r0, r4
 800a0d0:	f000 fbcc 	bl	800a86c <_Bfree>
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a0d8:	702b      	strb	r3, [r5, #0]
 800a0da:	f10b 0301 	add.w	r3, fp, #1
 800a0de:	6013      	str	r3, [r2, #0]
 800a0e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	f43f ace2 	beq.w	8009aac <_dtoa_r+0xa4>
 800a0e8:	601d      	str	r5, [r3, #0]
 800a0ea:	e4df      	b.n	8009aac <_dtoa_r+0xa4>
 800a0ec:	465f      	mov	r7, fp
 800a0ee:	462b      	mov	r3, r5
 800a0f0:	461d      	mov	r5, r3
 800a0f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a0f6:	2a39      	cmp	r2, #57	; 0x39
 800a0f8:	d106      	bne.n	800a108 <_dtoa_r+0x700>
 800a0fa:	9a00      	ldr	r2, [sp, #0]
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	d1f7      	bne.n	800a0f0 <_dtoa_r+0x6e8>
 800a100:	9900      	ldr	r1, [sp, #0]
 800a102:	2230      	movs	r2, #48	; 0x30
 800a104:	3701      	adds	r7, #1
 800a106:	700a      	strb	r2, [r1, #0]
 800a108:	781a      	ldrb	r2, [r3, #0]
 800a10a:	3201      	adds	r2, #1
 800a10c:	701a      	strb	r2, [r3, #0]
 800a10e:	e790      	b.n	800a032 <_dtoa_r+0x62a>
 800a110:	4ba3      	ldr	r3, [pc, #652]	; (800a3a0 <_dtoa_r+0x998>)
 800a112:	2200      	movs	r2, #0
 800a114:	f7f6 fa80 	bl	8000618 <__aeabi_dmul>
 800a118:	2200      	movs	r2, #0
 800a11a:	2300      	movs	r3, #0
 800a11c:	4606      	mov	r6, r0
 800a11e:	460f      	mov	r7, r1
 800a120:	f7f6 fce2 	bl	8000ae8 <__aeabi_dcmpeq>
 800a124:	2800      	cmp	r0, #0
 800a126:	d09e      	beq.n	800a066 <_dtoa_r+0x65e>
 800a128:	e7d0      	b.n	800a0cc <_dtoa_r+0x6c4>
 800a12a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a12c:	2a00      	cmp	r2, #0
 800a12e:	f000 80ca 	beq.w	800a2c6 <_dtoa_r+0x8be>
 800a132:	9a07      	ldr	r2, [sp, #28]
 800a134:	2a01      	cmp	r2, #1
 800a136:	f300 80ad 	bgt.w	800a294 <_dtoa_r+0x88c>
 800a13a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a13c:	2a00      	cmp	r2, #0
 800a13e:	f000 80a5 	beq.w	800a28c <_dtoa_r+0x884>
 800a142:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a146:	9e08      	ldr	r6, [sp, #32]
 800a148:	9d05      	ldr	r5, [sp, #20]
 800a14a:	9a05      	ldr	r2, [sp, #20]
 800a14c:	441a      	add	r2, r3
 800a14e:	9205      	str	r2, [sp, #20]
 800a150:	9a06      	ldr	r2, [sp, #24]
 800a152:	2101      	movs	r1, #1
 800a154:	441a      	add	r2, r3
 800a156:	4620      	mov	r0, r4
 800a158:	9206      	str	r2, [sp, #24]
 800a15a:	f000 fc3d 	bl	800a9d8 <__i2b>
 800a15e:	4607      	mov	r7, r0
 800a160:	b165      	cbz	r5, 800a17c <_dtoa_r+0x774>
 800a162:	9b06      	ldr	r3, [sp, #24]
 800a164:	2b00      	cmp	r3, #0
 800a166:	dd09      	ble.n	800a17c <_dtoa_r+0x774>
 800a168:	42ab      	cmp	r3, r5
 800a16a:	9a05      	ldr	r2, [sp, #20]
 800a16c:	bfa8      	it	ge
 800a16e:	462b      	movge	r3, r5
 800a170:	1ad2      	subs	r2, r2, r3
 800a172:	9205      	str	r2, [sp, #20]
 800a174:	9a06      	ldr	r2, [sp, #24]
 800a176:	1aed      	subs	r5, r5, r3
 800a178:	1ad3      	subs	r3, r2, r3
 800a17a:	9306      	str	r3, [sp, #24]
 800a17c:	9b08      	ldr	r3, [sp, #32]
 800a17e:	b1f3      	cbz	r3, 800a1be <_dtoa_r+0x7b6>
 800a180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a182:	2b00      	cmp	r3, #0
 800a184:	f000 80a3 	beq.w	800a2ce <_dtoa_r+0x8c6>
 800a188:	2e00      	cmp	r6, #0
 800a18a:	dd10      	ble.n	800a1ae <_dtoa_r+0x7a6>
 800a18c:	4639      	mov	r1, r7
 800a18e:	4632      	mov	r2, r6
 800a190:	4620      	mov	r0, r4
 800a192:	f000 fce1 	bl	800ab58 <__pow5mult>
 800a196:	4652      	mov	r2, sl
 800a198:	4601      	mov	r1, r0
 800a19a:	4607      	mov	r7, r0
 800a19c:	4620      	mov	r0, r4
 800a19e:	f000 fc31 	bl	800aa04 <__multiply>
 800a1a2:	4651      	mov	r1, sl
 800a1a4:	4680      	mov	r8, r0
 800a1a6:	4620      	mov	r0, r4
 800a1a8:	f000 fb60 	bl	800a86c <_Bfree>
 800a1ac:	46c2      	mov	sl, r8
 800a1ae:	9b08      	ldr	r3, [sp, #32]
 800a1b0:	1b9a      	subs	r2, r3, r6
 800a1b2:	d004      	beq.n	800a1be <_dtoa_r+0x7b6>
 800a1b4:	4651      	mov	r1, sl
 800a1b6:	4620      	mov	r0, r4
 800a1b8:	f000 fcce 	bl	800ab58 <__pow5mult>
 800a1bc:	4682      	mov	sl, r0
 800a1be:	2101      	movs	r1, #1
 800a1c0:	4620      	mov	r0, r4
 800a1c2:	f000 fc09 	bl	800a9d8 <__i2b>
 800a1c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	4606      	mov	r6, r0
 800a1cc:	f340 8081 	ble.w	800a2d2 <_dtoa_r+0x8ca>
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	4601      	mov	r1, r0
 800a1d4:	4620      	mov	r0, r4
 800a1d6:	f000 fcbf 	bl	800ab58 <__pow5mult>
 800a1da:	9b07      	ldr	r3, [sp, #28]
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	4606      	mov	r6, r0
 800a1e0:	dd7a      	ble.n	800a2d8 <_dtoa_r+0x8d0>
 800a1e2:	f04f 0800 	mov.w	r8, #0
 800a1e6:	6933      	ldr	r3, [r6, #16]
 800a1e8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a1ec:	6918      	ldr	r0, [r3, #16]
 800a1ee:	f000 fba5 	bl	800a93c <__hi0bits>
 800a1f2:	f1c0 0020 	rsb	r0, r0, #32
 800a1f6:	9b06      	ldr	r3, [sp, #24]
 800a1f8:	4418      	add	r0, r3
 800a1fa:	f010 001f 	ands.w	r0, r0, #31
 800a1fe:	f000 8094 	beq.w	800a32a <_dtoa_r+0x922>
 800a202:	f1c0 0320 	rsb	r3, r0, #32
 800a206:	2b04      	cmp	r3, #4
 800a208:	f340 8085 	ble.w	800a316 <_dtoa_r+0x90e>
 800a20c:	9b05      	ldr	r3, [sp, #20]
 800a20e:	f1c0 001c 	rsb	r0, r0, #28
 800a212:	4403      	add	r3, r0
 800a214:	9305      	str	r3, [sp, #20]
 800a216:	9b06      	ldr	r3, [sp, #24]
 800a218:	4403      	add	r3, r0
 800a21a:	4405      	add	r5, r0
 800a21c:	9306      	str	r3, [sp, #24]
 800a21e:	9b05      	ldr	r3, [sp, #20]
 800a220:	2b00      	cmp	r3, #0
 800a222:	dd05      	ble.n	800a230 <_dtoa_r+0x828>
 800a224:	4651      	mov	r1, sl
 800a226:	461a      	mov	r2, r3
 800a228:	4620      	mov	r0, r4
 800a22a:	f000 fcef 	bl	800ac0c <__lshift>
 800a22e:	4682      	mov	sl, r0
 800a230:	9b06      	ldr	r3, [sp, #24]
 800a232:	2b00      	cmp	r3, #0
 800a234:	dd05      	ble.n	800a242 <_dtoa_r+0x83a>
 800a236:	4631      	mov	r1, r6
 800a238:	461a      	mov	r2, r3
 800a23a:	4620      	mov	r0, r4
 800a23c:	f000 fce6 	bl	800ac0c <__lshift>
 800a240:	4606      	mov	r6, r0
 800a242:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a244:	2b00      	cmp	r3, #0
 800a246:	d072      	beq.n	800a32e <_dtoa_r+0x926>
 800a248:	4631      	mov	r1, r6
 800a24a:	4650      	mov	r0, sl
 800a24c:	f000 fd4a 	bl	800ace4 <__mcmp>
 800a250:	2800      	cmp	r0, #0
 800a252:	da6c      	bge.n	800a32e <_dtoa_r+0x926>
 800a254:	2300      	movs	r3, #0
 800a256:	4651      	mov	r1, sl
 800a258:	220a      	movs	r2, #10
 800a25a:	4620      	mov	r0, r4
 800a25c:	f000 fb28 	bl	800a8b0 <__multadd>
 800a260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a262:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a266:	4682      	mov	sl, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	f000 81b0 	beq.w	800a5ce <_dtoa_r+0xbc6>
 800a26e:	2300      	movs	r3, #0
 800a270:	4639      	mov	r1, r7
 800a272:	220a      	movs	r2, #10
 800a274:	4620      	mov	r0, r4
 800a276:	f000 fb1b 	bl	800a8b0 <__multadd>
 800a27a:	9b01      	ldr	r3, [sp, #4]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	4607      	mov	r7, r0
 800a280:	f300 8096 	bgt.w	800a3b0 <_dtoa_r+0x9a8>
 800a284:	9b07      	ldr	r3, [sp, #28]
 800a286:	2b02      	cmp	r3, #2
 800a288:	dc59      	bgt.n	800a33e <_dtoa_r+0x936>
 800a28a:	e091      	b.n	800a3b0 <_dtoa_r+0x9a8>
 800a28c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a28e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a292:	e758      	b.n	800a146 <_dtoa_r+0x73e>
 800a294:	9b04      	ldr	r3, [sp, #16]
 800a296:	1e5e      	subs	r6, r3, #1
 800a298:	9b08      	ldr	r3, [sp, #32]
 800a29a:	42b3      	cmp	r3, r6
 800a29c:	bfbf      	itttt	lt
 800a29e:	9b08      	ldrlt	r3, [sp, #32]
 800a2a0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a2a2:	9608      	strlt	r6, [sp, #32]
 800a2a4:	1af3      	sublt	r3, r6, r3
 800a2a6:	bfb4      	ite	lt
 800a2a8:	18d2      	addlt	r2, r2, r3
 800a2aa:	1b9e      	subge	r6, r3, r6
 800a2ac:	9b04      	ldr	r3, [sp, #16]
 800a2ae:	bfbc      	itt	lt
 800a2b0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a2b2:	2600      	movlt	r6, #0
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	bfb7      	itett	lt
 800a2b8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a2bc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a2c0:	1a9d      	sublt	r5, r3, r2
 800a2c2:	2300      	movlt	r3, #0
 800a2c4:	e741      	b.n	800a14a <_dtoa_r+0x742>
 800a2c6:	9e08      	ldr	r6, [sp, #32]
 800a2c8:	9d05      	ldr	r5, [sp, #20]
 800a2ca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a2cc:	e748      	b.n	800a160 <_dtoa_r+0x758>
 800a2ce:	9a08      	ldr	r2, [sp, #32]
 800a2d0:	e770      	b.n	800a1b4 <_dtoa_r+0x7ac>
 800a2d2:	9b07      	ldr	r3, [sp, #28]
 800a2d4:	2b01      	cmp	r3, #1
 800a2d6:	dc19      	bgt.n	800a30c <_dtoa_r+0x904>
 800a2d8:	9b02      	ldr	r3, [sp, #8]
 800a2da:	b9bb      	cbnz	r3, 800a30c <_dtoa_r+0x904>
 800a2dc:	9b03      	ldr	r3, [sp, #12]
 800a2de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a2e2:	b99b      	cbnz	r3, 800a30c <_dtoa_r+0x904>
 800a2e4:	9b03      	ldr	r3, [sp, #12]
 800a2e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a2ea:	0d1b      	lsrs	r3, r3, #20
 800a2ec:	051b      	lsls	r3, r3, #20
 800a2ee:	b183      	cbz	r3, 800a312 <_dtoa_r+0x90a>
 800a2f0:	9b05      	ldr	r3, [sp, #20]
 800a2f2:	3301      	adds	r3, #1
 800a2f4:	9305      	str	r3, [sp, #20]
 800a2f6:	9b06      	ldr	r3, [sp, #24]
 800a2f8:	3301      	adds	r3, #1
 800a2fa:	9306      	str	r3, [sp, #24]
 800a2fc:	f04f 0801 	mov.w	r8, #1
 800a300:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a302:	2b00      	cmp	r3, #0
 800a304:	f47f af6f 	bne.w	800a1e6 <_dtoa_r+0x7de>
 800a308:	2001      	movs	r0, #1
 800a30a:	e774      	b.n	800a1f6 <_dtoa_r+0x7ee>
 800a30c:	f04f 0800 	mov.w	r8, #0
 800a310:	e7f6      	b.n	800a300 <_dtoa_r+0x8f8>
 800a312:	4698      	mov	r8, r3
 800a314:	e7f4      	b.n	800a300 <_dtoa_r+0x8f8>
 800a316:	d082      	beq.n	800a21e <_dtoa_r+0x816>
 800a318:	9a05      	ldr	r2, [sp, #20]
 800a31a:	331c      	adds	r3, #28
 800a31c:	441a      	add	r2, r3
 800a31e:	9205      	str	r2, [sp, #20]
 800a320:	9a06      	ldr	r2, [sp, #24]
 800a322:	441a      	add	r2, r3
 800a324:	441d      	add	r5, r3
 800a326:	9206      	str	r2, [sp, #24]
 800a328:	e779      	b.n	800a21e <_dtoa_r+0x816>
 800a32a:	4603      	mov	r3, r0
 800a32c:	e7f4      	b.n	800a318 <_dtoa_r+0x910>
 800a32e:	9b04      	ldr	r3, [sp, #16]
 800a330:	2b00      	cmp	r3, #0
 800a332:	dc37      	bgt.n	800a3a4 <_dtoa_r+0x99c>
 800a334:	9b07      	ldr	r3, [sp, #28]
 800a336:	2b02      	cmp	r3, #2
 800a338:	dd34      	ble.n	800a3a4 <_dtoa_r+0x99c>
 800a33a:	9b04      	ldr	r3, [sp, #16]
 800a33c:	9301      	str	r3, [sp, #4]
 800a33e:	9b01      	ldr	r3, [sp, #4]
 800a340:	b963      	cbnz	r3, 800a35c <_dtoa_r+0x954>
 800a342:	4631      	mov	r1, r6
 800a344:	2205      	movs	r2, #5
 800a346:	4620      	mov	r0, r4
 800a348:	f000 fab2 	bl	800a8b0 <__multadd>
 800a34c:	4601      	mov	r1, r0
 800a34e:	4606      	mov	r6, r0
 800a350:	4650      	mov	r0, sl
 800a352:	f000 fcc7 	bl	800ace4 <__mcmp>
 800a356:	2800      	cmp	r0, #0
 800a358:	f73f adbb 	bgt.w	8009ed2 <_dtoa_r+0x4ca>
 800a35c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a35e:	9d00      	ldr	r5, [sp, #0]
 800a360:	ea6f 0b03 	mvn.w	fp, r3
 800a364:	f04f 0800 	mov.w	r8, #0
 800a368:	4631      	mov	r1, r6
 800a36a:	4620      	mov	r0, r4
 800a36c:	f000 fa7e 	bl	800a86c <_Bfree>
 800a370:	2f00      	cmp	r7, #0
 800a372:	f43f aeab 	beq.w	800a0cc <_dtoa_r+0x6c4>
 800a376:	f1b8 0f00 	cmp.w	r8, #0
 800a37a:	d005      	beq.n	800a388 <_dtoa_r+0x980>
 800a37c:	45b8      	cmp	r8, r7
 800a37e:	d003      	beq.n	800a388 <_dtoa_r+0x980>
 800a380:	4641      	mov	r1, r8
 800a382:	4620      	mov	r0, r4
 800a384:	f000 fa72 	bl	800a86c <_Bfree>
 800a388:	4639      	mov	r1, r7
 800a38a:	4620      	mov	r0, r4
 800a38c:	f000 fa6e 	bl	800a86c <_Bfree>
 800a390:	e69c      	b.n	800a0cc <_dtoa_r+0x6c4>
 800a392:	2600      	movs	r6, #0
 800a394:	4637      	mov	r7, r6
 800a396:	e7e1      	b.n	800a35c <_dtoa_r+0x954>
 800a398:	46bb      	mov	fp, r7
 800a39a:	4637      	mov	r7, r6
 800a39c:	e599      	b.n	8009ed2 <_dtoa_r+0x4ca>
 800a39e:	bf00      	nop
 800a3a0:	40240000 	.word	0x40240000
 800a3a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	f000 80c8 	beq.w	800a53c <_dtoa_r+0xb34>
 800a3ac:	9b04      	ldr	r3, [sp, #16]
 800a3ae:	9301      	str	r3, [sp, #4]
 800a3b0:	2d00      	cmp	r5, #0
 800a3b2:	dd05      	ble.n	800a3c0 <_dtoa_r+0x9b8>
 800a3b4:	4639      	mov	r1, r7
 800a3b6:	462a      	mov	r2, r5
 800a3b8:	4620      	mov	r0, r4
 800a3ba:	f000 fc27 	bl	800ac0c <__lshift>
 800a3be:	4607      	mov	r7, r0
 800a3c0:	f1b8 0f00 	cmp.w	r8, #0
 800a3c4:	d05b      	beq.n	800a47e <_dtoa_r+0xa76>
 800a3c6:	6879      	ldr	r1, [r7, #4]
 800a3c8:	4620      	mov	r0, r4
 800a3ca:	f000 fa0f 	bl	800a7ec <_Balloc>
 800a3ce:	4605      	mov	r5, r0
 800a3d0:	b928      	cbnz	r0, 800a3de <_dtoa_r+0x9d6>
 800a3d2:	4b83      	ldr	r3, [pc, #524]	; (800a5e0 <_dtoa_r+0xbd8>)
 800a3d4:	4602      	mov	r2, r0
 800a3d6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a3da:	f7ff bb2e 	b.w	8009a3a <_dtoa_r+0x32>
 800a3de:	693a      	ldr	r2, [r7, #16]
 800a3e0:	3202      	adds	r2, #2
 800a3e2:	0092      	lsls	r2, r2, #2
 800a3e4:	f107 010c 	add.w	r1, r7, #12
 800a3e8:	300c      	adds	r0, #12
 800a3ea:	f001 f985 	bl	800b6f8 <memcpy>
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	4629      	mov	r1, r5
 800a3f2:	4620      	mov	r0, r4
 800a3f4:	f000 fc0a 	bl	800ac0c <__lshift>
 800a3f8:	9b00      	ldr	r3, [sp, #0]
 800a3fa:	3301      	adds	r3, #1
 800a3fc:	9304      	str	r3, [sp, #16]
 800a3fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a402:	4413      	add	r3, r2
 800a404:	9308      	str	r3, [sp, #32]
 800a406:	9b02      	ldr	r3, [sp, #8]
 800a408:	f003 0301 	and.w	r3, r3, #1
 800a40c:	46b8      	mov	r8, r7
 800a40e:	9306      	str	r3, [sp, #24]
 800a410:	4607      	mov	r7, r0
 800a412:	9b04      	ldr	r3, [sp, #16]
 800a414:	4631      	mov	r1, r6
 800a416:	3b01      	subs	r3, #1
 800a418:	4650      	mov	r0, sl
 800a41a:	9301      	str	r3, [sp, #4]
 800a41c:	f7ff fa6b 	bl	80098f6 <quorem>
 800a420:	4641      	mov	r1, r8
 800a422:	9002      	str	r0, [sp, #8]
 800a424:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a428:	4650      	mov	r0, sl
 800a42a:	f000 fc5b 	bl	800ace4 <__mcmp>
 800a42e:	463a      	mov	r2, r7
 800a430:	9005      	str	r0, [sp, #20]
 800a432:	4631      	mov	r1, r6
 800a434:	4620      	mov	r0, r4
 800a436:	f000 fc71 	bl	800ad1c <__mdiff>
 800a43a:	68c2      	ldr	r2, [r0, #12]
 800a43c:	4605      	mov	r5, r0
 800a43e:	bb02      	cbnz	r2, 800a482 <_dtoa_r+0xa7a>
 800a440:	4601      	mov	r1, r0
 800a442:	4650      	mov	r0, sl
 800a444:	f000 fc4e 	bl	800ace4 <__mcmp>
 800a448:	4602      	mov	r2, r0
 800a44a:	4629      	mov	r1, r5
 800a44c:	4620      	mov	r0, r4
 800a44e:	9209      	str	r2, [sp, #36]	; 0x24
 800a450:	f000 fa0c 	bl	800a86c <_Bfree>
 800a454:	9b07      	ldr	r3, [sp, #28]
 800a456:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a458:	9d04      	ldr	r5, [sp, #16]
 800a45a:	ea43 0102 	orr.w	r1, r3, r2
 800a45e:	9b06      	ldr	r3, [sp, #24]
 800a460:	4319      	orrs	r1, r3
 800a462:	d110      	bne.n	800a486 <_dtoa_r+0xa7e>
 800a464:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a468:	d029      	beq.n	800a4be <_dtoa_r+0xab6>
 800a46a:	9b05      	ldr	r3, [sp, #20]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	dd02      	ble.n	800a476 <_dtoa_r+0xa6e>
 800a470:	9b02      	ldr	r3, [sp, #8]
 800a472:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a476:	9b01      	ldr	r3, [sp, #4]
 800a478:	f883 9000 	strb.w	r9, [r3]
 800a47c:	e774      	b.n	800a368 <_dtoa_r+0x960>
 800a47e:	4638      	mov	r0, r7
 800a480:	e7ba      	b.n	800a3f8 <_dtoa_r+0x9f0>
 800a482:	2201      	movs	r2, #1
 800a484:	e7e1      	b.n	800a44a <_dtoa_r+0xa42>
 800a486:	9b05      	ldr	r3, [sp, #20]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	db04      	blt.n	800a496 <_dtoa_r+0xa8e>
 800a48c:	9907      	ldr	r1, [sp, #28]
 800a48e:	430b      	orrs	r3, r1
 800a490:	9906      	ldr	r1, [sp, #24]
 800a492:	430b      	orrs	r3, r1
 800a494:	d120      	bne.n	800a4d8 <_dtoa_r+0xad0>
 800a496:	2a00      	cmp	r2, #0
 800a498:	dded      	ble.n	800a476 <_dtoa_r+0xa6e>
 800a49a:	4651      	mov	r1, sl
 800a49c:	2201      	movs	r2, #1
 800a49e:	4620      	mov	r0, r4
 800a4a0:	f000 fbb4 	bl	800ac0c <__lshift>
 800a4a4:	4631      	mov	r1, r6
 800a4a6:	4682      	mov	sl, r0
 800a4a8:	f000 fc1c 	bl	800ace4 <__mcmp>
 800a4ac:	2800      	cmp	r0, #0
 800a4ae:	dc03      	bgt.n	800a4b8 <_dtoa_r+0xab0>
 800a4b0:	d1e1      	bne.n	800a476 <_dtoa_r+0xa6e>
 800a4b2:	f019 0f01 	tst.w	r9, #1
 800a4b6:	d0de      	beq.n	800a476 <_dtoa_r+0xa6e>
 800a4b8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a4bc:	d1d8      	bne.n	800a470 <_dtoa_r+0xa68>
 800a4be:	9a01      	ldr	r2, [sp, #4]
 800a4c0:	2339      	movs	r3, #57	; 0x39
 800a4c2:	7013      	strb	r3, [r2, #0]
 800a4c4:	462b      	mov	r3, r5
 800a4c6:	461d      	mov	r5, r3
 800a4c8:	3b01      	subs	r3, #1
 800a4ca:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a4ce:	2a39      	cmp	r2, #57	; 0x39
 800a4d0:	d06c      	beq.n	800a5ac <_dtoa_r+0xba4>
 800a4d2:	3201      	adds	r2, #1
 800a4d4:	701a      	strb	r2, [r3, #0]
 800a4d6:	e747      	b.n	800a368 <_dtoa_r+0x960>
 800a4d8:	2a00      	cmp	r2, #0
 800a4da:	dd07      	ble.n	800a4ec <_dtoa_r+0xae4>
 800a4dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a4e0:	d0ed      	beq.n	800a4be <_dtoa_r+0xab6>
 800a4e2:	9a01      	ldr	r2, [sp, #4]
 800a4e4:	f109 0301 	add.w	r3, r9, #1
 800a4e8:	7013      	strb	r3, [r2, #0]
 800a4ea:	e73d      	b.n	800a368 <_dtoa_r+0x960>
 800a4ec:	9b04      	ldr	r3, [sp, #16]
 800a4ee:	9a08      	ldr	r2, [sp, #32]
 800a4f0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d043      	beq.n	800a580 <_dtoa_r+0xb78>
 800a4f8:	4651      	mov	r1, sl
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	220a      	movs	r2, #10
 800a4fe:	4620      	mov	r0, r4
 800a500:	f000 f9d6 	bl	800a8b0 <__multadd>
 800a504:	45b8      	cmp	r8, r7
 800a506:	4682      	mov	sl, r0
 800a508:	f04f 0300 	mov.w	r3, #0
 800a50c:	f04f 020a 	mov.w	r2, #10
 800a510:	4641      	mov	r1, r8
 800a512:	4620      	mov	r0, r4
 800a514:	d107      	bne.n	800a526 <_dtoa_r+0xb1e>
 800a516:	f000 f9cb 	bl	800a8b0 <__multadd>
 800a51a:	4680      	mov	r8, r0
 800a51c:	4607      	mov	r7, r0
 800a51e:	9b04      	ldr	r3, [sp, #16]
 800a520:	3301      	adds	r3, #1
 800a522:	9304      	str	r3, [sp, #16]
 800a524:	e775      	b.n	800a412 <_dtoa_r+0xa0a>
 800a526:	f000 f9c3 	bl	800a8b0 <__multadd>
 800a52a:	4639      	mov	r1, r7
 800a52c:	4680      	mov	r8, r0
 800a52e:	2300      	movs	r3, #0
 800a530:	220a      	movs	r2, #10
 800a532:	4620      	mov	r0, r4
 800a534:	f000 f9bc 	bl	800a8b0 <__multadd>
 800a538:	4607      	mov	r7, r0
 800a53a:	e7f0      	b.n	800a51e <_dtoa_r+0xb16>
 800a53c:	9b04      	ldr	r3, [sp, #16]
 800a53e:	9301      	str	r3, [sp, #4]
 800a540:	9d00      	ldr	r5, [sp, #0]
 800a542:	4631      	mov	r1, r6
 800a544:	4650      	mov	r0, sl
 800a546:	f7ff f9d6 	bl	80098f6 <quorem>
 800a54a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a54e:	9b00      	ldr	r3, [sp, #0]
 800a550:	f805 9b01 	strb.w	r9, [r5], #1
 800a554:	1aea      	subs	r2, r5, r3
 800a556:	9b01      	ldr	r3, [sp, #4]
 800a558:	4293      	cmp	r3, r2
 800a55a:	dd07      	ble.n	800a56c <_dtoa_r+0xb64>
 800a55c:	4651      	mov	r1, sl
 800a55e:	2300      	movs	r3, #0
 800a560:	220a      	movs	r2, #10
 800a562:	4620      	mov	r0, r4
 800a564:	f000 f9a4 	bl	800a8b0 <__multadd>
 800a568:	4682      	mov	sl, r0
 800a56a:	e7ea      	b.n	800a542 <_dtoa_r+0xb3a>
 800a56c:	9b01      	ldr	r3, [sp, #4]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	bfc8      	it	gt
 800a572:	461d      	movgt	r5, r3
 800a574:	9b00      	ldr	r3, [sp, #0]
 800a576:	bfd8      	it	le
 800a578:	2501      	movle	r5, #1
 800a57a:	441d      	add	r5, r3
 800a57c:	f04f 0800 	mov.w	r8, #0
 800a580:	4651      	mov	r1, sl
 800a582:	2201      	movs	r2, #1
 800a584:	4620      	mov	r0, r4
 800a586:	f000 fb41 	bl	800ac0c <__lshift>
 800a58a:	4631      	mov	r1, r6
 800a58c:	4682      	mov	sl, r0
 800a58e:	f000 fba9 	bl	800ace4 <__mcmp>
 800a592:	2800      	cmp	r0, #0
 800a594:	dc96      	bgt.n	800a4c4 <_dtoa_r+0xabc>
 800a596:	d102      	bne.n	800a59e <_dtoa_r+0xb96>
 800a598:	f019 0f01 	tst.w	r9, #1
 800a59c:	d192      	bne.n	800a4c4 <_dtoa_r+0xabc>
 800a59e:	462b      	mov	r3, r5
 800a5a0:	461d      	mov	r5, r3
 800a5a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a5a6:	2a30      	cmp	r2, #48	; 0x30
 800a5a8:	d0fa      	beq.n	800a5a0 <_dtoa_r+0xb98>
 800a5aa:	e6dd      	b.n	800a368 <_dtoa_r+0x960>
 800a5ac:	9a00      	ldr	r2, [sp, #0]
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	d189      	bne.n	800a4c6 <_dtoa_r+0xabe>
 800a5b2:	f10b 0b01 	add.w	fp, fp, #1
 800a5b6:	2331      	movs	r3, #49	; 0x31
 800a5b8:	e796      	b.n	800a4e8 <_dtoa_r+0xae0>
 800a5ba:	4b0a      	ldr	r3, [pc, #40]	; (800a5e4 <_dtoa_r+0xbdc>)
 800a5bc:	f7ff ba99 	b.w	8009af2 <_dtoa_r+0xea>
 800a5c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	f47f aa6d 	bne.w	8009aa2 <_dtoa_r+0x9a>
 800a5c8:	4b07      	ldr	r3, [pc, #28]	; (800a5e8 <_dtoa_r+0xbe0>)
 800a5ca:	f7ff ba92 	b.w	8009af2 <_dtoa_r+0xea>
 800a5ce:	9b01      	ldr	r3, [sp, #4]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	dcb5      	bgt.n	800a540 <_dtoa_r+0xb38>
 800a5d4:	9b07      	ldr	r3, [sp, #28]
 800a5d6:	2b02      	cmp	r3, #2
 800a5d8:	f73f aeb1 	bgt.w	800a33e <_dtoa_r+0x936>
 800a5dc:	e7b0      	b.n	800a540 <_dtoa_r+0xb38>
 800a5de:	bf00      	nop
 800a5e0:	0800bb00 	.word	0x0800bb00
 800a5e4:	0800ba60 	.word	0x0800ba60
 800a5e8:	0800ba84 	.word	0x0800ba84

0800a5ec <_free_r>:
 800a5ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a5ee:	2900      	cmp	r1, #0
 800a5f0:	d044      	beq.n	800a67c <_free_r+0x90>
 800a5f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5f6:	9001      	str	r0, [sp, #4]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	f1a1 0404 	sub.w	r4, r1, #4
 800a5fe:	bfb8      	it	lt
 800a600:	18e4      	addlt	r4, r4, r3
 800a602:	f000 f8e7 	bl	800a7d4 <__malloc_lock>
 800a606:	4a1e      	ldr	r2, [pc, #120]	; (800a680 <_free_r+0x94>)
 800a608:	9801      	ldr	r0, [sp, #4]
 800a60a:	6813      	ldr	r3, [r2, #0]
 800a60c:	b933      	cbnz	r3, 800a61c <_free_r+0x30>
 800a60e:	6063      	str	r3, [r4, #4]
 800a610:	6014      	str	r4, [r2, #0]
 800a612:	b003      	add	sp, #12
 800a614:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a618:	f000 b8e2 	b.w	800a7e0 <__malloc_unlock>
 800a61c:	42a3      	cmp	r3, r4
 800a61e:	d908      	bls.n	800a632 <_free_r+0x46>
 800a620:	6825      	ldr	r5, [r4, #0]
 800a622:	1961      	adds	r1, r4, r5
 800a624:	428b      	cmp	r3, r1
 800a626:	bf01      	itttt	eq
 800a628:	6819      	ldreq	r1, [r3, #0]
 800a62a:	685b      	ldreq	r3, [r3, #4]
 800a62c:	1949      	addeq	r1, r1, r5
 800a62e:	6021      	streq	r1, [r4, #0]
 800a630:	e7ed      	b.n	800a60e <_free_r+0x22>
 800a632:	461a      	mov	r2, r3
 800a634:	685b      	ldr	r3, [r3, #4]
 800a636:	b10b      	cbz	r3, 800a63c <_free_r+0x50>
 800a638:	42a3      	cmp	r3, r4
 800a63a:	d9fa      	bls.n	800a632 <_free_r+0x46>
 800a63c:	6811      	ldr	r1, [r2, #0]
 800a63e:	1855      	adds	r5, r2, r1
 800a640:	42a5      	cmp	r5, r4
 800a642:	d10b      	bne.n	800a65c <_free_r+0x70>
 800a644:	6824      	ldr	r4, [r4, #0]
 800a646:	4421      	add	r1, r4
 800a648:	1854      	adds	r4, r2, r1
 800a64a:	42a3      	cmp	r3, r4
 800a64c:	6011      	str	r1, [r2, #0]
 800a64e:	d1e0      	bne.n	800a612 <_free_r+0x26>
 800a650:	681c      	ldr	r4, [r3, #0]
 800a652:	685b      	ldr	r3, [r3, #4]
 800a654:	6053      	str	r3, [r2, #4]
 800a656:	440c      	add	r4, r1
 800a658:	6014      	str	r4, [r2, #0]
 800a65a:	e7da      	b.n	800a612 <_free_r+0x26>
 800a65c:	d902      	bls.n	800a664 <_free_r+0x78>
 800a65e:	230c      	movs	r3, #12
 800a660:	6003      	str	r3, [r0, #0]
 800a662:	e7d6      	b.n	800a612 <_free_r+0x26>
 800a664:	6825      	ldr	r5, [r4, #0]
 800a666:	1961      	adds	r1, r4, r5
 800a668:	428b      	cmp	r3, r1
 800a66a:	bf04      	itt	eq
 800a66c:	6819      	ldreq	r1, [r3, #0]
 800a66e:	685b      	ldreq	r3, [r3, #4]
 800a670:	6063      	str	r3, [r4, #4]
 800a672:	bf04      	itt	eq
 800a674:	1949      	addeq	r1, r1, r5
 800a676:	6021      	streq	r1, [r4, #0]
 800a678:	6054      	str	r4, [r2, #4]
 800a67a:	e7ca      	b.n	800a612 <_free_r+0x26>
 800a67c:	b003      	add	sp, #12
 800a67e:	bd30      	pop	{r4, r5, pc}
 800a680:	20001010 	.word	0x20001010

0800a684 <malloc>:
 800a684:	4b02      	ldr	r3, [pc, #8]	; (800a690 <malloc+0xc>)
 800a686:	4601      	mov	r1, r0
 800a688:	6818      	ldr	r0, [r3, #0]
 800a68a:	f000 b823 	b.w	800a6d4 <_malloc_r>
 800a68e:	bf00      	nop
 800a690:	2000006c 	.word	0x2000006c

0800a694 <sbrk_aligned>:
 800a694:	b570      	push	{r4, r5, r6, lr}
 800a696:	4e0e      	ldr	r6, [pc, #56]	; (800a6d0 <sbrk_aligned+0x3c>)
 800a698:	460c      	mov	r4, r1
 800a69a:	6831      	ldr	r1, [r6, #0]
 800a69c:	4605      	mov	r5, r0
 800a69e:	b911      	cbnz	r1, 800a6a6 <sbrk_aligned+0x12>
 800a6a0:	f001 f81a 	bl	800b6d8 <_sbrk_r>
 800a6a4:	6030      	str	r0, [r6, #0]
 800a6a6:	4621      	mov	r1, r4
 800a6a8:	4628      	mov	r0, r5
 800a6aa:	f001 f815 	bl	800b6d8 <_sbrk_r>
 800a6ae:	1c43      	adds	r3, r0, #1
 800a6b0:	d00a      	beq.n	800a6c8 <sbrk_aligned+0x34>
 800a6b2:	1cc4      	adds	r4, r0, #3
 800a6b4:	f024 0403 	bic.w	r4, r4, #3
 800a6b8:	42a0      	cmp	r0, r4
 800a6ba:	d007      	beq.n	800a6cc <sbrk_aligned+0x38>
 800a6bc:	1a21      	subs	r1, r4, r0
 800a6be:	4628      	mov	r0, r5
 800a6c0:	f001 f80a 	bl	800b6d8 <_sbrk_r>
 800a6c4:	3001      	adds	r0, #1
 800a6c6:	d101      	bne.n	800a6cc <sbrk_aligned+0x38>
 800a6c8:	f04f 34ff 	mov.w	r4, #4294967295
 800a6cc:	4620      	mov	r0, r4
 800a6ce:	bd70      	pop	{r4, r5, r6, pc}
 800a6d0:	20001014 	.word	0x20001014

0800a6d4 <_malloc_r>:
 800a6d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6d8:	1ccd      	adds	r5, r1, #3
 800a6da:	f025 0503 	bic.w	r5, r5, #3
 800a6de:	3508      	adds	r5, #8
 800a6e0:	2d0c      	cmp	r5, #12
 800a6e2:	bf38      	it	cc
 800a6e4:	250c      	movcc	r5, #12
 800a6e6:	2d00      	cmp	r5, #0
 800a6e8:	4607      	mov	r7, r0
 800a6ea:	db01      	blt.n	800a6f0 <_malloc_r+0x1c>
 800a6ec:	42a9      	cmp	r1, r5
 800a6ee:	d905      	bls.n	800a6fc <_malloc_r+0x28>
 800a6f0:	230c      	movs	r3, #12
 800a6f2:	603b      	str	r3, [r7, #0]
 800a6f4:	2600      	movs	r6, #0
 800a6f6:	4630      	mov	r0, r6
 800a6f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a7d0 <_malloc_r+0xfc>
 800a700:	f000 f868 	bl	800a7d4 <__malloc_lock>
 800a704:	f8d8 3000 	ldr.w	r3, [r8]
 800a708:	461c      	mov	r4, r3
 800a70a:	bb5c      	cbnz	r4, 800a764 <_malloc_r+0x90>
 800a70c:	4629      	mov	r1, r5
 800a70e:	4638      	mov	r0, r7
 800a710:	f7ff ffc0 	bl	800a694 <sbrk_aligned>
 800a714:	1c43      	adds	r3, r0, #1
 800a716:	4604      	mov	r4, r0
 800a718:	d155      	bne.n	800a7c6 <_malloc_r+0xf2>
 800a71a:	f8d8 4000 	ldr.w	r4, [r8]
 800a71e:	4626      	mov	r6, r4
 800a720:	2e00      	cmp	r6, #0
 800a722:	d145      	bne.n	800a7b0 <_malloc_r+0xdc>
 800a724:	2c00      	cmp	r4, #0
 800a726:	d048      	beq.n	800a7ba <_malloc_r+0xe6>
 800a728:	6823      	ldr	r3, [r4, #0]
 800a72a:	4631      	mov	r1, r6
 800a72c:	4638      	mov	r0, r7
 800a72e:	eb04 0903 	add.w	r9, r4, r3
 800a732:	f000 ffd1 	bl	800b6d8 <_sbrk_r>
 800a736:	4581      	cmp	r9, r0
 800a738:	d13f      	bne.n	800a7ba <_malloc_r+0xe6>
 800a73a:	6821      	ldr	r1, [r4, #0]
 800a73c:	1a6d      	subs	r5, r5, r1
 800a73e:	4629      	mov	r1, r5
 800a740:	4638      	mov	r0, r7
 800a742:	f7ff ffa7 	bl	800a694 <sbrk_aligned>
 800a746:	3001      	adds	r0, #1
 800a748:	d037      	beq.n	800a7ba <_malloc_r+0xe6>
 800a74a:	6823      	ldr	r3, [r4, #0]
 800a74c:	442b      	add	r3, r5
 800a74e:	6023      	str	r3, [r4, #0]
 800a750:	f8d8 3000 	ldr.w	r3, [r8]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d038      	beq.n	800a7ca <_malloc_r+0xf6>
 800a758:	685a      	ldr	r2, [r3, #4]
 800a75a:	42a2      	cmp	r2, r4
 800a75c:	d12b      	bne.n	800a7b6 <_malloc_r+0xe2>
 800a75e:	2200      	movs	r2, #0
 800a760:	605a      	str	r2, [r3, #4]
 800a762:	e00f      	b.n	800a784 <_malloc_r+0xb0>
 800a764:	6822      	ldr	r2, [r4, #0]
 800a766:	1b52      	subs	r2, r2, r5
 800a768:	d41f      	bmi.n	800a7aa <_malloc_r+0xd6>
 800a76a:	2a0b      	cmp	r2, #11
 800a76c:	d917      	bls.n	800a79e <_malloc_r+0xca>
 800a76e:	1961      	adds	r1, r4, r5
 800a770:	42a3      	cmp	r3, r4
 800a772:	6025      	str	r5, [r4, #0]
 800a774:	bf18      	it	ne
 800a776:	6059      	strne	r1, [r3, #4]
 800a778:	6863      	ldr	r3, [r4, #4]
 800a77a:	bf08      	it	eq
 800a77c:	f8c8 1000 	streq.w	r1, [r8]
 800a780:	5162      	str	r2, [r4, r5]
 800a782:	604b      	str	r3, [r1, #4]
 800a784:	4638      	mov	r0, r7
 800a786:	f104 060b 	add.w	r6, r4, #11
 800a78a:	f000 f829 	bl	800a7e0 <__malloc_unlock>
 800a78e:	f026 0607 	bic.w	r6, r6, #7
 800a792:	1d23      	adds	r3, r4, #4
 800a794:	1af2      	subs	r2, r6, r3
 800a796:	d0ae      	beq.n	800a6f6 <_malloc_r+0x22>
 800a798:	1b9b      	subs	r3, r3, r6
 800a79a:	50a3      	str	r3, [r4, r2]
 800a79c:	e7ab      	b.n	800a6f6 <_malloc_r+0x22>
 800a79e:	42a3      	cmp	r3, r4
 800a7a0:	6862      	ldr	r2, [r4, #4]
 800a7a2:	d1dd      	bne.n	800a760 <_malloc_r+0x8c>
 800a7a4:	f8c8 2000 	str.w	r2, [r8]
 800a7a8:	e7ec      	b.n	800a784 <_malloc_r+0xb0>
 800a7aa:	4623      	mov	r3, r4
 800a7ac:	6864      	ldr	r4, [r4, #4]
 800a7ae:	e7ac      	b.n	800a70a <_malloc_r+0x36>
 800a7b0:	4634      	mov	r4, r6
 800a7b2:	6876      	ldr	r6, [r6, #4]
 800a7b4:	e7b4      	b.n	800a720 <_malloc_r+0x4c>
 800a7b6:	4613      	mov	r3, r2
 800a7b8:	e7cc      	b.n	800a754 <_malloc_r+0x80>
 800a7ba:	230c      	movs	r3, #12
 800a7bc:	603b      	str	r3, [r7, #0]
 800a7be:	4638      	mov	r0, r7
 800a7c0:	f000 f80e 	bl	800a7e0 <__malloc_unlock>
 800a7c4:	e797      	b.n	800a6f6 <_malloc_r+0x22>
 800a7c6:	6025      	str	r5, [r4, #0]
 800a7c8:	e7dc      	b.n	800a784 <_malloc_r+0xb0>
 800a7ca:	605b      	str	r3, [r3, #4]
 800a7cc:	deff      	udf	#255	; 0xff
 800a7ce:	bf00      	nop
 800a7d0:	20001010 	.word	0x20001010

0800a7d4 <__malloc_lock>:
 800a7d4:	4801      	ldr	r0, [pc, #4]	; (800a7dc <__malloc_lock+0x8>)
 800a7d6:	f7ff b88c 	b.w	80098f2 <__retarget_lock_acquire_recursive>
 800a7da:	bf00      	nop
 800a7dc:	2000100c 	.word	0x2000100c

0800a7e0 <__malloc_unlock>:
 800a7e0:	4801      	ldr	r0, [pc, #4]	; (800a7e8 <__malloc_unlock+0x8>)
 800a7e2:	f7ff b887 	b.w	80098f4 <__retarget_lock_release_recursive>
 800a7e6:	bf00      	nop
 800a7e8:	2000100c 	.word	0x2000100c

0800a7ec <_Balloc>:
 800a7ec:	b570      	push	{r4, r5, r6, lr}
 800a7ee:	69c6      	ldr	r6, [r0, #28]
 800a7f0:	4604      	mov	r4, r0
 800a7f2:	460d      	mov	r5, r1
 800a7f4:	b976      	cbnz	r6, 800a814 <_Balloc+0x28>
 800a7f6:	2010      	movs	r0, #16
 800a7f8:	f7ff ff44 	bl	800a684 <malloc>
 800a7fc:	4602      	mov	r2, r0
 800a7fe:	61e0      	str	r0, [r4, #28]
 800a800:	b920      	cbnz	r0, 800a80c <_Balloc+0x20>
 800a802:	4b18      	ldr	r3, [pc, #96]	; (800a864 <_Balloc+0x78>)
 800a804:	4818      	ldr	r0, [pc, #96]	; (800a868 <_Balloc+0x7c>)
 800a806:	216b      	movs	r1, #107	; 0x6b
 800a808:	f000 ff84 	bl	800b714 <__assert_func>
 800a80c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a810:	6006      	str	r6, [r0, #0]
 800a812:	60c6      	str	r6, [r0, #12]
 800a814:	69e6      	ldr	r6, [r4, #28]
 800a816:	68f3      	ldr	r3, [r6, #12]
 800a818:	b183      	cbz	r3, 800a83c <_Balloc+0x50>
 800a81a:	69e3      	ldr	r3, [r4, #28]
 800a81c:	68db      	ldr	r3, [r3, #12]
 800a81e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a822:	b9b8      	cbnz	r0, 800a854 <_Balloc+0x68>
 800a824:	2101      	movs	r1, #1
 800a826:	fa01 f605 	lsl.w	r6, r1, r5
 800a82a:	1d72      	adds	r2, r6, #5
 800a82c:	0092      	lsls	r2, r2, #2
 800a82e:	4620      	mov	r0, r4
 800a830:	f000 ff8e 	bl	800b750 <_calloc_r>
 800a834:	b160      	cbz	r0, 800a850 <_Balloc+0x64>
 800a836:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a83a:	e00e      	b.n	800a85a <_Balloc+0x6e>
 800a83c:	2221      	movs	r2, #33	; 0x21
 800a83e:	2104      	movs	r1, #4
 800a840:	4620      	mov	r0, r4
 800a842:	f000 ff85 	bl	800b750 <_calloc_r>
 800a846:	69e3      	ldr	r3, [r4, #28]
 800a848:	60f0      	str	r0, [r6, #12]
 800a84a:	68db      	ldr	r3, [r3, #12]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d1e4      	bne.n	800a81a <_Balloc+0x2e>
 800a850:	2000      	movs	r0, #0
 800a852:	bd70      	pop	{r4, r5, r6, pc}
 800a854:	6802      	ldr	r2, [r0, #0]
 800a856:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a85a:	2300      	movs	r3, #0
 800a85c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a860:	e7f7      	b.n	800a852 <_Balloc+0x66>
 800a862:	bf00      	nop
 800a864:	0800ba91 	.word	0x0800ba91
 800a868:	0800bb11 	.word	0x0800bb11

0800a86c <_Bfree>:
 800a86c:	b570      	push	{r4, r5, r6, lr}
 800a86e:	69c6      	ldr	r6, [r0, #28]
 800a870:	4605      	mov	r5, r0
 800a872:	460c      	mov	r4, r1
 800a874:	b976      	cbnz	r6, 800a894 <_Bfree+0x28>
 800a876:	2010      	movs	r0, #16
 800a878:	f7ff ff04 	bl	800a684 <malloc>
 800a87c:	4602      	mov	r2, r0
 800a87e:	61e8      	str	r0, [r5, #28]
 800a880:	b920      	cbnz	r0, 800a88c <_Bfree+0x20>
 800a882:	4b09      	ldr	r3, [pc, #36]	; (800a8a8 <_Bfree+0x3c>)
 800a884:	4809      	ldr	r0, [pc, #36]	; (800a8ac <_Bfree+0x40>)
 800a886:	218f      	movs	r1, #143	; 0x8f
 800a888:	f000 ff44 	bl	800b714 <__assert_func>
 800a88c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a890:	6006      	str	r6, [r0, #0]
 800a892:	60c6      	str	r6, [r0, #12]
 800a894:	b13c      	cbz	r4, 800a8a6 <_Bfree+0x3a>
 800a896:	69eb      	ldr	r3, [r5, #28]
 800a898:	6862      	ldr	r2, [r4, #4]
 800a89a:	68db      	ldr	r3, [r3, #12]
 800a89c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a8a0:	6021      	str	r1, [r4, #0]
 800a8a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a8a6:	bd70      	pop	{r4, r5, r6, pc}
 800a8a8:	0800ba91 	.word	0x0800ba91
 800a8ac:	0800bb11 	.word	0x0800bb11

0800a8b0 <__multadd>:
 800a8b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8b4:	690d      	ldr	r5, [r1, #16]
 800a8b6:	4607      	mov	r7, r0
 800a8b8:	460c      	mov	r4, r1
 800a8ba:	461e      	mov	r6, r3
 800a8bc:	f101 0c14 	add.w	ip, r1, #20
 800a8c0:	2000      	movs	r0, #0
 800a8c2:	f8dc 3000 	ldr.w	r3, [ip]
 800a8c6:	b299      	uxth	r1, r3
 800a8c8:	fb02 6101 	mla	r1, r2, r1, r6
 800a8cc:	0c1e      	lsrs	r6, r3, #16
 800a8ce:	0c0b      	lsrs	r3, r1, #16
 800a8d0:	fb02 3306 	mla	r3, r2, r6, r3
 800a8d4:	b289      	uxth	r1, r1
 800a8d6:	3001      	adds	r0, #1
 800a8d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a8dc:	4285      	cmp	r5, r0
 800a8de:	f84c 1b04 	str.w	r1, [ip], #4
 800a8e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a8e6:	dcec      	bgt.n	800a8c2 <__multadd+0x12>
 800a8e8:	b30e      	cbz	r6, 800a92e <__multadd+0x7e>
 800a8ea:	68a3      	ldr	r3, [r4, #8]
 800a8ec:	42ab      	cmp	r3, r5
 800a8ee:	dc19      	bgt.n	800a924 <__multadd+0x74>
 800a8f0:	6861      	ldr	r1, [r4, #4]
 800a8f2:	4638      	mov	r0, r7
 800a8f4:	3101      	adds	r1, #1
 800a8f6:	f7ff ff79 	bl	800a7ec <_Balloc>
 800a8fa:	4680      	mov	r8, r0
 800a8fc:	b928      	cbnz	r0, 800a90a <__multadd+0x5a>
 800a8fe:	4602      	mov	r2, r0
 800a900:	4b0c      	ldr	r3, [pc, #48]	; (800a934 <__multadd+0x84>)
 800a902:	480d      	ldr	r0, [pc, #52]	; (800a938 <__multadd+0x88>)
 800a904:	21ba      	movs	r1, #186	; 0xba
 800a906:	f000 ff05 	bl	800b714 <__assert_func>
 800a90a:	6922      	ldr	r2, [r4, #16]
 800a90c:	3202      	adds	r2, #2
 800a90e:	f104 010c 	add.w	r1, r4, #12
 800a912:	0092      	lsls	r2, r2, #2
 800a914:	300c      	adds	r0, #12
 800a916:	f000 feef 	bl	800b6f8 <memcpy>
 800a91a:	4621      	mov	r1, r4
 800a91c:	4638      	mov	r0, r7
 800a91e:	f7ff ffa5 	bl	800a86c <_Bfree>
 800a922:	4644      	mov	r4, r8
 800a924:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a928:	3501      	adds	r5, #1
 800a92a:	615e      	str	r6, [r3, #20]
 800a92c:	6125      	str	r5, [r4, #16]
 800a92e:	4620      	mov	r0, r4
 800a930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a934:	0800bb00 	.word	0x0800bb00
 800a938:	0800bb11 	.word	0x0800bb11

0800a93c <__hi0bits>:
 800a93c:	0c03      	lsrs	r3, r0, #16
 800a93e:	041b      	lsls	r3, r3, #16
 800a940:	b9d3      	cbnz	r3, 800a978 <__hi0bits+0x3c>
 800a942:	0400      	lsls	r0, r0, #16
 800a944:	2310      	movs	r3, #16
 800a946:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a94a:	bf04      	itt	eq
 800a94c:	0200      	lsleq	r0, r0, #8
 800a94e:	3308      	addeq	r3, #8
 800a950:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a954:	bf04      	itt	eq
 800a956:	0100      	lsleq	r0, r0, #4
 800a958:	3304      	addeq	r3, #4
 800a95a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a95e:	bf04      	itt	eq
 800a960:	0080      	lsleq	r0, r0, #2
 800a962:	3302      	addeq	r3, #2
 800a964:	2800      	cmp	r0, #0
 800a966:	db05      	blt.n	800a974 <__hi0bits+0x38>
 800a968:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a96c:	f103 0301 	add.w	r3, r3, #1
 800a970:	bf08      	it	eq
 800a972:	2320      	moveq	r3, #32
 800a974:	4618      	mov	r0, r3
 800a976:	4770      	bx	lr
 800a978:	2300      	movs	r3, #0
 800a97a:	e7e4      	b.n	800a946 <__hi0bits+0xa>

0800a97c <__lo0bits>:
 800a97c:	6803      	ldr	r3, [r0, #0]
 800a97e:	f013 0207 	ands.w	r2, r3, #7
 800a982:	d00c      	beq.n	800a99e <__lo0bits+0x22>
 800a984:	07d9      	lsls	r1, r3, #31
 800a986:	d422      	bmi.n	800a9ce <__lo0bits+0x52>
 800a988:	079a      	lsls	r2, r3, #30
 800a98a:	bf49      	itett	mi
 800a98c:	085b      	lsrmi	r3, r3, #1
 800a98e:	089b      	lsrpl	r3, r3, #2
 800a990:	6003      	strmi	r3, [r0, #0]
 800a992:	2201      	movmi	r2, #1
 800a994:	bf5c      	itt	pl
 800a996:	6003      	strpl	r3, [r0, #0]
 800a998:	2202      	movpl	r2, #2
 800a99a:	4610      	mov	r0, r2
 800a99c:	4770      	bx	lr
 800a99e:	b299      	uxth	r1, r3
 800a9a0:	b909      	cbnz	r1, 800a9a6 <__lo0bits+0x2a>
 800a9a2:	0c1b      	lsrs	r3, r3, #16
 800a9a4:	2210      	movs	r2, #16
 800a9a6:	b2d9      	uxtb	r1, r3
 800a9a8:	b909      	cbnz	r1, 800a9ae <__lo0bits+0x32>
 800a9aa:	3208      	adds	r2, #8
 800a9ac:	0a1b      	lsrs	r3, r3, #8
 800a9ae:	0719      	lsls	r1, r3, #28
 800a9b0:	bf04      	itt	eq
 800a9b2:	091b      	lsreq	r3, r3, #4
 800a9b4:	3204      	addeq	r2, #4
 800a9b6:	0799      	lsls	r1, r3, #30
 800a9b8:	bf04      	itt	eq
 800a9ba:	089b      	lsreq	r3, r3, #2
 800a9bc:	3202      	addeq	r2, #2
 800a9be:	07d9      	lsls	r1, r3, #31
 800a9c0:	d403      	bmi.n	800a9ca <__lo0bits+0x4e>
 800a9c2:	085b      	lsrs	r3, r3, #1
 800a9c4:	f102 0201 	add.w	r2, r2, #1
 800a9c8:	d003      	beq.n	800a9d2 <__lo0bits+0x56>
 800a9ca:	6003      	str	r3, [r0, #0]
 800a9cc:	e7e5      	b.n	800a99a <__lo0bits+0x1e>
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	e7e3      	b.n	800a99a <__lo0bits+0x1e>
 800a9d2:	2220      	movs	r2, #32
 800a9d4:	e7e1      	b.n	800a99a <__lo0bits+0x1e>
	...

0800a9d8 <__i2b>:
 800a9d8:	b510      	push	{r4, lr}
 800a9da:	460c      	mov	r4, r1
 800a9dc:	2101      	movs	r1, #1
 800a9de:	f7ff ff05 	bl	800a7ec <_Balloc>
 800a9e2:	4602      	mov	r2, r0
 800a9e4:	b928      	cbnz	r0, 800a9f2 <__i2b+0x1a>
 800a9e6:	4b05      	ldr	r3, [pc, #20]	; (800a9fc <__i2b+0x24>)
 800a9e8:	4805      	ldr	r0, [pc, #20]	; (800aa00 <__i2b+0x28>)
 800a9ea:	f240 1145 	movw	r1, #325	; 0x145
 800a9ee:	f000 fe91 	bl	800b714 <__assert_func>
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	6144      	str	r4, [r0, #20]
 800a9f6:	6103      	str	r3, [r0, #16]
 800a9f8:	bd10      	pop	{r4, pc}
 800a9fa:	bf00      	nop
 800a9fc:	0800bb00 	.word	0x0800bb00
 800aa00:	0800bb11 	.word	0x0800bb11

0800aa04 <__multiply>:
 800aa04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa08:	4691      	mov	r9, r2
 800aa0a:	690a      	ldr	r2, [r1, #16]
 800aa0c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aa10:	429a      	cmp	r2, r3
 800aa12:	bfb8      	it	lt
 800aa14:	460b      	movlt	r3, r1
 800aa16:	460c      	mov	r4, r1
 800aa18:	bfbc      	itt	lt
 800aa1a:	464c      	movlt	r4, r9
 800aa1c:	4699      	movlt	r9, r3
 800aa1e:	6927      	ldr	r7, [r4, #16]
 800aa20:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800aa24:	68a3      	ldr	r3, [r4, #8]
 800aa26:	6861      	ldr	r1, [r4, #4]
 800aa28:	eb07 060a 	add.w	r6, r7, sl
 800aa2c:	42b3      	cmp	r3, r6
 800aa2e:	b085      	sub	sp, #20
 800aa30:	bfb8      	it	lt
 800aa32:	3101      	addlt	r1, #1
 800aa34:	f7ff feda 	bl	800a7ec <_Balloc>
 800aa38:	b930      	cbnz	r0, 800aa48 <__multiply+0x44>
 800aa3a:	4602      	mov	r2, r0
 800aa3c:	4b44      	ldr	r3, [pc, #272]	; (800ab50 <__multiply+0x14c>)
 800aa3e:	4845      	ldr	r0, [pc, #276]	; (800ab54 <__multiply+0x150>)
 800aa40:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800aa44:	f000 fe66 	bl	800b714 <__assert_func>
 800aa48:	f100 0514 	add.w	r5, r0, #20
 800aa4c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aa50:	462b      	mov	r3, r5
 800aa52:	2200      	movs	r2, #0
 800aa54:	4543      	cmp	r3, r8
 800aa56:	d321      	bcc.n	800aa9c <__multiply+0x98>
 800aa58:	f104 0314 	add.w	r3, r4, #20
 800aa5c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800aa60:	f109 0314 	add.w	r3, r9, #20
 800aa64:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800aa68:	9202      	str	r2, [sp, #8]
 800aa6a:	1b3a      	subs	r2, r7, r4
 800aa6c:	3a15      	subs	r2, #21
 800aa6e:	f022 0203 	bic.w	r2, r2, #3
 800aa72:	3204      	adds	r2, #4
 800aa74:	f104 0115 	add.w	r1, r4, #21
 800aa78:	428f      	cmp	r7, r1
 800aa7a:	bf38      	it	cc
 800aa7c:	2204      	movcc	r2, #4
 800aa7e:	9201      	str	r2, [sp, #4]
 800aa80:	9a02      	ldr	r2, [sp, #8]
 800aa82:	9303      	str	r3, [sp, #12]
 800aa84:	429a      	cmp	r2, r3
 800aa86:	d80c      	bhi.n	800aaa2 <__multiply+0x9e>
 800aa88:	2e00      	cmp	r6, #0
 800aa8a:	dd03      	ble.n	800aa94 <__multiply+0x90>
 800aa8c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d05b      	beq.n	800ab4c <__multiply+0x148>
 800aa94:	6106      	str	r6, [r0, #16]
 800aa96:	b005      	add	sp, #20
 800aa98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa9c:	f843 2b04 	str.w	r2, [r3], #4
 800aaa0:	e7d8      	b.n	800aa54 <__multiply+0x50>
 800aaa2:	f8b3 a000 	ldrh.w	sl, [r3]
 800aaa6:	f1ba 0f00 	cmp.w	sl, #0
 800aaaa:	d024      	beq.n	800aaf6 <__multiply+0xf2>
 800aaac:	f104 0e14 	add.w	lr, r4, #20
 800aab0:	46a9      	mov	r9, r5
 800aab2:	f04f 0c00 	mov.w	ip, #0
 800aab6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800aaba:	f8d9 1000 	ldr.w	r1, [r9]
 800aabe:	fa1f fb82 	uxth.w	fp, r2
 800aac2:	b289      	uxth	r1, r1
 800aac4:	fb0a 110b 	mla	r1, sl, fp, r1
 800aac8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800aacc:	f8d9 2000 	ldr.w	r2, [r9]
 800aad0:	4461      	add	r1, ip
 800aad2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aad6:	fb0a c20b 	mla	r2, sl, fp, ip
 800aada:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800aade:	b289      	uxth	r1, r1
 800aae0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aae4:	4577      	cmp	r7, lr
 800aae6:	f849 1b04 	str.w	r1, [r9], #4
 800aaea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aaee:	d8e2      	bhi.n	800aab6 <__multiply+0xb2>
 800aaf0:	9a01      	ldr	r2, [sp, #4]
 800aaf2:	f845 c002 	str.w	ip, [r5, r2]
 800aaf6:	9a03      	ldr	r2, [sp, #12]
 800aaf8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aafc:	3304      	adds	r3, #4
 800aafe:	f1b9 0f00 	cmp.w	r9, #0
 800ab02:	d021      	beq.n	800ab48 <__multiply+0x144>
 800ab04:	6829      	ldr	r1, [r5, #0]
 800ab06:	f104 0c14 	add.w	ip, r4, #20
 800ab0a:	46ae      	mov	lr, r5
 800ab0c:	f04f 0a00 	mov.w	sl, #0
 800ab10:	f8bc b000 	ldrh.w	fp, [ip]
 800ab14:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ab18:	fb09 220b 	mla	r2, r9, fp, r2
 800ab1c:	4452      	add	r2, sl
 800ab1e:	b289      	uxth	r1, r1
 800ab20:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ab24:	f84e 1b04 	str.w	r1, [lr], #4
 800ab28:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ab2c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ab30:	f8be 1000 	ldrh.w	r1, [lr]
 800ab34:	fb09 110a 	mla	r1, r9, sl, r1
 800ab38:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ab3c:	4567      	cmp	r7, ip
 800ab3e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ab42:	d8e5      	bhi.n	800ab10 <__multiply+0x10c>
 800ab44:	9a01      	ldr	r2, [sp, #4]
 800ab46:	50a9      	str	r1, [r5, r2]
 800ab48:	3504      	adds	r5, #4
 800ab4a:	e799      	b.n	800aa80 <__multiply+0x7c>
 800ab4c:	3e01      	subs	r6, #1
 800ab4e:	e79b      	b.n	800aa88 <__multiply+0x84>
 800ab50:	0800bb00 	.word	0x0800bb00
 800ab54:	0800bb11 	.word	0x0800bb11

0800ab58 <__pow5mult>:
 800ab58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab5c:	4615      	mov	r5, r2
 800ab5e:	f012 0203 	ands.w	r2, r2, #3
 800ab62:	4606      	mov	r6, r0
 800ab64:	460f      	mov	r7, r1
 800ab66:	d007      	beq.n	800ab78 <__pow5mult+0x20>
 800ab68:	4c25      	ldr	r4, [pc, #148]	; (800ac00 <__pow5mult+0xa8>)
 800ab6a:	3a01      	subs	r2, #1
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ab72:	f7ff fe9d 	bl	800a8b0 <__multadd>
 800ab76:	4607      	mov	r7, r0
 800ab78:	10ad      	asrs	r5, r5, #2
 800ab7a:	d03d      	beq.n	800abf8 <__pow5mult+0xa0>
 800ab7c:	69f4      	ldr	r4, [r6, #28]
 800ab7e:	b97c      	cbnz	r4, 800aba0 <__pow5mult+0x48>
 800ab80:	2010      	movs	r0, #16
 800ab82:	f7ff fd7f 	bl	800a684 <malloc>
 800ab86:	4602      	mov	r2, r0
 800ab88:	61f0      	str	r0, [r6, #28]
 800ab8a:	b928      	cbnz	r0, 800ab98 <__pow5mult+0x40>
 800ab8c:	4b1d      	ldr	r3, [pc, #116]	; (800ac04 <__pow5mult+0xac>)
 800ab8e:	481e      	ldr	r0, [pc, #120]	; (800ac08 <__pow5mult+0xb0>)
 800ab90:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ab94:	f000 fdbe 	bl	800b714 <__assert_func>
 800ab98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ab9c:	6004      	str	r4, [r0, #0]
 800ab9e:	60c4      	str	r4, [r0, #12]
 800aba0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800aba4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aba8:	b94c      	cbnz	r4, 800abbe <__pow5mult+0x66>
 800abaa:	f240 2171 	movw	r1, #625	; 0x271
 800abae:	4630      	mov	r0, r6
 800abb0:	f7ff ff12 	bl	800a9d8 <__i2b>
 800abb4:	2300      	movs	r3, #0
 800abb6:	f8c8 0008 	str.w	r0, [r8, #8]
 800abba:	4604      	mov	r4, r0
 800abbc:	6003      	str	r3, [r0, #0]
 800abbe:	f04f 0900 	mov.w	r9, #0
 800abc2:	07eb      	lsls	r3, r5, #31
 800abc4:	d50a      	bpl.n	800abdc <__pow5mult+0x84>
 800abc6:	4639      	mov	r1, r7
 800abc8:	4622      	mov	r2, r4
 800abca:	4630      	mov	r0, r6
 800abcc:	f7ff ff1a 	bl	800aa04 <__multiply>
 800abd0:	4639      	mov	r1, r7
 800abd2:	4680      	mov	r8, r0
 800abd4:	4630      	mov	r0, r6
 800abd6:	f7ff fe49 	bl	800a86c <_Bfree>
 800abda:	4647      	mov	r7, r8
 800abdc:	106d      	asrs	r5, r5, #1
 800abde:	d00b      	beq.n	800abf8 <__pow5mult+0xa0>
 800abe0:	6820      	ldr	r0, [r4, #0]
 800abe2:	b938      	cbnz	r0, 800abf4 <__pow5mult+0x9c>
 800abe4:	4622      	mov	r2, r4
 800abe6:	4621      	mov	r1, r4
 800abe8:	4630      	mov	r0, r6
 800abea:	f7ff ff0b 	bl	800aa04 <__multiply>
 800abee:	6020      	str	r0, [r4, #0]
 800abf0:	f8c0 9000 	str.w	r9, [r0]
 800abf4:	4604      	mov	r4, r0
 800abf6:	e7e4      	b.n	800abc2 <__pow5mult+0x6a>
 800abf8:	4638      	mov	r0, r7
 800abfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abfe:	bf00      	nop
 800ac00:	0800bc60 	.word	0x0800bc60
 800ac04:	0800ba91 	.word	0x0800ba91
 800ac08:	0800bb11 	.word	0x0800bb11

0800ac0c <__lshift>:
 800ac0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac10:	460c      	mov	r4, r1
 800ac12:	6849      	ldr	r1, [r1, #4]
 800ac14:	6923      	ldr	r3, [r4, #16]
 800ac16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ac1a:	68a3      	ldr	r3, [r4, #8]
 800ac1c:	4607      	mov	r7, r0
 800ac1e:	4691      	mov	r9, r2
 800ac20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ac24:	f108 0601 	add.w	r6, r8, #1
 800ac28:	42b3      	cmp	r3, r6
 800ac2a:	db0b      	blt.n	800ac44 <__lshift+0x38>
 800ac2c:	4638      	mov	r0, r7
 800ac2e:	f7ff fddd 	bl	800a7ec <_Balloc>
 800ac32:	4605      	mov	r5, r0
 800ac34:	b948      	cbnz	r0, 800ac4a <__lshift+0x3e>
 800ac36:	4602      	mov	r2, r0
 800ac38:	4b28      	ldr	r3, [pc, #160]	; (800acdc <__lshift+0xd0>)
 800ac3a:	4829      	ldr	r0, [pc, #164]	; (800ace0 <__lshift+0xd4>)
 800ac3c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ac40:	f000 fd68 	bl	800b714 <__assert_func>
 800ac44:	3101      	adds	r1, #1
 800ac46:	005b      	lsls	r3, r3, #1
 800ac48:	e7ee      	b.n	800ac28 <__lshift+0x1c>
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	f100 0114 	add.w	r1, r0, #20
 800ac50:	f100 0210 	add.w	r2, r0, #16
 800ac54:	4618      	mov	r0, r3
 800ac56:	4553      	cmp	r3, sl
 800ac58:	db33      	blt.n	800acc2 <__lshift+0xb6>
 800ac5a:	6920      	ldr	r0, [r4, #16]
 800ac5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ac60:	f104 0314 	add.w	r3, r4, #20
 800ac64:	f019 091f 	ands.w	r9, r9, #31
 800ac68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ac6c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ac70:	d02b      	beq.n	800acca <__lshift+0xbe>
 800ac72:	f1c9 0e20 	rsb	lr, r9, #32
 800ac76:	468a      	mov	sl, r1
 800ac78:	2200      	movs	r2, #0
 800ac7a:	6818      	ldr	r0, [r3, #0]
 800ac7c:	fa00 f009 	lsl.w	r0, r0, r9
 800ac80:	4310      	orrs	r0, r2
 800ac82:	f84a 0b04 	str.w	r0, [sl], #4
 800ac86:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac8a:	459c      	cmp	ip, r3
 800ac8c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ac90:	d8f3      	bhi.n	800ac7a <__lshift+0x6e>
 800ac92:	ebac 0304 	sub.w	r3, ip, r4
 800ac96:	3b15      	subs	r3, #21
 800ac98:	f023 0303 	bic.w	r3, r3, #3
 800ac9c:	3304      	adds	r3, #4
 800ac9e:	f104 0015 	add.w	r0, r4, #21
 800aca2:	4584      	cmp	ip, r0
 800aca4:	bf38      	it	cc
 800aca6:	2304      	movcc	r3, #4
 800aca8:	50ca      	str	r2, [r1, r3]
 800acaa:	b10a      	cbz	r2, 800acb0 <__lshift+0xa4>
 800acac:	f108 0602 	add.w	r6, r8, #2
 800acb0:	3e01      	subs	r6, #1
 800acb2:	4638      	mov	r0, r7
 800acb4:	612e      	str	r6, [r5, #16]
 800acb6:	4621      	mov	r1, r4
 800acb8:	f7ff fdd8 	bl	800a86c <_Bfree>
 800acbc:	4628      	mov	r0, r5
 800acbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acc2:	f842 0f04 	str.w	r0, [r2, #4]!
 800acc6:	3301      	adds	r3, #1
 800acc8:	e7c5      	b.n	800ac56 <__lshift+0x4a>
 800acca:	3904      	subs	r1, #4
 800accc:	f853 2b04 	ldr.w	r2, [r3], #4
 800acd0:	f841 2f04 	str.w	r2, [r1, #4]!
 800acd4:	459c      	cmp	ip, r3
 800acd6:	d8f9      	bhi.n	800accc <__lshift+0xc0>
 800acd8:	e7ea      	b.n	800acb0 <__lshift+0xa4>
 800acda:	bf00      	nop
 800acdc:	0800bb00 	.word	0x0800bb00
 800ace0:	0800bb11 	.word	0x0800bb11

0800ace4 <__mcmp>:
 800ace4:	b530      	push	{r4, r5, lr}
 800ace6:	6902      	ldr	r2, [r0, #16]
 800ace8:	690c      	ldr	r4, [r1, #16]
 800acea:	1b12      	subs	r2, r2, r4
 800acec:	d10e      	bne.n	800ad0c <__mcmp+0x28>
 800acee:	f100 0314 	add.w	r3, r0, #20
 800acf2:	3114      	adds	r1, #20
 800acf4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800acf8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800acfc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ad00:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ad04:	42a5      	cmp	r5, r4
 800ad06:	d003      	beq.n	800ad10 <__mcmp+0x2c>
 800ad08:	d305      	bcc.n	800ad16 <__mcmp+0x32>
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	4610      	mov	r0, r2
 800ad0e:	bd30      	pop	{r4, r5, pc}
 800ad10:	4283      	cmp	r3, r0
 800ad12:	d3f3      	bcc.n	800acfc <__mcmp+0x18>
 800ad14:	e7fa      	b.n	800ad0c <__mcmp+0x28>
 800ad16:	f04f 32ff 	mov.w	r2, #4294967295
 800ad1a:	e7f7      	b.n	800ad0c <__mcmp+0x28>

0800ad1c <__mdiff>:
 800ad1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad20:	460c      	mov	r4, r1
 800ad22:	4606      	mov	r6, r0
 800ad24:	4611      	mov	r1, r2
 800ad26:	4620      	mov	r0, r4
 800ad28:	4690      	mov	r8, r2
 800ad2a:	f7ff ffdb 	bl	800ace4 <__mcmp>
 800ad2e:	1e05      	subs	r5, r0, #0
 800ad30:	d110      	bne.n	800ad54 <__mdiff+0x38>
 800ad32:	4629      	mov	r1, r5
 800ad34:	4630      	mov	r0, r6
 800ad36:	f7ff fd59 	bl	800a7ec <_Balloc>
 800ad3a:	b930      	cbnz	r0, 800ad4a <__mdiff+0x2e>
 800ad3c:	4b3a      	ldr	r3, [pc, #232]	; (800ae28 <__mdiff+0x10c>)
 800ad3e:	4602      	mov	r2, r0
 800ad40:	f240 2137 	movw	r1, #567	; 0x237
 800ad44:	4839      	ldr	r0, [pc, #228]	; (800ae2c <__mdiff+0x110>)
 800ad46:	f000 fce5 	bl	800b714 <__assert_func>
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ad50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad54:	bfa4      	itt	ge
 800ad56:	4643      	movge	r3, r8
 800ad58:	46a0      	movge	r8, r4
 800ad5a:	4630      	mov	r0, r6
 800ad5c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ad60:	bfa6      	itte	ge
 800ad62:	461c      	movge	r4, r3
 800ad64:	2500      	movge	r5, #0
 800ad66:	2501      	movlt	r5, #1
 800ad68:	f7ff fd40 	bl	800a7ec <_Balloc>
 800ad6c:	b920      	cbnz	r0, 800ad78 <__mdiff+0x5c>
 800ad6e:	4b2e      	ldr	r3, [pc, #184]	; (800ae28 <__mdiff+0x10c>)
 800ad70:	4602      	mov	r2, r0
 800ad72:	f240 2145 	movw	r1, #581	; 0x245
 800ad76:	e7e5      	b.n	800ad44 <__mdiff+0x28>
 800ad78:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ad7c:	6926      	ldr	r6, [r4, #16]
 800ad7e:	60c5      	str	r5, [r0, #12]
 800ad80:	f104 0914 	add.w	r9, r4, #20
 800ad84:	f108 0514 	add.w	r5, r8, #20
 800ad88:	f100 0e14 	add.w	lr, r0, #20
 800ad8c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ad90:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ad94:	f108 0210 	add.w	r2, r8, #16
 800ad98:	46f2      	mov	sl, lr
 800ad9a:	2100      	movs	r1, #0
 800ad9c:	f859 3b04 	ldr.w	r3, [r9], #4
 800ada0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ada4:	fa11 f88b 	uxtah	r8, r1, fp
 800ada8:	b299      	uxth	r1, r3
 800adaa:	0c1b      	lsrs	r3, r3, #16
 800adac:	eba8 0801 	sub.w	r8, r8, r1
 800adb0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800adb4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800adb8:	fa1f f888 	uxth.w	r8, r8
 800adbc:	1419      	asrs	r1, r3, #16
 800adbe:	454e      	cmp	r6, r9
 800adc0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800adc4:	f84a 3b04 	str.w	r3, [sl], #4
 800adc8:	d8e8      	bhi.n	800ad9c <__mdiff+0x80>
 800adca:	1b33      	subs	r3, r6, r4
 800adcc:	3b15      	subs	r3, #21
 800adce:	f023 0303 	bic.w	r3, r3, #3
 800add2:	3304      	adds	r3, #4
 800add4:	3415      	adds	r4, #21
 800add6:	42a6      	cmp	r6, r4
 800add8:	bf38      	it	cc
 800adda:	2304      	movcc	r3, #4
 800addc:	441d      	add	r5, r3
 800adde:	4473      	add	r3, lr
 800ade0:	469e      	mov	lr, r3
 800ade2:	462e      	mov	r6, r5
 800ade4:	4566      	cmp	r6, ip
 800ade6:	d30e      	bcc.n	800ae06 <__mdiff+0xea>
 800ade8:	f10c 0203 	add.w	r2, ip, #3
 800adec:	1b52      	subs	r2, r2, r5
 800adee:	f022 0203 	bic.w	r2, r2, #3
 800adf2:	3d03      	subs	r5, #3
 800adf4:	45ac      	cmp	ip, r5
 800adf6:	bf38      	it	cc
 800adf8:	2200      	movcc	r2, #0
 800adfa:	4413      	add	r3, r2
 800adfc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ae00:	b17a      	cbz	r2, 800ae22 <__mdiff+0x106>
 800ae02:	6107      	str	r7, [r0, #16]
 800ae04:	e7a4      	b.n	800ad50 <__mdiff+0x34>
 800ae06:	f856 8b04 	ldr.w	r8, [r6], #4
 800ae0a:	fa11 f288 	uxtah	r2, r1, r8
 800ae0e:	1414      	asrs	r4, r2, #16
 800ae10:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ae14:	b292      	uxth	r2, r2
 800ae16:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ae1a:	f84e 2b04 	str.w	r2, [lr], #4
 800ae1e:	1421      	asrs	r1, r4, #16
 800ae20:	e7e0      	b.n	800ade4 <__mdiff+0xc8>
 800ae22:	3f01      	subs	r7, #1
 800ae24:	e7ea      	b.n	800adfc <__mdiff+0xe0>
 800ae26:	bf00      	nop
 800ae28:	0800bb00 	.word	0x0800bb00
 800ae2c:	0800bb11 	.word	0x0800bb11

0800ae30 <__d2b>:
 800ae30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ae34:	460f      	mov	r7, r1
 800ae36:	2101      	movs	r1, #1
 800ae38:	ec59 8b10 	vmov	r8, r9, d0
 800ae3c:	4616      	mov	r6, r2
 800ae3e:	f7ff fcd5 	bl	800a7ec <_Balloc>
 800ae42:	4604      	mov	r4, r0
 800ae44:	b930      	cbnz	r0, 800ae54 <__d2b+0x24>
 800ae46:	4602      	mov	r2, r0
 800ae48:	4b24      	ldr	r3, [pc, #144]	; (800aedc <__d2b+0xac>)
 800ae4a:	4825      	ldr	r0, [pc, #148]	; (800aee0 <__d2b+0xb0>)
 800ae4c:	f240 310f 	movw	r1, #783	; 0x30f
 800ae50:	f000 fc60 	bl	800b714 <__assert_func>
 800ae54:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ae58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ae5c:	bb2d      	cbnz	r5, 800aeaa <__d2b+0x7a>
 800ae5e:	9301      	str	r3, [sp, #4]
 800ae60:	f1b8 0300 	subs.w	r3, r8, #0
 800ae64:	d026      	beq.n	800aeb4 <__d2b+0x84>
 800ae66:	4668      	mov	r0, sp
 800ae68:	9300      	str	r3, [sp, #0]
 800ae6a:	f7ff fd87 	bl	800a97c <__lo0bits>
 800ae6e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ae72:	b1e8      	cbz	r0, 800aeb0 <__d2b+0x80>
 800ae74:	f1c0 0320 	rsb	r3, r0, #32
 800ae78:	fa02 f303 	lsl.w	r3, r2, r3
 800ae7c:	430b      	orrs	r3, r1
 800ae7e:	40c2      	lsrs	r2, r0
 800ae80:	6163      	str	r3, [r4, #20]
 800ae82:	9201      	str	r2, [sp, #4]
 800ae84:	9b01      	ldr	r3, [sp, #4]
 800ae86:	61a3      	str	r3, [r4, #24]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	bf14      	ite	ne
 800ae8c:	2202      	movne	r2, #2
 800ae8e:	2201      	moveq	r2, #1
 800ae90:	6122      	str	r2, [r4, #16]
 800ae92:	b1bd      	cbz	r5, 800aec4 <__d2b+0x94>
 800ae94:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ae98:	4405      	add	r5, r0
 800ae9a:	603d      	str	r5, [r7, #0]
 800ae9c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aea0:	6030      	str	r0, [r6, #0]
 800aea2:	4620      	mov	r0, r4
 800aea4:	b003      	add	sp, #12
 800aea6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aeaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aeae:	e7d6      	b.n	800ae5e <__d2b+0x2e>
 800aeb0:	6161      	str	r1, [r4, #20]
 800aeb2:	e7e7      	b.n	800ae84 <__d2b+0x54>
 800aeb4:	a801      	add	r0, sp, #4
 800aeb6:	f7ff fd61 	bl	800a97c <__lo0bits>
 800aeba:	9b01      	ldr	r3, [sp, #4]
 800aebc:	6163      	str	r3, [r4, #20]
 800aebe:	3020      	adds	r0, #32
 800aec0:	2201      	movs	r2, #1
 800aec2:	e7e5      	b.n	800ae90 <__d2b+0x60>
 800aec4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aec8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aecc:	6038      	str	r0, [r7, #0]
 800aece:	6918      	ldr	r0, [r3, #16]
 800aed0:	f7ff fd34 	bl	800a93c <__hi0bits>
 800aed4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aed8:	e7e2      	b.n	800aea0 <__d2b+0x70>
 800aeda:	bf00      	nop
 800aedc:	0800bb00 	.word	0x0800bb00
 800aee0:	0800bb11 	.word	0x0800bb11

0800aee4 <__ssputs_r>:
 800aee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aee8:	688e      	ldr	r6, [r1, #8]
 800aeea:	461f      	mov	r7, r3
 800aeec:	42be      	cmp	r6, r7
 800aeee:	680b      	ldr	r3, [r1, #0]
 800aef0:	4682      	mov	sl, r0
 800aef2:	460c      	mov	r4, r1
 800aef4:	4690      	mov	r8, r2
 800aef6:	d82c      	bhi.n	800af52 <__ssputs_r+0x6e>
 800aef8:	898a      	ldrh	r2, [r1, #12]
 800aefa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aefe:	d026      	beq.n	800af4e <__ssputs_r+0x6a>
 800af00:	6965      	ldr	r5, [r4, #20]
 800af02:	6909      	ldr	r1, [r1, #16]
 800af04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800af08:	eba3 0901 	sub.w	r9, r3, r1
 800af0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800af10:	1c7b      	adds	r3, r7, #1
 800af12:	444b      	add	r3, r9
 800af14:	106d      	asrs	r5, r5, #1
 800af16:	429d      	cmp	r5, r3
 800af18:	bf38      	it	cc
 800af1a:	461d      	movcc	r5, r3
 800af1c:	0553      	lsls	r3, r2, #21
 800af1e:	d527      	bpl.n	800af70 <__ssputs_r+0x8c>
 800af20:	4629      	mov	r1, r5
 800af22:	f7ff fbd7 	bl	800a6d4 <_malloc_r>
 800af26:	4606      	mov	r6, r0
 800af28:	b360      	cbz	r0, 800af84 <__ssputs_r+0xa0>
 800af2a:	6921      	ldr	r1, [r4, #16]
 800af2c:	464a      	mov	r2, r9
 800af2e:	f000 fbe3 	bl	800b6f8 <memcpy>
 800af32:	89a3      	ldrh	r3, [r4, #12]
 800af34:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800af38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af3c:	81a3      	strh	r3, [r4, #12]
 800af3e:	6126      	str	r6, [r4, #16]
 800af40:	6165      	str	r5, [r4, #20]
 800af42:	444e      	add	r6, r9
 800af44:	eba5 0509 	sub.w	r5, r5, r9
 800af48:	6026      	str	r6, [r4, #0]
 800af4a:	60a5      	str	r5, [r4, #8]
 800af4c:	463e      	mov	r6, r7
 800af4e:	42be      	cmp	r6, r7
 800af50:	d900      	bls.n	800af54 <__ssputs_r+0x70>
 800af52:	463e      	mov	r6, r7
 800af54:	6820      	ldr	r0, [r4, #0]
 800af56:	4632      	mov	r2, r6
 800af58:	4641      	mov	r1, r8
 800af5a:	f000 fba3 	bl	800b6a4 <memmove>
 800af5e:	68a3      	ldr	r3, [r4, #8]
 800af60:	1b9b      	subs	r3, r3, r6
 800af62:	60a3      	str	r3, [r4, #8]
 800af64:	6823      	ldr	r3, [r4, #0]
 800af66:	4433      	add	r3, r6
 800af68:	6023      	str	r3, [r4, #0]
 800af6a:	2000      	movs	r0, #0
 800af6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af70:	462a      	mov	r2, r5
 800af72:	f000 fc15 	bl	800b7a0 <_realloc_r>
 800af76:	4606      	mov	r6, r0
 800af78:	2800      	cmp	r0, #0
 800af7a:	d1e0      	bne.n	800af3e <__ssputs_r+0x5a>
 800af7c:	6921      	ldr	r1, [r4, #16]
 800af7e:	4650      	mov	r0, sl
 800af80:	f7ff fb34 	bl	800a5ec <_free_r>
 800af84:	230c      	movs	r3, #12
 800af86:	f8ca 3000 	str.w	r3, [sl]
 800af8a:	89a3      	ldrh	r3, [r4, #12]
 800af8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af90:	81a3      	strh	r3, [r4, #12]
 800af92:	f04f 30ff 	mov.w	r0, #4294967295
 800af96:	e7e9      	b.n	800af6c <__ssputs_r+0x88>

0800af98 <_svfiprintf_r>:
 800af98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af9c:	4698      	mov	r8, r3
 800af9e:	898b      	ldrh	r3, [r1, #12]
 800afa0:	061b      	lsls	r3, r3, #24
 800afa2:	b09d      	sub	sp, #116	; 0x74
 800afa4:	4607      	mov	r7, r0
 800afa6:	460d      	mov	r5, r1
 800afa8:	4614      	mov	r4, r2
 800afaa:	d50e      	bpl.n	800afca <_svfiprintf_r+0x32>
 800afac:	690b      	ldr	r3, [r1, #16]
 800afae:	b963      	cbnz	r3, 800afca <_svfiprintf_r+0x32>
 800afb0:	2140      	movs	r1, #64	; 0x40
 800afb2:	f7ff fb8f 	bl	800a6d4 <_malloc_r>
 800afb6:	6028      	str	r0, [r5, #0]
 800afb8:	6128      	str	r0, [r5, #16]
 800afba:	b920      	cbnz	r0, 800afc6 <_svfiprintf_r+0x2e>
 800afbc:	230c      	movs	r3, #12
 800afbe:	603b      	str	r3, [r7, #0]
 800afc0:	f04f 30ff 	mov.w	r0, #4294967295
 800afc4:	e0d0      	b.n	800b168 <_svfiprintf_r+0x1d0>
 800afc6:	2340      	movs	r3, #64	; 0x40
 800afc8:	616b      	str	r3, [r5, #20]
 800afca:	2300      	movs	r3, #0
 800afcc:	9309      	str	r3, [sp, #36]	; 0x24
 800afce:	2320      	movs	r3, #32
 800afd0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800afd4:	f8cd 800c 	str.w	r8, [sp, #12]
 800afd8:	2330      	movs	r3, #48	; 0x30
 800afda:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b180 <_svfiprintf_r+0x1e8>
 800afde:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800afe2:	f04f 0901 	mov.w	r9, #1
 800afe6:	4623      	mov	r3, r4
 800afe8:	469a      	mov	sl, r3
 800afea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afee:	b10a      	cbz	r2, 800aff4 <_svfiprintf_r+0x5c>
 800aff0:	2a25      	cmp	r2, #37	; 0x25
 800aff2:	d1f9      	bne.n	800afe8 <_svfiprintf_r+0x50>
 800aff4:	ebba 0b04 	subs.w	fp, sl, r4
 800aff8:	d00b      	beq.n	800b012 <_svfiprintf_r+0x7a>
 800affa:	465b      	mov	r3, fp
 800affc:	4622      	mov	r2, r4
 800affe:	4629      	mov	r1, r5
 800b000:	4638      	mov	r0, r7
 800b002:	f7ff ff6f 	bl	800aee4 <__ssputs_r>
 800b006:	3001      	adds	r0, #1
 800b008:	f000 80a9 	beq.w	800b15e <_svfiprintf_r+0x1c6>
 800b00c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b00e:	445a      	add	r2, fp
 800b010:	9209      	str	r2, [sp, #36]	; 0x24
 800b012:	f89a 3000 	ldrb.w	r3, [sl]
 800b016:	2b00      	cmp	r3, #0
 800b018:	f000 80a1 	beq.w	800b15e <_svfiprintf_r+0x1c6>
 800b01c:	2300      	movs	r3, #0
 800b01e:	f04f 32ff 	mov.w	r2, #4294967295
 800b022:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b026:	f10a 0a01 	add.w	sl, sl, #1
 800b02a:	9304      	str	r3, [sp, #16]
 800b02c:	9307      	str	r3, [sp, #28]
 800b02e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b032:	931a      	str	r3, [sp, #104]	; 0x68
 800b034:	4654      	mov	r4, sl
 800b036:	2205      	movs	r2, #5
 800b038:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b03c:	4850      	ldr	r0, [pc, #320]	; (800b180 <_svfiprintf_r+0x1e8>)
 800b03e:	f7f5 f8d7 	bl	80001f0 <memchr>
 800b042:	9a04      	ldr	r2, [sp, #16]
 800b044:	b9d8      	cbnz	r0, 800b07e <_svfiprintf_r+0xe6>
 800b046:	06d0      	lsls	r0, r2, #27
 800b048:	bf44      	itt	mi
 800b04a:	2320      	movmi	r3, #32
 800b04c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b050:	0711      	lsls	r1, r2, #28
 800b052:	bf44      	itt	mi
 800b054:	232b      	movmi	r3, #43	; 0x2b
 800b056:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b05a:	f89a 3000 	ldrb.w	r3, [sl]
 800b05e:	2b2a      	cmp	r3, #42	; 0x2a
 800b060:	d015      	beq.n	800b08e <_svfiprintf_r+0xf6>
 800b062:	9a07      	ldr	r2, [sp, #28]
 800b064:	4654      	mov	r4, sl
 800b066:	2000      	movs	r0, #0
 800b068:	f04f 0c0a 	mov.w	ip, #10
 800b06c:	4621      	mov	r1, r4
 800b06e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b072:	3b30      	subs	r3, #48	; 0x30
 800b074:	2b09      	cmp	r3, #9
 800b076:	d94d      	bls.n	800b114 <_svfiprintf_r+0x17c>
 800b078:	b1b0      	cbz	r0, 800b0a8 <_svfiprintf_r+0x110>
 800b07a:	9207      	str	r2, [sp, #28]
 800b07c:	e014      	b.n	800b0a8 <_svfiprintf_r+0x110>
 800b07e:	eba0 0308 	sub.w	r3, r0, r8
 800b082:	fa09 f303 	lsl.w	r3, r9, r3
 800b086:	4313      	orrs	r3, r2
 800b088:	9304      	str	r3, [sp, #16]
 800b08a:	46a2      	mov	sl, r4
 800b08c:	e7d2      	b.n	800b034 <_svfiprintf_r+0x9c>
 800b08e:	9b03      	ldr	r3, [sp, #12]
 800b090:	1d19      	adds	r1, r3, #4
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	9103      	str	r1, [sp, #12]
 800b096:	2b00      	cmp	r3, #0
 800b098:	bfbb      	ittet	lt
 800b09a:	425b      	neglt	r3, r3
 800b09c:	f042 0202 	orrlt.w	r2, r2, #2
 800b0a0:	9307      	strge	r3, [sp, #28]
 800b0a2:	9307      	strlt	r3, [sp, #28]
 800b0a4:	bfb8      	it	lt
 800b0a6:	9204      	strlt	r2, [sp, #16]
 800b0a8:	7823      	ldrb	r3, [r4, #0]
 800b0aa:	2b2e      	cmp	r3, #46	; 0x2e
 800b0ac:	d10c      	bne.n	800b0c8 <_svfiprintf_r+0x130>
 800b0ae:	7863      	ldrb	r3, [r4, #1]
 800b0b0:	2b2a      	cmp	r3, #42	; 0x2a
 800b0b2:	d134      	bne.n	800b11e <_svfiprintf_r+0x186>
 800b0b4:	9b03      	ldr	r3, [sp, #12]
 800b0b6:	1d1a      	adds	r2, r3, #4
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	9203      	str	r2, [sp, #12]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	bfb8      	it	lt
 800b0c0:	f04f 33ff 	movlt.w	r3, #4294967295
 800b0c4:	3402      	adds	r4, #2
 800b0c6:	9305      	str	r3, [sp, #20]
 800b0c8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b190 <_svfiprintf_r+0x1f8>
 800b0cc:	7821      	ldrb	r1, [r4, #0]
 800b0ce:	2203      	movs	r2, #3
 800b0d0:	4650      	mov	r0, sl
 800b0d2:	f7f5 f88d 	bl	80001f0 <memchr>
 800b0d6:	b138      	cbz	r0, 800b0e8 <_svfiprintf_r+0x150>
 800b0d8:	9b04      	ldr	r3, [sp, #16]
 800b0da:	eba0 000a 	sub.w	r0, r0, sl
 800b0de:	2240      	movs	r2, #64	; 0x40
 800b0e0:	4082      	lsls	r2, r0
 800b0e2:	4313      	orrs	r3, r2
 800b0e4:	3401      	adds	r4, #1
 800b0e6:	9304      	str	r3, [sp, #16]
 800b0e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0ec:	4825      	ldr	r0, [pc, #148]	; (800b184 <_svfiprintf_r+0x1ec>)
 800b0ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b0f2:	2206      	movs	r2, #6
 800b0f4:	f7f5 f87c 	bl	80001f0 <memchr>
 800b0f8:	2800      	cmp	r0, #0
 800b0fa:	d038      	beq.n	800b16e <_svfiprintf_r+0x1d6>
 800b0fc:	4b22      	ldr	r3, [pc, #136]	; (800b188 <_svfiprintf_r+0x1f0>)
 800b0fe:	bb1b      	cbnz	r3, 800b148 <_svfiprintf_r+0x1b0>
 800b100:	9b03      	ldr	r3, [sp, #12]
 800b102:	3307      	adds	r3, #7
 800b104:	f023 0307 	bic.w	r3, r3, #7
 800b108:	3308      	adds	r3, #8
 800b10a:	9303      	str	r3, [sp, #12]
 800b10c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b10e:	4433      	add	r3, r6
 800b110:	9309      	str	r3, [sp, #36]	; 0x24
 800b112:	e768      	b.n	800afe6 <_svfiprintf_r+0x4e>
 800b114:	fb0c 3202 	mla	r2, ip, r2, r3
 800b118:	460c      	mov	r4, r1
 800b11a:	2001      	movs	r0, #1
 800b11c:	e7a6      	b.n	800b06c <_svfiprintf_r+0xd4>
 800b11e:	2300      	movs	r3, #0
 800b120:	3401      	adds	r4, #1
 800b122:	9305      	str	r3, [sp, #20]
 800b124:	4619      	mov	r1, r3
 800b126:	f04f 0c0a 	mov.w	ip, #10
 800b12a:	4620      	mov	r0, r4
 800b12c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b130:	3a30      	subs	r2, #48	; 0x30
 800b132:	2a09      	cmp	r2, #9
 800b134:	d903      	bls.n	800b13e <_svfiprintf_r+0x1a6>
 800b136:	2b00      	cmp	r3, #0
 800b138:	d0c6      	beq.n	800b0c8 <_svfiprintf_r+0x130>
 800b13a:	9105      	str	r1, [sp, #20]
 800b13c:	e7c4      	b.n	800b0c8 <_svfiprintf_r+0x130>
 800b13e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b142:	4604      	mov	r4, r0
 800b144:	2301      	movs	r3, #1
 800b146:	e7f0      	b.n	800b12a <_svfiprintf_r+0x192>
 800b148:	ab03      	add	r3, sp, #12
 800b14a:	9300      	str	r3, [sp, #0]
 800b14c:	462a      	mov	r2, r5
 800b14e:	4b0f      	ldr	r3, [pc, #60]	; (800b18c <_svfiprintf_r+0x1f4>)
 800b150:	a904      	add	r1, sp, #16
 800b152:	4638      	mov	r0, r7
 800b154:	f7fd fe52 	bl	8008dfc <_printf_float>
 800b158:	1c42      	adds	r2, r0, #1
 800b15a:	4606      	mov	r6, r0
 800b15c:	d1d6      	bne.n	800b10c <_svfiprintf_r+0x174>
 800b15e:	89ab      	ldrh	r3, [r5, #12]
 800b160:	065b      	lsls	r3, r3, #25
 800b162:	f53f af2d 	bmi.w	800afc0 <_svfiprintf_r+0x28>
 800b166:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b168:	b01d      	add	sp, #116	; 0x74
 800b16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b16e:	ab03      	add	r3, sp, #12
 800b170:	9300      	str	r3, [sp, #0]
 800b172:	462a      	mov	r2, r5
 800b174:	4b05      	ldr	r3, [pc, #20]	; (800b18c <_svfiprintf_r+0x1f4>)
 800b176:	a904      	add	r1, sp, #16
 800b178:	4638      	mov	r0, r7
 800b17a:	f7fe f8e3 	bl	8009344 <_printf_i>
 800b17e:	e7eb      	b.n	800b158 <_svfiprintf_r+0x1c0>
 800b180:	0800bc6c 	.word	0x0800bc6c
 800b184:	0800bc76 	.word	0x0800bc76
 800b188:	08008dfd 	.word	0x08008dfd
 800b18c:	0800aee5 	.word	0x0800aee5
 800b190:	0800bc72 	.word	0x0800bc72

0800b194 <__sfputc_r>:
 800b194:	6893      	ldr	r3, [r2, #8]
 800b196:	3b01      	subs	r3, #1
 800b198:	2b00      	cmp	r3, #0
 800b19a:	b410      	push	{r4}
 800b19c:	6093      	str	r3, [r2, #8]
 800b19e:	da08      	bge.n	800b1b2 <__sfputc_r+0x1e>
 800b1a0:	6994      	ldr	r4, [r2, #24]
 800b1a2:	42a3      	cmp	r3, r4
 800b1a4:	db01      	blt.n	800b1aa <__sfputc_r+0x16>
 800b1a6:	290a      	cmp	r1, #10
 800b1a8:	d103      	bne.n	800b1b2 <__sfputc_r+0x1e>
 800b1aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1ae:	f000 b9e3 	b.w	800b578 <__swbuf_r>
 800b1b2:	6813      	ldr	r3, [r2, #0]
 800b1b4:	1c58      	adds	r0, r3, #1
 800b1b6:	6010      	str	r0, [r2, #0]
 800b1b8:	7019      	strb	r1, [r3, #0]
 800b1ba:	4608      	mov	r0, r1
 800b1bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1c0:	4770      	bx	lr

0800b1c2 <__sfputs_r>:
 800b1c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1c4:	4606      	mov	r6, r0
 800b1c6:	460f      	mov	r7, r1
 800b1c8:	4614      	mov	r4, r2
 800b1ca:	18d5      	adds	r5, r2, r3
 800b1cc:	42ac      	cmp	r4, r5
 800b1ce:	d101      	bne.n	800b1d4 <__sfputs_r+0x12>
 800b1d0:	2000      	movs	r0, #0
 800b1d2:	e007      	b.n	800b1e4 <__sfputs_r+0x22>
 800b1d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1d8:	463a      	mov	r2, r7
 800b1da:	4630      	mov	r0, r6
 800b1dc:	f7ff ffda 	bl	800b194 <__sfputc_r>
 800b1e0:	1c43      	adds	r3, r0, #1
 800b1e2:	d1f3      	bne.n	800b1cc <__sfputs_r+0xa>
 800b1e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b1e8 <_vfiprintf_r>:
 800b1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1ec:	460d      	mov	r5, r1
 800b1ee:	b09d      	sub	sp, #116	; 0x74
 800b1f0:	4614      	mov	r4, r2
 800b1f2:	4698      	mov	r8, r3
 800b1f4:	4606      	mov	r6, r0
 800b1f6:	b118      	cbz	r0, 800b200 <_vfiprintf_r+0x18>
 800b1f8:	6a03      	ldr	r3, [r0, #32]
 800b1fa:	b90b      	cbnz	r3, 800b200 <_vfiprintf_r+0x18>
 800b1fc:	f7fe fa50 	bl	80096a0 <__sinit>
 800b200:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b202:	07d9      	lsls	r1, r3, #31
 800b204:	d405      	bmi.n	800b212 <_vfiprintf_r+0x2a>
 800b206:	89ab      	ldrh	r3, [r5, #12]
 800b208:	059a      	lsls	r2, r3, #22
 800b20a:	d402      	bmi.n	800b212 <_vfiprintf_r+0x2a>
 800b20c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b20e:	f7fe fb70 	bl	80098f2 <__retarget_lock_acquire_recursive>
 800b212:	89ab      	ldrh	r3, [r5, #12]
 800b214:	071b      	lsls	r3, r3, #28
 800b216:	d501      	bpl.n	800b21c <_vfiprintf_r+0x34>
 800b218:	692b      	ldr	r3, [r5, #16]
 800b21a:	b99b      	cbnz	r3, 800b244 <_vfiprintf_r+0x5c>
 800b21c:	4629      	mov	r1, r5
 800b21e:	4630      	mov	r0, r6
 800b220:	f000 f9e8 	bl	800b5f4 <__swsetup_r>
 800b224:	b170      	cbz	r0, 800b244 <_vfiprintf_r+0x5c>
 800b226:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b228:	07dc      	lsls	r4, r3, #31
 800b22a:	d504      	bpl.n	800b236 <_vfiprintf_r+0x4e>
 800b22c:	f04f 30ff 	mov.w	r0, #4294967295
 800b230:	b01d      	add	sp, #116	; 0x74
 800b232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b236:	89ab      	ldrh	r3, [r5, #12]
 800b238:	0598      	lsls	r0, r3, #22
 800b23a:	d4f7      	bmi.n	800b22c <_vfiprintf_r+0x44>
 800b23c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b23e:	f7fe fb59 	bl	80098f4 <__retarget_lock_release_recursive>
 800b242:	e7f3      	b.n	800b22c <_vfiprintf_r+0x44>
 800b244:	2300      	movs	r3, #0
 800b246:	9309      	str	r3, [sp, #36]	; 0x24
 800b248:	2320      	movs	r3, #32
 800b24a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b24e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b252:	2330      	movs	r3, #48	; 0x30
 800b254:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b408 <_vfiprintf_r+0x220>
 800b258:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b25c:	f04f 0901 	mov.w	r9, #1
 800b260:	4623      	mov	r3, r4
 800b262:	469a      	mov	sl, r3
 800b264:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b268:	b10a      	cbz	r2, 800b26e <_vfiprintf_r+0x86>
 800b26a:	2a25      	cmp	r2, #37	; 0x25
 800b26c:	d1f9      	bne.n	800b262 <_vfiprintf_r+0x7a>
 800b26e:	ebba 0b04 	subs.w	fp, sl, r4
 800b272:	d00b      	beq.n	800b28c <_vfiprintf_r+0xa4>
 800b274:	465b      	mov	r3, fp
 800b276:	4622      	mov	r2, r4
 800b278:	4629      	mov	r1, r5
 800b27a:	4630      	mov	r0, r6
 800b27c:	f7ff ffa1 	bl	800b1c2 <__sfputs_r>
 800b280:	3001      	adds	r0, #1
 800b282:	f000 80a9 	beq.w	800b3d8 <_vfiprintf_r+0x1f0>
 800b286:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b288:	445a      	add	r2, fp
 800b28a:	9209      	str	r2, [sp, #36]	; 0x24
 800b28c:	f89a 3000 	ldrb.w	r3, [sl]
 800b290:	2b00      	cmp	r3, #0
 800b292:	f000 80a1 	beq.w	800b3d8 <_vfiprintf_r+0x1f0>
 800b296:	2300      	movs	r3, #0
 800b298:	f04f 32ff 	mov.w	r2, #4294967295
 800b29c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2a0:	f10a 0a01 	add.w	sl, sl, #1
 800b2a4:	9304      	str	r3, [sp, #16]
 800b2a6:	9307      	str	r3, [sp, #28]
 800b2a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b2ac:	931a      	str	r3, [sp, #104]	; 0x68
 800b2ae:	4654      	mov	r4, sl
 800b2b0:	2205      	movs	r2, #5
 800b2b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2b6:	4854      	ldr	r0, [pc, #336]	; (800b408 <_vfiprintf_r+0x220>)
 800b2b8:	f7f4 ff9a 	bl	80001f0 <memchr>
 800b2bc:	9a04      	ldr	r2, [sp, #16]
 800b2be:	b9d8      	cbnz	r0, 800b2f8 <_vfiprintf_r+0x110>
 800b2c0:	06d1      	lsls	r1, r2, #27
 800b2c2:	bf44      	itt	mi
 800b2c4:	2320      	movmi	r3, #32
 800b2c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2ca:	0713      	lsls	r3, r2, #28
 800b2cc:	bf44      	itt	mi
 800b2ce:	232b      	movmi	r3, #43	; 0x2b
 800b2d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2d4:	f89a 3000 	ldrb.w	r3, [sl]
 800b2d8:	2b2a      	cmp	r3, #42	; 0x2a
 800b2da:	d015      	beq.n	800b308 <_vfiprintf_r+0x120>
 800b2dc:	9a07      	ldr	r2, [sp, #28]
 800b2de:	4654      	mov	r4, sl
 800b2e0:	2000      	movs	r0, #0
 800b2e2:	f04f 0c0a 	mov.w	ip, #10
 800b2e6:	4621      	mov	r1, r4
 800b2e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2ec:	3b30      	subs	r3, #48	; 0x30
 800b2ee:	2b09      	cmp	r3, #9
 800b2f0:	d94d      	bls.n	800b38e <_vfiprintf_r+0x1a6>
 800b2f2:	b1b0      	cbz	r0, 800b322 <_vfiprintf_r+0x13a>
 800b2f4:	9207      	str	r2, [sp, #28]
 800b2f6:	e014      	b.n	800b322 <_vfiprintf_r+0x13a>
 800b2f8:	eba0 0308 	sub.w	r3, r0, r8
 800b2fc:	fa09 f303 	lsl.w	r3, r9, r3
 800b300:	4313      	orrs	r3, r2
 800b302:	9304      	str	r3, [sp, #16]
 800b304:	46a2      	mov	sl, r4
 800b306:	e7d2      	b.n	800b2ae <_vfiprintf_r+0xc6>
 800b308:	9b03      	ldr	r3, [sp, #12]
 800b30a:	1d19      	adds	r1, r3, #4
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	9103      	str	r1, [sp, #12]
 800b310:	2b00      	cmp	r3, #0
 800b312:	bfbb      	ittet	lt
 800b314:	425b      	neglt	r3, r3
 800b316:	f042 0202 	orrlt.w	r2, r2, #2
 800b31a:	9307      	strge	r3, [sp, #28]
 800b31c:	9307      	strlt	r3, [sp, #28]
 800b31e:	bfb8      	it	lt
 800b320:	9204      	strlt	r2, [sp, #16]
 800b322:	7823      	ldrb	r3, [r4, #0]
 800b324:	2b2e      	cmp	r3, #46	; 0x2e
 800b326:	d10c      	bne.n	800b342 <_vfiprintf_r+0x15a>
 800b328:	7863      	ldrb	r3, [r4, #1]
 800b32a:	2b2a      	cmp	r3, #42	; 0x2a
 800b32c:	d134      	bne.n	800b398 <_vfiprintf_r+0x1b0>
 800b32e:	9b03      	ldr	r3, [sp, #12]
 800b330:	1d1a      	adds	r2, r3, #4
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	9203      	str	r2, [sp, #12]
 800b336:	2b00      	cmp	r3, #0
 800b338:	bfb8      	it	lt
 800b33a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b33e:	3402      	adds	r4, #2
 800b340:	9305      	str	r3, [sp, #20]
 800b342:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b418 <_vfiprintf_r+0x230>
 800b346:	7821      	ldrb	r1, [r4, #0]
 800b348:	2203      	movs	r2, #3
 800b34a:	4650      	mov	r0, sl
 800b34c:	f7f4 ff50 	bl	80001f0 <memchr>
 800b350:	b138      	cbz	r0, 800b362 <_vfiprintf_r+0x17a>
 800b352:	9b04      	ldr	r3, [sp, #16]
 800b354:	eba0 000a 	sub.w	r0, r0, sl
 800b358:	2240      	movs	r2, #64	; 0x40
 800b35a:	4082      	lsls	r2, r0
 800b35c:	4313      	orrs	r3, r2
 800b35e:	3401      	adds	r4, #1
 800b360:	9304      	str	r3, [sp, #16]
 800b362:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b366:	4829      	ldr	r0, [pc, #164]	; (800b40c <_vfiprintf_r+0x224>)
 800b368:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b36c:	2206      	movs	r2, #6
 800b36e:	f7f4 ff3f 	bl	80001f0 <memchr>
 800b372:	2800      	cmp	r0, #0
 800b374:	d03f      	beq.n	800b3f6 <_vfiprintf_r+0x20e>
 800b376:	4b26      	ldr	r3, [pc, #152]	; (800b410 <_vfiprintf_r+0x228>)
 800b378:	bb1b      	cbnz	r3, 800b3c2 <_vfiprintf_r+0x1da>
 800b37a:	9b03      	ldr	r3, [sp, #12]
 800b37c:	3307      	adds	r3, #7
 800b37e:	f023 0307 	bic.w	r3, r3, #7
 800b382:	3308      	adds	r3, #8
 800b384:	9303      	str	r3, [sp, #12]
 800b386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b388:	443b      	add	r3, r7
 800b38a:	9309      	str	r3, [sp, #36]	; 0x24
 800b38c:	e768      	b.n	800b260 <_vfiprintf_r+0x78>
 800b38e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b392:	460c      	mov	r4, r1
 800b394:	2001      	movs	r0, #1
 800b396:	e7a6      	b.n	800b2e6 <_vfiprintf_r+0xfe>
 800b398:	2300      	movs	r3, #0
 800b39a:	3401      	adds	r4, #1
 800b39c:	9305      	str	r3, [sp, #20]
 800b39e:	4619      	mov	r1, r3
 800b3a0:	f04f 0c0a 	mov.w	ip, #10
 800b3a4:	4620      	mov	r0, r4
 800b3a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3aa:	3a30      	subs	r2, #48	; 0x30
 800b3ac:	2a09      	cmp	r2, #9
 800b3ae:	d903      	bls.n	800b3b8 <_vfiprintf_r+0x1d0>
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d0c6      	beq.n	800b342 <_vfiprintf_r+0x15a>
 800b3b4:	9105      	str	r1, [sp, #20]
 800b3b6:	e7c4      	b.n	800b342 <_vfiprintf_r+0x15a>
 800b3b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3bc:	4604      	mov	r4, r0
 800b3be:	2301      	movs	r3, #1
 800b3c0:	e7f0      	b.n	800b3a4 <_vfiprintf_r+0x1bc>
 800b3c2:	ab03      	add	r3, sp, #12
 800b3c4:	9300      	str	r3, [sp, #0]
 800b3c6:	462a      	mov	r2, r5
 800b3c8:	4b12      	ldr	r3, [pc, #72]	; (800b414 <_vfiprintf_r+0x22c>)
 800b3ca:	a904      	add	r1, sp, #16
 800b3cc:	4630      	mov	r0, r6
 800b3ce:	f7fd fd15 	bl	8008dfc <_printf_float>
 800b3d2:	4607      	mov	r7, r0
 800b3d4:	1c78      	adds	r0, r7, #1
 800b3d6:	d1d6      	bne.n	800b386 <_vfiprintf_r+0x19e>
 800b3d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3da:	07d9      	lsls	r1, r3, #31
 800b3dc:	d405      	bmi.n	800b3ea <_vfiprintf_r+0x202>
 800b3de:	89ab      	ldrh	r3, [r5, #12]
 800b3e0:	059a      	lsls	r2, r3, #22
 800b3e2:	d402      	bmi.n	800b3ea <_vfiprintf_r+0x202>
 800b3e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3e6:	f7fe fa85 	bl	80098f4 <__retarget_lock_release_recursive>
 800b3ea:	89ab      	ldrh	r3, [r5, #12]
 800b3ec:	065b      	lsls	r3, r3, #25
 800b3ee:	f53f af1d 	bmi.w	800b22c <_vfiprintf_r+0x44>
 800b3f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b3f4:	e71c      	b.n	800b230 <_vfiprintf_r+0x48>
 800b3f6:	ab03      	add	r3, sp, #12
 800b3f8:	9300      	str	r3, [sp, #0]
 800b3fa:	462a      	mov	r2, r5
 800b3fc:	4b05      	ldr	r3, [pc, #20]	; (800b414 <_vfiprintf_r+0x22c>)
 800b3fe:	a904      	add	r1, sp, #16
 800b400:	4630      	mov	r0, r6
 800b402:	f7fd ff9f 	bl	8009344 <_printf_i>
 800b406:	e7e4      	b.n	800b3d2 <_vfiprintf_r+0x1ea>
 800b408:	0800bc6c 	.word	0x0800bc6c
 800b40c:	0800bc76 	.word	0x0800bc76
 800b410:	08008dfd 	.word	0x08008dfd
 800b414:	0800b1c3 	.word	0x0800b1c3
 800b418:	0800bc72 	.word	0x0800bc72

0800b41c <__sflush_r>:
 800b41c:	898a      	ldrh	r2, [r1, #12]
 800b41e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b422:	4605      	mov	r5, r0
 800b424:	0710      	lsls	r0, r2, #28
 800b426:	460c      	mov	r4, r1
 800b428:	d458      	bmi.n	800b4dc <__sflush_r+0xc0>
 800b42a:	684b      	ldr	r3, [r1, #4]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	dc05      	bgt.n	800b43c <__sflush_r+0x20>
 800b430:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b432:	2b00      	cmp	r3, #0
 800b434:	dc02      	bgt.n	800b43c <__sflush_r+0x20>
 800b436:	2000      	movs	r0, #0
 800b438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b43c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b43e:	2e00      	cmp	r6, #0
 800b440:	d0f9      	beq.n	800b436 <__sflush_r+0x1a>
 800b442:	2300      	movs	r3, #0
 800b444:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b448:	682f      	ldr	r7, [r5, #0]
 800b44a:	6a21      	ldr	r1, [r4, #32]
 800b44c:	602b      	str	r3, [r5, #0]
 800b44e:	d032      	beq.n	800b4b6 <__sflush_r+0x9a>
 800b450:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b452:	89a3      	ldrh	r3, [r4, #12]
 800b454:	075a      	lsls	r2, r3, #29
 800b456:	d505      	bpl.n	800b464 <__sflush_r+0x48>
 800b458:	6863      	ldr	r3, [r4, #4]
 800b45a:	1ac0      	subs	r0, r0, r3
 800b45c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b45e:	b10b      	cbz	r3, 800b464 <__sflush_r+0x48>
 800b460:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b462:	1ac0      	subs	r0, r0, r3
 800b464:	2300      	movs	r3, #0
 800b466:	4602      	mov	r2, r0
 800b468:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b46a:	6a21      	ldr	r1, [r4, #32]
 800b46c:	4628      	mov	r0, r5
 800b46e:	47b0      	blx	r6
 800b470:	1c43      	adds	r3, r0, #1
 800b472:	89a3      	ldrh	r3, [r4, #12]
 800b474:	d106      	bne.n	800b484 <__sflush_r+0x68>
 800b476:	6829      	ldr	r1, [r5, #0]
 800b478:	291d      	cmp	r1, #29
 800b47a:	d82b      	bhi.n	800b4d4 <__sflush_r+0xb8>
 800b47c:	4a29      	ldr	r2, [pc, #164]	; (800b524 <__sflush_r+0x108>)
 800b47e:	410a      	asrs	r2, r1
 800b480:	07d6      	lsls	r6, r2, #31
 800b482:	d427      	bmi.n	800b4d4 <__sflush_r+0xb8>
 800b484:	2200      	movs	r2, #0
 800b486:	6062      	str	r2, [r4, #4]
 800b488:	04d9      	lsls	r1, r3, #19
 800b48a:	6922      	ldr	r2, [r4, #16]
 800b48c:	6022      	str	r2, [r4, #0]
 800b48e:	d504      	bpl.n	800b49a <__sflush_r+0x7e>
 800b490:	1c42      	adds	r2, r0, #1
 800b492:	d101      	bne.n	800b498 <__sflush_r+0x7c>
 800b494:	682b      	ldr	r3, [r5, #0]
 800b496:	b903      	cbnz	r3, 800b49a <__sflush_r+0x7e>
 800b498:	6560      	str	r0, [r4, #84]	; 0x54
 800b49a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b49c:	602f      	str	r7, [r5, #0]
 800b49e:	2900      	cmp	r1, #0
 800b4a0:	d0c9      	beq.n	800b436 <__sflush_r+0x1a>
 800b4a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b4a6:	4299      	cmp	r1, r3
 800b4a8:	d002      	beq.n	800b4b0 <__sflush_r+0x94>
 800b4aa:	4628      	mov	r0, r5
 800b4ac:	f7ff f89e 	bl	800a5ec <_free_r>
 800b4b0:	2000      	movs	r0, #0
 800b4b2:	6360      	str	r0, [r4, #52]	; 0x34
 800b4b4:	e7c0      	b.n	800b438 <__sflush_r+0x1c>
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	4628      	mov	r0, r5
 800b4ba:	47b0      	blx	r6
 800b4bc:	1c41      	adds	r1, r0, #1
 800b4be:	d1c8      	bne.n	800b452 <__sflush_r+0x36>
 800b4c0:	682b      	ldr	r3, [r5, #0]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d0c5      	beq.n	800b452 <__sflush_r+0x36>
 800b4c6:	2b1d      	cmp	r3, #29
 800b4c8:	d001      	beq.n	800b4ce <__sflush_r+0xb2>
 800b4ca:	2b16      	cmp	r3, #22
 800b4cc:	d101      	bne.n	800b4d2 <__sflush_r+0xb6>
 800b4ce:	602f      	str	r7, [r5, #0]
 800b4d0:	e7b1      	b.n	800b436 <__sflush_r+0x1a>
 800b4d2:	89a3      	ldrh	r3, [r4, #12]
 800b4d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4d8:	81a3      	strh	r3, [r4, #12]
 800b4da:	e7ad      	b.n	800b438 <__sflush_r+0x1c>
 800b4dc:	690f      	ldr	r7, [r1, #16]
 800b4de:	2f00      	cmp	r7, #0
 800b4e0:	d0a9      	beq.n	800b436 <__sflush_r+0x1a>
 800b4e2:	0793      	lsls	r3, r2, #30
 800b4e4:	680e      	ldr	r6, [r1, #0]
 800b4e6:	bf08      	it	eq
 800b4e8:	694b      	ldreq	r3, [r1, #20]
 800b4ea:	600f      	str	r7, [r1, #0]
 800b4ec:	bf18      	it	ne
 800b4ee:	2300      	movne	r3, #0
 800b4f0:	eba6 0807 	sub.w	r8, r6, r7
 800b4f4:	608b      	str	r3, [r1, #8]
 800b4f6:	f1b8 0f00 	cmp.w	r8, #0
 800b4fa:	dd9c      	ble.n	800b436 <__sflush_r+0x1a>
 800b4fc:	6a21      	ldr	r1, [r4, #32]
 800b4fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b500:	4643      	mov	r3, r8
 800b502:	463a      	mov	r2, r7
 800b504:	4628      	mov	r0, r5
 800b506:	47b0      	blx	r6
 800b508:	2800      	cmp	r0, #0
 800b50a:	dc06      	bgt.n	800b51a <__sflush_r+0xfe>
 800b50c:	89a3      	ldrh	r3, [r4, #12]
 800b50e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b512:	81a3      	strh	r3, [r4, #12]
 800b514:	f04f 30ff 	mov.w	r0, #4294967295
 800b518:	e78e      	b.n	800b438 <__sflush_r+0x1c>
 800b51a:	4407      	add	r7, r0
 800b51c:	eba8 0800 	sub.w	r8, r8, r0
 800b520:	e7e9      	b.n	800b4f6 <__sflush_r+0xda>
 800b522:	bf00      	nop
 800b524:	dfbffffe 	.word	0xdfbffffe

0800b528 <_fflush_r>:
 800b528:	b538      	push	{r3, r4, r5, lr}
 800b52a:	690b      	ldr	r3, [r1, #16]
 800b52c:	4605      	mov	r5, r0
 800b52e:	460c      	mov	r4, r1
 800b530:	b913      	cbnz	r3, 800b538 <_fflush_r+0x10>
 800b532:	2500      	movs	r5, #0
 800b534:	4628      	mov	r0, r5
 800b536:	bd38      	pop	{r3, r4, r5, pc}
 800b538:	b118      	cbz	r0, 800b542 <_fflush_r+0x1a>
 800b53a:	6a03      	ldr	r3, [r0, #32]
 800b53c:	b90b      	cbnz	r3, 800b542 <_fflush_r+0x1a>
 800b53e:	f7fe f8af 	bl	80096a0 <__sinit>
 800b542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d0f3      	beq.n	800b532 <_fflush_r+0xa>
 800b54a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b54c:	07d0      	lsls	r0, r2, #31
 800b54e:	d404      	bmi.n	800b55a <_fflush_r+0x32>
 800b550:	0599      	lsls	r1, r3, #22
 800b552:	d402      	bmi.n	800b55a <_fflush_r+0x32>
 800b554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b556:	f7fe f9cc 	bl	80098f2 <__retarget_lock_acquire_recursive>
 800b55a:	4628      	mov	r0, r5
 800b55c:	4621      	mov	r1, r4
 800b55e:	f7ff ff5d 	bl	800b41c <__sflush_r>
 800b562:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b564:	07da      	lsls	r2, r3, #31
 800b566:	4605      	mov	r5, r0
 800b568:	d4e4      	bmi.n	800b534 <_fflush_r+0xc>
 800b56a:	89a3      	ldrh	r3, [r4, #12]
 800b56c:	059b      	lsls	r3, r3, #22
 800b56e:	d4e1      	bmi.n	800b534 <_fflush_r+0xc>
 800b570:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b572:	f7fe f9bf 	bl	80098f4 <__retarget_lock_release_recursive>
 800b576:	e7dd      	b.n	800b534 <_fflush_r+0xc>

0800b578 <__swbuf_r>:
 800b578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b57a:	460e      	mov	r6, r1
 800b57c:	4614      	mov	r4, r2
 800b57e:	4605      	mov	r5, r0
 800b580:	b118      	cbz	r0, 800b58a <__swbuf_r+0x12>
 800b582:	6a03      	ldr	r3, [r0, #32]
 800b584:	b90b      	cbnz	r3, 800b58a <__swbuf_r+0x12>
 800b586:	f7fe f88b 	bl	80096a0 <__sinit>
 800b58a:	69a3      	ldr	r3, [r4, #24]
 800b58c:	60a3      	str	r3, [r4, #8]
 800b58e:	89a3      	ldrh	r3, [r4, #12]
 800b590:	071a      	lsls	r2, r3, #28
 800b592:	d525      	bpl.n	800b5e0 <__swbuf_r+0x68>
 800b594:	6923      	ldr	r3, [r4, #16]
 800b596:	b31b      	cbz	r3, 800b5e0 <__swbuf_r+0x68>
 800b598:	6823      	ldr	r3, [r4, #0]
 800b59a:	6922      	ldr	r2, [r4, #16]
 800b59c:	1a98      	subs	r0, r3, r2
 800b59e:	6963      	ldr	r3, [r4, #20]
 800b5a0:	b2f6      	uxtb	r6, r6
 800b5a2:	4283      	cmp	r3, r0
 800b5a4:	4637      	mov	r7, r6
 800b5a6:	dc04      	bgt.n	800b5b2 <__swbuf_r+0x3a>
 800b5a8:	4621      	mov	r1, r4
 800b5aa:	4628      	mov	r0, r5
 800b5ac:	f7ff ffbc 	bl	800b528 <_fflush_r>
 800b5b0:	b9e0      	cbnz	r0, 800b5ec <__swbuf_r+0x74>
 800b5b2:	68a3      	ldr	r3, [r4, #8]
 800b5b4:	3b01      	subs	r3, #1
 800b5b6:	60a3      	str	r3, [r4, #8]
 800b5b8:	6823      	ldr	r3, [r4, #0]
 800b5ba:	1c5a      	adds	r2, r3, #1
 800b5bc:	6022      	str	r2, [r4, #0]
 800b5be:	701e      	strb	r6, [r3, #0]
 800b5c0:	6962      	ldr	r2, [r4, #20]
 800b5c2:	1c43      	adds	r3, r0, #1
 800b5c4:	429a      	cmp	r2, r3
 800b5c6:	d004      	beq.n	800b5d2 <__swbuf_r+0x5a>
 800b5c8:	89a3      	ldrh	r3, [r4, #12]
 800b5ca:	07db      	lsls	r3, r3, #31
 800b5cc:	d506      	bpl.n	800b5dc <__swbuf_r+0x64>
 800b5ce:	2e0a      	cmp	r6, #10
 800b5d0:	d104      	bne.n	800b5dc <__swbuf_r+0x64>
 800b5d2:	4621      	mov	r1, r4
 800b5d4:	4628      	mov	r0, r5
 800b5d6:	f7ff ffa7 	bl	800b528 <_fflush_r>
 800b5da:	b938      	cbnz	r0, 800b5ec <__swbuf_r+0x74>
 800b5dc:	4638      	mov	r0, r7
 800b5de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5e0:	4621      	mov	r1, r4
 800b5e2:	4628      	mov	r0, r5
 800b5e4:	f000 f806 	bl	800b5f4 <__swsetup_r>
 800b5e8:	2800      	cmp	r0, #0
 800b5ea:	d0d5      	beq.n	800b598 <__swbuf_r+0x20>
 800b5ec:	f04f 37ff 	mov.w	r7, #4294967295
 800b5f0:	e7f4      	b.n	800b5dc <__swbuf_r+0x64>
	...

0800b5f4 <__swsetup_r>:
 800b5f4:	b538      	push	{r3, r4, r5, lr}
 800b5f6:	4b2a      	ldr	r3, [pc, #168]	; (800b6a0 <__swsetup_r+0xac>)
 800b5f8:	4605      	mov	r5, r0
 800b5fa:	6818      	ldr	r0, [r3, #0]
 800b5fc:	460c      	mov	r4, r1
 800b5fe:	b118      	cbz	r0, 800b608 <__swsetup_r+0x14>
 800b600:	6a03      	ldr	r3, [r0, #32]
 800b602:	b90b      	cbnz	r3, 800b608 <__swsetup_r+0x14>
 800b604:	f7fe f84c 	bl	80096a0 <__sinit>
 800b608:	89a3      	ldrh	r3, [r4, #12]
 800b60a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b60e:	0718      	lsls	r0, r3, #28
 800b610:	d422      	bmi.n	800b658 <__swsetup_r+0x64>
 800b612:	06d9      	lsls	r1, r3, #27
 800b614:	d407      	bmi.n	800b626 <__swsetup_r+0x32>
 800b616:	2309      	movs	r3, #9
 800b618:	602b      	str	r3, [r5, #0]
 800b61a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b61e:	81a3      	strh	r3, [r4, #12]
 800b620:	f04f 30ff 	mov.w	r0, #4294967295
 800b624:	e034      	b.n	800b690 <__swsetup_r+0x9c>
 800b626:	0758      	lsls	r0, r3, #29
 800b628:	d512      	bpl.n	800b650 <__swsetup_r+0x5c>
 800b62a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b62c:	b141      	cbz	r1, 800b640 <__swsetup_r+0x4c>
 800b62e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b632:	4299      	cmp	r1, r3
 800b634:	d002      	beq.n	800b63c <__swsetup_r+0x48>
 800b636:	4628      	mov	r0, r5
 800b638:	f7fe ffd8 	bl	800a5ec <_free_r>
 800b63c:	2300      	movs	r3, #0
 800b63e:	6363      	str	r3, [r4, #52]	; 0x34
 800b640:	89a3      	ldrh	r3, [r4, #12]
 800b642:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b646:	81a3      	strh	r3, [r4, #12]
 800b648:	2300      	movs	r3, #0
 800b64a:	6063      	str	r3, [r4, #4]
 800b64c:	6923      	ldr	r3, [r4, #16]
 800b64e:	6023      	str	r3, [r4, #0]
 800b650:	89a3      	ldrh	r3, [r4, #12]
 800b652:	f043 0308 	orr.w	r3, r3, #8
 800b656:	81a3      	strh	r3, [r4, #12]
 800b658:	6923      	ldr	r3, [r4, #16]
 800b65a:	b94b      	cbnz	r3, 800b670 <__swsetup_r+0x7c>
 800b65c:	89a3      	ldrh	r3, [r4, #12]
 800b65e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b662:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b666:	d003      	beq.n	800b670 <__swsetup_r+0x7c>
 800b668:	4621      	mov	r1, r4
 800b66a:	4628      	mov	r0, r5
 800b66c:	f000 f90c 	bl	800b888 <__smakebuf_r>
 800b670:	89a0      	ldrh	r0, [r4, #12]
 800b672:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b676:	f010 0301 	ands.w	r3, r0, #1
 800b67a:	d00a      	beq.n	800b692 <__swsetup_r+0x9e>
 800b67c:	2300      	movs	r3, #0
 800b67e:	60a3      	str	r3, [r4, #8]
 800b680:	6963      	ldr	r3, [r4, #20]
 800b682:	425b      	negs	r3, r3
 800b684:	61a3      	str	r3, [r4, #24]
 800b686:	6923      	ldr	r3, [r4, #16]
 800b688:	b943      	cbnz	r3, 800b69c <__swsetup_r+0xa8>
 800b68a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b68e:	d1c4      	bne.n	800b61a <__swsetup_r+0x26>
 800b690:	bd38      	pop	{r3, r4, r5, pc}
 800b692:	0781      	lsls	r1, r0, #30
 800b694:	bf58      	it	pl
 800b696:	6963      	ldrpl	r3, [r4, #20]
 800b698:	60a3      	str	r3, [r4, #8]
 800b69a:	e7f4      	b.n	800b686 <__swsetup_r+0x92>
 800b69c:	2000      	movs	r0, #0
 800b69e:	e7f7      	b.n	800b690 <__swsetup_r+0x9c>
 800b6a0:	2000006c 	.word	0x2000006c

0800b6a4 <memmove>:
 800b6a4:	4288      	cmp	r0, r1
 800b6a6:	b510      	push	{r4, lr}
 800b6a8:	eb01 0402 	add.w	r4, r1, r2
 800b6ac:	d902      	bls.n	800b6b4 <memmove+0x10>
 800b6ae:	4284      	cmp	r4, r0
 800b6b0:	4623      	mov	r3, r4
 800b6b2:	d807      	bhi.n	800b6c4 <memmove+0x20>
 800b6b4:	1e43      	subs	r3, r0, #1
 800b6b6:	42a1      	cmp	r1, r4
 800b6b8:	d008      	beq.n	800b6cc <memmove+0x28>
 800b6ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b6be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b6c2:	e7f8      	b.n	800b6b6 <memmove+0x12>
 800b6c4:	4402      	add	r2, r0
 800b6c6:	4601      	mov	r1, r0
 800b6c8:	428a      	cmp	r2, r1
 800b6ca:	d100      	bne.n	800b6ce <memmove+0x2a>
 800b6cc:	bd10      	pop	{r4, pc}
 800b6ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b6d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b6d6:	e7f7      	b.n	800b6c8 <memmove+0x24>

0800b6d8 <_sbrk_r>:
 800b6d8:	b538      	push	{r3, r4, r5, lr}
 800b6da:	4d06      	ldr	r5, [pc, #24]	; (800b6f4 <_sbrk_r+0x1c>)
 800b6dc:	2300      	movs	r3, #0
 800b6de:	4604      	mov	r4, r0
 800b6e0:	4608      	mov	r0, r1
 800b6e2:	602b      	str	r3, [r5, #0]
 800b6e4:	f7f7 fe5c 	bl	80033a0 <_sbrk>
 800b6e8:	1c43      	adds	r3, r0, #1
 800b6ea:	d102      	bne.n	800b6f2 <_sbrk_r+0x1a>
 800b6ec:	682b      	ldr	r3, [r5, #0]
 800b6ee:	b103      	cbz	r3, 800b6f2 <_sbrk_r+0x1a>
 800b6f0:	6023      	str	r3, [r4, #0]
 800b6f2:	bd38      	pop	{r3, r4, r5, pc}
 800b6f4:	20001008 	.word	0x20001008

0800b6f8 <memcpy>:
 800b6f8:	440a      	add	r2, r1
 800b6fa:	4291      	cmp	r1, r2
 800b6fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b700:	d100      	bne.n	800b704 <memcpy+0xc>
 800b702:	4770      	bx	lr
 800b704:	b510      	push	{r4, lr}
 800b706:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b70a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b70e:	4291      	cmp	r1, r2
 800b710:	d1f9      	bne.n	800b706 <memcpy+0xe>
 800b712:	bd10      	pop	{r4, pc}

0800b714 <__assert_func>:
 800b714:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b716:	4614      	mov	r4, r2
 800b718:	461a      	mov	r2, r3
 800b71a:	4b09      	ldr	r3, [pc, #36]	; (800b740 <__assert_func+0x2c>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	4605      	mov	r5, r0
 800b720:	68d8      	ldr	r0, [r3, #12]
 800b722:	b14c      	cbz	r4, 800b738 <__assert_func+0x24>
 800b724:	4b07      	ldr	r3, [pc, #28]	; (800b744 <__assert_func+0x30>)
 800b726:	9100      	str	r1, [sp, #0]
 800b728:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b72c:	4906      	ldr	r1, [pc, #24]	; (800b748 <__assert_func+0x34>)
 800b72e:	462b      	mov	r3, r5
 800b730:	f000 f872 	bl	800b818 <fiprintf>
 800b734:	f000 f906 	bl	800b944 <abort>
 800b738:	4b04      	ldr	r3, [pc, #16]	; (800b74c <__assert_func+0x38>)
 800b73a:	461c      	mov	r4, r3
 800b73c:	e7f3      	b.n	800b726 <__assert_func+0x12>
 800b73e:	bf00      	nop
 800b740:	2000006c 	.word	0x2000006c
 800b744:	0800bc87 	.word	0x0800bc87
 800b748:	0800bc94 	.word	0x0800bc94
 800b74c:	0800bcc2 	.word	0x0800bcc2

0800b750 <_calloc_r>:
 800b750:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b752:	fba1 2402 	umull	r2, r4, r1, r2
 800b756:	b94c      	cbnz	r4, 800b76c <_calloc_r+0x1c>
 800b758:	4611      	mov	r1, r2
 800b75a:	9201      	str	r2, [sp, #4]
 800b75c:	f7fe ffba 	bl	800a6d4 <_malloc_r>
 800b760:	9a01      	ldr	r2, [sp, #4]
 800b762:	4605      	mov	r5, r0
 800b764:	b930      	cbnz	r0, 800b774 <_calloc_r+0x24>
 800b766:	4628      	mov	r0, r5
 800b768:	b003      	add	sp, #12
 800b76a:	bd30      	pop	{r4, r5, pc}
 800b76c:	220c      	movs	r2, #12
 800b76e:	6002      	str	r2, [r0, #0]
 800b770:	2500      	movs	r5, #0
 800b772:	e7f8      	b.n	800b766 <_calloc_r+0x16>
 800b774:	4621      	mov	r1, r4
 800b776:	f7fe f83e 	bl	80097f6 <memset>
 800b77a:	e7f4      	b.n	800b766 <_calloc_r+0x16>

0800b77c <__ascii_mbtowc>:
 800b77c:	b082      	sub	sp, #8
 800b77e:	b901      	cbnz	r1, 800b782 <__ascii_mbtowc+0x6>
 800b780:	a901      	add	r1, sp, #4
 800b782:	b142      	cbz	r2, 800b796 <__ascii_mbtowc+0x1a>
 800b784:	b14b      	cbz	r3, 800b79a <__ascii_mbtowc+0x1e>
 800b786:	7813      	ldrb	r3, [r2, #0]
 800b788:	600b      	str	r3, [r1, #0]
 800b78a:	7812      	ldrb	r2, [r2, #0]
 800b78c:	1e10      	subs	r0, r2, #0
 800b78e:	bf18      	it	ne
 800b790:	2001      	movne	r0, #1
 800b792:	b002      	add	sp, #8
 800b794:	4770      	bx	lr
 800b796:	4610      	mov	r0, r2
 800b798:	e7fb      	b.n	800b792 <__ascii_mbtowc+0x16>
 800b79a:	f06f 0001 	mvn.w	r0, #1
 800b79e:	e7f8      	b.n	800b792 <__ascii_mbtowc+0x16>

0800b7a0 <_realloc_r>:
 800b7a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7a4:	4680      	mov	r8, r0
 800b7a6:	4614      	mov	r4, r2
 800b7a8:	460e      	mov	r6, r1
 800b7aa:	b921      	cbnz	r1, 800b7b6 <_realloc_r+0x16>
 800b7ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7b0:	4611      	mov	r1, r2
 800b7b2:	f7fe bf8f 	b.w	800a6d4 <_malloc_r>
 800b7b6:	b92a      	cbnz	r2, 800b7c4 <_realloc_r+0x24>
 800b7b8:	f7fe ff18 	bl	800a5ec <_free_r>
 800b7bc:	4625      	mov	r5, r4
 800b7be:	4628      	mov	r0, r5
 800b7c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7c4:	f000 f8c5 	bl	800b952 <_malloc_usable_size_r>
 800b7c8:	4284      	cmp	r4, r0
 800b7ca:	4607      	mov	r7, r0
 800b7cc:	d802      	bhi.n	800b7d4 <_realloc_r+0x34>
 800b7ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b7d2:	d812      	bhi.n	800b7fa <_realloc_r+0x5a>
 800b7d4:	4621      	mov	r1, r4
 800b7d6:	4640      	mov	r0, r8
 800b7d8:	f7fe ff7c 	bl	800a6d4 <_malloc_r>
 800b7dc:	4605      	mov	r5, r0
 800b7de:	2800      	cmp	r0, #0
 800b7e0:	d0ed      	beq.n	800b7be <_realloc_r+0x1e>
 800b7e2:	42bc      	cmp	r4, r7
 800b7e4:	4622      	mov	r2, r4
 800b7e6:	4631      	mov	r1, r6
 800b7e8:	bf28      	it	cs
 800b7ea:	463a      	movcs	r2, r7
 800b7ec:	f7ff ff84 	bl	800b6f8 <memcpy>
 800b7f0:	4631      	mov	r1, r6
 800b7f2:	4640      	mov	r0, r8
 800b7f4:	f7fe fefa 	bl	800a5ec <_free_r>
 800b7f8:	e7e1      	b.n	800b7be <_realloc_r+0x1e>
 800b7fa:	4635      	mov	r5, r6
 800b7fc:	e7df      	b.n	800b7be <_realloc_r+0x1e>

0800b7fe <__ascii_wctomb>:
 800b7fe:	b149      	cbz	r1, 800b814 <__ascii_wctomb+0x16>
 800b800:	2aff      	cmp	r2, #255	; 0xff
 800b802:	bf85      	ittet	hi
 800b804:	238a      	movhi	r3, #138	; 0x8a
 800b806:	6003      	strhi	r3, [r0, #0]
 800b808:	700a      	strbls	r2, [r1, #0]
 800b80a:	f04f 30ff 	movhi.w	r0, #4294967295
 800b80e:	bf98      	it	ls
 800b810:	2001      	movls	r0, #1
 800b812:	4770      	bx	lr
 800b814:	4608      	mov	r0, r1
 800b816:	4770      	bx	lr

0800b818 <fiprintf>:
 800b818:	b40e      	push	{r1, r2, r3}
 800b81a:	b503      	push	{r0, r1, lr}
 800b81c:	4601      	mov	r1, r0
 800b81e:	ab03      	add	r3, sp, #12
 800b820:	4805      	ldr	r0, [pc, #20]	; (800b838 <fiprintf+0x20>)
 800b822:	f853 2b04 	ldr.w	r2, [r3], #4
 800b826:	6800      	ldr	r0, [r0, #0]
 800b828:	9301      	str	r3, [sp, #4]
 800b82a:	f7ff fcdd 	bl	800b1e8 <_vfiprintf_r>
 800b82e:	b002      	add	sp, #8
 800b830:	f85d eb04 	ldr.w	lr, [sp], #4
 800b834:	b003      	add	sp, #12
 800b836:	4770      	bx	lr
 800b838:	2000006c 	.word	0x2000006c

0800b83c <__swhatbuf_r>:
 800b83c:	b570      	push	{r4, r5, r6, lr}
 800b83e:	460c      	mov	r4, r1
 800b840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b844:	2900      	cmp	r1, #0
 800b846:	b096      	sub	sp, #88	; 0x58
 800b848:	4615      	mov	r5, r2
 800b84a:	461e      	mov	r6, r3
 800b84c:	da0d      	bge.n	800b86a <__swhatbuf_r+0x2e>
 800b84e:	89a3      	ldrh	r3, [r4, #12]
 800b850:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b854:	f04f 0100 	mov.w	r1, #0
 800b858:	bf0c      	ite	eq
 800b85a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b85e:	2340      	movne	r3, #64	; 0x40
 800b860:	2000      	movs	r0, #0
 800b862:	6031      	str	r1, [r6, #0]
 800b864:	602b      	str	r3, [r5, #0]
 800b866:	b016      	add	sp, #88	; 0x58
 800b868:	bd70      	pop	{r4, r5, r6, pc}
 800b86a:	466a      	mov	r2, sp
 800b86c:	f000 f848 	bl	800b900 <_fstat_r>
 800b870:	2800      	cmp	r0, #0
 800b872:	dbec      	blt.n	800b84e <__swhatbuf_r+0x12>
 800b874:	9901      	ldr	r1, [sp, #4]
 800b876:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b87a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b87e:	4259      	negs	r1, r3
 800b880:	4159      	adcs	r1, r3
 800b882:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b886:	e7eb      	b.n	800b860 <__swhatbuf_r+0x24>

0800b888 <__smakebuf_r>:
 800b888:	898b      	ldrh	r3, [r1, #12]
 800b88a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b88c:	079d      	lsls	r5, r3, #30
 800b88e:	4606      	mov	r6, r0
 800b890:	460c      	mov	r4, r1
 800b892:	d507      	bpl.n	800b8a4 <__smakebuf_r+0x1c>
 800b894:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b898:	6023      	str	r3, [r4, #0]
 800b89a:	6123      	str	r3, [r4, #16]
 800b89c:	2301      	movs	r3, #1
 800b89e:	6163      	str	r3, [r4, #20]
 800b8a0:	b002      	add	sp, #8
 800b8a2:	bd70      	pop	{r4, r5, r6, pc}
 800b8a4:	ab01      	add	r3, sp, #4
 800b8a6:	466a      	mov	r2, sp
 800b8a8:	f7ff ffc8 	bl	800b83c <__swhatbuf_r>
 800b8ac:	9900      	ldr	r1, [sp, #0]
 800b8ae:	4605      	mov	r5, r0
 800b8b0:	4630      	mov	r0, r6
 800b8b2:	f7fe ff0f 	bl	800a6d4 <_malloc_r>
 800b8b6:	b948      	cbnz	r0, 800b8cc <__smakebuf_r+0x44>
 800b8b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8bc:	059a      	lsls	r2, r3, #22
 800b8be:	d4ef      	bmi.n	800b8a0 <__smakebuf_r+0x18>
 800b8c0:	f023 0303 	bic.w	r3, r3, #3
 800b8c4:	f043 0302 	orr.w	r3, r3, #2
 800b8c8:	81a3      	strh	r3, [r4, #12]
 800b8ca:	e7e3      	b.n	800b894 <__smakebuf_r+0xc>
 800b8cc:	89a3      	ldrh	r3, [r4, #12]
 800b8ce:	6020      	str	r0, [r4, #0]
 800b8d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8d4:	81a3      	strh	r3, [r4, #12]
 800b8d6:	9b00      	ldr	r3, [sp, #0]
 800b8d8:	6163      	str	r3, [r4, #20]
 800b8da:	9b01      	ldr	r3, [sp, #4]
 800b8dc:	6120      	str	r0, [r4, #16]
 800b8de:	b15b      	cbz	r3, 800b8f8 <__smakebuf_r+0x70>
 800b8e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8e4:	4630      	mov	r0, r6
 800b8e6:	f000 f81d 	bl	800b924 <_isatty_r>
 800b8ea:	b128      	cbz	r0, 800b8f8 <__smakebuf_r+0x70>
 800b8ec:	89a3      	ldrh	r3, [r4, #12]
 800b8ee:	f023 0303 	bic.w	r3, r3, #3
 800b8f2:	f043 0301 	orr.w	r3, r3, #1
 800b8f6:	81a3      	strh	r3, [r4, #12]
 800b8f8:	89a3      	ldrh	r3, [r4, #12]
 800b8fa:	431d      	orrs	r5, r3
 800b8fc:	81a5      	strh	r5, [r4, #12]
 800b8fe:	e7cf      	b.n	800b8a0 <__smakebuf_r+0x18>

0800b900 <_fstat_r>:
 800b900:	b538      	push	{r3, r4, r5, lr}
 800b902:	4d07      	ldr	r5, [pc, #28]	; (800b920 <_fstat_r+0x20>)
 800b904:	2300      	movs	r3, #0
 800b906:	4604      	mov	r4, r0
 800b908:	4608      	mov	r0, r1
 800b90a:	4611      	mov	r1, r2
 800b90c:	602b      	str	r3, [r5, #0]
 800b90e:	f7f7 fd1e 	bl	800334e <_fstat>
 800b912:	1c43      	adds	r3, r0, #1
 800b914:	d102      	bne.n	800b91c <_fstat_r+0x1c>
 800b916:	682b      	ldr	r3, [r5, #0]
 800b918:	b103      	cbz	r3, 800b91c <_fstat_r+0x1c>
 800b91a:	6023      	str	r3, [r4, #0]
 800b91c:	bd38      	pop	{r3, r4, r5, pc}
 800b91e:	bf00      	nop
 800b920:	20001008 	.word	0x20001008

0800b924 <_isatty_r>:
 800b924:	b538      	push	{r3, r4, r5, lr}
 800b926:	4d06      	ldr	r5, [pc, #24]	; (800b940 <_isatty_r+0x1c>)
 800b928:	2300      	movs	r3, #0
 800b92a:	4604      	mov	r4, r0
 800b92c:	4608      	mov	r0, r1
 800b92e:	602b      	str	r3, [r5, #0]
 800b930:	f7f7 fd1d 	bl	800336e <_isatty>
 800b934:	1c43      	adds	r3, r0, #1
 800b936:	d102      	bne.n	800b93e <_isatty_r+0x1a>
 800b938:	682b      	ldr	r3, [r5, #0]
 800b93a:	b103      	cbz	r3, 800b93e <_isatty_r+0x1a>
 800b93c:	6023      	str	r3, [r4, #0]
 800b93e:	bd38      	pop	{r3, r4, r5, pc}
 800b940:	20001008 	.word	0x20001008

0800b944 <abort>:
 800b944:	b508      	push	{r3, lr}
 800b946:	2006      	movs	r0, #6
 800b948:	f000 f834 	bl	800b9b4 <raise>
 800b94c:	2001      	movs	r0, #1
 800b94e:	f7f7 fccb 	bl	80032e8 <_exit>

0800b952 <_malloc_usable_size_r>:
 800b952:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b956:	1f18      	subs	r0, r3, #4
 800b958:	2b00      	cmp	r3, #0
 800b95a:	bfbc      	itt	lt
 800b95c:	580b      	ldrlt	r3, [r1, r0]
 800b95e:	18c0      	addlt	r0, r0, r3
 800b960:	4770      	bx	lr

0800b962 <_raise_r>:
 800b962:	291f      	cmp	r1, #31
 800b964:	b538      	push	{r3, r4, r5, lr}
 800b966:	4604      	mov	r4, r0
 800b968:	460d      	mov	r5, r1
 800b96a:	d904      	bls.n	800b976 <_raise_r+0x14>
 800b96c:	2316      	movs	r3, #22
 800b96e:	6003      	str	r3, [r0, #0]
 800b970:	f04f 30ff 	mov.w	r0, #4294967295
 800b974:	bd38      	pop	{r3, r4, r5, pc}
 800b976:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b978:	b112      	cbz	r2, 800b980 <_raise_r+0x1e>
 800b97a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b97e:	b94b      	cbnz	r3, 800b994 <_raise_r+0x32>
 800b980:	4620      	mov	r0, r4
 800b982:	f000 f831 	bl	800b9e8 <_getpid_r>
 800b986:	462a      	mov	r2, r5
 800b988:	4601      	mov	r1, r0
 800b98a:	4620      	mov	r0, r4
 800b98c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b990:	f000 b818 	b.w	800b9c4 <_kill_r>
 800b994:	2b01      	cmp	r3, #1
 800b996:	d00a      	beq.n	800b9ae <_raise_r+0x4c>
 800b998:	1c59      	adds	r1, r3, #1
 800b99a:	d103      	bne.n	800b9a4 <_raise_r+0x42>
 800b99c:	2316      	movs	r3, #22
 800b99e:	6003      	str	r3, [r0, #0]
 800b9a0:	2001      	movs	r0, #1
 800b9a2:	e7e7      	b.n	800b974 <_raise_r+0x12>
 800b9a4:	2400      	movs	r4, #0
 800b9a6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b9aa:	4628      	mov	r0, r5
 800b9ac:	4798      	blx	r3
 800b9ae:	2000      	movs	r0, #0
 800b9b0:	e7e0      	b.n	800b974 <_raise_r+0x12>
	...

0800b9b4 <raise>:
 800b9b4:	4b02      	ldr	r3, [pc, #8]	; (800b9c0 <raise+0xc>)
 800b9b6:	4601      	mov	r1, r0
 800b9b8:	6818      	ldr	r0, [r3, #0]
 800b9ba:	f7ff bfd2 	b.w	800b962 <_raise_r>
 800b9be:	bf00      	nop
 800b9c0:	2000006c 	.word	0x2000006c

0800b9c4 <_kill_r>:
 800b9c4:	b538      	push	{r3, r4, r5, lr}
 800b9c6:	4d07      	ldr	r5, [pc, #28]	; (800b9e4 <_kill_r+0x20>)
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	4604      	mov	r4, r0
 800b9cc:	4608      	mov	r0, r1
 800b9ce:	4611      	mov	r1, r2
 800b9d0:	602b      	str	r3, [r5, #0]
 800b9d2:	f7f7 fc79 	bl	80032c8 <_kill>
 800b9d6:	1c43      	adds	r3, r0, #1
 800b9d8:	d102      	bne.n	800b9e0 <_kill_r+0x1c>
 800b9da:	682b      	ldr	r3, [r5, #0]
 800b9dc:	b103      	cbz	r3, 800b9e0 <_kill_r+0x1c>
 800b9de:	6023      	str	r3, [r4, #0]
 800b9e0:	bd38      	pop	{r3, r4, r5, pc}
 800b9e2:	bf00      	nop
 800b9e4:	20001008 	.word	0x20001008

0800b9e8 <_getpid_r>:
 800b9e8:	f7f7 bc66 	b.w	80032b8 <_getpid>

0800b9ec <_init>:
 800b9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ee:	bf00      	nop
 800b9f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9f2:	bc08      	pop	{r3}
 800b9f4:	469e      	mov	lr, r3
 800b9f6:	4770      	bx	lr

0800b9f8 <_fini>:
 800b9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9fa:	bf00      	nop
 800b9fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9fe:	bc08      	pop	{r3}
 800ba00:	469e      	mov	lr, r3
 800ba02:	4770      	bx	lr
