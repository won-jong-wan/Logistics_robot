
0319_test _speed+position.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb90  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0800ed40  0800ed40  0001ed40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f1d8  0800f1d8  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f1d8  0800f1d8  0001f1d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f1e0  0800f1e0  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f1e0  0800f1e0  0001f1e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f1e4  0800f1e4  0001f1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800f1e8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f8  2**0
                  CONTENTS
 10 .bss          00000e84  200001f8  200001f8  000201f8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000107c  2000107c  000201f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001b098  00000000  00000000  0002026b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003281  00000000  00000000  0003b303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000014b8  00000000  00000000  0003e588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001370  00000000  00000000  0003fa40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000287d8  00000000  00000000  00040db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00019900  00000000  00000000  00069588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f29bb  00000000  00000000  00082e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007088  00000000  00000000  00175844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ed28 	.word	0x0800ed28

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001fc 	.word	0x200001fc
 80001ec:	0800ed28 	.word	0x0800ed28

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a6 	b.w	800100c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9e08      	ldr	r6, [sp, #32]
 8000d4a:	460d      	mov	r5, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	460f      	mov	r7, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4694      	mov	ip, r2
 8000d58:	d965      	bls.n	8000e26 <__udivmoddi4+0xe2>
 8000d5a:	fab2 f382 	clz	r3, r2
 8000d5e:	b143      	cbz	r3, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d64:	f1c3 0220 	rsb	r2, r3, #32
 8000d68:	409f      	lsls	r7, r3
 8000d6a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6e:	4317      	orrs	r7, r2
 8000d70:	409c      	lsls	r4, r3
 8000d72:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d76:	fa1f f58c 	uxth.w	r5, ip
 8000d7a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d7e:	0c22      	lsrs	r2, r4, #16
 8000d80:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d84:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d88:	fb01 f005 	mul.w	r0, r1, r5
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d90:	eb1c 0202 	adds.w	r2, ip, r2
 8000d94:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d98:	f080 811c 	bcs.w	8000fd4 <__udivmoddi4+0x290>
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	f240 8119 	bls.w	8000fd4 <__udivmoddi4+0x290>
 8000da2:	3902      	subs	r1, #2
 8000da4:	4462      	add	r2, ip
 8000da6:	1a12      	subs	r2, r2, r0
 8000da8:	b2a4      	uxth	r4, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000db6:	fb00 f505 	mul.w	r5, r0, r5
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	d90a      	bls.n	8000dd4 <__udivmoddi4+0x90>
 8000dbe:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc6:	f080 8107 	bcs.w	8000fd8 <__udivmoddi4+0x294>
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	f240 8104 	bls.w	8000fd8 <__udivmoddi4+0x294>
 8000dd0:	4464      	add	r4, ip
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11e      	cbz	r6, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40dc      	lsrs	r4, r3
 8000de0:	2300      	movs	r3, #0
 8000de2:	e9c6 4300 	strd	r4, r3, [r6]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0xbc>
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	f000 80ed 	beq.w	8000fce <__udivmoddi4+0x28a>
 8000df4:	2100      	movs	r1, #0
 8000df6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e00:	fab3 f183 	clz	r1, r3
 8000e04:	2900      	cmp	r1, #0
 8000e06:	d149      	bne.n	8000e9c <__udivmoddi4+0x158>
 8000e08:	42ab      	cmp	r3, r5
 8000e0a:	d302      	bcc.n	8000e12 <__udivmoddi4+0xce>
 8000e0c:	4282      	cmp	r2, r0
 8000e0e:	f200 80f8 	bhi.w	8001002 <__udivmoddi4+0x2be>
 8000e12:	1a84      	subs	r4, r0, r2
 8000e14:	eb65 0203 	sbc.w	r2, r5, r3
 8000e18:	2001      	movs	r0, #1
 8000e1a:	4617      	mov	r7, r2
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d0e2      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	e9c6 4700 	strd	r4, r7, [r6]
 8000e24:	e7df      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e26:	b902      	cbnz	r2, 8000e2a <__udivmoddi4+0xe6>
 8000e28:	deff      	udf	#255	; 0xff
 8000e2a:	fab2 f382 	clz	r3, r2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f040 8090 	bne.w	8000f54 <__udivmoddi4+0x210>
 8000e34:	1a8a      	subs	r2, r1, r2
 8000e36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e3a:	fa1f fe8c 	uxth.w	lr, ip
 8000e3e:	2101      	movs	r1, #1
 8000e40:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e44:	fb07 2015 	mls	r0, r7, r5, r2
 8000e48:	0c22      	lsrs	r2, r4, #16
 8000e4a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e4e:	fb0e f005 	mul.w	r0, lr, r5
 8000e52:	4290      	cmp	r0, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x124>
 8000e56:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x122>
 8000e60:	4290      	cmp	r0, r2
 8000e62:	f200 80cb 	bhi.w	8000ffc <__udivmoddi4+0x2b8>
 8000e66:	4645      	mov	r5, r8
 8000e68:	1a12      	subs	r2, r2, r0
 8000e6a:	b2a4      	uxth	r4, r4
 8000e6c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e70:	fb07 2210 	mls	r2, r7, r0, r2
 8000e74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e78:	fb0e fe00 	mul.w	lr, lr, r0
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x14e>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x14c>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	f200 80bb 	bhi.w	8001006 <__udivmoddi4+0x2c2>
 8000e90:	4610      	mov	r0, r2
 8000e92:	eba4 040e 	sub.w	r4, r4, lr
 8000e96:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e9a:	e79f      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e9c:	f1c1 0720 	rsb	r7, r1, #32
 8000ea0:	408b      	lsls	r3, r1
 8000ea2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ea6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eaa:	fa05 f401 	lsl.w	r4, r5, r1
 8000eae:	fa20 f307 	lsr.w	r3, r0, r7
 8000eb2:	40fd      	lsrs	r5, r7
 8000eb4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb8:	4323      	orrs	r3, r4
 8000eba:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ebe:	fa1f fe8c 	uxth.w	lr, ip
 8000ec2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ec6:	0c1c      	lsrs	r4, r3, #16
 8000ec8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ecc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ed0:	42a5      	cmp	r5, r4
 8000ed2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eda:	d90b      	bls.n	8000ef4 <__udivmoddi4+0x1b0>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ee4:	f080 8088 	bcs.w	8000ff8 <__udivmoddi4+0x2b4>
 8000ee8:	42a5      	cmp	r5, r4
 8000eea:	f240 8085 	bls.w	8000ff8 <__udivmoddi4+0x2b4>
 8000eee:	f1a8 0802 	sub.w	r8, r8, #2
 8000ef2:	4464      	add	r4, ip
 8000ef4:	1b64      	subs	r4, r4, r5
 8000ef6:	b29d      	uxth	r5, r3
 8000ef8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000efc:	fb09 4413 	mls	r4, r9, r3, r4
 8000f00:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f04:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f08:	45a6      	cmp	lr, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x1da>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f14:	d26c      	bcs.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f16:	45a6      	cmp	lr, r4
 8000f18:	d96a      	bls.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f1a:	3b02      	subs	r3, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f22:	fba3 9502 	umull	r9, r5, r3, r2
 8000f26:	eba4 040e 	sub.w	r4, r4, lr
 8000f2a:	42ac      	cmp	r4, r5
 8000f2c:	46c8      	mov	r8, r9
 8000f2e:	46ae      	mov	lr, r5
 8000f30:	d356      	bcc.n	8000fe0 <__udivmoddi4+0x29c>
 8000f32:	d053      	beq.n	8000fdc <__udivmoddi4+0x298>
 8000f34:	b156      	cbz	r6, 8000f4c <__udivmoddi4+0x208>
 8000f36:	ebb0 0208 	subs.w	r2, r0, r8
 8000f3a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f42:	40ca      	lsrs	r2, r1
 8000f44:	40cc      	lsrs	r4, r1
 8000f46:	4317      	orrs	r7, r2
 8000f48:	e9c6 7400 	strd	r7, r4, [r6]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	2100      	movs	r1, #0
 8000f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f54:	f1c3 0120 	rsb	r1, r3, #32
 8000f58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f5c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f60:	fa25 f101 	lsr.w	r1, r5, r1
 8000f64:	409d      	lsls	r5, r3
 8000f66:	432a      	orrs	r2, r5
 8000f68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f6c:	fa1f fe8c 	uxth.w	lr, ip
 8000f70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f74:	fb07 1510 	mls	r5, r7, r0, r1
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f7e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f82:	428d      	cmp	r5, r1
 8000f84:	fa04 f403 	lsl.w	r4, r4, r3
 8000f88:	d908      	bls.n	8000f9c <__udivmoddi4+0x258>
 8000f8a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f92:	d22f      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f94:	428d      	cmp	r5, r1
 8000f96:	d92d      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f98:	3802      	subs	r0, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	1b49      	subs	r1, r1, r5
 8000f9e:	b292      	uxth	r2, r2
 8000fa0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fa4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fa8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fac:	fb05 f10e 	mul.w	r1, r5, lr
 8000fb0:	4291      	cmp	r1, r2
 8000fb2:	d908      	bls.n	8000fc6 <__udivmoddi4+0x282>
 8000fb4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fb8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fbc:	d216      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000fbe:	4291      	cmp	r1, r2
 8000fc0:	d914      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000fc2:	3d02      	subs	r5, #2
 8000fc4:	4462      	add	r2, ip
 8000fc6:	1a52      	subs	r2, r2, r1
 8000fc8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fcc:	e738      	b.n	8000e40 <__udivmoddi4+0xfc>
 8000fce:	4631      	mov	r1, r6
 8000fd0:	4630      	mov	r0, r6
 8000fd2:	e708      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000fd4:	4639      	mov	r1, r7
 8000fd6:	e6e6      	b.n	8000da6 <__udivmoddi4+0x62>
 8000fd8:	4610      	mov	r0, r2
 8000fda:	e6fb      	b.n	8000dd4 <__udivmoddi4+0x90>
 8000fdc:	4548      	cmp	r0, r9
 8000fde:	d2a9      	bcs.n	8000f34 <__udivmoddi4+0x1f0>
 8000fe0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fe4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	e7a3      	b.n	8000f34 <__udivmoddi4+0x1f0>
 8000fec:	4645      	mov	r5, r8
 8000fee:	e7ea      	b.n	8000fc6 <__udivmoddi4+0x282>
 8000ff0:	462b      	mov	r3, r5
 8000ff2:	e794      	b.n	8000f1e <__udivmoddi4+0x1da>
 8000ff4:	4640      	mov	r0, r8
 8000ff6:	e7d1      	b.n	8000f9c <__udivmoddi4+0x258>
 8000ff8:	46d0      	mov	r8, sl
 8000ffa:	e77b      	b.n	8000ef4 <__udivmoddi4+0x1b0>
 8000ffc:	3d02      	subs	r5, #2
 8000ffe:	4462      	add	r2, ip
 8001000:	e732      	b.n	8000e68 <__udivmoddi4+0x124>
 8001002:	4608      	mov	r0, r1
 8001004:	e70a      	b.n	8000e1c <__udivmoddi4+0xd8>
 8001006:	4464      	add	r4, ip
 8001008:	3802      	subs	r0, #2
 800100a:	e742      	b.n	8000e92 <__udivmoddi4+0x14e>

0800100c <__aeabi_idiv0>:
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop

08001010 <_write>:
{
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
	return ch;
}

int _write(int file, char *p, int len) {        //테라텀
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, p, len, 10);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	b29a      	uxth	r2, r3
 8001020:	230a      	movs	r3, #10
 8001022:	68b9      	ldr	r1, [r7, #8]
 8001024:	4803      	ldr	r0, [pc, #12]	; (8001034 <_write+0x24>)
 8001026:	f006 ffa9 	bl	8007f7c <HAL_UART_Transmit>
	return len;
 800102a:	687b      	ldr	r3, [r7, #4]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000320 	.word	0x20000320

08001038 <SerialSendChar_WIFI>:
		;
	USART3->DR = (Ch1 & 0x01FF);	// 전송 (최대 9bit 이므로 0x01FF과 masking)
}

void SerialSendChar_WIFI(uint8_t Ch2) // 1문자 보내기 함수
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
	while ((UART4->SR & 1 << 7) == RESET)
 8001042:	bf00      	nop
 8001044:	4b07      	ldr	r3, [pc, #28]	; (8001064 <SerialSendChar_WIFI+0x2c>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800104c:	2b00      	cmp	r3, #0
 800104e:	d0f9      	beq.n	8001044 <SerialSendChar_WIFI+0xc>
		;
	UART4->DR = (Ch2 & 0x01FF);
 8001050:	4a04      	ldr	r2, [pc, #16]	; (8001064 <SerialSendChar_WIFI+0x2c>)
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	6053      	str	r3, [r2, #4]
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	40004c00 	.word	0x40004c00

08001068 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	encoder_count = TIM4->CNT;
 8001070:	4bb1      	ldr	r3, [pc, #708]	; (8001338 <HAL_UART_RxCpltCallback+0x2d0>)
 8001072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001074:	4ab1      	ldr	r2, [pc, #708]	; (800133c <HAL_UART_RxCpltCallback+0x2d4>)
 8001076:	6013      	str	r3, [r2, #0]

	if (huart->Instance == USART3) {
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4ab0      	ldr	r2, [pc, #704]	; (8001340 <HAL_UART_RxCpltCallback+0x2d8>)
 800107e:	4293      	cmp	r3, r2
 8001080:	f040 8185 	bne.w	800138e <HAL_UART_RxCpltCallback+0x326>

		HAL_UART_Receive_IT(&huart3, &key_value, 1);
 8001084:	2201      	movs	r2, #1
 8001086:	49af      	ldr	r1, [pc, #700]	; (8001344 <HAL_UART_RxCpltCallback+0x2dc>)
 8001088:	48af      	ldr	r0, [pc, #700]	; (8001348 <HAL_UART_RxCpltCallback+0x2e0>)
 800108a:	f007 f802 	bl	8008092 <HAL_UART_Receive_IT>
		printf("%d,^^ %c \r\n", key_value, key_value);
 800108e:	4bad      	ldr	r3, [pc, #692]	; (8001344 <HAL_UART_RxCpltCallback+0x2dc>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	4619      	mov	r1, r3
 8001094:	4bab      	ldr	r3, [pc, #684]	; (8001344 <HAL_UART_RxCpltCallback+0x2dc>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	461a      	mov	r2, r3
 800109a:	48ac      	ldr	r0, [pc, #688]	; (800134c <HAL_UART_RxCpltCallback+0x2e4>)
 800109c:	f009 f9ac 	bl	800a3f8 <iprintf>

		switch (key_value) {
 80010a0:	4ba8      	ldr	r3, [pc, #672]	; (8001344 <HAL_UART_RxCpltCallback+0x2dc>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	3b2e      	subs	r3, #46	; 0x2e
 80010a6:	2b49      	cmp	r3, #73	; 0x49
 80010a8:	f200 8171 	bhi.w	800138e <HAL_UART_RxCpltCallback+0x326>
 80010ac:	a201      	add	r2, pc, #4	; (adr r2, 80010b4 <HAL_UART_RxCpltCallback+0x4c>)
 80010ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b2:	bf00      	nop
 80010b4:	08001301 	.word	0x08001301
 80010b8:	0800131d 	.word	0x0800131d
 80010bc:	0800138f 	.word	0x0800138f
 80010c0:	0800120d 	.word	0x0800120d
 80010c4:	08001219 	.word	0x08001219
 80010c8:	08001225 	.word	0x08001225
 80010cc:	0800122d 	.word	0x0800122d
 80010d0:	08001235 	.word	0x08001235
 80010d4:	0800123f 	.word	0x0800123f
 80010d8:	08001249 	.word	0x08001249
 80010dc:	0800138f 	.word	0x0800138f
 80010e0:	0800138f 	.word	0x0800138f
 80010e4:	0800138f 	.word	0x0800138f
 80010e8:	0800138f 	.word	0x0800138f
 80010ec:	0800138f 	.word	0x0800138f
 80010f0:	0800138f 	.word	0x0800138f
 80010f4:	0800138f 	.word	0x0800138f
 80010f8:	0800138f 	.word	0x0800138f
 80010fc:	0800138f 	.word	0x0800138f
 8001100:	0800138f 	.word	0x0800138f
 8001104:	0800138f 	.word	0x0800138f
 8001108:	0800138f 	.word	0x0800138f
 800110c:	0800138f 	.word	0x0800138f
 8001110:	0800138f 	.word	0x0800138f
 8001114:	0800138f 	.word	0x0800138f
 8001118:	0800138f 	.word	0x0800138f
 800111c:	0800138f 	.word	0x0800138f
 8001120:	0800138f 	.word	0x0800138f
 8001124:	0800138f 	.word	0x0800138f
 8001128:	0800138f 	.word	0x0800138f
 800112c:	0800138f 	.word	0x0800138f
 8001130:	0800138f 	.word	0x0800138f
 8001134:	0800138f 	.word	0x0800138f
 8001138:	0800138f 	.word	0x0800138f
 800113c:	0800138f 	.word	0x0800138f
 8001140:	0800138f 	.word	0x0800138f
 8001144:	0800138f 	.word	0x0800138f
 8001148:	0800138f 	.word	0x0800138f
 800114c:	0800138f 	.word	0x0800138f
 8001150:	0800138f 	.word	0x0800138f
 8001154:	0800138f 	.word	0x0800138f
 8001158:	0800138f 	.word	0x0800138f
 800115c:	0800138f 	.word	0x0800138f
 8001160:	0800138f 	.word	0x0800138f
 8001164:	0800138f 	.word	0x0800138f
 8001168:	0800138f 	.word	0x0800138f
 800116c:	0800138f 	.word	0x0800138f
 8001170:	0800138f 	.word	0x0800138f
 8001174:	0800138f 	.word	0x0800138f
 8001178:	0800138f 	.word	0x0800138f
 800117c:	0800138f 	.word	0x0800138f
 8001180:	08001253 	.word	0x08001253
 8001184:	080012e5 	.word	0x080012e5
 8001188:	0800138f 	.word	0x0800138f
 800118c:	0800138f 	.word	0x0800138f
 8001190:	0800138f 	.word	0x0800138f
 8001194:	0800138f 	.word	0x0800138f
 8001198:	0800138f 	.word	0x0800138f
 800119c:	0800138f 	.word	0x0800138f
 80011a0:	08001285 	.word	0x08001285
 80011a4:	0800138f 	.word	0x0800138f
 80011a8:	0800138f 	.word	0x0800138f
 80011ac:	0800138f 	.word	0x0800138f
 80011b0:	080012f3 	.word	0x080012f3
 80011b4:	080012e5 	.word	0x080012e5
 80011b8:	080012a5 	.word	0x080012a5
 80011bc:	080012c5 	.word	0x080012c5
 80011c0:	080011dd 	.word	0x080011dd
 80011c4:	0800138f 	.word	0x0800138f
 80011c8:	0800138f 	.word	0x0800138f
 80011cc:	0800138f 	.word	0x0800138f
 80011d0:	08001263 	.word	0x08001263
 80011d4:	0800138f 	.word	0x0800138f
 80011d8:	080011f5 	.word	0x080011f5
		case 'q':
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, 1);  //방향 back
 80011dc:	2201      	movs	r2, #1
 80011de:	2101      	movs	r1, #1
 80011e0:	485b      	ldr	r0, [pc, #364]	; (8001350 <HAL_UART_RxCpltCallback+0x2e8>)
 80011e2:	f004 fc2d 	bl	8005a40 <HAL_GPIO_WritePin>
		//	GPIOE->ODR |= 1 << 0;  // back
			GPIOB->ODR |= 1 << 0;  //LD1
 80011e6:	4b5b      	ldr	r3, [pc, #364]	; (8001354 <HAL_UART_RxCpltCallback+0x2ec>)
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	4a5a      	ldr	r2, [pc, #360]	; (8001354 <HAL_UART_RxCpltCallback+0x2ec>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6153      	str	r3, [r2, #20]

			break;
 80011f2:	e0cc      	b.n	800138e <HAL_UART_RxCpltCallback+0x326>

		case 'w':
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, 0);  //방향 go
 80011f4:	2200      	movs	r2, #0
 80011f6:	2101      	movs	r1, #1
 80011f8:	4855      	ldr	r0, [pc, #340]	; (8001350 <HAL_UART_RxCpltCallback+0x2e8>)
 80011fa:	f004 fc21 	bl	8005a40 <HAL_GPIO_WritePin>
		//	GPIOE->ODR &= ~1 << 0;  // go
			GPIOB->ODR &= ~1 << 0;  //LD1
 80011fe:	4b55      	ldr	r3, [pc, #340]	; (8001354 <HAL_UART_RxCpltCallback+0x2ec>)
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	4a54      	ldr	r2, [pc, #336]	; (8001354 <HAL_UART_RxCpltCallback+0x2ec>)
 8001204:	f023 0301 	bic.w	r3, r3, #1
 8001208:	6153      	str	r3, [r2, #20]

			break;
 800120a:	e0c0      	b.n	800138e <HAL_UART_RxCpltCallback+0x326>

		case '1':
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, 1);  //stop
 800120c:	2201      	movs	r2, #1
 800120e:	2101      	movs	r1, #1
 8001210:	4851      	ldr	r0, [pc, #324]	; (8001358 <HAL_UART_RxCpltCallback+0x2f0>)
 8001212:	f004 fc15 	bl	8005a40 <HAL_GPIO_WritePin>
			//GPIOG->ODR |= 1 << 0;  //stop

			break;
 8001216:	e0ba      	b.n	800138e <HAL_UART_RxCpltCallback+0x326>

		case '2':
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, 0);  //start
 8001218:	2200      	movs	r2, #0
 800121a:	2101      	movs	r1, #1
 800121c:	484e      	ldr	r0, [pc, #312]	; (8001358 <HAL_UART_RxCpltCallback+0x2f0>)
 800121e:	f004 fc0f 	bl	8005a40 <HAL_GPIO_WritePin>
			//GPIOG->ODR &= ~1 << 0;  //start

			break;
 8001222:	e0b4      	b.n	800138e <HAL_UART_RxCpltCallback+0x326>

		case '3':
			TIM3->CCR1 = 50;
 8001224:	4b4d      	ldr	r3, [pc, #308]	; (800135c <HAL_UART_RxCpltCallback+0x2f4>)
 8001226:	2232      	movs	r2, #50	; 0x32
 8001228:	635a      	str	r2, [r3, #52]	; 0x34
			//	TIM3->CCR2 = 50;

			break;
 800122a:	e0b0      	b.n	800138e <HAL_UART_RxCpltCallback+0x326>

		case '4':
			TIM3->CCR1 = 100;
 800122c:	4b4b      	ldr	r3, [pc, #300]	; (800135c <HAL_UART_RxCpltCallback+0x2f4>)
 800122e:	2264      	movs	r2, #100	; 0x64
 8001230:	635a      	str	r2, [r3, #52]	; 0x34
			//	TIM3->CCR2 = 100;

			break;
 8001232:	e0ac      	b.n	800138e <HAL_UART_RxCpltCallback+0x326>

		case '5':
			TIM3->CCR1 = 500;
 8001234:	4b49      	ldr	r3, [pc, #292]	; (800135c <HAL_UART_RxCpltCallback+0x2f4>)
 8001236:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800123a:	635a      	str	r2, [r3, #52]	; 0x34
			//	TIM3->CCR2 = 500;

			break;
 800123c:	e0a7      	b.n	800138e <HAL_UART_RxCpltCallback+0x326>

		case '6':
			TIM3->CCR1 = 800;
 800123e:	4b47      	ldr	r3, [pc, #284]	; (800135c <HAL_UART_RxCpltCallback+0x2f4>)
 8001240:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001244:	635a      	str	r2, [r3, #52]	; 0x34
			//	TIM3->CCR2 = 800;
			break;
 8001246:	e0a2      	b.n	800138e <HAL_UART_RxCpltCallback+0x326>

		case '7':
			TIM3->CCR1 = 1000;
 8001248:	4b44      	ldr	r3, [pc, #272]	; (800135c <HAL_UART_RxCpltCallback+0x2f4>)
 800124a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800124e:	635a      	str	r2, [r3, #52]	; 0x34
			//  		TIM3->CCR2 = 1000;

			break;
 8001250:	e09d      	b.n	800138e <HAL_UART_RxCpltCallback+0x326>

		case 'a':
			TIM4->CNT = 10000;
 8001252:	4b39      	ldr	r3, [pc, #228]	; (8001338 <HAL_UART_RxCpltCallback+0x2d0>)
 8001254:	f242 7210 	movw	r2, #10000	; 0x2710
 8001258:	625a      	str	r2, [r3, #36]	; 0x24

			key_flag = 1;
 800125a:	4b41      	ldr	r3, [pc, #260]	; (8001360 <HAL_UART_RxCpltCallback+0x2f8>)
 800125c:	2201      	movs	r2, #1
 800125e:	701a      	strb	r2, [r3, #0]

			break;
 8001260:	e095      	b.n	800138e <HAL_UART_RxCpltCallback+0x326>

		case 'u':
			if (position_start == 0) {
 8001262:	4b40      	ldr	r3, [pc, #256]	; (8001364 <HAL_UART_RxCpltCallback+0x2fc>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d103      	bne.n	8001272 <HAL_UART_RxCpltCallback+0x20a>
				position_start = 1;
 800126a:	4b3e      	ldr	r3, [pc, #248]	; (8001364 <HAL_UART_RxCpltCallback+0x2fc>)
 800126c:	2201      	movs	r2, #1
 800126e:	601a      	str	r2, [r3, #0]
			} else if (position_start == 1) {
				position_start = 0;

			}
			break;
 8001270:	e08c      	b.n	800138c <HAL_UART_RxCpltCallback+0x324>
			} else if (position_start == 1) {
 8001272:	4b3c      	ldr	r3, [pc, #240]	; (8001364 <HAL_UART_RxCpltCallback+0x2fc>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2b01      	cmp	r3, #1
 8001278:	f040 8088 	bne.w	800138c <HAL_UART_RxCpltCallback+0x324>
				position_start = 0;
 800127c:	4b39      	ldr	r3, [pc, #228]	; (8001364 <HAL_UART_RxCpltCallback+0x2fc>)
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
			break;
 8001282:	e083      	b.n	800138c <HAL_UART_RxCpltCallback+0x324>
		case 'i':  //i, o, p : PID 동작 버튼
			TIM4->CNT = 10000;
 8001284:	4b2c      	ldr	r3, [pc, #176]	; (8001338 <HAL_UART_RxCpltCallback+0x2d0>)
 8001286:	f242 7210 	movw	r2, #10000	; 0x2710
 800128a:	625a      	str	r2, [r3, #36]	; 0x24
			input_position = 10000 + 500 * 1;
 800128c:	4b36      	ldr	r3, [pc, #216]	; (8001368 <HAL_UART_RxCpltCallback+0x300>)
 800128e:	4a37      	ldr	r2, [pc, #220]	; (800136c <HAL_UART_RxCpltCallback+0x304>)
 8001290:	601a      	str	r2, [r3, #0]
			err_sum = 0;
 8001292:	4b37      	ldr	r3, [pc, #220]	; (8001370 <HAL_UART_RxCpltCallback+0x308>)
 8001294:	f04f 0200 	mov.w	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
			err_sum_s = 0;
 800129a:	4b36      	ldr	r3, [pc, #216]	; (8001374 <HAL_UART_RxCpltCallback+0x30c>)
 800129c:	f04f 0200 	mov.w	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
			break;
 80012a2:	e074      	b.n	800138e <HAL_UART_RxCpltCallback+0x326>
		case 'o':
			TIM4->CNT = 10000;
 80012a4:	4b24      	ldr	r3, [pc, #144]	; (8001338 <HAL_UART_RxCpltCallback+0x2d0>)
 80012a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80012aa:	625a      	str	r2, [r3, #36]	; 0x24
			input_position = 10000 + 512 * 2;
 80012ac:	4b2e      	ldr	r3, [pc, #184]	; (8001368 <HAL_UART_RxCpltCallback+0x300>)
 80012ae:	4a32      	ldr	r2, [pc, #200]	; (8001378 <HAL_UART_RxCpltCallback+0x310>)
 80012b0:	601a      	str	r2, [r3, #0]
			err_sum = 0;
 80012b2:	4b2f      	ldr	r3, [pc, #188]	; (8001370 <HAL_UART_RxCpltCallback+0x308>)
 80012b4:	f04f 0200 	mov.w	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
			err_sum_s = 0;
 80012ba:	4b2e      	ldr	r3, [pc, #184]	; (8001374 <HAL_UART_RxCpltCallback+0x30c>)
 80012bc:	f04f 0200 	mov.w	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
			break;
 80012c2:	e064      	b.n	800138e <HAL_UART_RxCpltCallback+0x326>
		case 'p':
			TIM4->CNT = 10000;
 80012c4:	4b1c      	ldr	r3, [pc, #112]	; (8001338 <HAL_UART_RxCpltCallback+0x2d0>)
 80012c6:	f242 7210 	movw	r2, #10000	; 0x2710
 80012ca:	625a      	str	r2, [r3, #36]	; 0x24
			input_position = 10000 - 500 * 1;
 80012cc:	4b26      	ldr	r3, [pc, #152]	; (8001368 <HAL_UART_RxCpltCallback+0x300>)
 80012ce:	4a2b      	ldr	r2, [pc, #172]	; (800137c <HAL_UART_RxCpltCallback+0x314>)
 80012d0:	601a      	str	r2, [r3, #0]
			err_sum = 0;
 80012d2:	4b27      	ldr	r3, [pc, #156]	; (8001370 <HAL_UART_RxCpltCallback+0x308>)
 80012d4:	f04f 0200 	mov.w	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
			err_sum_s = 0;
 80012da:	4b26      	ldr	r3, [pc, #152]	; (8001374 <HAL_UART_RxCpltCallback+0x30c>)
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
			break;
 80012e2:	e054      	b.n	800138e <HAL_UART_RxCpltCallback+0x326>
			 step_enable=0;
			 }
			 break;
			 */
		case 'n':    //z축 스텝모터
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 1);  //정지
 80012e4:	2201      	movs	r2, #1
 80012e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012ea:	4825      	ldr	r0, [pc, #148]	; (8001380 <HAL_UART_RxCpltCallback+0x318>)
 80012ec:	f004 fba8 	bl	8005a40 <HAL_GPIO_WritePin>

			break;
 80012f0:	e04d      	b.n	800138e <HAL_UART_RxCpltCallback+0x326>

		case 'm':
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 0);  //출발
 80012f2:	2200      	movs	r2, #0
 80012f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012f8:	4821      	ldr	r0, [pc, #132]	; (8001380 <HAL_UART_RxCpltCallback+0x318>)
 80012fa:	f004 fba1 	bl	8005a40 <HAL_GPIO_WritePin>

			break;
 80012fe:	e046      	b.n	800138e <HAL_UART_RxCpltCallback+0x326>

		case '.': //cw 1바퀴
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 0);  //방향
 8001300:	2200      	movs	r2, #0
 8001302:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001306:	481e      	ldr	r0, [pc, #120]	; (8001380 <HAL_UART_RxCpltCallback+0x318>)
 8001308:	f004 fb9a 	bl	8005a40 <HAL_GPIO_WritePin>

			HAL_TIM_OC_Start_IT(&htim13, TIM_CHANNEL_1);
 800130c:	2100      	movs	r1, #0
 800130e:	481d      	ldr	r0, [pc, #116]	; (8001384 <HAL_UART_RxCpltCallback+0x31c>)
 8001310:	f005 fa70 	bl	80067f4 <HAL_TIM_OC_Start_IT>
			step_pulse_count = 0;  //펄스 기준값 =0
 8001314:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <HAL_UART_RxCpltCallback+0x320>)
 8001316:	2200      	movs	r2, #0
 8001318:	801a      	strh	r2, [r3, #0]
			break;
 800131a:	e038      	b.n	800138e <HAL_UART_RxCpltCallback+0x326>

		case '/': //ccw 1바퀴
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 1);  //방향
 800131c:	2201      	movs	r2, #1
 800131e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001322:	4817      	ldr	r0, [pc, #92]	; (8001380 <HAL_UART_RxCpltCallback+0x318>)
 8001324:	f004 fb8c 	bl	8005a40 <HAL_GPIO_WritePin>

			HAL_TIM_OC_Start_IT(&htim13, TIM_CHANNEL_1);
 8001328:	2100      	movs	r1, #0
 800132a:	4816      	ldr	r0, [pc, #88]	; (8001384 <HAL_UART_RxCpltCallback+0x31c>)
 800132c:	f005 fa62 	bl	80067f4 <HAL_TIM_OC_Start_IT>
			step_pulse_count = 0;
 8001330:	4b15      	ldr	r3, [pc, #84]	; (8001388 <HAL_UART_RxCpltCallback+0x320>)
 8001332:	2200      	movs	r2, #0
 8001334:	801a      	strh	r2, [r3, #0]
			break;
 8001336:	e02a      	b.n	800138e <HAL_UART_RxCpltCallback+0x326>
 8001338:	40000800 	.word	0x40000800
 800133c:	20000000 	.word	0x20000000
 8001340:	40004800 	.word	0x40004800
 8001344:	2000031c 	.word	0x2000031c
 8001348:	20000320 	.word	0x20000320
 800134c:	0800ed40 	.word	0x0800ed40
 8001350:	40021000 	.word	0x40021000
 8001354:	40020400 	.word	0x40020400
 8001358:	40021800 	.word	0x40021800
 800135c:	40000400 	.word	0x40000400
 8001360:	20000218 	.word	0x20000218
 8001364:	20000214 	.word	0x20000214
 8001368:	20000e3c 	.word	0x20000e3c
 800136c:	46241000 	.word	0x46241000
 8001370:	20000e84 	.word	0x20000e84
 8001374:	20000e80 	.word	0x20000e80
 8001378:	462c4000 	.word	0x462c4000
 800137c:	46147000 	.word	0x46147000
 8001380:	40021400 	.word	0x40021400
 8001384:	2000085c 	.word	0x2000085c
 8001388:	20000ef8 	.word	0x20000ef8
			break;
 800138c:	bf00      	nop
			 */

		}

	}
	if (huart->Instance == UART4) {
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a5b      	ldr	r2, [pc, #364]	; (8001500 <HAL_UART_RxCpltCallback+0x498>)
 8001394:	4293      	cmp	r3, r2
 8001396:	f040 80ae 	bne.w	80014f6 <HAL_UART_RxCpltCallback+0x48e>
		HAL_UART_Receive_IT(&huart4, &data, 1);
 800139a:	2201      	movs	r2, #1
 800139c:	4959      	ldr	r1, [pc, #356]	; (8001504 <HAL_UART_RxCpltCallback+0x49c>)
 800139e:	485a      	ldr	r0, [pc, #360]	; (8001508 <HAL_UART_RxCpltCallback+0x4a0>)
 80013a0:	f006 fe77 	bl	8008092 <HAL_UART_Receive_IT>

		printf("%d -- %c \r\n", data, data);
 80013a4:	4b57      	ldr	r3, [pc, #348]	; (8001504 <HAL_UART_RxCpltCallback+0x49c>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4619      	mov	r1, r3
 80013aa:	4b56      	ldr	r3, [pc, #344]	; (8001504 <HAL_UART_RxCpltCallback+0x49c>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	461a      	mov	r2, r3
 80013b0:	4856      	ldr	r0, [pc, #344]	; (800150c <HAL_UART_RxCpltCallback+0x4a4>)
 80013b2:	f009 f821 	bl	800a3f8 <iprintf>
		switch (data) {
 80013b6:	4b53      	ldr	r3, [pc, #332]	; (8001504 <HAL_UART_RxCpltCallback+0x49c>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	3b21      	subs	r3, #33	; 0x21
 80013bc:	2b20      	cmp	r3, #32
 80013be:	f200 809a 	bhi.w	80014f6 <HAL_UART_RxCpltCallback+0x48e>
 80013c2:	a201      	add	r2, pc, #4	; (adr r2, 80013c8 <HAL_UART_RxCpltCallback+0x360>)
 80013c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c8:	080014d9 	.word	0x080014d9
 80013cc:	080014f7 	.word	0x080014f7
 80013d0:	080014f7 	.word	0x080014f7
 80013d4:	080014f7 	.word	0x080014f7
 80013d8:	080014f7 	.word	0x080014f7
 80013dc:	080014f7 	.word	0x080014f7
 80013e0:	080014f7 	.word	0x080014f7
 80013e4:	080014f7 	.word	0x080014f7
 80013e8:	080014f7 	.word	0x080014f7
 80013ec:	080014f7 	.word	0x080014f7
 80013f0:	080014f7 	.word	0x080014f7
 80013f4:	080014f7 	.word	0x080014f7
 80013f8:	080014f7 	.word	0x080014f7
 80013fc:	080014f7 	.word	0x080014f7
 8001400:	080014f7 	.word	0x080014f7
 8001404:	0800144d 	.word	0x0800144d
 8001408:	08001467 	.word	0x08001467
 800140c:	08001481 	.word	0x08001481
 8001410:	0800148f 	.word	0x0800148f
 8001414:	0800149d 	.word	0x0800149d
 8001418:	080014ab 	.word	0x080014ab
 800141c:	080014b9 	.word	0x080014b9
 8001420:	080014c7 	.word	0x080014c7
 8001424:	080014f7 	.word	0x080014f7
 8001428:	080014f7 	.word	0x080014f7
 800142c:	080014f7 	.word	0x080014f7
 8001430:	080014f7 	.word	0x080014f7
 8001434:	080014f7 	.word	0x080014f7
 8001438:	080014f7 	.word	0x080014f7
 800143c:	080014f7 	.word	0x080014f7
 8001440:	080014f7 	.word	0x080014f7
 8001444:	080014f7 	.word	0x080014f7
 8001448:	080014ef 	.word	0x080014ef
		case '0':
			GPIOB->ODR |= 1 << 0;
 800144c:	4b30      	ldr	r3, [pc, #192]	; (8001510 <HAL_UART_RxCpltCallback+0x4a8>)
 800144e:	695b      	ldr	r3, [r3, #20]
 8001450:	4a2f      	ldr	r2, [pc, #188]	; (8001510 <HAL_UART_RxCpltCallback+0x4a8>)
 8001452:	f043 0301 	orr.w	r3, r3, #1
 8001456:	6153      	str	r3, [r2, #20]
			GPIOG->ODR &= ~1 << 0;  // start
 8001458:	4b2e      	ldr	r3, [pc, #184]	; (8001514 <HAL_UART_RxCpltCallback+0x4ac>)
 800145a:	695b      	ldr	r3, [r3, #20]
 800145c:	4a2d      	ldr	r2, [pc, #180]	; (8001514 <HAL_UART_RxCpltCallback+0x4ac>)
 800145e:	f023 0301 	bic.w	r3, r3, #1
 8001462:	6153      	str	r3, [r2, #20]

			break;
 8001464:	e047      	b.n	80014f6 <HAL_UART_RxCpltCallback+0x48e>

		case '1':  //stop
			GPIOB->ODR &= ~1 << 0;
 8001466:	4b2a      	ldr	r3, [pc, #168]	; (8001510 <HAL_UART_RxCpltCallback+0x4a8>)
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	4a29      	ldr	r2, [pc, #164]	; (8001510 <HAL_UART_RxCpltCallback+0x4a8>)
 800146c:	f023 0301 	bic.w	r3, r3, #1
 8001470:	6153      	str	r3, [r2, #20]
			GPIOG->ODR |= 1 << 0;
 8001472:	4b28      	ldr	r3, [pc, #160]	; (8001514 <HAL_UART_RxCpltCallback+0x4ac>)
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	4a27      	ldr	r2, [pc, #156]	; (8001514 <HAL_UART_RxCpltCallback+0x4ac>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6153      	str	r3, [r2, #20]
			break;
 800147e:	e03a      	b.n	80014f6 <HAL_UART_RxCpltCallback+0x48e>

		case '2':  //dir
			GPIOE->ODR |= 1 << 0;  // back
 8001480:	4b25      	ldr	r3, [pc, #148]	; (8001518 <HAL_UART_RxCpltCallback+0x4b0>)
 8001482:	695b      	ldr	r3, [r3, #20]
 8001484:	4a24      	ldr	r2, [pc, #144]	; (8001518 <HAL_UART_RxCpltCallback+0x4b0>)
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	6153      	str	r3, [r2, #20]
			break;
 800148c:	e033      	b.n	80014f6 <HAL_UART_RxCpltCallback+0x48e>

		case '3':  //dir
			GPIOE->ODR &= ~1 << 0; // go
 800148e:	4b22      	ldr	r3, [pc, #136]	; (8001518 <HAL_UART_RxCpltCallback+0x4b0>)
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	4a21      	ldr	r2, [pc, #132]	; (8001518 <HAL_UART_RxCpltCallback+0x4b0>)
 8001494:	f023 0301 	bic.w	r3, r3, #1
 8001498:	6153      	str	r3, [r2, #20]
			break;
 800149a:	e02c      	b.n	80014f6 <HAL_UART_RxCpltCallback+0x48e>

		case '4':

			TIM3->CCR1 = 0;
 800149c:	4b1f      	ldr	r3, [pc, #124]	; (800151c <HAL_UART_RxCpltCallback+0x4b4>)
 800149e:	2200      	movs	r2, #0
 80014a0:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 0;
 80014a2:	4b1e      	ldr	r3, [pc, #120]	; (800151c <HAL_UART_RxCpltCallback+0x4b4>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	639a      	str	r2, [r3, #56]	; 0x38

			break;
 80014a8:	e025      	b.n	80014f6 <HAL_UART_RxCpltCallback+0x48e>

		case '5':
			TIM3->CCR1 = 50;
 80014aa:	4b1c      	ldr	r3, [pc, #112]	; (800151c <HAL_UART_RxCpltCallback+0x4b4>)
 80014ac:	2232      	movs	r2, #50	; 0x32
 80014ae:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 50;
 80014b0:	4b1a      	ldr	r3, [pc, #104]	; (800151c <HAL_UART_RxCpltCallback+0x4b4>)
 80014b2:	2232      	movs	r2, #50	; 0x32
 80014b4:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 80014b6:	e01e      	b.n	80014f6 <HAL_UART_RxCpltCallback+0x48e>

		case '6':
			TIM3->CCR1 = 200;
 80014b8:	4b18      	ldr	r3, [pc, #96]	; (800151c <HAL_UART_RxCpltCallback+0x4b4>)
 80014ba:	22c8      	movs	r2, #200	; 0xc8
 80014bc:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 200;
 80014be:	4b17      	ldr	r3, [pc, #92]	; (800151c <HAL_UART_RxCpltCallback+0x4b4>)
 80014c0:	22c8      	movs	r2, #200	; 0xc8
 80014c2:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 80014c4:	e017      	b.n	80014f6 <HAL_UART_RxCpltCallback+0x48e>

		case '7':
			TIM3->CCR1 = 1000;
 80014c6:	4b15      	ldr	r3, [pc, #84]	; (800151c <HAL_UART_RxCpltCallback+0x4b4>)
 80014c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014cc:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 1000;
 80014ce:	4b13      	ldr	r3, [pc, #76]	; (800151c <HAL_UART_RxCpltCallback+0x4b4>)
 80014d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014d4:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 80014d6:	e00e      	b.n	80014f6 <HAL_UART_RxCpltCallback+0x48e>

		case '!':
			RX_flag = 1;
 80014d8:	4b11      	ldr	r3, [pc, #68]	; (8001520 <HAL_UART_RxCpltCallback+0x4b8>)
 80014da:	2201      	movs	r2, #1
 80014dc:	701a      	strb	r2, [r3, #0]
			TIM2->CNT = 0;
 80014de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014e2:	2200      	movs	r2, #0
 80014e4:	625a      	str	r2, [r3, #36]	; 0x24
			TIM4->CNT = 0;
 80014e6:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <HAL_UART_RxCpltCallback+0x4bc>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 80014ec:	e003      	b.n	80014f6 <HAL_UART_RxCpltCallback+0x48e>
		case 'A':  //Tx

			RX_flag = 2;
 80014ee:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <HAL_UART_RxCpltCallback+0x4b8>)
 80014f0:	2202      	movs	r2, #2
 80014f2:	701a      	strb	r2, [r3, #0]
			break;
 80014f4:	bf00      	nop
		}

	}

}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40004c00 	.word	0x40004c00
 8001504:	20000368 	.word	0x20000368
 8001508:	2000036c 	.word	0x2000036c
 800150c:	0800ed4c 	.word	0x0800ed4c
 8001510:	40020400 	.word	0x40020400
 8001514:	40021800 	.word	0x40021800
 8001518:	40021000 	.word	0x40021000
 800151c:	40000400 	.word	0x40000400
 8001520:	200003b4 	.word	0x200003b4
 8001524:	40000800 	.word	0x40000800

08001528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800152c:	f002 fab6 	bl	8003a9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001530:	f000 f8f4 	bl	800171c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001534:	f000 fdcc 	bl	80020d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001538:	f000 fd94 	bl	8002064 <MX_DMA_Init>
  MX_ETH_Init();
 800153c:	f000 f9c8 	bl	80018d0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001540:	f000 fd38 	bl	8001fb4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001544:	f000 fd60 	bl	8002008 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 8001548:	f000 fa68 	bl	8001a1c <MX_TIM3_Init>
  MX_TIM14_Init();
 800154c:	f000 fcd0 	bl	8001ef0 <MX_TIM14_Init>
  MX_TIM4_Init();
 8001550:	f000 fb10 	bl	8001b74 <MX_TIM4_Init>
  MX_UART4_Init();
 8001554:	f000 fd04 	bl	8001f60 <MX_UART4_Init>
  MX_TIM2_Init();
 8001558:	f000 fa08 	bl	800196c <MX_TIM2_Init>
  MX_TIM8_Init();
 800155c:	f000 fb9c 	bl	8001c98 <MX_TIM8_Init>
  MX_TIM6_Init();
 8001560:	f000 fb62 	bl	8001c28 <MX_TIM6_Init>
  MX_TIM13_Init();
 8001564:	f000 fc72 	bl	8001e4c <MX_TIM13_Init>
  MX_ADC3_Init();
 8001568:	f000 f942 	bl	80017f0 <MX_ADC3_Init>
  MX_TIM12_Init();
 800156c:	f000 fc34 	bl	8001dd8 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */

	HAL_UART_Receive_IT(&huart3, &key_value, 1);
 8001570:	2201      	movs	r2, #1
 8001572:	4951      	ldr	r1, [pc, #324]	; (80016b8 <main+0x190>)
 8001574:	4851      	ldr	r0, [pc, #324]	; (80016bc <main+0x194>)
 8001576:	f006 fd8c 	bl	8008092 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart4, &data, 1);
 800157a:	2201      	movs	r2, #1
 800157c:	4950      	ldr	r1, [pc, #320]	; (80016c0 <main+0x198>)
 800157e:	4851      	ldr	r0, [pc, #324]	; (80016c4 <main+0x19c>)
 8001580:	f006 fd87 	bl	8008092 <HAL_UART_Receive_IT>

	HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_value, 3);
 8001584:	2203      	movs	r2, #3
 8001586:	4950      	ldr	r1, [pc, #320]	; (80016c8 <main+0x1a0>)
 8001588:	4850      	ldr	r0, [pc, #320]	; (80016cc <main+0x1a4>)
 800158a:	f002 fc71 	bl	8003e70 <HAL_ADC_Start_DMA>

	HAL_TIM_Base_Start_IT(&htim6);
 800158e:	4850      	ldr	r0, [pc, #320]	; (80016d0 <main+0x1a8>)
 8001590:	f005 f866 	bl	8006660 <HAL_TIM_Base_Start_IT>
	//HAL_TIM_Base_Start_IT(&htim7);

	//HAL_TIM_Base_Start(&htim1);
	HAL_TIM_Base_Start_IT(&htim12);
 8001594:	484f      	ldr	r0, [pc, #316]	; (80016d4 <main+0x1ac>)
 8001596:	f005 f863 	bl	8006660 <HAL_TIM_Base_Start_IT>
//	HAL_TIM_OC_Start_IT(&htim13,TIM_CHANNEL_1);
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 800159a:	2100      	movs	r1, #0
 800159c:	484e      	ldr	r0, [pc, #312]	; (80016d8 <main+0x1b0>)
 800159e:	f005 fb57 	bl	8006c50 <HAL_TIM_PWM_Start_IT>
	setvbuf(stdin, NULL, _IONBF, 0);
 80015a2:	4b4e      	ldr	r3, [pc, #312]	; (80016dc <main+0x1b4>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6858      	ldr	r0, [r3, #4]
 80015a8:	2300      	movs	r3, #0
 80015aa:	2202      	movs	r2, #2
 80015ac:	2100      	movs	r1, #0
 80015ae:	f008 ff35 	bl	800a41c <setvbuf>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		encoder_count = TIM4->CNT;
 80015b2:	4b4b      	ldr	r3, [pc, #300]	; (80016e0 <main+0x1b8>)
 80015b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b6:	4a4b      	ldr	r2, [pc, #300]	; (80016e4 <main+0x1bc>)
 80015b8:	6013      	str	r3, [r2, #0]

		if (tim13_flag == 1) {
 80015ba:	4b4b      	ldr	r3, [pc, #300]	; (80016e8 <main+0x1c0>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d10a      	bne.n	80015d8 <main+0xb0>
			z_axis_step_motor(pulse_step, pulse_cycle);  //(펄스,주기) 펄스:200당 한바퀴
 80015c2:	4b4a      	ldr	r3, [pc, #296]	; (80016ec <main+0x1c4>)
 80015c4:	881b      	ldrh	r3, [r3, #0]
 80015c6:	4a4a      	ldr	r2, [pc, #296]	; (80016f0 <main+0x1c8>)
 80015c8:	8812      	ldrh	r2, [r2, #0]
 80015ca:	4611      	mov	r1, r2
 80015cc:	4618      	mov	r0, r3
 80015ce:	f001 f9ab 	bl	8002928 <z_axis_step_motor>
			tim13_flag = 0;
 80015d2:	4b45      	ldr	r3, [pc, #276]	; (80016e8 <main+0x1c0>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
		}

		if (tim6_flag == 1) {  //0.01s
 80015d8:	4b46      	ldr	r3, [pc, #280]	; (80016f4 <main+0x1cc>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d104      	bne.n	80015ea <main+0xc2>
			distance_sensor();  //거리 센서
 80015e0:	f001 f8ea 	bl	80027b8 <distance_sensor>

			tim6_flag = 0;
 80015e4:	4b43      	ldr	r3, [pc, #268]	; (80016f4 <main+0x1cc>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
		}
		if (tim14_flag == 200) //2초
 80015ea:	4b43      	ldr	r3, [pc, #268]	; (80016f8 <main+0x1d0>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2bc8      	cmp	r3, #200	; 0xc8
 80015f0:	d154      	bne.n	800169c <main+0x174>
				{

			RPM_uint16 = RPM * 10;
 80015f2:	4b42      	ldr	r3, [pc, #264]	; (80016fc <main+0x1d4>)
 80015f4:	edd3 7a00 	vldr	s15, [r3]
 80015f8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80015fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001600:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001604:	ee17 3a90 	vmov	r3, s15
 8001608:	b29a      	uxth	r2, r3
 800160a:	4b3d      	ldr	r3, [pc, #244]	; (8001700 <main+0x1d8>)
 800160c:	801a      	strh	r2, [r3, #0]
			battery_uint16 = battery_V * 100;
 800160e:	4b3d      	ldr	r3, [pc, #244]	; (8001704 <main+0x1dc>)
 8001610:	edd3 7a00 	vldr	s15, [r3]
 8001614:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001708 <main+0x1e0>
 8001618:	ee67 7a87 	vmul.f32	s15, s15, s14
 800161c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001620:	ee17 3a90 	vmov	r3, s15
 8001624:	b29a      	uxth	r2, r3
 8001626:	4b39      	ldr	r3, [pc, #228]	; (800170c <main+0x1e4>)
 8001628:	801a      	strh	r2, [r3, #0]

			SerialSendChar_WIFI('?');
 800162a:	203f      	movs	r0, #63	; 0x3f
 800162c:	f7ff fd04 	bl	8001038 <SerialSendChar_WIFI>
			 sprintf((char *)buffer, "%d \r\n",RPM_uint16);
			 HAL_UART_Transmit(&huart3, buffer, strlen((char *)buffer), 100);
			 */

//배터리, 속도 전송
			sprintf((char*) buffer, "%d", battery_uint16);
 8001630:	4b36      	ldr	r3, [pc, #216]	; (800170c <main+0x1e4>)
 8001632:	881b      	ldrh	r3, [r3, #0]
 8001634:	461a      	mov	r2, r3
 8001636:	4936      	ldr	r1, [pc, #216]	; (8001710 <main+0x1e8>)
 8001638:	4836      	ldr	r0, [pc, #216]	; (8001714 <main+0x1ec>)
 800163a:	f008 ff9d 	bl	800a578 <siprintf>
			HAL_UART_Transmit(&huart4, buffer, strlen((char*) buffer), 100);
 800163e:	4835      	ldr	r0, [pc, #212]	; (8001714 <main+0x1ec>)
 8001640:	f7fe fe26 	bl	8000290 <strlen>
 8001644:	4603      	mov	r3, r0
 8001646:	b29a      	uxth	r2, r3
 8001648:	2364      	movs	r3, #100	; 0x64
 800164a:	4932      	ldr	r1, [pc, #200]	; (8001714 <main+0x1ec>)
 800164c:	481d      	ldr	r0, [pc, #116]	; (80016c4 <main+0x19c>)
 800164e:	f006 fc95 	bl	8007f7c <HAL_UART_Transmit>
			sprintf((char*) buffer, "%d", RPM_uint16);
 8001652:	4b2b      	ldr	r3, [pc, #172]	; (8001700 <main+0x1d8>)
 8001654:	881b      	ldrh	r3, [r3, #0]
 8001656:	461a      	mov	r2, r3
 8001658:	492d      	ldr	r1, [pc, #180]	; (8001710 <main+0x1e8>)
 800165a:	482e      	ldr	r0, [pc, #184]	; (8001714 <main+0x1ec>)
 800165c:	f008 ff8c 	bl	800a578 <siprintf>
			HAL_UART_Transmit(&huart4, buffer, strlen((char*) buffer), 100);
 8001660:	482c      	ldr	r0, [pc, #176]	; (8001714 <main+0x1ec>)
 8001662:	f7fe fe15 	bl	8000290 <strlen>
 8001666:	4603      	mov	r3, r0
 8001668:	b29a      	uxth	r2, r3
 800166a:	2364      	movs	r3, #100	; 0x64
 800166c:	4929      	ldr	r1, [pc, #164]	; (8001714 <main+0x1ec>)
 800166e:	4815      	ldr	r0, [pc, #84]	; (80016c4 <main+0x19c>)
 8001670:	f006 fc84 	bl	8007f7c <HAL_UART_Transmit>
			sprintf((char*) buffer, "%d", battery_uint16);
 8001674:	4b25      	ldr	r3, [pc, #148]	; (800170c <main+0x1e4>)
 8001676:	881b      	ldrh	r3, [r3, #0]
 8001678:	461a      	mov	r2, r3
 800167a:	4925      	ldr	r1, [pc, #148]	; (8001710 <main+0x1e8>)
 800167c:	4825      	ldr	r0, [pc, #148]	; (8001714 <main+0x1ec>)
 800167e:	f008 ff7b 	bl	800a578 <siprintf>
			HAL_UART_Transmit(&huart4, buffer, strlen((char*) buffer), 100);
 8001682:	4824      	ldr	r0, [pc, #144]	; (8001714 <main+0x1ec>)
 8001684:	f7fe fe04 	bl	8000290 <strlen>
 8001688:	4603      	mov	r3, r0
 800168a:	b29a      	uxth	r2, r3
 800168c:	2364      	movs	r3, #100	; 0x64
 800168e:	4921      	ldr	r1, [pc, #132]	; (8001714 <main+0x1ec>)
 8001690:	480c      	ldr	r0, [pc, #48]	; (80016c4 <main+0x19c>)
 8001692:	f006 fc73 	bl	8007f7c <HAL_UART_Transmit>

			//  	  HAL_Delay(2000);

			tim14_flag = 0;
 8001696:	4b18      	ldr	r3, [pc, #96]	; (80016f8 <main+0x1d0>)
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
		}
		if (tim6_flag == 1) {
 800169c:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <main+0x1cc>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d186      	bne.n	80015b2 <main+0x8a>
			if (position_start == 1) {
 80016a4:	4b1c      	ldr	r3, [pc, #112]	; (8001718 <main+0x1f0>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d182      	bne.n	80015b2 <main+0x8a>
				position_pid();
 80016ac:	f000 fe54 	bl	8002358 <position_pid>

				tim6_flag = 0;
 80016b0:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <main+0x1cc>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
		encoder_count = TIM4->CNT;
 80016b6:	e77c      	b.n	80015b2 <main+0x8a>
 80016b8:	2000031c 	.word	0x2000031c
 80016bc:	20000320 	.word	0x20000320
 80016c0:	20000368 	.word	0x20000368
 80016c4:	2000036c 	.word	0x2000036c
 80016c8:	200003d0 	.word	0x200003d0
 80016cc:	20000554 	.word	0x20000554
 80016d0:	20000784 	.word	0x20000784
 80016d4:	20000814 	.word	0x20000814
 80016d8:	200006f4 	.word	0x200006f4
 80016dc:	20000074 	.word	0x20000074
 80016e0:	40000800 	.word	0x40000800
 80016e4:	20000000 	.word	0x20000000
 80016e8:	20000eec 	.word	0x20000eec
 80016ec:	20000004 	.word	0x20000004
 80016f0:	20000006 	.word	0x20000006
 80016f4:	20000ee4 	.word	0x20000ee4
 80016f8:	20000ee8 	.word	0x20000ee8
 80016fc:	200003c0 	.word	0x200003c0
 8001700:	200003c8 	.word	0x200003c8
 8001704:	20000ed0 	.word	0x20000ed0
 8001708:	42c80000 	.word	0x42c80000
 800170c:	200003ca 	.word	0x200003ca
 8001710:	0800ed58 	.word	0x0800ed58
 8001714:	2000021c 	.word	0x2000021c
 8001718:	20000214 	.word	0x20000214

0800171c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b094      	sub	sp, #80	; 0x50
 8001720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001722:	f107 0320 	add.w	r3, r7, #32
 8001726:	2230      	movs	r2, #48	; 0x30
 8001728:	2100      	movs	r1, #0
 800172a:	4618      	mov	r0, r3
 800172c:	f008 ff87 	bl	800a63e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001730:	f107 030c 	add.w	r3, r7, #12
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001740:	2300      	movs	r3, #0
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	4b28      	ldr	r3, [pc, #160]	; (80017e8 <SystemClock_Config+0xcc>)
 8001746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001748:	4a27      	ldr	r2, [pc, #156]	; (80017e8 <SystemClock_Config+0xcc>)
 800174a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800174e:	6413      	str	r3, [r2, #64]	; 0x40
 8001750:	4b25      	ldr	r3, [pc, #148]	; (80017e8 <SystemClock_Config+0xcc>)
 8001752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800175c:	2300      	movs	r3, #0
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	4b22      	ldr	r3, [pc, #136]	; (80017ec <SystemClock_Config+0xd0>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a21      	ldr	r2, [pc, #132]	; (80017ec <SystemClock_Config+0xd0>)
 8001766:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800176a:	6013      	str	r3, [r2, #0]
 800176c:	4b1f      	ldr	r3, [pc, #124]	; (80017ec <SystemClock_Config+0xd0>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001774:	607b      	str	r3, [r7, #4]
 8001776:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001778:	2301      	movs	r3, #1
 800177a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800177c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001782:	2302      	movs	r3, #2
 8001784:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001786:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800178a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800178c:	2304      	movs	r3, #4
 800178e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001790:	23a8      	movs	r3, #168	; 0xa8
 8001792:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001794:	2302      	movs	r3, #2
 8001796:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001798:	2307      	movs	r3, #7
 800179a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800179c:	f107 0320 	add.w	r3, r7, #32
 80017a0:	4618      	mov	r0, r3
 80017a2:	f004 fa75 	bl	8005c90 <HAL_RCC_OscConfig>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017ac:	f000 fdce 	bl	800234c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017b0:	230f      	movs	r3, #15
 80017b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017b4:	2302      	movs	r3, #2
 80017b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017c8:	f107 030c 	add.w	r3, r7, #12
 80017cc:	2105      	movs	r1, #5
 80017ce:	4618      	mov	r0, r3
 80017d0:	f004 fcd6 	bl	8006180 <HAL_RCC_ClockConfig>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80017da:	f000 fdb7 	bl	800234c <Error_Handler>
  }
}
 80017de:	bf00      	nop
 80017e0:	3750      	adds	r7, #80	; 0x50
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40007000 	.word	0x40007000

080017f0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017f6:	463b      	mov	r3, r7
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001802:	4b31      	ldr	r3, [pc, #196]	; (80018c8 <MX_ADC3_Init+0xd8>)
 8001804:	4a31      	ldr	r2, [pc, #196]	; (80018cc <MX_ADC3_Init+0xdc>)
 8001806:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001808:	4b2f      	ldr	r3, [pc, #188]	; (80018c8 <MX_ADC3_Init+0xd8>)
 800180a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800180e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_10B;
 8001810:	4b2d      	ldr	r3, [pc, #180]	; (80018c8 <MX_ADC3_Init+0xd8>)
 8001812:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001816:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 8001818:	4b2b      	ldr	r3, [pc, #172]	; (80018c8 <MX_ADC3_Init+0xd8>)
 800181a:	2201      	movs	r2, #1
 800181c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800181e:	4b2a      	ldr	r3, [pc, #168]	; (80018c8 <MX_ADC3_Init+0xd8>)
 8001820:	2200      	movs	r2, #0
 8001822:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001824:	4b28      	ldr	r3, [pc, #160]	; (80018c8 <MX_ADC3_Init+0xd8>)
 8001826:	2200      	movs	r2, #0
 8001828:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800182c:	4b26      	ldr	r3, [pc, #152]	; (80018c8 <MX_ADC3_Init+0xd8>)
 800182e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001832:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8001834:	4b24      	ldr	r3, [pc, #144]	; (80018c8 <MX_ADC3_Init+0xd8>)
 8001836:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800183a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800183c:	4b22      	ldr	r3, [pc, #136]	; (80018c8 <MX_ADC3_Init+0xd8>)
 800183e:	2200      	movs	r2, #0
 8001840:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 3;
 8001842:	4b21      	ldr	r3, [pc, #132]	; (80018c8 <MX_ADC3_Init+0xd8>)
 8001844:	2203      	movs	r2, #3
 8001846:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001848:	4b1f      	ldr	r3, [pc, #124]	; (80018c8 <MX_ADC3_Init+0xd8>)
 800184a:	2201      	movs	r2, #1
 800184c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001850:	4b1d      	ldr	r3, [pc, #116]	; (80018c8 <MX_ADC3_Init+0xd8>)
 8001852:	2201      	movs	r2, #1
 8001854:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001856:	481c      	ldr	r0, [pc, #112]	; (80018c8 <MX_ADC3_Init+0xd8>)
 8001858:	f002 f9b6 	bl	8003bc8 <HAL_ADC_Init>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_ADC3_Init+0x76>
  {
    Error_Handler();
 8001862:	f000 fd73 	bl	800234c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001866:	230c      	movs	r3, #12
 8001868:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800186a:	2301      	movs	r3, #1
 800186c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800186e:	2307      	movs	r3, #7
 8001870:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001872:	463b      	mov	r3, r7
 8001874:	4619      	mov	r1, r3
 8001876:	4814      	ldr	r0, [pc, #80]	; (80018c8 <MX_ADC3_Init+0xd8>)
 8001878:	f002 fc28 	bl	80040cc <HAL_ADC_ConfigChannel>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001882:	f000 fd63 	bl	800234c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001886:	230d      	movs	r3, #13
 8001888:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800188a:	2302      	movs	r3, #2
 800188c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800188e:	463b      	mov	r3, r7
 8001890:	4619      	mov	r1, r3
 8001892:	480d      	ldr	r0, [pc, #52]	; (80018c8 <MX_ADC3_Init+0xd8>)
 8001894:	f002 fc1a 	bl	80040cc <HAL_ADC_ConfigChannel>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 800189e:	f000 fd55 	bl	800234c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80018a2:	230e      	movs	r3, #14
 80018a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80018a6:	2303      	movs	r3, #3
 80018a8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80018aa:	463b      	mov	r3, r7
 80018ac:	4619      	mov	r1, r3
 80018ae:	4806      	ldr	r0, [pc, #24]	; (80018c8 <MX_ADC3_Init+0xd8>)
 80018b0:	f002 fc0c 	bl	80040cc <HAL_ADC_ConfigChannel>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80018ba:	f000 fd47 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80018be:	bf00      	nop
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20000554 	.word	0x20000554
 80018cc:	40012200 	.word	0x40012200

080018d0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80018d4:	4b1f      	ldr	r3, [pc, #124]	; (8001954 <MX_ETH_Init+0x84>)
 80018d6:	4a20      	ldr	r2, [pc, #128]	; (8001958 <MX_ETH_Init+0x88>)
 80018d8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80018da:	4b20      	ldr	r3, [pc, #128]	; (800195c <MX_ETH_Init+0x8c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80018e0:	4b1e      	ldr	r3, [pc, #120]	; (800195c <MX_ETH_Init+0x8c>)
 80018e2:	2280      	movs	r2, #128	; 0x80
 80018e4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80018e6:	4b1d      	ldr	r3, [pc, #116]	; (800195c <MX_ETH_Init+0x8c>)
 80018e8:	22e1      	movs	r2, #225	; 0xe1
 80018ea:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80018ec:	4b1b      	ldr	r3, [pc, #108]	; (800195c <MX_ETH_Init+0x8c>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80018f2:	4b1a      	ldr	r3, [pc, #104]	; (800195c <MX_ETH_Init+0x8c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80018f8:	4b18      	ldr	r3, [pc, #96]	; (800195c <MX_ETH_Init+0x8c>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80018fe:	4b15      	ldr	r3, [pc, #84]	; (8001954 <MX_ETH_Init+0x84>)
 8001900:	4a16      	ldr	r2, [pc, #88]	; (800195c <MX_ETH_Init+0x8c>)
 8001902:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001904:	4b13      	ldr	r3, [pc, #76]	; (8001954 <MX_ETH_Init+0x84>)
 8001906:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800190a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800190c:	4b11      	ldr	r3, [pc, #68]	; (8001954 <MX_ETH_Init+0x84>)
 800190e:	4a14      	ldr	r2, [pc, #80]	; (8001960 <MX_ETH_Init+0x90>)
 8001910:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001912:	4b10      	ldr	r3, [pc, #64]	; (8001954 <MX_ETH_Init+0x84>)
 8001914:	4a13      	ldr	r2, [pc, #76]	; (8001964 <MX_ETH_Init+0x94>)
 8001916:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001918:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <MX_ETH_Init+0x84>)
 800191a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800191e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001920:	480c      	ldr	r0, [pc, #48]	; (8001954 <MX_ETH_Init+0x84>)
 8001922:	f003 fba1 	bl	8005068 <HAL_ETH_Init>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800192c:	f000 fd0e 	bl	800234c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001930:	2238      	movs	r2, #56	; 0x38
 8001932:	2100      	movs	r1, #0
 8001934:	480c      	ldr	r0, [pc, #48]	; (8001968 <MX_ETH_Init+0x98>)
 8001936:	f008 fe82 	bl	800a63e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800193a:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <MX_ETH_Init+0x98>)
 800193c:	2221      	movs	r2, #33	; 0x21
 800193e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001940:	4b09      	ldr	r3, [pc, #36]	; (8001968 <MX_ETH_Init+0x98>)
 8001942:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001946:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001948:	4b07      	ldr	r3, [pc, #28]	; (8001968 <MX_ETH_Init+0x98>)
 800194a:	2200      	movs	r2, #0
 800194c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	200005fc 	.word	0x200005fc
 8001958:	40028000 	.word	0x40028000
 800195c:	20000e30 	.word	0x20000e30
 8001960:	200004b4 	.word	0x200004b4
 8001964:	20000414 	.word	0x20000414
 8001968:	200003dc 	.word	0x200003dc

0800196c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08c      	sub	sp, #48	; 0x30
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001972:	f107 030c 	add.w	r3, r7, #12
 8001976:	2224      	movs	r2, #36	; 0x24
 8001978:	2100      	movs	r1, #0
 800197a:	4618      	mov	r0, r3
 800197c:	f008 fe5f 	bl	800a63e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001980:	1d3b      	adds	r3, r7, #4
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001988:	4b23      	ldr	r3, [pc, #140]	; (8001a18 <MX_TIM2_Init+0xac>)
 800198a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800198e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 340;
 8001990:	4b21      	ldr	r3, [pc, #132]	; (8001a18 <MX_TIM2_Init+0xac>)
 8001992:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8001996:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001998:	4b1f      	ldr	r3, [pc, #124]	; (8001a18 <MX_TIM2_Init+0xac>)
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65000;
 800199e:	4b1e      	ldr	r3, [pc, #120]	; (8001a18 <MX_TIM2_Init+0xac>)
 80019a0:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 80019a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019a6:	4b1c      	ldr	r3, [pc, #112]	; (8001a18 <MX_TIM2_Init+0xac>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ac:	4b1a      	ldr	r3, [pc, #104]	; (8001a18 <MX_TIM2_Init+0xac>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80019b2:	2303      	movs	r3, #3
 80019b4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019b6:	2300      	movs	r3, #0
 80019b8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019ba:	2301      	movs	r3, #1
 80019bc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019be:	2300      	movs	r3, #0
 80019c0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80019c6:	2300      	movs	r3, #0
 80019c8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019ca:	2301      	movs	r3, #1
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019ce:	2300      	movs	r3, #0
 80019d0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80019d6:	f107 030c 	add.w	r3, r7, #12
 80019da:	4619      	mov	r1, r3
 80019dc:	480e      	ldr	r0, [pc, #56]	; (8001a18 <MX_TIM2_Init+0xac>)
 80019de:	f005 fa4d 	bl	8006e7c <HAL_TIM_Encoder_Init>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80019e8:	f000 fcb0 	bl	800234c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ec:	2300      	movs	r3, #0
 80019ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019f0:	2300      	movs	r3, #0
 80019f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019f4:	1d3b      	adds	r3, r7, #4
 80019f6:	4619      	mov	r1, r3
 80019f8:	4807      	ldr	r0, [pc, #28]	; (8001a18 <MX_TIM2_Init+0xac>)
 80019fa:	f006 f98d 	bl	8007d18 <HAL_TIMEx_MasterConfigSynchronization>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001a04:	f000 fca2 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001a08:	213c      	movs	r1, #60	; 0x3c
 8001a0a:	4803      	ldr	r0, [pc, #12]	; (8001a18 <MX_TIM2_Init+0xac>)
 8001a0c:	f005 fadc 	bl	8006fc8 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM2_Init 2 */

}
 8001a10:	bf00      	nop
 8001a12:	3730      	adds	r7, #48	; 0x30
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	200006ac 	.word	0x200006ac

08001a1c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08e      	sub	sp, #56	; 0x38
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	605a      	str	r2, [r3, #4]
 8001a2c:	609a      	str	r2, [r3, #8]
 8001a2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a30:	f107 0320 	add.w	r3, r7, #32
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a3a:	1d3b      	adds	r3, r7, #4
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
 8001a48:	615a      	str	r2, [r3, #20]
 8001a4a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a4c:	4b46      	ldr	r3, [pc, #280]	; (8001b68 <MX_TIM3_Init+0x14c>)
 8001a4e:	4a47      	ldr	r2, [pc, #284]	; (8001b6c <MX_TIM3_Init+0x150>)
 8001a50:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 840-1;
 8001a52:	4b45      	ldr	r3, [pc, #276]	; (8001b68 <MX_TIM3_Init+0x14c>)
 8001a54:	f240 3247 	movw	r2, #839	; 0x347
 8001a58:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a5a:	4b43      	ldr	r3, [pc, #268]	; (8001b68 <MX_TIM3_Init+0x14c>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001a60:	4b41      	ldr	r3, [pc, #260]	; (8001b68 <MX_TIM3_Init+0x14c>)
 8001a62:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a66:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a68:	4b3f      	ldr	r3, [pc, #252]	; (8001b68 <MX_TIM3_Init+0x14c>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a6e:	4b3e      	ldr	r3, [pc, #248]	; (8001b68 <MX_TIM3_Init+0x14c>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a74:	483c      	ldr	r0, [pc, #240]	; (8001b68 <MX_TIM3_Init+0x14c>)
 8001a76:	f004 fda3 	bl	80065c0 <HAL_TIM_Base_Init>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001a80:	f000 fc64 	bl	800234c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a88:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4835      	ldr	r0, [pc, #212]	; (8001b68 <MX_TIM3_Init+0x14c>)
 8001a92:	f005 fd35 	bl	8007500 <HAL_TIM_ConfigClockSource>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001a9c:	f000 fc56 	bl	800234c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001aa0:	4831      	ldr	r0, [pc, #196]	; (8001b68 <MX_TIM3_Init+0x14c>)
 8001aa2:	f005 f87b 	bl	8006b9c <HAL_TIM_PWM_Init>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001aac:	f000 fc4e 	bl	800234c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ab8:	f107 0320 	add.w	r3, r7, #32
 8001abc:	4619      	mov	r1, r3
 8001abe:	482a      	ldr	r0, [pc, #168]	; (8001b68 <MX_TIM3_Init+0x14c>)
 8001ac0:	f006 f92a 	bl	8007d18 <HAL_TIMEx_MasterConfigSynchronization>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001aca:	f000 fc3f 	bl	800234c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ace:	2360      	movs	r3, #96	; 0x60
 8001ad0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8001ad2:	2364      	movs	r3, #100	; 0x64
 8001ad4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ada:	2300      	movs	r3, #0
 8001adc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ade:	1d3b      	adds	r3, r7, #4
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4820      	ldr	r0, [pc, #128]	; (8001b68 <MX_TIM3_Init+0x14c>)
 8001ae6:	f005 fc49 	bl	800737c <HAL_TIM_PWM_ConfigChannel>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001af0:	f000 fc2c 	bl	800234c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 8001af4:	4b1c      	ldr	r3, [pc, #112]	; (8001b68 <MX_TIM3_Init+0x14c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	699a      	ldr	r2, [r3, #24]
 8001afa:	4b1b      	ldr	r3, [pc, #108]	; (8001b68 <MX_TIM3_Init+0x14c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f022 0208 	bic.w	r2, r2, #8
 8001b02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b04:	1d3b      	adds	r3, r7, #4
 8001b06:	2204      	movs	r2, #4
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4817      	ldr	r0, [pc, #92]	; (8001b68 <MX_TIM3_Init+0x14c>)
 8001b0c:	f005 fc36 	bl	800737c <HAL_TIM_PWM_ConfigChannel>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_TIM3_Init+0xfe>
  {
    Error_Handler();
 8001b16:	f000 fc19 	bl	800234c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_2);
 8001b1a:	4b13      	ldr	r3, [pc, #76]	; (8001b68 <MX_TIM3_Init+0x14c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	699a      	ldr	r2, [r3, #24]
 8001b20:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <MX_TIM3_Init+0x14c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b28:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM3_Init 2 */
	TIM3->DIER |= (1 << 1);   // CC1IE: Enable the Tim3 CC1 interrupt
 8001b2a:	4b10      	ldr	r3, [pc, #64]	; (8001b6c <MX_TIM3_Init+0x150>)
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	4a0f      	ldr	r2, [pc, #60]	; (8001b6c <MX_TIM3_Init+0x150>)
 8001b30:	f043 0302 	orr.w	r3, r3, #2
 8001b34:	60d3      	str	r3, [r2, #12]
	NVIC->ISER[0] |= (1 << 29); // TIM3_CC
 8001b36:	4b0e      	ldr	r3, [pc, #56]	; (8001b70 <MX_TIM3_Init+0x154>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a0d      	ldr	r2, [pc, #52]	; (8001b70 <MX_TIM3_Init+0x154>)
 8001b3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001b40:	6013      	str	r3, [r2, #0]
	TIM3->CCER |= (1 << 0);	// CC1E=1: OC1(TIM5_CH1) Active(Capture/Compare 1 output enable)
 8001b42:	4b0a      	ldr	r3, [pc, #40]	; (8001b6c <MX_TIM3_Init+0x150>)
 8001b44:	6a1b      	ldr	r3, [r3, #32]
 8001b46:	4a09      	ldr	r2, [pc, #36]	; (8001b6c <MX_TIM3_Init+0x150>)
 8001b48:	f043 0301 	orr.w	r3, r3, #1
 8001b4c:	6213      	str	r3, [r2, #32]
	// ?��?��??(40�??????????????????????????????????????????)?�� ?��?�� ?��?��출력
	TIM3->CR1 |= (1 << 0);	// CEN: Counter TIM3 enable
 8001b4e:	4b07      	ldr	r3, [pc, #28]	; (8001b6c <MX_TIM3_Init+0x150>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a06      	ldr	r2, [pc, #24]	; (8001b6c <MX_TIM3_Init+0x150>)
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b5a:	4803      	ldr	r0, [pc, #12]	; (8001b68 <MX_TIM3_Init+0x14c>)
 8001b5c:	f001 fa2e 	bl	8002fbc <HAL_TIM_MspPostInit>

}
 8001b60:	bf00      	nop
 8001b62:	3738      	adds	r7, #56	; 0x38
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	200006f4 	.word	0x200006f4
 8001b6c:	40000400 	.word	0x40000400
 8001b70:	e000e100 	.word	0xe000e100

08001b74 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08c      	sub	sp, #48	; 0x30
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b7a:	f107 030c 	add.w	r3, r7, #12
 8001b7e:	2224      	movs	r2, #36	; 0x24
 8001b80:	2100      	movs	r1, #0
 8001b82:	4618      	mov	r0, r3
 8001b84:	f008 fd5b 	bl	800a63e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b88:	1d3b      	adds	r3, r7, #4
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b90:	4b23      	ldr	r3, [pc, #140]	; (8001c20 <MX_TIM4_Init+0xac>)
 8001b92:	4a24      	ldr	r2, [pc, #144]	; (8001c24 <MX_TIM4_Init+0xb0>)
 8001b94:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 340;
 8001b96:	4b22      	ldr	r3, [pc, #136]	; (8001c20 <MX_TIM4_Init+0xac>)
 8001b98:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8001b9c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b9e:	4b20      	ldr	r3, [pc, #128]	; (8001c20 <MX_TIM4_Init+0xac>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65000;
 8001ba4:	4b1e      	ldr	r3, [pc, #120]	; (8001c20 <MX_TIM4_Init+0xac>)
 8001ba6:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001baa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bac:	4b1c      	ldr	r3, [pc, #112]	; (8001c20 <MX_TIM4_Init+0xac>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb2:	4b1b      	ldr	r3, [pc, #108]	; (8001c20 <MX_TIM4_Init+0xac>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001bdc:	f107 030c 	add.w	r3, r7, #12
 8001be0:	4619      	mov	r1, r3
 8001be2:	480f      	ldr	r0, [pc, #60]	; (8001c20 <MX_TIM4_Init+0xac>)
 8001be4:	f005 f94a 	bl	8006e7c <HAL_TIM_Encoder_Init>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001bee:	f000 fbad 	bl	800234c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001bfa:	1d3b      	adds	r3, r7, #4
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4808      	ldr	r0, [pc, #32]	; (8001c20 <MX_TIM4_Init+0xac>)
 8001c00:	f006 f88a 	bl	8007d18 <HAL_TIMEx_MasterConfigSynchronization>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001c0a:	f000 fb9f 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001c0e:	213c      	movs	r1, #60	; 0x3c
 8001c10:	4803      	ldr	r0, [pc, #12]	; (8001c20 <MX_TIM4_Init+0xac>)
 8001c12:	f005 f9d9 	bl	8006fc8 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM4_Init 2 */

}
 8001c16:	bf00      	nop
 8001c18:	3730      	adds	r7, #48	; 0x30
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	2000073c 	.word	0x2000073c
 8001c24:	40000800 	.word	0x40000800

08001c28 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_Init 0 */
	//0.001s = 1ms
	//PID 샘플링 주기
  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c2e:	463b      	mov	r3, r7
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001c36:	4b16      	ldr	r3, [pc, #88]	; (8001c90 <MX_TIM6_Init+0x68>)
 8001c38:	4a16      	ldr	r2, [pc, #88]	; (8001c94 <MX_TIM6_Init+0x6c>)
 8001c3a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 8001c3c:	4b14      	ldr	r3, [pc, #80]	; (8001c90 <MX_TIM6_Init+0x68>)
 8001c3e:	2253      	movs	r2, #83	; 0x53
 8001c40:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c42:	4b13      	ldr	r3, [pc, #76]	; (8001c90 <MX_TIM6_Init+0x68>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8001c48:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <MX_TIM6_Init+0x68>)
 8001c4a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c4e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c50:	4b0f      	ldr	r3, [pc, #60]	; (8001c90 <MX_TIM6_Init+0x68>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c56:	480e      	ldr	r0, [pc, #56]	; (8001c90 <MX_TIM6_Init+0x68>)
 8001c58:	f004 fcb2 	bl	80065c0 <HAL_TIM_Base_Init>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001c62:	f000 fb73 	bl	800234c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c66:	2300      	movs	r3, #0
 8001c68:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c6e:	463b      	mov	r3, r7
 8001c70:	4619      	mov	r1, r3
 8001c72:	4807      	ldr	r0, [pc, #28]	; (8001c90 <MX_TIM6_Init+0x68>)
 8001c74:	f006 f850 	bl	8007d18 <HAL_TIMEx_MasterConfigSynchronization>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001c7e:	f000 fb65 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
	HAL_TIM_Base_Start_IT(&htim6);
 8001c82:	4803      	ldr	r0, [pc, #12]	; (8001c90 <MX_TIM6_Init+0x68>)
 8001c84:	f004 fcec 	bl	8006660 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM6_Init 2 */

}
 8001c88:	bf00      	nop
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20000784 	.word	0x20000784
 8001c94:	40001000 	.word	0x40001000

08001c98 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b096      	sub	sp, #88	; 0x58
 8001c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */
	//ADC 측정 타이머 , 나중엔 필요 x
  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c9e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	605a      	str	r2, [r3, #4]
 8001ca8:	609a      	str	r2, [r3, #8]
 8001caa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	605a      	str	r2, [r3, #4]
 8001cc0:	609a      	str	r2, [r3, #8]
 8001cc2:	60da      	str	r2, [r3, #12]
 8001cc4:	611a      	str	r2, [r3, #16]
 8001cc6:	615a      	str	r2, [r3, #20]
 8001cc8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001cca:	1d3b      	adds	r3, r7, #4
 8001ccc:	2220      	movs	r2, #32
 8001cce:	2100      	movs	r1, #0
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f008 fcb4 	bl	800a63e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001cd6:	4b3e      	ldr	r3, [pc, #248]	; (8001dd0 <MX_TIM8_Init+0x138>)
 8001cd8:	4a3e      	ldr	r2, [pc, #248]	; (8001dd4 <MX_TIM8_Init+0x13c>)
 8001cda:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 840-1;
 8001cdc:	4b3c      	ldr	r3, [pc, #240]	; (8001dd0 <MX_TIM8_Init+0x138>)
 8001cde:	f240 3247 	movw	r2, #839	; 0x347
 8001ce2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce4:	4b3a      	ldr	r3, [pc, #232]	; (8001dd0 <MX_TIM8_Init+0x138>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 50-1;
 8001cea:	4b39      	ldr	r3, [pc, #228]	; (8001dd0 <MX_TIM8_Init+0x138>)
 8001cec:	2231      	movs	r2, #49	; 0x31
 8001cee:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cf0:	4b37      	ldr	r3, [pc, #220]	; (8001dd0 <MX_TIM8_Init+0x138>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001cf6:	4b36      	ldr	r3, [pc, #216]	; (8001dd0 <MX_TIM8_Init+0x138>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cfc:	4b34      	ldr	r3, [pc, #208]	; (8001dd0 <MX_TIM8_Init+0x138>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001d02:	4833      	ldr	r0, [pc, #204]	; (8001dd0 <MX_TIM8_Init+0x138>)
 8001d04:	f004 fc5c 	bl	80065c0 <HAL_TIM_Base_Init>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001d0e:	f000 fb1d 	bl	800234c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d16:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001d18:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	482c      	ldr	r0, [pc, #176]	; (8001dd0 <MX_TIM8_Init+0x138>)
 8001d20:	f005 fbee 	bl	8007500 <HAL_TIM_ConfigClockSource>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001d2a:	f000 fb0f 	bl	800234c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8001d2e:	4828      	ldr	r0, [pc, #160]	; (8001dd0 <MX_TIM8_Init+0x138>)
 8001d30:	f004 fd06 	bl	8006740 <HAL_TIM_OC_Init>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001d3a:	f000 fb07 	bl	800234c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001d3e:	2320      	movs	r3, #32
 8001d40:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d42:	2300      	movs	r3, #0
 8001d44:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001d46:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4820      	ldr	r0, [pc, #128]	; (8001dd0 <MX_TIM8_Init+0x138>)
 8001d4e:	f005 ffe3 	bl	8007d18 <HAL_TIMEx_MasterConfigSynchronization>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001d58:	f000 faf8 	bl	800234c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2000;
 8001d60:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001d64:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d66:	2300      	movs	r3, #0
 8001d68:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d72:	2300      	movs	r3, #0
 8001d74:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d7a:	220c      	movs	r2, #12
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4814      	ldr	r0, [pc, #80]	; (8001dd0 <MX_TIM8_Init+0x138>)
 8001d80:	f005 faa0 	bl	80072c4 <HAL_TIM_OC_ConfigChannel>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8001d8a:	f000 fadf 	bl	800234c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d92:	2300      	movs	r3, #0
 8001d94:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d96:	2300      	movs	r3, #0
 8001d98:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001da2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001da6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001da8:	2300      	movs	r3, #0
 8001daa:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001dac:	1d3b      	adds	r3, r7, #4
 8001dae:	4619      	mov	r1, r3
 8001db0:	4807      	ldr	r0, [pc, #28]	; (8001dd0 <MX_TIM8_Init+0x138>)
 8001db2:	f006 f82d 	bl	8007e10 <HAL_TIMEx_ConfigBreakDeadTime>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8001dbc:	f000 fac6 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */
	HAL_TIM_Base_Start_IT(&htim8);
 8001dc0:	4803      	ldr	r0, [pc, #12]	; (8001dd0 <MX_TIM8_Init+0x138>)
 8001dc2:	f004 fc4d 	bl	8006660 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM8_Init 2 */

}
 8001dc6:	bf00      	nop
 8001dc8:	3758      	adds	r7, #88	; 0x58
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	200007cc 	.word	0x200007cc
 8001dd4:	40010400 	.word	0x40010400

08001dd8 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */
	// 초음파 센서
  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dde:	463b      	mov	r3, r7
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001dea:	4b16      	ldr	r3, [pc, #88]	; (8001e44 <MX_TIM12_Init+0x6c>)
 8001dec:	4a16      	ldr	r2, [pc, #88]	; (8001e48 <MX_TIM12_Init+0x70>)
 8001dee:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 42-1;
 8001df0:	4b14      	ldr	r3, [pc, #80]	; (8001e44 <MX_TIM12_Init+0x6c>)
 8001df2:	2229      	movs	r2, #41	; 0x29
 8001df4:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001df6:	4b13      	ldr	r3, [pc, #76]	; (8001e44 <MX_TIM12_Init+0x6c>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001dfc:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <MX_TIM12_Init+0x6c>)
 8001dfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e02:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e04:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <MX_TIM12_Init+0x6c>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e0a:	4b0e      	ldr	r3, [pc, #56]	; (8001e44 <MX_TIM12_Init+0x6c>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001e10:	480c      	ldr	r0, [pc, #48]	; (8001e44 <MX_TIM12_Init+0x6c>)
 8001e12:	f004 fbd5 	bl	80065c0 <HAL_TIM_Base_Init>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8001e1c:	f000 fa96 	bl	800234c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e24:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001e26:	463b      	mov	r3, r7
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4806      	ldr	r0, [pc, #24]	; (8001e44 <MX_TIM12_Init+0x6c>)
 8001e2c:	f005 fb68 	bl	8007500 <HAL_TIM_ConfigClockSource>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 8001e36:	f000 fa89 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8001e3a:	bf00      	nop
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20000814 	.word	0x20000814
 8001e48:	40001800 	.word	0x40001800

08001e4c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b088      	sub	sp, #32
 8001e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */
// 테스트 용
  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e52:	1d3b      	adds	r3, r7, #4
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	60da      	str	r2, [r3, #12]
 8001e5e:	611a      	str	r2, [r3, #16]
 8001e60:	615a      	str	r2, [r3, #20]
 8001e62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001e64:	4b20      	ldr	r3, [pc, #128]	; (8001ee8 <MX_TIM13_Init+0x9c>)
 8001e66:	4a21      	ldr	r2, [pc, #132]	; (8001eec <MX_TIM13_Init+0xa0>)
 8001e68:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 84-1;
 8001e6a:	4b1f      	ldr	r3, [pc, #124]	; (8001ee8 <MX_TIM13_Init+0x9c>)
 8001e6c:	2253      	movs	r2, #83	; 0x53
 8001e6e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e70:	4b1d      	ldr	r3, [pc, #116]	; (8001ee8 <MX_TIM13_Init+0x9c>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 700-1;
 8001e76:	4b1c      	ldr	r3, [pc, #112]	; (8001ee8 <MX_TIM13_Init+0x9c>)
 8001e78:	f240 22bb 	movw	r2, #699	; 0x2bb
 8001e7c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ee8 <MX_TIM13_Init+0x9c>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e84:	4b18      	ldr	r3, [pc, #96]	; (8001ee8 <MX_TIM13_Init+0x9c>)
 8001e86:	2280      	movs	r2, #128	; 0x80
 8001e88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001e8a:	4817      	ldr	r0, [pc, #92]	; (8001ee8 <MX_TIM13_Init+0x9c>)
 8001e8c:	f004 fb98 	bl	80065c0 <HAL_TIM_Base_Init>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8001e96:	f000 fa59 	bl	800234c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim13) != HAL_OK)
 8001e9a:	4813      	ldr	r0, [pc, #76]	; (8001ee8 <MX_TIM13_Init+0x9c>)
 8001e9c:	f004 fc50 	bl	8006740 <HAL_TIM_OC_Init>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8001ea6:	f000 fa51 	bl	800234c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001eaa:	2330      	movs	r3, #48	; 0x30
 8001eac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8001eae:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001eb2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ebc:	1d3b      	adds	r3, r7, #4
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4809      	ldr	r0, [pc, #36]	; (8001ee8 <MX_TIM13_Init+0x9c>)
 8001ec4:	f005 f9fe 	bl	80072c4 <HAL_TIM_OC_ConfigChannel>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_TIM13_Init+0x86>
  {
    Error_Handler();
 8001ece:	f000 fa3d 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */
	HAL_TIM_MspPostInit(&htim13);
 8001ed2:	4805      	ldr	r0, [pc, #20]	; (8001ee8 <MX_TIM13_Init+0x9c>)
 8001ed4:	f001 f872 	bl	8002fbc <HAL_TIM_MspPostInit>
  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001ed8:	4803      	ldr	r0, [pc, #12]	; (8001ee8 <MX_TIM13_Init+0x9c>)
 8001eda:	f001 f86f 	bl	8002fbc <HAL_TIM_MspPostInit>

}
 8001ede:	bf00      	nop
 8001ee0:	3720      	adds	r7, #32
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	2000085c 	.word	0x2000085c
 8001eec:	40001c00 	.word	0x40001c00

08001ef0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001ef4:	4b17      	ldr	r3, [pc, #92]	; (8001f54 <MX_TIM14_Init+0x64>)
 8001ef6:	4a18      	ldr	r2, [pc, #96]	; (8001f58 <MX_TIM14_Init+0x68>)
 8001ef8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 840-1;
 8001efa:	4b16      	ldr	r3, [pc, #88]	; (8001f54 <MX_TIM14_Init+0x64>)
 8001efc:	f240 3247 	movw	r2, #839	; 0x347
 8001f00:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f02:	4b14      	ldr	r3, [pc, #80]	; (8001f54 <MX_TIM14_Init+0x64>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000-1;
 8001f08:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <MX_TIM14_Init+0x64>)
 8001f0a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f0e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f10:	4b10      	ldr	r3, [pc, #64]	; (8001f54 <MX_TIM14_Init+0x64>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f16:	4b0f      	ldr	r3, [pc, #60]	; (8001f54 <MX_TIM14_Init+0x64>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001f1c:	480d      	ldr	r0, [pc, #52]	; (8001f54 <MX_TIM14_Init+0x64>)
 8001f1e:	f004 fb4f 	bl	80065c0 <HAL_TIM_Base_Init>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8001f28:	f000 fa10 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */
	TIM14->DIER |= (1 << 0);   // CC1IE: Enable the Tim14 UG interrupt
 8001f2c:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <MX_TIM14_Init+0x68>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	4a09      	ldr	r2, [pc, #36]	; (8001f58 <MX_TIM14_Init+0x68>)
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	60d3      	str	r3, [r2, #12]
	NVIC->ISER[1] |= (1 << (45 - 32)); // TIM14_CC
 8001f38:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <MX_TIM14_Init+0x6c>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	4a07      	ldr	r2, [pc, #28]	; (8001f5c <MX_TIM14_Init+0x6c>)
 8001f3e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f42:	6053      	str	r3, [r2, #4]

	TIM14->CR1 |= (1 << 0);	// CEN: Counter TIM14 enable
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <MX_TIM14_Init+0x68>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a03      	ldr	r2, [pc, #12]	; (8001f58 <MX_TIM14_Init+0x68>)
 8001f4a:	f043 0301 	orr.w	r3, r3, #1
 8001f4e:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM14_Init 2 */

}
 8001f50:	bf00      	nop
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	200008a4 	.word	0x200008a4
 8001f58:	40002000 	.word	0x40002000
 8001f5c:	e000e100 	.word	0xe000e100

08001f60 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001f64:	4b11      	ldr	r3, [pc, #68]	; (8001fac <MX_UART4_Init+0x4c>)
 8001f66:	4a12      	ldr	r2, [pc, #72]	; (8001fb0 <MX_UART4_Init+0x50>)
 8001f68:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001f6a:	4b10      	ldr	r3, [pc, #64]	; (8001fac <MX_UART4_Init+0x4c>)
 8001f6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f70:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001f72:	4b0e      	ldr	r3, [pc, #56]	; (8001fac <MX_UART4_Init+0x4c>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001f78:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <MX_UART4_Init+0x4c>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 8001f7e:	4b0b      	ldr	r3, [pc, #44]	; (8001fac <MX_UART4_Init+0x4c>)
 8001f80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f84:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001f86:	4b09      	ldr	r3, [pc, #36]	; (8001fac <MX_UART4_Init+0x4c>)
 8001f88:	220c      	movs	r2, #12
 8001f8a:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f8c:	4b07      	ldr	r3, [pc, #28]	; (8001fac <MX_UART4_Init+0x4c>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f92:	4b06      	ldr	r3, [pc, #24]	; (8001fac <MX_UART4_Init+0x4c>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001f98:	4804      	ldr	r0, [pc, #16]	; (8001fac <MX_UART4_Init+0x4c>)
 8001f9a:	f005 ff9f 	bl	8007edc <HAL_UART_Init>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_UART4_Init+0x48>
  {
    Error_Handler();
 8001fa4:	f000 f9d2 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001fa8:	bf00      	nop
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	2000036c 	.word	0x2000036c
 8001fb0:	40004c00 	.word	0x40004c00

08001fb4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001fb8:	4b11      	ldr	r3, [pc, #68]	; (8002000 <MX_USART3_UART_Init+0x4c>)
 8001fba:	4a12      	ldr	r2, [pc, #72]	; (8002004 <MX_USART3_UART_Init+0x50>)
 8001fbc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001fbe:	4b10      	ldr	r3, [pc, #64]	; (8002000 <MX_USART3_UART_Init+0x4c>)
 8001fc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fc4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001fc6:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <MX_USART3_UART_Init+0x4c>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	; (8002000 <MX_USART3_UART_Init+0x4c>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001fd2:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <MX_USART3_UART_Init+0x4c>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fd8:	4b09      	ldr	r3, [pc, #36]	; (8002000 <MX_USART3_UART_Init+0x4c>)
 8001fda:	220c      	movs	r2, #12
 8001fdc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fde:	4b08      	ldr	r3, [pc, #32]	; (8002000 <MX_USART3_UART_Init+0x4c>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fe4:	4b06      	ldr	r3, [pc, #24]	; (8002000 <MX_USART3_UART_Init+0x4c>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001fea:	4805      	ldr	r0, [pc, #20]	; (8002000 <MX_USART3_UART_Init+0x4c>)
 8001fec:	f005 ff76 	bl	8007edc <HAL_UART_Init>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001ff6:	f000 f9a9 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000320 	.word	0x20000320
 8002004:	40004800 	.word	0x40004800

08002008 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800200c:	4b14      	ldr	r3, [pc, #80]	; (8002060 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800200e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002012:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8002014:	4b12      	ldr	r3, [pc, #72]	; (8002060 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002016:	2204      	movs	r2, #4
 8002018:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800201a:	4b11      	ldr	r3, [pc, #68]	; (8002060 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800201c:	2202      	movs	r2, #2
 800201e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002020:	4b0f      	ldr	r3, [pc, #60]	; (8002060 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002022:	2200      	movs	r2, #0
 8002024:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002026:	4b0e      	ldr	r3, [pc, #56]	; (8002060 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002028:	2202      	movs	r2, #2
 800202a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800202c:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800202e:	2201      	movs	r2, #1
 8002030:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002032:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002034:	2200      	movs	r2, #0
 8002036:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002038:	4b09      	ldr	r3, [pc, #36]	; (8002060 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800203a:	2200      	movs	r2, #0
 800203c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800203e:	4b08      	ldr	r3, [pc, #32]	; (8002060 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002040:	2201      	movs	r2, #1
 8002042:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002044:	4b06      	ldr	r3, [pc, #24]	; (8002060 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002046:	2200      	movs	r2, #0
 8002048:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800204a:	4805      	ldr	r0, [pc, #20]	; (8002060 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800204c:	f003 fd11 	bl	8005a72 <HAL_PCD_Init>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002056:	f000 f979 	bl	800234c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	2000094c 	.word	0x2000094c

08002064 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	607b      	str	r3, [r7, #4]
 800206e:	4b17      	ldr	r3, [pc, #92]	; (80020cc <MX_DMA_Init+0x68>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	4a16      	ldr	r2, [pc, #88]	; (80020cc <MX_DMA_Init+0x68>)
 8002074:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002078:	6313      	str	r3, [r2, #48]	; 0x30
 800207a:	4b14      	ldr	r3, [pc, #80]	; (80020cc <MX_DMA_Init+0x68>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002082:	607b      	str	r3, [r7, #4]
 8002084:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	603b      	str	r3, [r7, #0]
 800208a:	4b10      	ldr	r3, [pc, #64]	; (80020cc <MX_DMA_Init+0x68>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	4a0f      	ldr	r2, [pc, #60]	; (80020cc <MX_DMA_Init+0x68>)
 8002090:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002094:	6313      	str	r3, [r2, #48]	; 0x30
 8002096:	4b0d      	ldr	r3, [pc, #52]	; (80020cc <MX_DMA_Init+0x68>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800209e:	603b      	str	r3, [r7, #0]
 80020a0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80020a2:	2200      	movs	r2, #0
 80020a4:	2100      	movs	r1, #0
 80020a6:	2011      	movs	r0, #17
 80020a8:	f002 fba5 	bl	80047f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80020ac:	2011      	movs	r0, #17
 80020ae:	f002 fbbe 	bl	800482e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80020b2:	2200      	movs	r2, #0
 80020b4:	2100      	movs	r1, #0
 80020b6:	2039      	movs	r0, #57	; 0x39
 80020b8:	f002 fb9d 	bl	80047f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80020bc:	2039      	movs	r0, #57	; 0x39
 80020be:	f002 fbb6 	bl	800482e <HAL_NVIC_EnableIRQ>

}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40023800 	.word	0x40023800

080020d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08e      	sub	sp, #56	; 0x38
 80020d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	605a      	str	r2, [r3, #4]
 80020e0:	609a      	str	r2, [r3, #8]
 80020e2:	60da      	str	r2, [r3, #12]
 80020e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	623b      	str	r3, [r7, #32]
 80020ea:	4b84      	ldr	r3, [pc, #528]	; (80022fc <MX_GPIO_Init+0x22c>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	4a83      	ldr	r2, [pc, #524]	; (80022fc <MX_GPIO_Init+0x22c>)
 80020f0:	f043 0304 	orr.w	r3, r3, #4
 80020f4:	6313      	str	r3, [r2, #48]	; 0x30
 80020f6:	4b81      	ldr	r3, [pc, #516]	; (80022fc <MX_GPIO_Init+0x22c>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	f003 0304 	and.w	r3, r3, #4
 80020fe:	623b      	str	r3, [r7, #32]
 8002100:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	61fb      	str	r3, [r7, #28]
 8002106:	4b7d      	ldr	r3, [pc, #500]	; (80022fc <MX_GPIO_Init+0x22c>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	4a7c      	ldr	r2, [pc, #496]	; (80022fc <MX_GPIO_Init+0x22c>)
 800210c:	f043 0320 	orr.w	r3, r3, #32
 8002110:	6313      	str	r3, [r2, #48]	; 0x30
 8002112:	4b7a      	ldr	r3, [pc, #488]	; (80022fc <MX_GPIO_Init+0x22c>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	f003 0320 	and.w	r3, r3, #32
 800211a:	61fb      	str	r3, [r7, #28]
 800211c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	61bb      	str	r3, [r7, #24]
 8002122:	4b76      	ldr	r3, [pc, #472]	; (80022fc <MX_GPIO_Init+0x22c>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	4a75      	ldr	r2, [pc, #468]	; (80022fc <MX_GPIO_Init+0x22c>)
 8002128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800212c:	6313      	str	r3, [r2, #48]	; 0x30
 800212e:	4b73      	ldr	r3, [pc, #460]	; (80022fc <MX_GPIO_Init+0x22c>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002136:	61bb      	str	r3, [r7, #24]
 8002138:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
 800213e:	4b6f      	ldr	r3, [pc, #444]	; (80022fc <MX_GPIO_Init+0x22c>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	4a6e      	ldr	r2, [pc, #440]	; (80022fc <MX_GPIO_Init+0x22c>)
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	6313      	str	r3, [r2, #48]	; 0x30
 800214a:	4b6c      	ldr	r3, [pc, #432]	; (80022fc <MX_GPIO_Init+0x22c>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	617b      	str	r3, [r7, #20]
 8002154:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	613b      	str	r3, [r7, #16]
 800215a:	4b68      	ldr	r3, [pc, #416]	; (80022fc <MX_GPIO_Init+0x22c>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	4a67      	ldr	r2, [pc, #412]	; (80022fc <MX_GPIO_Init+0x22c>)
 8002160:	f043 0302 	orr.w	r3, r3, #2
 8002164:	6313      	str	r3, [r2, #48]	; 0x30
 8002166:	4b65      	ldr	r3, [pc, #404]	; (80022fc <MX_GPIO_Init+0x22c>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	613b      	str	r3, [r7, #16]
 8002170:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	60fb      	str	r3, [r7, #12]
 8002176:	4b61      	ldr	r3, [pc, #388]	; (80022fc <MX_GPIO_Init+0x22c>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	4a60      	ldr	r2, [pc, #384]	; (80022fc <MX_GPIO_Init+0x22c>)
 800217c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002180:	6313      	str	r3, [r2, #48]	; 0x30
 8002182:	4b5e      	ldr	r3, [pc, #376]	; (80022fc <MX_GPIO_Init+0x22c>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	60bb      	str	r3, [r7, #8]
 8002192:	4b5a      	ldr	r3, [pc, #360]	; (80022fc <MX_GPIO_Init+0x22c>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	4a59      	ldr	r2, [pc, #356]	; (80022fc <MX_GPIO_Init+0x22c>)
 8002198:	f043 0308 	orr.w	r3, r3, #8
 800219c:	6313      	str	r3, [r2, #48]	; 0x30
 800219e:	4b57      	ldr	r3, [pc, #348]	; (80022fc <MX_GPIO_Init+0x22c>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	60bb      	str	r3, [r7, #8]
 80021a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	607b      	str	r3, [r7, #4]
 80021ae:	4b53      	ldr	r3, [pc, #332]	; (80022fc <MX_GPIO_Init+0x22c>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	4a52      	ldr	r2, [pc, #328]	; (80022fc <MX_GPIO_Init+0x22c>)
 80021b4:	f043 0310 	orr.w	r3, r3, #16
 80021b8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ba:	4b50      	ldr	r3, [pc, #320]	; (80022fc <MX_GPIO_Init+0x22c>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	f003 0310 	and.w	r3, r3, #16
 80021c2:	607b      	str	r3, [r7, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD3_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 80021c6:	2200      	movs	r2, #0
 80021c8:	f244 0181 	movw	r1, #16513	; 0x4081
 80021cc:	484c      	ldr	r0, [pc, #304]	; (8002300 <MX_GPIO_Init+0x230>)
 80021ce:	f003 fc37 	bl	8005a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80021d2:	2200      	movs	r2, #0
 80021d4:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80021d8:	484a      	ldr	r0, [pc, #296]	; (8002304 <MX_GPIO_Init+0x234>)
 80021da:	f003 fc31 	bl	8005a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80021de:	2200      	movs	r2, #0
 80021e0:	2103      	movs	r1, #3
 80021e2:	4849      	ldr	r0, [pc, #292]	; (8002308 <MX_GPIO_Init+0x238>)
 80021e4:	f003 fc2c 	bl	8005a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 80021e8:	2200      	movs	r2, #0
 80021ea:	2180      	movs	r1, #128	; 0x80
 80021ec:	4847      	ldr	r0, [pc, #284]	; (800230c <MX_GPIO_Init+0x23c>)
 80021ee:	f003 fc27 	bl	8005a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
 80021f2:	2200      	movs	r2, #0
 80021f4:	2101      	movs	r1, #1
 80021f6:	4846      	ldr	r0, [pc, #280]	; (8002310 <MX_GPIO_Init+0x240>)
 80021f8:	f003 fc22 	bl	8005a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80021fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002200:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002202:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002206:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002208:	2300      	movs	r3, #0
 800220a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800220c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002210:	4619      	mov	r1, r3
 8002212:	4840      	ldr	r0, [pc, #256]	; (8002314 <MX_GPIO_Init+0x244>)
 8002214:	f003 fa50 	bl	80056b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 LD3_Pin PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin|GPIO_PIN_7;
 8002218:	f244 0381 	movw	r3, #16513	; 0x4081
 800221c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800221e:	2301      	movs	r3, #1
 8002220:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002222:	2300      	movs	r3, #0
 8002224:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002226:	2300      	movs	r3, #0
 8002228:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800222a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800222e:	4619      	mov	r1, r3
 8002230:	4833      	ldr	r0, [pc, #204]	; (8002300 <MX_GPIO_Init+0x230>)
 8002232:	f003 fa41 	bl	80056b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002236:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800223a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800223c:	2301      	movs	r3, #1
 800223e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002240:	2300      	movs	r3, #0
 8002242:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002244:	2300      	movs	r3, #0
 8002246:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002248:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800224c:	4619      	mov	r1, r3
 800224e:	482d      	ldr	r0, [pc, #180]	; (8002304 <MX_GPIO_Init+0x234>)
 8002250:	f003 fa32 	bl	80056b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002254:	2303      	movs	r3, #3
 8002256:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002258:	2301      	movs	r3, #1
 800225a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002260:	2300      	movs	r3, #0
 8002262:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002264:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002268:	4619      	mov	r1, r3
 800226a:	4827      	ldr	r0, [pc, #156]	; (8002308 <MX_GPIO_Init+0x238>)
 800226c:	f003 fa24 	bl	80056b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002270:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002274:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002276:	2300      	movs	r3, #0
 8002278:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227a:	2300      	movs	r3, #0
 800227c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800227e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002282:	4619      	mov	r1, r3
 8002284:	481e      	ldr	r0, [pc, #120]	; (8002300 <MX_GPIO_Init+0x230>)
 8002286:	f003 fa17 	bl	80056b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800228a:	2380      	movs	r3, #128	; 0x80
 800228c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800228e:	2300      	movs	r3, #0
 8002290:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002292:	2300      	movs	r3, #0
 8002294:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002296:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800229a:	4619      	mov	r1, r3
 800229c:	481a      	ldr	r0, [pc, #104]	; (8002308 <MX_GPIO_Init+0x238>)
 800229e:	f003 fa0b 	bl	80056b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80022a2:	2340      	movs	r3, #64	; 0x40
 80022a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022a6:	2300      	movs	r3, #0
 80022a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022b2:	4619      	mov	r1, r3
 80022b4:	4815      	ldr	r0, [pc, #84]	; (800230c <MX_GPIO_Init+0x23c>)
 80022b6:	f003 f9ff 	bl	80056b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80022ba:	2380      	movs	r3, #128	; 0x80
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022be:	2301      	movs	r3, #1
 80022c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c2:	2300      	movs	r3, #0
 80022c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c6:	2300      	movs	r3, #0
 80022c8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022ce:	4619      	mov	r1, r3
 80022d0:	480e      	ldr	r0, [pc, #56]	; (800230c <MX_GPIO_Init+0x23c>)
 80022d2:	f003 f9f1 	bl	80056b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80022d6:	2301      	movs	r3, #1
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022da:	2301      	movs	r3, #1
 80022dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e2:	2300      	movs	r3, #0
 80022e4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022ea:	4619      	mov	r1, r3
 80022ec:	4808      	ldr	r0, [pc, #32]	; (8002310 <MX_GPIO_Init+0x240>)
 80022ee:	f003 f9e3 	bl	80056b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80022f2:	bf00      	nop
 80022f4:	3738      	adds	r7, #56	; 0x38
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40023800 	.word	0x40023800
 8002300:	40020400 	.word	0x40020400
 8002304:	40021400 	.word	0x40021400
 8002308:	40021800 	.word	0x40021800
 800230c:	40020c00 	.word	0x40020c00
 8002310:	40021000 	.word	0x40021000
 8002314:	40020800 	.word	0x40020800

08002318 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM13) {
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a07      	ldr	r2, [pc, #28]	; (8002344 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d105      	bne.n	8002336 <HAL_TIM_PeriodElapsedCallback+0x1e>

		GPIOB->ODR ^= 1 << 14;
 800232a:	4b07      	ldr	r3, [pc, #28]	; (8002348 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	4a06      	ldr	r2, [pc, #24]	; (8002348 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002330:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 8002334:	6153      	str	r3, [r2, #20]
		 {
		 HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 1);  //정지
		 HAL_TIM_OC_Stop_IT(&htim13,TIM_CHANNEL_1);
		 }*/
	}
}
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	40001c00 	.word	0x40001c00
 8002348:	40020400 	.word	0x40020400

0800234c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002350:	b672      	cpsid	i
}
 8002352:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002354:	e7fe      	b.n	8002354 <Error_Handler+0x8>
	...

08002358 <position_pid>:
float input_duty;

extern float RPM;
extern float RPM_Avg;

void position_pid(void) {
 8002358:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800235c:	af00      	add	r7, sp, #0

//		p_kp = 10;
	//	p_ki = 1;
	//	p_kd = 0.02;

	err = input_position - TIM4->CNT;
 800235e:	4b54      	ldr	r3, [pc, #336]	; (80024b0 <position_pid+0x158>)
 8002360:	ed93 7a00 	vldr	s14, [r3]
 8002364:	4b53      	ldr	r3, [pc, #332]	; (80024b4 <position_pid+0x15c>)
 8002366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002368:	ee07 3a90 	vmov	s15, r3
 800236c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002370:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002374:	4b50      	ldr	r3, [pc, #320]	; (80024b8 <position_pid+0x160>)
 8002376:	edc3 7a00 	vstr	s15, [r3]
	P_KP = err * p_kp;
 800237a:	4b4f      	ldr	r3, [pc, #316]	; (80024b8 <position_pid+0x160>)
 800237c:	ed93 7a00 	vldr	s14, [r3]
 8002380:	4b4e      	ldr	r3, [pc, #312]	; (80024bc <position_pid+0x164>)
 8002382:	edd3 7a00 	vldr	s15, [r3]
 8002386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800238a:	4b4d      	ldr	r3, [pc, #308]	; (80024c0 <position_pid+0x168>)
 800238c:	edc3 7a00 	vstr	s15, [r3]

	err_sum = err_sum + err * 0.001;
 8002390:	4b4c      	ldr	r3, [pc, #304]	; (80024c4 <position_pid+0x16c>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f7fe f8e7 	bl	8000568 <__aeabi_f2d>
 800239a:	4680      	mov	r8, r0
 800239c:	4689      	mov	r9, r1
 800239e:	4b46      	ldr	r3, [pc, #280]	; (80024b8 <position_pid+0x160>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7fe f8e0 	bl	8000568 <__aeabi_f2d>
 80023a8:	a33f      	add	r3, pc, #252	; (adr r3, 80024a8 <position_pid+0x150>)
 80023aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ae:	f7fe f933 	bl	8000618 <__aeabi_dmul>
 80023b2:	4602      	mov	r2, r0
 80023b4:	460b      	mov	r3, r1
 80023b6:	4640      	mov	r0, r8
 80023b8:	4649      	mov	r1, r9
 80023ba:	f7fd ff77 	bl	80002ac <__adddf3>
 80023be:	4602      	mov	r2, r0
 80023c0:	460b      	mov	r3, r1
 80023c2:	4610      	mov	r0, r2
 80023c4:	4619      	mov	r1, r3
 80023c6:	f7fe fc1f 	bl	8000c08 <__aeabi_d2f>
 80023ca:	4603      	mov	r3, r0
 80023cc:	4a3d      	ldr	r2, [pc, #244]	; (80024c4 <position_pid+0x16c>)
 80023ce:	6013      	str	r3, [r2, #0]
	if (p_PID == 0) {
 80023d0:	4b3d      	ldr	r3, [pc, #244]	; (80024c8 <position_pid+0x170>)
 80023d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023d6:	f04f 0200 	mov.w	r2, #0
 80023da:	f04f 0300 	mov.w	r3, #0
 80023de:	f7fe fb83 	bl	8000ae8 <__aeabi_dcmpeq>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d003      	beq.n	80023f0 <position_pid+0x98>
		err_sum = 0;
 80023e8:	4b36      	ldr	r3, [pc, #216]	; (80024c4 <position_pid+0x16c>)
 80023ea:	f04f 0200 	mov.w	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
	}
	P_KI = err_sum * p_ki;
 80023f0:	4b34      	ldr	r3, [pc, #208]	; (80024c4 <position_pid+0x16c>)
 80023f2:	ed93 7a00 	vldr	s14, [r3]
 80023f6:	4b35      	ldr	r3, [pc, #212]	; (80024cc <position_pid+0x174>)
 80023f8:	edd3 7a00 	vldr	s15, [r3]
 80023fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002400:	4b33      	ldr	r3, [pc, #204]	; (80024d0 <position_pid+0x178>)
 8002402:	edc3 7a00 	vstr	s15, [r3]

	err_d = (err - previous_err) / 0.001;   //1ms
 8002406:	4b2c      	ldr	r3, [pc, #176]	; (80024b8 <position_pid+0x160>)
 8002408:	ed93 7a00 	vldr	s14, [r3]
 800240c:	4b31      	ldr	r3, [pc, #196]	; (80024d4 <position_pid+0x17c>)
 800240e:	edd3 7a00 	vldr	s15, [r3]
 8002412:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002416:	ee17 0a90 	vmov	r0, s15
 800241a:	f7fe f8a5 	bl	8000568 <__aeabi_f2d>
 800241e:	a322      	add	r3, pc, #136	; (adr r3, 80024a8 <position_pid+0x150>)
 8002420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002424:	f7fe fa22 	bl	800086c <__aeabi_ddiv>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	492a      	ldr	r1, [pc, #168]	; (80024d8 <position_pid+0x180>)
 800242e:	e9c1 2300 	strd	r2, r3, [r1]
	previous_err = err;
 8002432:	4b21      	ldr	r3, [pc, #132]	; (80024b8 <position_pid+0x160>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a27      	ldr	r2, [pc, #156]	; (80024d4 <position_pid+0x17c>)
 8002438:	6013      	str	r3, [r2, #0]
	P_KD = err_d * p_kd;
 800243a:	4b28      	ldr	r3, [pc, #160]	; (80024dc <position_pid+0x184>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f7fe f892 	bl	8000568 <__aeabi_f2d>
 8002444:	4b24      	ldr	r3, [pc, #144]	; (80024d8 <position_pid+0x180>)
 8002446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800244a:	f7fe f8e5 	bl	8000618 <__aeabi_dmul>
 800244e:	4602      	mov	r2, r0
 8002450:	460b      	mov	r3, r1
 8002452:	4923      	ldr	r1, [pc, #140]	; (80024e0 <position_pid+0x188>)
 8002454:	e9c1 2300 	strd	r2, r3, [r1]

	p_PID = P_KP + P_KI + P_KD;
 8002458:	4b19      	ldr	r3, [pc, #100]	; (80024c0 <position_pid+0x168>)
 800245a:	ed93 7a00 	vldr	s14, [r3]
 800245e:	4b1c      	ldr	r3, [pc, #112]	; (80024d0 <position_pid+0x178>)
 8002460:	edd3 7a00 	vldr	s15, [r3]
 8002464:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002468:	ee17 0a90 	vmov	r0, s15
 800246c:	f7fe f87c 	bl	8000568 <__aeabi_f2d>
 8002470:	4b1b      	ldr	r3, [pc, #108]	; (80024e0 <position_pid+0x188>)
 8002472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002476:	f7fd ff19 	bl	80002ac <__adddf3>
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	4912      	ldr	r1, [pc, #72]	; (80024c8 <position_pid+0x170>)
 8002480:	e9c1 2300 	strd	r2, r3, [r1]

	if (p_PID >= 800) {
 8002484:	4b10      	ldr	r3, [pc, #64]	; (80024c8 <position_pid+0x170>)
 8002486:	e9d3 0100 	ldrd	r0, r1, [r3]
 800248a:	f04f 0200 	mov.w	r2, #0
 800248e:	4b15      	ldr	r3, [pc, #84]	; (80024e4 <position_pid+0x18c>)
 8002490:	f7fe fb48 	bl	8000b24 <__aeabi_dcmpge>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d026      	beq.n	80024e8 <position_pid+0x190>
		p_PID = 800;
 800249a:	490b      	ldr	r1, [pc, #44]	; (80024c8 <position_pid+0x170>)
 800249c:	f04f 0200 	mov.w	r2, #0
 80024a0:	4b10      	ldr	r3, [pc, #64]	; (80024e4 <position_pid+0x18c>)
 80024a2:	e9c1 2300 	strd	r2, r3, [r1]
 80024a6:	e030      	b.n	800250a <position_pid+0x1b2>
 80024a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80024ac:	3f50624d 	.word	0x3f50624d
 80024b0:	20000e3c 	.word	0x20000e3c
 80024b4:	40000800 	.word	0x40000800
 80024b8:	20000e40 	.word	0x20000e40
 80024bc:	20000008 	.word	0x20000008
 80024c0:	20000e60 	.word	0x20000e60
 80024c4:	20000e84 	.word	0x20000e84
 80024c8:	20000e48 	.word	0x20000e48
 80024cc:	20000e50 	.word	0x20000e50
 80024d0:	20000e64 	.word	0x20000e64
 80024d4:	20000e78 	.word	0x20000e78
 80024d8:	20000e70 	.word	0x20000e70
 80024dc:	20000e54 	.word	0x20000e54
 80024e0:	20000e68 	.word	0x20000e68
 80024e4:	40890000 	.word	0x40890000
	} else if (p_PID <= -800) {
 80024e8:	4b9f      	ldr	r3, [pc, #636]	; (8002768 <position_pid+0x410>)
 80024ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024ee:	f04f 0200 	mov.w	r2, #0
 80024f2:	4b9e      	ldr	r3, [pc, #632]	; (800276c <position_pid+0x414>)
 80024f4:	f7fe fb0c 	bl	8000b10 <__aeabi_dcmple>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d005      	beq.n	800250a <position_pid+0x1b2>
		p_PID = -800;
 80024fe:	499a      	ldr	r1, [pc, #616]	; (8002768 <position_pid+0x410>)
 8002500:	f04f 0200 	mov.w	r2, #0
 8002504:	4b99      	ldr	r3, [pc, #612]	; (800276c <position_pid+0x414>)
 8002506:	e9c1 2300 	strd	r2, r3, [r1]
//////////////////////////////////////속도제어기
//	s_kp = 50;
//	s_ki = 5;
//  s_kd = 0;

	input_speed = p_PID;
 800250a:	4b97      	ldr	r3, [pc, #604]	; (8002768 <position_pid+0x410>)
 800250c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002510:	4610      	mov	r0, r2
 8002512:	4619      	mov	r1, r3
 8002514:	f7fe fb78 	bl	8000c08 <__aeabi_d2f>
 8002518:	4603      	mov	r3, r0
 800251a:	4a95      	ldr	r2, [pc, #596]	; (8002770 <position_pid+0x418>)
 800251c:	6013      	str	r3, [r2, #0]
	err_s = input_speed - RPM / 60 * 512;
 800251e:	4b94      	ldr	r3, [pc, #592]	; (8002770 <position_pid+0x418>)
 8002520:	ed93 7a00 	vldr	s14, [r3]
 8002524:	4b93      	ldr	r3, [pc, #588]	; (8002774 <position_pid+0x41c>)
 8002526:	edd3 6a00 	vldr	s13, [r3]
 800252a:	ed9f 6a93 	vldr	s12, [pc, #588]	; 8002778 <position_pid+0x420>
 800252e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002532:	eddf 6a92 	vldr	s13, [pc, #584]	; 800277c <position_pid+0x424>
 8002536:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800253a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800253e:	4b90      	ldr	r3, [pc, #576]	; (8002780 <position_pid+0x428>)
 8002540:	edc3 7a00 	vstr	s15, [r3]
	S_KP = err_s * s_kp;
 8002544:	4b8e      	ldr	r3, [pc, #568]	; (8002780 <position_pid+0x428>)
 8002546:	ed93 7a00 	vldr	s14, [r3]
 800254a:	4b8e      	ldr	r3, [pc, #568]	; (8002784 <position_pid+0x42c>)
 800254c:	edd3 7a00 	vldr	s15, [r3]
 8002550:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002554:	4b8c      	ldr	r3, [pc, #560]	; (8002788 <position_pid+0x430>)
 8002556:	edc3 7a00 	vstr	s15, [r3]

	//y = 0.05e0.158x
	input_duty = 0.05 * pow(2.71828, 0.158 * input_speed);
 800255a:	4b85      	ldr	r3, [pc, #532]	; (8002770 <position_pid+0x418>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f7fe f802 	bl	8000568 <__aeabi_f2d>
 8002564:	a378      	add	r3, pc, #480	; (adr r3, 8002748 <position_pid+0x3f0>)
 8002566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800256a:	f7fe f855 	bl	8000618 <__aeabi_dmul>
 800256e:	4602      	mov	r2, r0
 8002570:	460b      	mov	r3, r1
 8002572:	ec43 2b17 	vmov	d7, r2, r3
 8002576:	eeb0 1a47 	vmov.f32	s2, s14
 800257a:	eef0 1a67 	vmov.f32	s3, s15
 800257e:	ed9f 0b74 	vldr	d0, [pc, #464]	; 8002750 <position_pid+0x3f8>
 8002582:	f00b fc99 	bl	800deb8 <pow>
 8002586:	ec51 0b10 	vmov	r0, r1, d0
 800258a:	a373      	add	r3, pc, #460	; (adr r3, 8002758 <position_pid+0x400>)
 800258c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002590:	f7fe f842 	bl	8000618 <__aeabi_dmul>
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	4610      	mov	r0, r2
 800259a:	4619      	mov	r1, r3
 800259c:	f7fe fb34 	bl	8000c08 <__aeabi_d2f>
 80025a0:	4603      	mov	r3, r0
 80025a2:	4a7a      	ldr	r2, [pc, #488]	; (800278c <position_pid+0x434>)
 80025a4:	6013      	str	r3, [r2, #0]

	err_sum_s = err_sum_s + err_s * 0.001;
 80025a6:	4b7a      	ldr	r3, [pc, #488]	; (8002790 <position_pid+0x438>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7fd ffdc 	bl	8000568 <__aeabi_f2d>
 80025b0:	4680      	mov	r8, r0
 80025b2:	4689      	mov	r9, r1
 80025b4:	4b72      	ldr	r3, [pc, #456]	; (8002780 <position_pid+0x428>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7fd ffd5 	bl	8000568 <__aeabi_f2d>
 80025be:	a368      	add	r3, pc, #416	; (adr r3, 8002760 <position_pid+0x408>)
 80025c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c4:	f7fe f828 	bl	8000618 <__aeabi_dmul>
 80025c8:	4602      	mov	r2, r0
 80025ca:	460b      	mov	r3, r1
 80025cc:	4640      	mov	r0, r8
 80025ce:	4649      	mov	r1, r9
 80025d0:	f7fd fe6c 	bl	80002ac <__adddf3>
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	4610      	mov	r0, r2
 80025da:	4619      	mov	r1, r3
 80025dc:	f7fe fb14 	bl	8000c08 <__aeabi_d2f>
 80025e0:	4603      	mov	r3, r0
 80025e2:	4a6b      	ldr	r2, [pc, #428]	; (8002790 <position_pid+0x438>)
 80025e4:	6013      	str	r3, [r2, #0]
	if (s_PID == 0) {
 80025e6:	4b6b      	ldr	r3, [pc, #428]	; (8002794 <position_pid+0x43c>)
 80025e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025ec:	f04f 0200 	mov.w	r2, #0
 80025f0:	f04f 0300 	mov.w	r3, #0
 80025f4:	f7fe fa78 	bl	8000ae8 <__aeabi_dcmpeq>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <position_pid+0x2ae>
		err_sum_s = 0;
 80025fe:	4b64      	ldr	r3, [pc, #400]	; (8002790 <position_pid+0x438>)
 8002600:	f04f 0200 	mov.w	r2, #0
 8002604:	601a      	str	r2, [r3, #0]
	}
	S_KI = err_sum_s * s_ki;
 8002606:	4b62      	ldr	r3, [pc, #392]	; (8002790 <position_pid+0x438>)
 8002608:	ed93 7a00 	vldr	s14, [r3]
 800260c:	4b62      	ldr	r3, [pc, #392]	; (8002798 <position_pid+0x440>)
 800260e:	edd3 7a00 	vldr	s15, [r3]
 8002612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002616:	4b61      	ldr	r3, [pc, #388]	; (800279c <position_pid+0x444>)
 8002618:	edc3 7a00 	vstr	s15, [r3]

	err_d_s = (err_s - previous_err_s) / 0.001;
 800261c:	4b58      	ldr	r3, [pc, #352]	; (8002780 <position_pid+0x428>)
 800261e:	ed93 7a00 	vldr	s14, [r3]
 8002622:	4b5f      	ldr	r3, [pc, #380]	; (80027a0 <position_pid+0x448>)
 8002624:	edd3 7a00 	vldr	s15, [r3]
 8002628:	ee77 7a67 	vsub.f32	s15, s14, s15
 800262c:	ee17 0a90 	vmov	r0, s15
 8002630:	f7fd ff9a 	bl	8000568 <__aeabi_f2d>
 8002634:	a34a      	add	r3, pc, #296	; (adr r3, 8002760 <position_pid+0x408>)
 8002636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800263a:	f7fe f917 	bl	800086c <__aeabi_ddiv>
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	4958      	ldr	r1, [pc, #352]	; (80027a4 <position_pid+0x44c>)
 8002644:	e9c1 2300 	strd	r2, r3, [r1]
	previous_err_s = err_s;
 8002648:	4b4d      	ldr	r3, [pc, #308]	; (8002780 <position_pid+0x428>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a54      	ldr	r2, [pc, #336]	; (80027a0 <position_pid+0x448>)
 800264e:	6013      	str	r3, [r2, #0]
	S_KD = err_d_s * s_kd;
 8002650:	4b55      	ldr	r3, [pc, #340]	; (80027a8 <position_pid+0x450>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4618      	mov	r0, r3
 8002656:	f7fd ff87 	bl	8000568 <__aeabi_f2d>
 800265a:	4b52      	ldr	r3, [pc, #328]	; (80027a4 <position_pid+0x44c>)
 800265c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002660:	f7fd ffda 	bl	8000618 <__aeabi_dmul>
 8002664:	4602      	mov	r2, r0
 8002666:	460b      	mov	r3, r1
 8002668:	4950      	ldr	r1, [pc, #320]	; (80027ac <position_pid+0x454>)
 800266a:	e9c1 2300 	strd	r2, r3, [r1]

	s_PID = S_KP + S_KI + S_KD;
 800266e:	4b46      	ldr	r3, [pc, #280]	; (8002788 <position_pid+0x430>)
 8002670:	ed93 7a00 	vldr	s14, [r3]
 8002674:	4b49      	ldr	r3, [pc, #292]	; (800279c <position_pid+0x444>)
 8002676:	edd3 7a00 	vldr	s15, [r3]
 800267a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800267e:	ee17 0a90 	vmov	r0, s15
 8002682:	f7fd ff71 	bl	8000568 <__aeabi_f2d>
 8002686:	4b49      	ldr	r3, [pc, #292]	; (80027ac <position_pid+0x454>)
 8002688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268c:	f7fd fe0e 	bl	80002ac <__adddf3>
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	493f      	ldr	r1, [pc, #252]	; (8002794 <position_pid+0x43c>)
 8002696:	e9c1 2300 	strd	r2, r3, [r1]
	 TIM3->CCR1 = s_PID + input_duty;
	 }

	 */

	if (s_PID > 0) {
 800269a:	4b3e      	ldr	r3, [pc, #248]	; (8002794 <position_pid+0x43c>)
 800269c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026a0:	f04f 0200 	mov.w	r2, #0
 80026a4:	f04f 0300 	mov.w	r3, #0
 80026a8:	f7fe fa46 	bl	8000b38 <__aeabi_dcmpgt>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d010      	beq.n	80026d4 <position_pid+0x37c>
		GPIOE->ODR &= ~1 << 0; // go
 80026b2:	4b3f      	ldr	r3, [pc, #252]	; (80027b0 <position_pid+0x458>)
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	4a3e      	ldr	r2, [pc, #248]	; (80027b0 <position_pid+0x458>)
 80026b8:	f023 0301 	bic.w	r3, r3, #1
 80026bc:	6153      	str	r3, [r2, #20]
		TIM3->CCR1 = s_PID;
 80026be:	4b35      	ldr	r3, [pc, #212]	; (8002794 <position_pid+0x43c>)
 80026c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c4:	4c3b      	ldr	r4, [pc, #236]	; (80027b4 <position_pid+0x45c>)
 80026c6:	4610      	mov	r0, r2
 80026c8:	4619      	mov	r1, r3
 80026ca:	f7fe fa7d 	bl	8000bc8 <__aeabi_d2uiz>
 80026ce:	4603      	mov	r3, r0
 80026d0:	6363      	str	r3, [r4, #52]	; 0x34
	} else {
		s_PID = 0;
		TIM3->CCR1 = s_PID;
	}

}
 80026d2:	e036      	b.n	8002742 <position_pid+0x3ea>
	} else if (s_PID < 0) {
 80026d4:	4b2f      	ldr	r3, [pc, #188]	; (8002794 <position_pid+0x43c>)
 80026d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026da:	f04f 0200 	mov.w	r2, #0
 80026de:	f04f 0300 	mov.w	r3, #0
 80026e2:	f7fe fa0b 	bl	8000afc <__aeabi_dcmplt>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d019      	beq.n	8002720 <position_pid+0x3c8>
		GPIOE->ODR |= 1 << 0; // back
 80026ec:	4b30      	ldr	r3, [pc, #192]	; (80027b0 <position_pid+0x458>)
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	4a2f      	ldr	r2, [pc, #188]	; (80027b0 <position_pid+0x458>)
 80026f2:	f043 0301 	orr.w	r3, r3, #1
 80026f6:	6153      	str	r3, [r2, #20]
		s_PID = -s_PID;
 80026f8:	4b26      	ldr	r3, [pc, #152]	; (8002794 <position_pid+0x43c>)
 80026fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fe:	4614      	mov	r4, r2
 8002700:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002704:	4b23      	ldr	r3, [pc, #140]	; (8002794 <position_pid+0x43c>)
 8002706:	e9c3 4500 	strd	r4, r5, [r3]
		TIM3->CCR1 = s_PID;
 800270a:	4b22      	ldr	r3, [pc, #136]	; (8002794 <position_pid+0x43c>)
 800270c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002710:	4c28      	ldr	r4, [pc, #160]	; (80027b4 <position_pid+0x45c>)
 8002712:	4610      	mov	r0, r2
 8002714:	4619      	mov	r1, r3
 8002716:	f7fe fa57 	bl	8000bc8 <__aeabi_d2uiz>
 800271a:	4603      	mov	r3, r0
 800271c:	6363      	str	r3, [r4, #52]	; 0x34
}
 800271e:	e010      	b.n	8002742 <position_pid+0x3ea>
		s_PID = 0;
 8002720:	491c      	ldr	r1, [pc, #112]	; (8002794 <position_pid+0x43c>)
 8002722:	f04f 0200 	mov.w	r2, #0
 8002726:	f04f 0300 	mov.w	r3, #0
 800272a:	e9c1 2300 	strd	r2, r3, [r1]
		TIM3->CCR1 = s_PID;
 800272e:	4b19      	ldr	r3, [pc, #100]	; (8002794 <position_pid+0x43c>)
 8002730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002734:	4c1f      	ldr	r4, [pc, #124]	; (80027b4 <position_pid+0x45c>)
 8002736:	4610      	mov	r0, r2
 8002738:	4619      	mov	r1, r3
 800273a:	f7fe fa45 	bl	8000bc8 <__aeabi_d2uiz>
 800273e:	4603      	mov	r3, r0
 8002740:	6363      	str	r3, [r4, #52]	; 0x34
}
 8002742:	bf00      	nop
 8002744:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002748:	10624dd3 	.word	0x10624dd3
 800274c:	3fc43958 	.word	0x3fc43958
 8002750:	95aaf790 	.word	0x95aaf790
 8002754:	4005bf09 	.word	0x4005bf09
 8002758:	9999999a 	.word	0x9999999a
 800275c:	3fa99999 	.word	0x3fa99999
 8002760:	d2f1a9fc 	.word	0xd2f1a9fc
 8002764:	3f50624d 	.word	0x3f50624d
 8002768:	20000e48 	.word	0x20000e48
 800276c:	c0890000 	.word	0xc0890000
 8002770:	20000e38 	.word	0x20000e38
 8002774:	200003c0 	.word	0x200003c0
 8002778:	42700000 	.word	0x42700000
 800277c:	44000000 	.word	0x44000000
 8002780:	20000e7c 	.word	0x20000e7c
 8002784:	2000000c 	.word	0x2000000c
 8002788:	20000e90 	.word	0x20000e90
 800278c:	20000eac 	.word	0x20000eac
 8002790:	20000e80 	.word	0x20000e80
 8002794:	20000e88 	.word	0x20000e88
 8002798:	20000e58 	.word	0x20000e58
 800279c:	20000e94 	.word	0x20000e94
 80027a0:	20000ea8 	.word	0x20000ea8
 80027a4:	20000ea0 	.word	0x20000ea0
 80027a8:	20000e5c 	.word	0x20000e5c
 80027ac:	20000e98 	.word	0x20000e98
 80027b0:	40021000 	.word	0x40021000
 80027b4:	40000400 	.word	0x40000400

080027b8 <distance_sensor>:
}
*/


void distance_sensor (void)
{
 80027b8:	b598      	push	{r3, r4, r7, lr}
 80027ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80027bc:	2201      	movs	r2, #1
 80027be:	2180      	movs	r1, #128	; 0x80
 80027c0:	484f      	ldr	r0, [pc, #316]	; (8002900 <distance_sensor+0x148>)
 80027c2:	f003 f93d 	bl	8005a40 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim12, 0);
 80027c6:	4b4f      	ldr	r3, [pc, #316]	; (8002904 <distance_sensor+0x14c>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2200      	movs	r2, #0
 80027cc:	625a      	str	r2, [r3, #36]	; 0x24
    while (__HAL_TIM_GET_COUNTER (&htim12) < 10);  // wait for 10 us
 80027ce:	bf00      	nop
 80027d0:	4b4c      	ldr	r3, [pc, #304]	; (8002904 <distance_sensor+0x14c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d6:	2b09      	cmp	r3, #9
 80027d8:	d9fa      	bls.n	80027d0 <distance_sensor+0x18>
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 80027da:	2200      	movs	r2, #0
 80027dc:	2180      	movs	r1, #128	; 0x80
 80027de:	4848      	ldr	r0, [pc, #288]	; (8002900 <distance_sensor+0x148>)
 80027e0:	f003 f92e 	bl	8005a40 <HAL_GPIO_WritePin>

    pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 80027e4:	f001 f9c0 	bl	8003b68 <HAL_GetTick>
 80027e8:	4603      	mov	r3, r0
 80027ea:	4a47      	ldr	r2, [pc, #284]	; (8002908 <distance_sensor+0x150>)
 80027ec:	6013      	str	r3, [r2, #0]
    // wait for the echo pin to go high
    while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 80027ee:	bf00      	nop
 80027f0:	2140      	movs	r1, #64	; 0x40
 80027f2:	4843      	ldr	r0, [pc, #268]	; (8002900 <distance_sensor+0x148>)
 80027f4:	f003 f90c 	bl	8005a10 <HAL_GPIO_ReadPin>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d108      	bne.n	8002810 <distance_sensor+0x58>
 80027fe:	4b42      	ldr	r3, [pc, #264]	; (8002908 <distance_sensor+0x150>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f103 040a 	add.w	r4, r3, #10
 8002806:	f001 f9af 	bl	8003b68 <HAL_GetTick>
 800280a:	4603      	mov	r3, r0
 800280c:	429c      	cmp	r4, r3
 800280e:	d8ef      	bhi.n	80027f0 <distance_sensor+0x38>
    Value1 = __HAL_TIM_GET_COUNTER (&htim12);
 8002810:	4b3c      	ldr	r3, [pc, #240]	; (8002904 <distance_sensor+0x14c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002816:	4a3d      	ldr	r2, [pc, #244]	; (800290c <distance_sensor+0x154>)
 8002818:	6013      	str	r3, [r2, #0]

    pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 800281a:	f001 f9a5 	bl	8003b68 <HAL_GetTick>
 800281e:	4603      	mov	r3, r0
 8002820:	4a39      	ldr	r2, [pc, #228]	; (8002908 <distance_sensor+0x150>)
 8002822:	6013      	str	r3, [r2, #0]
    // wait for the echo pin to go low
    while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 8002824:	bf00      	nop
 8002826:	2140      	movs	r1, #64	; 0x40
 8002828:	4835      	ldr	r0, [pc, #212]	; (8002900 <distance_sensor+0x148>)
 800282a:	f003 f8f1 	bl	8005a10 <HAL_GPIO_ReadPin>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d008      	beq.n	8002846 <distance_sensor+0x8e>
 8002834:	4b34      	ldr	r3, [pc, #208]	; (8002908 <distance_sensor+0x150>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f103 0432 	add.w	r4, r3, #50	; 0x32
 800283c:	f001 f994 	bl	8003b68 <HAL_GetTick>
 8002840:	4603      	mov	r3, r0
 8002842:	429c      	cmp	r4, r3
 8002844:	d8ef      	bhi.n	8002826 <distance_sensor+0x6e>
    Value2 = __HAL_TIM_GET_COUNTER (&htim12);
 8002846:	4b2f      	ldr	r3, [pc, #188]	; (8002904 <distance_sensor+0x14c>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284c:	4a30      	ldr	r2, [pc, #192]	; (8002910 <distance_sensor+0x158>)
 800284e:	6013      	str	r3, [r2, #0]

    Distance = (Value2-Value1)* 0.034/2/2;
 8002850:	4b2f      	ldr	r3, [pc, #188]	; (8002910 <distance_sensor+0x158>)
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	4b2d      	ldr	r3, [pc, #180]	; (800290c <distance_sensor+0x154>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	4618      	mov	r0, r3
 800285c:	f7fd fe62 	bl	8000524 <__aeabi_ui2d>
 8002860:	a325      	add	r3, pc, #148	; (adr r3, 80028f8 <distance_sensor+0x140>)
 8002862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002866:	f7fd fed7 	bl	8000618 <__aeabi_dmul>
 800286a:	4602      	mov	r2, r0
 800286c:	460b      	mov	r3, r1
 800286e:	4610      	mov	r0, r2
 8002870:	4619      	mov	r1, r3
 8002872:	f04f 0200 	mov.w	r2, #0
 8002876:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800287a:	f7fd fff7 	bl	800086c <__aeabi_ddiv>
 800287e:	4602      	mov	r2, r0
 8002880:	460b      	mov	r3, r1
 8002882:	4610      	mov	r0, r2
 8002884:	4619      	mov	r1, r3
 8002886:	f04f 0200 	mov.w	r2, #0
 800288a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800288e:	f7fd ffed 	bl	800086c <__aeabi_ddiv>
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	4610      	mov	r0, r2
 8002898:	4619      	mov	r1, r3
 800289a:	f7fe f9b5 	bl	8000c08 <__aeabi_d2f>
 800289e:	4603      	mov	r3, r0
 80028a0:	4a1c      	ldr	r2, [pc, #112]	; (8002914 <distance_sensor+0x15c>)
 80028a2:	6013      	str	r3, [r2, #0]

    Distance_Sum = Distance + Distance_Sum;
 80028a4:	4b1b      	ldr	r3, [pc, #108]	; (8002914 <distance_sensor+0x15c>)
 80028a6:	ed93 7a00 	vldr	s14, [r3]
 80028aa:	4b1b      	ldr	r3, [pc, #108]	; (8002918 <distance_sensor+0x160>)
 80028ac:	edd3 7a00 	vldr	s15, [r3]
 80028b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028b4:	4b18      	ldr	r3, [pc, #96]	; (8002918 <distance_sensor+0x160>)
 80028b6:	edc3 7a00 	vstr	s15, [r3]
    	  j++;
 80028ba:	4b18      	ldr	r3, [pc, #96]	; (800291c <distance_sensor+0x164>)
 80028bc:	881b      	ldrh	r3, [r3, #0]
 80028be:	3301      	adds	r3, #1
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	4b16      	ldr	r3, [pc, #88]	; (800291c <distance_sensor+0x164>)
 80028c4:	801a      	strh	r2, [r3, #0]
    	 	 if(j==100)
 80028c6:	4b15      	ldr	r3, [pc, #84]	; (800291c <distance_sensor+0x164>)
 80028c8:	881b      	ldrh	r3, [r3, #0]
 80028ca:	2b64      	cmp	r3, #100	; 0x64
 80028cc:	d110      	bne.n	80028f0 <distance_sensor+0x138>
    	 	  {
    	 		Distance_Avg = Distance_Sum/(100+1);
 80028ce:	4b12      	ldr	r3, [pc, #72]	; (8002918 <distance_sensor+0x160>)
 80028d0:	ed93 7a00 	vldr	s14, [r3]
 80028d4:	eddf 6a12 	vldr	s13, [pc, #72]	; 8002920 <distance_sensor+0x168>
 80028d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028dc:	4b11      	ldr	r3, [pc, #68]	; (8002924 <distance_sensor+0x16c>)
 80028de:	edc3 7a00 	vstr	s15, [r3]

    	 			  j=0;
 80028e2:	4b0e      	ldr	r3, [pc, #56]	; (800291c <distance_sensor+0x164>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	801a      	strh	r2, [r3, #0]
    	 			 Distance_Sum=0;
 80028e8:	4b0b      	ldr	r3, [pc, #44]	; (8002918 <distance_sensor+0x160>)
 80028ea:	f04f 0200 	mov.w	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]

    //     printf("Distance = %f \r\n",Distance);
	//      sprintf((char *)buffer, "%d \r\n",Distance);
		 //     HAL_UART_Transmit(&huart3, buffer, strlen((char *)buffer), 100);

}
 80028f0:	bf00      	nop
 80028f2:	bd98      	pop	{r3, r4, r7, pc}
 80028f4:	f3af 8000 	nop.w
 80028f8:	b020c49c 	.word	0xb020c49c
 80028fc:	3fa16872 	.word	0x3fa16872
 8002900:	40020c00 	.word	0x40020c00
 8002904:	20000814 	.word	0x20000814
 8002908:	20000eb0 	.word	0x20000eb0
 800290c:	20000eb4 	.word	0x20000eb4
 8002910:	20000eb8 	.word	0x20000eb8
 8002914:	20000ebc 	.word	0x20000ebc
 8002918:	20000ec0 	.word	0x20000ec0
 800291c:	20000ec8 	.word	0x20000ec8
 8002920:	42ca0000 	.word	0x42ca0000
 8002924:	20000ec4 	.word	0x20000ec4

08002928 <z_axis_step_motor>:
extern uint16_t step_pulse_count;

extern TIM_HandleTypeDef htim13;

void z_axis_step_motor(uint16_t step_pulse,uint16_t cycle_time)  // (펄스,주기)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	4603      	mov	r3, r0
 8002930:	460a      	mov	r2, r1
 8002932:	80fb      	strh	r3, [r7, #6]
 8002934:	4613      	mov	r3, r2
 8002936:	80bb      	strh	r3, [r7, #4]

	TIM13->ARR = cycle_time;
 8002938:	4a08      	ldr	r2, [pc, #32]	; (800295c <z_axis_step_motor+0x34>)
 800293a:	88bb      	ldrh	r3, [r7, #4]
 800293c:	62d3      	str	r3, [r2, #44]	; 0x2c

	 if(step_pulse_count >= step_pulse*2)  //
 800293e:	4b08      	ldr	r3, [pc, #32]	; (8002960 <z_axis_step_motor+0x38>)
 8002940:	881b      	ldrh	r3, [r3, #0]
 8002942:	461a      	mov	r2, r3
 8002944:	88fb      	ldrh	r3, [r7, #6]
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	429a      	cmp	r2, r3
 800294a:	db03      	blt.n	8002954 <z_axis_step_motor+0x2c>
	 {

	 HAL_TIM_OC_Stop_IT(&htim13,TIM_CHANNEL_1);  // 타이머 정지
 800294c:	2100      	movs	r1, #0
 800294e:	4805      	ldr	r0, [pc, #20]	; (8002964 <z_axis_step_motor+0x3c>)
 8002950:	f004 f866 	bl	8006a20 <HAL_TIM_OC_Stop_IT>
	 }
}
 8002954:	bf00      	nop
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40001c00 	.word	0x40001c00
 8002960:	20000ef8 	.word	0x20000ef8
 8002964:	2000085c 	.word	0x2000085c

08002968 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800296e:	2300      	movs	r3, #0
 8002970:	607b      	str	r3, [r7, #4]
 8002972:	4b10      	ldr	r3, [pc, #64]	; (80029b4 <HAL_MspInit+0x4c>)
 8002974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002976:	4a0f      	ldr	r2, [pc, #60]	; (80029b4 <HAL_MspInit+0x4c>)
 8002978:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800297c:	6453      	str	r3, [r2, #68]	; 0x44
 800297e:	4b0d      	ldr	r3, [pc, #52]	; (80029b4 <HAL_MspInit+0x4c>)
 8002980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002986:	607b      	str	r3, [r7, #4]
 8002988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800298a:	2300      	movs	r3, #0
 800298c:	603b      	str	r3, [r7, #0]
 800298e:	4b09      	ldr	r3, [pc, #36]	; (80029b4 <HAL_MspInit+0x4c>)
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	4a08      	ldr	r2, [pc, #32]	; (80029b4 <HAL_MspInit+0x4c>)
 8002994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002998:	6413      	str	r3, [r2, #64]	; 0x40
 800299a:	4b06      	ldr	r3, [pc, #24]	; (80029b4 <HAL_MspInit+0x4c>)
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a2:	603b      	str	r3, [r7, #0]
 80029a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	40023800 	.word	0x40023800

080029b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b08a      	sub	sp, #40	; 0x28
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c0:	f107 0314 	add.w	r3, r7, #20
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	605a      	str	r2, [r3, #4]
 80029ca:	609a      	str	r2, [r3, #8]
 80029cc:	60da      	str	r2, [r3, #12]
 80029ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a40      	ldr	r2, [pc, #256]	; (8002ad8 <HAL_ADC_MspInit+0x120>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d17a      	bne.n	8002ad0 <HAL_ADC_MspInit+0x118>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80029da:	2300      	movs	r3, #0
 80029dc:	613b      	str	r3, [r7, #16]
 80029de:	4b3f      	ldr	r3, [pc, #252]	; (8002adc <HAL_ADC_MspInit+0x124>)
 80029e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e2:	4a3e      	ldr	r2, [pc, #248]	; (8002adc <HAL_ADC_MspInit+0x124>)
 80029e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029e8:	6453      	str	r3, [r2, #68]	; 0x44
 80029ea:	4b3c      	ldr	r3, [pc, #240]	; (8002adc <HAL_ADC_MspInit+0x124>)
 80029ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f2:	613b      	str	r3, [r7, #16]
 80029f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80029f6:	2300      	movs	r3, #0
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	4b38      	ldr	r3, [pc, #224]	; (8002adc <HAL_ADC_MspInit+0x124>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	4a37      	ldr	r2, [pc, #220]	; (8002adc <HAL_ADC_MspInit+0x124>)
 8002a00:	f043 0320 	orr.w	r3, r3, #32
 8002a04:	6313      	str	r3, [r2, #48]	; 0x30
 8002a06:	4b35      	ldr	r3, [pc, #212]	; (8002adc <HAL_ADC_MspInit+0x124>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	f003 0320 	and.w	r3, r3, #32
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a12:	2300      	movs	r3, #0
 8002a14:	60bb      	str	r3, [r7, #8]
 8002a16:	4b31      	ldr	r3, [pc, #196]	; (8002adc <HAL_ADC_MspInit+0x124>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	4a30      	ldr	r2, [pc, #192]	; (8002adc <HAL_ADC_MspInit+0x124>)
 8002a1c:	f043 0304 	orr.w	r3, r3, #4
 8002a20:	6313      	str	r3, [r2, #48]	; 0x30
 8002a22:	4b2e      	ldr	r3, [pc, #184]	; (8002adc <HAL_ADC_MspInit+0x124>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	f003 0304 	and.w	r3, r3, #4
 8002a2a:	60bb      	str	r3, [r7, #8]
 8002a2c:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PF4     ------> ADC3_IN14
    PC2     ------> ADC3_IN12
    PC3     ------> ADC3_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002a2e:	2310      	movs	r3, #16
 8002a30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a32:	2303      	movs	r3, #3
 8002a34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a36:	2300      	movs	r3, #0
 8002a38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a3a:	f107 0314 	add.w	r3, r7, #20
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4827      	ldr	r0, [pc, #156]	; (8002ae0 <HAL_ADC_MspInit+0x128>)
 8002a42:	f002 fe39 	bl	80056b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002a46:	230c      	movs	r3, #12
 8002a48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a52:	f107 0314 	add.w	r3, r7, #20
 8002a56:	4619      	mov	r1, r3
 8002a58:	4822      	ldr	r0, [pc, #136]	; (8002ae4 <HAL_ADC_MspInit+0x12c>)
 8002a5a:	f002 fe2d 	bl	80056b8 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream1;
 8002a5e:	4b22      	ldr	r3, [pc, #136]	; (8002ae8 <HAL_ADC_MspInit+0x130>)
 8002a60:	4a22      	ldr	r2, [pc, #136]	; (8002aec <HAL_ADC_MspInit+0x134>)
 8002a62:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8002a64:	4b20      	ldr	r3, [pc, #128]	; (8002ae8 <HAL_ADC_MspInit+0x130>)
 8002a66:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002a6a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a6c:	4b1e      	ldr	r3, [pc, #120]	; (8002ae8 <HAL_ADC_MspInit+0x130>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a72:	4b1d      	ldr	r3, [pc, #116]	; (8002ae8 <HAL_ADC_MspInit+0x130>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002a78:	4b1b      	ldr	r3, [pc, #108]	; (8002ae8 <HAL_ADC_MspInit+0x130>)
 8002a7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a7e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a80:	4b19      	ldr	r3, [pc, #100]	; (8002ae8 <HAL_ADC_MspInit+0x130>)
 8002a82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a86:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a88:	4b17      	ldr	r3, [pc, #92]	; (8002ae8 <HAL_ADC_MspInit+0x130>)
 8002a8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a8e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002a90:	4b15      	ldr	r3, [pc, #84]	; (8002ae8 <HAL_ADC_MspInit+0x130>)
 8002a92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a96:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002a98:	4b13      	ldr	r3, [pc, #76]	; (8002ae8 <HAL_ADC_MspInit+0x130>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a9e:	4b12      	ldr	r3, [pc, #72]	; (8002ae8 <HAL_ADC_MspInit+0x130>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002aa4:	4810      	ldr	r0, [pc, #64]	; (8002ae8 <HAL_ADC_MspInit+0x130>)
 8002aa6:	f001 fedd 	bl	8004864 <HAL_DMA_Init>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8002ab0:	f7ff fc4c 	bl	800234c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a0c      	ldr	r2, [pc, #48]	; (8002ae8 <HAL_ADC_MspInit+0x130>)
 8002ab8:	639a      	str	r2, [r3, #56]	; 0x38
 8002aba:	4a0b      	ldr	r2, [pc, #44]	; (8002ae8 <HAL_ADC_MspInit+0x130>)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	2012      	movs	r0, #18
 8002ac6:	f001 fe96 	bl	80047f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002aca:	2012      	movs	r0, #18
 8002acc:	f001 feaf 	bl	800482e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002ad0:	bf00      	nop
 8002ad2:	3728      	adds	r7, #40	; 0x28
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40012200 	.word	0x40012200
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	40021400 	.word	0x40021400
 8002ae4:	40020800 	.word	0x40020800
 8002ae8:	2000059c 	.word	0x2000059c
 8002aec:	40026428 	.word	0x40026428

08002af0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b08e      	sub	sp, #56	; 0x38
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	605a      	str	r2, [r3, #4]
 8002b02:	609a      	str	r2, [r3, #8]
 8002b04:	60da      	str	r2, [r3, #12]
 8002b06:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a55      	ldr	r2, [pc, #340]	; (8002c64 <HAL_ETH_MspInit+0x174>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	f040 80a4 	bne.w	8002c5c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002b14:	2300      	movs	r3, #0
 8002b16:	623b      	str	r3, [r7, #32]
 8002b18:	4b53      	ldr	r3, [pc, #332]	; (8002c68 <HAL_ETH_MspInit+0x178>)
 8002b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1c:	4a52      	ldr	r2, [pc, #328]	; (8002c68 <HAL_ETH_MspInit+0x178>)
 8002b1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b22:	6313      	str	r3, [r2, #48]	; 0x30
 8002b24:	4b50      	ldr	r3, [pc, #320]	; (8002c68 <HAL_ETH_MspInit+0x178>)
 8002b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b2c:	623b      	str	r3, [r7, #32]
 8002b2e:	6a3b      	ldr	r3, [r7, #32]
 8002b30:	2300      	movs	r3, #0
 8002b32:	61fb      	str	r3, [r7, #28]
 8002b34:	4b4c      	ldr	r3, [pc, #304]	; (8002c68 <HAL_ETH_MspInit+0x178>)
 8002b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b38:	4a4b      	ldr	r2, [pc, #300]	; (8002c68 <HAL_ETH_MspInit+0x178>)
 8002b3a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b3e:	6313      	str	r3, [r2, #48]	; 0x30
 8002b40:	4b49      	ldr	r3, [pc, #292]	; (8002c68 <HAL_ETH_MspInit+0x178>)
 8002b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b48:	61fb      	str	r3, [r7, #28]
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	61bb      	str	r3, [r7, #24]
 8002b50:	4b45      	ldr	r3, [pc, #276]	; (8002c68 <HAL_ETH_MspInit+0x178>)
 8002b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b54:	4a44      	ldr	r2, [pc, #272]	; (8002c68 <HAL_ETH_MspInit+0x178>)
 8002b56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002b5a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b5c:	4b42      	ldr	r3, [pc, #264]	; (8002c68 <HAL_ETH_MspInit+0x178>)
 8002b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b64:	61bb      	str	r3, [r7, #24]
 8002b66:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b68:	2300      	movs	r3, #0
 8002b6a:	617b      	str	r3, [r7, #20]
 8002b6c:	4b3e      	ldr	r3, [pc, #248]	; (8002c68 <HAL_ETH_MspInit+0x178>)
 8002b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b70:	4a3d      	ldr	r2, [pc, #244]	; (8002c68 <HAL_ETH_MspInit+0x178>)
 8002b72:	f043 0304 	orr.w	r3, r3, #4
 8002b76:	6313      	str	r3, [r2, #48]	; 0x30
 8002b78:	4b3b      	ldr	r3, [pc, #236]	; (8002c68 <HAL_ETH_MspInit+0x178>)
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	617b      	str	r3, [r7, #20]
 8002b82:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b84:	2300      	movs	r3, #0
 8002b86:	613b      	str	r3, [r7, #16]
 8002b88:	4b37      	ldr	r3, [pc, #220]	; (8002c68 <HAL_ETH_MspInit+0x178>)
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8c:	4a36      	ldr	r2, [pc, #216]	; (8002c68 <HAL_ETH_MspInit+0x178>)
 8002b8e:	f043 0301 	orr.w	r3, r3, #1
 8002b92:	6313      	str	r3, [r2, #48]	; 0x30
 8002b94:	4b34      	ldr	r3, [pc, #208]	; (8002c68 <HAL_ETH_MspInit+0x178>)
 8002b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	4b30      	ldr	r3, [pc, #192]	; (8002c68 <HAL_ETH_MspInit+0x178>)
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba8:	4a2f      	ldr	r2, [pc, #188]	; (8002c68 <HAL_ETH_MspInit+0x178>)
 8002baa:	f043 0302 	orr.w	r3, r3, #2
 8002bae:	6313      	str	r3, [r2, #48]	; 0x30
 8002bb0:	4b2d      	ldr	r3, [pc, #180]	; (8002c68 <HAL_ETH_MspInit+0x178>)
 8002bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	60fb      	str	r3, [r7, #12]
 8002bba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	60bb      	str	r3, [r7, #8]
 8002bc0:	4b29      	ldr	r3, [pc, #164]	; (8002c68 <HAL_ETH_MspInit+0x178>)
 8002bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc4:	4a28      	ldr	r2, [pc, #160]	; (8002c68 <HAL_ETH_MspInit+0x178>)
 8002bc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bca:	6313      	str	r3, [r2, #48]	; 0x30
 8002bcc:	4b26      	ldr	r3, [pc, #152]	; (8002c68 <HAL_ETH_MspInit+0x178>)
 8002bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd4:	60bb      	str	r3, [r7, #8]
 8002bd6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002bd8:	2332      	movs	r3, #50	; 0x32
 8002bda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002be4:	2303      	movs	r3, #3
 8002be6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002be8:	230b      	movs	r3, #11
 8002bea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	481e      	ldr	r0, [pc, #120]	; (8002c6c <HAL_ETH_MspInit+0x17c>)
 8002bf4:	f002 fd60 	bl	80056b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002bf8:	2386      	movs	r3, #134	; 0x86
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c00:	2300      	movs	r3, #0
 8002c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c04:	2303      	movs	r3, #3
 8002c06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002c08:	230b      	movs	r3, #11
 8002c0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c10:	4619      	mov	r1, r3
 8002c12:	4817      	ldr	r0, [pc, #92]	; (8002c70 <HAL_ETH_MspInit+0x180>)
 8002c14:	f002 fd50 	bl	80056b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002c18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1e:	2302      	movs	r3, #2
 8002c20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c22:	2300      	movs	r3, #0
 8002c24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c26:	2303      	movs	r3, #3
 8002c28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002c2a:	230b      	movs	r3, #11
 8002c2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c32:	4619      	mov	r1, r3
 8002c34:	480f      	ldr	r0, [pc, #60]	; (8002c74 <HAL_ETH_MspInit+0x184>)
 8002c36:	f002 fd3f 	bl	80056b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002c3a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002c3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c40:	2302      	movs	r3, #2
 8002c42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c44:	2300      	movs	r3, #0
 8002c46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002c4c:	230b      	movs	r3, #11
 8002c4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c54:	4619      	mov	r1, r3
 8002c56:	4808      	ldr	r0, [pc, #32]	; (8002c78 <HAL_ETH_MspInit+0x188>)
 8002c58:	f002 fd2e 	bl	80056b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002c5c:	bf00      	nop
 8002c5e:	3738      	adds	r7, #56	; 0x38
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40028000 	.word	0x40028000
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	40020800 	.word	0x40020800
 8002c70:	40020000 	.word	0x40020000
 8002c74:	40020400 	.word	0x40020400
 8002c78:	40021800 	.word	0x40021800

08002c7c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b08c      	sub	sp, #48	; 0x30
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c84:	f107 031c 	add.w	r3, r7, #28
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	605a      	str	r2, [r3, #4]
 8002c8e:	609a      	str	r2, [r3, #8]
 8002c90:	60da      	str	r2, [r3, #12]
 8002c92:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c9c:	d14b      	bne.n	8002d36 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61bb      	str	r3, [r7, #24]
 8002ca2:	4b58      	ldr	r3, [pc, #352]	; (8002e04 <HAL_TIM_Encoder_MspInit+0x188>)
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	4a57      	ldr	r2, [pc, #348]	; (8002e04 <HAL_TIM_Encoder_MspInit+0x188>)
 8002ca8:	f043 0301 	orr.w	r3, r3, #1
 8002cac:	6413      	str	r3, [r2, #64]	; 0x40
 8002cae:	4b55      	ldr	r3, [pc, #340]	; (8002e04 <HAL_TIM_Encoder_MspInit+0x188>)
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	61bb      	str	r3, [r7, #24]
 8002cb8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cba:	2300      	movs	r3, #0
 8002cbc:	617b      	str	r3, [r7, #20]
 8002cbe:	4b51      	ldr	r3, [pc, #324]	; (8002e04 <HAL_TIM_Encoder_MspInit+0x188>)
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc2:	4a50      	ldr	r2, [pc, #320]	; (8002e04 <HAL_TIM_Encoder_MspInit+0x188>)
 8002cc4:	f043 0301 	orr.w	r3, r3, #1
 8002cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cca:	4b4e      	ldr	r3, [pc, #312]	; (8002e04 <HAL_TIM_Encoder_MspInit+0x188>)
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	617b      	str	r3, [r7, #20]
 8002cd4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	613b      	str	r3, [r7, #16]
 8002cda:	4b4a      	ldr	r3, [pc, #296]	; (8002e04 <HAL_TIM_Encoder_MspInit+0x188>)
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cde:	4a49      	ldr	r2, [pc, #292]	; (8002e04 <HAL_TIM_Encoder_MspInit+0x188>)
 8002ce0:	f043 0302 	orr.w	r3, r3, #2
 8002ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ce6:	4b47      	ldr	r3, [pc, #284]	; (8002e04 <HAL_TIM_Encoder_MspInit+0x188>)
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	613b      	str	r3, [r7, #16]
 8002cf0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002cf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d00:	2300      	movs	r3, #0
 8002d02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d04:	2301      	movs	r3, #1
 8002d06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d08:	f107 031c 	add.w	r3, r7, #28
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	483e      	ldr	r0, [pc, #248]	; (8002e08 <HAL_TIM_Encoder_MspInit+0x18c>)
 8002d10:	f002 fcd2 	bl	80056b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002d14:	2308      	movs	r3, #8
 8002d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d18:	2302      	movs	r3, #2
 8002d1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d20:	2300      	movs	r3, #0
 8002d22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d24:	2301      	movs	r3, #1
 8002d26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d28:	f107 031c 	add.w	r3, r7, #28
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4837      	ldr	r0, [pc, #220]	; (8002e0c <HAL_TIM_Encoder_MspInit+0x190>)
 8002d30:	f002 fcc2 	bl	80056b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002d34:	e061      	b.n	8002dfa <HAL_TIM_Encoder_MspInit+0x17e>
  else if(htim_encoder->Instance==TIM4)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a35      	ldr	r2, [pc, #212]	; (8002e10 <HAL_TIM_Encoder_MspInit+0x194>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d15c      	bne.n	8002dfa <HAL_TIM_Encoder_MspInit+0x17e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d40:	2300      	movs	r3, #0
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	4b2f      	ldr	r3, [pc, #188]	; (8002e04 <HAL_TIM_Encoder_MspInit+0x188>)
 8002d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d48:	4a2e      	ldr	r2, [pc, #184]	; (8002e04 <HAL_TIM_Encoder_MspInit+0x188>)
 8002d4a:	f043 0304 	orr.w	r3, r3, #4
 8002d4e:	6413      	str	r3, [r2, #64]	; 0x40
 8002d50:	4b2c      	ldr	r3, [pc, #176]	; (8002e04 <HAL_TIM_Encoder_MspInit+0x188>)
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	60fb      	str	r3, [r7, #12]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	60bb      	str	r3, [r7, #8]
 8002d60:	4b28      	ldr	r3, [pc, #160]	; (8002e04 <HAL_TIM_Encoder_MspInit+0x188>)
 8002d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d64:	4a27      	ldr	r2, [pc, #156]	; (8002e04 <HAL_TIM_Encoder_MspInit+0x188>)
 8002d66:	f043 0308 	orr.w	r3, r3, #8
 8002d6a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d6c:	4b25      	ldr	r3, [pc, #148]	; (8002e04 <HAL_TIM_Encoder_MspInit+0x188>)
 8002d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d70:	f003 0308 	and.w	r3, r3, #8
 8002d74:	60bb      	str	r3, [r7, #8]
 8002d76:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002d78:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002d7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d7e:	2302      	movs	r3, #2
 8002d80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d82:	2300      	movs	r3, #0
 8002d84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d86:	2300      	movs	r3, #0
 8002d88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d8e:	f107 031c 	add.w	r3, r7, #28
 8002d92:	4619      	mov	r1, r3
 8002d94:	481f      	ldr	r0, [pc, #124]	; (8002e14 <HAL_TIM_Encoder_MspInit+0x198>)
 8002d96:	f002 fc8f 	bl	80056b8 <HAL_GPIO_Init>
    hdma_tim4_up.Instance = DMA1_Stream6;
 8002d9a:	4b1f      	ldr	r3, [pc, #124]	; (8002e18 <HAL_TIM_Encoder_MspInit+0x19c>)
 8002d9c:	4a1f      	ldr	r2, [pc, #124]	; (8002e1c <HAL_TIM_Encoder_MspInit+0x1a0>)
 8002d9e:	601a      	str	r2, [r3, #0]
    hdma_tim4_up.Init.Channel = DMA_CHANNEL_2;
 8002da0:	4b1d      	ldr	r3, [pc, #116]	; (8002e18 <HAL_TIM_Encoder_MspInit+0x19c>)
 8002da2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002da6:	605a      	str	r2, [r3, #4]
    hdma_tim4_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002da8:	4b1b      	ldr	r3, [pc, #108]	; (8002e18 <HAL_TIM_Encoder_MspInit+0x19c>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	609a      	str	r2, [r3, #8]
    hdma_tim4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dae:	4b1a      	ldr	r3, [pc, #104]	; (8002e18 <HAL_TIM_Encoder_MspInit+0x19c>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	60da      	str	r2, [r3, #12]
    hdma_tim4_up.Init.MemInc = DMA_MINC_ENABLE;
 8002db4:	4b18      	ldr	r3, [pc, #96]	; (8002e18 <HAL_TIM_Encoder_MspInit+0x19c>)
 8002db6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dba:	611a      	str	r2, [r3, #16]
    hdma_tim4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002dbc:	4b16      	ldr	r3, [pc, #88]	; (8002e18 <HAL_TIM_Encoder_MspInit+0x19c>)
 8002dbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dc2:	615a      	str	r2, [r3, #20]
    hdma_tim4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002dc4:	4b14      	ldr	r3, [pc, #80]	; (8002e18 <HAL_TIM_Encoder_MspInit+0x19c>)
 8002dc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dca:	619a      	str	r2, [r3, #24]
    hdma_tim4_up.Init.Mode = DMA_NORMAL;
 8002dcc:	4b12      	ldr	r3, [pc, #72]	; (8002e18 <HAL_TIM_Encoder_MspInit+0x19c>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	61da      	str	r2, [r3, #28]
    hdma_tim4_up.Init.Priority = DMA_PRIORITY_LOW;
 8002dd2:	4b11      	ldr	r3, [pc, #68]	; (8002e18 <HAL_TIM_Encoder_MspInit+0x19c>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	621a      	str	r2, [r3, #32]
    hdma_tim4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dd8:	4b0f      	ldr	r3, [pc, #60]	; (8002e18 <HAL_TIM_Encoder_MspInit+0x19c>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_up) != HAL_OK)
 8002dde:	480e      	ldr	r0, [pc, #56]	; (8002e18 <HAL_TIM_Encoder_MspInit+0x19c>)
 8002de0:	f001 fd40 	bl	8004864 <HAL_DMA_Init>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <HAL_TIM_Encoder_MspInit+0x172>
      Error_Handler();
 8002dea:	f7ff faaf 	bl	800234c <Error_Handler>
    __HAL_LINKDMA(htim_encoder,hdma[TIM_DMA_ID_UPDATE],hdma_tim4_up);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a09      	ldr	r2, [pc, #36]	; (8002e18 <HAL_TIM_Encoder_MspInit+0x19c>)
 8002df2:	621a      	str	r2, [r3, #32]
 8002df4:	4a08      	ldr	r2, [pc, #32]	; (8002e18 <HAL_TIM_Encoder_MspInit+0x19c>)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002dfa:	bf00      	nop
 8002dfc:	3730      	adds	r7, #48	; 0x30
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	40023800 	.word	0x40023800
 8002e08:	40020000 	.word	0x40020000
 8002e0c:	40020400 	.word	0x40020400
 8002e10:	40000800 	.word	0x40000800
 8002e14:	40020c00 	.word	0x40020c00
 8002e18:	200008ec 	.word	0x200008ec
 8002e1c:	400260a0 	.word	0x400260a0

08002e20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b088      	sub	sp, #32
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a5c      	ldr	r2, [pc, #368]	; (8002fa0 <HAL_TIM_Base_MspInit+0x180>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d116      	bne.n	8002e60 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e32:	2300      	movs	r3, #0
 8002e34:	61fb      	str	r3, [r7, #28]
 8002e36:	4b5b      	ldr	r3, [pc, #364]	; (8002fa4 <HAL_TIM_Base_MspInit+0x184>)
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	4a5a      	ldr	r2, [pc, #360]	; (8002fa4 <HAL_TIM_Base_MspInit+0x184>)
 8002e3c:	f043 0302 	orr.w	r3, r3, #2
 8002e40:	6413      	str	r3, [r2, #64]	; 0x40
 8002e42:	4b58      	ldr	r3, [pc, #352]	; (8002fa4 <HAL_TIM_Base_MspInit+0x184>)
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	61fb      	str	r3, [r7, #28]
 8002e4c:	69fb      	ldr	r3, [r7, #28]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002e4e:	2200      	movs	r2, #0
 8002e50:	2100      	movs	r1, #0
 8002e52:	201d      	movs	r0, #29
 8002e54:	f001 fccf 	bl	80047f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002e58:	201d      	movs	r0, #29
 8002e5a:	f001 fce8 	bl	800482e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002e5e:	e09a      	b.n	8002f96 <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM6)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a50      	ldr	r2, [pc, #320]	; (8002fa8 <HAL_TIM_Base_MspInit+0x188>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d116      	bne.n	8002e98 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	61bb      	str	r3, [r7, #24]
 8002e6e:	4b4d      	ldr	r3, [pc, #308]	; (8002fa4 <HAL_TIM_Base_MspInit+0x184>)
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	4a4c      	ldr	r2, [pc, #304]	; (8002fa4 <HAL_TIM_Base_MspInit+0x184>)
 8002e74:	f043 0310 	orr.w	r3, r3, #16
 8002e78:	6413      	str	r3, [r2, #64]	; 0x40
 8002e7a:	4b4a      	ldr	r3, [pc, #296]	; (8002fa4 <HAL_TIM_Base_MspInit+0x184>)
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	f003 0310 	and.w	r3, r3, #16
 8002e82:	61bb      	str	r3, [r7, #24]
 8002e84:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8002e86:	2200      	movs	r2, #0
 8002e88:	2106      	movs	r1, #6
 8002e8a:	2036      	movs	r0, #54	; 0x36
 8002e8c:	f001 fcb3 	bl	80047f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002e90:	2036      	movs	r0, #54	; 0x36
 8002e92:	f001 fccc 	bl	800482e <HAL_NVIC_EnableIRQ>
}
 8002e96:	e07e      	b.n	8002f96 <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM8)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a43      	ldr	r2, [pc, #268]	; (8002fac <HAL_TIM_Base_MspInit+0x18c>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d126      	bne.n	8002ef0 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	617b      	str	r3, [r7, #20]
 8002ea6:	4b3f      	ldr	r3, [pc, #252]	; (8002fa4 <HAL_TIM_Base_MspInit+0x184>)
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eaa:	4a3e      	ldr	r2, [pc, #248]	; (8002fa4 <HAL_TIM_Base_MspInit+0x184>)
 8002eac:	f043 0302 	orr.w	r3, r3, #2
 8002eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8002eb2:	4b3c      	ldr	r3, [pc, #240]	; (8002fa4 <HAL_TIM_Base_MspInit+0x184>)
 8002eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	617b      	str	r3, [r7, #20]
 8002ebc:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	202b      	movs	r0, #43	; 0x2b
 8002ec4:	f001 fc97 	bl	80047f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002ec8:	202b      	movs	r0, #43	; 0x2b
 8002eca:	f001 fcb0 	bl	800482e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002ece:	2200      	movs	r2, #0
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	202c      	movs	r0, #44	; 0x2c
 8002ed4:	f001 fc8f 	bl	80047f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002ed8:	202c      	movs	r0, #44	; 0x2c
 8002eda:	f001 fca8 	bl	800482e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002ede:	2200      	movs	r2, #0
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	202d      	movs	r0, #45	; 0x2d
 8002ee4:	f001 fc87 	bl	80047f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002ee8:	202d      	movs	r0, #45	; 0x2d
 8002eea:	f001 fca0 	bl	800482e <HAL_NVIC_EnableIRQ>
}
 8002eee:	e052      	b.n	8002f96 <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM12)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a2e      	ldr	r2, [pc, #184]	; (8002fb0 <HAL_TIM_Base_MspInit+0x190>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d116      	bne.n	8002f28 <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002efa:	2300      	movs	r3, #0
 8002efc:	613b      	str	r3, [r7, #16]
 8002efe:	4b29      	ldr	r3, [pc, #164]	; (8002fa4 <HAL_TIM_Base_MspInit+0x184>)
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	4a28      	ldr	r2, [pc, #160]	; (8002fa4 <HAL_TIM_Base_MspInit+0x184>)
 8002f04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f08:	6413      	str	r3, [r2, #64]	; 0x40
 8002f0a:	4b26      	ldr	r3, [pc, #152]	; (8002fa4 <HAL_TIM_Base_MspInit+0x184>)
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f12:	613b      	str	r3, [r7, #16]
 8002f14:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8002f16:	2200      	movs	r2, #0
 8002f18:	2100      	movs	r1, #0
 8002f1a:	202b      	movs	r0, #43	; 0x2b
 8002f1c:	f001 fc6b 	bl	80047f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002f20:	202b      	movs	r0, #43	; 0x2b
 8002f22:	f001 fc84 	bl	800482e <HAL_NVIC_EnableIRQ>
}
 8002f26:	e036      	b.n	8002f96 <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM13)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a21      	ldr	r2, [pc, #132]	; (8002fb4 <HAL_TIM_Base_MspInit+0x194>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d116      	bne.n	8002f60 <HAL_TIM_Base_MspInit+0x140>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002f32:	2300      	movs	r3, #0
 8002f34:	60fb      	str	r3, [r7, #12]
 8002f36:	4b1b      	ldr	r3, [pc, #108]	; (8002fa4 <HAL_TIM_Base_MspInit+0x184>)
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	4a1a      	ldr	r2, [pc, #104]	; (8002fa4 <HAL_TIM_Base_MspInit+0x184>)
 8002f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f40:	6413      	str	r3, [r2, #64]	; 0x40
 8002f42:	4b18      	ldr	r3, [pc, #96]	; (8002fa4 <HAL_TIM_Base_MspInit+0x184>)
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002f4e:	2200      	movs	r2, #0
 8002f50:	2100      	movs	r1, #0
 8002f52:	202c      	movs	r0, #44	; 0x2c
 8002f54:	f001 fc4f 	bl	80047f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002f58:	202c      	movs	r0, #44	; 0x2c
 8002f5a:	f001 fc68 	bl	800482e <HAL_NVIC_EnableIRQ>
}
 8002f5e:	e01a      	b.n	8002f96 <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM14)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a14      	ldr	r2, [pc, #80]	; (8002fb8 <HAL_TIM_Base_MspInit+0x198>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d115      	bne.n	8002f96 <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60bb      	str	r3, [r7, #8]
 8002f6e:	4b0d      	ldr	r3, [pc, #52]	; (8002fa4 <HAL_TIM_Base_MspInit+0x184>)
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	4a0c      	ldr	r2, [pc, #48]	; (8002fa4 <HAL_TIM_Base_MspInit+0x184>)
 8002f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f78:	6413      	str	r3, [r2, #64]	; 0x40
 8002f7a:	4b0a      	ldr	r3, [pc, #40]	; (8002fa4 <HAL_TIM_Base_MspInit+0x184>)
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f82:	60bb      	str	r3, [r7, #8]
 8002f84:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002f86:	2200      	movs	r2, #0
 8002f88:	2100      	movs	r1, #0
 8002f8a:	202d      	movs	r0, #45	; 0x2d
 8002f8c:	f001 fc33 	bl	80047f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002f90:	202d      	movs	r0, #45	; 0x2d
 8002f92:	f001 fc4c 	bl	800482e <HAL_NVIC_EnableIRQ>
}
 8002f96:	bf00      	nop
 8002f98:	3720      	adds	r7, #32
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40000400 	.word	0x40000400
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	40001000 	.word	0x40001000
 8002fac:	40010400 	.word	0x40010400
 8002fb0:	40001800 	.word	0x40001800
 8002fb4:	40001c00 	.word	0x40001c00
 8002fb8:	40002000 	.word	0x40002000

08002fbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b08a      	sub	sp, #40	; 0x28
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc4:	f107 0314 	add.w	r3, r7, #20
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	605a      	str	r2, [r3, #4]
 8002fce:	609a      	str	r2, [r3, #8]
 8002fd0:	60da      	str	r2, [r3, #12]
 8002fd2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a33      	ldr	r2, [pc, #204]	; (80030a8 <HAL_TIM_MspPostInit+0xec>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d13c      	bne.n	8003058 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fde:	2300      	movs	r3, #0
 8002fe0:	613b      	str	r3, [r7, #16]
 8002fe2:	4b32      	ldr	r3, [pc, #200]	; (80030ac <HAL_TIM_MspPostInit+0xf0>)
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	4a31      	ldr	r2, [pc, #196]	; (80030ac <HAL_TIM_MspPostInit+0xf0>)
 8002fe8:	f043 0301 	orr.w	r3, r3, #1
 8002fec:	6313      	str	r3, [r2, #48]	; 0x30
 8002fee:	4b2f      	ldr	r3, [pc, #188]	; (80030ac <HAL_TIM_MspPostInit+0xf0>)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	613b      	str	r3, [r7, #16]
 8002ff8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60fb      	str	r3, [r7, #12]
 8002ffe:	4b2b      	ldr	r3, [pc, #172]	; (80030ac <HAL_TIM_MspPostInit+0xf0>)
 8003000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003002:	4a2a      	ldr	r2, [pc, #168]	; (80030ac <HAL_TIM_MspPostInit+0xf0>)
 8003004:	f043 0304 	orr.w	r3, r3, #4
 8003008:	6313      	str	r3, [r2, #48]	; 0x30
 800300a:	4b28      	ldr	r3, [pc, #160]	; (80030ac <HAL_TIM_MspPostInit+0xf0>)
 800300c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300e:	f003 0304 	and.w	r3, r3, #4
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003016:	2340      	movs	r3, #64	; 0x40
 8003018:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800301a:	2302      	movs	r3, #2
 800301c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301e:	2300      	movs	r3, #0
 8003020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003022:	2300      	movs	r3, #0
 8003024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003026:	2302      	movs	r3, #2
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800302a:	f107 0314 	add.w	r3, r7, #20
 800302e:	4619      	mov	r1, r3
 8003030:	481f      	ldr	r0, [pc, #124]	; (80030b0 <HAL_TIM_MspPostInit+0xf4>)
 8003032:	f002 fb41 	bl	80056b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003036:	2380      	movs	r3, #128	; 0x80
 8003038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800303a:	2302      	movs	r3, #2
 800303c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303e:	2300      	movs	r3, #0
 8003040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003042:	2300      	movs	r3, #0
 8003044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003046:	2302      	movs	r3, #2
 8003048:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800304a:	f107 0314 	add.w	r3, r7, #20
 800304e:	4619      	mov	r1, r3
 8003050:	4818      	ldr	r0, [pc, #96]	; (80030b4 <HAL_TIM_MspPostInit+0xf8>)
 8003052:	f002 fb31 	bl	80056b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8003056:	e023      	b.n	80030a0 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM13)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a16      	ldr	r2, [pc, #88]	; (80030b8 <HAL_TIM_MspPostInit+0xfc>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d11e      	bne.n	80030a0 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003062:	2300      	movs	r3, #0
 8003064:	60bb      	str	r3, [r7, #8]
 8003066:	4b11      	ldr	r3, [pc, #68]	; (80030ac <HAL_TIM_MspPostInit+0xf0>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	4a10      	ldr	r2, [pc, #64]	; (80030ac <HAL_TIM_MspPostInit+0xf0>)
 800306c:	f043 0320 	orr.w	r3, r3, #32
 8003070:	6313      	str	r3, [r2, #48]	; 0x30
 8003072:	4b0e      	ldr	r3, [pc, #56]	; (80030ac <HAL_TIM_MspPostInit+0xf0>)
 8003074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003076:	f003 0320 	and.w	r3, r3, #32
 800307a:	60bb      	str	r3, [r7, #8]
 800307c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800307e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003082:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003084:	2302      	movs	r3, #2
 8003086:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003088:	2300      	movs	r3, #0
 800308a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800308c:	2300      	movs	r3, #0
 800308e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8003090:	2309      	movs	r3, #9
 8003092:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003094:	f107 0314 	add.w	r3, r7, #20
 8003098:	4619      	mov	r1, r3
 800309a:	4808      	ldr	r0, [pc, #32]	; (80030bc <HAL_TIM_MspPostInit+0x100>)
 800309c:	f002 fb0c 	bl	80056b8 <HAL_GPIO_Init>
}
 80030a0:	bf00      	nop
 80030a2:	3728      	adds	r7, #40	; 0x28
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	40000400 	.word	0x40000400
 80030ac:	40023800 	.word	0x40023800
 80030b0:	40020000 	.word	0x40020000
 80030b4:	40020800 	.word	0x40020800
 80030b8:	40001c00 	.word	0x40001c00
 80030bc:	40021400 	.word	0x40021400

080030c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b08c      	sub	sp, #48	; 0x30
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c8:	f107 031c 	add.w	r3, r7, #28
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	605a      	str	r2, [r3, #4]
 80030d2:	609a      	str	r2, [r3, #8]
 80030d4:	60da      	str	r2, [r3, #12]
 80030d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a3b      	ldr	r2, [pc, #236]	; (80031cc <HAL_UART_MspInit+0x10c>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d135      	bne.n	800314e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80030e2:	2300      	movs	r3, #0
 80030e4:	61bb      	str	r3, [r7, #24]
 80030e6:	4b3a      	ldr	r3, [pc, #232]	; (80031d0 <HAL_UART_MspInit+0x110>)
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	4a39      	ldr	r2, [pc, #228]	; (80031d0 <HAL_UART_MspInit+0x110>)
 80030ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80030f0:	6413      	str	r3, [r2, #64]	; 0x40
 80030f2:	4b37      	ldr	r3, [pc, #220]	; (80031d0 <HAL_UART_MspInit+0x110>)
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030fa:	61bb      	str	r3, [r7, #24]
 80030fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030fe:	2300      	movs	r3, #0
 8003100:	617b      	str	r3, [r7, #20]
 8003102:	4b33      	ldr	r3, [pc, #204]	; (80031d0 <HAL_UART_MspInit+0x110>)
 8003104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003106:	4a32      	ldr	r2, [pc, #200]	; (80031d0 <HAL_UART_MspInit+0x110>)
 8003108:	f043 0304 	orr.w	r3, r3, #4
 800310c:	6313      	str	r3, [r2, #48]	; 0x30
 800310e:	4b30      	ldr	r3, [pc, #192]	; (80031d0 <HAL_UART_MspInit+0x110>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	f003 0304 	and.w	r3, r3, #4
 8003116:	617b      	str	r3, [r7, #20]
 8003118:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800311a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800311e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003120:	2302      	movs	r3, #2
 8003122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003124:	2300      	movs	r3, #0
 8003126:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003128:	2303      	movs	r3, #3
 800312a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800312c:	2308      	movs	r3, #8
 800312e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003130:	f107 031c 	add.w	r3, r7, #28
 8003134:	4619      	mov	r1, r3
 8003136:	4827      	ldr	r0, [pc, #156]	; (80031d4 <HAL_UART_MspInit+0x114>)
 8003138:	f002 fabe 	bl	80056b8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800313c:	2200      	movs	r2, #0
 800313e:	2100      	movs	r1, #0
 8003140:	2034      	movs	r0, #52	; 0x34
 8003142:	f001 fb58 	bl	80047f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003146:	2034      	movs	r0, #52	; 0x34
 8003148:	f001 fb71 	bl	800482e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800314c:	e039      	b.n	80031c2 <HAL_UART_MspInit+0x102>
  else if(huart->Instance==USART3)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a21      	ldr	r2, [pc, #132]	; (80031d8 <HAL_UART_MspInit+0x118>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d134      	bne.n	80031c2 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003158:	2300      	movs	r3, #0
 800315a:	613b      	str	r3, [r7, #16]
 800315c:	4b1c      	ldr	r3, [pc, #112]	; (80031d0 <HAL_UART_MspInit+0x110>)
 800315e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003160:	4a1b      	ldr	r2, [pc, #108]	; (80031d0 <HAL_UART_MspInit+0x110>)
 8003162:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003166:	6413      	str	r3, [r2, #64]	; 0x40
 8003168:	4b19      	ldr	r3, [pc, #100]	; (80031d0 <HAL_UART_MspInit+0x110>)
 800316a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003170:	613b      	str	r3, [r7, #16]
 8003172:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003174:	2300      	movs	r3, #0
 8003176:	60fb      	str	r3, [r7, #12]
 8003178:	4b15      	ldr	r3, [pc, #84]	; (80031d0 <HAL_UART_MspInit+0x110>)
 800317a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317c:	4a14      	ldr	r2, [pc, #80]	; (80031d0 <HAL_UART_MspInit+0x110>)
 800317e:	f043 0308 	orr.w	r3, r3, #8
 8003182:	6313      	str	r3, [r2, #48]	; 0x30
 8003184:	4b12      	ldr	r3, [pc, #72]	; (80031d0 <HAL_UART_MspInit+0x110>)
 8003186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003188:	f003 0308 	and.w	r3, r3, #8
 800318c:	60fb      	str	r3, [r7, #12]
 800318e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003190:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003194:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003196:	2302      	movs	r3, #2
 8003198:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319a:	2300      	movs	r3, #0
 800319c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800319e:	2303      	movs	r3, #3
 80031a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80031a2:	2307      	movs	r3, #7
 80031a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031a6:	f107 031c 	add.w	r3, r7, #28
 80031aa:	4619      	mov	r1, r3
 80031ac:	480b      	ldr	r0, [pc, #44]	; (80031dc <HAL_UART_MspInit+0x11c>)
 80031ae:	f002 fa83 	bl	80056b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80031b2:	2200      	movs	r2, #0
 80031b4:	2100      	movs	r1, #0
 80031b6:	2027      	movs	r0, #39	; 0x27
 80031b8:	f001 fb1d 	bl	80047f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80031bc:	2027      	movs	r0, #39	; 0x27
 80031be:	f001 fb36 	bl	800482e <HAL_NVIC_EnableIRQ>
}
 80031c2:	bf00      	nop
 80031c4:	3730      	adds	r7, #48	; 0x30
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	40004c00 	.word	0x40004c00
 80031d0:	40023800 	.word	0x40023800
 80031d4:	40020800 	.word	0x40020800
 80031d8:	40004800 	.word	0x40004800
 80031dc:	40020c00 	.word	0x40020c00

080031e0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b08a      	sub	sp, #40	; 0x28
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031e8:	f107 0314 	add.w	r3, r7, #20
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	605a      	str	r2, [r3, #4]
 80031f2:	609a      	str	r2, [r3, #8]
 80031f4:	60da      	str	r2, [r3, #12]
 80031f6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003200:	d13f      	bne.n	8003282 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003202:	2300      	movs	r3, #0
 8003204:	613b      	str	r3, [r7, #16]
 8003206:	4b21      	ldr	r3, [pc, #132]	; (800328c <HAL_PCD_MspInit+0xac>)
 8003208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320a:	4a20      	ldr	r2, [pc, #128]	; (800328c <HAL_PCD_MspInit+0xac>)
 800320c:	f043 0301 	orr.w	r3, r3, #1
 8003210:	6313      	str	r3, [r2, #48]	; 0x30
 8003212:	4b1e      	ldr	r3, [pc, #120]	; (800328c <HAL_PCD_MspInit+0xac>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	613b      	str	r3, [r7, #16]
 800321c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800321e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8003222:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003224:	2302      	movs	r3, #2
 8003226:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003228:	2300      	movs	r3, #0
 800322a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800322c:	2303      	movs	r3, #3
 800322e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003230:	230a      	movs	r3, #10
 8003232:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003234:	f107 0314 	add.w	r3, r7, #20
 8003238:	4619      	mov	r1, r3
 800323a:	4815      	ldr	r0, [pc, #84]	; (8003290 <HAL_PCD_MspInit+0xb0>)
 800323c:	f002 fa3c 	bl	80056b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003240:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003244:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003246:	2300      	movs	r3, #0
 8003248:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324a:	2300      	movs	r3, #0
 800324c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800324e:	f107 0314 	add.w	r3, r7, #20
 8003252:	4619      	mov	r1, r3
 8003254:	480e      	ldr	r0, [pc, #56]	; (8003290 <HAL_PCD_MspInit+0xb0>)
 8003256:	f002 fa2f 	bl	80056b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800325a:	4b0c      	ldr	r3, [pc, #48]	; (800328c <HAL_PCD_MspInit+0xac>)
 800325c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800325e:	4a0b      	ldr	r2, [pc, #44]	; (800328c <HAL_PCD_MspInit+0xac>)
 8003260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003264:	6353      	str	r3, [r2, #52]	; 0x34
 8003266:	2300      	movs	r3, #0
 8003268:	60fb      	str	r3, [r7, #12]
 800326a:	4b08      	ldr	r3, [pc, #32]	; (800328c <HAL_PCD_MspInit+0xac>)
 800326c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326e:	4a07      	ldr	r2, [pc, #28]	; (800328c <HAL_PCD_MspInit+0xac>)
 8003270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003274:	6453      	str	r3, [r2, #68]	; 0x44
 8003276:	4b05      	ldr	r3, [pc, #20]	; (800328c <HAL_PCD_MspInit+0xac>)
 8003278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800327e:	60fb      	str	r3, [r7, #12]
 8003280:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003282:	bf00      	nop
 8003284:	3728      	adds	r7, #40	; 0x28
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	40023800 	.word	0x40023800
 8003290:	40020000 	.word	0x40020000
 8003294:	00000000 	.word	0x00000000

08003298 <HAL_ADC_ConvCpltCallback>:




void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]

		if(hadc->Instance == hadc3.Instance)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	4b30      	ldr	r3, [pc, #192]	; (8003368 <HAL_ADC_ConvCpltCallback+0xd0>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d14a      	bne.n	8003342 <HAL_ADC_ConvCpltCallback+0xaa>

		{

		//	GPIOB->ODR ^= 1<<7;  ok

			battery_V=ADC3_value[2]/67.8*27.667  +2.2
 80032ac:	4b2f      	ldr	r3, [pc, #188]	; (800336c <HAL_ADC_ConvCpltCallback+0xd4>)
 80032ae:	889b      	ldrh	r3, [r3, #4]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7fd f947 	bl	8000544 <__aeabi_i2d>
 80032b6:	a326      	add	r3, pc, #152	; (adr r3, 8003350 <HAL_ADC_ConvCpltCallback+0xb8>)
 80032b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032bc:	f7fd fad6 	bl	800086c <__aeabi_ddiv>
 80032c0:	4602      	mov	r2, r0
 80032c2:	460b      	mov	r3, r1
 80032c4:	4610      	mov	r0, r2
 80032c6:	4619      	mov	r1, r3
 80032c8:	a323      	add	r3, pc, #140	; (adr r3, 8003358 <HAL_ADC_ConvCpltCallback+0xc0>)
 80032ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ce:	f7fd f9a3 	bl	8000618 <__aeabi_dmul>
 80032d2:	4602      	mov	r2, r0
 80032d4:	460b      	mov	r3, r1
 80032d6:	4610      	mov	r0, r2
 80032d8:	4619      	mov	r1, r3
 80032da:	a321      	add	r3, pc, #132	; (adr r3, 8003360 <HAL_ADC_ConvCpltCallback+0xc8>)
 80032dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e0:	f7fc ffe4 	bl	80002ac <__adddf3>
 80032e4:	4602      	mov	r2, r0
 80032e6:	460b      	mov	r3, r1
 80032e8:	4610      	mov	r0, r2
 80032ea:	4619      	mov	r1, r3
 80032ec:	f7fd fc8c 	bl	8000c08 <__aeabi_d2f>
 80032f0:	4603      	mov	r3, r0
 80032f2:	4a1f      	ldr	r2, [pc, #124]	; (8003370 <HAL_ADC_ConvCpltCallback+0xd8>)
 80032f4:	6013      	str	r3, [r2, #0]
					;




			 battery_V_sum = battery_V + battery_V_sum;
 80032f6:	4b1e      	ldr	r3, [pc, #120]	; (8003370 <HAL_ADC_ConvCpltCallback+0xd8>)
 80032f8:	ed93 7a00 	vldr	s14, [r3]
 80032fc:	4b1d      	ldr	r3, [pc, #116]	; (8003374 <HAL_ADC_ConvCpltCallback+0xdc>)
 80032fe:	edd3 7a00 	vldr	s15, [r3]
 8003302:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003306:	4b1b      	ldr	r3, [pc, #108]	; (8003374 <HAL_ADC_ConvCpltCallback+0xdc>)
 8003308:	edc3 7a00 	vstr	s15, [r3]

			    	  k++;
 800330c:	4b1a      	ldr	r3, [pc, #104]	; (8003378 <HAL_ADC_ConvCpltCallback+0xe0>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	3301      	adds	r3, #1
 8003312:	4a19      	ldr	r2, [pc, #100]	; (8003378 <HAL_ADC_ConvCpltCallback+0xe0>)
 8003314:	6013      	str	r3, [r2, #0]
			    	 	 if(k==2000)
 8003316:	4b18      	ldr	r3, [pc, #96]	; (8003378 <HAL_ADC_ConvCpltCallback+0xe0>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800331e:	d110      	bne.n	8003342 <HAL_ADC_ConvCpltCallback+0xaa>
			    	 	  {
			    	 		battery_V_avg = battery_V_sum/2001;
 8003320:	4b14      	ldr	r3, [pc, #80]	; (8003374 <HAL_ADC_ConvCpltCallback+0xdc>)
 8003322:	ed93 7a00 	vldr	s14, [r3]
 8003326:	eddf 6a15 	vldr	s13, [pc, #84]	; 800337c <HAL_ADC_ConvCpltCallback+0xe4>
 800332a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800332e:	4b14      	ldr	r3, [pc, #80]	; (8003380 <HAL_ADC_ConvCpltCallback+0xe8>)
 8003330:	edc3 7a00 	vstr	s15, [r3]

			    	 			  k=0;
 8003334:	4b10      	ldr	r3, [pc, #64]	; (8003378 <HAL_ADC_ConvCpltCallback+0xe0>)
 8003336:	2200      	movs	r2, #0
 8003338:	601a      	str	r2, [r3, #0]
			    	 			 battery_V_sum=0;
 800333a:	4b0e      	ldr	r3, [pc, #56]	; (8003374 <HAL_ADC_ConvCpltCallback+0xdc>)
 800333c:	f04f 0200 	mov.w	r2, #0
 8003340:	601a      	str	r2, [r3, #0]
			    	 	  }


		}

}
 8003342:	bf00      	nop
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	f3af 8000 	nop.w
 8003350:	33333333 	.word	0x33333333
 8003354:	4050f333 	.word	0x4050f333
 8003358:	83126e98 	.word	0x83126e98
 800335c:	403baac0 	.word	0x403baac0
 8003360:	9999999a 	.word	0x9999999a
 8003364:	40019999 	.word	0x40019999
 8003368:	20000554 	.word	0x20000554
 800336c:	200003d0 	.word	0x200003d0
 8003370:	20000ed0 	.word	0x20000ed0
 8003374:	20000ed8 	.word	0x20000ed8
 8003378:	20000ecc 	.word	0x20000ecc
 800337c:	44fa2000 	.word	0x44fa2000
 8003380:	20000ed4 	.word	0x20000ed4

08003384 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003388:	e7fe      	b.n	8003388 <NMI_Handler+0x4>

0800338a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800338a:	b480      	push	{r7}
 800338c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800338e:	e7fe      	b.n	800338e <HardFault_Handler+0x4>

08003390 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003394:	e7fe      	b.n	8003394 <MemManage_Handler+0x4>

08003396 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003396:	b480      	push	{r7}
 8003398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800339a:	e7fe      	b.n	800339a <BusFault_Handler+0x4>

0800339c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033a0:	e7fe      	b.n	80033a0 <UsageFault_Handler+0x4>

080033a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033a2:	b480      	push	{r7}
 80033a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033a6:	bf00      	nop
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033b4:	bf00      	nop
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033be:	b480      	push	{r7}
 80033c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033c2:	bf00      	nop
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033d0:	f000 fbb6 	bl	8003b40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033d4:	bf00      	nop
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_up);
 80033dc:	4802      	ldr	r0, [pc, #8]	; (80033e8 <DMA1_Stream6_IRQHandler+0x10>)
 80033de:	f001 fbd9 	bl	8004b94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80033e2:	bf00      	nop
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	200008ec 	.word	0x200008ec
 80033ec:	00000000 	.word	0x00000000

080033f0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80033f0:	b5b0      	push	{r4, r5, r7, lr}
 80033f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80033f4:	4872      	ldr	r0, [pc, #456]	; (80035c0 <ADC_IRQHandler+0x1d0>)
 80033f6:	f000 fc2a 	bl	8003c4e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */



  ADC3_IN12 = ADC3_value[0];
 80033fa:	4b72      	ldr	r3, [pc, #456]	; (80035c4 <ADC_IRQHandler+0x1d4>)
 80033fc:	881a      	ldrh	r2, [r3, #0]
 80033fe:	4b72      	ldr	r3, [pc, #456]	; (80035c8 <ADC_IRQHandler+0x1d8>)
 8003400:	801a      	strh	r2, [r3, #0]
  ADC3_IN13 = ADC3_value[1];
 8003402:	4b70      	ldr	r3, [pc, #448]	; (80035c4 <ADC_IRQHandler+0x1d4>)
 8003404:	885a      	ldrh	r2, [r3, #2]
 8003406:	4b71      	ldr	r3, [pc, #452]	; (80035cc <ADC_IRQHandler+0x1dc>)
 8003408:	801a      	strh	r2, [r3, #0]




  V=ADC1_0 * 0.6547877;  //3227 > 2113(ref)= 2.58V
 800340a:	4b71      	ldr	r3, [pc, #452]	; (80035d0 <ADC_IRQHandler+0x1e0>)
 800340c:	881b      	ldrh	r3, [r3, #0]
 800340e:	4618      	mov	r0, r3
 8003410:	f7fd f898 	bl	8000544 <__aeabi_i2d>
 8003414:	a364      	add	r3, pc, #400	; (adr r3, 80035a8 <ADC_IRQHandler+0x1b8>)
 8003416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341a:	f7fd f8fd 	bl	8000618 <__aeabi_dmul>
 800341e:	4602      	mov	r2, r0
 8003420:	460b      	mov	r3, r1
 8003422:	4610      	mov	r0, r2
 8003424:	4619      	mov	r1, r3
 8003426:	f7fd fbef 	bl	8000c08 <__aeabi_d2f>
 800342a:	4603      	mov	r3, r0
 800342c:	4a69      	ldr	r2, [pc, #420]	; (80035d4 <ADC_IRQHandler+0x1e4>)
 800342e:	6013      	str	r3, [r2, #0]
  V1_mV = V *5000 / 4095.0; //[mV]
 8003430:	4b68      	ldr	r3, [pc, #416]	; (80035d4 <ADC_IRQHandler+0x1e4>)
 8003432:	edd3 7a00 	vldr	s15, [r3]
 8003436:	ed9f 7a68 	vldr	s14, [pc, #416]	; 80035d8 <ADC_IRQHandler+0x1e8>
 800343a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800343e:	eddf 6a67 	vldr	s13, [pc, #412]	; 80035dc <ADC_IRQHandler+0x1ec>
 8003442:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003446:	4b66      	ldr	r3, [pc, #408]	; (80035e0 <ADC_IRQHandler+0x1f0>)
 8003448:	edc3 7a00 	vstr	s15, [r3]
  V1_V = V *5 / 4095.0; //[V]
 800344c:	4b61      	ldr	r3, [pc, #388]	; (80035d4 <ADC_IRQHandler+0x1e4>)
 800344e:	edd3 7a00 	vldr	s15, [r3]
 8003452:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003456:	ee27 7a87 	vmul.f32	s14, s15, s14
 800345a:	eddf 6a60 	vldr	s13, [pc, #384]	; 80035dc <ADC_IRQHandler+0x1ec>
 800345e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003462:	4b60      	ldr	r3, [pc, #384]	; (80035e4 <ADC_IRQHandler+0x1f4>)
 8003464:	edc3 7a00 	vstr	s15, [r3]


  if(V1_V - 2.58>=0)
 8003468:	4b5e      	ldr	r3, [pc, #376]	; (80035e4 <ADC_IRQHandler+0x1f4>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4618      	mov	r0, r3
 800346e:	f7fd f87b 	bl	8000568 <__aeabi_f2d>
 8003472:	a34f      	add	r3, pc, #316	; (adr r3, 80035b0 <ADC_IRQHandler+0x1c0>)
 8003474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003478:	f7fc ff16 	bl	80002a8 <__aeabi_dsub>
 800347c:	4602      	mov	r2, r0
 800347e:	460b      	mov	r3, r1
 8003480:	4610      	mov	r0, r2
 8003482:	4619      	mov	r1, r3
 8003484:	f04f 0200 	mov.w	r2, #0
 8003488:	f04f 0300 	mov.w	r3, #0
 800348c:	f7fd fb4a 	bl	8000b24 <__aeabi_dcmpge>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d025      	beq.n	80034e2 <ADC_IRQHandler+0xf2>
  {
	  amp_A = (V1_V -2.58) /285*1000;
 8003496:	4b53      	ldr	r3, [pc, #332]	; (80035e4 <ADC_IRQHandler+0x1f4>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f7fd f864 	bl	8000568 <__aeabi_f2d>
 80034a0:	a343      	add	r3, pc, #268	; (adr r3, 80035b0 <ADC_IRQHandler+0x1c0>)
 80034a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a6:	f7fc feff 	bl	80002a8 <__aeabi_dsub>
 80034aa:	4602      	mov	r2, r0
 80034ac:	460b      	mov	r3, r1
 80034ae:	4610      	mov	r0, r2
 80034b0:	4619      	mov	r1, r3
 80034b2:	a341      	add	r3, pc, #260	; (adr r3, 80035b8 <ADC_IRQHandler+0x1c8>)
 80034b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b8:	f7fd f9d8 	bl	800086c <__aeabi_ddiv>
 80034bc:	4602      	mov	r2, r0
 80034be:	460b      	mov	r3, r1
 80034c0:	4610      	mov	r0, r2
 80034c2:	4619      	mov	r1, r3
 80034c4:	f04f 0200 	mov.w	r2, #0
 80034c8:	4b47      	ldr	r3, [pc, #284]	; (80035e8 <ADC_IRQHandler+0x1f8>)
 80034ca:	f7fd f8a5 	bl	8000618 <__aeabi_dmul>
 80034ce:	4602      	mov	r2, r0
 80034d0:	460b      	mov	r3, r1
 80034d2:	4610      	mov	r0, r2
 80034d4:	4619      	mov	r1, r3
 80034d6:	f7fd fb97 	bl	8000c08 <__aeabi_d2f>
 80034da:	4603      	mov	r3, r0
 80034dc:	4a43      	ldr	r2, [pc, #268]	; (80035ec <ADC_IRQHandler+0x1fc>)
 80034de:	6013      	str	r3, [r2, #0]
 80034e0:	e03e      	b.n	8003560 <ADC_IRQHandler+0x170>
  }
  else if(V1_V - 2.58 < 0)
 80034e2:	4b40      	ldr	r3, [pc, #256]	; (80035e4 <ADC_IRQHandler+0x1f4>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7fd f83e 	bl	8000568 <__aeabi_f2d>
 80034ec:	a330      	add	r3, pc, #192	; (adr r3, 80035b0 <ADC_IRQHandler+0x1c0>)
 80034ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f2:	f7fc fed9 	bl	80002a8 <__aeabi_dsub>
 80034f6:	4602      	mov	r2, r0
 80034f8:	460b      	mov	r3, r1
 80034fa:	4610      	mov	r0, r2
 80034fc:	4619      	mov	r1, r3
 80034fe:	f04f 0200 	mov.w	r2, #0
 8003502:	f04f 0300 	mov.w	r3, #0
 8003506:	f7fd faf9 	bl	8000afc <__aeabi_dcmplt>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d027      	beq.n	8003560 <ADC_IRQHandler+0x170>
  {
	  amp_A = -(V1_V - 2.58) /285*1000;
 8003510:	4b34      	ldr	r3, [pc, #208]	; (80035e4 <ADC_IRQHandler+0x1f4>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4618      	mov	r0, r3
 8003516:	f7fd f827 	bl	8000568 <__aeabi_f2d>
 800351a:	a325      	add	r3, pc, #148	; (adr r3, 80035b0 <ADC_IRQHandler+0x1c0>)
 800351c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003520:	f7fc fec2 	bl	80002a8 <__aeabi_dsub>
 8003524:	4602      	mov	r2, r0
 8003526:	460b      	mov	r3, r1
 8003528:	4614      	mov	r4, r2
 800352a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800352e:	a322      	add	r3, pc, #136	; (adr r3, 80035b8 <ADC_IRQHandler+0x1c8>)
 8003530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003534:	4620      	mov	r0, r4
 8003536:	4629      	mov	r1, r5
 8003538:	f7fd f998 	bl	800086c <__aeabi_ddiv>
 800353c:	4602      	mov	r2, r0
 800353e:	460b      	mov	r3, r1
 8003540:	4610      	mov	r0, r2
 8003542:	4619      	mov	r1, r3
 8003544:	f04f 0200 	mov.w	r2, #0
 8003548:	4b27      	ldr	r3, [pc, #156]	; (80035e8 <ADC_IRQHandler+0x1f8>)
 800354a:	f7fd f865 	bl	8000618 <__aeabi_dmul>
 800354e:	4602      	mov	r2, r0
 8003550:	460b      	mov	r3, r1
 8003552:	4610      	mov	r0, r2
 8003554:	4619      	mov	r1, r3
 8003556:	f7fd fb57 	bl	8000c08 <__aeabi_d2f>
 800355a:	4603      	mov	r3, r0
 800355c:	4a23      	ldr	r2, [pc, #140]	; (80035ec <ADC_IRQHandler+0x1fc>)
 800355e:	6013      	str	r3, [r2, #0]
  }


  amp_mA = amp_A * 1000;
 8003560:	4b22      	ldr	r3, [pc, #136]	; (80035ec <ADC_IRQHandler+0x1fc>)
 8003562:	edd3 7a00 	vldr	s15, [r3]
 8003566:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80035f0 <ADC_IRQHandler+0x200>
 800356a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800356e:	4b21      	ldr	r3, [pc, #132]	; (80035f4 <ADC_IRQHandler+0x204>)
 8003570:	edc3 7a00 	vstr	s15, [r3]

  sum=amp_mA + sum;
 8003574:	4b1f      	ldr	r3, [pc, #124]	; (80035f4 <ADC_IRQHandler+0x204>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4618      	mov	r0, r3
 800357a:	f7fc fff5 	bl	8000568 <__aeabi_f2d>
 800357e:	4b1e      	ldr	r3, [pc, #120]	; (80035f8 <ADC_IRQHandler+0x208>)
 8003580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003584:	f7fc fe92 	bl	80002ac <__adddf3>
 8003588:	4602      	mov	r2, r0
 800358a:	460b      	mov	r3, r1
 800358c:	491a      	ldr	r1, [pc, #104]	; (80035f8 <ADC_IRQHandler+0x208>)
 800358e:	e9c1 2300 	strd	r2, r3, [r1]
 	  i++;
 8003592:	4b1a      	ldr	r3, [pc, #104]	; (80035fc <ADC_IRQHandler+0x20c>)
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	3301      	adds	r3, #1
 8003598:	b2da      	uxtb	r2, r3
 800359a:	4b18      	ldr	r3, [pc, #96]	; (80035fc <ADC_IRQHandler+0x20c>)
 800359c:	701a      	strb	r2, [r3, #0]
 	 	  }



  /* USER CODE END ADC_IRQn 1 */
}
 800359e:	bf00      	nop
 80035a0:	bdb0      	pop	{r4, r5, r7, pc}
 80035a2:	bf00      	nop
 80035a4:	f3af 8000 	nop.w
 80035a8:	55aa5680 	.word	0x55aa5680
 80035ac:	3fe4f405 	.word	0x3fe4f405
 80035b0:	0a3d70a4 	.word	0x0a3d70a4
 80035b4:	4004a3d7 	.word	0x4004a3d7
 80035b8:	00000000 	.word	0x00000000
 80035bc:	4071d000 	.word	0x4071d000
 80035c0:	20000554 	.word	0x20000554
 80035c4:	200003d0 	.word	0x200003d0
 80035c8:	20000edc 	.word	0x20000edc
 80035cc:	20000ede 	.word	0x20000ede
 80035d0:	200003cc 	.word	0x200003cc
 80035d4:	20000efc 	.word	0x20000efc
 80035d8:	459c4000 	.word	0x459c4000
 80035dc:	457ff000 	.word	0x457ff000
 80035e0:	20000f00 	.word	0x20000f00
 80035e4:	20000f04 	.word	0x20000f04
 80035e8:	408f4000 	.word	0x408f4000
 80035ec:	20000f08 	.word	0x20000f08
 80035f0:	447a0000 	.word	0x447a0000
 80035f4:	20000f0c 	.word	0x20000f0c
 80035f8:	20000f10 	.word	0x20000f10
 80035fc:	20000f18 	.word	0x20000f18

08003600 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003604:	4802      	ldr	r0, [pc, #8]	; (8003610 <TIM3_IRQHandler+0x10>)
 8003606:	f003 fd6d 	bl	80070e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */


  /* USER CODE END TIM3_IRQn 1 */
}
 800360a:	bf00      	nop
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	200006f4 	.word	0x200006f4

08003614 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003618:	4802      	ldr	r0, [pc, #8]	; (8003624 <USART3_IRQHandler+0x10>)
 800361a:	f004 fd5f 	bl	80080dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800361e:	bf00      	nop
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	20000320 	.word	0x20000320

08003628 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800362c:	4807      	ldr	r0, [pc, #28]	; (800364c <TIM8_BRK_TIM12_IRQHandler+0x24>)
 800362e:	f003 fd59 	bl	80070e4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8003632:	4807      	ldr	r0, [pc, #28]	; (8003650 <TIM8_BRK_TIM12_IRQHandler+0x28>)
 8003634:	f003 fd56 	bl	80070e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */


  tim12_flag=1;
 8003638:	4b06      	ldr	r3, [pc, #24]	; (8003654 <TIM8_BRK_TIM12_IRQHandler+0x2c>)
 800363a:	2201      	movs	r2, #1
 800363c:	601a      	str	r2, [r3, #0]

  tim12_test++;
 800363e:	4b06      	ldr	r3, [pc, #24]	; (8003658 <TIM8_BRK_TIM12_IRQHandler+0x30>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	3301      	adds	r3, #1
 8003644:	4a04      	ldr	r2, [pc, #16]	; (8003658 <TIM8_BRK_TIM12_IRQHandler+0x30>)
 8003646:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8003648:	bf00      	nop
 800364a:	bd80      	pop	{r7, pc}
 800364c:	200007cc 	.word	0x200007cc
 8003650:	20000814 	.word	0x20000814
 8003654:	20000ef0 	.word	0x20000ef0
 8003658:	20000ef4 	.word	0x20000ef4

0800365c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003660:	4811      	ldr	r0, [pc, #68]	; (80036a8 <TIM8_UP_TIM13_IRQHandler+0x4c>)
 8003662:	f003 fd3f 	bl	80070e4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8003666:	4811      	ldr	r0, [pc, #68]	; (80036ac <TIM8_UP_TIM13_IRQHandler+0x50>)
 8003668:	f003 fd3c 	bl	80070e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  if ((TIM13->SR & 0x01) != RESET)	// CC3 interrupt flag
 800366c:	4b10      	ldr	r3, [pc, #64]	; (80036b0 <TIM8_UP_TIM13_IRQHandler+0x54>)
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	f003 0301 	and.w	r3, r3, #1
 8003674:	2b00      	cmp	r3, #0
 8003676:	d014      	beq.n	80036a2 <TIM8_UP_TIM13_IRQHandler+0x46>
  	{
  		TIM13->SR &= ~0x01;	// CC3 Interrupt Claer
 8003678:	4b0d      	ldr	r3, [pc, #52]	; (80036b0 <TIM8_UP_TIM13_IRQHandler+0x54>)
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	4a0c      	ldr	r2, [pc, #48]	; (80036b0 <TIM8_UP_TIM13_IRQHandler+0x54>)
 800367e:	f023 0301 	bic.w	r3, r3, #1
 8003682:	6113      	str	r3, [r2, #16]


  		GPIOB->ODR ^= 1<<14;
 8003684:	4b0b      	ldr	r3, [pc, #44]	; (80036b4 <TIM8_UP_TIM13_IRQHandler+0x58>)
 8003686:	695b      	ldr	r3, [r3, #20]
 8003688:	4a0a      	ldr	r2, [pc, #40]	; (80036b4 <TIM8_UP_TIM13_IRQHandler+0x58>)
 800368a:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 800368e:	6153      	str	r3, [r2, #20]

  		 tim13_flag=1;
 8003690:	4b09      	ldr	r3, [pc, #36]	; (80036b8 <TIM8_UP_TIM13_IRQHandler+0x5c>)
 8003692:	2201      	movs	r2, #1
 8003694:	601a      	str	r2, [r3, #0]

  		  step_pulse_count++;
 8003696:	4b09      	ldr	r3, [pc, #36]	; (80036bc <TIM8_UP_TIM13_IRQHandler+0x60>)
 8003698:	881b      	ldrh	r3, [r3, #0]
 800369a:	3301      	adds	r3, #1
 800369c:	b29a      	uxth	r2, r3
 800369e:	4b07      	ldr	r3, [pc, #28]	; (80036bc <TIM8_UP_TIM13_IRQHandler+0x60>)
 80036a0:	801a      	strh	r2, [r3, #0]
  		  }
*/

  	}
  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80036a2:	bf00      	nop
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	200007cc 	.word	0x200007cc
 80036ac:	2000085c 	.word	0x2000085c
 80036b0:	40001c00 	.word	0x40001c00
 80036b4:	40020400 	.word	0x40020400
 80036b8:	20000eec 	.word	0x20000eec
 80036bc:	20000ef8 	.word	0x20000ef8

080036c0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80036c4:	4862      	ldr	r0, [pc, #392]	; (8003850 <TIM8_TRG_COM_TIM14_IRQHandler+0x190>)
 80036c6:	f003 fd0d 	bl	80070e4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 80036ca:	4862      	ldr	r0, [pc, #392]	; (8003854 <TIM8_TRG_COM_TIM14_IRQHandler+0x194>)
 80036cc:	f003 fd0a 	bl	80070e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

 tim14_flag++;
 80036d0:	4b61      	ldr	r3, [pc, #388]	; (8003858 <TIM8_TRG_COM_TIM14_IRQHandler+0x198>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	3301      	adds	r3, #1
 80036d6:	4a60      	ldr	r2, [pc, #384]	; (8003858 <TIM8_TRG_COM_TIM14_IRQHandler+0x198>)
 80036d8:	6013      	str	r3, [r2, #0]

//motor1
  ENCODER_OLD= ENCODER_NEW;
 80036da:	4b60      	ldr	r3, [pc, #384]	; (800385c <TIM8_TRG_COM_TIM14_IRQHandler+0x19c>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a60      	ldr	r2, [pc, #384]	; (8003860 <TIM8_TRG_COM_TIM14_IRQHandler+0x1a0>)
 80036e0:	6013      	str	r3, [r2, #0]
  ENCODER_NEW = TIM4->CNT;
 80036e2:	4b60      	ldr	r3, [pc, #384]	; (8003864 <TIM8_TRG_COM_TIM14_IRQHandler+0x1a4>)
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e6:	4a5d      	ldr	r2, [pc, #372]	; (800385c <TIM8_TRG_COM_TIM14_IRQHandler+0x19c>)
 80036e8:	6013      	str	r3, [r2, #0]




   	RPM =  ((abs(ENCODER_NEW-ENCODER_OLD)*60))/512.0/0.01;	// ?��코더 ?��?��: 1 turn?�� 3 pulse 출력
 80036ea:	4b5c      	ldr	r3, [pc, #368]	; (800385c <TIM8_TRG_COM_TIM14_IRQHandler+0x19c>)
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	4b5c      	ldr	r3, [pc, #368]	; (8003860 <TIM8_TRG_COM_TIM14_IRQHandler+0x1a0>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80036f8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80036fc:	4613      	mov	r3, r2
 80036fe:	011b      	lsls	r3, r3, #4
 8003700:	1a9b      	subs	r3, r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4618      	mov	r0, r3
 8003706:	f7fc ff1d 	bl	8000544 <__aeabi_i2d>
 800370a:	f04f 0200 	mov.w	r2, #0
 800370e:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8003712:	f7fd f8ab 	bl	800086c <__aeabi_ddiv>
 8003716:	4602      	mov	r2, r0
 8003718:	460b      	mov	r3, r1
 800371a:	4610      	mov	r0, r2
 800371c:	4619      	mov	r1, r3
 800371e:	a348      	add	r3, pc, #288	; (adr r3, 8003840 <TIM8_TRG_COM_TIM14_IRQHandler+0x180>)
 8003720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003724:	f7fd f8a2 	bl	800086c <__aeabi_ddiv>
 8003728:	4602      	mov	r2, r0
 800372a:	460b      	mov	r3, r1
 800372c:	4610      	mov	r0, r2
 800372e:	4619      	mov	r1, r3
 8003730:	f7fd fa6a 	bl	8000c08 <__aeabi_d2f>
 8003734:	4603      	mov	r3, r0
 8003736:	4a4c      	ldr	r2, [pc, #304]	; (8003868 <TIM8_TRG_COM_TIM14_IRQHandler+0x1a8>)
 8003738:	6013      	str	r3, [r2, #0]
    	RPS=RPM/60;
 800373a:	4b4b      	ldr	r3, [pc, #300]	; (8003868 <TIM8_TRG_COM_TIM14_IRQHandler+0x1a8>)
 800373c:	ed93 7a00 	vldr	s14, [r3]
 8003740:	eddf 6a4a 	vldr	s13, [pc, #296]	; 800386c <TIM8_TRG_COM_TIM14_IRQHandler+0x1ac>
 8003744:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003748:	4b49      	ldr	r3, [pc, #292]	; (8003870 <TIM8_TRG_COM_TIM14_IRQHandler+0x1b0>)
 800374a:	edc3 7a00 	vstr	s15, [r3]
    	Omega= RPS*2*M_PI;
 800374e:	4b48      	ldr	r3, [pc, #288]	; (8003870 <TIM8_TRG_COM_TIM14_IRQHandler+0x1b0>)
 8003750:	edd3 7a00 	vldr	s15, [r3]
 8003754:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003758:	ee17 0a90 	vmov	r0, s15
 800375c:	f7fc ff04 	bl	8000568 <__aeabi_f2d>
 8003760:	a339      	add	r3, pc, #228	; (adr r3, 8003848 <TIM8_TRG_COM_TIM14_IRQHandler+0x188>)
 8003762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003766:	f7fc ff57 	bl	8000618 <__aeabi_dmul>
 800376a:	4602      	mov	r2, r0
 800376c:	460b      	mov	r3, r1
 800376e:	4610      	mov	r0, r2
 8003770:	4619      	mov	r1, r3
 8003772:	f7fd fa49 	bl	8000c08 <__aeabi_d2f>
 8003776:	4603      	mov	r3, r0
 8003778:	4a3e      	ldr	r2, [pc, #248]	; (8003874 <TIM8_TRG_COM_TIM14_IRQHandler+0x1b4>)
 800377a:	6013      	str	r3, [r2, #0]


		RPM_Sum= RPM + RPM_Sum;
 800377c:	4b3a      	ldr	r3, [pc, #232]	; (8003868 <TIM8_TRG_COM_TIM14_IRQHandler+0x1a8>)
 800377e:	ed93 7a00 	vldr	s14, [r3]
 8003782:	4b3d      	ldr	r3, [pc, #244]	; (8003878 <TIM8_TRG_COM_TIM14_IRQHandler+0x1b8>)
 8003784:	edd3 7a00 	vldr	s15, [r3]
 8003788:	ee77 7a27 	vadd.f32	s15, s14, s15
 800378c:	4b3a      	ldr	r3, [pc, #232]	; (8003878 <TIM8_TRG_COM_TIM14_IRQHandler+0x1b8>)
 800378e:	edc3 7a00 	vstr	s15, [r3]


				    	  k123++;
 8003792:	4b3a      	ldr	r3, [pc, #232]	; (800387c <TIM8_TRG_COM_TIM14_IRQHandler+0x1bc>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	3301      	adds	r3, #1
 8003798:	4a38      	ldr	r2, [pc, #224]	; (800387c <TIM8_TRG_COM_TIM14_IRQHandler+0x1bc>)
 800379a:	6013      	str	r3, [r2, #0]
				    	 	 if(k123==10)
 800379c:	4b37      	ldr	r3, [pc, #220]	; (800387c <TIM8_TRG_COM_TIM14_IRQHandler+0x1bc>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2b0a      	cmp	r3, #10
 80037a2:	d110      	bne.n	80037c6 <TIM8_TRG_COM_TIM14_IRQHandler+0x106>
				    	 	  {
				    	 		RPM_Avg = RPM_Sum/(10+1);
 80037a4:	4b34      	ldr	r3, [pc, #208]	; (8003878 <TIM8_TRG_COM_TIM14_IRQHandler+0x1b8>)
 80037a6:	ed93 7a00 	vldr	s14, [r3]
 80037aa:	eef2 6a06 	vmov.f32	s13, #38	; 0x41300000  11.0
 80037ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037b2:	4b33      	ldr	r3, [pc, #204]	; (8003880 <TIM8_TRG_COM_TIM14_IRQHandler+0x1c0>)
 80037b4:	edc3 7a00 	vstr	s15, [r3]

				    	 			  k123=0;
 80037b8:	4b30      	ldr	r3, [pc, #192]	; (800387c <TIM8_TRG_COM_TIM14_IRQHandler+0x1bc>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	601a      	str	r2, [r3, #0]
				    	 			 RPM_Sum=0;
 80037be:	4b2e      	ldr	r3, [pc, #184]	; (8003878 <TIM8_TRG_COM_TIM14_IRQHandler+0x1b8>)
 80037c0:	f04f 0200 	mov.w	r2, #0
 80037c4:	601a      	str	r2, [r3, #0]
				    	 	  }
				    	 	tim7_flag = 0;
 80037c6:	4b2f      	ldr	r3, [pc, #188]	; (8003884 <TIM8_TRG_COM_TIM14_IRQHandler+0x1c4>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	601a      	str	r2, [r3, #0]
   // 	 printf("RPM = %d \r\n",RPM);




    	if(( GPIOE->ODR & 1<<0) == 0)	// if  back?
 80037cc:	4b2e      	ldr	r3, [pc, #184]	; (8003888 <TIM8_TRG_COM_TIM14_IRQHandler+0x1c8>)
 80037ce:	695b      	ldr	r3, [r3, #20]
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d110      	bne.n	80037fa <TIM8_TRG_COM_TIM14_IRQHandler+0x13a>
    	{
    		RPM = RPM;
 80037d8:	4b23      	ldr	r3, [pc, #140]	; (8003868 <TIM8_TRG_COM_TIM14_IRQHandler+0x1a8>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a22      	ldr	r2, [pc, #136]	; (8003868 <TIM8_TRG_COM_TIM14_IRQHandler+0x1a8>)
 80037de:	6013      	str	r3, [r2, #0]
			RPS = RPS;
 80037e0:	4b23      	ldr	r3, [pc, #140]	; (8003870 <TIM8_TRG_COM_TIM14_IRQHandler+0x1b0>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a22      	ldr	r2, [pc, #136]	; (8003870 <TIM8_TRG_COM_TIM14_IRQHandler+0x1b0>)
 80037e6:	6013      	str	r3, [r2, #0]
			Omega = Omega;
 80037e8:	4b22      	ldr	r3, [pc, #136]	; (8003874 <TIM8_TRG_COM_TIM14_IRQHandler+0x1b4>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a21      	ldr	r2, [pc, #132]	; (8003874 <TIM8_TRG_COM_TIM14_IRQHandler+0x1b4>)
 80037ee:	6013      	str	r3, [r2, #0]
			RPM_Avg =RPM_Avg;
 80037f0:	4b23      	ldr	r3, [pc, #140]	; (8003880 <TIM8_TRG_COM_TIM14_IRQHandler+0x1c0>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a22      	ldr	r2, [pc, #136]	; (8003880 <TIM8_TRG_COM_TIM14_IRQHandler+0x1c0>)
 80037f6:	6013      	str	r3, [r2, #0]




  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80037f8:	e01f      	b.n	800383a <TIM8_TRG_COM_TIM14_IRQHandler+0x17a>
    		RPM = -RPM;
 80037fa:	4b1b      	ldr	r3, [pc, #108]	; (8003868 <TIM8_TRG_COM_TIM14_IRQHandler+0x1a8>)
 80037fc:	edd3 7a00 	vldr	s15, [r3]
 8003800:	eef1 7a67 	vneg.f32	s15, s15
 8003804:	4b18      	ldr	r3, [pc, #96]	; (8003868 <TIM8_TRG_COM_TIM14_IRQHandler+0x1a8>)
 8003806:	edc3 7a00 	vstr	s15, [r3]
         	RPS = -RPS;
 800380a:	4b19      	ldr	r3, [pc, #100]	; (8003870 <TIM8_TRG_COM_TIM14_IRQHandler+0x1b0>)
 800380c:	edd3 7a00 	vldr	s15, [r3]
 8003810:	eef1 7a67 	vneg.f32	s15, s15
 8003814:	4b16      	ldr	r3, [pc, #88]	; (8003870 <TIM8_TRG_COM_TIM14_IRQHandler+0x1b0>)
 8003816:	edc3 7a00 	vstr	s15, [r3]
    		Omega = -Omega;
 800381a:	4b16      	ldr	r3, [pc, #88]	; (8003874 <TIM8_TRG_COM_TIM14_IRQHandler+0x1b4>)
 800381c:	edd3 7a00 	vldr	s15, [r3]
 8003820:	eef1 7a67 	vneg.f32	s15, s15
 8003824:	4b13      	ldr	r3, [pc, #76]	; (8003874 <TIM8_TRG_COM_TIM14_IRQHandler+0x1b4>)
 8003826:	edc3 7a00 	vstr	s15, [r3]
    		RPM_Avg = -RPM_Avg;
 800382a:	4b15      	ldr	r3, [pc, #84]	; (8003880 <TIM8_TRG_COM_TIM14_IRQHandler+0x1c0>)
 800382c:	edd3 7a00 	vldr	s15, [r3]
 8003830:	eef1 7a67 	vneg.f32	s15, s15
 8003834:	4b12      	ldr	r3, [pc, #72]	; (8003880 <TIM8_TRG_COM_TIM14_IRQHandler+0x1c0>)
 8003836:	edc3 7a00 	vstr	s15, [r3]
}
 800383a:	bf00      	nop
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	47ae147b 	.word	0x47ae147b
 8003844:	3f847ae1 	.word	0x3f847ae1
 8003848:	54442d18 	.word	0x54442d18
 800384c:	400921fb 	.word	0x400921fb
 8003850:	200007cc 	.word	0x200007cc
 8003854:	200008a4 	.word	0x200008a4
 8003858:	20000ee8 	.word	0x20000ee8
 800385c:	200003b8 	.word	0x200003b8
 8003860:	200003bc 	.word	0x200003bc
 8003864:	40000800 	.word	0x40000800
 8003868:	200003c0 	.word	0x200003c0
 800386c:	42700000 	.word	0x42700000
 8003870:	200003c4 	.word	0x200003c4
 8003874:	200003d8 	.word	0x200003d8
 8003878:	20000f1c 	.word	0x20000f1c
 800387c:	20000f24 	.word	0x20000f24
 8003880:	20000f20 	.word	0x20000f20
 8003884:	20000ee0 	.word	0x20000ee0
 8003888:	40021000 	.word	0x40021000

0800388c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003890:	4802      	ldr	r0, [pc, #8]	; (800389c <UART4_IRQHandler+0x10>)
 8003892:	f004 fc23 	bl	80080dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003896:	bf00      	nop
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	2000036c 	.word	0x2000036c

080038a0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80038a4:	4803      	ldr	r0, [pc, #12]	; (80038b4 <TIM6_DAC_IRQHandler+0x14>)
 80038a6:	f003 fc1d 	bl	80070e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  tim6_flag=1;
 80038aa:	4b03      	ldr	r3, [pc, #12]	; (80038b8 <TIM6_DAC_IRQHandler+0x18>)
 80038ac:	2201      	movs	r2, #1
 80038ae:	601a      	str	r2, [r3, #0]




  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80038b0:	bf00      	nop
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	20000784 	.word	0x20000784
 80038b8:	20000ee4 	.word	0x20000ee4

080038bc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80038c0:	4802      	ldr	r0, [pc, #8]	; (80038cc <DMA2_Stream1_IRQHandler+0x10>)
 80038c2:	f001 f967 	bl	8004b94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80038c6:	bf00      	nop
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	2000059c 	.word	0x2000059c

080038d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
  return 1;
 80038d4:	2301      	movs	r3, #1
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <_kill>:

int _kill(int pid, int sig)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80038ea:	f006 fefb 	bl	800a6e4 <__errno>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2216      	movs	r2, #22
 80038f2:	601a      	str	r2, [r3, #0]
  return -1;
 80038f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <_exit>:

void _exit (int status)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003908:	f04f 31ff 	mov.w	r1, #4294967295
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f7ff ffe7 	bl	80038e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003912:	e7fe      	b.n	8003912 <_exit+0x12>

08003914 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003920:	2300      	movs	r3, #0
 8003922:	617b      	str	r3, [r7, #20]
 8003924:	e00a      	b.n	800393c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003926:	f3af 8000 	nop.w
 800392a:	4601      	mov	r1, r0
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	1c5a      	adds	r2, r3, #1
 8003930:	60ba      	str	r2, [r7, #8]
 8003932:	b2ca      	uxtb	r2, r1
 8003934:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	3301      	adds	r3, #1
 800393a:	617b      	str	r3, [r7, #20]
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	429a      	cmp	r2, r3
 8003942:	dbf0      	blt.n	8003926 <_read+0x12>
  }

  return len;
 8003944:	687b      	ldr	r3, [r7, #4]
}
 8003946:	4618      	mov	r0, r3
 8003948:	3718      	adds	r7, #24
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <_close>:
  }
  return len;
}

int _close(int file)
{
 800394e:	b480      	push	{r7}
 8003950:	b083      	sub	sp, #12
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003956:	f04f 33ff 	mov.w	r3, #4294967295
}
 800395a:	4618      	mov	r0, r3
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr

08003966 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003966:	b480      	push	{r7}
 8003968:	b083      	sub	sp, #12
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
 800396e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003976:	605a      	str	r2, [r3, #4]
  return 0;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	370c      	adds	r7, #12
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr

08003986 <_isatty>:

int _isatty(int file)
{
 8003986:	b480      	push	{r7}
 8003988:	b083      	sub	sp, #12
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800398e:	2301      	movs	r3, #1
}
 8003990:	4618      	mov	r0, r3
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3714      	adds	r7, #20
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
	...

080039b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80039c0:	4a14      	ldr	r2, [pc, #80]	; (8003a14 <_sbrk+0x5c>)
 80039c2:	4b15      	ldr	r3, [pc, #84]	; (8003a18 <_sbrk+0x60>)
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80039cc:	4b13      	ldr	r3, [pc, #76]	; (8003a1c <_sbrk+0x64>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d102      	bne.n	80039da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80039d4:	4b11      	ldr	r3, [pc, #68]	; (8003a1c <_sbrk+0x64>)
 80039d6:	4a12      	ldr	r2, [pc, #72]	; (8003a20 <_sbrk+0x68>)
 80039d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80039da:	4b10      	ldr	r3, [pc, #64]	; (8003a1c <_sbrk+0x64>)
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4413      	add	r3, r2
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d207      	bcs.n	80039f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80039e8:	f006 fe7c 	bl	800a6e4 <__errno>
 80039ec:	4603      	mov	r3, r0
 80039ee:	220c      	movs	r2, #12
 80039f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80039f2:	f04f 33ff 	mov.w	r3, #4294967295
 80039f6:	e009      	b.n	8003a0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80039f8:	4b08      	ldr	r3, [pc, #32]	; (8003a1c <_sbrk+0x64>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039fe:	4b07      	ldr	r3, [pc, #28]	; (8003a1c <_sbrk+0x64>)
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4413      	add	r3, r2
 8003a06:	4a05      	ldr	r2, [pc, #20]	; (8003a1c <_sbrk+0x64>)
 8003a08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3718      	adds	r7, #24
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	20030000 	.word	0x20030000
 8003a18:	00000400 	.word	0x00000400
 8003a1c:	20000f28 	.word	0x20000f28
 8003a20:	20001080 	.word	0x20001080

08003a24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a28:	4b06      	ldr	r3, [pc, #24]	; (8003a44 <SystemInit+0x20>)
 8003a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a2e:	4a05      	ldr	r2, [pc, #20]	; (8003a44 <SystemInit+0x20>)
 8003a30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a38:	bf00      	nop
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	e000ed00 	.word	0xe000ed00

08003a48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003a48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a80 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003a4c:	f7ff ffea 	bl	8003a24 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003a50:	480c      	ldr	r0, [pc, #48]	; (8003a84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003a52:	490d      	ldr	r1, [pc, #52]	; (8003a88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003a54:	4a0d      	ldr	r2, [pc, #52]	; (8003a8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003a56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a58:	e002      	b.n	8003a60 <LoopCopyDataInit>

08003a5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a5e:	3304      	adds	r3, #4

08003a60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a64:	d3f9      	bcc.n	8003a5a <CopyDataInit>
  


/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a66:	4a0a      	ldr	r2, [pc, #40]	; (8003a90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003a68:	4c0a      	ldr	r4, [pc, #40]	; (8003a94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003a6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a6c:	e001      	b.n	8003a72 <LoopFillZerobss>

08003a6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a70:	3204      	adds	r2, #4

08003a72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a74:	d3fb      	bcc.n	8003a6e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003a76:	f006 fe3b 	bl	800a6f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a7a:	f7fd fd55 	bl	8001528 <main>
  bx  lr    
 8003a7e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003a80:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003a84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a88:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8003a8c:	0800f1e8 	.word	0x0800f1e8
  ldr r2, =_sbss
 8003a90:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8003a94:	2000107c 	.word	0x2000107c

08003a98 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a98:	e7fe      	b.n	8003a98 <CAN1_RX0_IRQHandler>
	...

08003a9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003aa0:	4b0e      	ldr	r3, [pc, #56]	; (8003adc <HAL_Init+0x40>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a0d      	ldr	r2, [pc, #52]	; (8003adc <HAL_Init+0x40>)
 8003aa6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003aaa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003aac:	4b0b      	ldr	r3, [pc, #44]	; (8003adc <HAL_Init+0x40>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a0a      	ldr	r2, [pc, #40]	; (8003adc <HAL_Init+0x40>)
 8003ab2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ab6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ab8:	4b08      	ldr	r3, [pc, #32]	; (8003adc <HAL_Init+0x40>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a07      	ldr	r2, [pc, #28]	; (8003adc <HAL_Init+0x40>)
 8003abe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ac2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ac4:	2003      	movs	r0, #3
 8003ac6:	f000 fe8b 	bl	80047e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003aca:	2000      	movs	r0, #0
 8003acc:	f000 f808 	bl	8003ae0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ad0:	f7fe ff4a 	bl	8002968 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	40023c00 	.word	0x40023c00

08003ae0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ae8:	4b12      	ldr	r3, [pc, #72]	; (8003b34 <HAL_InitTick+0x54>)
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	4b12      	ldr	r3, [pc, #72]	; (8003b38 <HAL_InitTick+0x58>)
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	4619      	mov	r1, r3
 8003af2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003af6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003afe:	4618      	mov	r0, r3
 8003b00:	f000 fea3 	bl	800484a <HAL_SYSTICK_Config>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e00e      	b.n	8003b2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b0f      	cmp	r3, #15
 8003b12:	d80a      	bhi.n	8003b2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b14:	2200      	movs	r2, #0
 8003b16:	6879      	ldr	r1, [r7, #4]
 8003b18:	f04f 30ff 	mov.w	r0, #4294967295
 8003b1c:	f000 fe6b 	bl	80047f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b20:	4a06      	ldr	r2, [pc, #24]	; (8003b3c <HAL_InitTick+0x5c>)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
 8003b28:	e000      	b.n	8003b2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3708      	adds	r7, #8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	20000010 	.word	0x20000010
 8003b38:	20000018 	.word	0x20000018
 8003b3c:	20000014 	.word	0x20000014

08003b40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b44:	4b06      	ldr	r3, [pc, #24]	; (8003b60 <HAL_IncTick+0x20>)
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	461a      	mov	r2, r3
 8003b4a:	4b06      	ldr	r3, [pc, #24]	; (8003b64 <HAL_IncTick+0x24>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4413      	add	r3, r2
 8003b50:	4a04      	ldr	r2, [pc, #16]	; (8003b64 <HAL_IncTick+0x24>)
 8003b52:	6013      	str	r3, [r2, #0]
}
 8003b54:	bf00      	nop
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	20000018 	.word	0x20000018
 8003b64:	20000f2c 	.word	0x20000f2c

08003b68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  return uwTick;
 8003b6c:	4b03      	ldr	r3, [pc, #12]	; (8003b7c <HAL_GetTick+0x14>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	20000f2c 	.word	0x20000f2c

08003b80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b88:	f7ff ffee 	bl	8003b68 <HAL_GetTick>
 8003b8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b98:	d005      	beq.n	8003ba6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b9a:	4b0a      	ldr	r3, [pc, #40]	; (8003bc4 <HAL_Delay+0x44>)
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003ba6:	bf00      	nop
 8003ba8:	f7ff ffde 	bl	8003b68 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d8f7      	bhi.n	8003ba8 <HAL_Delay+0x28>
  {
  }
}
 8003bb8:	bf00      	nop
 8003bba:	bf00      	nop
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	20000018 	.word	0x20000018

08003bc8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d101      	bne.n	8003bde <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e033      	b.n	8003c46 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d109      	bne.n	8003bfa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f7fe fee6 	bl	80029b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	f003 0310 	and.w	r3, r3, #16
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d118      	bne.n	8003c38 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003c0e:	f023 0302 	bic.w	r3, r3, #2
 8003c12:	f043 0202 	orr.w	r2, r3, #2
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 fb88 	bl	8004330 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2a:	f023 0303 	bic.w	r3, r3, #3
 8003c2e:	f043 0201 	orr.w	r2, r3, #1
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	641a      	str	r2, [r3, #64]	; 0x40
 8003c36:	e001      	b.n	8003c3c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b086      	sub	sp, #24
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003c56:	2300      	movs	r3, #0
 8003c58:	617b      	str	r3, [r7, #20]
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f003 0302 	and.w	r3, r3, #2
 8003c74:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	f003 0320 	and.w	r3, r3, #32
 8003c7c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d049      	beq.n	8003d18 <HAL_ADC_IRQHandler+0xca>
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d046      	beq.n	8003d18 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	f003 0310 	and.w	r3, r3, #16
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d105      	bne.n	8003ca2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d12b      	bne.n	8003d08 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d127      	bne.n	8003d08 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d006      	beq.n	8003cd4 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d119      	bne.n	8003d08 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685a      	ldr	r2, [r3, #4]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f022 0220 	bic.w	r2, r2, #32
 8003ce2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d105      	bne.n	8003d08 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d00:	f043 0201 	orr.w	r2, r3, #1
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f7ff fac5 	bl	8003298 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f06f 0212 	mvn.w	r2, #18
 8003d16:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f003 0304 	and.w	r3, r3, #4
 8003d1e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d26:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d057      	beq.n	8003dde <HAL_ADC_IRQHandler+0x190>
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d054      	beq.n	8003dde <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d38:	f003 0310 	and.w	r3, r3, #16
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d105      	bne.n	8003d4c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d44:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d139      	bne.n	8003dce <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d60:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d006      	beq.n	8003d76 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d12b      	bne.n	8003dce <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d124      	bne.n	8003dce <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d11d      	bne.n	8003dce <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d119      	bne.n	8003dce <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	685a      	ldr	r2, [r3, #4]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003da8:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d105      	bne.n	8003dce <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	f043 0201 	orr.w	r2, r3, #1
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 fc2c 	bl	800462c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f06f 020c 	mvn.w	r2, #12
 8003ddc:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dec:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d017      	beq.n	8003e24 <HAL_ADC_IRQHandler+0x1d6>
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d014      	beq.n	8003e24 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d10d      	bne.n	8003e24 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 f945 	bl	80040a4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f06f 0201 	mvn.w	r2, #1
 8003e22:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f003 0320 	and.w	r3, r3, #32
 8003e2a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e32:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d015      	beq.n	8003e66 <HAL_ADC_IRQHandler+0x218>
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d012      	beq.n	8003e66 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e44:	f043 0202 	orr.w	r2, r3, #2
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f06f 0220 	mvn.w	r2, #32
 8003e54:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 f92e 	bl	80040b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f06f 0220 	mvn.w	r2, #32
 8003e64:	601a      	str	r2, [r3, #0]
  }
}
 8003e66:	bf00      	nop
 8003e68:	3718      	adds	r7, #24
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
	...

08003e70 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d101      	bne.n	8003e8e <HAL_ADC_Start_DMA+0x1e>
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	e0e9      	b.n	8004062 <HAL_ADC_Start_DMA+0x1f2>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f003 0301 	and.w	r3, r3, #1
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d018      	beq.n	8003ed6 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689a      	ldr	r2, [r3, #8]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f042 0201 	orr.w	r2, r2, #1
 8003eb2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003eb4:	4b6d      	ldr	r3, [pc, #436]	; (800406c <HAL_ADC_Start_DMA+0x1fc>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a6d      	ldr	r2, [pc, #436]	; (8004070 <HAL_ADC_Start_DMA+0x200>)
 8003eba:	fba2 2303 	umull	r2, r3, r2, r3
 8003ebe:	0c9a      	lsrs	r2, r3, #18
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	4413      	add	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003ec8:	e002      	b.n	8003ed0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1f9      	bne.n	8003eca <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ee4:	d107      	bne.n	8003ef6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	689a      	ldr	r2, [r3, #8]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ef4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	f040 80a1 	bne.w	8004048 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003f0e:	f023 0301 	bic.w	r3, r3, #1
 8003f12:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d007      	beq.n	8003f38 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003f30:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f44:	d106      	bne.n	8003f54 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4a:	f023 0206 	bic.w	r2, r3, #6
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	645a      	str	r2, [r3, #68]	; 0x44
 8003f52:	e002      	b.n	8003f5a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f62:	4b44      	ldr	r3, [pc, #272]	; (8004074 <HAL_ADC_Start_DMA+0x204>)
 8003f64:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6a:	4a43      	ldr	r2, [pc, #268]	; (8004078 <HAL_ADC_Start_DMA+0x208>)
 8003f6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f72:	4a42      	ldr	r2, [pc, #264]	; (800407c <HAL_ADC_Start_DMA+0x20c>)
 8003f74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7a:	4a41      	ldr	r2, [pc, #260]	; (8004080 <HAL_ADC_Start_DMA+0x210>)
 8003f7c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003f86:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003f96:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689a      	ldr	r2, [r3, #8]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fa6:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	334c      	adds	r3, #76	; 0x4c
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	68ba      	ldr	r2, [r7, #8]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f000 fd02 	bl	80049c0 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f003 031f 	and.w	r3, r3, #31
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d12a      	bne.n	800401e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a2d      	ldr	r2, [pc, #180]	; (8004084 <HAL_ADC_Start_DMA+0x214>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d015      	beq.n	8003ffe <HAL_ADC_Start_DMA+0x18e>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a2c      	ldr	r2, [pc, #176]	; (8004088 <HAL_ADC_Start_DMA+0x218>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d105      	bne.n	8003fe8 <HAL_ADC_Start_DMA+0x178>
 8003fdc:	4b25      	ldr	r3, [pc, #148]	; (8004074 <HAL_ADC_Start_DMA+0x204>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f003 031f 	and.w	r3, r3, #31
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00a      	beq.n	8003ffe <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a27      	ldr	r2, [pc, #156]	; (800408c <HAL_ADC_Start_DMA+0x21c>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d136      	bne.n	8004060 <HAL_ADC_Start_DMA+0x1f0>
 8003ff2:	4b20      	ldr	r3, [pc, #128]	; (8004074 <HAL_ADC_Start_DMA+0x204>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f003 0310 	and.w	r3, r3, #16
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d130      	bne.n	8004060 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d129      	bne.n	8004060 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	689a      	ldr	r2, [r3, #8]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800401a:	609a      	str	r2, [r3, #8]
 800401c:	e020      	b.n	8004060 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a18      	ldr	r2, [pc, #96]	; (8004084 <HAL_ADC_Start_DMA+0x214>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d11b      	bne.n	8004060 <HAL_ADC_Start_DMA+0x1f0>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d114      	bne.n	8004060 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004044:	609a      	str	r2, [r3, #8]
 8004046:	e00b      	b.n	8004060 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404c:	f043 0210 	orr.w	r2, r3, #16
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004058:	f043 0201 	orr.w	r2, r3, #1
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3718      	adds	r7, #24
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	20000010 	.word	0x20000010
 8004070:	431bde83 	.word	0x431bde83
 8004074:	40012300 	.word	0x40012300
 8004078:	08004529 	.word	0x08004529
 800407c:	080045e3 	.word	0x080045e3
 8004080:	080045ff 	.word	0x080045ff
 8004084:	40012000 	.word	0x40012000
 8004088:	40012100 	.word	0x40012100
 800408c:	40012200 	.word	0x40012200

08004090 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80040d6:	2300      	movs	r3, #0
 80040d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d101      	bne.n	80040e8 <HAL_ADC_ConfigChannel+0x1c>
 80040e4:	2302      	movs	r3, #2
 80040e6:	e113      	b.n	8004310 <HAL_ADC_ConfigChannel+0x244>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2b09      	cmp	r3, #9
 80040f6:	d925      	bls.n	8004144 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68d9      	ldr	r1, [r3, #12]
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	b29b      	uxth	r3, r3
 8004104:	461a      	mov	r2, r3
 8004106:	4613      	mov	r3, r2
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	4413      	add	r3, r2
 800410c:	3b1e      	subs	r3, #30
 800410e:	2207      	movs	r2, #7
 8004110:	fa02 f303 	lsl.w	r3, r2, r3
 8004114:	43da      	mvns	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	400a      	ands	r2, r1
 800411c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68d9      	ldr	r1, [r3, #12]
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	689a      	ldr	r2, [r3, #8]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	b29b      	uxth	r3, r3
 800412e:	4618      	mov	r0, r3
 8004130:	4603      	mov	r3, r0
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	4403      	add	r3, r0
 8004136:	3b1e      	subs	r3, #30
 8004138:	409a      	lsls	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	430a      	orrs	r2, r1
 8004140:	60da      	str	r2, [r3, #12]
 8004142:	e022      	b.n	800418a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6919      	ldr	r1, [r3, #16]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	b29b      	uxth	r3, r3
 8004150:	461a      	mov	r2, r3
 8004152:	4613      	mov	r3, r2
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	4413      	add	r3, r2
 8004158:	2207      	movs	r2, #7
 800415a:	fa02 f303 	lsl.w	r3, r2, r3
 800415e:	43da      	mvns	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	400a      	ands	r2, r1
 8004166:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6919      	ldr	r1, [r3, #16]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	689a      	ldr	r2, [r3, #8]
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	b29b      	uxth	r3, r3
 8004178:	4618      	mov	r0, r3
 800417a:	4603      	mov	r3, r0
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	4403      	add	r3, r0
 8004180:	409a      	lsls	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	430a      	orrs	r2, r1
 8004188:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	2b06      	cmp	r3, #6
 8004190:	d824      	bhi.n	80041dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	4613      	mov	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4413      	add	r3, r2
 80041a2:	3b05      	subs	r3, #5
 80041a4:	221f      	movs	r2, #31
 80041a6:	fa02 f303 	lsl.w	r3, r2, r3
 80041aa:	43da      	mvns	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	400a      	ands	r2, r1
 80041b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	b29b      	uxth	r3, r3
 80041c0:	4618      	mov	r0, r3
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	4613      	mov	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	4413      	add	r3, r2
 80041cc:	3b05      	subs	r3, #5
 80041ce:	fa00 f203 	lsl.w	r2, r0, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	635a      	str	r2, [r3, #52]	; 0x34
 80041da:	e04c      	b.n	8004276 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	2b0c      	cmp	r3, #12
 80041e2:	d824      	bhi.n	800422e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	4613      	mov	r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	4413      	add	r3, r2
 80041f4:	3b23      	subs	r3, #35	; 0x23
 80041f6:	221f      	movs	r2, #31
 80041f8:	fa02 f303 	lsl.w	r3, r2, r3
 80041fc:	43da      	mvns	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	400a      	ands	r2, r1
 8004204:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	b29b      	uxth	r3, r3
 8004212:	4618      	mov	r0, r3
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	4613      	mov	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4413      	add	r3, r2
 800421e:	3b23      	subs	r3, #35	; 0x23
 8004220:	fa00 f203 	lsl.w	r2, r0, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	430a      	orrs	r2, r1
 800422a:	631a      	str	r2, [r3, #48]	; 0x30
 800422c:	e023      	b.n	8004276 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	4613      	mov	r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	4413      	add	r3, r2
 800423e:	3b41      	subs	r3, #65	; 0x41
 8004240:	221f      	movs	r2, #31
 8004242:	fa02 f303 	lsl.w	r3, r2, r3
 8004246:	43da      	mvns	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	400a      	ands	r2, r1
 800424e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	b29b      	uxth	r3, r3
 800425c:	4618      	mov	r0, r3
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685a      	ldr	r2, [r3, #4]
 8004262:	4613      	mov	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4413      	add	r3, r2
 8004268:	3b41      	subs	r3, #65	; 0x41
 800426a:	fa00 f203 	lsl.w	r2, r0, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004276:	4b29      	ldr	r3, [pc, #164]	; (800431c <HAL_ADC_ConfigChannel+0x250>)
 8004278:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a28      	ldr	r2, [pc, #160]	; (8004320 <HAL_ADC_ConfigChannel+0x254>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d10f      	bne.n	80042a4 <HAL_ADC_ConfigChannel+0x1d8>
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2b12      	cmp	r3, #18
 800428a:	d10b      	bne.n	80042a4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a1d      	ldr	r2, [pc, #116]	; (8004320 <HAL_ADC_ConfigChannel+0x254>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d12b      	bne.n	8004306 <HAL_ADC_ConfigChannel+0x23a>
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a1c      	ldr	r2, [pc, #112]	; (8004324 <HAL_ADC_ConfigChannel+0x258>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d003      	beq.n	80042c0 <HAL_ADC_ConfigChannel+0x1f4>
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2b11      	cmp	r3, #17
 80042be:	d122      	bne.n	8004306 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a11      	ldr	r2, [pc, #68]	; (8004324 <HAL_ADC_ConfigChannel+0x258>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d111      	bne.n	8004306 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80042e2:	4b11      	ldr	r3, [pc, #68]	; (8004328 <HAL_ADC_ConfigChannel+0x25c>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a11      	ldr	r2, [pc, #68]	; (800432c <HAL_ADC_ConfigChannel+0x260>)
 80042e8:	fba2 2303 	umull	r2, r3, r2, r3
 80042ec:	0c9a      	lsrs	r2, r3, #18
 80042ee:	4613      	mov	r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	4413      	add	r3, r2
 80042f4:	005b      	lsls	r3, r3, #1
 80042f6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80042f8:	e002      	b.n	8004300 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	3b01      	subs	r3, #1
 80042fe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1f9      	bne.n	80042fa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3714      	adds	r7, #20
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr
 800431c:	40012300 	.word	0x40012300
 8004320:	40012000 	.word	0x40012000
 8004324:	10000012 	.word	0x10000012
 8004328:	20000010 	.word	0x20000010
 800432c:	431bde83 	.word	0x431bde83

08004330 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004338:	4b79      	ldr	r3, [pc, #484]	; (8004520 <ADC_Init+0x1f0>)
 800433a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	431a      	orrs	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	685a      	ldr	r2, [r3, #4]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004364:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	6859      	ldr	r1, [r3, #4]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	021a      	lsls	r2, r3, #8
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	430a      	orrs	r2, r1
 8004378:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004388:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	6859      	ldr	r1, [r3, #4]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689a      	ldr	r2, [r3, #8]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	430a      	orrs	r2, r1
 800439a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689a      	ldr	r2, [r3, #8]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6899      	ldr	r1, [r3, #8]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	68da      	ldr	r2, [r3, #12]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	430a      	orrs	r2, r1
 80043bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c2:	4a58      	ldr	r2, [pc, #352]	; (8004524 <ADC_Init+0x1f4>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d022      	beq.n	800440e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689a      	ldr	r2, [r3, #8]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80043d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6899      	ldr	r1, [r3, #8]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80043f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	6899      	ldr	r1, [r3, #8]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	430a      	orrs	r2, r1
 800440a:	609a      	str	r2, [r3, #8]
 800440c:	e00f      	b.n	800442e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	689a      	ldr	r2, [r3, #8]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800441c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	689a      	ldr	r2, [r3, #8]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800442c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 0202 	bic.w	r2, r2, #2
 800443c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	6899      	ldr	r1, [r3, #8]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	7e1b      	ldrb	r3, [r3, #24]
 8004448:	005a      	lsls	r2, r3, #1
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d01b      	beq.n	8004494 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685a      	ldr	r2, [r3, #4]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800446a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800447a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6859      	ldr	r1, [r3, #4]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004486:	3b01      	subs	r3, #1
 8004488:	035a      	lsls	r2, r3, #13
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	430a      	orrs	r2, r1
 8004490:	605a      	str	r2, [r3, #4]
 8004492:	e007      	b.n	80044a4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044a2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80044b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	69db      	ldr	r3, [r3, #28]
 80044be:	3b01      	subs	r3, #1
 80044c0:	051a      	lsls	r2, r3, #20
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	689a      	ldr	r2, [r3, #8]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80044d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	6899      	ldr	r1, [r3, #8]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80044e6:	025a      	lsls	r2, r3, #9
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689a      	ldr	r2, [r3, #8]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	6899      	ldr	r1, [r3, #8]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	029a      	lsls	r2, r3, #10
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	430a      	orrs	r2, r1
 8004512:	609a      	str	r2, [r3, #8]
}
 8004514:	bf00      	nop
 8004516:	3714      	adds	r7, #20
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr
 8004520:	40012300 	.word	0x40012300
 8004524:	0f000001 	.word	0x0f000001

08004528 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004534:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800453e:	2b00      	cmp	r3, #0
 8004540:	d13c      	bne.n	80045bc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004546:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d12b      	bne.n	80045b4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004560:	2b00      	cmp	r3, #0
 8004562:	d127      	bne.n	80045b4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800456e:	2b00      	cmp	r3, #0
 8004570:	d006      	beq.n	8004580 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800457c:	2b00      	cmp	r3, #0
 800457e:	d119      	bne.n	80045b4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	685a      	ldr	r2, [r3, #4]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f022 0220 	bic.w	r2, r2, #32
 800458e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004594:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d105      	bne.n	80045b4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ac:	f043 0201 	orr.w	r2, r3, #1
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f7fe fe6f 	bl	8003298 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80045ba:	e00e      	b.n	80045da <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c0:	f003 0310 	and.w	r3, r3, #16
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d003      	beq.n	80045d0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	f7ff fd75 	bl	80040b8 <HAL_ADC_ErrorCallback>
}
 80045ce:	e004      	b.n	80045da <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	4798      	blx	r3
}
 80045da:	bf00      	nop
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b084      	sub	sp, #16
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ee:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f7ff fd4d 	bl	8004090 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80045f6:	bf00      	nop
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b084      	sub	sp, #16
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2240      	movs	r2, #64	; 0x40
 8004610:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004616:	f043 0204 	orr.w	r2, r3, #4
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f7ff fd4a 	bl	80040b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004624:	bf00      	nop
 8004626:	3710      	adds	r7, #16
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004640:	b480      	push	{r7}
 8004642:	b085      	sub	sp, #20
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f003 0307 	and.w	r3, r3, #7
 800464e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004650:	4b0c      	ldr	r3, [pc, #48]	; (8004684 <__NVIC_SetPriorityGrouping+0x44>)
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004656:	68ba      	ldr	r2, [r7, #8]
 8004658:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800465c:	4013      	ands	r3, r2
 800465e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004668:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800466c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004670:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004672:	4a04      	ldr	r2, [pc, #16]	; (8004684 <__NVIC_SetPriorityGrouping+0x44>)
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	60d3      	str	r3, [r2, #12]
}
 8004678:	bf00      	nop
 800467a:	3714      	adds	r7, #20
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr
 8004684:	e000ed00 	.word	0xe000ed00

08004688 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004688:	b480      	push	{r7}
 800468a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800468c:	4b04      	ldr	r3, [pc, #16]	; (80046a0 <__NVIC_GetPriorityGrouping+0x18>)
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	0a1b      	lsrs	r3, r3, #8
 8004692:	f003 0307 	and.w	r3, r3, #7
}
 8004696:	4618      	mov	r0, r3
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr
 80046a0:	e000ed00 	.word	0xe000ed00

080046a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	4603      	mov	r3, r0
 80046ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	db0b      	blt.n	80046ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046b6:	79fb      	ldrb	r3, [r7, #7]
 80046b8:	f003 021f 	and.w	r2, r3, #31
 80046bc:	4907      	ldr	r1, [pc, #28]	; (80046dc <__NVIC_EnableIRQ+0x38>)
 80046be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046c2:	095b      	lsrs	r3, r3, #5
 80046c4:	2001      	movs	r0, #1
 80046c6:	fa00 f202 	lsl.w	r2, r0, r2
 80046ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80046ce:	bf00      	nop
 80046d0:	370c      	adds	r7, #12
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	e000e100 	.word	0xe000e100

080046e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	4603      	mov	r3, r0
 80046e8:	6039      	str	r1, [r7, #0]
 80046ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	db0a      	blt.n	800470a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	b2da      	uxtb	r2, r3
 80046f8:	490c      	ldr	r1, [pc, #48]	; (800472c <__NVIC_SetPriority+0x4c>)
 80046fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046fe:	0112      	lsls	r2, r2, #4
 8004700:	b2d2      	uxtb	r2, r2
 8004702:	440b      	add	r3, r1
 8004704:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004708:	e00a      	b.n	8004720 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	b2da      	uxtb	r2, r3
 800470e:	4908      	ldr	r1, [pc, #32]	; (8004730 <__NVIC_SetPriority+0x50>)
 8004710:	79fb      	ldrb	r3, [r7, #7]
 8004712:	f003 030f 	and.w	r3, r3, #15
 8004716:	3b04      	subs	r3, #4
 8004718:	0112      	lsls	r2, r2, #4
 800471a:	b2d2      	uxtb	r2, r2
 800471c:	440b      	add	r3, r1
 800471e:	761a      	strb	r2, [r3, #24]
}
 8004720:	bf00      	nop
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr
 800472c:	e000e100 	.word	0xe000e100
 8004730:	e000ed00 	.word	0xe000ed00

08004734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004734:	b480      	push	{r7}
 8004736:	b089      	sub	sp, #36	; 0x24
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f003 0307 	and.w	r3, r3, #7
 8004746:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	f1c3 0307 	rsb	r3, r3, #7
 800474e:	2b04      	cmp	r3, #4
 8004750:	bf28      	it	cs
 8004752:	2304      	movcs	r3, #4
 8004754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	3304      	adds	r3, #4
 800475a:	2b06      	cmp	r3, #6
 800475c:	d902      	bls.n	8004764 <NVIC_EncodePriority+0x30>
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	3b03      	subs	r3, #3
 8004762:	e000      	b.n	8004766 <NVIC_EncodePriority+0x32>
 8004764:	2300      	movs	r3, #0
 8004766:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004768:	f04f 32ff 	mov.w	r2, #4294967295
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	fa02 f303 	lsl.w	r3, r2, r3
 8004772:	43da      	mvns	r2, r3
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	401a      	ands	r2, r3
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800477c:	f04f 31ff 	mov.w	r1, #4294967295
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	fa01 f303 	lsl.w	r3, r1, r3
 8004786:	43d9      	mvns	r1, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800478c:	4313      	orrs	r3, r2
         );
}
 800478e:	4618      	mov	r0, r3
 8004790:	3724      	adds	r7, #36	; 0x24
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
	...

0800479c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	3b01      	subs	r3, #1
 80047a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047ac:	d301      	bcc.n	80047b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047ae:	2301      	movs	r3, #1
 80047b0:	e00f      	b.n	80047d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047b2:	4a0a      	ldr	r2, [pc, #40]	; (80047dc <SysTick_Config+0x40>)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	3b01      	subs	r3, #1
 80047b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047ba:	210f      	movs	r1, #15
 80047bc:	f04f 30ff 	mov.w	r0, #4294967295
 80047c0:	f7ff ff8e 	bl	80046e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047c4:	4b05      	ldr	r3, [pc, #20]	; (80047dc <SysTick_Config+0x40>)
 80047c6:	2200      	movs	r2, #0
 80047c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047ca:	4b04      	ldr	r3, [pc, #16]	; (80047dc <SysTick_Config+0x40>)
 80047cc:	2207      	movs	r2, #7
 80047ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3708      	adds	r7, #8
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	e000e010 	.word	0xe000e010

080047e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f7ff ff29 	bl	8004640 <__NVIC_SetPriorityGrouping>
}
 80047ee:	bf00      	nop
 80047f0:	3708      	adds	r7, #8
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b086      	sub	sp, #24
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	4603      	mov	r3, r0
 80047fe:	60b9      	str	r1, [r7, #8]
 8004800:	607a      	str	r2, [r7, #4]
 8004802:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004804:	2300      	movs	r3, #0
 8004806:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004808:	f7ff ff3e 	bl	8004688 <__NVIC_GetPriorityGrouping>
 800480c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	68b9      	ldr	r1, [r7, #8]
 8004812:	6978      	ldr	r0, [r7, #20]
 8004814:	f7ff ff8e 	bl	8004734 <NVIC_EncodePriority>
 8004818:	4602      	mov	r2, r0
 800481a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800481e:	4611      	mov	r1, r2
 8004820:	4618      	mov	r0, r3
 8004822:	f7ff ff5d 	bl	80046e0 <__NVIC_SetPriority>
}
 8004826:	bf00      	nop
 8004828:	3718      	adds	r7, #24
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b082      	sub	sp, #8
 8004832:	af00      	add	r7, sp, #0
 8004834:	4603      	mov	r3, r0
 8004836:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800483c:	4618      	mov	r0, r3
 800483e:	f7ff ff31 	bl	80046a4 <__NVIC_EnableIRQ>
}
 8004842:	bf00      	nop
 8004844:	3708      	adds	r7, #8
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800484a:	b580      	push	{r7, lr}
 800484c:	b082      	sub	sp, #8
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f7ff ffa2 	bl	800479c <SysTick_Config>
 8004858:	4603      	mov	r3, r0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3708      	adds	r7, #8
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
	...

08004864 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800486c:	2300      	movs	r3, #0
 800486e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004870:	f7ff f97a 	bl	8003b68 <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d101      	bne.n	8004880 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e099      	b.n	80049b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2202      	movs	r2, #2
 8004884:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f022 0201 	bic.w	r2, r2, #1
 800489e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048a0:	e00f      	b.n	80048c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048a2:	f7ff f961 	bl	8003b68 <HAL_GetTick>
 80048a6:	4602      	mov	r2, r0
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	2b05      	cmp	r3, #5
 80048ae:	d908      	bls.n	80048c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2220      	movs	r2, #32
 80048b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2203      	movs	r2, #3
 80048ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e078      	b.n	80049b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1e8      	bne.n	80048a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	4b38      	ldr	r3, [pc, #224]	; (80049bc <HAL_DMA_Init+0x158>)
 80048dc:	4013      	ands	r3, r2
 80048de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004906:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a1b      	ldr	r3, [r3, #32]
 800490c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	4313      	orrs	r3, r2
 8004912:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004918:	2b04      	cmp	r3, #4
 800491a:	d107      	bne.n	800492c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004924:	4313      	orrs	r3, r2
 8004926:	697a      	ldr	r2, [r7, #20]
 8004928:	4313      	orrs	r3, r2
 800492a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	697a      	ldr	r2, [r7, #20]
 8004932:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	f023 0307 	bic.w	r3, r3, #7
 8004942:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	4313      	orrs	r3, r2
 800494c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004952:	2b04      	cmp	r3, #4
 8004954:	d117      	bne.n	8004986 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	4313      	orrs	r3, r2
 800495e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00e      	beq.n	8004986 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 fb01 	bl	8004f70 <DMA_CheckFifoParam>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d008      	beq.n	8004986 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2240      	movs	r2, #64	; 0x40
 8004978:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004982:	2301      	movs	r3, #1
 8004984:	e016      	b.n	80049b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 fab8 	bl	8004f04 <DMA_CalcBaseAndBitshift>
 8004994:	4603      	mov	r3, r0
 8004996:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800499c:	223f      	movs	r2, #63	; 0x3f
 800499e:	409a      	lsls	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3718      	adds	r7, #24
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	f010803f 	.word	0xf010803f

080049c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
 80049cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049ce:	2300      	movs	r3, #0
 80049d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d101      	bne.n	80049e6 <HAL_DMA_Start_IT+0x26>
 80049e2:	2302      	movs	r3, #2
 80049e4:	e040      	b.n	8004a68 <HAL_DMA_Start_IT+0xa8>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d12f      	bne.n	8004a5a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2202      	movs	r2, #2
 80049fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	68b9      	ldr	r1, [r7, #8]
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	f000 fa4a 	bl	8004ea8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a18:	223f      	movs	r2, #63	; 0x3f
 8004a1a:	409a      	lsls	r2, r3
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f042 0216 	orr.w	r2, r2, #22
 8004a2e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d007      	beq.n	8004a48 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f042 0208 	orr.w	r2, r2, #8
 8004a46:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f042 0201 	orr.w	r2, r2, #1
 8004a56:	601a      	str	r2, [r3, #0]
 8004a58:	e005      	b.n	8004a66 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004a62:	2302      	movs	r3, #2
 8004a64:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004a66:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3718      	adds	r7, #24
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a7c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004a7e:	f7ff f873 	bl	8003b68 <HAL_GetTick>
 8004a82:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d008      	beq.n	8004aa2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2280      	movs	r2, #128	; 0x80
 8004a94:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e052      	b.n	8004b48 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f022 0216 	bic.w	r2, r2, #22
 8004ab0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	695a      	ldr	r2, [r3, #20]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ac0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d103      	bne.n	8004ad2 <HAL_DMA_Abort+0x62>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d007      	beq.n	8004ae2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 0208 	bic.w	r2, r2, #8
 8004ae0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f022 0201 	bic.w	r2, r2, #1
 8004af0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004af2:	e013      	b.n	8004b1c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004af4:	f7ff f838 	bl	8003b68 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	2b05      	cmp	r3, #5
 8004b00:	d90c      	bls.n	8004b1c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2220      	movs	r2, #32
 8004b06:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2203      	movs	r2, #3
 8004b0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e015      	b.n	8004b48 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1e4      	bne.n	8004af4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b2e:	223f      	movs	r2, #63	; 0x3f
 8004b30:	409a      	lsls	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d004      	beq.n	8004b6e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2280      	movs	r2, #128	; 0x80
 8004b68:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e00c      	b.n	8004b88 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2205      	movs	r2, #5
 8004b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 0201 	bic.w	r2, r2, #1
 8004b84:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b086      	sub	sp, #24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004ba0:	4b8e      	ldr	r3, [pc, #568]	; (8004ddc <HAL_DMA_IRQHandler+0x248>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a8e      	ldr	r2, [pc, #568]	; (8004de0 <HAL_DMA_IRQHandler+0x24c>)
 8004ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8004baa:	0a9b      	lsrs	r3, r3, #10
 8004bac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bbe:	2208      	movs	r2, #8
 8004bc0:	409a      	lsls	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d01a      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0304 	and.w	r3, r3, #4
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d013      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f022 0204 	bic.w	r2, r2, #4
 8004be6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bec:	2208      	movs	r2, #8
 8004bee:	409a      	lsls	r2, r3
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf8:	f043 0201 	orr.w	r2, r3, #1
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c04:	2201      	movs	r2, #1
 8004c06:	409a      	lsls	r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d012      	beq.n	8004c36 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00b      	beq.n	8004c36 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c22:	2201      	movs	r2, #1
 8004c24:	409a      	lsls	r2, r3
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c2e:	f043 0202 	orr.w	r2, r3, #2
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c3a:	2204      	movs	r2, #4
 8004c3c:	409a      	lsls	r2, r3
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	4013      	ands	r3, r2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d012      	beq.n	8004c6c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00b      	beq.n	8004c6c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c58:	2204      	movs	r2, #4
 8004c5a:	409a      	lsls	r2, r3
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c64:	f043 0204 	orr.w	r2, r3, #4
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c70:	2210      	movs	r2, #16
 8004c72:	409a      	lsls	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	4013      	ands	r3, r2
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d043      	beq.n	8004d04 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0308 	and.w	r3, r3, #8
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d03c      	beq.n	8004d04 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c8e:	2210      	movs	r2, #16
 8004c90:	409a      	lsls	r2, r3
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d018      	beq.n	8004cd6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d108      	bne.n	8004cc4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d024      	beq.n	8004d04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	4798      	blx	r3
 8004cc2:	e01f      	b.n	8004d04 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d01b      	beq.n	8004d04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	4798      	blx	r3
 8004cd4:	e016      	b.n	8004d04 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d107      	bne.n	8004cf4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f022 0208 	bic.w	r2, r2, #8
 8004cf2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d003      	beq.n	8004d04 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d08:	2220      	movs	r2, #32
 8004d0a:	409a      	lsls	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	4013      	ands	r3, r2
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 808f 	beq.w	8004e34 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0310 	and.w	r3, r3, #16
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f000 8087 	beq.w	8004e34 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d2a:	2220      	movs	r2, #32
 8004d2c:	409a      	lsls	r2, r3
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b05      	cmp	r3, #5
 8004d3c:	d136      	bne.n	8004dac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f022 0216 	bic.w	r2, r2, #22
 8004d4c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	695a      	ldr	r2, [r3, #20]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d5c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d103      	bne.n	8004d6e <HAL_DMA_IRQHandler+0x1da>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d007      	beq.n	8004d7e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f022 0208 	bic.w	r2, r2, #8
 8004d7c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d82:	223f      	movs	r2, #63	; 0x3f
 8004d84:	409a      	lsls	r2, r3
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d07e      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	4798      	blx	r3
        }
        return;
 8004daa:	e079      	b.n	8004ea0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d01d      	beq.n	8004df6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d10d      	bne.n	8004de4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d031      	beq.n	8004e34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	4798      	blx	r3
 8004dd8:	e02c      	b.n	8004e34 <HAL_DMA_IRQHandler+0x2a0>
 8004dda:	bf00      	nop
 8004ddc:	20000010 	.word	0x20000010
 8004de0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d023      	beq.n	8004e34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	4798      	blx	r3
 8004df4:	e01e      	b.n	8004e34 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d10f      	bne.n	8004e24 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f022 0210 	bic.w	r2, r2, #16
 8004e12:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d003      	beq.n	8004e34 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d032      	beq.n	8004ea2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d022      	beq.n	8004e8e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2205      	movs	r2, #5
 8004e4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f022 0201 	bic.w	r2, r2, #1
 8004e5e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	3301      	adds	r3, #1
 8004e64:	60bb      	str	r3, [r7, #8]
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d307      	bcc.n	8004e7c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1f2      	bne.n	8004e60 <HAL_DMA_IRQHandler+0x2cc>
 8004e7a:	e000      	b.n	8004e7e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004e7c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d005      	beq.n	8004ea2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	4798      	blx	r3
 8004e9e:	e000      	b.n	8004ea2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004ea0:	bf00      	nop
    }
  }
}
 8004ea2:	3718      	adds	r7, #24
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
 8004eb4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ec4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	2b40      	cmp	r3, #64	; 0x40
 8004ed4:	d108      	bne.n	8004ee8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68ba      	ldr	r2, [r7, #8]
 8004ee4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004ee6:	e007      	b.n	8004ef8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68ba      	ldr	r2, [r7, #8]
 8004eee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	60da      	str	r2, [r3, #12]
}
 8004ef8:	bf00      	nop
 8004efa:	3714      	adds	r7, #20
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	3b10      	subs	r3, #16
 8004f14:	4a14      	ldr	r2, [pc, #80]	; (8004f68 <DMA_CalcBaseAndBitshift+0x64>)
 8004f16:	fba2 2303 	umull	r2, r3, r2, r3
 8004f1a:	091b      	lsrs	r3, r3, #4
 8004f1c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004f1e:	4a13      	ldr	r2, [pc, #76]	; (8004f6c <DMA_CalcBaseAndBitshift+0x68>)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	4413      	add	r3, r2
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	461a      	mov	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2b03      	cmp	r3, #3
 8004f30:	d909      	bls.n	8004f46 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004f3a:	f023 0303 	bic.w	r3, r3, #3
 8004f3e:	1d1a      	adds	r2, r3, #4
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	659a      	str	r2, [r3, #88]	; 0x58
 8004f44:	e007      	b.n	8004f56 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004f4e:	f023 0303 	bic.w	r3, r3, #3
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3714      	adds	r7, #20
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	aaaaaaab 	.word	0xaaaaaaab
 8004f6c:	0800ed74 	.word	0x0800ed74

08004f70 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f80:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d11f      	bne.n	8004fca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	2b03      	cmp	r3, #3
 8004f8e:	d856      	bhi.n	800503e <DMA_CheckFifoParam+0xce>
 8004f90:	a201      	add	r2, pc, #4	; (adr r2, 8004f98 <DMA_CheckFifoParam+0x28>)
 8004f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f96:	bf00      	nop
 8004f98:	08004fa9 	.word	0x08004fa9
 8004f9c:	08004fbb 	.word	0x08004fbb
 8004fa0:	08004fa9 	.word	0x08004fa9
 8004fa4:	0800503f 	.word	0x0800503f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d046      	beq.n	8005042 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fb8:	e043      	b.n	8005042 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fbe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004fc2:	d140      	bne.n	8005046 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fc8:	e03d      	b.n	8005046 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fd2:	d121      	bne.n	8005018 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	2b03      	cmp	r3, #3
 8004fd8:	d837      	bhi.n	800504a <DMA_CheckFifoParam+0xda>
 8004fda:	a201      	add	r2, pc, #4	; (adr r2, 8004fe0 <DMA_CheckFifoParam+0x70>)
 8004fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe0:	08004ff1 	.word	0x08004ff1
 8004fe4:	08004ff7 	.word	0x08004ff7
 8004fe8:	08004ff1 	.word	0x08004ff1
 8004fec:	08005009 	.word	0x08005009
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ff4:	e030      	b.n	8005058 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d025      	beq.n	800504e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005006:	e022      	b.n	800504e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005010:	d11f      	bne.n	8005052 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005016:	e01c      	b.n	8005052 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	2b02      	cmp	r3, #2
 800501c:	d903      	bls.n	8005026 <DMA_CheckFifoParam+0xb6>
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	2b03      	cmp	r3, #3
 8005022:	d003      	beq.n	800502c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005024:	e018      	b.n	8005058 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	73fb      	strb	r3, [r7, #15]
      break;
 800502a:	e015      	b.n	8005058 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005030:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00e      	beq.n	8005056 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	73fb      	strb	r3, [r7, #15]
      break;
 800503c:	e00b      	b.n	8005056 <DMA_CheckFifoParam+0xe6>
      break;
 800503e:	bf00      	nop
 8005040:	e00a      	b.n	8005058 <DMA_CheckFifoParam+0xe8>
      break;
 8005042:	bf00      	nop
 8005044:	e008      	b.n	8005058 <DMA_CheckFifoParam+0xe8>
      break;
 8005046:	bf00      	nop
 8005048:	e006      	b.n	8005058 <DMA_CheckFifoParam+0xe8>
      break;
 800504a:	bf00      	nop
 800504c:	e004      	b.n	8005058 <DMA_CheckFifoParam+0xe8>
      break;
 800504e:	bf00      	nop
 8005050:	e002      	b.n	8005058 <DMA_CheckFifoParam+0xe8>
      break;   
 8005052:	bf00      	nop
 8005054:	e000      	b.n	8005058 <DMA_CheckFifoParam+0xe8>
      break;
 8005056:	bf00      	nop
    }
  } 
  
  return status; 
 8005058:	7bfb      	ldrb	r3, [r7, #15]
}
 800505a:	4618      	mov	r0, r3
 800505c:	3714      	adds	r7, #20
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop

08005068 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e06c      	b.n	8005154 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005080:	2b00      	cmp	r3, #0
 8005082:	d106      	bne.n	8005092 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2223      	movs	r2, #35	; 0x23
 8005088:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f7fd fd2f 	bl	8002af0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005092:	2300      	movs	r3, #0
 8005094:	60bb      	str	r3, [r7, #8]
 8005096:	4b31      	ldr	r3, [pc, #196]	; (800515c <HAL_ETH_Init+0xf4>)
 8005098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800509a:	4a30      	ldr	r2, [pc, #192]	; (800515c <HAL_ETH_Init+0xf4>)
 800509c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050a0:	6453      	str	r3, [r2, #68]	; 0x44
 80050a2:	4b2e      	ldr	r3, [pc, #184]	; (800515c <HAL_ETH_Init+0xf4>)
 80050a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050aa:	60bb      	str	r3, [r7, #8]
 80050ac:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80050ae:	4b2c      	ldr	r3, [pc, #176]	; (8005160 <HAL_ETH_Init+0xf8>)
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	4a2b      	ldr	r2, [pc, #172]	; (8005160 <HAL_ETH_Init+0xf8>)
 80050b4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80050b8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80050ba:	4b29      	ldr	r3, [pc, #164]	; (8005160 <HAL_ETH_Init+0xf8>)
 80050bc:	685a      	ldr	r2, [r3, #4]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	4927      	ldr	r1, [pc, #156]	; (8005160 <HAL_ETH_Init+0xf8>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80050c8:	4b25      	ldr	r3, [pc, #148]	; (8005160 <HAL_ETH_Init+0xf8>)
 80050ca:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	6812      	ldr	r2, [r2, #0]
 80050da:	f043 0301 	orr.w	r3, r3, #1
 80050de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80050e2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050e4:	f7fe fd40 	bl	8003b68 <HAL_GetTick>
 80050e8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80050ea:	e011      	b.n	8005110 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80050ec:	f7fe fd3c 	bl	8003b68 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80050fa:	d909      	bls.n	8005110 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2204      	movs	r2, #4
 8005100:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	22e0      	movs	r2, #224	; 0xe0
 8005108:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e021      	b.n	8005154 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1e4      	bne.n	80050ec <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f958 	bl	80053d8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 f9ff 	bl	800552c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 fa55 	bl	80055de <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	461a      	mov	r2, r3
 800513a:	2100      	movs	r1, #0
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 f9bd 	bl	80054bc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2210      	movs	r2, #16
 800514e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3710      	adds	r7, #16
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	40023800 	.word	0x40023800
 8005160:	40013800 	.word	0x40013800

08005164 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	4b51      	ldr	r3, [pc, #324]	; (80052c0 <ETH_SetMACConfig+0x15c>)
 800517a:	4013      	ands	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	7c1b      	ldrb	r3, [r3, #16]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d102      	bne.n	800518c <ETH_SetMACConfig+0x28>
 8005186:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800518a:	e000      	b.n	800518e <ETH_SetMACConfig+0x2a>
 800518c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	7c5b      	ldrb	r3, [r3, #17]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d102      	bne.n	800519c <ETH_SetMACConfig+0x38>
 8005196:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800519a:	e000      	b.n	800519e <ETH_SetMACConfig+0x3a>
 800519c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800519e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80051a4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	7fdb      	ldrb	r3, [r3, #31]
 80051aa:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80051ac:	431a      	orrs	r2, r3
                        macconf->Speed |
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80051b2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80051b4:	683a      	ldr	r2, [r7, #0]
 80051b6:	7f92      	ldrb	r2, [r2, #30]
 80051b8:	2a00      	cmp	r2, #0
 80051ba:	d102      	bne.n	80051c2 <ETH_SetMACConfig+0x5e>
 80051bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80051c0:	e000      	b.n	80051c4 <ETH_SetMACConfig+0x60>
 80051c2:	2200      	movs	r2, #0
                        macconf->Speed |
 80051c4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	7f1b      	ldrb	r3, [r3, #28]
 80051ca:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80051cc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80051d2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	791b      	ldrb	r3, [r3, #4]
 80051d8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80051da:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	f892 2020 	ldrb.w	r2, [r2, #32]
 80051e2:	2a00      	cmp	r2, #0
 80051e4:	d102      	bne.n	80051ec <ETH_SetMACConfig+0x88>
 80051e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051ea:	e000      	b.n	80051ee <ETH_SetMACConfig+0x8a>
 80051ec:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80051ee:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	7bdb      	ldrb	r3, [r3, #15]
 80051f4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80051f6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80051fc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005204:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8005206:	4313      	orrs	r3, r2
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	4313      	orrs	r3, r2
 800520c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800521e:	2001      	movs	r0, #1
 8005220:	f7fe fcae 	bl	8003b80 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	f64f 7341 	movw	r3, #65345	; 0xff41
 800523a:	4013      	ands	r3, r2
 800523c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005242:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8005244:	683a      	ldr	r2, [r7, #0]
 8005246:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800524a:	2a00      	cmp	r2, #0
 800524c:	d101      	bne.n	8005252 <ETH_SetMACConfig+0xee>
 800524e:	2280      	movs	r2, #128	; 0x80
 8005250:	e000      	b.n	8005254 <ETH_SetMACConfig+0xf0>
 8005252:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005254:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800525a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800525c:	683a      	ldr	r2, [r7, #0]
 800525e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8005262:	2a01      	cmp	r2, #1
 8005264:	d101      	bne.n	800526a <ETH_SetMACConfig+0x106>
 8005266:	2208      	movs	r2, #8
 8005268:	e000      	b.n	800526c <ETH_SetMACConfig+0x108>
 800526a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800526c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800526e:	683a      	ldr	r2, [r7, #0]
 8005270:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8005274:	2a01      	cmp	r2, #1
 8005276:	d101      	bne.n	800527c <ETH_SetMACConfig+0x118>
 8005278:	2204      	movs	r2, #4
 800527a:	e000      	b.n	800527e <ETH_SetMACConfig+0x11a>
 800527c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800527e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8005280:	683a      	ldr	r2, [r7, #0]
 8005282:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8005286:	2a01      	cmp	r2, #1
 8005288:	d101      	bne.n	800528e <ETH_SetMACConfig+0x12a>
 800528a:	2202      	movs	r2, #2
 800528c:	e000      	b.n	8005290 <ETH_SetMACConfig+0x12c>
 800528e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005290:	4313      	orrs	r3, r2
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	4313      	orrs	r3, r2
 8005296:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80052a8:	2001      	movs	r0, #1
 80052aa:	f7fe fc69 	bl	8003b80 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	619a      	str	r2, [r3, #24]
}
 80052b6:	bf00      	nop
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	ff20810f 	.word	0xff20810f

080052c4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	4b3d      	ldr	r3, [pc, #244]	; (80053d4 <ETH_SetDMAConfig+0x110>)
 80052de:	4013      	ands	r3, r2
 80052e0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	7b1b      	ldrb	r3, [r3, #12]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d102      	bne.n	80052f0 <ETH_SetDMAConfig+0x2c>
 80052ea:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80052ee:	e000      	b.n	80052f2 <ETH_SetDMAConfig+0x2e>
 80052f0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	7b5b      	ldrb	r3, [r3, #13]
 80052f6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80052f8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80052fa:	683a      	ldr	r2, [r7, #0]
 80052fc:	7f52      	ldrb	r2, [r2, #29]
 80052fe:	2a00      	cmp	r2, #0
 8005300:	d102      	bne.n	8005308 <ETH_SetDMAConfig+0x44>
 8005302:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005306:	e000      	b.n	800530a <ETH_SetDMAConfig+0x46>
 8005308:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800530a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	7b9b      	ldrb	r3, [r3, #14]
 8005310:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8005312:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005318:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	7f1b      	ldrb	r3, [r3, #28]
 800531e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8005320:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	7f9b      	ldrb	r3, [r3, #30]
 8005326:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8005328:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800532e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005336:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005338:	4313      	orrs	r3, r2
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	4313      	orrs	r3, r2
 800533e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005348:	461a      	mov	r2, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800535a:	2001      	movs	r0, #1
 800535c:	f7fe fc10 	bl	8003b80 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005368:	461a      	mov	r2, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	791b      	ldrb	r3, [r3, #4]
 8005372:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005378:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800537e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005384:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800538c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800538e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005394:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8005396:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800539c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	6812      	ldr	r2, [r2, #0]
 80053a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80053a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80053aa:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80053b8:	2001      	movs	r0, #1
 80053ba:	f7fe fbe1 	bl	8003b80 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053c6:	461a      	mov	r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6013      	str	r3, [r2, #0]
}
 80053cc:	bf00      	nop
 80053ce:	3710      	adds	r7, #16
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	f8de3f23 	.word	0xf8de3f23

080053d8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b0a6      	sub	sp, #152	; 0x98
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80053e0:	2301      	movs	r3, #1
 80053e2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80053e6:	2301      	movs	r3, #1
 80053e8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80053ec:	2300      	movs	r3, #0
 80053ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80053f0:	2300      	movs	r3, #0
 80053f2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80053f6:	2301      	movs	r3, #1
 80053f8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80053fc:	2300      	movs	r3, #0
 80053fe:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8005402:	2301      	movs	r3, #1
 8005404:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8005408:	2300      	movs	r3, #0
 800540a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800540e:	2300      	movs	r3, #0
 8005410:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005414:	2300      	movs	r3, #0
 8005416:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8005418:	2300      	movs	r3, #0
 800541a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800541e:	2300      	movs	r3, #0
 8005420:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8005422:	2300      	movs	r3, #0
 8005424:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8005428:	2300      	movs	r3, #0
 800542a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800542e:	2300      	movs	r3, #0
 8005430:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005434:	2300      	movs	r3, #0
 8005436:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800543a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800543e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005440:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005444:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005446:	2300      	movs	r3, #0
 8005448:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800544c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005450:	4619      	mov	r1, r3
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f7ff fe86 	bl	8005164 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8005458:	2301      	movs	r3, #1
 800545a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800545c:	2301      	movs	r3, #1
 800545e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8005460:	2301      	movs	r3, #1
 8005462:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8005466:	2301      	movs	r3, #1
 8005468:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800546a:	2300      	movs	r3, #0
 800546c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800546e:	2300      	movs	r3, #0
 8005470:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8005474:	2300      	movs	r3, #0
 8005476:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800547a:	2300      	movs	r3, #0
 800547c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800547e:	2301      	movs	r3, #1
 8005480:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005484:	2301      	movs	r3, #1
 8005486:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005488:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800548c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800548e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005492:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005494:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005498:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800549a:	2301      	movs	r3, #1
 800549c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80054a0:	2300      	movs	r3, #0
 80054a2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80054a4:	2300      	movs	r3, #0
 80054a6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80054a8:	f107 0308 	add.w	r3, r7, #8
 80054ac:	4619      	mov	r1, r3
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f7ff ff08 	bl	80052c4 <ETH_SetDMAConfig>
}
 80054b4:	bf00      	nop
 80054b6:	3798      	adds	r7, #152	; 0x98
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80054bc:	b480      	push	{r7}
 80054be:	b087      	sub	sp, #28
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	3305      	adds	r3, #5
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	021b      	lsls	r3, r3, #8
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	3204      	adds	r2, #4
 80054d4:	7812      	ldrb	r2, [r2, #0]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80054da:	68ba      	ldr	r2, [r7, #8]
 80054dc:	4b11      	ldr	r3, [pc, #68]	; (8005524 <ETH_MACAddressConfig+0x68>)
 80054de:	4413      	add	r3, r2
 80054e0:	461a      	mov	r2, r3
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	3303      	adds	r3, #3
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	061a      	lsls	r2, r3, #24
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	3302      	adds	r3, #2
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	041b      	lsls	r3, r3, #16
 80054f6:	431a      	orrs	r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	3301      	adds	r3, #1
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	021b      	lsls	r3, r3, #8
 8005500:	4313      	orrs	r3, r2
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	7812      	ldrb	r2, [r2, #0]
 8005506:	4313      	orrs	r3, r2
 8005508:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	4b06      	ldr	r3, [pc, #24]	; (8005528 <ETH_MACAddressConfig+0x6c>)
 800550e:	4413      	add	r3, r2
 8005510:	461a      	mov	r2, r3
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	6013      	str	r3, [r2, #0]
}
 8005516:	bf00      	nop
 8005518:	371c      	adds	r7, #28
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	40028040 	.word	0x40028040
 8005528:	40028044 	.word	0x40028044

0800552c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005534:	2300      	movs	r3, #0
 8005536:	60fb      	str	r3, [r7, #12]
 8005538:	e03e      	b.n	80055b8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	68d9      	ldr	r1, [r3, #12]
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	4613      	mov	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4413      	add	r3, r2
 8005546:	00db      	lsls	r3, r3, #3
 8005548:	440b      	add	r3, r1
 800554a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	2200      	movs	r2, #0
 8005550:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	2200      	movs	r2, #0
 8005556:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	2200      	movs	r2, #0
 800555c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	2200      	movs	r2, #0
 8005562:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005564:	68b9      	ldr	r1, [r7, #8]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	3206      	adds	r2, #6
 800556c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2b02      	cmp	r3, #2
 8005580:	d80c      	bhi.n	800559c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	68d9      	ldr	r1, [r3, #12]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	1c5a      	adds	r2, r3, #1
 800558a:	4613      	mov	r3, r2
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	4413      	add	r3, r2
 8005590:	00db      	lsls	r3, r3, #3
 8005592:	440b      	add	r3, r1
 8005594:	461a      	mov	r2, r3
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	60da      	str	r2, [r3, #12]
 800559a:	e004      	b.n	80055a6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	461a      	mov	r2, r3
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	3301      	adds	r3, #1
 80055b6:	60fb      	str	r3, [r7, #12]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2b03      	cmp	r3, #3
 80055bc:	d9bd      	bls.n	800553a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	68da      	ldr	r2, [r3, #12]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055d0:	611a      	str	r2, [r3, #16]
}
 80055d2:	bf00      	nop
 80055d4:	3714      	adds	r7, #20
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr

080055de <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80055de:	b480      	push	{r7}
 80055e0:	b085      	sub	sp, #20
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80055e6:	2300      	movs	r3, #0
 80055e8:	60fb      	str	r3, [r7, #12]
 80055ea:	e046      	b.n	800567a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6919      	ldr	r1, [r3, #16]
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	4613      	mov	r3, r2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	4413      	add	r3, r2
 80055f8:	00db      	lsls	r3, r3, #3
 80055fa:	440b      	add	r3, r1
 80055fc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	2200      	movs	r2, #0
 8005602:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	2200      	movs	r2, #0
 8005608:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	2200      	movs	r2, #0
 800560e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	2200      	movs	r2, #0
 8005614:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	2200      	movs	r2, #0
 800561a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	2200      	movs	r2, #0
 8005620:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005628:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8005630:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800563e:	68b9      	ldr	r1, [r7, #8]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	3212      	adds	r2, #18
 8005646:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2b02      	cmp	r3, #2
 800564e:	d80c      	bhi.n	800566a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6919      	ldr	r1, [r3, #16]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	1c5a      	adds	r2, r3, #1
 8005658:	4613      	mov	r3, r2
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	4413      	add	r3, r2
 800565e:	00db      	lsls	r3, r3, #3
 8005660:	440b      	add	r3, r1
 8005662:	461a      	mov	r2, r3
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	60da      	str	r2, [r3, #12]
 8005668:	e004      	b.n	8005674 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	461a      	mov	r2, r3
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	3301      	adds	r3, #1
 8005678:	60fb      	str	r3, [r7, #12]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2b03      	cmp	r3, #3
 800567e:	d9b5      	bls.n	80055ec <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	691a      	ldr	r2, [r3, #16]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056aa:	60da      	str	r2, [r3, #12]
}
 80056ac:	bf00      	nop
 80056ae:	3714      	adds	r7, #20
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b089      	sub	sp, #36	; 0x24
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80056c2:	2300      	movs	r3, #0
 80056c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80056c6:	2300      	movs	r3, #0
 80056c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80056ca:	2300      	movs	r3, #0
 80056cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80056ce:	2300      	movs	r3, #0
 80056d0:	61fb      	str	r3, [r7, #28]
 80056d2:	e177      	b.n	80059c4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80056d4:	2201      	movs	r2, #1
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	fa02 f303 	lsl.w	r3, r2, r3
 80056dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	4013      	ands	r3, r2
 80056e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80056e8:	693a      	ldr	r2, [r7, #16]
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	f040 8166 	bne.w	80059be <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	f003 0303 	and.w	r3, r3, #3
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d005      	beq.n	800570a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005706:	2b02      	cmp	r3, #2
 8005708:	d130      	bne.n	800576c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	005b      	lsls	r3, r3, #1
 8005714:	2203      	movs	r2, #3
 8005716:	fa02 f303 	lsl.w	r3, r2, r3
 800571a:	43db      	mvns	r3, r3
 800571c:	69ba      	ldr	r2, [r7, #24]
 800571e:	4013      	ands	r3, r2
 8005720:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	68da      	ldr	r2, [r3, #12]
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	005b      	lsls	r3, r3, #1
 800572a:	fa02 f303 	lsl.w	r3, r2, r3
 800572e:	69ba      	ldr	r2, [r7, #24]
 8005730:	4313      	orrs	r3, r2
 8005732:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	69ba      	ldr	r2, [r7, #24]
 8005738:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005740:	2201      	movs	r2, #1
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	fa02 f303 	lsl.w	r3, r2, r3
 8005748:	43db      	mvns	r3, r3
 800574a:	69ba      	ldr	r2, [r7, #24]
 800574c:	4013      	ands	r3, r2
 800574e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	091b      	lsrs	r3, r3, #4
 8005756:	f003 0201 	and.w	r2, r3, #1
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	fa02 f303 	lsl.w	r3, r2, r3
 8005760:	69ba      	ldr	r2, [r7, #24]
 8005762:	4313      	orrs	r3, r2
 8005764:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	69ba      	ldr	r2, [r7, #24]
 800576a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	f003 0303 	and.w	r3, r3, #3
 8005774:	2b03      	cmp	r3, #3
 8005776:	d017      	beq.n	80057a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	005b      	lsls	r3, r3, #1
 8005782:	2203      	movs	r2, #3
 8005784:	fa02 f303 	lsl.w	r3, r2, r3
 8005788:	43db      	mvns	r3, r3
 800578a:	69ba      	ldr	r2, [r7, #24]
 800578c:	4013      	ands	r3, r2
 800578e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	689a      	ldr	r2, [r3, #8]
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	005b      	lsls	r3, r3, #1
 8005798:	fa02 f303 	lsl.w	r3, r2, r3
 800579c:	69ba      	ldr	r2, [r7, #24]
 800579e:	4313      	orrs	r3, r2
 80057a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	69ba      	ldr	r2, [r7, #24]
 80057a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	f003 0303 	and.w	r3, r3, #3
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d123      	bne.n	80057fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	08da      	lsrs	r2, r3, #3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	3208      	adds	r2, #8
 80057bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	f003 0307 	and.w	r3, r3, #7
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	220f      	movs	r2, #15
 80057cc:	fa02 f303 	lsl.w	r3, r2, r3
 80057d0:	43db      	mvns	r3, r3
 80057d2:	69ba      	ldr	r2, [r7, #24]
 80057d4:	4013      	ands	r3, r2
 80057d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	691a      	ldr	r2, [r3, #16]
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	f003 0307 	and.w	r3, r3, #7
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	fa02 f303 	lsl.w	r3, r2, r3
 80057e8:	69ba      	ldr	r2, [r7, #24]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	08da      	lsrs	r2, r3, #3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	3208      	adds	r2, #8
 80057f6:	69b9      	ldr	r1, [r7, #24]
 80057f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	005b      	lsls	r3, r3, #1
 8005806:	2203      	movs	r2, #3
 8005808:	fa02 f303 	lsl.w	r3, r2, r3
 800580c:	43db      	mvns	r3, r3
 800580e:	69ba      	ldr	r2, [r7, #24]
 8005810:	4013      	ands	r3, r2
 8005812:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f003 0203 	and.w	r2, r3, #3
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	005b      	lsls	r3, r3, #1
 8005820:	fa02 f303 	lsl.w	r3, r2, r3
 8005824:	69ba      	ldr	r2, [r7, #24]
 8005826:	4313      	orrs	r3, r2
 8005828:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005838:	2b00      	cmp	r3, #0
 800583a:	f000 80c0 	beq.w	80059be <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800583e:	2300      	movs	r3, #0
 8005840:	60fb      	str	r3, [r7, #12]
 8005842:	4b66      	ldr	r3, [pc, #408]	; (80059dc <HAL_GPIO_Init+0x324>)
 8005844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005846:	4a65      	ldr	r2, [pc, #404]	; (80059dc <HAL_GPIO_Init+0x324>)
 8005848:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800584c:	6453      	str	r3, [r2, #68]	; 0x44
 800584e:	4b63      	ldr	r3, [pc, #396]	; (80059dc <HAL_GPIO_Init+0x324>)
 8005850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005856:	60fb      	str	r3, [r7, #12]
 8005858:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800585a:	4a61      	ldr	r2, [pc, #388]	; (80059e0 <HAL_GPIO_Init+0x328>)
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	089b      	lsrs	r3, r3, #2
 8005860:	3302      	adds	r3, #2
 8005862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005866:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	f003 0303 	and.w	r3, r3, #3
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	220f      	movs	r2, #15
 8005872:	fa02 f303 	lsl.w	r3, r2, r3
 8005876:	43db      	mvns	r3, r3
 8005878:	69ba      	ldr	r2, [r7, #24]
 800587a:	4013      	ands	r3, r2
 800587c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a58      	ldr	r2, [pc, #352]	; (80059e4 <HAL_GPIO_Init+0x32c>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d037      	beq.n	80058f6 <HAL_GPIO_Init+0x23e>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a57      	ldr	r2, [pc, #348]	; (80059e8 <HAL_GPIO_Init+0x330>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d031      	beq.n	80058f2 <HAL_GPIO_Init+0x23a>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a56      	ldr	r2, [pc, #344]	; (80059ec <HAL_GPIO_Init+0x334>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d02b      	beq.n	80058ee <HAL_GPIO_Init+0x236>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a55      	ldr	r2, [pc, #340]	; (80059f0 <HAL_GPIO_Init+0x338>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d025      	beq.n	80058ea <HAL_GPIO_Init+0x232>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a54      	ldr	r2, [pc, #336]	; (80059f4 <HAL_GPIO_Init+0x33c>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d01f      	beq.n	80058e6 <HAL_GPIO_Init+0x22e>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a53      	ldr	r2, [pc, #332]	; (80059f8 <HAL_GPIO_Init+0x340>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d019      	beq.n	80058e2 <HAL_GPIO_Init+0x22a>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a52      	ldr	r2, [pc, #328]	; (80059fc <HAL_GPIO_Init+0x344>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d013      	beq.n	80058de <HAL_GPIO_Init+0x226>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a51      	ldr	r2, [pc, #324]	; (8005a00 <HAL_GPIO_Init+0x348>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d00d      	beq.n	80058da <HAL_GPIO_Init+0x222>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a50      	ldr	r2, [pc, #320]	; (8005a04 <HAL_GPIO_Init+0x34c>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d007      	beq.n	80058d6 <HAL_GPIO_Init+0x21e>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a4f      	ldr	r2, [pc, #316]	; (8005a08 <HAL_GPIO_Init+0x350>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d101      	bne.n	80058d2 <HAL_GPIO_Init+0x21a>
 80058ce:	2309      	movs	r3, #9
 80058d0:	e012      	b.n	80058f8 <HAL_GPIO_Init+0x240>
 80058d2:	230a      	movs	r3, #10
 80058d4:	e010      	b.n	80058f8 <HAL_GPIO_Init+0x240>
 80058d6:	2308      	movs	r3, #8
 80058d8:	e00e      	b.n	80058f8 <HAL_GPIO_Init+0x240>
 80058da:	2307      	movs	r3, #7
 80058dc:	e00c      	b.n	80058f8 <HAL_GPIO_Init+0x240>
 80058de:	2306      	movs	r3, #6
 80058e0:	e00a      	b.n	80058f8 <HAL_GPIO_Init+0x240>
 80058e2:	2305      	movs	r3, #5
 80058e4:	e008      	b.n	80058f8 <HAL_GPIO_Init+0x240>
 80058e6:	2304      	movs	r3, #4
 80058e8:	e006      	b.n	80058f8 <HAL_GPIO_Init+0x240>
 80058ea:	2303      	movs	r3, #3
 80058ec:	e004      	b.n	80058f8 <HAL_GPIO_Init+0x240>
 80058ee:	2302      	movs	r3, #2
 80058f0:	e002      	b.n	80058f8 <HAL_GPIO_Init+0x240>
 80058f2:	2301      	movs	r3, #1
 80058f4:	e000      	b.n	80058f8 <HAL_GPIO_Init+0x240>
 80058f6:	2300      	movs	r3, #0
 80058f8:	69fa      	ldr	r2, [r7, #28]
 80058fa:	f002 0203 	and.w	r2, r2, #3
 80058fe:	0092      	lsls	r2, r2, #2
 8005900:	4093      	lsls	r3, r2
 8005902:	69ba      	ldr	r2, [r7, #24]
 8005904:	4313      	orrs	r3, r2
 8005906:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005908:	4935      	ldr	r1, [pc, #212]	; (80059e0 <HAL_GPIO_Init+0x328>)
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	089b      	lsrs	r3, r3, #2
 800590e:	3302      	adds	r3, #2
 8005910:	69ba      	ldr	r2, [r7, #24]
 8005912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005916:	4b3d      	ldr	r3, [pc, #244]	; (8005a0c <HAL_GPIO_Init+0x354>)
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	43db      	mvns	r3, r3
 8005920:	69ba      	ldr	r2, [r7, #24]
 8005922:	4013      	ands	r3, r2
 8005924:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800592e:	2b00      	cmp	r3, #0
 8005930:	d003      	beq.n	800593a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005932:	69ba      	ldr	r2, [r7, #24]
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	4313      	orrs	r3, r2
 8005938:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800593a:	4a34      	ldr	r2, [pc, #208]	; (8005a0c <HAL_GPIO_Init+0x354>)
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005940:	4b32      	ldr	r3, [pc, #200]	; (8005a0c <HAL_GPIO_Init+0x354>)
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	43db      	mvns	r3, r3
 800594a:	69ba      	ldr	r2, [r7, #24]
 800594c:	4013      	ands	r3, r2
 800594e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005958:	2b00      	cmp	r3, #0
 800595a:	d003      	beq.n	8005964 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	4313      	orrs	r3, r2
 8005962:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005964:	4a29      	ldr	r2, [pc, #164]	; (8005a0c <HAL_GPIO_Init+0x354>)
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800596a:	4b28      	ldr	r3, [pc, #160]	; (8005a0c <HAL_GPIO_Init+0x354>)
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	43db      	mvns	r3, r3
 8005974:	69ba      	ldr	r2, [r7, #24]
 8005976:	4013      	ands	r3, r2
 8005978:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d003      	beq.n	800598e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005986:	69ba      	ldr	r2, [r7, #24]
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	4313      	orrs	r3, r2
 800598c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800598e:	4a1f      	ldr	r2, [pc, #124]	; (8005a0c <HAL_GPIO_Init+0x354>)
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005994:	4b1d      	ldr	r3, [pc, #116]	; (8005a0c <HAL_GPIO_Init+0x354>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	43db      	mvns	r3, r3
 800599e:	69ba      	ldr	r2, [r7, #24]
 80059a0:	4013      	ands	r3, r2
 80059a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d003      	beq.n	80059b8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80059b0:	69ba      	ldr	r2, [r7, #24]
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80059b8:	4a14      	ldr	r2, [pc, #80]	; (8005a0c <HAL_GPIO_Init+0x354>)
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	3301      	adds	r3, #1
 80059c2:	61fb      	str	r3, [r7, #28]
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	2b0f      	cmp	r3, #15
 80059c8:	f67f ae84 	bls.w	80056d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80059cc:	bf00      	nop
 80059ce:	bf00      	nop
 80059d0:	3724      	adds	r7, #36	; 0x24
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	40023800 	.word	0x40023800
 80059e0:	40013800 	.word	0x40013800
 80059e4:	40020000 	.word	0x40020000
 80059e8:	40020400 	.word	0x40020400
 80059ec:	40020800 	.word	0x40020800
 80059f0:	40020c00 	.word	0x40020c00
 80059f4:	40021000 	.word	0x40021000
 80059f8:	40021400 	.word	0x40021400
 80059fc:	40021800 	.word	0x40021800
 8005a00:	40021c00 	.word	0x40021c00
 8005a04:	40022000 	.word	0x40022000
 8005a08:	40022400 	.word	0x40022400
 8005a0c:	40013c00 	.word	0x40013c00

08005a10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	460b      	mov	r3, r1
 8005a1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	691a      	ldr	r2, [r3, #16]
 8005a20:	887b      	ldrh	r3, [r7, #2]
 8005a22:	4013      	ands	r3, r2
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d002      	beq.n	8005a2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	73fb      	strb	r3, [r7, #15]
 8005a2c:	e001      	b.n	8005a32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3714      	adds	r7, #20
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	460b      	mov	r3, r1
 8005a4a:	807b      	strh	r3, [r7, #2]
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a50:	787b      	ldrb	r3, [r7, #1]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d003      	beq.n	8005a5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a56:	887a      	ldrh	r2, [r7, #2]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005a5c:	e003      	b.n	8005a66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005a5e:	887b      	ldrh	r3, [r7, #2]
 8005a60:	041a      	lsls	r2, r3, #16
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	619a      	str	r2, [r3, #24]
}
 8005a66:	bf00      	nop
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr

08005a72 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b086      	sub	sp, #24
 8005a76:	af02      	add	r7, sp, #8
 8005a78:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d101      	bne.n	8005a84 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e101      	b.n	8005c88 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d106      	bne.n	8005aa4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7fd fb9e 	bl	80031e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2203      	movs	r2, #3
 8005aa8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ab2:	d102      	bne.n	8005aba <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f003 fac6 	bl	8009050 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6818      	ldr	r0, [r3, #0]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	7c1a      	ldrb	r2, [r3, #16]
 8005acc:	f88d 2000 	strb.w	r2, [sp]
 8005ad0:	3304      	adds	r3, #4
 8005ad2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ad4:	f003 fa58 	bl	8008f88 <USB_CoreInit>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d005      	beq.n	8005aea <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2202      	movs	r2, #2
 8005ae2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e0ce      	b.n	8005c88 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2100      	movs	r1, #0
 8005af0:	4618      	mov	r0, r3
 8005af2:	f003 fabe 	bl	8009072 <USB_SetCurrentMode>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d005      	beq.n	8005b08 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2202      	movs	r2, #2
 8005b00:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e0bf      	b.n	8005c88 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b08:	2300      	movs	r3, #0
 8005b0a:	73fb      	strb	r3, [r7, #15]
 8005b0c:	e04a      	b.n	8005ba4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005b0e:	7bfa      	ldrb	r2, [r7, #15]
 8005b10:	6879      	ldr	r1, [r7, #4]
 8005b12:	4613      	mov	r3, r2
 8005b14:	00db      	lsls	r3, r3, #3
 8005b16:	4413      	add	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	440b      	add	r3, r1
 8005b1c:	3315      	adds	r3, #21
 8005b1e:	2201      	movs	r2, #1
 8005b20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005b22:	7bfa      	ldrb	r2, [r7, #15]
 8005b24:	6879      	ldr	r1, [r7, #4]
 8005b26:	4613      	mov	r3, r2
 8005b28:	00db      	lsls	r3, r3, #3
 8005b2a:	4413      	add	r3, r2
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	440b      	add	r3, r1
 8005b30:	3314      	adds	r3, #20
 8005b32:	7bfa      	ldrb	r2, [r7, #15]
 8005b34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005b36:	7bfa      	ldrb	r2, [r7, #15]
 8005b38:	7bfb      	ldrb	r3, [r7, #15]
 8005b3a:	b298      	uxth	r0, r3
 8005b3c:	6879      	ldr	r1, [r7, #4]
 8005b3e:	4613      	mov	r3, r2
 8005b40:	00db      	lsls	r3, r3, #3
 8005b42:	4413      	add	r3, r2
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	440b      	add	r3, r1
 8005b48:	332e      	adds	r3, #46	; 0x2e
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005b4e:	7bfa      	ldrb	r2, [r7, #15]
 8005b50:	6879      	ldr	r1, [r7, #4]
 8005b52:	4613      	mov	r3, r2
 8005b54:	00db      	lsls	r3, r3, #3
 8005b56:	4413      	add	r3, r2
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	440b      	add	r3, r1
 8005b5c:	3318      	adds	r3, #24
 8005b5e:	2200      	movs	r2, #0
 8005b60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005b62:	7bfa      	ldrb	r2, [r7, #15]
 8005b64:	6879      	ldr	r1, [r7, #4]
 8005b66:	4613      	mov	r3, r2
 8005b68:	00db      	lsls	r3, r3, #3
 8005b6a:	4413      	add	r3, r2
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	440b      	add	r3, r1
 8005b70:	331c      	adds	r3, #28
 8005b72:	2200      	movs	r2, #0
 8005b74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005b76:	7bfa      	ldrb	r2, [r7, #15]
 8005b78:	6879      	ldr	r1, [r7, #4]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	00db      	lsls	r3, r3, #3
 8005b7e:	4413      	add	r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	440b      	add	r3, r1
 8005b84:	3320      	adds	r3, #32
 8005b86:	2200      	movs	r2, #0
 8005b88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005b8a:	7bfa      	ldrb	r2, [r7, #15]
 8005b8c:	6879      	ldr	r1, [r7, #4]
 8005b8e:	4613      	mov	r3, r2
 8005b90:	00db      	lsls	r3, r3, #3
 8005b92:	4413      	add	r3, r2
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	440b      	add	r3, r1
 8005b98:	3324      	adds	r3, #36	; 0x24
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	73fb      	strb	r3, [r7, #15]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	791b      	ldrb	r3, [r3, #4]
 8005ba8:	7bfa      	ldrb	r2, [r7, #15]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d3af      	bcc.n	8005b0e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005bae:	2300      	movs	r3, #0
 8005bb0:	73fb      	strb	r3, [r7, #15]
 8005bb2:	e044      	b.n	8005c3e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005bb4:	7bfa      	ldrb	r2, [r7, #15]
 8005bb6:	6879      	ldr	r1, [r7, #4]
 8005bb8:	4613      	mov	r3, r2
 8005bba:	00db      	lsls	r3, r3, #3
 8005bbc:	4413      	add	r3, r2
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	440b      	add	r3, r1
 8005bc2:	f203 2355 	addw	r3, r3, #597	; 0x255
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005bca:	7bfa      	ldrb	r2, [r7, #15]
 8005bcc:	6879      	ldr	r1, [r7, #4]
 8005bce:	4613      	mov	r3, r2
 8005bd0:	00db      	lsls	r3, r3, #3
 8005bd2:	4413      	add	r3, r2
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	440b      	add	r3, r1
 8005bd8:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8005bdc:	7bfa      	ldrb	r2, [r7, #15]
 8005bde:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005be0:	7bfa      	ldrb	r2, [r7, #15]
 8005be2:	6879      	ldr	r1, [r7, #4]
 8005be4:	4613      	mov	r3, r2
 8005be6:	00db      	lsls	r3, r3, #3
 8005be8:	4413      	add	r3, r2
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	440b      	add	r3, r1
 8005bee:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005bf6:	7bfa      	ldrb	r2, [r7, #15]
 8005bf8:	6879      	ldr	r1, [r7, #4]
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	00db      	lsls	r3, r3, #3
 8005bfe:	4413      	add	r3, r2
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	440b      	add	r3, r1
 8005c04:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8005c08:	2200      	movs	r2, #0
 8005c0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005c0c:	7bfa      	ldrb	r2, [r7, #15]
 8005c0e:	6879      	ldr	r1, [r7, #4]
 8005c10:	4613      	mov	r3, r2
 8005c12:	00db      	lsls	r3, r3, #3
 8005c14:	4413      	add	r3, r2
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	440b      	add	r3, r1
 8005c1a:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8005c1e:	2200      	movs	r2, #0
 8005c20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005c22:	7bfa      	ldrb	r2, [r7, #15]
 8005c24:	6879      	ldr	r1, [r7, #4]
 8005c26:	4613      	mov	r3, r2
 8005c28:	00db      	lsls	r3, r3, #3
 8005c2a:	4413      	add	r3, r2
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	440b      	add	r3, r1
 8005c30:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8005c34:	2200      	movs	r2, #0
 8005c36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c38:	7bfb      	ldrb	r3, [r7, #15]
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	73fb      	strb	r3, [r7, #15]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	791b      	ldrb	r3, [r3, #4]
 8005c42:	7bfa      	ldrb	r2, [r7, #15]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d3b5      	bcc.n	8005bb4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6818      	ldr	r0, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	7c1a      	ldrb	r2, [r3, #16]
 8005c50:	f88d 2000 	strb.w	r2, [sp]
 8005c54:	3304      	adds	r3, #4
 8005c56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c58:	f003 fa58 	bl	800910c <USB_DevInit>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d005      	beq.n	8005c6e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2202      	movs	r2, #2
 8005c66:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e00c      	b.n	8005c88 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4618      	mov	r0, r3
 8005c82:	f003 fc20 	bl	80094c6 <USB_DevDisconnect>

  return HAL_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3710      	adds	r7, #16
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d101      	bne.n	8005ca2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e267      	b.n	8006172 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0301 	and.w	r3, r3, #1
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d075      	beq.n	8005d9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005cae:	4b88      	ldr	r3, [pc, #544]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	f003 030c 	and.w	r3, r3, #12
 8005cb6:	2b04      	cmp	r3, #4
 8005cb8:	d00c      	beq.n	8005cd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cba:	4b85      	ldr	r3, [pc, #532]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005cc2:	2b08      	cmp	r3, #8
 8005cc4:	d112      	bne.n	8005cec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cc6:	4b82      	ldr	r3, [pc, #520]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cd2:	d10b      	bne.n	8005cec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cd4:	4b7e      	ldr	r3, [pc, #504]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d05b      	beq.n	8005d98 <HAL_RCC_OscConfig+0x108>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d157      	bne.n	8005d98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e242      	b.n	8006172 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cf4:	d106      	bne.n	8005d04 <HAL_RCC_OscConfig+0x74>
 8005cf6:	4b76      	ldr	r3, [pc, #472]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a75      	ldr	r2, [pc, #468]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d00:	6013      	str	r3, [r2, #0]
 8005d02:	e01d      	b.n	8005d40 <HAL_RCC_OscConfig+0xb0>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d0c:	d10c      	bne.n	8005d28 <HAL_RCC_OscConfig+0x98>
 8005d0e:	4b70      	ldr	r3, [pc, #448]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a6f      	ldr	r2, [pc, #444]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005d14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d18:	6013      	str	r3, [r2, #0]
 8005d1a:	4b6d      	ldr	r3, [pc, #436]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a6c      	ldr	r2, [pc, #432]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d24:	6013      	str	r3, [r2, #0]
 8005d26:	e00b      	b.n	8005d40 <HAL_RCC_OscConfig+0xb0>
 8005d28:	4b69      	ldr	r3, [pc, #420]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a68      	ldr	r2, [pc, #416]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d32:	6013      	str	r3, [r2, #0]
 8005d34:	4b66      	ldr	r3, [pc, #408]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a65      	ldr	r2, [pc, #404]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005d3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d013      	beq.n	8005d70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d48:	f7fd ff0e 	bl	8003b68 <HAL_GetTick>
 8005d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d4e:	e008      	b.n	8005d62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d50:	f7fd ff0a 	bl	8003b68 <HAL_GetTick>
 8005d54:	4602      	mov	r2, r0
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	2b64      	cmp	r3, #100	; 0x64
 8005d5c:	d901      	bls.n	8005d62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e207      	b.n	8006172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d62:	4b5b      	ldr	r3, [pc, #364]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d0f0      	beq.n	8005d50 <HAL_RCC_OscConfig+0xc0>
 8005d6e:	e014      	b.n	8005d9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d70:	f7fd fefa 	bl	8003b68 <HAL_GetTick>
 8005d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d76:	e008      	b.n	8005d8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d78:	f7fd fef6 	bl	8003b68 <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	2b64      	cmp	r3, #100	; 0x64
 8005d84:	d901      	bls.n	8005d8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d86:	2303      	movs	r3, #3
 8005d88:	e1f3      	b.n	8006172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d8a:	4b51      	ldr	r3, [pc, #324]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1f0      	bne.n	8005d78 <HAL_RCC_OscConfig+0xe8>
 8005d96:	e000      	b.n	8005d9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 0302 	and.w	r3, r3, #2
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d063      	beq.n	8005e6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005da6:	4b4a      	ldr	r3, [pc, #296]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f003 030c 	and.w	r3, r3, #12
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00b      	beq.n	8005dca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005db2:	4b47      	ldr	r3, [pc, #284]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005dba:	2b08      	cmp	r3, #8
 8005dbc:	d11c      	bne.n	8005df8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005dbe:	4b44      	ldr	r3, [pc, #272]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d116      	bne.n	8005df8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dca:	4b41      	ldr	r3, [pc, #260]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 0302 	and.w	r3, r3, #2
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d005      	beq.n	8005de2 <HAL_RCC_OscConfig+0x152>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d001      	beq.n	8005de2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e1c7      	b.n	8006172 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005de2:	4b3b      	ldr	r3, [pc, #236]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	00db      	lsls	r3, r3, #3
 8005df0:	4937      	ldr	r1, [pc, #220]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005df6:	e03a      	b.n	8005e6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d020      	beq.n	8005e42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e00:	4b34      	ldr	r3, [pc, #208]	; (8005ed4 <HAL_RCC_OscConfig+0x244>)
 8005e02:	2201      	movs	r2, #1
 8005e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e06:	f7fd feaf 	bl	8003b68 <HAL_GetTick>
 8005e0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e0c:	e008      	b.n	8005e20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e0e:	f7fd feab 	bl	8003b68 <HAL_GetTick>
 8005e12:	4602      	mov	r2, r0
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	d901      	bls.n	8005e20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	e1a8      	b.n	8006172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e20:	4b2b      	ldr	r3, [pc, #172]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0302 	and.w	r3, r3, #2
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d0f0      	beq.n	8005e0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e2c:	4b28      	ldr	r3, [pc, #160]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	00db      	lsls	r3, r3, #3
 8005e3a:	4925      	ldr	r1, [pc, #148]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	600b      	str	r3, [r1, #0]
 8005e40:	e015      	b.n	8005e6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e42:	4b24      	ldr	r3, [pc, #144]	; (8005ed4 <HAL_RCC_OscConfig+0x244>)
 8005e44:	2200      	movs	r2, #0
 8005e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e48:	f7fd fe8e 	bl	8003b68 <HAL_GetTick>
 8005e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e4e:	e008      	b.n	8005e62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e50:	f7fd fe8a 	bl	8003b68 <HAL_GetTick>
 8005e54:	4602      	mov	r2, r0
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d901      	bls.n	8005e62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e187      	b.n	8006172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e62:	4b1b      	ldr	r3, [pc, #108]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0302 	and.w	r3, r3, #2
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1f0      	bne.n	8005e50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0308 	and.w	r3, r3, #8
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d036      	beq.n	8005ee8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d016      	beq.n	8005eb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e82:	4b15      	ldr	r3, [pc, #84]	; (8005ed8 <HAL_RCC_OscConfig+0x248>)
 8005e84:	2201      	movs	r2, #1
 8005e86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e88:	f7fd fe6e 	bl	8003b68 <HAL_GetTick>
 8005e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e8e:	e008      	b.n	8005ea2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e90:	f7fd fe6a 	bl	8003b68 <HAL_GetTick>
 8005e94:	4602      	mov	r2, r0
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d901      	bls.n	8005ea2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e167      	b.n	8006172 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ea2:	4b0b      	ldr	r3, [pc, #44]	; (8005ed0 <HAL_RCC_OscConfig+0x240>)
 8005ea4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ea6:	f003 0302 	and.w	r3, r3, #2
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d0f0      	beq.n	8005e90 <HAL_RCC_OscConfig+0x200>
 8005eae:	e01b      	b.n	8005ee8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005eb0:	4b09      	ldr	r3, [pc, #36]	; (8005ed8 <HAL_RCC_OscConfig+0x248>)
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005eb6:	f7fd fe57 	bl	8003b68 <HAL_GetTick>
 8005eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ebc:	e00e      	b.n	8005edc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ebe:	f7fd fe53 	bl	8003b68 <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d907      	bls.n	8005edc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e150      	b.n	8006172 <HAL_RCC_OscConfig+0x4e2>
 8005ed0:	40023800 	.word	0x40023800
 8005ed4:	42470000 	.word	0x42470000
 8005ed8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005edc:	4b88      	ldr	r3, [pc, #544]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8005ede:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ee0:	f003 0302 	and.w	r3, r3, #2
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d1ea      	bne.n	8005ebe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0304 	and.w	r3, r3, #4
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	f000 8097 	beq.w	8006024 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005efa:	4b81      	ldr	r3, [pc, #516]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8005efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d10f      	bne.n	8005f26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f06:	2300      	movs	r3, #0
 8005f08:	60bb      	str	r3, [r7, #8]
 8005f0a:	4b7d      	ldr	r3, [pc, #500]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8005f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0e:	4a7c      	ldr	r2, [pc, #496]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8005f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f14:	6413      	str	r3, [r2, #64]	; 0x40
 8005f16:	4b7a      	ldr	r3, [pc, #488]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8005f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f1e:	60bb      	str	r3, [r7, #8]
 8005f20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f22:	2301      	movs	r3, #1
 8005f24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f26:	4b77      	ldr	r3, [pc, #476]	; (8006104 <HAL_RCC_OscConfig+0x474>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d118      	bne.n	8005f64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f32:	4b74      	ldr	r3, [pc, #464]	; (8006104 <HAL_RCC_OscConfig+0x474>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a73      	ldr	r2, [pc, #460]	; (8006104 <HAL_RCC_OscConfig+0x474>)
 8005f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f3e:	f7fd fe13 	bl	8003b68 <HAL_GetTick>
 8005f42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f44:	e008      	b.n	8005f58 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f46:	f7fd fe0f 	bl	8003b68 <HAL_GetTick>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d901      	bls.n	8005f58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	e10c      	b.n	8006172 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f58:	4b6a      	ldr	r3, [pc, #424]	; (8006104 <HAL_RCC_OscConfig+0x474>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d0f0      	beq.n	8005f46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d106      	bne.n	8005f7a <HAL_RCC_OscConfig+0x2ea>
 8005f6c:	4b64      	ldr	r3, [pc, #400]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8005f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f70:	4a63      	ldr	r2, [pc, #396]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8005f72:	f043 0301 	orr.w	r3, r3, #1
 8005f76:	6713      	str	r3, [r2, #112]	; 0x70
 8005f78:	e01c      	b.n	8005fb4 <HAL_RCC_OscConfig+0x324>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	2b05      	cmp	r3, #5
 8005f80:	d10c      	bne.n	8005f9c <HAL_RCC_OscConfig+0x30c>
 8005f82:	4b5f      	ldr	r3, [pc, #380]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8005f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f86:	4a5e      	ldr	r2, [pc, #376]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8005f88:	f043 0304 	orr.w	r3, r3, #4
 8005f8c:	6713      	str	r3, [r2, #112]	; 0x70
 8005f8e:	4b5c      	ldr	r3, [pc, #368]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8005f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f92:	4a5b      	ldr	r2, [pc, #364]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8005f94:	f043 0301 	orr.w	r3, r3, #1
 8005f98:	6713      	str	r3, [r2, #112]	; 0x70
 8005f9a:	e00b      	b.n	8005fb4 <HAL_RCC_OscConfig+0x324>
 8005f9c:	4b58      	ldr	r3, [pc, #352]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8005f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fa0:	4a57      	ldr	r2, [pc, #348]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8005fa2:	f023 0301 	bic.w	r3, r3, #1
 8005fa6:	6713      	str	r3, [r2, #112]	; 0x70
 8005fa8:	4b55      	ldr	r3, [pc, #340]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8005faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fac:	4a54      	ldr	r2, [pc, #336]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8005fae:	f023 0304 	bic.w	r3, r3, #4
 8005fb2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d015      	beq.n	8005fe8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fbc:	f7fd fdd4 	bl	8003b68 <HAL_GetTick>
 8005fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fc2:	e00a      	b.n	8005fda <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fc4:	f7fd fdd0 	bl	8003b68 <HAL_GetTick>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d901      	bls.n	8005fda <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e0cb      	b.n	8006172 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fda:	4b49      	ldr	r3, [pc, #292]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8005fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fde:	f003 0302 	and.w	r3, r3, #2
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d0ee      	beq.n	8005fc4 <HAL_RCC_OscConfig+0x334>
 8005fe6:	e014      	b.n	8006012 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fe8:	f7fd fdbe 	bl	8003b68 <HAL_GetTick>
 8005fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fee:	e00a      	b.n	8006006 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ff0:	f7fd fdba 	bl	8003b68 <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d901      	bls.n	8006006 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	e0b5      	b.n	8006172 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006006:	4b3e      	ldr	r3, [pc, #248]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8006008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800600a:	f003 0302 	and.w	r3, r3, #2
 800600e:	2b00      	cmp	r3, #0
 8006010:	d1ee      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006012:	7dfb      	ldrb	r3, [r7, #23]
 8006014:	2b01      	cmp	r3, #1
 8006016:	d105      	bne.n	8006024 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006018:	4b39      	ldr	r3, [pc, #228]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 800601a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601c:	4a38      	ldr	r2, [pc, #224]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 800601e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006022:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	699b      	ldr	r3, [r3, #24]
 8006028:	2b00      	cmp	r3, #0
 800602a:	f000 80a1 	beq.w	8006170 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800602e:	4b34      	ldr	r3, [pc, #208]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	f003 030c 	and.w	r3, r3, #12
 8006036:	2b08      	cmp	r3, #8
 8006038:	d05c      	beq.n	80060f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	699b      	ldr	r3, [r3, #24]
 800603e:	2b02      	cmp	r3, #2
 8006040:	d141      	bne.n	80060c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006042:	4b31      	ldr	r3, [pc, #196]	; (8006108 <HAL_RCC_OscConfig+0x478>)
 8006044:	2200      	movs	r2, #0
 8006046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006048:	f7fd fd8e 	bl	8003b68 <HAL_GetTick>
 800604c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800604e:	e008      	b.n	8006062 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006050:	f7fd fd8a 	bl	8003b68 <HAL_GetTick>
 8006054:	4602      	mov	r2, r0
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	2b02      	cmp	r3, #2
 800605c:	d901      	bls.n	8006062 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e087      	b.n	8006172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006062:	4b27      	ldr	r3, [pc, #156]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1f0      	bne.n	8006050 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	69da      	ldr	r2, [r3, #28]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a1b      	ldr	r3, [r3, #32]
 8006076:	431a      	orrs	r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607c:	019b      	lsls	r3, r3, #6
 800607e:	431a      	orrs	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006084:	085b      	lsrs	r3, r3, #1
 8006086:	3b01      	subs	r3, #1
 8006088:	041b      	lsls	r3, r3, #16
 800608a:	431a      	orrs	r2, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006090:	061b      	lsls	r3, r3, #24
 8006092:	491b      	ldr	r1, [pc, #108]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 8006094:	4313      	orrs	r3, r2
 8006096:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006098:	4b1b      	ldr	r3, [pc, #108]	; (8006108 <HAL_RCC_OscConfig+0x478>)
 800609a:	2201      	movs	r2, #1
 800609c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800609e:	f7fd fd63 	bl	8003b68 <HAL_GetTick>
 80060a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060a4:	e008      	b.n	80060b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060a6:	f7fd fd5f 	bl	8003b68 <HAL_GetTick>
 80060aa:	4602      	mov	r2, r0
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d901      	bls.n	80060b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80060b4:	2303      	movs	r3, #3
 80060b6:	e05c      	b.n	8006172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060b8:	4b11      	ldr	r3, [pc, #68]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d0f0      	beq.n	80060a6 <HAL_RCC_OscConfig+0x416>
 80060c4:	e054      	b.n	8006170 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060c6:	4b10      	ldr	r3, [pc, #64]	; (8006108 <HAL_RCC_OscConfig+0x478>)
 80060c8:	2200      	movs	r2, #0
 80060ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060cc:	f7fd fd4c 	bl	8003b68 <HAL_GetTick>
 80060d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060d2:	e008      	b.n	80060e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060d4:	f7fd fd48 	bl	8003b68 <HAL_GetTick>
 80060d8:	4602      	mov	r2, r0
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d901      	bls.n	80060e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	e045      	b.n	8006172 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060e6:	4b06      	ldr	r3, [pc, #24]	; (8006100 <HAL_RCC_OscConfig+0x470>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d1f0      	bne.n	80060d4 <HAL_RCC_OscConfig+0x444>
 80060f2:	e03d      	b.n	8006170 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d107      	bne.n	800610c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e038      	b.n	8006172 <HAL_RCC_OscConfig+0x4e2>
 8006100:	40023800 	.word	0x40023800
 8006104:	40007000 	.word	0x40007000
 8006108:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800610c:	4b1b      	ldr	r3, [pc, #108]	; (800617c <HAL_RCC_OscConfig+0x4ec>)
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	2b01      	cmp	r3, #1
 8006118:	d028      	beq.n	800616c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006124:	429a      	cmp	r2, r3
 8006126:	d121      	bne.n	800616c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006132:	429a      	cmp	r2, r3
 8006134:	d11a      	bne.n	800616c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800613c:	4013      	ands	r3, r2
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006142:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006144:	4293      	cmp	r3, r2
 8006146:	d111      	bne.n	800616c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006152:	085b      	lsrs	r3, r3, #1
 8006154:	3b01      	subs	r3, #1
 8006156:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006158:	429a      	cmp	r2, r3
 800615a:	d107      	bne.n	800616c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006166:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006168:	429a      	cmp	r2, r3
 800616a:	d001      	beq.n	8006170 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	e000      	b.n	8006172 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	3718      	adds	r7, #24
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	40023800 	.word	0x40023800

08006180 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d101      	bne.n	8006194 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e0cc      	b.n	800632e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006194:	4b68      	ldr	r3, [pc, #416]	; (8006338 <HAL_RCC_ClockConfig+0x1b8>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 030f 	and.w	r3, r3, #15
 800619c:	683a      	ldr	r2, [r7, #0]
 800619e:	429a      	cmp	r2, r3
 80061a0:	d90c      	bls.n	80061bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061a2:	4b65      	ldr	r3, [pc, #404]	; (8006338 <HAL_RCC_ClockConfig+0x1b8>)
 80061a4:	683a      	ldr	r2, [r7, #0]
 80061a6:	b2d2      	uxtb	r2, r2
 80061a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061aa:	4b63      	ldr	r3, [pc, #396]	; (8006338 <HAL_RCC_ClockConfig+0x1b8>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 030f 	and.w	r3, r3, #15
 80061b2:	683a      	ldr	r2, [r7, #0]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d001      	beq.n	80061bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e0b8      	b.n	800632e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 0302 	and.w	r3, r3, #2
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d020      	beq.n	800620a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0304 	and.w	r3, r3, #4
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d005      	beq.n	80061e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061d4:	4b59      	ldr	r3, [pc, #356]	; (800633c <HAL_RCC_ClockConfig+0x1bc>)
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	4a58      	ldr	r2, [pc, #352]	; (800633c <HAL_RCC_ClockConfig+0x1bc>)
 80061da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80061de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 0308 	and.w	r3, r3, #8
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d005      	beq.n	80061f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061ec:	4b53      	ldr	r3, [pc, #332]	; (800633c <HAL_RCC_ClockConfig+0x1bc>)
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	4a52      	ldr	r2, [pc, #328]	; (800633c <HAL_RCC_ClockConfig+0x1bc>)
 80061f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80061f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061f8:	4b50      	ldr	r3, [pc, #320]	; (800633c <HAL_RCC_ClockConfig+0x1bc>)
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	494d      	ldr	r1, [pc, #308]	; (800633c <HAL_RCC_ClockConfig+0x1bc>)
 8006206:	4313      	orrs	r3, r2
 8006208:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 0301 	and.w	r3, r3, #1
 8006212:	2b00      	cmp	r3, #0
 8006214:	d044      	beq.n	80062a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	2b01      	cmp	r3, #1
 800621c:	d107      	bne.n	800622e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800621e:	4b47      	ldr	r3, [pc, #284]	; (800633c <HAL_RCC_ClockConfig+0x1bc>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006226:	2b00      	cmp	r3, #0
 8006228:	d119      	bne.n	800625e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e07f      	b.n	800632e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	2b02      	cmp	r3, #2
 8006234:	d003      	beq.n	800623e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800623a:	2b03      	cmp	r3, #3
 800623c:	d107      	bne.n	800624e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800623e:	4b3f      	ldr	r3, [pc, #252]	; (800633c <HAL_RCC_ClockConfig+0x1bc>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006246:	2b00      	cmp	r3, #0
 8006248:	d109      	bne.n	800625e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e06f      	b.n	800632e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800624e:	4b3b      	ldr	r3, [pc, #236]	; (800633c <HAL_RCC_ClockConfig+0x1bc>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 0302 	and.w	r3, r3, #2
 8006256:	2b00      	cmp	r3, #0
 8006258:	d101      	bne.n	800625e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e067      	b.n	800632e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800625e:	4b37      	ldr	r3, [pc, #220]	; (800633c <HAL_RCC_ClockConfig+0x1bc>)
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	f023 0203 	bic.w	r2, r3, #3
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	4934      	ldr	r1, [pc, #208]	; (800633c <HAL_RCC_ClockConfig+0x1bc>)
 800626c:	4313      	orrs	r3, r2
 800626e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006270:	f7fd fc7a 	bl	8003b68 <HAL_GetTick>
 8006274:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006276:	e00a      	b.n	800628e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006278:	f7fd fc76 	bl	8003b68 <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	f241 3288 	movw	r2, #5000	; 0x1388
 8006286:	4293      	cmp	r3, r2
 8006288:	d901      	bls.n	800628e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e04f      	b.n	800632e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800628e:	4b2b      	ldr	r3, [pc, #172]	; (800633c <HAL_RCC_ClockConfig+0x1bc>)
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	f003 020c 	and.w	r2, r3, #12
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	429a      	cmp	r2, r3
 800629e:	d1eb      	bne.n	8006278 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062a0:	4b25      	ldr	r3, [pc, #148]	; (8006338 <HAL_RCC_ClockConfig+0x1b8>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 030f 	and.w	r3, r3, #15
 80062a8:	683a      	ldr	r2, [r7, #0]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d20c      	bcs.n	80062c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062ae:	4b22      	ldr	r3, [pc, #136]	; (8006338 <HAL_RCC_ClockConfig+0x1b8>)
 80062b0:	683a      	ldr	r2, [r7, #0]
 80062b2:	b2d2      	uxtb	r2, r2
 80062b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062b6:	4b20      	ldr	r3, [pc, #128]	; (8006338 <HAL_RCC_ClockConfig+0x1b8>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 030f 	and.w	r3, r3, #15
 80062be:	683a      	ldr	r2, [r7, #0]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d001      	beq.n	80062c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e032      	b.n	800632e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 0304 	and.w	r3, r3, #4
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d008      	beq.n	80062e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062d4:	4b19      	ldr	r3, [pc, #100]	; (800633c <HAL_RCC_ClockConfig+0x1bc>)
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	4916      	ldr	r1, [pc, #88]	; (800633c <HAL_RCC_ClockConfig+0x1bc>)
 80062e2:	4313      	orrs	r3, r2
 80062e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0308 	and.w	r3, r3, #8
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d009      	beq.n	8006306 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062f2:	4b12      	ldr	r3, [pc, #72]	; (800633c <HAL_RCC_ClockConfig+0x1bc>)
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	00db      	lsls	r3, r3, #3
 8006300:	490e      	ldr	r1, [pc, #56]	; (800633c <HAL_RCC_ClockConfig+0x1bc>)
 8006302:	4313      	orrs	r3, r2
 8006304:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006306:	f000 f821 	bl	800634c <HAL_RCC_GetSysClockFreq>
 800630a:	4602      	mov	r2, r0
 800630c:	4b0b      	ldr	r3, [pc, #44]	; (800633c <HAL_RCC_ClockConfig+0x1bc>)
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	091b      	lsrs	r3, r3, #4
 8006312:	f003 030f 	and.w	r3, r3, #15
 8006316:	490a      	ldr	r1, [pc, #40]	; (8006340 <HAL_RCC_ClockConfig+0x1c0>)
 8006318:	5ccb      	ldrb	r3, [r1, r3]
 800631a:	fa22 f303 	lsr.w	r3, r2, r3
 800631e:	4a09      	ldr	r2, [pc, #36]	; (8006344 <HAL_RCC_ClockConfig+0x1c4>)
 8006320:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006322:	4b09      	ldr	r3, [pc, #36]	; (8006348 <HAL_RCC_ClockConfig+0x1c8>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4618      	mov	r0, r3
 8006328:	f7fd fbda 	bl	8003ae0 <HAL_InitTick>

  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3710      	adds	r7, #16
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	40023c00 	.word	0x40023c00
 800633c:	40023800 	.word	0x40023800
 8006340:	0800ed5c 	.word	0x0800ed5c
 8006344:	20000010 	.word	0x20000010
 8006348:	20000014 	.word	0x20000014

0800634c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800634c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006350:	b094      	sub	sp, #80	; 0x50
 8006352:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006354:	2300      	movs	r3, #0
 8006356:	647b      	str	r3, [r7, #68]	; 0x44
 8006358:	2300      	movs	r3, #0
 800635a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800635c:	2300      	movs	r3, #0
 800635e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006360:	2300      	movs	r3, #0
 8006362:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006364:	4b79      	ldr	r3, [pc, #484]	; (800654c <HAL_RCC_GetSysClockFreq+0x200>)
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	f003 030c 	and.w	r3, r3, #12
 800636c:	2b08      	cmp	r3, #8
 800636e:	d00d      	beq.n	800638c <HAL_RCC_GetSysClockFreq+0x40>
 8006370:	2b08      	cmp	r3, #8
 8006372:	f200 80e1 	bhi.w	8006538 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006376:	2b00      	cmp	r3, #0
 8006378:	d002      	beq.n	8006380 <HAL_RCC_GetSysClockFreq+0x34>
 800637a:	2b04      	cmp	r3, #4
 800637c:	d003      	beq.n	8006386 <HAL_RCC_GetSysClockFreq+0x3a>
 800637e:	e0db      	b.n	8006538 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006380:	4b73      	ldr	r3, [pc, #460]	; (8006550 <HAL_RCC_GetSysClockFreq+0x204>)
 8006382:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006384:	e0db      	b.n	800653e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006386:	4b73      	ldr	r3, [pc, #460]	; (8006554 <HAL_RCC_GetSysClockFreq+0x208>)
 8006388:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800638a:	e0d8      	b.n	800653e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800638c:	4b6f      	ldr	r3, [pc, #444]	; (800654c <HAL_RCC_GetSysClockFreq+0x200>)
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006394:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006396:	4b6d      	ldr	r3, [pc, #436]	; (800654c <HAL_RCC_GetSysClockFreq+0x200>)
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d063      	beq.n	800646a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063a2:	4b6a      	ldr	r3, [pc, #424]	; (800654c <HAL_RCC_GetSysClockFreq+0x200>)
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	099b      	lsrs	r3, r3, #6
 80063a8:	2200      	movs	r2, #0
 80063aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80063ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80063ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063b4:	633b      	str	r3, [r7, #48]	; 0x30
 80063b6:	2300      	movs	r3, #0
 80063b8:	637b      	str	r3, [r7, #52]	; 0x34
 80063ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80063be:	4622      	mov	r2, r4
 80063c0:	462b      	mov	r3, r5
 80063c2:	f04f 0000 	mov.w	r0, #0
 80063c6:	f04f 0100 	mov.w	r1, #0
 80063ca:	0159      	lsls	r1, r3, #5
 80063cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063d0:	0150      	lsls	r0, r2, #5
 80063d2:	4602      	mov	r2, r0
 80063d4:	460b      	mov	r3, r1
 80063d6:	4621      	mov	r1, r4
 80063d8:	1a51      	subs	r1, r2, r1
 80063da:	6139      	str	r1, [r7, #16]
 80063dc:	4629      	mov	r1, r5
 80063de:	eb63 0301 	sbc.w	r3, r3, r1
 80063e2:	617b      	str	r3, [r7, #20]
 80063e4:	f04f 0200 	mov.w	r2, #0
 80063e8:	f04f 0300 	mov.w	r3, #0
 80063ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80063f0:	4659      	mov	r1, fp
 80063f2:	018b      	lsls	r3, r1, #6
 80063f4:	4651      	mov	r1, sl
 80063f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80063fa:	4651      	mov	r1, sl
 80063fc:	018a      	lsls	r2, r1, #6
 80063fe:	4651      	mov	r1, sl
 8006400:	ebb2 0801 	subs.w	r8, r2, r1
 8006404:	4659      	mov	r1, fp
 8006406:	eb63 0901 	sbc.w	r9, r3, r1
 800640a:	f04f 0200 	mov.w	r2, #0
 800640e:	f04f 0300 	mov.w	r3, #0
 8006412:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006416:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800641a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800641e:	4690      	mov	r8, r2
 8006420:	4699      	mov	r9, r3
 8006422:	4623      	mov	r3, r4
 8006424:	eb18 0303 	adds.w	r3, r8, r3
 8006428:	60bb      	str	r3, [r7, #8]
 800642a:	462b      	mov	r3, r5
 800642c:	eb49 0303 	adc.w	r3, r9, r3
 8006430:	60fb      	str	r3, [r7, #12]
 8006432:	f04f 0200 	mov.w	r2, #0
 8006436:	f04f 0300 	mov.w	r3, #0
 800643a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800643e:	4629      	mov	r1, r5
 8006440:	024b      	lsls	r3, r1, #9
 8006442:	4621      	mov	r1, r4
 8006444:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006448:	4621      	mov	r1, r4
 800644a:	024a      	lsls	r2, r1, #9
 800644c:	4610      	mov	r0, r2
 800644e:	4619      	mov	r1, r3
 8006450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006452:	2200      	movs	r2, #0
 8006454:	62bb      	str	r3, [r7, #40]	; 0x28
 8006456:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006458:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800645c:	f7fa fc24 	bl	8000ca8 <__aeabi_uldivmod>
 8006460:	4602      	mov	r2, r0
 8006462:	460b      	mov	r3, r1
 8006464:	4613      	mov	r3, r2
 8006466:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006468:	e058      	b.n	800651c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800646a:	4b38      	ldr	r3, [pc, #224]	; (800654c <HAL_RCC_GetSysClockFreq+0x200>)
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	099b      	lsrs	r3, r3, #6
 8006470:	2200      	movs	r2, #0
 8006472:	4618      	mov	r0, r3
 8006474:	4611      	mov	r1, r2
 8006476:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800647a:	623b      	str	r3, [r7, #32]
 800647c:	2300      	movs	r3, #0
 800647e:	627b      	str	r3, [r7, #36]	; 0x24
 8006480:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006484:	4642      	mov	r2, r8
 8006486:	464b      	mov	r3, r9
 8006488:	f04f 0000 	mov.w	r0, #0
 800648c:	f04f 0100 	mov.w	r1, #0
 8006490:	0159      	lsls	r1, r3, #5
 8006492:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006496:	0150      	lsls	r0, r2, #5
 8006498:	4602      	mov	r2, r0
 800649a:	460b      	mov	r3, r1
 800649c:	4641      	mov	r1, r8
 800649e:	ebb2 0a01 	subs.w	sl, r2, r1
 80064a2:	4649      	mov	r1, r9
 80064a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80064a8:	f04f 0200 	mov.w	r2, #0
 80064ac:	f04f 0300 	mov.w	r3, #0
 80064b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80064b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80064b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80064bc:	ebb2 040a 	subs.w	r4, r2, sl
 80064c0:	eb63 050b 	sbc.w	r5, r3, fp
 80064c4:	f04f 0200 	mov.w	r2, #0
 80064c8:	f04f 0300 	mov.w	r3, #0
 80064cc:	00eb      	lsls	r3, r5, #3
 80064ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80064d2:	00e2      	lsls	r2, r4, #3
 80064d4:	4614      	mov	r4, r2
 80064d6:	461d      	mov	r5, r3
 80064d8:	4643      	mov	r3, r8
 80064da:	18e3      	adds	r3, r4, r3
 80064dc:	603b      	str	r3, [r7, #0]
 80064de:	464b      	mov	r3, r9
 80064e0:	eb45 0303 	adc.w	r3, r5, r3
 80064e4:	607b      	str	r3, [r7, #4]
 80064e6:	f04f 0200 	mov.w	r2, #0
 80064ea:	f04f 0300 	mov.w	r3, #0
 80064ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80064f2:	4629      	mov	r1, r5
 80064f4:	028b      	lsls	r3, r1, #10
 80064f6:	4621      	mov	r1, r4
 80064f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80064fc:	4621      	mov	r1, r4
 80064fe:	028a      	lsls	r2, r1, #10
 8006500:	4610      	mov	r0, r2
 8006502:	4619      	mov	r1, r3
 8006504:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006506:	2200      	movs	r2, #0
 8006508:	61bb      	str	r3, [r7, #24]
 800650a:	61fa      	str	r2, [r7, #28]
 800650c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006510:	f7fa fbca 	bl	8000ca8 <__aeabi_uldivmod>
 8006514:	4602      	mov	r2, r0
 8006516:	460b      	mov	r3, r1
 8006518:	4613      	mov	r3, r2
 800651a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800651c:	4b0b      	ldr	r3, [pc, #44]	; (800654c <HAL_RCC_GetSysClockFreq+0x200>)
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	0c1b      	lsrs	r3, r3, #16
 8006522:	f003 0303 	and.w	r3, r3, #3
 8006526:	3301      	adds	r3, #1
 8006528:	005b      	lsls	r3, r3, #1
 800652a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800652c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800652e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006530:	fbb2 f3f3 	udiv	r3, r2, r3
 8006534:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006536:	e002      	b.n	800653e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006538:	4b05      	ldr	r3, [pc, #20]	; (8006550 <HAL_RCC_GetSysClockFreq+0x204>)
 800653a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800653c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800653e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006540:	4618      	mov	r0, r3
 8006542:	3750      	adds	r7, #80	; 0x50
 8006544:	46bd      	mov	sp, r7
 8006546:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800654a:	bf00      	nop
 800654c:	40023800 	.word	0x40023800
 8006550:	00f42400 	.word	0x00f42400
 8006554:	007a1200 	.word	0x007a1200

08006558 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006558:	b480      	push	{r7}
 800655a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800655c:	4b03      	ldr	r3, [pc, #12]	; (800656c <HAL_RCC_GetHCLKFreq+0x14>)
 800655e:	681b      	ldr	r3, [r3, #0]
}
 8006560:	4618      	mov	r0, r3
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	20000010 	.word	0x20000010

08006570 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006574:	f7ff fff0 	bl	8006558 <HAL_RCC_GetHCLKFreq>
 8006578:	4602      	mov	r2, r0
 800657a:	4b05      	ldr	r3, [pc, #20]	; (8006590 <HAL_RCC_GetPCLK1Freq+0x20>)
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	0a9b      	lsrs	r3, r3, #10
 8006580:	f003 0307 	and.w	r3, r3, #7
 8006584:	4903      	ldr	r1, [pc, #12]	; (8006594 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006586:	5ccb      	ldrb	r3, [r1, r3]
 8006588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800658c:	4618      	mov	r0, r3
 800658e:	bd80      	pop	{r7, pc}
 8006590:	40023800 	.word	0x40023800
 8006594:	0800ed6c 	.word	0x0800ed6c

08006598 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800659c:	f7ff ffdc 	bl	8006558 <HAL_RCC_GetHCLKFreq>
 80065a0:	4602      	mov	r2, r0
 80065a2:	4b05      	ldr	r3, [pc, #20]	; (80065b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	0b5b      	lsrs	r3, r3, #13
 80065a8:	f003 0307 	and.w	r3, r3, #7
 80065ac:	4903      	ldr	r1, [pc, #12]	; (80065bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80065ae:	5ccb      	ldrb	r3, [r1, r3]
 80065b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	40023800 	.word	0x40023800
 80065bc:	0800ed6c 	.word	0x0800ed6c

080065c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b082      	sub	sp, #8
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d101      	bne.n	80065d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e041      	b.n	8006656 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d106      	bne.n	80065ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f7fc fc1a 	bl	8002e20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2202      	movs	r2, #2
 80065f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	3304      	adds	r3, #4
 80065fc:	4619      	mov	r1, r3
 80065fe:	4610      	mov	r0, r2
 8006600:	f001 f86e 	bl	80076e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	3708      	adds	r7, #8
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
	...

08006660 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006660:	b480      	push	{r7}
 8006662:	b085      	sub	sp, #20
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800666e:	b2db      	uxtb	r3, r3
 8006670:	2b01      	cmp	r3, #1
 8006672:	d001      	beq.n	8006678 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e04e      	b.n	8006716 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2202      	movs	r2, #2
 800667c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68da      	ldr	r2, [r3, #12]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f042 0201 	orr.w	r2, r2, #1
 800668e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a23      	ldr	r2, [pc, #140]	; (8006724 <HAL_TIM_Base_Start_IT+0xc4>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d022      	beq.n	80066e0 <HAL_TIM_Base_Start_IT+0x80>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066a2:	d01d      	beq.n	80066e0 <HAL_TIM_Base_Start_IT+0x80>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a1f      	ldr	r2, [pc, #124]	; (8006728 <HAL_TIM_Base_Start_IT+0xc8>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d018      	beq.n	80066e0 <HAL_TIM_Base_Start_IT+0x80>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a1e      	ldr	r2, [pc, #120]	; (800672c <HAL_TIM_Base_Start_IT+0xcc>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d013      	beq.n	80066e0 <HAL_TIM_Base_Start_IT+0x80>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a1c      	ldr	r2, [pc, #112]	; (8006730 <HAL_TIM_Base_Start_IT+0xd0>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d00e      	beq.n	80066e0 <HAL_TIM_Base_Start_IT+0x80>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a1b      	ldr	r2, [pc, #108]	; (8006734 <HAL_TIM_Base_Start_IT+0xd4>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d009      	beq.n	80066e0 <HAL_TIM_Base_Start_IT+0x80>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a19      	ldr	r2, [pc, #100]	; (8006738 <HAL_TIM_Base_Start_IT+0xd8>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d004      	beq.n	80066e0 <HAL_TIM_Base_Start_IT+0x80>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a18      	ldr	r2, [pc, #96]	; (800673c <HAL_TIM_Base_Start_IT+0xdc>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d111      	bne.n	8006704 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	f003 0307 	and.w	r3, r3, #7
 80066ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2b06      	cmp	r3, #6
 80066f0:	d010      	beq.n	8006714 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f042 0201 	orr.w	r2, r2, #1
 8006700:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006702:	e007      	b.n	8006714 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f042 0201 	orr.w	r2, r2, #1
 8006712:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3714      	adds	r7, #20
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	40010000 	.word	0x40010000
 8006728:	40000400 	.word	0x40000400
 800672c:	40000800 	.word	0x40000800
 8006730:	40000c00 	.word	0x40000c00
 8006734:	40010400 	.word	0x40010400
 8006738:	40014000 	.word	0x40014000
 800673c:	40001800 	.word	0x40001800

08006740 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d101      	bne.n	8006752 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e041      	b.n	80067d6 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006758:	b2db      	uxtb	r3, r3
 800675a:	2b00      	cmp	r3, #0
 800675c:	d106      	bne.n	800676c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 f839 	bl	80067de <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2202      	movs	r2, #2
 8006770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	3304      	adds	r3, #4
 800677c:	4619      	mov	r1, r3
 800677e:	4610      	mov	r0, r2
 8006780:	f000 ffae 	bl	80076e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3708      	adds	r7, #8
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}

080067de <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80067de:	b480      	push	{r7}
 80067e0:	b083      	sub	sp, #12
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80067e6:	bf00      	nop
 80067e8:	370c      	adds	r7, #12
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr
	...

080067f4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067fe:	2300      	movs	r3, #0
 8006800:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d109      	bne.n	800681c <HAL_TIM_OC_Start_IT+0x28>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800680e:	b2db      	uxtb	r3, r3
 8006810:	2b01      	cmp	r3, #1
 8006812:	bf14      	ite	ne
 8006814:	2301      	movne	r3, #1
 8006816:	2300      	moveq	r3, #0
 8006818:	b2db      	uxtb	r3, r3
 800681a:	e022      	b.n	8006862 <HAL_TIM_OC_Start_IT+0x6e>
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	2b04      	cmp	r3, #4
 8006820:	d109      	bne.n	8006836 <HAL_TIM_OC_Start_IT+0x42>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006828:	b2db      	uxtb	r3, r3
 800682a:	2b01      	cmp	r3, #1
 800682c:	bf14      	ite	ne
 800682e:	2301      	movne	r3, #1
 8006830:	2300      	moveq	r3, #0
 8006832:	b2db      	uxtb	r3, r3
 8006834:	e015      	b.n	8006862 <HAL_TIM_OC_Start_IT+0x6e>
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	2b08      	cmp	r3, #8
 800683a:	d109      	bne.n	8006850 <HAL_TIM_OC_Start_IT+0x5c>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006842:	b2db      	uxtb	r3, r3
 8006844:	2b01      	cmp	r3, #1
 8006846:	bf14      	ite	ne
 8006848:	2301      	movne	r3, #1
 800684a:	2300      	moveq	r3, #0
 800684c:	b2db      	uxtb	r3, r3
 800684e:	e008      	b.n	8006862 <HAL_TIM_OC_Start_IT+0x6e>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006856:	b2db      	uxtb	r3, r3
 8006858:	2b01      	cmp	r3, #1
 800685a:	bf14      	ite	ne
 800685c:	2301      	movne	r3, #1
 800685e:	2300      	moveq	r3, #0
 8006860:	b2db      	uxtb	r3, r3
 8006862:	2b00      	cmp	r3, #0
 8006864:	d001      	beq.n	800686a <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e0c7      	b.n	80069fa <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d104      	bne.n	800687a <HAL_TIM_OC_Start_IT+0x86>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2202      	movs	r2, #2
 8006874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006878:	e013      	b.n	80068a2 <HAL_TIM_OC_Start_IT+0xae>
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	2b04      	cmp	r3, #4
 800687e:	d104      	bne.n	800688a <HAL_TIM_OC_Start_IT+0x96>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2202      	movs	r2, #2
 8006884:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006888:	e00b      	b.n	80068a2 <HAL_TIM_OC_Start_IT+0xae>
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	2b08      	cmp	r3, #8
 800688e:	d104      	bne.n	800689a <HAL_TIM_OC_Start_IT+0xa6>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2202      	movs	r2, #2
 8006894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006898:	e003      	b.n	80068a2 <HAL_TIM_OC_Start_IT+0xae>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2202      	movs	r2, #2
 800689e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	2b0c      	cmp	r3, #12
 80068a6:	d841      	bhi.n	800692c <HAL_TIM_OC_Start_IT+0x138>
 80068a8:	a201      	add	r2, pc, #4	; (adr r2, 80068b0 <HAL_TIM_OC_Start_IT+0xbc>)
 80068aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ae:	bf00      	nop
 80068b0:	080068e5 	.word	0x080068e5
 80068b4:	0800692d 	.word	0x0800692d
 80068b8:	0800692d 	.word	0x0800692d
 80068bc:	0800692d 	.word	0x0800692d
 80068c0:	080068f7 	.word	0x080068f7
 80068c4:	0800692d 	.word	0x0800692d
 80068c8:	0800692d 	.word	0x0800692d
 80068cc:	0800692d 	.word	0x0800692d
 80068d0:	08006909 	.word	0x08006909
 80068d4:	0800692d 	.word	0x0800692d
 80068d8:	0800692d 	.word	0x0800692d
 80068dc:	0800692d 	.word	0x0800692d
 80068e0:	0800691b 	.word	0x0800691b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68da      	ldr	r2, [r3, #12]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f042 0202 	orr.w	r2, r2, #2
 80068f2:	60da      	str	r2, [r3, #12]
      break;
 80068f4:	e01d      	b.n	8006932 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	68da      	ldr	r2, [r3, #12]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f042 0204 	orr.w	r2, r2, #4
 8006904:	60da      	str	r2, [r3, #12]
      break;
 8006906:	e014      	b.n	8006932 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68da      	ldr	r2, [r3, #12]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f042 0208 	orr.w	r2, r2, #8
 8006916:	60da      	str	r2, [r3, #12]
      break;
 8006918:	e00b      	b.n	8006932 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68da      	ldr	r2, [r3, #12]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f042 0210 	orr.w	r2, r2, #16
 8006928:	60da      	str	r2, [r3, #12]
      break;
 800692a:	e002      	b.n	8006932 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	73fb      	strb	r3, [r7, #15]
      break;
 8006930:	bf00      	nop
  }

  if (status == HAL_OK)
 8006932:	7bfb      	ldrb	r3, [r7, #15]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d15f      	bne.n	80069f8 <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2201      	movs	r2, #1
 800693e:	6839      	ldr	r1, [r7, #0]
 8006940:	4618      	mov	r0, r3
 8006942:	f001 f9c3 	bl	8007ccc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a2e      	ldr	r2, [pc, #184]	; (8006a04 <HAL_TIM_OC_Start_IT+0x210>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d004      	beq.n	800695a <HAL_TIM_OC_Start_IT+0x166>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a2c      	ldr	r2, [pc, #176]	; (8006a08 <HAL_TIM_OC_Start_IT+0x214>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d101      	bne.n	800695e <HAL_TIM_OC_Start_IT+0x16a>
 800695a:	2301      	movs	r3, #1
 800695c:	e000      	b.n	8006960 <HAL_TIM_OC_Start_IT+0x16c>
 800695e:	2300      	movs	r3, #0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d007      	beq.n	8006974 <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006972:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a22      	ldr	r2, [pc, #136]	; (8006a04 <HAL_TIM_OC_Start_IT+0x210>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d022      	beq.n	80069c4 <HAL_TIM_OC_Start_IT+0x1d0>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006986:	d01d      	beq.n	80069c4 <HAL_TIM_OC_Start_IT+0x1d0>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a1f      	ldr	r2, [pc, #124]	; (8006a0c <HAL_TIM_OC_Start_IT+0x218>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d018      	beq.n	80069c4 <HAL_TIM_OC_Start_IT+0x1d0>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a1e      	ldr	r2, [pc, #120]	; (8006a10 <HAL_TIM_OC_Start_IT+0x21c>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d013      	beq.n	80069c4 <HAL_TIM_OC_Start_IT+0x1d0>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a1c      	ldr	r2, [pc, #112]	; (8006a14 <HAL_TIM_OC_Start_IT+0x220>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d00e      	beq.n	80069c4 <HAL_TIM_OC_Start_IT+0x1d0>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a17      	ldr	r2, [pc, #92]	; (8006a08 <HAL_TIM_OC_Start_IT+0x214>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d009      	beq.n	80069c4 <HAL_TIM_OC_Start_IT+0x1d0>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a18      	ldr	r2, [pc, #96]	; (8006a18 <HAL_TIM_OC_Start_IT+0x224>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d004      	beq.n	80069c4 <HAL_TIM_OC_Start_IT+0x1d0>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a17      	ldr	r2, [pc, #92]	; (8006a1c <HAL_TIM_OC_Start_IT+0x228>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d111      	bne.n	80069e8 <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	f003 0307 	and.w	r3, r3, #7
 80069ce:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	2b06      	cmp	r3, #6
 80069d4:	d010      	beq.n	80069f8 <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f042 0201 	orr.w	r2, r2, #1
 80069e4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069e6:	e007      	b.n	80069f8 <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f042 0201 	orr.w	r2, r2, #1
 80069f6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80069f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3710      	adds	r7, #16
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	40010000 	.word	0x40010000
 8006a08:	40010400 	.word	0x40010400
 8006a0c:	40000400 	.word	0x40000400
 8006a10:	40000800 	.word	0x40000800
 8006a14:	40000c00 	.word	0x40000c00
 8006a18:	40014000 	.word	0x40014000
 8006a1c:	40001800 	.word	0x40001800

08006a20 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	2b0c      	cmp	r3, #12
 8006a32:	d841      	bhi.n	8006ab8 <HAL_TIM_OC_Stop_IT+0x98>
 8006a34:	a201      	add	r2, pc, #4	; (adr r2, 8006a3c <HAL_TIM_OC_Stop_IT+0x1c>)
 8006a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a3a:	bf00      	nop
 8006a3c:	08006a71 	.word	0x08006a71
 8006a40:	08006ab9 	.word	0x08006ab9
 8006a44:	08006ab9 	.word	0x08006ab9
 8006a48:	08006ab9 	.word	0x08006ab9
 8006a4c:	08006a83 	.word	0x08006a83
 8006a50:	08006ab9 	.word	0x08006ab9
 8006a54:	08006ab9 	.word	0x08006ab9
 8006a58:	08006ab9 	.word	0x08006ab9
 8006a5c:	08006a95 	.word	0x08006a95
 8006a60:	08006ab9 	.word	0x08006ab9
 8006a64:	08006ab9 	.word	0x08006ab9
 8006a68:	08006ab9 	.word	0x08006ab9
 8006a6c:	08006aa7 	.word	0x08006aa7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68da      	ldr	r2, [r3, #12]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f022 0202 	bic.w	r2, r2, #2
 8006a7e:	60da      	str	r2, [r3, #12]
      break;
 8006a80:	e01d      	b.n	8006abe <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	68da      	ldr	r2, [r3, #12]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f022 0204 	bic.w	r2, r2, #4
 8006a90:	60da      	str	r2, [r3, #12]
      break;
 8006a92:	e014      	b.n	8006abe <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	68da      	ldr	r2, [r3, #12]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f022 0208 	bic.w	r2, r2, #8
 8006aa2:	60da      	str	r2, [r3, #12]
      break;
 8006aa4:	e00b      	b.n	8006abe <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	68da      	ldr	r2, [r3, #12]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f022 0210 	bic.w	r2, r2, #16
 8006ab4:	60da      	str	r2, [r3, #12]
      break;
 8006ab6:	e002      	b.n	8006abe <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	73fb      	strb	r3, [r7, #15]
      break;
 8006abc:	bf00      	nop
  }

  if (status == HAL_OK)
 8006abe:	7bfb      	ldrb	r3, [r7, #15]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d161      	bne.n	8006b88 <HAL_TIM_OC_Stop_IT+0x168>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	6839      	ldr	r1, [r7, #0]
 8006acc:	4618      	mov	r0, r3
 8006ace:	f001 f8fd 	bl	8007ccc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a2f      	ldr	r2, [pc, #188]	; (8006b94 <HAL_TIM_OC_Stop_IT+0x174>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d004      	beq.n	8006ae6 <HAL_TIM_OC_Stop_IT+0xc6>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a2d      	ldr	r2, [pc, #180]	; (8006b98 <HAL_TIM_OC_Stop_IT+0x178>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d101      	bne.n	8006aea <HAL_TIM_OC_Stop_IT+0xca>
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e000      	b.n	8006aec <HAL_TIM_OC_Stop_IT+0xcc>
 8006aea:	2300      	movs	r3, #0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d017      	beq.n	8006b20 <HAL_TIM_OC_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	6a1a      	ldr	r2, [r3, #32]
 8006af6:	f241 1311 	movw	r3, #4369	; 0x1111
 8006afa:	4013      	ands	r3, r2
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d10f      	bne.n	8006b20 <HAL_TIM_OC_Stop_IT+0x100>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	6a1a      	ldr	r2, [r3, #32]
 8006b06:	f240 4344 	movw	r3, #1092	; 0x444
 8006b0a:	4013      	ands	r3, r2
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d107      	bne.n	8006b20 <HAL_TIM_OC_Stop_IT+0x100>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006b1e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	6a1a      	ldr	r2, [r3, #32]
 8006b26:	f241 1311 	movw	r3, #4369	; 0x1111
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d10f      	bne.n	8006b50 <HAL_TIM_OC_Stop_IT+0x130>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	6a1a      	ldr	r2, [r3, #32]
 8006b36:	f240 4344 	movw	r3, #1092	; 0x444
 8006b3a:	4013      	ands	r3, r2
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d107      	bne.n	8006b50 <HAL_TIM_OC_Stop_IT+0x130>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f022 0201 	bic.w	r2, r2, #1
 8006b4e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d104      	bne.n	8006b60 <HAL_TIM_OC_Stop_IT+0x140>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b5e:	e013      	b.n	8006b88 <HAL_TIM_OC_Stop_IT+0x168>
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	2b04      	cmp	r3, #4
 8006b64:	d104      	bne.n	8006b70 <HAL_TIM_OC_Stop_IT+0x150>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b6e:	e00b      	b.n	8006b88 <HAL_TIM_OC_Stop_IT+0x168>
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	2b08      	cmp	r3, #8
 8006b74:	d104      	bne.n	8006b80 <HAL_TIM_OC_Stop_IT+0x160>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b7e:	e003      	b.n	8006b88 <HAL_TIM_OC_Stop_IT+0x168>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8006b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3710      	adds	r7, #16
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	40010000 	.word	0x40010000
 8006b98:	40010400 	.word	0x40010400

08006b9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d101      	bne.n	8006bae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e041      	b.n	8006c32 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d106      	bne.n	8006bc8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 f839 	bl	8006c3a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2202      	movs	r2, #2
 8006bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	3304      	adds	r3, #4
 8006bd8:	4619      	mov	r1, r3
 8006bda:	4610      	mov	r0, r2
 8006bdc:	f000 fd80 	bl	80076e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3708      	adds	r7, #8
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}

08006c3a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b083      	sub	sp, #12
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006c42:	bf00      	nop
 8006c44:	370c      	adds	r7, #12
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr
	...

08006c50 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d109      	bne.n	8006c78 <HAL_TIM_PWM_Start_IT+0x28>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	bf14      	ite	ne
 8006c70:	2301      	movne	r3, #1
 8006c72:	2300      	moveq	r3, #0
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	e022      	b.n	8006cbe <HAL_TIM_PWM_Start_IT+0x6e>
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	2b04      	cmp	r3, #4
 8006c7c:	d109      	bne.n	8006c92 <HAL_TIM_PWM_Start_IT+0x42>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	bf14      	ite	ne
 8006c8a:	2301      	movne	r3, #1
 8006c8c:	2300      	moveq	r3, #0
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	e015      	b.n	8006cbe <HAL_TIM_PWM_Start_IT+0x6e>
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	2b08      	cmp	r3, #8
 8006c96:	d109      	bne.n	8006cac <HAL_TIM_PWM_Start_IT+0x5c>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	bf14      	ite	ne
 8006ca4:	2301      	movne	r3, #1
 8006ca6:	2300      	moveq	r3, #0
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	e008      	b.n	8006cbe <HAL_TIM_PWM_Start_IT+0x6e>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	bf14      	ite	ne
 8006cb8:	2301      	movne	r3, #1
 8006cba:	2300      	moveq	r3, #0
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d001      	beq.n	8006cc6 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e0c7      	b.n	8006e56 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d104      	bne.n	8006cd6 <HAL_TIM_PWM_Start_IT+0x86>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2202      	movs	r2, #2
 8006cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cd4:	e013      	b.n	8006cfe <HAL_TIM_PWM_Start_IT+0xae>
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	2b04      	cmp	r3, #4
 8006cda:	d104      	bne.n	8006ce6 <HAL_TIM_PWM_Start_IT+0x96>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2202      	movs	r2, #2
 8006ce0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ce4:	e00b      	b.n	8006cfe <HAL_TIM_PWM_Start_IT+0xae>
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	2b08      	cmp	r3, #8
 8006cea:	d104      	bne.n	8006cf6 <HAL_TIM_PWM_Start_IT+0xa6>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2202      	movs	r2, #2
 8006cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cf4:	e003      	b.n	8006cfe <HAL_TIM_PWM_Start_IT+0xae>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2202      	movs	r2, #2
 8006cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	2b0c      	cmp	r3, #12
 8006d02:	d841      	bhi.n	8006d88 <HAL_TIM_PWM_Start_IT+0x138>
 8006d04:	a201      	add	r2, pc, #4	; (adr r2, 8006d0c <HAL_TIM_PWM_Start_IT+0xbc>)
 8006d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d0a:	bf00      	nop
 8006d0c:	08006d41 	.word	0x08006d41
 8006d10:	08006d89 	.word	0x08006d89
 8006d14:	08006d89 	.word	0x08006d89
 8006d18:	08006d89 	.word	0x08006d89
 8006d1c:	08006d53 	.word	0x08006d53
 8006d20:	08006d89 	.word	0x08006d89
 8006d24:	08006d89 	.word	0x08006d89
 8006d28:	08006d89 	.word	0x08006d89
 8006d2c:	08006d65 	.word	0x08006d65
 8006d30:	08006d89 	.word	0x08006d89
 8006d34:	08006d89 	.word	0x08006d89
 8006d38:	08006d89 	.word	0x08006d89
 8006d3c:	08006d77 	.word	0x08006d77
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68da      	ldr	r2, [r3, #12]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f042 0202 	orr.w	r2, r2, #2
 8006d4e:	60da      	str	r2, [r3, #12]
      break;
 8006d50:	e01d      	b.n	8006d8e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68da      	ldr	r2, [r3, #12]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f042 0204 	orr.w	r2, r2, #4
 8006d60:	60da      	str	r2, [r3, #12]
      break;
 8006d62:	e014      	b.n	8006d8e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68da      	ldr	r2, [r3, #12]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f042 0208 	orr.w	r2, r2, #8
 8006d72:	60da      	str	r2, [r3, #12]
      break;
 8006d74:	e00b      	b.n	8006d8e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	68da      	ldr	r2, [r3, #12]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f042 0210 	orr.w	r2, r2, #16
 8006d84:	60da      	str	r2, [r3, #12]
      break;
 8006d86:	e002      	b.n	8006d8e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8006d8c:	bf00      	nop
  }

  if (status == HAL_OK)
 8006d8e:	7bfb      	ldrb	r3, [r7, #15]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d15f      	bne.n	8006e54 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	6839      	ldr	r1, [r7, #0]
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f000 ff95 	bl	8007ccc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a2e      	ldr	r2, [pc, #184]	; (8006e60 <HAL_TIM_PWM_Start_IT+0x210>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d004      	beq.n	8006db6 <HAL_TIM_PWM_Start_IT+0x166>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a2c      	ldr	r2, [pc, #176]	; (8006e64 <HAL_TIM_PWM_Start_IT+0x214>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d101      	bne.n	8006dba <HAL_TIM_PWM_Start_IT+0x16a>
 8006db6:	2301      	movs	r3, #1
 8006db8:	e000      	b.n	8006dbc <HAL_TIM_PWM_Start_IT+0x16c>
 8006dba:	2300      	movs	r3, #0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d007      	beq.n	8006dd0 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006dce:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a22      	ldr	r2, [pc, #136]	; (8006e60 <HAL_TIM_PWM_Start_IT+0x210>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d022      	beq.n	8006e20 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006de2:	d01d      	beq.n	8006e20 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a1f      	ldr	r2, [pc, #124]	; (8006e68 <HAL_TIM_PWM_Start_IT+0x218>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d018      	beq.n	8006e20 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a1e      	ldr	r2, [pc, #120]	; (8006e6c <HAL_TIM_PWM_Start_IT+0x21c>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d013      	beq.n	8006e20 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a1c      	ldr	r2, [pc, #112]	; (8006e70 <HAL_TIM_PWM_Start_IT+0x220>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d00e      	beq.n	8006e20 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a17      	ldr	r2, [pc, #92]	; (8006e64 <HAL_TIM_PWM_Start_IT+0x214>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d009      	beq.n	8006e20 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a18      	ldr	r2, [pc, #96]	; (8006e74 <HAL_TIM_PWM_Start_IT+0x224>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d004      	beq.n	8006e20 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a17      	ldr	r2, [pc, #92]	; (8006e78 <HAL_TIM_PWM_Start_IT+0x228>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d111      	bne.n	8006e44 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	f003 0307 	and.w	r3, r3, #7
 8006e2a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	2b06      	cmp	r3, #6
 8006e30:	d010      	beq.n	8006e54 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f042 0201 	orr.w	r2, r2, #1
 8006e40:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e42:	e007      	b.n	8006e54 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f042 0201 	orr.w	r2, r2, #1
 8006e52:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	40010000 	.word	0x40010000
 8006e64:	40010400 	.word	0x40010400
 8006e68:	40000400 	.word	0x40000400
 8006e6c:	40000800 	.word	0x40000800
 8006e70:	40000c00 	.word	0x40000c00
 8006e74:	40014000 	.word	0x40014000
 8006e78:	40001800 	.word	0x40001800

08006e7c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b086      	sub	sp, #24
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d101      	bne.n	8006e90 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e097      	b.n	8006fc0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d106      	bne.n	8006eaa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f7fb fee9 	bl	8002c7c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2202      	movs	r2, #2
 8006eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	6812      	ldr	r2, [r2, #0]
 8006ebc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ec0:	f023 0307 	bic.w	r3, r3, #7
 8006ec4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	3304      	adds	r3, #4
 8006ece:	4619      	mov	r1, r3
 8006ed0:	4610      	mov	r0, r2
 8006ed2:	f000 fc05 	bl	80076e0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	699b      	ldr	r3, [r3, #24]
 8006ee4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	6a1b      	ldr	r3, [r3, #32]
 8006eec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	697a      	ldr	r2, [r7, #20]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006efe:	f023 0303 	bic.w	r3, r3, #3
 8006f02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	689a      	ldr	r2, [r3, #8]
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	699b      	ldr	r3, [r3, #24]
 8006f0c:	021b      	lsls	r3, r3, #8
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	693a      	ldr	r2, [r7, #16]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006f1c:	f023 030c 	bic.w	r3, r3, #12
 8006f20:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	68da      	ldr	r2, [r3, #12]
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	69db      	ldr	r3, [r3, #28]
 8006f36:	021b      	lsls	r3, r3, #8
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	693a      	ldr	r2, [r7, #16]
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	691b      	ldr	r3, [r3, #16]
 8006f44:	011a      	lsls	r2, r3, #4
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	6a1b      	ldr	r3, [r3, #32]
 8006f4a:	031b      	lsls	r3, r3, #12
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	693a      	ldr	r2, [r7, #16]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006f5a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006f62:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	685a      	ldr	r2, [r3, #4]
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	695b      	ldr	r3, [r3, #20]
 8006f6c:	011b      	lsls	r3, r3, #4
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	68fa      	ldr	r2, [r7, #12]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	697a      	ldr	r2, [r7, #20]
 8006f7c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	693a      	ldr	r2, [r7, #16]
 8006f84:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	68fa      	ldr	r2, [r7, #12]
 8006f8c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2201      	movs	r2, #1
 8006f92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2201      	movs	r2, #1
 8006faa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2201      	movs	r2, #1
 8006fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3718      	adds	r7, #24
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fd8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006fe0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006fe8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006ff0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d110      	bne.n	800701a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ff8:	7bfb      	ldrb	r3, [r7, #15]
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d102      	bne.n	8007004 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ffe:	7b7b      	ldrb	r3, [r7, #13]
 8007000:	2b01      	cmp	r3, #1
 8007002:	d001      	beq.n	8007008 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	e069      	b.n	80070dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2202      	movs	r2, #2
 800700c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2202      	movs	r2, #2
 8007014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007018:	e031      	b.n	800707e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	2b04      	cmp	r3, #4
 800701e:	d110      	bne.n	8007042 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007020:	7bbb      	ldrb	r3, [r7, #14]
 8007022:	2b01      	cmp	r3, #1
 8007024:	d102      	bne.n	800702c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007026:	7b3b      	ldrb	r3, [r7, #12]
 8007028:	2b01      	cmp	r3, #1
 800702a:	d001      	beq.n	8007030 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	e055      	b.n	80070dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2202      	movs	r2, #2
 8007034:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2202      	movs	r2, #2
 800703c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007040:	e01d      	b.n	800707e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007042:	7bfb      	ldrb	r3, [r7, #15]
 8007044:	2b01      	cmp	r3, #1
 8007046:	d108      	bne.n	800705a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007048:	7bbb      	ldrb	r3, [r7, #14]
 800704a:	2b01      	cmp	r3, #1
 800704c:	d105      	bne.n	800705a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800704e:	7b7b      	ldrb	r3, [r7, #13]
 8007050:	2b01      	cmp	r3, #1
 8007052:	d102      	bne.n	800705a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007054:	7b3b      	ldrb	r3, [r7, #12]
 8007056:	2b01      	cmp	r3, #1
 8007058:	d001      	beq.n	800705e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	e03e      	b.n	80070dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2202      	movs	r2, #2
 8007062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2202      	movs	r2, #2
 800706a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2202      	movs	r2, #2
 8007072:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2202      	movs	r2, #2
 800707a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d003      	beq.n	800708c <HAL_TIM_Encoder_Start+0xc4>
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	2b04      	cmp	r3, #4
 8007088:	d008      	beq.n	800709c <HAL_TIM_Encoder_Start+0xd4>
 800708a:	e00f      	b.n	80070ac <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2201      	movs	r2, #1
 8007092:	2100      	movs	r1, #0
 8007094:	4618      	mov	r0, r3
 8007096:	f000 fe19 	bl	8007ccc <TIM_CCxChannelCmd>
      break;
 800709a:	e016      	b.n	80070ca <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	2201      	movs	r2, #1
 80070a2:	2104      	movs	r1, #4
 80070a4:	4618      	mov	r0, r3
 80070a6:	f000 fe11 	bl	8007ccc <TIM_CCxChannelCmd>
      break;
 80070aa:	e00e      	b.n	80070ca <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2201      	movs	r2, #1
 80070b2:	2100      	movs	r1, #0
 80070b4:	4618      	mov	r0, r3
 80070b6:	f000 fe09 	bl	8007ccc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2201      	movs	r2, #1
 80070c0:	2104      	movs	r1, #4
 80070c2:	4618      	mov	r0, r3
 80070c4:	f000 fe02 	bl	8007ccc <TIM_CCxChannelCmd>
      break;
 80070c8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f042 0201 	orr.w	r2, r2, #1
 80070d8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80070da:	2300      	movs	r3, #0
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3710      	adds	r7, #16
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	f003 0302 	and.w	r3, r3, #2
 8007102:	2b00      	cmp	r3, #0
 8007104:	d020      	beq.n	8007148 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f003 0302 	and.w	r3, r3, #2
 800710c:	2b00      	cmp	r3, #0
 800710e:	d01b      	beq.n	8007148 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f06f 0202 	mvn.w	r2, #2
 8007118:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2201      	movs	r2, #1
 800711e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	699b      	ldr	r3, [r3, #24]
 8007126:	f003 0303 	and.w	r3, r3, #3
 800712a:	2b00      	cmp	r3, #0
 800712c:	d003      	beq.n	8007136 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 fab7 	bl	80076a2 <HAL_TIM_IC_CaptureCallback>
 8007134:	e005      	b.n	8007142 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 faa9 	bl	800768e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 faba 	bl	80076b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	f003 0304 	and.w	r3, r3, #4
 800714e:	2b00      	cmp	r3, #0
 8007150:	d020      	beq.n	8007194 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f003 0304 	and.w	r3, r3, #4
 8007158:	2b00      	cmp	r3, #0
 800715a:	d01b      	beq.n	8007194 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f06f 0204 	mvn.w	r2, #4
 8007164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2202      	movs	r2, #2
 800716a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	699b      	ldr	r3, [r3, #24]
 8007172:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007176:	2b00      	cmp	r3, #0
 8007178:	d003      	beq.n	8007182 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 fa91 	bl	80076a2 <HAL_TIM_IC_CaptureCallback>
 8007180:	e005      	b.n	800718e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 fa83 	bl	800768e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 fa94 	bl	80076b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	f003 0308 	and.w	r3, r3, #8
 800719a:	2b00      	cmp	r3, #0
 800719c:	d020      	beq.n	80071e0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f003 0308 	and.w	r3, r3, #8
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d01b      	beq.n	80071e0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f06f 0208 	mvn.w	r2, #8
 80071b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2204      	movs	r2, #4
 80071b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	69db      	ldr	r3, [r3, #28]
 80071be:	f003 0303 	and.w	r3, r3, #3
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d003      	beq.n	80071ce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 fa6b 	bl	80076a2 <HAL_TIM_IC_CaptureCallback>
 80071cc:	e005      	b.n	80071da <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 fa5d 	bl	800768e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 fa6e 	bl	80076b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	f003 0310 	and.w	r3, r3, #16
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d020      	beq.n	800722c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f003 0310 	and.w	r3, r3, #16
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d01b      	beq.n	800722c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f06f 0210 	mvn.w	r2, #16
 80071fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2208      	movs	r2, #8
 8007202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	69db      	ldr	r3, [r3, #28]
 800720a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800720e:	2b00      	cmp	r3, #0
 8007210:	d003      	beq.n	800721a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 fa45 	bl	80076a2 <HAL_TIM_IC_CaptureCallback>
 8007218:	e005      	b.n	8007226 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 fa37 	bl	800768e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 fa48 	bl	80076b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	f003 0301 	and.w	r3, r3, #1
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00c      	beq.n	8007250 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f003 0301 	and.w	r3, r3, #1
 800723c:	2b00      	cmp	r3, #0
 800723e:	d007      	beq.n	8007250 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f06f 0201 	mvn.w	r2, #1
 8007248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f7fb f864 	bl	8002318 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00c      	beq.n	8007274 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007260:	2b00      	cmp	r3, #0
 8007262:	d007      	beq.n	8007274 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800726c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 fe2a 	bl	8007ec8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00c      	beq.n	8007298 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007284:	2b00      	cmp	r3, #0
 8007286:	d007      	beq.n	8007298 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 fa19 	bl	80076ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	f003 0320 	and.w	r3, r3, #32
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00c      	beq.n	80072bc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f003 0320 	and.w	r3, r3, #32
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d007      	beq.n	80072bc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f06f 0220 	mvn.w	r2, #32
 80072b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 fdfc 	bl	8007eb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80072bc:	bf00      	nop
 80072be:	3710      	adds	r7, #16
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b086      	sub	sp, #24
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072d0:	2300      	movs	r3, #0
 80072d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d101      	bne.n	80072e2 <HAL_TIM_OC_ConfigChannel+0x1e>
 80072de:	2302      	movs	r3, #2
 80072e0:	e048      	b.n	8007374 <HAL_TIM_OC_ConfigChannel+0xb0>
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2201      	movs	r2, #1
 80072e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2b0c      	cmp	r3, #12
 80072ee:	d839      	bhi.n	8007364 <HAL_TIM_OC_ConfigChannel+0xa0>
 80072f0:	a201      	add	r2, pc, #4	; (adr r2, 80072f8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80072f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f6:	bf00      	nop
 80072f8:	0800732d 	.word	0x0800732d
 80072fc:	08007365 	.word	0x08007365
 8007300:	08007365 	.word	0x08007365
 8007304:	08007365 	.word	0x08007365
 8007308:	0800733b 	.word	0x0800733b
 800730c:	08007365 	.word	0x08007365
 8007310:	08007365 	.word	0x08007365
 8007314:	08007365 	.word	0x08007365
 8007318:	08007349 	.word	0x08007349
 800731c:	08007365 	.word	0x08007365
 8007320:	08007365 	.word	0x08007365
 8007324:	08007365 	.word	0x08007365
 8007328:	08007357 	.word	0x08007357
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	68b9      	ldr	r1, [r7, #8]
 8007332:	4618      	mov	r0, r3
 8007334:	f000 fa80 	bl	8007838 <TIM_OC1_SetConfig>
      break;
 8007338:	e017      	b.n	800736a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	68b9      	ldr	r1, [r7, #8]
 8007340:	4618      	mov	r0, r3
 8007342:	f000 fae9 	bl	8007918 <TIM_OC2_SetConfig>
      break;
 8007346:	e010      	b.n	800736a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68b9      	ldr	r1, [r7, #8]
 800734e:	4618      	mov	r0, r3
 8007350:	f000 fb58 	bl	8007a04 <TIM_OC3_SetConfig>
      break;
 8007354:	e009      	b.n	800736a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	68b9      	ldr	r1, [r7, #8]
 800735c:	4618      	mov	r0, r3
 800735e:	f000 fbc5 	bl	8007aec <TIM_OC4_SetConfig>
      break;
 8007362:	e002      	b.n	800736a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	75fb      	strb	r3, [r7, #23]
      break;
 8007368:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2200      	movs	r2, #0
 800736e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007372:	7dfb      	ldrb	r3, [r7, #23]
}
 8007374:	4618      	mov	r0, r3
 8007376:	3718      	adds	r7, #24
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b086      	sub	sp, #24
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007388:	2300      	movs	r3, #0
 800738a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007392:	2b01      	cmp	r3, #1
 8007394:	d101      	bne.n	800739a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007396:	2302      	movs	r3, #2
 8007398:	e0ae      	b.n	80074f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2201      	movs	r2, #1
 800739e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2b0c      	cmp	r3, #12
 80073a6:	f200 809f 	bhi.w	80074e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80073aa:	a201      	add	r2, pc, #4	; (adr r2, 80073b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80073ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b0:	080073e5 	.word	0x080073e5
 80073b4:	080074e9 	.word	0x080074e9
 80073b8:	080074e9 	.word	0x080074e9
 80073bc:	080074e9 	.word	0x080074e9
 80073c0:	08007425 	.word	0x08007425
 80073c4:	080074e9 	.word	0x080074e9
 80073c8:	080074e9 	.word	0x080074e9
 80073cc:	080074e9 	.word	0x080074e9
 80073d0:	08007467 	.word	0x08007467
 80073d4:	080074e9 	.word	0x080074e9
 80073d8:	080074e9 	.word	0x080074e9
 80073dc:	080074e9 	.word	0x080074e9
 80073e0:	080074a7 	.word	0x080074a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	68b9      	ldr	r1, [r7, #8]
 80073ea:	4618      	mov	r0, r3
 80073ec:	f000 fa24 	bl	8007838 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	699a      	ldr	r2, [r3, #24]
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f042 0208 	orr.w	r2, r2, #8
 80073fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	699a      	ldr	r2, [r3, #24]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f022 0204 	bic.w	r2, r2, #4
 800740e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	6999      	ldr	r1, [r3, #24]
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	691a      	ldr	r2, [r3, #16]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	430a      	orrs	r2, r1
 8007420:	619a      	str	r2, [r3, #24]
      break;
 8007422:	e064      	b.n	80074ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	68b9      	ldr	r1, [r7, #8]
 800742a:	4618      	mov	r0, r3
 800742c:	f000 fa74 	bl	8007918 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	699a      	ldr	r2, [r3, #24]
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800743e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	699a      	ldr	r2, [r3, #24]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800744e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	6999      	ldr	r1, [r3, #24]
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	021a      	lsls	r2, r3, #8
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	430a      	orrs	r2, r1
 8007462:	619a      	str	r2, [r3, #24]
      break;
 8007464:	e043      	b.n	80074ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	68b9      	ldr	r1, [r7, #8]
 800746c:	4618      	mov	r0, r3
 800746e:	f000 fac9 	bl	8007a04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	69da      	ldr	r2, [r3, #28]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f042 0208 	orr.w	r2, r2, #8
 8007480:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	69da      	ldr	r2, [r3, #28]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f022 0204 	bic.w	r2, r2, #4
 8007490:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	69d9      	ldr	r1, [r3, #28]
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	691a      	ldr	r2, [r3, #16]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	430a      	orrs	r2, r1
 80074a2:	61da      	str	r2, [r3, #28]
      break;
 80074a4:	e023      	b.n	80074ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	68b9      	ldr	r1, [r7, #8]
 80074ac:	4618      	mov	r0, r3
 80074ae:	f000 fb1d 	bl	8007aec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	69da      	ldr	r2, [r3, #28]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	69da      	ldr	r2, [r3, #28]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	69d9      	ldr	r1, [r3, #28]
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	021a      	lsls	r2, r3, #8
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	430a      	orrs	r2, r1
 80074e4:	61da      	str	r2, [r3, #28]
      break;
 80074e6:	e002      	b.n	80074ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	75fb      	strb	r3, [r7, #23]
      break;
 80074ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2200      	movs	r2, #0
 80074f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80074f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3718      	adds	r7, #24
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800750a:	2300      	movs	r3, #0
 800750c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007514:	2b01      	cmp	r3, #1
 8007516:	d101      	bne.n	800751c <HAL_TIM_ConfigClockSource+0x1c>
 8007518:	2302      	movs	r3, #2
 800751a:	e0b4      	b.n	8007686 <HAL_TIM_ConfigClockSource+0x186>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2202      	movs	r2, #2
 8007528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800753a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007542:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	68ba      	ldr	r2, [r7, #8]
 800754a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007554:	d03e      	beq.n	80075d4 <HAL_TIM_ConfigClockSource+0xd4>
 8007556:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800755a:	f200 8087 	bhi.w	800766c <HAL_TIM_ConfigClockSource+0x16c>
 800755e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007562:	f000 8086 	beq.w	8007672 <HAL_TIM_ConfigClockSource+0x172>
 8007566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800756a:	d87f      	bhi.n	800766c <HAL_TIM_ConfigClockSource+0x16c>
 800756c:	2b70      	cmp	r3, #112	; 0x70
 800756e:	d01a      	beq.n	80075a6 <HAL_TIM_ConfigClockSource+0xa6>
 8007570:	2b70      	cmp	r3, #112	; 0x70
 8007572:	d87b      	bhi.n	800766c <HAL_TIM_ConfigClockSource+0x16c>
 8007574:	2b60      	cmp	r3, #96	; 0x60
 8007576:	d050      	beq.n	800761a <HAL_TIM_ConfigClockSource+0x11a>
 8007578:	2b60      	cmp	r3, #96	; 0x60
 800757a:	d877      	bhi.n	800766c <HAL_TIM_ConfigClockSource+0x16c>
 800757c:	2b50      	cmp	r3, #80	; 0x50
 800757e:	d03c      	beq.n	80075fa <HAL_TIM_ConfigClockSource+0xfa>
 8007580:	2b50      	cmp	r3, #80	; 0x50
 8007582:	d873      	bhi.n	800766c <HAL_TIM_ConfigClockSource+0x16c>
 8007584:	2b40      	cmp	r3, #64	; 0x40
 8007586:	d058      	beq.n	800763a <HAL_TIM_ConfigClockSource+0x13a>
 8007588:	2b40      	cmp	r3, #64	; 0x40
 800758a:	d86f      	bhi.n	800766c <HAL_TIM_ConfigClockSource+0x16c>
 800758c:	2b30      	cmp	r3, #48	; 0x30
 800758e:	d064      	beq.n	800765a <HAL_TIM_ConfigClockSource+0x15a>
 8007590:	2b30      	cmp	r3, #48	; 0x30
 8007592:	d86b      	bhi.n	800766c <HAL_TIM_ConfigClockSource+0x16c>
 8007594:	2b20      	cmp	r3, #32
 8007596:	d060      	beq.n	800765a <HAL_TIM_ConfigClockSource+0x15a>
 8007598:	2b20      	cmp	r3, #32
 800759a:	d867      	bhi.n	800766c <HAL_TIM_ConfigClockSource+0x16c>
 800759c:	2b00      	cmp	r3, #0
 800759e:	d05c      	beq.n	800765a <HAL_TIM_ConfigClockSource+0x15a>
 80075a0:	2b10      	cmp	r3, #16
 80075a2:	d05a      	beq.n	800765a <HAL_TIM_ConfigClockSource+0x15a>
 80075a4:	e062      	b.n	800766c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80075b6:	f000 fb69 	bl	8007c8c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80075c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	68ba      	ldr	r2, [r7, #8]
 80075d0:	609a      	str	r2, [r3, #8]
      break;
 80075d2:	e04f      	b.n	8007674 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80075e4:	f000 fb52 	bl	8007c8c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	689a      	ldr	r2, [r3, #8]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80075f6:	609a      	str	r2, [r3, #8]
      break;
 80075f8:	e03c      	b.n	8007674 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007606:	461a      	mov	r2, r3
 8007608:	f000 fac6 	bl	8007b98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2150      	movs	r1, #80	; 0x50
 8007612:	4618      	mov	r0, r3
 8007614:	f000 fb1f 	bl	8007c56 <TIM_ITRx_SetConfig>
      break;
 8007618:	e02c      	b.n	8007674 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007626:	461a      	mov	r2, r3
 8007628:	f000 fae5 	bl	8007bf6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2160      	movs	r1, #96	; 0x60
 8007632:	4618      	mov	r0, r3
 8007634:	f000 fb0f 	bl	8007c56 <TIM_ITRx_SetConfig>
      break;
 8007638:	e01c      	b.n	8007674 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007646:	461a      	mov	r2, r3
 8007648:	f000 faa6 	bl	8007b98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2140      	movs	r1, #64	; 0x40
 8007652:	4618      	mov	r0, r3
 8007654:	f000 faff 	bl	8007c56 <TIM_ITRx_SetConfig>
      break;
 8007658:	e00c      	b.n	8007674 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4619      	mov	r1, r3
 8007664:	4610      	mov	r0, r2
 8007666:	f000 faf6 	bl	8007c56 <TIM_ITRx_SetConfig>
      break;
 800766a:	e003      	b.n	8007674 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800766c:	2301      	movs	r3, #1
 800766e:	73fb      	strb	r3, [r7, #15]
      break;
 8007670:	e000      	b.n	8007674 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007672:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007684:	7bfb      	ldrb	r3, [r7, #15]
}
 8007686:	4618      	mov	r0, r3
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}

0800768e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800768e:	b480      	push	{r7}
 8007690:	b083      	sub	sp, #12
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007696:	bf00      	nop
 8007698:	370c      	adds	r7, #12
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr

080076a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80076a2:	b480      	push	{r7}
 80076a4:	b083      	sub	sp, #12
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80076aa:	bf00      	nop
 80076ac:	370c      	adds	r7, #12
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr

080076b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076b6:	b480      	push	{r7}
 80076b8:	b083      	sub	sp, #12
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076be:	bf00      	nop
 80076c0:	370c      	adds	r7, #12
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr

080076ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80076ca:	b480      	push	{r7}
 80076cc:	b083      	sub	sp, #12
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80076d2:	bf00      	nop
 80076d4:	370c      	adds	r7, #12
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr
	...

080076e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b085      	sub	sp, #20
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a46      	ldr	r2, [pc, #280]	; (800780c <TIM_Base_SetConfig+0x12c>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d013      	beq.n	8007720 <TIM_Base_SetConfig+0x40>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076fe:	d00f      	beq.n	8007720 <TIM_Base_SetConfig+0x40>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a43      	ldr	r2, [pc, #268]	; (8007810 <TIM_Base_SetConfig+0x130>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d00b      	beq.n	8007720 <TIM_Base_SetConfig+0x40>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4a42      	ldr	r2, [pc, #264]	; (8007814 <TIM_Base_SetConfig+0x134>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d007      	beq.n	8007720 <TIM_Base_SetConfig+0x40>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4a41      	ldr	r2, [pc, #260]	; (8007818 <TIM_Base_SetConfig+0x138>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d003      	beq.n	8007720 <TIM_Base_SetConfig+0x40>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	4a40      	ldr	r2, [pc, #256]	; (800781c <TIM_Base_SetConfig+0x13c>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d108      	bne.n	8007732 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007726:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	68fa      	ldr	r2, [r7, #12]
 800772e:	4313      	orrs	r3, r2
 8007730:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4a35      	ldr	r2, [pc, #212]	; (800780c <TIM_Base_SetConfig+0x12c>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d02b      	beq.n	8007792 <TIM_Base_SetConfig+0xb2>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007740:	d027      	beq.n	8007792 <TIM_Base_SetConfig+0xb2>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a32      	ldr	r2, [pc, #200]	; (8007810 <TIM_Base_SetConfig+0x130>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d023      	beq.n	8007792 <TIM_Base_SetConfig+0xb2>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a31      	ldr	r2, [pc, #196]	; (8007814 <TIM_Base_SetConfig+0x134>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d01f      	beq.n	8007792 <TIM_Base_SetConfig+0xb2>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a30      	ldr	r2, [pc, #192]	; (8007818 <TIM_Base_SetConfig+0x138>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d01b      	beq.n	8007792 <TIM_Base_SetConfig+0xb2>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a2f      	ldr	r2, [pc, #188]	; (800781c <TIM_Base_SetConfig+0x13c>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d017      	beq.n	8007792 <TIM_Base_SetConfig+0xb2>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a2e      	ldr	r2, [pc, #184]	; (8007820 <TIM_Base_SetConfig+0x140>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d013      	beq.n	8007792 <TIM_Base_SetConfig+0xb2>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a2d      	ldr	r2, [pc, #180]	; (8007824 <TIM_Base_SetConfig+0x144>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d00f      	beq.n	8007792 <TIM_Base_SetConfig+0xb2>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4a2c      	ldr	r2, [pc, #176]	; (8007828 <TIM_Base_SetConfig+0x148>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d00b      	beq.n	8007792 <TIM_Base_SetConfig+0xb2>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4a2b      	ldr	r2, [pc, #172]	; (800782c <TIM_Base_SetConfig+0x14c>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d007      	beq.n	8007792 <TIM_Base_SetConfig+0xb2>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4a2a      	ldr	r2, [pc, #168]	; (8007830 <TIM_Base_SetConfig+0x150>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d003      	beq.n	8007792 <TIM_Base_SetConfig+0xb2>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4a29      	ldr	r2, [pc, #164]	; (8007834 <TIM_Base_SetConfig+0x154>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d108      	bne.n	80077a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007798:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	68fa      	ldr	r2, [r7, #12]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	695b      	ldr	r3, [r3, #20]
 80077ae:	4313      	orrs	r3, r2
 80077b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	68fa      	ldr	r2, [r7, #12]
 80077b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	689a      	ldr	r2, [r3, #8]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	4a10      	ldr	r2, [pc, #64]	; (800780c <TIM_Base_SetConfig+0x12c>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d003      	beq.n	80077d8 <TIM_Base_SetConfig+0xf8>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4a12      	ldr	r2, [pc, #72]	; (800781c <TIM_Base_SetConfig+0x13c>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d103      	bne.n	80077e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	691a      	ldr	r2, [r3, #16]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	f003 0301 	and.w	r3, r3, #1
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d105      	bne.n	80077fe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	691b      	ldr	r3, [r3, #16]
 80077f6:	f023 0201 	bic.w	r2, r3, #1
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	611a      	str	r2, [r3, #16]
  }
}
 80077fe:	bf00      	nop
 8007800:	3714      	adds	r7, #20
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr
 800780a:	bf00      	nop
 800780c:	40010000 	.word	0x40010000
 8007810:	40000400 	.word	0x40000400
 8007814:	40000800 	.word	0x40000800
 8007818:	40000c00 	.word	0x40000c00
 800781c:	40010400 	.word	0x40010400
 8007820:	40014000 	.word	0x40014000
 8007824:	40014400 	.word	0x40014400
 8007828:	40014800 	.word	0x40014800
 800782c:	40001800 	.word	0x40001800
 8007830:	40001c00 	.word	0x40001c00
 8007834:	40002000 	.word	0x40002000

08007838 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007838:	b480      	push	{r7}
 800783a:	b087      	sub	sp, #28
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a1b      	ldr	r3, [r3, #32]
 8007846:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6a1b      	ldr	r3, [r3, #32]
 800784c:	f023 0201 	bic.w	r2, r3, #1
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	699b      	ldr	r3, [r3, #24]
 800785e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f023 0303 	bic.w	r3, r3, #3
 800786e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	68fa      	ldr	r2, [r7, #12]
 8007876:	4313      	orrs	r3, r2
 8007878:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	f023 0302 	bic.w	r3, r3, #2
 8007880:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	697a      	ldr	r2, [r7, #20]
 8007888:	4313      	orrs	r3, r2
 800788a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	4a20      	ldr	r2, [pc, #128]	; (8007910 <TIM_OC1_SetConfig+0xd8>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d003      	beq.n	800789c <TIM_OC1_SetConfig+0x64>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	4a1f      	ldr	r2, [pc, #124]	; (8007914 <TIM_OC1_SetConfig+0xdc>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d10c      	bne.n	80078b6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	f023 0308 	bic.w	r3, r3, #8
 80078a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	697a      	ldr	r2, [r7, #20]
 80078aa:	4313      	orrs	r3, r2
 80078ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	f023 0304 	bic.w	r3, r3, #4
 80078b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4a15      	ldr	r2, [pc, #84]	; (8007910 <TIM_OC1_SetConfig+0xd8>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d003      	beq.n	80078c6 <TIM_OC1_SetConfig+0x8e>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4a14      	ldr	r2, [pc, #80]	; (8007914 <TIM_OC1_SetConfig+0xdc>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d111      	bne.n	80078ea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	695b      	ldr	r3, [r3, #20]
 80078da:	693a      	ldr	r2, [r7, #16]
 80078dc:	4313      	orrs	r3, r2
 80078de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	699b      	ldr	r3, [r3, #24]
 80078e4:	693a      	ldr	r2, [r7, #16]
 80078e6:	4313      	orrs	r3, r2
 80078e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	693a      	ldr	r2, [r7, #16]
 80078ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	68fa      	ldr	r2, [r7, #12]
 80078f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	685a      	ldr	r2, [r3, #4]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	697a      	ldr	r2, [r7, #20]
 8007902:	621a      	str	r2, [r3, #32]
}
 8007904:	bf00      	nop
 8007906:	371c      	adds	r7, #28
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr
 8007910:	40010000 	.word	0x40010000
 8007914:	40010400 	.word	0x40010400

08007918 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007918:	b480      	push	{r7}
 800791a:	b087      	sub	sp, #28
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6a1b      	ldr	r3, [r3, #32]
 8007926:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6a1b      	ldr	r3, [r3, #32]
 800792c:	f023 0210 	bic.w	r2, r3, #16
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	699b      	ldr	r3, [r3, #24]
 800793e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800794e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	021b      	lsls	r3, r3, #8
 8007956:	68fa      	ldr	r2, [r7, #12]
 8007958:	4313      	orrs	r3, r2
 800795a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	f023 0320 	bic.w	r3, r3, #32
 8007962:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	011b      	lsls	r3, r3, #4
 800796a:	697a      	ldr	r2, [r7, #20]
 800796c:	4313      	orrs	r3, r2
 800796e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	4a22      	ldr	r2, [pc, #136]	; (80079fc <TIM_OC2_SetConfig+0xe4>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d003      	beq.n	8007980 <TIM_OC2_SetConfig+0x68>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4a21      	ldr	r2, [pc, #132]	; (8007a00 <TIM_OC2_SetConfig+0xe8>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d10d      	bne.n	800799c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007986:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	011b      	lsls	r3, r3, #4
 800798e:	697a      	ldr	r2, [r7, #20]
 8007990:	4313      	orrs	r3, r2
 8007992:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800799a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	4a17      	ldr	r2, [pc, #92]	; (80079fc <TIM_OC2_SetConfig+0xe4>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d003      	beq.n	80079ac <TIM_OC2_SetConfig+0x94>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a16      	ldr	r2, [pc, #88]	; (8007a00 <TIM_OC2_SetConfig+0xe8>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d113      	bne.n	80079d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	695b      	ldr	r3, [r3, #20]
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	693a      	ldr	r2, [r7, #16]
 80079c4:	4313      	orrs	r3, r2
 80079c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	699b      	ldr	r3, [r3, #24]
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	693a      	ldr	r2, [r7, #16]
 80079d0:	4313      	orrs	r3, r2
 80079d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	693a      	ldr	r2, [r7, #16]
 80079d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	68fa      	ldr	r2, [r7, #12]
 80079de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	685a      	ldr	r2, [r3, #4]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	697a      	ldr	r2, [r7, #20]
 80079ec:	621a      	str	r2, [r3, #32]
}
 80079ee:	bf00      	nop
 80079f0:	371c      	adds	r7, #28
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr
 80079fa:	bf00      	nop
 80079fc:	40010000 	.word	0x40010000
 8007a00:	40010400 	.word	0x40010400

08007a04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b087      	sub	sp, #28
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6a1b      	ldr	r3, [r3, #32]
 8007a12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6a1b      	ldr	r3, [r3, #32]
 8007a18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	69db      	ldr	r3, [r3, #28]
 8007a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f023 0303 	bic.w	r3, r3, #3
 8007a3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	021b      	lsls	r3, r3, #8
 8007a54:	697a      	ldr	r2, [r7, #20]
 8007a56:	4313      	orrs	r3, r2
 8007a58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4a21      	ldr	r2, [pc, #132]	; (8007ae4 <TIM_OC3_SetConfig+0xe0>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d003      	beq.n	8007a6a <TIM_OC3_SetConfig+0x66>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	4a20      	ldr	r2, [pc, #128]	; (8007ae8 <TIM_OC3_SetConfig+0xe4>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d10d      	bne.n	8007a86 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	021b      	lsls	r3, r3, #8
 8007a78:	697a      	ldr	r2, [r7, #20]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a16      	ldr	r2, [pc, #88]	; (8007ae4 <TIM_OC3_SetConfig+0xe0>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d003      	beq.n	8007a96 <TIM_OC3_SetConfig+0x92>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a15      	ldr	r2, [pc, #84]	; (8007ae8 <TIM_OC3_SetConfig+0xe4>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d113      	bne.n	8007abe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007aa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	695b      	ldr	r3, [r3, #20]
 8007aaa:	011b      	lsls	r3, r3, #4
 8007aac:	693a      	ldr	r2, [r7, #16]
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	699b      	ldr	r3, [r3, #24]
 8007ab6:	011b      	lsls	r3, r3, #4
 8007ab8:	693a      	ldr	r2, [r7, #16]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	693a      	ldr	r2, [r7, #16]
 8007ac2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	68fa      	ldr	r2, [r7, #12]
 8007ac8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	685a      	ldr	r2, [r3, #4]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	697a      	ldr	r2, [r7, #20]
 8007ad6:	621a      	str	r2, [r3, #32]
}
 8007ad8:	bf00      	nop
 8007ada:	371c      	adds	r7, #28
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr
 8007ae4:	40010000 	.word	0x40010000
 8007ae8:	40010400 	.word	0x40010400

08007aec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b087      	sub	sp, #28
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6a1b      	ldr	r3, [r3, #32]
 8007afa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6a1b      	ldr	r3, [r3, #32]
 8007b00:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	69db      	ldr	r3, [r3, #28]
 8007b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	021b      	lsls	r3, r3, #8
 8007b2a:	68fa      	ldr	r2, [r7, #12]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	031b      	lsls	r3, r3, #12
 8007b3e:	693a      	ldr	r2, [r7, #16]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	4a12      	ldr	r2, [pc, #72]	; (8007b90 <TIM_OC4_SetConfig+0xa4>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d003      	beq.n	8007b54 <TIM_OC4_SetConfig+0x68>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	4a11      	ldr	r2, [pc, #68]	; (8007b94 <TIM_OC4_SetConfig+0xa8>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d109      	bne.n	8007b68 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	695b      	ldr	r3, [r3, #20]
 8007b60:	019b      	lsls	r3, r3, #6
 8007b62:	697a      	ldr	r2, [r7, #20]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	697a      	ldr	r2, [r7, #20]
 8007b6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	68fa      	ldr	r2, [r7, #12]
 8007b72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	685a      	ldr	r2, [r3, #4]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	693a      	ldr	r2, [r7, #16]
 8007b80:	621a      	str	r2, [r3, #32]
}
 8007b82:	bf00      	nop
 8007b84:	371c      	adds	r7, #28
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr
 8007b8e:	bf00      	nop
 8007b90:	40010000 	.word	0x40010000
 8007b94:	40010400 	.word	0x40010400

08007b98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b087      	sub	sp, #28
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	60b9      	str	r1, [r7, #8]
 8007ba2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	6a1b      	ldr	r3, [r3, #32]
 8007ba8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	6a1b      	ldr	r3, [r3, #32]
 8007bae:	f023 0201 	bic.w	r2, r3, #1
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	699b      	ldr	r3, [r3, #24]
 8007bba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007bc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	011b      	lsls	r3, r3, #4
 8007bc8:	693a      	ldr	r2, [r7, #16]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	f023 030a 	bic.w	r3, r3, #10
 8007bd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007bd6:	697a      	ldr	r2, [r7, #20]
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	693a      	ldr	r2, [r7, #16]
 8007be2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	697a      	ldr	r2, [r7, #20]
 8007be8:	621a      	str	r2, [r3, #32]
}
 8007bea:	bf00      	nop
 8007bec:	371c      	adds	r7, #28
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr

08007bf6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007bf6:	b480      	push	{r7}
 8007bf8:	b087      	sub	sp, #28
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	60f8      	str	r0, [r7, #12]
 8007bfe:	60b9      	str	r1, [r7, #8]
 8007c00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	6a1b      	ldr	r3, [r3, #32]
 8007c06:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6a1b      	ldr	r3, [r3, #32]
 8007c0c:	f023 0210 	bic.w	r2, r3, #16
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	699b      	ldr	r3, [r3, #24]
 8007c18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	031b      	lsls	r3, r3, #12
 8007c26:	693a      	ldr	r2, [r7, #16]
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007c32:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	011b      	lsls	r3, r3, #4
 8007c38:	697a      	ldr	r2, [r7, #20]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	693a      	ldr	r2, [r7, #16]
 8007c42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	697a      	ldr	r2, [r7, #20]
 8007c48:	621a      	str	r2, [r3, #32]
}
 8007c4a:	bf00      	nop
 8007c4c:	371c      	adds	r7, #28
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr

08007c56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c56:	b480      	push	{r7}
 8007c58:	b085      	sub	sp, #20
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
 8007c5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c6e:	683a      	ldr	r2, [r7, #0]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	f043 0307 	orr.w	r3, r3, #7
 8007c78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	68fa      	ldr	r2, [r7, #12]
 8007c7e:	609a      	str	r2, [r3, #8]
}
 8007c80:	bf00      	nop
 8007c82:	3714      	adds	r7, #20
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr

08007c8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b087      	sub	sp, #28
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	60b9      	str	r1, [r7, #8]
 8007c96:	607a      	str	r2, [r7, #4]
 8007c98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ca6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	021a      	lsls	r2, r3, #8
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	431a      	orrs	r2, r3
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	697a      	ldr	r2, [r7, #20]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	697a      	ldr	r2, [r7, #20]
 8007cbe:	609a      	str	r2, [r3, #8]
}
 8007cc0:	bf00      	nop
 8007cc2:	371c      	adds	r7, #28
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b087      	sub	sp, #28
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	f003 031f 	and.w	r3, r3, #31
 8007cde:	2201      	movs	r2, #1
 8007ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ce4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	6a1a      	ldr	r2, [r3, #32]
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	43db      	mvns	r3, r3
 8007cee:	401a      	ands	r2, r3
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	6a1a      	ldr	r2, [r3, #32]
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	f003 031f 	and.w	r3, r3, #31
 8007cfe:	6879      	ldr	r1, [r7, #4]
 8007d00:	fa01 f303 	lsl.w	r3, r1, r3
 8007d04:	431a      	orrs	r2, r3
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	621a      	str	r2, [r3, #32]
}
 8007d0a:	bf00      	nop
 8007d0c:	371c      	adds	r7, #28
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr
	...

08007d18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b085      	sub	sp, #20
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d101      	bne.n	8007d30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d2c:	2302      	movs	r3, #2
 8007d2e:	e05a      	b.n	8007de6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2201      	movs	r2, #1
 8007d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2202      	movs	r2, #2
 8007d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	68fa      	ldr	r2, [r7, #12]
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	68fa      	ldr	r2, [r7, #12]
 8007d68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a21      	ldr	r2, [pc, #132]	; (8007df4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d022      	beq.n	8007dba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d7c:	d01d      	beq.n	8007dba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a1d      	ldr	r2, [pc, #116]	; (8007df8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d018      	beq.n	8007dba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a1b      	ldr	r2, [pc, #108]	; (8007dfc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d013      	beq.n	8007dba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a1a      	ldr	r2, [pc, #104]	; (8007e00 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d00e      	beq.n	8007dba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a18      	ldr	r2, [pc, #96]	; (8007e04 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d009      	beq.n	8007dba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a17      	ldr	r2, [pc, #92]	; (8007e08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d004      	beq.n	8007dba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a15      	ldr	r2, [pc, #84]	; (8007e0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d10c      	bne.n	8007dd4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007dc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	68ba      	ldr	r2, [r7, #8]
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	68ba      	ldr	r2, [r7, #8]
 8007dd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3714      	adds	r7, #20
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr
 8007df2:	bf00      	nop
 8007df4:	40010000 	.word	0x40010000
 8007df8:	40000400 	.word	0x40000400
 8007dfc:	40000800 	.word	0x40000800
 8007e00:	40000c00 	.word	0x40000c00
 8007e04:	40010400 	.word	0x40010400
 8007e08:	40014000 	.word	0x40014000
 8007e0c:	40001800 	.word	0x40001800

08007e10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b085      	sub	sp, #20
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d101      	bne.n	8007e2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007e28:	2302      	movs	r3, #2
 8007e2a:	e03d      	b.n	8007ea8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	68db      	ldr	r3, [r3, #12]
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	691b      	ldr	r3, [r3, #16]
 8007e76:	4313      	orrs	r3, r2
 8007e78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	695b      	ldr	r3, [r3, #20]
 8007e84:	4313      	orrs	r3, r2
 8007e86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	69db      	ldr	r3, [r3, #28]
 8007e92:	4313      	orrs	r3, r2
 8007e94:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	68fa      	ldr	r2, [r7, #12]
 8007e9c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ea6:	2300      	movs	r3, #0
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3714      	adds	r7, #20
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ebc:	bf00      	nop
 8007ebe:	370c      	adds	r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b083      	sub	sp, #12
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ed0:	bf00      	nop
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d101      	bne.n	8007eee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	e042      	b.n	8007f74 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d106      	bne.n	8007f08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f7fb f8dc 	bl	80030c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2224      	movs	r2, #36	; 0x24
 8007f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	68da      	ldr	r2, [r3, #12]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 fdbd 	bl	8008aa0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	691a      	ldr	r2, [r3, #16]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	695a      	ldr	r2, [r3, #20]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	68da      	ldr	r2, [r3, #12]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2220      	movs	r2, #32
 8007f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2220      	movs	r2, #32
 8007f68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007f72:	2300      	movs	r3, #0
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3708      	adds	r7, #8
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b08a      	sub	sp, #40	; 0x28
 8007f80:	af02      	add	r7, sp, #8
 8007f82:	60f8      	str	r0, [r7, #12]
 8007f84:	60b9      	str	r1, [r7, #8]
 8007f86:	603b      	str	r3, [r7, #0]
 8007f88:	4613      	mov	r3, r2
 8007f8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	2b20      	cmp	r3, #32
 8007f9a:	d175      	bne.n	8008088 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d002      	beq.n	8007fa8 <HAL_UART_Transmit+0x2c>
 8007fa2:	88fb      	ldrh	r3, [r7, #6]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d101      	bne.n	8007fac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e06e      	b.n	800808a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2221      	movs	r2, #33	; 0x21
 8007fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007fba:	f7fb fdd5 	bl	8003b68 <HAL_GetTick>
 8007fbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	88fa      	ldrh	r2, [r7, #6]
 8007fc4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	88fa      	ldrh	r2, [r7, #6]
 8007fca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fd4:	d108      	bne.n	8007fe8 <HAL_UART_Transmit+0x6c>
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	691b      	ldr	r3, [r3, #16]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d104      	bne.n	8007fe8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	61bb      	str	r3, [r7, #24]
 8007fe6:	e003      	b.n	8007ff0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007fec:	2300      	movs	r3, #0
 8007fee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007ff0:	e02e      	b.n	8008050 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	9300      	str	r3, [sp, #0]
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	2180      	movs	r1, #128	; 0x80
 8007ffc:	68f8      	ldr	r0, [r7, #12]
 8007ffe:	f000 fb1f 	bl	8008640 <UART_WaitOnFlagUntilTimeout>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d005      	beq.n	8008014 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2220      	movs	r2, #32
 800800c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8008010:	2303      	movs	r3, #3
 8008012:	e03a      	b.n	800808a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008014:	69fb      	ldr	r3, [r7, #28]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d10b      	bne.n	8008032 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	881b      	ldrh	r3, [r3, #0]
 800801e:	461a      	mov	r2, r3
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008028:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800802a:	69bb      	ldr	r3, [r7, #24]
 800802c:	3302      	adds	r3, #2
 800802e:	61bb      	str	r3, [r7, #24]
 8008030:	e007      	b.n	8008042 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008032:	69fb      	ldr	r3, [r7, #28]
 8008034:	781a      	ldrb	r2, [r3, #0]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	3301      	adds	r3, #1
 8008040:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008046:	b29b      	uxth	r3, r3
 8008048:	3b01      	subs	r3, #1
 800804a:	b29a      	uxth	r2, r3
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008054:	b29b      	uxth	r3, r3
 8008056:	2b00      	cmp	r3, #0
 8008058:	d1cb      	bne.n	8007ff2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	9300      	str	r3, [sp, #0]
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	2200      	movs	r2, #0
 8008062:	2140      	movs	r1, #64	; 0x40
 8008064:	68f8      	ldr	r0, [r7, #12]
 8008066:	f000 faeb 	bl	8008640 <UART_WaitOnFlagUntilTimeout>
 800806a:	4603      	mov	r3, r0
 800806c:	2b00      	cmp	r3, #0
 800806e:	d005      	beq.n	800807c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2220      	movs	r2, #32
 8008074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8008078:	2303      	movs	r3, #3
 800807a:	e006      	b.n	800808a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2220      	movs	r2, #32
 8008080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8008084:	2300      	movs	r3, #0
 8008086:	e000      	b.n	800808a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008088:	2302      	movs	r3, #2
  }
}
 800808a:	4618      	mov	r0, r3
 800808c:	3720      	adds	r7, #32
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008092:	b580      	push	{r7, lr}
 8008094:	b084      	sub	sp, #16
 8008096:	af00      	add	r7, sp, #0
 8008098:	60f8      	str	r0, [r7, #12]
 800809a:	60b9      	str	r1, [r7, #8]
 800809c:	4613      	mov	r3, r2
 800809e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	2b20      	cmp	r3, #32
 80080aa:	d112      	bne.n	80080d2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d002      	beq.n	80080b8 <HAL_UART_Receive_IT+0x26>
 80080b2:	88fb      	ldrh	r3, [r7, #6]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d101      	bne.n	80080bc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80080b8:	2301      	movs	r3, #1
 80080ba:	e00b      	b.n	80080d4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2200      	movs	r2, #0
 80080c0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80080c2:	88fb      	ldrh	r3, [r7, #6]
 80080c4:	461a      	mov	r2, r3
 80080c6:	68b9      	ldr	r1, [r7, #8]
 80080c8:	68f8      	ldr	r0, [r7, #12]
 80080ca:	f000 fb12 	bl	80086f2 <UART_Start_Receive_IT>
 80080ce:	4603      	mov	r3, r0
 80080d0:	e000      	b.n	80080d4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80080d2:	2302      	movs	r3, #2
  }
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3710      	adds	r7, #16
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}

080080dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b0ba      	sub	sp, #232	; 0xe8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	695b      	ldr	r3, [r3, #20]
 80080fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008102:	2300      	movs	r3, #0
 8008104:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008108:	2300      	movs	r3, #0
 800810a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800810e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008112:	f003 030f 	and.w	r3, r3, #15
 8008116:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800811a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800811e:	2b00      	cmp	r3, #0
 8008120:	d10f      	bne.n	8008142 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008126:	f003 0320 	and.w	r3, r3, #32
 800812a:	2b00      	cmp	r3, #0
 800812c:	d009      	beq.n	8008142 <HAL_UART_IRQHandler+0x66>
 800812e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008132:	f003 0320 	and.w	r3, r3, #32
 8008136:	2b00      	cmp	r3, #0
 8008138:	d003      	beq.n	8008142 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 fbf2 	bl	8008924 <UART_Receive_IT>
      return;
 8008140:	e25b      	b.n	80085fa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008142:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008146:	2b00      	cmp	r3, #0
 8008148:	f000 80de 	beq.w	8008308 <HAL_UART_IRQHandler+0x22c>
 800814c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008150:	f003 0301 	and.w	r3, r3, #1
 8008154:	2b00      	cmp	r3, #0
 8008156:	d106      	bne.n	8008166 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800815c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008160:	2b00      	cmp	r3, #0
 8008162:	f000 80d1 	beq.w	8008308 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800816a:	f003 0301 	and.w	r3, r3, #1
 800816e:	2b00      	cmp	r3, #0
 8008170:	d00b      	beq.n	800818a <HAL_UART_IRQHandler+0xae>
 8008172:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800817a:	2b00      	cmp	r3, #0
 800817c:	d005      	beq.n	800818a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008182:	f043 0201 	orr.w	r2, r3, #1
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800818a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800818e:	f003 0304 	and.w	r3, r3, #4
 8008192:	2b00      	cmp	r3, #0
 8008194:	d00b      	beq.n	80081ae <HAL_UART_IRQHandler+0xd2>
 8008196:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800819a:	f003 0301 	and.w	r3, r3, #1
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d005      	beq.n	80081ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081a6:	f043 0202 	orr.w	r2, r3, #2
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80081ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081b2:	f003 0302 	and.w	r3, r3, #2
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d00b      	beq.n	80081d2 <HAL_UART_IRQHandler+0xf6>
 80081ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081be:	f003 0301 	and.w	r3, r3, #1
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d005      	beq.n	80081d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081ca:	f043 0204 	orr.w	r2, r3, #4
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80081d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081d6:	f003 0308 	and.w	r3, r3, #8
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d011      	beq.n	8008202 <HAL_UART_IRQHandler+0x126>
 80081de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081e2:	f003 0320 	and.w	r3, r3, #32
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d105      	bne.n	80081f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80081ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081ee:	f003 0301 	and.w	r3, r3, #1
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d005      	beq.n	8008202 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081fa:	f043 0208 	orr.w	r2, r3, #8
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008206:	2b00      	cmp	r3, #0
 8008208:	f000 81f2 	beq.w	80085f0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800820c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008210:	f003 0320 	and.w	r3, r3, #32
 8008214:	2b00      	cmp	r3, #0
 8008216:	d008      	beq.n	800822a <HAL_UART_IRQHandler+0x14e>
 8008218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800821c:	f003 0320 	and.w	r3, r3, #32
 8008220:	2b00      	cmp	r3, #0
 8008222:	d002      	beq.n	800822a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 fb7d 	bl	8008924 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	695b      	ldr	r3, [r3, #20]
 8008230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008234:	2b40      	cmp	r3, #64	; 0x40
 8008236:	bf0c      	ite	eq
 8008238:	2301      	moveq	r3, #1
 800823a:	2300      	movne	r3, #0
 800823c:	b2db      	uxtb	r3, r3
 800823e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008246:	f003 0308 	and.w	r3, r3, #8
 800824a:	2b00      	cmp	r3, #0
 800824c:	d103      	bne.n	8008256 <HAL_UART_IRQHandler+0x17a>
 800824e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008252:	2b00      	cmp	r3, #0
 8008254:	d04f      	beq.n	80082f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 fa85 	bl	8008766 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	695b      	ldr	r3, [r3, #20]
 8008262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008266:	2b40      	cmp	r3, #64	; 0x40
 8008268:	d141      	bne.n	80082ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	3314      	adds	r3, #20
 8008270:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008274:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008278:	e853 3f00 	ldrex	r3, [r3]
 800827c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008280:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008284:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008288:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	3314      	adds	r3, #20
 8008292:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008296:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800829a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800829e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80082a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80082a6:	e841 2300 	strex	r3, r2, [r1]
 80082aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80082ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d1d9      	bne.n	800826a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d013      	beq.n	80082e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082c2:	4a7e      	ldr	r2, [pc, #504]	; (80084bc <HAL_UART_IRQHandler+0x3e0>)
 80082c4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7fc fc40 	bl	8004b50 <HAL_DMA_Abort_IT>
 80082d0:	4603      	mov	r3, r0
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d016      	beq.n	8008304 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80082e0:	4610      	mov	r0, r2
 80082e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082e4:	e00e      	b.n	8008304 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 f994 	bl	8008614 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082ec:	e00a      	b.n	8008304 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 f990 	bl	8008614 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082f4:	e006      	b.n	8008304 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 f98c 	bl	8008614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8008302:	e175      	b.n	80085f0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008304:	bf00      	nop
    return;
 8008306:	e173      	b.n	80085f0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800830c:	2b01      	cmp	r3, #1
 800830e:	f040 814f 	bne.w	80085b0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008316:	f003 0310 	and.w	r3, r3, #16
 800831a:	2b00      	cmp	r3, #0
 800831c:	f000 8148 	beq.w	80085b0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008324:	f003 0310 	and.w	r3, r3, #16
 8008328:	2b00      	cmp	r3, #0
 800832a:	f000 8141 	beq.w	80085b0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800832e:	2300      	movs	r3, #0
 8008330:	60bb      	str	r3, [r7, #8]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	60bb      	str	r3, [r7, #8]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	60bb      	str	r3, [r7, #8]
 8008342:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	695b      	ldr	r3, [r3, #20]
 800834a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800834e:	2b40      	cmp	r3, #64	; 0x40
 8008350:	f040 80b6 	bne.w	80084c0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008360:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008364:	2b00      	cmp	r3, #0
 8008366:	f000 8145 	beq.w	80085f4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800836e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008372:	429a      	cmp	r2, r3
 8008374:	f080 813e 	bcs.w	80085f4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800837e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008384:	69db      	ldr	r3, [r3, #28]
 8008386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800838a:	f000 8088 	beq.w	800849e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	330c      	adds	r3, #12
 8008394:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008398:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800839c:	e853 3f00 	ldrex	r3, [r3]
 80083a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80083a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80083a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	330c      	adds	r3, #12
 80083b6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80083ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80083be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80083c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80083ca:	e841 2300 	strex	r3, r2, [r1]
 80083ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80083d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d1d9      	bne.n	800838e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	3314      	adds	r3, #20
 80083e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083e4:	e853 3f00 	ldrex	r3, [r3]
 80083e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80083ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80083ec:	f023 0301 	bic.w	r3, r3, #1
 80083f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	3314      	adds	r3, #20
 80083fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80083fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008402:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008404:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008406:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800840a:	e841 2300 	strex	r3, r2, [r1]
 800840e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008410:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008412:	2b00      	cmp	r3, #0
 8008414:	d1e1      	bne.n	80083da <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	3314      	adds	r3, #20
 800841c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800841e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008420:	e853 3f00 	ldrex	r3, [r3]
 8008424:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008426:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008428:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800842c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	3314      	adds	r3, #20
 8008436:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800843a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800843c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800843e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008440:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008442:	e841 2300 	strex	r3, r2, [r1]
 8008446:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008448:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800844a:	2b00      	cmp	r3, #0
 800844c:	d1e3      	bne.n	8008416 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2220      	movs	r2, #32
 8008452:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2200      	movs	r2, #0
 800845a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	330c      	adds	r3, #12
 8008462:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008466:	e853 3f00 	ldrex	r3, [r3]
 800846a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800846c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800846e:	f023 0310 	bic.w	r3, r3, #16
 8008472:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	330c      	adds	r3, #12
 800847c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008480:	65ba      	str	r2, [r7, #88]	; 0x58
 8008482:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008484:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008486:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008488:	e841 2300 	strex	r3, r2, [r1]
 800848c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800848e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008490:	2b00      	cmp	r3, #0
 8008492:	d1e3      	bne.n	800845c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008498:	4618      	mov	r0, r3
 800849a:	f7fc fae9 	bl	8004a70 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2202      	movs	r2, #2
 80084a2:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	1ad3      	subs	r3, r2, r3
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	4619      	mov	r1, r3
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 f8b7 	bl	8008628 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80084ba:	e09b      	b.n	80085f4 <HAL_UART_IRQHandler+0x518>
 80084bc:	0800882d 	.word	0x0800882d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	1ad3      	subs	r3, r2, r3
 80084cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	f000 808e 	beq.w	80085f8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80084dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	f000 8089 	beq.w	80085f8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	330c      	adds	r3, #12
 80084ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f0:	e853 3f00 	ldrex	r3, [r3]
 80084f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80084f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	330c      	adds	r3, #12
 8008506:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800850a:	647a      	str	r2, [r7, #68]	; 0x44
 800850c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800850e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008510:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008512:	e841 2300 	strex	r3, r2, [r1]
 8008516:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800851a:	2b00      	cmp	r3, #0
 800851c:	d1e3      	bne.n	80084e6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	3314      	adds	r3, #20
 8008524:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008528:	e853 3f00 	ldrex	r3, [r3]
 800852c:	623b      	str	r3, [r7, #32]
   return(result);
 800852e:	6a3b      	ldr	r3, [r7, #32]
 8008530:	f023 0301 	bic.w	r3, r3, #1
 8008534:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	3314      	adds	r3, #20
 800853e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008542:	633a      	str	r2, [r7, #48]	; 0x30
 8008544:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008546:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800854a:	e841 2300 	strex	r3, r2, [r1]
 800854e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008552:	2b00      	cmp	r3, #0
 8008554:	d1e3      	bne.n	800851e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2220      	movs	r2, #32
 800855a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	330c      	adds	r3, #12
 800856a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	e853 3f00 	ldrex	r3, [r3]
 8008572:	60fb      	str	r3, [r7, #12]
   return(result);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f023 0310 	bic.w	r3, r3, #16
 800857a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	330c      	adds	r3, #12
 8008584:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008588:	61fa      	str	r2, [r7, #28]
 800858a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800858c:	69b9      	ldr	r1, [r7, #24]
 800858e:	69fa      	ldr	r2, [r7, #28]
 8008590:	e841 2300 	strex	r3, r2, [r1]
 8008594:	617b      	str	r3, [r7, #20]
   return(result);
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d1e3      	bne.n	8008564 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2202      	movs	r2, #2
 80085a0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80085a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80085a6:	4619      	mov	r1, r3
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f000 f83d 	bl	8008628 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80085ae:	e023      	b.n	80085f8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80085b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d009      	beq.n	80085d0 <HAL_UART_IRQHandler+0x4f4>
 80085bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d003      	beq.n	80085d0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 f943 	bl	8008854 <UART_Transmit_IT>
    return;
 80085ce:	e014      	b.n	80085fa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80085d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d00e      	beq.n	80085fa <HAL_UART_IRQHandler+0x51e>
 80085dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d008      	beq.n	80085fa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 f983 	bl	80088f4 <UART_EndTransmit_IT>
    return;
 80085ee:	e004      	b.n	80085fa <HAL_UART_IRQHandler+0x51e>
    return;
 80085f0:	bf00      	nop
 80085f2:	e002      	b.n	80085fa <HAL_UART_IRQHandler+0x51e>
      return;
 80085f4:	bf00      	nop
 80085f6:	e000      	b.n	80085fa <HAL_UART_IRQHandler+0x51e>
      return;
 80085f8:	bf00      	nop
  }
}
 80085fa:	37e8      	adds	r7, #232	; 0xe8
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008600:	b480      	push	{r7}
 8008602:	b083      	sub	sp, #12
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008608:	bf00      	nop
 800860a:	370c      	adds	r7, #12
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008614:	b480      	push	{r7}
 8008616:	b083      	sub	sp, #12
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800861c:	bf00      	nop
 800861e:	370c      	adds	r7, #12
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr

08008628 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	460b      	mov	r3, r1
 8008632:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008634:	bf00      	nop
 8008636:	370c      	adds	r7, #12
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr

08008640 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b086      	sub	sp, #24
 8008644:	af00      	add	r7, sp, #0
 8008646:	60f8      	str	r0, [r7, #12]
 8008648:	60b9      	str	r1, [r7, #8]
 800864a:	603b      	str	r3, [r7, #0]
 800864c:	4613      	mov	r3, r2
 800864e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008650:	e03b      	b.n	80086ca <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008652:	6a3b      	ldr	r3, [r7, #32]
 8008654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008658:	d037      	beq.n	80086ca <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800865a:	f7fb fa85 	bl	8003b68 <HAL_GetTick>
 800865e:	4602      	mov	r2, r0
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	1ad3      	subs	r3, r2, r3
 8008664:	6a3a      	ldr	r2, [r7, #32]
 8008666:	429a      	cmp	r2, r3
 8008668:	d302      	bcc.n	8008670 <UART_WaitOnFlagUntilTimeout+0x30>
 800866a:	6a3b      	ldr	r3, [r7, #32]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d101      	bne.n	8008674 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008670:	2303      	movs	r3, #3
 8008672:	e03a      	b.n	80086ea <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	68db      	ldr	r3, [r3, #12]
 800867a:	f003 0304 	and.w	r3, r3, #4
 800867e:	2b00      	cmp	r3, #0
 8008680:	d023      	beq.n	80086ca <UART_WaitOnFlagUntilTimeout+0x8a>
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	2b80      	cmp	r3, #128	; 0x80
 8008686:	d020      	beq.n	80086ca <UART_WaitOnFlagUntilTimeout+0x8a>
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	2b40      	cmp	r3, #64	; 0x40
 800868c:	d01d      	beq.n	80086ca <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f003 0308 	and.w	r3, r3, #8
 8008698:	2b08      	cmp	r3, #8
 800869a:	d116      	bne.n	80086ca <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800869c:	2300      	movs	r3, #0
 800869e:	617b      	str	r3, [r7, #20]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	617b      	str	r3, [r7, #20]
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	617b      	str	r3, [r7, #20]
 80086b0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80086b2:	68f8      	ldr	r0, [r7, #12]
 80086b4:	f000 f857 	bl	8008766 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2208      	movs	r2, #8
 80086bc:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2200      	movs	r2, #0
 80086c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80086c6:	2301      	movs	r3, #1
 80086c8:	e00f      	b.n	80086ea <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	4013      	ands	r3, r2
 80086d4:	68ba      	ldr	r2, [r7, #8]
 80086d6:	429a      	cmp	r2, r3
 80086d8:	bf0c      	ite	eq
 80086da:	2301      	moveq	r3, #1
 80086dc:	2300      	movne	r3, #0
 80086de:	b2db      	uxtb	r3, r3
 80086e0:	461a      	mov	r2, r3
 80086e2:	79fb      	ldrb	r3, [r7, #7]
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d0b4      	beq.n	8008652 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80086e8:	2300      	movs	r3, #0
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3718      	adds	r7, #24
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}

080086f2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80086f2:	b480      	push	{r7}
 80086f4:	b085      	sub	sp, #20
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	60f8      	str	r0, [r7, #12]
 80086fa:	60b9      	str	r1, [r7, #8]
 80086fc:	4613      	mov	r3, r2
 80086fe:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	68ba      	ldr	r2, [r7, #8]
 8008704:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	88fa      	ldrh	r2, [r7, #6]
 800870a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	88fa      	ldrh	r2, [r7, #6]
 8008710:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2200      	movs	r2, #0
 8008716:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2222      	movs	r2, #34	; 0x22
 800871c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	691b      	ldr	r3, [r3, #16]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d007      	beq.n	8008738 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	68da      	ldr	r2, [r3, #12]
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008736:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	695a      	ldr	r2, [r3, #20]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f042 0201 	orr.w	r2, r2, #1
 8008746:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	68da      	ldr	r2, [r3, #12]
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f042 0220 	orr.w	r2, r2, #32
 8008756:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008758:	2300      	movs	r3, #0
}
 800875a:	4618      	mov	r0, r3
 800875c:	3714      	adds	r7, #20
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr

08008766 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008766:	b480      	push	{r7}
 8008768:	b095      	sub	sp, #84	; 0x54
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	330c      	adds	r3, #12
 8008774:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008778:	e853 3f00 	ldrex	r3, [r3]
 800877c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800877e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008780:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008784:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	330c      	adds	r3, #12
 800878c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800878e:	643a      	str	r2, [r7, #64]	; 0x40
 8008790:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008792:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008794:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008796:	e841 2300 	strex	r3, r2, [r1]
 800879a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800879c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d1e5      	bne.n	800876e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	3314      	adds	r3, #20
 80087a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087aa:	6a3b      	ldr	r3, [r7, #32]
 80087ac:	e853 3f00 	ldrex	r3, [r3]
 80087b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80087b2:	69fb      	ldr	r3, [r7, #28]
 80087b4:	f023 0301 	bic.w	r3, r3, #1
 80087b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	3314      	adds	r3, #20
 80087c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80087c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087ca:	e841 2300 	strex	r3, r2, [r1]
 80087ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d1e5      	bne.n	80087a2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d119      	bne.n	8008812 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	330c      	adds	r3, #12
 80087e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	e853 3f00 	ldrex	r3, [r3]
 80087ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	f023 0310 	bic.w	r3, r3, #16
 80087f4:	647b      	str	r3, [r7, #68]	; 0x44
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	330c      	adds	r3, #12
 80087fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087fe:	61ba      	str	r2, [r7, #24]
 8008800:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008802:	6979      	ldr	r1, [r7, #20]
 8008804:	69ba      	ldr	r2, [r7, #24]
 8008806:	e841 2300 	strex	r3, r2, [r1]
 800880a:	613b      	str	r3, [r7, #16]
   return(result);
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d1e5      	bne.n	80087de <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2220      	movs	r2, #32
 8008816:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008820:	bf00      	nop
 8008822:	3754      	adds	r7, #84	; 0x54
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr

0800882c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b084      	sub	sp, #16
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008838:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2200      	movs	r2, #0
 800883e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2200      	movs	r2, #0
 8008844:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008846:	68f8      	ldr	r0, [r7, #12]
 8008848:	f7ff fee4 	bl	8008614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800884c:	bf00      	nop
 800884e:	3710      	adds	r7, #16
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008854:	b480      	push	{r7}
 8008856:	b085      	sub	sp, #20
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008862:	b2db      	uxtb	r3, r3
 8008864:	2b21      	cmp	r3, #33	; 0x21
 8008866:	d13e      	bne.n	80088e6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008870:	d114      	bne.n	800889c <UART_Transmit_IT+0x48>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	691b      	ldr	r3, [r3, #16]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d110      	bne.n	800889c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6a1b      	ldr	r3, [r3, #32]
 800887e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	881b      	ldrh	r3, [r3, #0]
 8008884:	461a      	mov	r2, r3
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800888e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6a1b      	ldr	r3, [r3, #32]
 8008894:	1c9a      	adds	r2, r3, #2
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	621a      	str	r2, [r3, #32]
 800889a:	e008      	b.n	80088ae <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6a1b      	ldr	r3, [r3, #32]
 80088a0:	1c59      	adds	r1, r3, #1
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	6211      	str	r1, [r2, #32]
 80088a6:	781a      	ldrb	r2, [r3, #0]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	3b01      	subs	r3, #1
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	4619      	mov	r1, r3
 80088bc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d10f      	bne.n	80088e2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	68da      	ldr	r2, [r3, #12]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80088d0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	68da      	ldr	r2, [r3, #12]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088e0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80088e2:	2300      	movs	r3, #0
 80088e4:	e000      	b.n	80088e8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80088e6:	2302      	movs	r3, #2
  }
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3714      	adds	r7, #20
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr

080088f4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b082      	sub	sp, #8
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	68da      	ldr	r2, [r3, #12]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800890a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2220      	movs	r2, #32
 8008910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f7ff fe73 	bl	8008600 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800891a:	2300      	movs	r3, #0
}
 800891c:	4618      	mov	r0, r3
 800891e:	3708      	adds	r7, #8
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b08c      	sub	sp, #48	; 0x30
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008932:	b2db      	uxtb	r3, r3
 8008934:	2b22      	cmp	r3, #34	; 0x22
 8008936:	f040 80ae 	bne.w	8008a96 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008942:	d117      	bne.n	8008974 <UART_Receive_IT+0x50>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	691b      	ldr	r3, [r3, #16]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d113      	bne.n	8008974 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800894c:	2300      	movs	r3, #0
 800894e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008954:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	b29b      	uxth	r3, r3
 800895e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008962:	b29a      	uxth	r2, r3
 8008964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008966:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800896c:	1c9a      	adds	r2, r3, #2
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	629a      	str	r2, [r3, #40]	; 0x28
 8008972:	e026      	b.n	80089c2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008978:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800897a:	2300      	movs	r3, #0
 800897c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008986:	d007      	beq.n	8008998 <UART_Receive_IT+0x74>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	689b      	ldr	r3, [r3, #8]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d10a      	bne.n	80089a6 <UART_Receive_IT+0x82>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	691b      	ldr	r3, [r3, #16]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d106      	bne.n	80089a6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	b2da      	uxtb	r2, r3
 80089a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089a2:	701a      	strb	r2, [r3, #0]
 80089a4:	e008      	b.n	80089b8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089b2:	b2da      	uxtb	r2, r3
 80089b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089bc:	1c5a      	adds	r2, r3, #1
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	3b01      	subs	r3, #1
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	4619      	mov	r1, r3
 80089d0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d15d      	bne.n	8008a92 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	68da      	ldr	r2, [r3, #12]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f022 0220 	bic.w	r2, r2, #32
 80089e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	68da      	ldr	r2, [r3, #12]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80089f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	695a      	ldr	r2, [r3, #20]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f022 0201 	bic.w	r2, r2, #1
 8008a04:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2220      	movs	r2, #32
 8008a0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d135      	bne.n	8008a88 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	330c      	adds	r3, #12
 8008a28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	e853 3f00 	ldrex	r3, [r3]
 8008a30:	613b      	str	r3, [r7, #16]
   return(result);
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	f023 0310 	bic.w	r3, r3, #16
 8008a38:	627b      	str	r3, [r7, #36]	; 0x24
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	330c      	adds	r3, #12
 8008a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a42:	623a      	str	r2, [r7, #32]
 8008a44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a46:	69f9      	ldr	r1, [r7, #28]
 8008a48:	6a3a      	ldr	r2, [r7, #32]
 8008a4a:	e841 2300 	strex	r3, r2, [r1]
 8008a4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a50:	69bb      	ldr	r3, [r7, #24]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d1e5      	bne.n	8008a22 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f003 0310 	and.w	r3, r3, #16
 8008a60:	2b10      	cmp	r3, #16
 8008a62:	d10a      	bne.n	8008a7a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008a64:	2300      	movs	r3, #0
 8008a66:	60fb      	str	r3, [r7, #12]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	60fb      	str	r3, [r7, #12]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	60fb      	str	r3, [r7, #12]
 8008a78:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008a7e:	4619      	mov	r1, r3
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f7ff fdd1 	bl	8008628 <HAL_UARTEx_RxEventCallback>
 8008a86:	e002      	b.n	8008a8e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f7f8 faed 	bl	8001068 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	e002      	b.n	8008a98 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008a92:	2300      	movs	r3, #0
 8008a94:	e000      	b.n	8008a98 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008a96:	2302      	movs	r3, #2
  }
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3730      	adds	r7, #48	; 0x30
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008aa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008aa4:	b0c0      	sub	sp, #256	; 0x100
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	691b      	ldr	r3, [r3, #16]
 8008ab4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008abc:	68d9      	ldr	r1, [r3, #12]
 8008abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ac2:	681a      	ldr	r2, [r3, #0]
 8008ac4:	ea40 0301 	orr.w	r3, r0, r1
 8008ac8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ace:	689a      	ldr	r2, [r3, #8]
 8008ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ad4:	691b      	ldr	r3, [r3, #16]
 8008ad6:	431a      	orrs	r2, r3
 8008ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008adc:	695b      	ldr	r3, [r3, #20]
 8008ade:	431a      	orrs	r2, r3
 8008ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ae4:	69db      	ldr	r3, [r3, #28]
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	68db      	ldr	r3, [r3, #12]
 8008af4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008af8:	f021 010c 	bic.w	r1, r1, #12
 8008afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b00:	681a      	ldr	r2, [r3, #0]
 8008b02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008b06:	430b      	orrs	r3, r1
 8008b08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	695b      	ldr	r3, [r3, #20]
 8008b12:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b1a:	6999      	ldr	r1, [r3, #24]
 8008b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	ea40 0301 	orr.w	r3, r0, r1
 8008b26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	4b8f      	ldr	r3, [pc, #572]	; (8008d6c <UART_SetConfig+0x2cc>)
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d005      	beq.n	8008b40 <UART_SetConfig+0xa0>
 8008b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	4b8d      	ldr	r3, [pc, #564]	; (8008d70 <UART_SetConfig+0x2d0>)
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d104      	bne.n	8008b4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008b40:	f7fd fd2a 	bl	8006598 <HAL_RCC_GetPCLK2Freq>
 8008b44:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008b48:	e003      	b.n	8008b52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008b4a:	f7fd fd11 	bl	8006570 <HAL_RCC_GetPCLK1Freq>
 8008b4e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b56:	69db      	ldr	r3, [r3, #28]
 8008b58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b5c:	f040 810c 	bne.w	8008d78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008b60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b64:	2200      	movs	r2, #0
 8008b66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008b6a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008b6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008b72:	4622      	mov	r2, r4
 8008b74:	462b      	mov	r3, r5
 8008b76:	1891      	adds	r1, r2, r2
 8008b78:	65b9      	str	r1, [r7, #88]	; 0x58
 8008b7a:	415b      	adcs	r3, r3
 8008b7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008b82:	4621      	mov	r1, r4
 8008b84:	eb12 0801 	adds.w	r8, r2, r1
 8008b88:	4629      	mov	r1, r5
 8008b8a:	eb43 0901 	adc.w	r9, r3, r1
 8008b8e:	f04f 0200 	mov.w	r2, #0
 8008b92:	f04f 0300 	mov.w	r3, #0
 8008b96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008b9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008b9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008ba2:	4690      	mov	r8, r2
 8008ba4:	4699      	mov	r9, r3
 8008ba6:	4623      	mov	r3, r4
 8008ba8:	eb18 0303 	adds.w	r3, r8, r3
 8008bac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008bb0:	462b      	mov	r3, r5
 8008bb2:	eb49 0303 	adc.w	r3, r9, r3
 8008bb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008bc6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008bca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008bce:	460b      	mov	r3, r1
 8008bd0:	18db      	adds	r3, r3, r3
 8008bd2:	653b      	str	r3, [r7, #80]	; 0x50
 8008bd4:	4613      	mov	r3, r2
 8008bd6:	eb42 0303 	adc.w	r3, r2, r3
 8008bda:	657b      	str	r3, [r7, #84]	; 0x54
 8008bdc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008be0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008be4:	f7f8 f860 	bl	8000ca8 <__aeabi_uldivmod>
 8008be8:	4602      	mov	r2, r0
 8008bea:	460b      	mov	r3, r1
 8008bec:	4b61      	ldr	r3, [pc, #388]	; (8008d74 <UART_SetConfig+0x2d4>)
 8008bee:	fba3 2302 	umull	r2, r3, r3, r2
 8008bf2:	095b      	lsrs	r3, r3, #5
 8008bf4:	011c      	lsls	r4, r3, #4
 8008bf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008c00:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008c04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008c08:	4642      	mov	r2, r8
 8008c0a:	464b      	mov	r3, r9
 8008c0c:	1891      	adds	r1, r2, r2
 8008c0e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008c10:	415b      	adcs	r3, r3
 8008c12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008c18:	4641      	mov	r1, r8
 8008c1a:	eb12 0a01 	adds.w	sl, r2, r1
 8008c1e:	4649      	mov	r1, r9
 8008c20:	eb43 0b01 	adc.w	fp, r3, r1
 8008c24:	f04f 0200 	mov.w	r2, #0
 8008c28:	f04f 0300 	mov.w	r3, #0
 8008c2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008c30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008c34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c38:	4692      	mov	sl, r2
 8008c3a:	469b      	mov	fp, r3
 8008c3c:	4643      	mov	r3, r8
 8008c3e:	eb1a 0303 	adds.w	r3, sl, r3
 8008c42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008c46:	464b      	mov	r3, r9
 8008c48:	eb4b 0303 	adc.w	r3, fp, r3
 8008c4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	2200      	movs	r2, #0
 8008c58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008c5c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008c60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008c64:	460b      	mov	r3, r1
 8008c66:	18db      	adds	r3, r3, r3
 8008c68:	643b      	str	r3, [r7, #64]	; 0x40
 8008c6a:	4613      	mov	r3, r2
 8008c6c:	eb42 0303 	adc.w	r3, r2, r3
 8008c70:	647b      	str	r3, [r7, #68]	; 0x44
 8008c72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008c76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008c7a:	f7f8 f815 	bl	8000ca8 <__aeabi_uldivmod>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	460b      	mov	r3, r1
 8008c82:	4611      	mov	r1, r2
 8008c84:	4b3b      	ldr	r3, [pc, #236]	; (8008d74 <UART_SetConfig+0x2d4>)
 8008c86:	fba3 2301 	umull	r2, r3, r3, r1
 8008c8a:	095b      	lsrs	r3, r3, #5
 8008c8c:	2264      	movs	r2, #100	; 0x64
 8008c8e:	fb02 f303 	mul.w	r3, r2, r3
 8008c92:	1acb      	subs	r3, r1, r3
 8008c94:	00db      	lsls	r3, r3, #3
 8008c96:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008c9a:	4b36      	ldr	r3, [pc, #216]	; (8008d74 <UART_SetConfig+0x2d4>)
 8008c9c:	fba3 2302 	umull	r2, r3, r3, r2
 8008ca0:	095b      	lsrs	r3, r3, #5
 8008ca2:	005b      	lsls	r3, r3, #1
 8008ca4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008ca8:	441c      	add	r4, r3
 8008caa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cae:	2200      	movs	r2, #0
 8008cb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008cb4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008cb8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008cbc:	4642      	mov	r2, r8
 8008cbe:	464b      	mov	r3, r9
 8008cc0:	1891      	adds	r1, r2, r2
 8008cc2:	63b9      	str	r1, [r7, #56]	; 0x38
 8008cc4:	415b      	adcs	r3, r3
 8008cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008ccc:	4641      	mov	r1, r8
 8008cce:	1851      	adds	r1, r2, r1
 8008cd0:	6339      	str	r1, [r7, #48]	; 0x30
 8008cd2:	4649      	mov	r1, r9
 8008cd4:	414b      	adcs	r3, r1
 8008cd6:	637b      	str	r3, [r7, #52]	; 0x34
 8008cd8:	f04f 0200 	mov.w	r2, #0
 8008cdc:	f04f 0300 	mov.w	r3, #0
 8008ce0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008ce4:	4659      	mov	r1, fp
 8008ce6:	00cb      	lsls	r3, r1, #3
 8008ce8:	4651      	mov	r1, sl
 8008cea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008cee:	4651      	mov	r1, sl
 8008cf0:	00ca      	lsls	r2, r1, #3
 8008cf2:	4610      	mov	r0, r2
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	4642      	mov	r2, r8
 8008cfa:	189b      	adds	r3, r3, r2
 8008cfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008d00:	464b      	mov	r3, r9
 8008d02:	460a      	mov	r2, r1
 8008d04:	eb42 0303 	adc.w	r3, r2, r3
 8008d08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	2200      	movs	r2, #0
 8008d14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008d18:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008d1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008d20:	460b      	mov	r3, r1
 8008d22:	18db      	adds	r3, r3, r3
 8008d24:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d26:	4613      	mov	r3, r2
 8008d28:	eb42 0303 	adc.w	r3, r2, r3
 8008d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008d32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008d36:	f7f7 ffb7 	bl	8000ca8 <__aeabi_uldivmod>
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	460b      	mov	r3, r1
 8008d3e:	4b0d      	ldr	r3, [pc, #52]	; (8008d74 <UART_SetConfig+0x2d4>)
 8008d40:	fba3 1302 	umull	r1, r3, r3, r2
 8008d44:	095b      	lsrs	r3, r3, #5
 8008d46:	2164      	movs	r1, #100	; 0x64
 8008d48:	fb01 f303 	mul.w	r3, r1, r3
 8008d4c:	1ad3      	subs	r3, r2, r3
 8008d4e:	00db      	lsls	r3, r3, #3
 8008d50:	3332      	adds	r3, #50	; 0x32
 8008d52:	4a08      	ldr	r2, [pc, #32]	; (8008d74 <UART_SetConfig+0x2d4>)
 8008d54:	fba2 2303 	umull	r2, r3, r2, r3
 8008d58:	095b      	lsrs	r3, r3, #5
 8008d5a:	f003 0207 	and.w	r2, r3, #7
 8008d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4422      	add	r2, r4
 8008d66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008d68:	e106      	b.n	8008f78 <UART_SetConfig+0x4d8>
 8008d6a:	bf00      	nop
 8008d6c:	40011000 	.word	0x40011000
 8008d70:	40011400 	.word	0x40011400
 8008d74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008d78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008d82:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008d86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008d8a:	4642      	mov	r2, r8
 8008d8c:	464b      	mov	r3, r9
 8008d8e:	1891      	adds	r1, r2, r2
 8008d90:	6239      	str	r1, [r7, #32]
 8008d92:	415b      	adcs	r3, r3
 8008d94:	627b      	str	r3, [r7, #36]	; 0x24
 8008d96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008d9a:	4641      	mov	r1, r8
 8008d9c:	1854      	adds	r4, r2, r1
 8008d9e:	4649      	mov	r1, r9
 8008da0:	eb43 0501 	adc.w	r5, r3, r1
 8008da4:	f04f 0200 	mov.w	r2, #0
 8008da8:	f04f 0300 	mov.w	r3, #0
 8008dac:	00eb      	lsls	r3, r5, #3
 8008dae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008db2:	00e2      	lsls	r2, r4, #3
 8008db4:	4614      	mov	r4, r2
 8008db6:	461d      	mov	r5, r3
 8008db8:	4643      	mov	r3, r8
 8008dba:	18e3      	adds	r3, r4, r3
 8008dbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008dc0:	464b      	mov	r3, r9
 8008dc2:	eb45 0303 	adc.w	r3, r5, r3
 8008dc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008dd6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008dda:	f04f 0200 	mov.w	r2, #0
 8008dde:	f04f 0300 	mov.w	r3, #0
 8008de2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008de6:	4629      	mov	r1, r5
 8008de8:	008b      	lsls	r3, r1, #2
 8008dea:	4621      	mov	r1, r4
 8008dec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008df0:	4621      	mov	r1, r4
 8008df2:	008a      	lsls	r2, r1, #2
 8008df4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008df8:	f7f7 ff56 	bl	8000ca8 <__aeabi_uldivmod>
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	460b      	mov	r3, r1
 8008e00:	4b60      	ldr	r3, [pc, #384]	; (8008f84 <UART_SetConfig+0x4e4>)
 8008e02:	fba3 2302 	umull	r2, r3, r3, r2
 8008e06:	095b      	lsrs	r3, r3, #5
 8008e08:	011c      	lsls	r4, r3, #4
 8008e0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e0e:	2200      	movs	r2, #0
 8008e10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008e14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008e18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008e1c:	4642      	mov	r2, r8
 8008e1e:	464b      	mov	r3, r9
 8008e20:	1891      	adds	r1, r2, r2
 8008e22:	61b9      	str	r1, [r7, #24]
 8008e24:	415b      	adcs	r3, r3
 8008e26:	61fb      	str	r3, [r7, #28]
 8008e28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e2c:	4641      	mov	r1, r8
 8008e2e:	1851      	adds	r1, r2, r1
 8008e30:	6139      	str	r1, [r7, #16]
 8008e32:	4649      	mov	r1, r9
 8008e34:	414b      	adcs	r3, r1
 8008e36:	617b      	str	r3, [r7, #20]
 8008e38:	f04f 0200 	mov.w	r2, #0
 8008e3c:	f04f 0300 	mov.w	r3, #0
 8008e40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008e44:	4659      	mov	r1, fp
 8008e46:	00cb      	lsls	r3, r1, #3
 8008e48:	4651      	mov	r1, sl
 8008e4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e4e:	4651      	mov	r1, sl
 8008e50:	00ca      	lsls	r2, r1, #3
 8008e52:	4610      	mov	r0, r2
 8008e54:	4619      	mov	r1, r3
 8008e56:	4603      	mov	r3, r0
 8008e58:	4642      	mov	r2, r8
 8008e5a:	189b      	adds	r3, r3, r2
 8008e5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008e60:	464b      	mov	r3, r9
 8008e62:	460a      	mov	r2, r1
 8008e64:	eb42 0303 	adc.w	r3, r2, r3
 8008e68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	2200      	movs	r2, #0
 8008e74:	67bb      	str	r3, [r7, #120]	; 0x78
 8008e76:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008e78:	f04f 0200 	mov.w	r2, #0
 8008e7c:	f04f 0300 	mov.w	r3, #0
 8008e80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008e84:	4649      	mov	r1, r9
 8008e86:	008b      	lsls	r3, r1, #2
 8008e88:	4641      	mov	r1, r8
 8008e8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e8e:	4641      	mov	r1, r8
 8008e90:	008a      	lsls	r2, r1, #2
 8008e92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008e96:	f7f7 ff07 	bl	8000ca8 <__aeabi_uldivmod>
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	4611      	mov	r1, r2
 8008ea0:	4b38      	ldr	r3, [pc, #224]	; (8008f84 <UART_SetConfig+0x4e4>)
 8008ea2:	fba3 2301 	umull	r2, r3, r3, r1
 8008ea6:	095b      	lsrs	r3, r3, #5
 8008ea8:	2264      	movs	r2, #100	; 0x64
 8008eaa:	fb02 f303 	mul.w	r3, r2, r3
 8008eae:	1acb      	subs	r3, r1, r3
 8008eb0:	011b      	lsls	r3, r3, #4
 8008eb2:	3332      	adds	r3, #50	; 0x32
 8008eb4:	4a33      	ldr	r2, [pc, #204]	; (8008f84 <UART_SetConfig+0x4e4>)
 8008eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8008eba:	095b      	lsrs	r3, r3, #5
 8008ebc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ec0:	441c      	add	r4, r3
 8008ec2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	673b      	str	r3, [r7, #112]	; 0x70
 8008eca:	677a      	str	r2, [r7, #116]	; 0x74
 8008ecc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008ed0:	4642      	mov	r2, r8
 8008ed2:	464b      	mov	r3, r9
 8008ed4:	1891      	adds	r1, r2, r2
 8008ed6:	60b9      	str	r1, [r7, #8]
 8008ed8:	415b      	adcs	r3, r3
 8008eda:	60fb      	str	r3, [r7, #12]
 8008edc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008ee0:	4641      	mov	r1, r8
 8008ee2:	1851      	adds	r1, r2, r1
 8008ee4:	6039      	str	r1, [r7, #0]
 8008ee6:	4649      	mov	r1, r9
 8008ee8:	414b      	adcs	r3, r1
 8008eea:	607b      	str	r3, [r7, #4]
 8008eec:	f04f 0200 	mov.w	r2, #0
 8008ef0:	f04f 0300 	mov.w	r3, #0
 8008ef4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008ef8:	4659      	mov	r1, fp
 8008efa:	00cb      	lsls	r3, r1, #3
 8008efc:	4651      	mov	r1, sl
 8008efe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f02:	4651      	mov	r1, sl
 8008f04:	00ca      	lsls	r2, r1, #3
 8008f06:	4610      	mov	r0, r2
 8008f08:	4619      	mov	r1, r3
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	4642      	mov	r2, r8
 8008f0e:	189b      	adds	r3, r3, r2
 8008f10:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f12:	464b      	mov	r3, r9
 8008f14:	460a      	mov	r2, r1
 8008f16:	eb42 0303 	adc.w	r3, r2, r3
 8008f1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	663b      	str	r3, [r7, #96]	; 0x60
 8008f26:	667a      	str	r2, [r7, #100]	; 0x64
 8008f28:	f04f 0200 	mov.w	r2, #0
 8008f2c:	f04f 0300 	mov.w	r3, #0
 8008f30:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008f34:	4649      	mov	r1, r9
 8008f36:	008b      	lsls	r3, r1, #2
 8008f38:	4641      	mov	r1, r8
 8008f3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f3e:	4641      	mov	r1, r8
 8008f40:	008a      	lsls	r2, r1, #2
 8008f42:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008f46:	f7f7 feaf 	bl	8000ca8 <__aeabi_uldivmod>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	4b0d      	ldr	r3, [pc, #52]	; (8008f84 <UART_SetConfig+0x4e4>)
 8008f50:	fba3 1302 	umull	r1, r3, r3, r2
 8008f54:	095b      	lsrs	r3, r3, #5
 8008f56:	2164      	movs	r1, #100	; 0x64
 8008f58:	fb01 f303 	mul.w	r3, r1, r3
 8008f5c:	1ad3      	subs	r3, r2, r3
 8008f5e:	011b      	lsls	r3, r3, #4
 8008f60:	3332      	adds	r3, #50	; 0x32
 8008f62:	4a08      	ldr	r2, [pc, #32]	; (8008f84 <UART_SetConfig+0x4e4>)
 8008f64:	fba2 2303 	umull	r2, r3, r2, r3
 8008f68:	095b      	lsrs	r3, r3, #5
 8008f6a:	f003 020f 	and.w	r2, r3, #15
 8008f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4422      	add	r2, r4
 8008f76:	609a      	str	r2, [r3, #8]
}
 8008f78:	bf00      	nop
 8008f7a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f84:	51eb851f 	.word	0x51eb851f

08008f88 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008f88:	b084      	sub	sp, #16
 8008f8a:	b580      	push	{r7, lr}
 8008f8c:	b084      	sub	sp, #16
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
 8008f92:	f107 001c 	add.w	r0, r7, #28
 8008f96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008f9a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d123      	bne.n	8008fea <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fa6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	68db      	ldr	r3, [r3, #12]
 8008fb2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008fb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008fca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d105      	bne.n	8008fde <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 faa0 	bl	8009524 <USB_CoreReset>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	73fb      	strb	r3, [r7, #15]
 8008fe8:	e01b      	b.n	8009022 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 fa94 	bl	8009524 <USB_CoreReset>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009000:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009004:	2b00      	cmp	r3, #0
 8009006:	d106      	bne.n	8009016 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800900c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	639a      	str	r2, [r3, #56]	; 0x38
 8009014:	e005      	b.n	8009022 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800901a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009022:	7fbb      	ldrb	r3, [r7, #30]
 8009024:	2b01      	cmp	r3, #1
 8009026:	d10b      	bne.n	8009040 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	689b      	ldr	r3, [r3, #8]
 800902c:	f043 0206 	orr.w	r2, r3, #6
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	689b      	ldr	r3, [r3, #8]
 8009038:	f043 0220 	orr.w	r2, r3, #32
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009040:	7bfb      	ldrb	r3, [r7, #15]
}
 8009042:	4618      	mov	r0, r3
 8009044:	3710      	adds	r7, #16
 8009046:	46bd      	mov	sp, r7
 8009048:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800904c:	b004      	add	sp, #16
 800904e:	4770      	bx	lr

08009050 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009050:	b480      	push	{r7}
 8009052:	b083      	sub	sp, #12
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	689b      	ldr	r3, [r3, #8]
 800905c:	f023 0201 	bic.w	r2, r3, #1
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009064:	2300      	movs	r3, #0
}
 8009066:	4618      	mov	r0, r3
 8009068:	370c      	adds	r7, #12
 800906a:	46bd      	mov	sp, r7
 800906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009070:	4770      	bx	lr

08009072 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009072:	b580      	push	{r7, lr}
 8009074:	b084      	sub	sp, #16
 8009076:	af00      	add	r7, sp, #0
 8009078:	6078      	str	r0, [r7, #4]
 800907a:	460b      	mov	r3, r1
 800907c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800907e:	2300      	movs	r3, #0
 8009080:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	68db      	ldr	r3, [r3, #12]
 8009086:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800908e:	78fb      	ldrb	r3, [r7, #3]
 8009090:	2b01      	cmp	r3, #1
 8009092:	d115      	bne.n	80090c0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80090a0:	200a      	movs	r0, #10
 80090a2:	f7fa fd6d 	bl	8003b80 <HAL_Delay>
      ms += 10U;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	330a      	adds	r3, #10
 80090aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f000 fa2b 	bl	8009508 <USB_GetMode>
 80090b2:	4603      	mov	r3, r0
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d01e      	beq.n	80090f6 <USB_SetCurrentMode+0x84>
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2bc7      	cmp	r3, #199	; 0xc7
 80090bc:	d9f0      	bls.n	80090a0 <USB_SetCurrentMode+0x2e>
 80090be:	e01a      	b.n	80090f6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80090c0:	78fb      	ldrb	r3, [r7, #3]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d115      	bne.n	80090f2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	68db      	ldr	r3, [r3, #12]
 80090ca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80090d2:	200a      	movs	r0, #10
 80090d4:	f7fa fd54 	bl	8003b80 <HAL_Delay>
      ms += 10U;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	330a      	adds	r3, #10
 80090dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 fa12 	bl	8009508 <USB_GetMode>
 80090e4:	4603      	mov	r3, r0
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d005      	beq.n	80090f6 <USB_SetCurrentMode+0x84>
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2bc7      	cmp	r3, #199	; 0xc7
 80090ee:	d9f0      	bls.n	80090d2 <USB_SetCurrentMode+0x60>
 80090f0:	e001      	b.n	80090f6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80090f2:	2301      	movs	r3, #1
 80090f4:	e005      	b.n	8009102 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	2bc8      	cmp	r3, #200	; 0xc8
 80090fa:	d101      	bne.n	8009100 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80090fc:	2301      	movs	r3, #1
 80090fe:	e000      	b.n	8009102 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009100:	2300      	movs	r3, #0
}
 8009102:	4618      	mov	r0, r3
 8009104:	3710      	adds	r7, #16
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
	...

0800910c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800910c:	b084      	sub	sp, #16
 800910e:	b580      	push	{r7, lr}
 8009110:	b086      	sub	sp, #24
 8009112:	af00      	add	r7, sp, #0
 8009114:	6078      	str	r0, [r7, #4]
 8009116:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800911a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800911e:	2300      	movs	r3, #0
 8009120:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009126:	2300      	movs	r3, #0
 8009128:	613b      	str	r3, [r7, #16]
 800912a:	e009      	b.n	8009140 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	3340      	adds	r3, #64	; 0x40
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	4413      	add	r3, r2
 8009136:	2200      	movs	r2, #0
 8009138:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	3301      	adds	r3, #1
 800913e:	613b      	str	r3, [r7, #16]
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	2b0e      	cmp	r3, #14
 8009144:	d9f2      	bls.n	800912c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009146:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800914a:	2b00      	cmp	r3, #0
 800914c:	d11c      	bne.n	8009188 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	68fa      	ldr	r2, [r7, #12]
 8009158:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800915c:	f043 0302 	orr.w	r3, r3, #2
 8009160:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009166:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009172:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800917e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	639a      	str	r2, [r3, #56]	; 0x38
 8009186:	e00b      	b.n	80091a0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800918c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009198:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80091a6:	461a      	mov	r2, r3
 80091a8:	2300      	movs	r3, #0
 80091aa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80091ac:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d10d      	bne.n	80091d0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80091b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d104      	bne.n	80091c6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80091bc:	2100      	movs	r1, #0
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 f968 	bl	8009494 <USB_SetDevSpeed>
 80091c4:	e008      	b.n	80091d8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80091c6:	2101      	movs	r1, #1
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f000 f963 	bl	8009494 <USB_SetDevSpeed>
 80091ce:	e003      	b.n	80091d8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80091d0:	2103      	movs	r1, #3
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 f95e 	bl	8009494 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80091d8:	2110      	movs	r1, #16
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f000 f8fa 	bl	80093d4 <USB_FlushTxFifo>
 80091e0:	4603      	mov	r3, r0
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d001      	beq.n	80091ea <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80091e6:	2301      	movs	r3, #1
 80091e8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 f924 	bl	8009438 <USB_FlushRxFifo>
 80091f0:	4603      	mov	r3, r0
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d001      	beq.n	80091fa <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80091f6:	2301      	movs	r3, #1
 80091f8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009200:	461a      	mov	r2, r3
 8009202:	2300      	movs	r3, #0
 8009204:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800920c:	461a      	mov	r2, r3
 800920e:	2300      	movs	r3, #0
 8009210:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009218:	461a      	mov	r2, r3
 800921a:	2300      	movs	r3, #0
 800921c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800921e:	2300      	movs	r3, #0
 8009220:	613b      	str	r3, [r7, #16]
 8009222:	e043      	b.n	80092ac <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	015a      	lsls	r2, r3, #5
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	4413      	add	r3, r2
 800922c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009236:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800923a:	d118      	bne.n	800926e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d10a      	bne.n	8009258 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	015a      	lsls	r2, r3, #5
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	4413      	add	r3, r2
 800924a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800924e:	461a      	mov	r2, r3
 8009250:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009254:	6013      	str	r3, [r2, #0]
 8009256:	e013      	b.n	8009280 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	015a      	lsls	r2, r3, #5
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	4413      	add	r3, r2
 8009260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009264:	461a      	mov	r2, r3
 8009266:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800926a:	6013      	str	r3, [r2, #0]
 800926c:	e008      	b.n	8009280 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	015a      	lsls	r2, r3, #5
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	4413      	add	r3, r2
 8009276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800927a:	461a      	mov	r2, r3
 800927c:	2300      	movs	r3, #0
 800927e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	015a      	lsls	r2, r3, #5
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	4413      	add	r3, r2
 8009288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800928c:	461a      	mov	r2, r3
 800928e:	2300      	movs	r3, #0
 8009290:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	015a      	lsls	r2, r3, #5
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	4413      	add	r3, r2
 800929a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800929e:	461a      	mov	r2, r3
 80092a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80092a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	3301      	adds	r3, #1
 80092aa:	613b      	str	r3, [r7, #16]
 80092ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80092b0:	461a      	mov	r2, r3
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d3b5      	bcc.n	8009224 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80092b8:	2300      	movs	r3, #0
 80092ba:	613b      	str	r3, [r7, #16]
 80092bc:	e043      	b.n	8009346 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	015a      	lsls	r2, r3, #5
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	4413      	add	r3, r2
 80092c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092d4:	d118      	bne.n	8009308 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d10a      	bne.n	80092f2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	015a      	lsls	r2, r3, #5
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	4413      	add	r3, r2
 80092e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092e8:	461a      	mov	r2, r3
 80092ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80092ee:	6013      	str	r3, [r2, #0]
 80092f0:	e013      	b.n	800931a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	015a      	lsls	r2, r3, #5
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	4413      	add	r3, r2
 80092fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092fe:	461a      	mov	r2, r3
 8009300:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009304:	6013      	str	r3, [r2, #0]
 8009306:	e008      	b.n	800931a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	015a      	lsls	r2, r3, #5
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	4413      	add	r3, r2
 8009310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009314:	461a      	mov	r2, r3
 8009316:	2300      	movs	r3, #0
 8009318:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	015a      	lsls	r2, r3, #5
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	4413      	add	r3, r2
 8009322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009326:	461a      	mov	r2, r3
 8009328:	2300      	movs	r3, #0
 800932a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	015a      	lsls	r2, r3, #5
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	4413      	add	r3, r2
 8009334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009338:	461a      	mov	r2, r3
 800933a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800933e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	3301      	adds	r3, #1
 8009344:	613b      	str	r3, [r7, #16]
 8009346:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800934a:	461a      	mov	r2, r3
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	4293      	cmp	r3, r2
 8009350:	d3b5      	bcc.n	80092be <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009358:	691b      	ldr	r3, [r3, #16]
 800935a:	68fa      	ldr	r2, [r7, #12]
 800935c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009360:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009364:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2200      	movs	r2, #0
 800936a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009372:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009374:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009378:	2b00      	cmp	r3, #0
 800937a:	d105      	bne.n	8009388 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	699b      	ldr	r3, [r3, #24]
 8009380:	f043 0210 	orr.w	r2, r3, #16
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	699a      	ldr	r2, [r3, #24]
 800938c:	4b10      	ldr	r3, [pc, #64]	; (80093d0 <USB_DevInit+0x2c4>)
 800938e:	4313      	orrs	r3, r2
 8009390:	687a      	ldr	r2, [r7, #4]
 8009392:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009394:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8009398:	2b00      	cmp	r3, #0
 800939a:	d005      	beq.n	80093a8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	699b      	ldr	r3, [r3, #24]
 80093a0:	f043 0208 	orr.w	r2, r3, #8
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80093a8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	d107      	bne.n	80093c0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	699b      	ldr	r3, [r3, #24]
 80093b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80093b8:	f043 0304 	orr.w	r3, r3, #4
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80093c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3718      	adds	r7, #24
 80093c6:	46bd      	mov	sp, r7
 80093c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80093cc:	b004      	add	sp, #16
 80093ce:	4770      	bx	lr
 80093d0:	803c3800 	.word	0x803c3800

080093d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b085      	sub	sp, #20
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
 80093dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80093de:	2300      	movs	r3, #0
 80093e0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	3301      	adds	r3, #1
 80093e6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80093ee:	d901      	bls.n	80093f4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80093f0:	2303      	movs	r3, #3
 80093f2:	e01b      	b.n	800942c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	691b      	ldr	r3, [r3, #16]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	daf2      	bge.n	80093e2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80093fc:	2300      	movs	r3, #0
 80093fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	019b      	lsls	r3, r3, #6
 8009404:	f043 0220 	orr.w	r2, r3, #32
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	3301      	adds	r3, #1
 8009410:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009418:	d901      	bls.n	800941e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800941a:	2303      	movs	r3, #3
 800941c:	e006      	b.n	800942c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	691b      	ldr	r3, [r3, #16]
 8009422:	f003 0320 	and.w	r3, r3, #32
 8009426:	2b20      	cmp	r3, #32
 8009428:	d0f0      	beq.n	800940c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800942a:	2300      	movs	r3, #0
}
 800942c:	4618      	mov	r0, r3
 800942e:	3714      	adds	r7, #20
 8009430:	46bd      	mov	sp, r7
 8009432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009436:	4770      	bx	lr

08009438 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009438:	b480      	push	{r7}
 800943a:	b085      	sub	sp, #20
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009440:	2300      	movs	r3, #0
 8009442:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	3301      	adds	r3, #1
 8009448:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009450:	d901      	bls.n	8009456 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009452:	2303      	movs	r3, #3
 8009454:	e018      	b.n	8009488 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	691b      	ldr	r3, [r3, #16]
 800945a:	2b00      	cmp	r3, #0
 800945c:	daf2      	bge.n	8009444 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800945e:	2300      	movs	r3, #0
 8009460:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2210      	movs	r2, #16
 8009466:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	3301      	adds	r3, #1
 800946c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009474:	d901      	bls.n	800947a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009476:	2303      	movs	r3, #3
 8009478:	e006      	b.n	8009488 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	691b      	ldr	r3, [r3, #16]
 800947e:	f003 0310 	and.w	r3, r3, #16
 8009482:	2b10      	cmp	r3, #16
 8009484:	d0f0      	beq.n	8009468 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009486:	2300      	movs	r3, #0
}
 8009488:	4618      	mov	r0, r3
 800948a:	3714      	adds	r7, #20
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr

08009494 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009494:	b480      	push	{r7}
 8009496:	b085      	sub	sp, #20
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	460b      	mov	r3, r1
 800949e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094aa:	681a      	ldr	r2, [r3, #0]
 80094ac:	78fb      	ldrb	r3, [r7, #3]
 80094ae:	68f9      	ldr	r1, [r7, #12]
 80094b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80094b4:	4313      	orrs	r3, r2
 80094b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80094b8:	2300      	movs	r3, #0
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3714      	adds	r7, #20
 80094be:	46bd      	mov	sp, r7
 80094c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c4:	4770      	bx	lr

080094c6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80094c6:	b480      	push	{r7}
 80094c8:	b085      	sub	sp, #20
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	68fa      	ldr	r2, [r7, #12]
 80094dc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80094e0:	f023 0303 	bic.w	r3, r3, #3
 80094e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	68fa      	ldr	r2, [r7, #12]
 80094f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094f4:	f043 0302 	orr.w	r3, r3, #2
 80094f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80094fa:	2300      	movs	r3, #0
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3714      	adds	r7, #20
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	695b      	ldr	r3, [r3, #20]
 8009514:	f003 0301 	and.w	r3, r3, #1
}
 8009518:	4618      	mov	r0, r3
 800951a:	370c      	adds	r7, #12
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr

08009524 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009524:	b480      	push	{r7}
 8009526:	b085      	sub	sp, #20
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800952c:	2300      	movs	r3, #0
 800952e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	3301      	adds	r3, #1
 8009534:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800953c:	d901      	bls.n	8009542 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800953e:	2303      	movs	r3, #3
 8009540:	e01b      	b.n	800957a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	691b      	ldr	r3, [r3, #16]
 8009546:	2b00      	cmp	r3, #0
 8009548:	daf2      	bge.n	8009530 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800954a:	2300      	movs	r3, #0
 800954c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	691b      	ldr	r3, [r3, #16]
 8009552:	f043 0201 	orr.w	r2, r3, #1
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	3301      	adds	r3, #1
 800955e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009566:	d901      	bls.n	800956c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009568:	2303      	movs	r3, #3
 800956a:	e006      	b.n	800957a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	691b      	ldr	r3, [r3, #16]
 8009570:	f003 0301 	and.w	r3, r3, #1
 8009574:	2b01      	cmp	r3, #1
 8009576:	d0f0      	beq.n	800955a <USB_CoreReset+0x36>

  return HAL_OK;
 8009578:	2300      	movs	r3, #0
}
 800957a:	4618      	mov	r0, r3
 800957c:	3714      	adds	r7, #20
 800957e:	46bd      	mov	sp, r7
 8009580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009584:	4770      	bx	lr

08009586 <__cvt>:
 8009586:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800958a:	ec55 4b10 	vmov	r4, r5, d0
 800958e:	2d00      	cmp	r5, #0
 8009590:	460e      	mov	r6, r1
 8009592:	4619      	mov	r1, r3
 8009594:	462b      	mov	r3, r5
 8009596:	bfbb      	ittet	lt
 8009598:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800959c:	461d      	movlt	r5, r3
 800959e:	2300      	movge	r3, #0
 80095a0:	232d      	movlt	r3, #45	; 0x2d
 80095a2:	700b      	strb	r3, [r1, #0]
 80095a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095a6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80095aa:	4691      	mov	r9, r2
 80095ac:	f023 0820 	bic.w	r8, r3, #32
 80095b0:	bfbc      	itt	lt
 80095b2:	4622      	movlt	r2, r4
 80095b4:	4614      	movlt	r4, r2
 80095b6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80095ba:	d005      	beq.n	80095c8 <__cvt+0x42>
 80095bc:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80095c0:	d100      	bne.n	80095c4 <__cvt+0x3e>
 80095c2:	3601      	adds	r6, #1
 80095c4:	2102      	movs	r1, #2
 80095c6:	e000      	b.n	80095ca <__cvt+0x44>
 80095c8:	2103      	movs	r1, #3
 80095ca:	ab03      	add	r3, sp, #12
 80095cc:	9301      	str	r3, [sp, #4]
 80095ce:	ab02      	add	r3, sp, #8
 80095d0:	9300      	str	r3, [sp, #0]
 80095d2:	ec45 4b10 	vmov	d0, r4, r5
 80095d6:	4653      	mov	r3, sl
 80095d8:	4632      	mov	r2, r6
 80095da:	f001 f941 	bl	800a860 <_dtoa_r>
 80095de:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80095e2:	4607      	mov	r7, r0
 80095e4:	d102      	bne.n	80095ec <__cvt+0x66>
 80095e6:	f019 0f01 	tst.w	r9, #1
 80095ea:	d022      	beq.n	8009632 <__cvt+0xac>
 80095ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80095f0:	eb07 0906 	add.w	r9, r7, r6
 80095f4:	d110      	bne.n	8009618 <__cvt+0x92>
 80095f6:	783b      	ldrb	r3, [r7, #0]
 80095f8:	2b30      	cmp	r3, #48	; 0x30
 80095fa:	d10a      	bne.n	8009612 <__cvt+0x8c>
 80095fc:	2200      	movs	r2, #0
 80095fe:	2300      	movs	r3, #0
 8009600:	4620      	mov	r0, r4
 8009602:	4629      	mov	r1, r5
 8009604:	f7f7 fa70 	bl	8000ae8 <__aeabi_dcmpeq>
 8009608:	b918      	cbnz	r0, 8009612 <__cvt+0x8c>
 800960a:	f1c6 0601 	rsb	r6, r6, #1
 800960e:	f8ca 6000 	str.w	r6, [sl]
 8009612:	f8da 3000 	ldr.w	r3, [sl]
 8009616:	4499      	add	r9, r3
 8009618:	2200      	movs	r2, #0
 800961a:	2300      	movs	r3, #0
 800961c:	4620      	mov	r0, r4
 800961e:	4629      	mov	r1, r5
 8009620:	f7f7 fa62 	bl	8000ae8 <__aeabi_dcmpeq>
 8009624:	b108      	cbz	r0, 800962a <__cvt+0xa4>
 8009626:	f8cd 900c 	str.w	r9, [sp, #12]
 800962a:	2230      	movs	r2, #48	; 0x30
 800962c:	9b03      	ldr	r3, [sp, #12]
 800962e:	454b      	cmp	r3, r9
 8009630:	d307      	bcc.n	8009642 <__cvt+0xbc>
 8009632:	9b03      	ldr	r3, [sp, #12]
 8009634:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009636:	1bdb      	subs	r3, r3, r7
 8009638:	4638      	mov	r0, r7
 800963a:	6013      	str	r3, [r2, #0]
 800963c:	b004      	add	sp, #16
 800963e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009642:	1c59      	adds	r1, r3, #1
 8009644:	9103      	str	r1, [sp, #12]
 8009646:	701a      	strb	r2, [r3, #0]
 8009648:	e7f0      	b.n	800962c <__cvt+0xa6>

0800964a <__exponent>:
 800964a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800964c:	4603      	mov	r3, r0
 800964e:	2900      	cmp	r1, #0
 8009650:	bfb8      	it	lt
 8009652:	4249      	neglt	r1, r1
 8009654:	f803 2b02 	strb.w	r2, [r3], #2
 8009658:	bfb4      	ite	lt
 800965a:	222d      	movlt	r2, #45	; 0x2d
 800965c:	222b      	movge	r2, #43	; 0x2b
 800965e:	2909      	cmp	r1, #9
 8009660:	7042      	strb	r2, [r0, #1]
 8009662:	dd2a      	ble.n	80096ba <__exponent+0x70>
 8009664:	f10d 0207 	add.w	r2, sp, #7
 8009668:	4617      	mov	r7, r2
 800966a:	260a      	movs	r6, #10
 800966c:	4694      	mov	ip, r2
 800966e:	fb91 f5f6 	sdiv	r5, r1, r6
 8009672:	fb06 1415 	mls	r4, r6, r5, r1
 8009676:	3430      	adds	r4, #48	; 0x30
 8009678:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800967c:	460c      	mov	r4, r1
 800967e:	2c63      	cmp	r4, #99	; 0x63
 8009680:	f102 32ff 	add.w	r2, r2, #4294967295
 8009684:	4629      	mov	r1, r5
 8009686:	dcf1      	bgt.n	800966c <__exponent+0x22>
 8009688:	3130      	adds	r1, #48	; 0x30
 800968a:	f1ac 0402 	sub.w	r4, ip, #2
 800968e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009692:	1c41      	adds	r1, r0, #1
 8009694:	4622      	mov	r2, r4
 8009696:	42ba      	cmp	r2, r7
 8009698:	d30a      	bcc.n	80096b0 <__exponent+0x66>
 800969a:	f10d 0209 	add.w	r2, sp, #9
 800969e:	eba2 020c 	sub.w	r2, r2, ip
 80096a2:	42bc      	cmp	r4, r7
 80096a4:	bf88      	it	hi
 80096a6:	2200      	movhi	r2, #0
 80096a8:	4413      	add	r3, r2
 80096aa:	1a18      	subs	r0, r3, r0
 80096ac:	b003      	add	sp, #12
 80096ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096b0:	f812 5b01 	ldrb.w	r5, [r2], #1
 80096b4:	f801 5f01 	strb.w	r5, [r1, #1]!
 80096b8:	e7ed      	b.n	8009696 <__exponent+0x4c>
 80096ba:	2330      	movs	r3, #48	; 0x30
 80096bc:	3130      	adds	r1, #48	; 0x30
 80096be:	7083      	strb	r3, [r0, #2]
 80096c0:	70c1      	strb	r1, [r0, #3]
 80096c2:	1d03      	adds	r3, r0, #4
 80096c4:	e7f1      	b.n	80096aa <__exponent+0x60>
	...

080096c8 <_printf_float>:
 80096c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096cc:	ed2d 8b02 	vpush	{d8}
 80096d0:	b08d      	sub	sp, #52	; 0x34
 80096d2:	460c      	mov	r4, r1
 80096d4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80096d8:	4616      	mov	r6, r2
 80096da:	461f      	mov	r7, r3
 80096dc:	4605      	mov	r5, r0
 80096de:	f000 ffb7 	bl	800a650 <_localeconv_r>
 80096e2:	f8d0 a000 	ldr.w	sl, [r0]
 80096e6:	4650      	mov	r0, sl
 80096e8:	f7f6 fdd2 	bl	8000290 <strlen>
 80096ec:	2300      	movs	r3, #0
 80096ee:	930a      	str	r3, [sp, #40]	; 0x28
 80096f0:	6823      	ldr	r3, [r4, #0]
 80096f2:	9305      	str	r3, [sp, #20]
 80096f4:	f8d8 3000 	ldr.w	r3, [r8]
 80096f8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80096fc:	3307      	adds	r3, #7
 80096fe:	f023 0307 	bic.w	r3, r3, #7
 8009702:	f103 0208 	add.w	r2, r3, #8
 8009706:	f8c8 2000 	str.w	r2, [r8]
 800970a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800970e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009712:	9307      	str	r3, [sp, #28]
 8009714:	f8cd 8018 	str.w	r8, [sp, #24]
 8009718:	ee08 0a10 	vmov	s16, r0
 800971c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009720:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009724:	4b9e      	ldr	r3, [pc, #632]	; (80099a0 <_printf_float+0x2d8>)
 8009726:	f04f 32ff 	mov.w	r2, #4294967295
 800972a:	f7f7 fa0f 	bl	8000b4c <__aeabi_dcmpun>
 800972e:	bb88      	cbnz	r0, 8009794 <_printf_float+0xcc>
 8009730:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009734:	4b9a      	ldr	r3, [pc, #616]	; (80099a0 <_printf_float+0x2d8>)
 8009736:	f04f 32ff 	mov.w	r2, #4294967295
 800973a:	f7f7 f9e9 	bl	8000b10 <__aeabi_dcmple>
 800973e:	bb48      	cbnz	r0, 8009794 <_printf_float+0xcc>
 8009740:	2200      	movs	r2, #0
 8009742:	2300      	movs	r3, #0
 8009744:	4640      	mov	r0, r8
 8009746:	4649      	mov	r1, r9
 8009748:	f7f7 f9d8 	bl	8000afc <__aeabi_dcmplt>
 800974c:	b110      	cbz	r0, 8009754 <_printf_float+0x8c>
 800974e:	232d      	movs	r3, #45	; 0x2d
 8009750:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009754:	4a93      	ldr	r2, [pc, #588]	; (80099a4 <_printf_float+0x2dc>)
 8009756:	4b94      	ldr	r3, [pc, #592]	; (80099a8 <_printf_float+0x2e0>)
 8009758:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800975c:	bf94      	ite	ls
 800975e:	4690      	movls	r8, r2
 8009760:	4698      	movhi	r8, r3
 8009762:	2303      	movs	r3, #3
 8009764:	6123      	str	r3, [r4, #16]
 8009766:	9b05      	ldr	r3, [sp, #20]
 8009768:	f023 0304 	bic.w	r3, r3, #4
 800976c:	6023      	str	r3, [r4, #0]
 800976e:	f04f 0900 	mov.w	r9, #0
 8009772:	9700      	str	r7, [sp, #0]
 8009774:	4633      	mov	r3, r6
 8009776:	aa0b      	add	r2, sp, #44	; 0x2c
 8009778:	4621      	mov	r1, r4
 800977a:	4628      	mov	r0, r5
 800977c:	f000 f9da 	bl	8009b34 <_printf_common>
 8009780:	3001      	adds	r0, #1
 8009782:	f040 8090 	bne.w	80098a6 <_printf_float+0x1de>
 8009786:	f04f 30ff 	mov.w	r0, #4294967295
 800978a:	b00d      	add	sp, #52	; 0x34
 800978c:	ecbd 8b02 	vpop	{d8}
 8009790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009794:	4642      	mov	r2, r8
 8009796:	464b      	mov	r3, r9
 8009798:	4640      	mov	r0, r8
 800979a:	4649      	mov	r1, r9
 800979c:	f7f7 f9d6 	bl	8000b4c <__aeabi_dcmpun>
 80097a0:	b140      	cbz	r0, 80097b4 <_printf_float+0xec>
 80097a2:	464b      	mov	r3, r9
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	bfbc      	itt	lt
 80097a8:	232d      	movlt	r3, #45	; 0x2d
 80097aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80097ae:	4a7f      	ldr	r2, [pc, #508]	; (80099ac <_printf_float+0x2e4>)
 80097b0:	4b7f      	ldr	r3, [pc, #508]	; (80099b0 <_printf_float+0x2e8>)
 80097b2:	e7d1      	b.n	8009758 <_printf_float+0x90>
 80097b4:	6863      	ldr	r3, [r4, #4]
 80097b6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80097ba:	9206      	str	r2, [sp, #24]
 80097bc:	1c5a      	adds	r2, r3, #1
 80097be:	d13f      	bne.n	8009840 <_printf_float+0x178>
 80097c0:	2306      	movs	r3, #6
 80097c2:	6063      	str	r3, [r4, #4]
 80097c4:	9b05      	ldr	r3, [sp, #20]
 80097c6:	6861      	ldr	r1, [r4, #4]
 80097c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80097cc:	2300      	movs	r3, #0
 80097ce:	9303      	str	r3, [sp, #12]
 80097d0:	ab0a      	add	r3, sp, #40	; 0x28
 80097d2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80097d6:	ab09      	add	r3, sp, #36	; 0x24
 80097d8:	ec49 8b10 	vmov	d0, r8, r9
 80097dc:	9300      	str	r3, [sp, #0]
 80097de:	6022      	str	r2, [r4, #0]
 80097e0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80097e4:	4628      	mov	r0, r5
 80097e6:	f7ff fece 	bl	8009586 <__cvt>
 80097ea:	9b06      	ldr	r3, [sp, #24]
 80097ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80097ee:	2b47      	cmp	r3, #71	; 0x47
 80097f0:	4680      	mov	r8, r0
 80097f2:	d108      	bne.n	8009806 <_printf_float+0x13e>
 80097f4:	1cc8      	adds	r0, r1, #3
 80097f6:	db02      	blt.n	80097fe <_printf_float+0x136>
 80097f8:	6863      	ldr	r3, [r4, #4]
 80097fa:	4299      	cmp	r1, r3
 80097fc:	dd41      	ble.n	8009882 <_printf_float+0x1ba>
 80097fe:	f1ab 0302 	sub.w	r3, fp, #2
 8009802:	fa5f fb83 	uxtb.w	fp, r3
 8009806:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800980a:	d820      	bhi.n	800984e <_printf_float+0x186>
 800980c:	3901      	subs	r1, #1
 800980e:	465a      	mov	r2, fp
 8009810:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009814:	9109      	str	r1, [sp, #36]	; 0x24
 8009816:	f7ff ff18 	bl	800964a <__exponent>
 800981a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800981c:	1813      	adds	r3, r2, r0
 800981e:	2a01      	cmp	r2, #1
 8009820:	4681      	mov	r9, r0
 8009822:	6123      	str	r3, [r4, #16]
 8009824:	dc02      	bgt.n	800982c <_printf_float+0x164>
 8009826:	6822      	ldr	r2, [r4, #0]
 8009828:	07d2      	lsls	r2, r2, #31
 800982a:	d501      	bpl.n	8009830 <_printf_float+0x168>
 800982c:	3301      	adds	r3, #1
 800982e:	6123      	str	r3, [r4, #16]
 8009830:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009834:	2b00      	cmp	r3, #0
 8009836:	d09c      	beq.n	8009772 <_printf_float+0xaa>
 8009838:	232d      	movs	r3, #45	; 0x2d
 800983a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800983e:	e798      	b.n	8009772 <_printf_float+0xaa>
 8009840:	9a06      	ldr	r2, [sp, #24]
 8009842:	2a47      	cmp	r2, #71	; 0x47
 8009844:	d1be      	bne.n	80097c4 <_printf_float+0xfc>
 8009846:	2b00      	cmp	r3, #0
 8009848:	d1bc      	bne.n	80097c4 <_printf_float+0xfc>
 800984a:	2301      	movs	r3, #1
 800984c:	e7b9      	b.n	80097c2 <_printf_float+0xfa>
 800984e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009852:	d118      	bne.n	8009886 <_printf_float+0x1be>
 8009854:	2900      	cmp	r1, #0
 8009856:	6863      	ldr	r3, [r4, #4]
 8009858:	dd0b      	ble.n	8009872 <_printf_float+0x1aa>
 800985a:	6121      	str	r1, [r4, #16]
 800985c:	b913      	cbnz	r3, 8009864 <_printf_float+0x19c>
 800985e:	6822      	ldr	r2, [r4, #0]
 8009860:	07d0      	lsls	r0, r2, #31
 8009862:	d502      	bpl.n	800986a <_printf_float+0x1a2>
 8009864:	3301      	adds	r3, #1
 8009866:	440b      	add	r3, r1
 8009868:	6123      	str	r3, [r4, #16]
 800986a:	65a1      	str	r1, [r4, #88]	; 0x58
 800986c:	f04f 0900 	mov.w	r9, #0
 8009870:	e7de      	b.n	8009830 <_printf_float+0x168>
 8009872:	b913      	cbnz	r3, 800987a <_printf_float+0x1b2>
 8009874:	6822      	ldr	r2, [r4, #0]
 8009876:	07d2      	lsls	r2, r2, #31
 8009878:	d501      	bpl.n	800987e <_printf_float+0x1b6>
 800987a:	3302      	adds	r3, #2
 800987c:	e7f4      	b.n	8009868 <_printf_float+0x1a0>
 800987e:	2301      	movs	r3, #1
 8009880:	e7f2      	b.n	8009868 <_printf_float+0x1a0>
 8009882:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009888:	4299      	cmp	r1, r3
 800988a:	db05      	blt.n	8009898 <_printf_float+0x1d0>
 800988c:	6823      	ldr	r3, [r4, #0]
 800988e:	6121      	str	r1, [r4, #16]
 8009890:	07d8      	lsls	r0, r3, #31
 8009892:	d5ea      	bpl.n	800986a <_printf_float+0x1a2>
 8009894:	1c4b      	adds	r3, r1, #1
 8009896:	e7e7      	b.n	8009868 <_printf_float+0x1a0>
 8009898:	2900      	cmp	r1, #0
 800989a:	bfd4      	ite	le
 800989c:	f1c1 0202 	rsble	r2, r1, #2
 80098a0:	2201      	movgt	r2, #1
 80098a2:	4413      	add	r3, r2
 80098a4:	e7e0      	b.n	8009868 <_printf_float+0x1a0>
 80098a6:	6823      	ldr	r3, [r4, #0]
 80098a8:	055a      	lsls	r2, r3, #21
 80098aa:	d407      	bmi.n	80098bc <_printf_float+0x1f4>
 80098ac:	6923      	ldr	r3, [r4, #16]
 80098ae:	4642      	mov	r2, r8
 80098b0:	4631      	mov	r1, r6
 80098b2:	4628      	mov	r0, r5
 80098b4:	47b8      	blx	r7
 80098b6:	3001      	adds	r0, #1
 80098b8:	d12c      	bne.n	8009914 <_printf_float+0x24c>
 80098ba:	e764      	b.n	8009786 <_printf_float+0xbe>
 80098bc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80098c0:	f240 80e0 	bls.w	8009a84 <_printf_float+0x3bc>
 80098c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80098c8:	2200      	movs	r2, #0
 80098ca:	2300      	movs	r3, #0
 80098cc:	f7f7 f90c 	bl	8000ae8 <__aeabi_dcmpeq>
 80098d0:	2800      	cmp	r0, #0
 80098d2:	d034      	beq.n	800993e <_printf_float+0x276>
 80098d4:	4a37      	ldr	r2, [pc, #220]	; (80099b4 <_printf_float+0x2ec>)
 80098d6:	2301      	movs	r3, #1
 80098d8:	4631      	mov	r1, r6
 80098da:	4628      	mov	r0, r5
 80098dc:	47b8      	blx	r7
 80098de:	3001      	adds	r0, #1
 80098e0:	f43f af51 	beq.w	8009786 <_printf_float+0xbe>
 80098e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80098e8:	429a      	cmp	r2, r3
 80098ea:	db02      	blt.n	80098f2 <_printf_float+0x22a>
 80098ec:	6823      	ldr	r3, [r4, #0]
 80098ee:	07d8      	lsls	r0, r3, #31
 80098f0:	d510      	bpl.n	8009914 <_printf_float+0x24c>
 80098f2:	ee18 3a10 	vmov	r3, s16
 80098f6:	4652      	mov	r2, sl
 80098f8:	4631      	mov	r1, r6
 80098fa:	4628      	mov	r0, r5
 80098fc:	47b8      	blx	r7
 80098fe:	3001      	adds	r0, #1
 8009900:	f43f af41 	beq.w	8009786 <_printf_float+0xbe>
 8009904:	f04f 0800 	mov.w	r8, #0
 8009908:	f104 091a 	add.w	r9, r4, #26
 800990c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800990e:	3b01      	subs	r3, #1
 8009910:	4543      	cmp	r3, r8
 8009912:	dc09      	bgt.n	8009928 <_printf_float+0x260>
 8009914:	6823      	ldr	r3, [r4, #0]
 8009916:	079b      	lsls	r3, r3, #30
 8009918:	f100 8107 	bmi.w	8009b2a <_printf_float+0x462>
 800991c:	68e0      	ldr	r0, [r4, #12]
 800991e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009920:	4298      	cmp	r0, r3
 8009922:	bfb8      	it	lt
 8009924:	4618      	movlt	r0, r3
 8009926:	e730      	b.n	800978a <_printf_float+0xc2>
 8009928:	2301      	movs	r3, #1
 800992a:	464a      	mov	r2, r9
 800992c:	4631      	mov	r1, r6
 800992e:	4628      	mov	r0, r5
 8009930:	47b8      	blx	r7
 8009932:	3001      	adds	r0, #1
 8009934:	f43f af27 	beq.w	8009786 <_printf_float+0xbe>
 8009938:	f108 0801 	add.w	r8, r8, #1
 800993c:	e7e6      	b.n	800990c <_printf_float+0x244>
 800993e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009940:	2b00      	cmp	r3, #0
 8009942:	dc39      	bgt.n	80099b8 <_printf_float+0x2f0>
 8009944:	4a1b      	ldr	r2, [pc, #108]	; (80099b4 <_printf_float+0x2ec>)
 8009946:	2301      	movs	r3, #1
 8009948:	4631      	mov	r1, r6
 800994a:	4628      	mov	r0, r5
 800994c:	47b8      	blx	r7
 800994e:	3001      	adds	r0, #1
 8009950:	f43f af19 	beq.w	8009786 <_printf_float+0xbe>
 8009954:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009958:	4313      	orrs	r3, r2
 800995a:	d102      	bne.n	8009962 <_printf_float+0x29a>
 800995c:	6823      	ldr	r3, [r4, #0]
 800995e:	07d9      	lsls	r1, r3, #31
 8009960:	d5d8      	bpl.n	8009914 <_printf_float+0x24c>
 8009962:	ee18 3a10 	vmov	r3, s16
 8009966:	4652      	mov	r2, sl
 8009968:	4631      	mov	r1, r6
 800996a:	4628      	mov	r0, r5
 800996c:	47b8      	blx	r7
 800996e:	3001      	adds	r0, #1
 8009970:	f43f af09 	beq.w	8009786 <_printf_float+0xbe>
 8009974:	f04f 0900 	mov.w	r9, #0
 8009978:	f104 0a1a 	add.w	sl, r4, #26
 800997c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800997e:	425b      	negs	r3, r3
 8009980:	454b      	cmp	r3, r9
 8009982:	dc01      	bgt.n	8009988 <_printf_float+0x2c0>
 8009984:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009986:	e792      	b.n	80098ae <_printf_float+0x1e6>
 8009988:	2301      	movs	r3, #1
 800998a:	4652      	mov	r2, sl
 800998c:	4631      	mov	r1, r6
 800998e:	4628      	mov	r0, r5
 8009990:	47b8      	blx	r7
 8009992:	3001      	adds	r0, #1
 8009994:	f43f aef7 	beq.w	8009786 <_printf_float+0xbe>
 8009998:	f109 0901 	add.w	r9, r9, #1
 800999c:	e7ee      	b.n	800997c <_printf_float+0x2b4>
 800999e:	bf00      	nop
 80099a0:	7fefffff 	.word	0x7fefffff
 80099a4:	0800ed7c 	.word	0x0800ed7c
 80099a8:	0800ed80 	.word	0x0800ed80
 80099ac:	0800ed84 	.word	0x0800ed84
 80099b0:	0800ed88 	.word	0x0800ed88
 80099b4:	0800ed8c 	.word	0x0800ed8c
 80099b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80099bc:	429a      	cmp	r2, r3
 80099be:	bfa8      	it	ge
 80099c0:	461a      	movge	r2, r3
 80099c2:	2a00      	cmp	r2, #0
 80099c4:	4691      	mov	r9, r2
 80099c6:	dc37      	bgt.n	8009a38 <_printf_float+0x370>
 80099c8:	f04f 0b00 	mov.w	fp, #0
 80099cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80099d0:	f104 021a 	add.w	r2, r4, #26
 80099d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80099d6:	9305      	str	r3, [sp, #20]
 80099d8:	eba3 0309 	sub.w	r3, r3, r9
 80099dc:	455b      	cmp	r3, fp
 80099de:	dc33      	bgt.n	8009a48 <_printf_float+0x380>
 80099e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099e4:	429a      	cmp	r2, r3
 80099e6:	db3b      	blt.n	8009a60 <_printf_float+0x398>
 80099e8:	6823      	ldr	r3, [r4, #0]
 80099ea:	07da      	lsls	r2, r3, #31
 80099ec:	d438      	bmi.n	8009a60 <_printf_float+0x398>
 80099ee:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80099f2:	eba2 0903 	sub.w	r9, r2, r3
 80099f6:	9b05      	ldr	r3, [sp, #20]
 80099f8:	1ad2      	subs	r2, r2, r3
 80099fa:	4591      	cmp	r9, r2
 80099fc:	bfa8      	it	ge
 80099fe:	4691      	movge	r9, r2
 8009a00:	f1b9 0f00 	cmp.w	r9, #0
 8009a04:	dc35      	bgt.n	8009a72 <_printf_float+0x3aa>
 8009a06:	f04f 0800 	mov.w	r8, #0
 8009a0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a0e:	f104 0a1a 	add.w	sl, r4, #26
 8009a12:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a16:	1a9b      	subs	r3, r3, r2
 8009a18:	eba3 0309 	sub.w	r3, r3, r9
 8009a1c:	4543      	cmp	r3, r8
 8009a1e:	f77f af79 	ble.w	8009914 <_printf_float+0x24c>
 8009a22:	2301      	movs	r3, #1
 8009a24:	4652      	mov	r2, sl
 8009a26:	4631      	mov	r1, r6
 8009a28:	4628      	mov	r0, r5
 8009a2a:	47b8      	blx	r7
 8009a2c:	3001      	adds	r0, #1
 8009a2e:	f43f aeaa 	beq.w	8009786 <_printf_float+0xbe>
 8009a32:	f108 0801 	add.w	r8, r8, #1
 8009a36:	e7ec      	b.n	8009a12 <_printf_float+0x34a>
 8009a38:	4613      	mov	r3, r2
 8009a3a:	4631      	mov	r1, r6
 8009a3c:	4642      	mov	r2, r8
 8009a3e:	4628      	mov	r0, r5
 8009a40:	47b8      	blx	r7
 8009a42:	3001      	adds	r0, #1
 8009a44:	d1c0      	bne.n	80099c8 <_printf_float+0x300>
 8009a46:	e69e      	b.n	8009786 <_printf_float+0xbe>
 8009a48:	2301      	movs	r3, #1
 8009a4a:	4631      	mov	r1, r6
 8009a4c:	4628      	mov	r0, r5
 8009a4e:	9205      	str	r2, [sp, #20]
 8009a50:	47b8      	blx	r7
 8009a52:	3001      	adds	r0, #1
 8009a54:	f43f ae97 	beq.w	8009786 <_printf_float+0xbe>
 8009a58:	9a05      	ldr	r2, [sp, #20]
 8009a5a:	f10b 0b01 	add.w	fp, fp, #1
 8009a5e:	e7b9      	b.n	80099d4 <_printf_float+0x30c>
 8009a60:	ee18 3a10 	vmov	r3, s16
 8009a64:	4652      	mov	r2, sl
 8009a66:	4631      	mov	r1, r6
 8009a68:	4628      	mov	r0, r5
 8009a6a:	47b8      	blx	r7
 8009a6c:	3001      	adds	r0, #1
 8009a6e:	d1be      	bne.n	80099ee <_printf_float+0x326>
 8009a70:	e689      	b.n	8009786 <_printf_float+0xbe>
 8009a72:	9a05      	ldr	r2, [sp, #20]
 8009a74:	464b      	mov	r3, r9
 8009a76:	4442      	add	r2, r8
 8009a78:	4631      	mov	r1, r6
 8009a7a:	4628      	mov	r0, r5
 8009a7c:	47b8      	blx	r7
 8009a7e:	3001      	adds	r0, #1
 8009a80:	d1c1      	bne.n	8009a06 <_printf_float+0x33e>
 8009a82:	e680      	b.n	8009786 <_printf_float+0xbe>
 8009a84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a86:	2a01      	cmp	r2, #1
 8009a88:	dc01      	bgt.n	8009a8e <_printf_float+0x3c6>
 8009a8a:	07db      	lsls	r3, r3, #31
 8009a8c:	d53a      	bpl.n	8009b04 <_printf_float+0x43c>
 8009a8e:	2301      	movs	r3, #1
 8009a90:	4642      	mov	r2, r8
 8009a92:	4631      	mov	r1, r6
 8009a94:	4628      	mov	r0, r5
 8009a96:	47b8      	blx	r7
 8009a98:	3001      	adds	r0, #1
 8009a9a:	f43f ae74 	beq.w	8009786 <_printf_float+0xbe>
 8009a9e:	ee18 3a10 	vmov	r3, s16
 8009aa2:	4652      	mov	r2, sl
 8009aa4:	4631      	mov	r1, r6
 8009aa6:	4628      	mov	r0, r5
 8009aa8:	47b8      	blx	r7
 8009aaa:	3001      	adds	r0, #1
 8009aac:	f43f ae6b 	beq.w	8009786 <_printf_float+0xbe>
 8009ab0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009abc:	f7f7 f814 	bl	8000ae8 <__aeabi_dcmpeq>
 8009ac0:	b9d8      	cbnz	r0, 8009afa <_printf_float+0x432>
 8009ac2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009ac6:	f108 0201 	add.w	r2, r8, #1
 8009aca:	4631      	mov	r1, r6
 8009acc:	4628      	mov	r0, r5
 8009ace:	47b8      	blx	r7
 8009ad0:	3001      	adds	r0, #1
 8009ad2:	d10e      	bne.n	8009af2 <_printf_float+0x42a>
 8009ad4:	e657      	b.n	8009786 <_printf_float+0xbe>
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	4652      	mov	r2, sl
 8009ada:	4631      	mov	r1, r6
 8009adc:	4628      	mov	r0, r5
 8009ade:	47b8      	blx	r7
 8009ae0:	3001      	adds	r0, #1
 8009ae2:	f43f ae50 	beq.w	8009786 <_printf_float+0xbe>
 8009ae6:	f108 0801 	add.w	r8, r8, #1
 8009aea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009aec:	3b01      	subs	r3, #1
 8009aee:	4543      	cmp	r3, r8
 8009af0:	dcf1      	bgt.n	8009ad6 <_printf_float+0x40e>
 8009af2:	464b      	mov	r3, r9
 8009af4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009af8:	e6da      	b.n	80098b0 <_printf_float+0x1e8>
 8009afa:	f04f 0800 	mov.w	r8, #0
 8009afe:	f104 0a1a 	add.w	sl, r4, #26
 8009b02:	e7f2      	b.n	8009aea <_printf_float+0x422>
 8009b04:	2301      	movs	r3, #1
 8009b06:	4642      	mov	r2, r8
 8009b08:	e7df      	b.n	8009aca <_printf_float+0x402>
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	464a      	mov	r2, r9
 8009b0e:	4631      	mov	r1, r6
 8009b10:	4628      	mov	r0, r5
 8009b12:	47b8      	blx	r7
 8009b14:	3001      	adds	r0, #1
 8009b16:	f43f ae36 	beq.w	8009786 <_printf_float+0xbe>
 8009b1a:	f108 0801 	add.w	r8, r8, #1
 8009b1e:	68e3      	ldr	r3, [r4, #12]
 8009b20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009b22:	1a5b      	subs	r3, r3, r1
 8009b24:	4543      	cmp	r3, r8
 8009b26:	dcf0      	bgt.n	8009b0a <_printf_float+0x442>
 8009b28:	e6f8      	b.n	800991c <_printf_float+0x254>
 8009b2a:	f04f 0800 	mov.w	r8, #0
 8009b2e:	f104 0919 	add.w	r9, r4, #25
 8009b32:	e7f4      	b.n	8009b1e <_printf_float+0x456>

08009b34 <_printf_common>:
 8009b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b38:	4616      	mov	r6, r2
 8009b3a:	4699      	mov	r9, r3
 8009b3c:	688a      	ldr	r2, [r1, #8]
 8009b3e:	690b      	ldr	r3, [r1, #16]
 8009b40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b44:	4293      	cmp	r3, r2
 8009b46:	bfb8      	it	lt
 8009b48:	4613      	movlt	r3, r2
 8009b4a:	6033      	str	r3, [r6, #0]
 8009b4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009b50:	4607      	mov	r7, r0
 8009b52:	460c      	mov	r4, r1
 8009b54:	b10a      	cbz	r2, 8009b5a <_printf_common+0x26>
 8009b56:	3301      	adds	r3, #1
 8009b58:	6033      	str	r3, [r6, #0]
 8009b5a:	6823      	ldr	r3, [r4, #0]
 8009b5c:	0699      	lsls	r1, r3, #26
 8009b5e:	bf42      	ittt	mi
 8009b60:	6833      	ldrmi	r3, [r6, #0]
 8009b62:	3302      	addmi	r3, #2
 8009b64:	6033      	strmi	r3, [r6, #0]
 8009b66:	6825      	ldr	r5, [r4, #0]
 8009b68:	f015 0506 	ands.w	r5, r5, #6
 8009b6c:	d106      	bne.n	8009b7c <_printf_common+0x48>
 8009b6e:	f104 0a19 	add.w	sl, r4, #25
 8009b72:	68e3      	ldr	r3, [r4, #12]
 8009b74:	6832      	ldr	r2, [r6, #0]
 8009b76:	1a9b      	subs	r3, r3, r2
 8009b78:	42ab      	cmp	r3, r5
 8009b7a:	dc26      	bgt.n	8009bca <_printf_common+0x96>
 8009b7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009b80:	1e13      	subs	r3, r2, #0
 8009b82:	6822      	ldr	r2, [r4, #0]
 8009b84:	bf18      	it	ne
 8009b86:	2301      	movne	r3, #1
 8009b88:	0692      	lsls	r2, r2, #26
 8009b8a:	d42b      	bmi.n	8009be4 <_printf_common+0xb0>
 8009b8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b90:	4649      	mov	r1, r9
 8009b92:	4638      	mov	r0, r7
 8009b94:	47c0      	blx	r8
 8009b96:	3001      	adds	r0, #1
 8009b98:	d01e      	beq.n	8009bd8 <_printf_common+0xa4>
 8009b9a:	6823      	ldr	r3, [r4, #0]
 8009b9c:	6922      	ldr	r2, [r4, #16]
 8009b9e:	f003 0306 	and.w	r3, r3, #6
 8009ba2:	2b04      	cmp	r3, #4
 8009ba4:	bf02      	ittt	eq
 8009ba6:	68e5      	ldreq	r5, [r4, #12]
 8009ba8:	6833      	ldreq	r3, [r6, #0]
 8009baa:	1aed      	subeq	r5, r5, r3
 8009bac:	68a3      	ldr	r3, [r4, #8]
 8009bae:	bf0c      	ite	eq
 8009bb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009bb4:	2500      	movne	r5, #0
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	bfc4      	itt	gt
 8009bba:	1a9b      	subgt	r3, r3, r2
 8009bbc:	18ed      	addgt	r5, r5, r3
 8009bbe:	2600      	movs	r6, #0
 8009bc0:	341a      	adds	r4, #26
 8009bc2:	42b5      	cmp	r5, r6
 8009bc4:	d11a      	bne.n	8009bfc <_printf_common+0xc8>
 8009bc6:	2000      	movs	r0, #0
 8009bc8:	e008      	b.n	8009bdc <_printf_common+0xa8>
 8009bca:	2301      	movs	r3, #1
 8009bcc:	4652      	mov	r2, sl
 8009bce:	4649      	mov	r1, r9
 8009bd0:	4638      	mov	r0, r7
 8009bd2:	47c0      	blx	r8
 8009bd4:	3001      	adds	r0, #1
 8009bd6:	d103      	bne.n	8009be0 <_printf_common+0xac>
 8009bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8009bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009be0:	3501      	adds	r5, #1
 8009be2:	e7c6      	b.n	8009b72 <_printf_common+0x3e>
 8009be4:	18e1      	adds	r1, r4, r3
 8009be6:	1c5a      	adds	r2, r3, #1
 8009be8:	2030      	movs	r0, #48	; 0x30
 8009bea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009bee:	4422      	add	r2, r4
 8009bf0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009bf4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009bf8:	3302      	adds	r3, #2
 8009bfa:	e7c7      	b.n	8009b8c <_printf_common+0x58>
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	4622      	mov	r2, r4
 8009c00:	4649      	mov	r1, r9
 8009c02:	4638      	mov	r0, r7
 8009c04:	47c0      	blx	r8
 8009c06:	3001      	adds	r0, #1
 8009c08:	d0e6      	beq.n	8009bd8 <_printf_common+0xa4>
 8009c0a:	3601      	adds	r6, #1
 8009c0c:	e7d9      	b.n	8009bc2 <_printf_common+0x8e>
	...

08009c10 <_printf_i>:
 8009c10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c14:	7e0f      	ldrb	r7, [r1, #24]
 8009c16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009c18:	2f78      	cmp	r7, #120	; 0x78
 8009c1a:	4691      	mov	r9, r2
 8009c1c:	4680      	mov	r8, r0
 8009c1e:	460c      	mov	r4, r1
 8009c20:	469a      	mov	sl, r3
 8009c22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009c26:	d807      	bhi.n	8009c38 <_printf_i+0x28>
 8009c28:	2f62      	cmp	r7, #98	; 0x62
 8009c2a:	d80a      	bhi.n	8009c42 <_printf_i+0x32>
 8009c2c:	2f00      	cmp	r7, #0
 8009c2e:	f000 80d4 	beq.w	8009dda <_printf_i+0x1ca>
 8009c32:	2f58      	cmp	r7, #88	; 0x58
 8009c34:	f000 80c0 	beq.w	8009db8 <_printf_i+0x1a8>
 8009c38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009c40:	e03a      	b.n	8009cb8 <_printf_i+0xa8>
 8009c42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009c46:	2b15      	cmp	r3, #21
 8009c48:	d8f6      	bhi.n	8009c38 <_printf_i+0x28>
 8009c4a:	a101      	add	r1, pc, #4	; (adr r1, 8009c50 <_printf_i+0x40>)
 8009c4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009c50:	08009ca9 	.word	0x08009ca9
 8009c54:	08009cbd 	.word	0x08009cbd
 8009c58:	08009c39 	.word	0x08009c39
 8009c5c:	08009c39 	.word	0x08009c39
 8009c60:	08009c39 	.word	0x08009c39
 8009c64:	08009c39 	.word	0x08009c39
 8009c68:	08009cbd 	.word	0x08009cbd
 8009c6c:	08009c39 	.word	0x08009c39
 8009c70:	08009c39 	.word	0x08009c39
 8009c74:	08009c39 	.word	0x08009c39
 8009c78:	08009c39 	.word	0x08009c39
 8009c7c:	08009dc1 	.word	0x08009dc1
 8009c80:	08009ce9 	.word	0x08009ce9
 8009c84:	08009d7b 	.word	0x08009d7b
 8009c88:	08009c39 	.word	0x08009c39
 8009c8c:	08009c39 	.word	0x08009c39
 8009c90:	08009de3 	.word	0x08009de3
 8009c94:	08009c39 	.word	0x08009c39
 8009c98:	08009ce9 	.word	0x08009ce9
 8009c9c:	08009c39 	.word	0x08009c39
 8009ca0:	08009c39 	.word	0x08009c39
 8009ca4:	08009d83 	.word	0x08009d83
 8009ca8:	682b      	ldr	r3, [r5, #0]
 8009caa:	1d1a      	adds	r2, r3, #4
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	602a      	str	r2, [r5, #0]
 8009cb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009cb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009cb8:	2301      	movs	r3, #1
 8009cba:	e09f      	b.n	8009dfc <_printf_i+0x1ec>
 8009cbc:	6820      	ldr	r0, [r4, #0]
 8009cbe:	682b      	ldr	r3, [r5, #0]
 8009cc0:	0607      	lsls	r7, r0, #24
 8009cc2:	f103 0104 	add.w	r1, r3, #4
 8009cc6:	6029      	str	r1, [r5, #0]
 8009cc8:	d501      	bpl.n	8009cce <_printf_i+0xbe>
 8009cca:	681e      	ldr	r6, [r3, #0]
 8009ccc:	e003      	b.n	8009cd6 <_printf_i+0xc6>
 8009cce:	0646      	lsls	r6, r0, #25
 8009cd0:	d5fb      	bpl.n	8009cca <_printf_i+0xba>
 8009cd2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009cd6:	2e00      	cmp	r6, #0
 8009cd8:	da03      	bge.n	8009ce2 <_printf_i+0xd2>
 8009cda:	232d      	movs	r3, #45	; 0x2d
 8009cdc:	4276      	negs	r6, r6
 8009cde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ce2:	485a      	ldr	r0, [pc, #360]	; (8009e4c <_printf_i+0x23c>)
 8009ce4:	230a      	movs	r3, #10
 8009ce6:	e012      	b.n	8009d0e <_printf_i+0xfe>
 8009ce8:	682b      	ldr	r3, [r5, #0]
 8009cea:	6820      	ldr	r0, [r4, #0]
 8009cec:	1d19      	adds	r1, r3, #4
 8009cee:	6029      	str	r1, [r5, #0]
 8009cf0:	0605      	lsls	r5, r0, #24
 8009cf2:	d501      	bpl.n	8009cf8 <_printf_i+0xe8>
 8009cf4:	681e      	ldr	r6, [r3, #0]
 8009cf6:	e002      	b.n	8009cfe <_printf_i+0xee>
 8009cf8:	0641      	lsls	r1, r0, #25
 8009cfa:	d5fb      	bpl.n	8009cf4 <_printf_i+0xe4>
 8009cfc:	881e      	ldrh	r6, [r3, #0]
 8009cfe:	4853      	ldr	r0, [pc, #332]	; (8009e4c <_printf_i+0x23c>)
 8009d00:	2f6f      	cmp	r7, #111	; 0x6f
 8009d02:	bf0c      	ite	eq
 8009d04:	2308      	moveq	r3, #8
 8009d06:	230a      	movne	r3, #10
 8009d08:	2100      	movs	r1, #0
 8009d0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d0e:	6865      	ldr	r5, [r4, #4]
 8009d10:	60a5      	str	r5, [r4, #8]
 8009d12:	2d00      	cmp	r5, #0
 8009d14:	bfa2      	ittt	ge
 8009d16:	6821      	ldrge	r1, [r4, #0]
 8009d18:	f021 0104 	bicge.w	r1, r1, #4
 8009d1c:	6021      	strge	r1, [r4, #0]
 8009d1e:	b90e      	cbnz	r6, 8009d24 <_printf_i+0x114>
 8009d20:	2d00      	cmp	r5, #0
 8009d22:	d04b      	beq.n	8009dbc <_printf_i+0x1ac>
 8009d24:	4615      	mov	r5, r2
 8009d26:	fbb6 f1f3 	udiv	r1, r6, r3
 8009d2a:	fb03 6711 	mls	r7, r3, r1, r6
 8009d2e:	5dc7      	ldrb	r7, [r0, r7]
 8009d30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009d34:	4637      	mov	r7, r6
 8009d36:	42bb      	cmp	r3, r7
 8009d38:	460e      	mov	r6, r1
 8009d3a:	d9f4      	bls.n	8009d26 <_printf_i+0x116>
 8009d3c:	2b08      	cmp	r3, #8
 8009d3e:	d10b      	bne.n	8009d58 <_printf_i+0x148>
 8009d40:	6823      	ldr	r3, [r4, #0]
 8009d42:	07de      	lsls	r6, r3, #31
 8009d44:	d508      	bpl.n	8009d58 <_printf_i+0x148>
 8009d46:	6923      	ldr	r3, [r4, #16]
 8009d48:	6861      	ldr	r1, [r4, #4]
 8009d4a:	4299      	cmp	r1, r3
 8009d4c:	bfde      	ittt	le
 8009d4e:	2330      	movle	r3, #48	; 0x30
 8009d50:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009d54:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009d58:	1b52      	subs	r2, r2, r5
 8009d5a:	6122      	str	r2, [r4, #16]
 8009d5c:	f8cd a000 	str.w	sl, [sp]
 8009d60:	464b      	mov	r3, r9
 8009d62:	aa03      	add	r2, sp, #12
 8009d64:	4621      	mov	r1, r4
 8009d66:	4640      	mov	r0, r8
 8009d68:	f7ff fee4 	bl	8009b34 <_printf_common>
 8009d6c:	3001      	adds	r0, #1
 8009d6e:	d14a      	bne.n	8009e06 <_printf_i+0x1f6>
 8009d70:	f04f 30ff 	mov.w	r0, #4294967295
 8009d74:	b004      	add	sp, #16
 8009d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d7a:	6823      	ldr	r3, [r4, #0]
 8009d7c:	f043 0320 	orr.w	r3, r3, #32
 8009d80:	6023      	str	r3, [r4, #0]
 8009d82:	4833      	ldr	r0, [pc, #204]	; (8009e50 <_printf_i+0x240>)
 8009d84:	2778      	movs	r7, #120	; 0x78
 8009d86:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009d8a:	6823      	ldr	r3, [r4, #0]
 8009d8c:	6829      	ldr	r1, [r5, #0]
 8009d8e:	061f      	lsls	r7, r3, #24
 8009d90:	f851 6b04 	ldr.w	r6, [r1], #4
 8009d94:	d402      	bmi.n	8009d9c <_printf_i+0x18c>
 8009d96:	065f      	lsls	r7, r3, #25
 8009d98:	bf48      	it	mi
 8009d9a:	b2b6      	uxthmi	r6, r6
 8009d9c:	07df      	lsls	r7, r3, #31
 8009d9e:	bf48      	it	mi
 8009da0:	f043 0320 	orrmi.w	r3, r3, #32
 8009da4:	6029      	str	r1, [r5, #0]
 8009da6:	bf48      	it	mi
 8009da8:	6023      	strmi	r3, [r4, #0]
 8009daa:	b91e      	cbnz	r6, 8009db4 <_printf_i+0x1a4>
 8009dac:	6823      	ldr	r3, [r4, #0]
 8009dae:	f023 0320 	bic.w	r3, r3, #32
 8009db2:	6023      	str	r3, [r4, #0]
 8009db4:	2310      	movs	r3, #16
 8009db6:	e7a7      	b.n	8009d08 <_printf_i+0xf8>
 8009db8:	4824      	ldr	r0, [pc, #144]	; (8009e4c <_printf_i+0x23c>)
 8009dba:	e7e4      	b.n	8009d86 <_printf_i+0x176>
 8009dbc:	4615      	mov	r5, r2
 8009dbe:	e7bd      	b.n	8009d3c <_printf_i+0x12c>
 8009dc0:	682b      	ldr	r3, [r5, #0]
 8009dc2:	6826      	ldr	r6, [r4, #0]
 8009dc4:	6961      	ldr	r1, [r4, #20]
 8009dc6:	1d18      	adds	r0, r3, #4
 8009dc8:	6028      	str	r0, [r5, #0]
 8009dca:	0635      	lsls	r5, r6, #24
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	d501      	bpl.n	8009dd4 <_printf_i+0x1c4>
 8009dd0:	6019      	str	r1, [r3, #0]
 8009dd2:	e002      	b.n	8009dda <_printf_i+0x1ca>
 8009dd4:	0670      	lsls	r0, r6, #25
 8009dd6:	d5fb      	bpl.n	8009dd0 <_printf_i+0x1c0>
 8009dd8:	8019      	strh	r1, [r3, #0]
 8009dda:	2300      	movs	r3, #0
 8009ddc:	6123      	str	r3, [r4, #16]
 8009dde:	4615      	mov	r5, r2
 8009de0:	e7bc      	b.n	8009d5c <_printf_i+0x14c>
 8009de2:	682b      	ldr	r3, [r5, #0]
 8009de4:	1d1a      	adds	r2, r3, #4
 8009de6:	602a      	str	r2, [r5, #0]
 8009de8:	681d      	ldr	r5, [r3, #0]
 8009dea:	6862      	ldr	r2, [r4, #4]
 8009dec:	2100      	movs	r1, #0
 8009dee:	4628      	mov	r0, r5
 8009df0:	f7f6 f9fe 	bl	80001f0 <memchr>
 8009df4:	b108      	cbz	r0, 8009dfa <_printf_i+0x1ea>
 8009df6:	1b40      	subs	r0, r0, r5
 8009df8:	6060      	str	r0, [r4, #4]
 8009dfa:	6863      	ldr	r3, [r4, #4]
 8009dfc:	6123      	str	r3, [r4, #16]
 8009dfe:	2300      	movs	r3, #0
 8009e00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e04:	e7aa      	b.n	8009d5c <_printf_i+0x14c>
 8009e06:	6923      	ldr	r3, [r4, #16]
 8009e08:	462a      	mov	r2, r5
 8009e0a:	4649      	mov	r1, r9
 8009e0c:	4640      	mov	r0, r8
 8009e0e:	47d0      	blx	sl
 8009e10:	3001      	adds	r0, #1
 8009e12:	d0ad      	beq.n	8009d70 <_printf_i+0x160>
 8009e14:	6823      	ldr	r3, [r4, #0]
 8009e16:	079b      	lsls	r3, r3, #30
 8009e18:	d413      	bmi.n	8009e42 <_printf_i+0x232>
 8009e1a:	68e0      	ldr	r0, [r4, #12]
 8009e1c:	9b03      	ldr	r3, [sp, #12]
 8009e1e:	4298      	cmp	r0, r3
 8009e20:	bfb8      	it	lt
 8009e22:	4618      	movlt	r0, r3
 8009e24:	e7a6      	b.n	8009d74 <_printf_i+0x164>
 8009e26:	2301      	movs	r3, #1
 8009e28:	4632      	mov	r2, r6
 8009e2a:	4649      	mov	r1, r9
 8009e2c:	4640      	mov	r0, r8
 8009e2e:	47d0      	blx	sl
 8009e30:	3001      	adds	r0, #1
 8009e32:	d09d      	beq.n	8009d70 <_printf_i+0x160>
 8009e34:	3501      	adds	r5, #1
 8009e36:	68e3      	ldr	r3, [r4, #12]
 8009e38:	9903      	ldr	r1, [sp, #12]
 8009e3a:	1a5b      	subs	r3, r3, r1
 8009e3c:	42ab      	cmp	r3, r5
 8009e3e:	dcf2      	bgt.n	8009e26 <_printf_i+0x216>
 8009e40:	e7eb      	b.n	8009e1a <_printf_i+0x20a>
 8009e42:	2500      	movs	r5, #0
 8009e44:	f104 0619 	add.w	r6, r4, #25
 8009e48:	e7f5      	b.n	8009e36 <_printf_i+0x226>
 8009e4a:	bf00      	nop
 8009e4c:	0800ed8e 	.word	0x0800ed8e
 8009e50:	0800ed9f 	.word	0x0800ed9f

08009e54 <_scanf_float>:
 8009e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e58:	b087      	sub	sp, #28
 8009e5a:	4617      	mov	r7, r2
 8009e5c:	9303      	str	r3, [sp, #12]
 8009e5e:	688b      	ldr	r3, [r1, #8]
 8009e60:	1e5a      	subs	r2, r3, #1
 8009e62:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009e66:	bf83      	ittte	hi
 8009e68:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009e6c:	195b      	addhi	r3, r3, r5
 8009e6e:	9302      	strhi	r3, [sp, #8]
 8009e70:	2300      	movls	r3, #0
 8009e72:	bf86      	itte	hi
 8009e74:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009e78:	608b      	strhi	r3, [r1, #8]
 8009e7a:	9302      	strls	r3, [sp, #8]
 8009e7c:	680b      	ldr	r3, [r1, #0]
 8009e7e:	468b      	mov	fp, r1
 8009e80:	2500      	movs	r5, #0
 8009e82:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009e86:	f84b 3b1c 	str.w	r3, [fp], #28
 8009e8a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009e8e:	4680      	mov	r8, r0
 8009e90:	460c      	mov	r4, r1
 8009e92:	465e      	mov	r6, fp
 8009e94:	46aa      	mov	sl, r5
 8009e96:	46a9      	mov	r9, r5
 8009e98:	9501      	str	r5, [sp, #4]
 8009e9a:	68a2      	ldr	r2, [r4, #8]
 8009e9c:	b152      	cbz	r2, 8009eb4 <_scanf_float+0x60>
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	781b      	ldrb	r3, [r3, #0]
 8009ea2:	2b4e      	cmp	r3, #78	; 0x4e
 8009ea4:	d864      	bhi.n	8009f70 <_scanf_float+0x11c>
 8009ea6:	2b40      	cmp	r3, #64	; 0x40
 8009ea8:	d83c      	bhi.n	8009f24 <_scanf_float+0xd0>
 8009eaa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009eae:	b2c8      	uxtb	r0, r1
 8009eb0:	280e      	cmp	r0, #14
 8009eb2:	d93a      	bls.n	8009f2a <_scanf_float+0xd6>
 8009eb4:	f1b9 0f00 	cmp.w	r9, #0
 8009eb8:	d003      	beq.n	8009ec2 <_scanf_float+0x6e>
 8009eba:	6823      	ldr	r3, [r4, #0]
 8009ebc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ec0:	6023      	str	r3, [r4, #0]
 8009ec2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009ec6:	f1ba 0f01 	cmp.w	sl, #1
 8009eca:	f200 8113 	bhi.w	800a0f4 <_scanf_float+0x2a0>
 8009ece:	455e      	cmp	r6, fp
 8009ed0:	f200 8105 	bhi.w	800a0de <_scanf_float+0x28a>
 8009ed4:	2501      	movs	r5, #1
 8009ed6:	4628      	mov	r0, r5
 8009ed8:	b007      	add	sp, #28
 8009eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ede:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009ee2:	2a0d      	cmp	r2, #13
 8009ee4:	d8e6      	bhi.n	8009eb4 <_scanf_float+0x60>
 8009ee6:	a101      	add	r1, pc, #4	; (adr r1, 8009eec <_scanf_float+0x98>)
 8009ee8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009eec:	0800a02b 	.word	0x0800a02b
 8009ef0:	08009eb5 	.word	0x08009eb5
 8009ef4:	08009eb5 	.word	0x08009eb5
 8009ef8:	08009eb5 	.word	0x08009eb5
 8009efc:	0800a08b 	.word	0x0800a08b
 8009f00:	0800a063 	.word	0x0800a063
 8009f04:	08009eb5 	.word	0x08009eb5
 8009f08:	08009eb5 	.word	0x08009eb5
 8009f0c:	0800a039 	.word	0x0800a039
 8009f10:	08009eb5 	.word	0x08009eb5
 8009f14:	08009eb5 	.word	0x08009eb5
 8009f18:	08009eb5 	.word	0x08009eb5
 8009f1c:	08009eb5 	.word	0x08009eb5
 8009f20:	08009ff1 	.word	0x08009ff1
 8009f24:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009f28:	e7db      	b.n	8009ee2 <_scanf_float+0x8e>
 8009f2a:	290e      	cmp	r1, #14
 8009f2c:	d8c2      	bhi.n	8009eb4 <_scanf_float+0x60>
 8009f2e:	a001      	add	r0, pc, #4	; (adr r0, 8009f34 <_scanf_float+0xe0>)
 8009f30:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009f34:	08009fe3 	.word	0x08009fe3
 8009f38:	08009eb5 	.word	0x08009eb5
 8009f3c:	08009fe3 	.word	0x08009fe3
 8009f40:	0800a077 	.word	0x0800a077
 8009f44:	08009eb5 	.word	0x08009eb5
 8009f48:	08009f91 	.word	0x08009f91
 8009f4c:	08009fcd 	.word	0x08009fcd
 8009f50:	08009fcd 	.word	0x08009fcd
 8009f54:	08009fcd 	.word	0x08009fcd
 8009f58:	08009fcd 	.word	0x08009fcd
 8009f5c:	08009fcd 	.word	0x08009fcd
 8009f60:	08009fcd 	.word	0x08009fcd
 8009f64:	08009fcd 	.word	0x08009fcd
 8009f68:	08009fcd 	.word	0x08009fcd
 8009f6c:	08009fcd 	.word	0x08009fcd
 8009f70:	2b6e      	cmp	r3, #110	; 0x6e
 8009f72:	d809      	bhi.n	8009f88 <_scanf_float+0x134>
 8009f74:	2b60      	cmp	r3, #96	; 0x60
 8009f76:	d8b2      	bhi.n	8009ede <_scanf_float+0x8a>
 8009f78:	2b54      	cmp	r3, #84	; 0x54
 8009f7a:	d077      	beq.n	800a06c <_scanf_float+0x218>
 8009f7c:	2b59      	cmp	r3, #89	; 0x59
 8009f7e:	d199      	bne.n	8009eb4 <_scanf_float+0x60>
 8009f80:	2d07      	cmp	r5, #7
 8009f82:	d197      	bne.n	8009eb4 <_scanf_float+0x60>
 8009f84:	2508      	movs	r5, #8
 8009f86:	e029      	b.n	8009fdc <_scanf_float+0x188>
 8009f88:	2b74      	cmp	r3, #116	; 0x74
 8009f8a:	d06f      	beq.n	800a06c <_scanf_float+0x218>
 8009f8c:	2b79      	cmp	r3, #121	; 0x79
 8009f8e:	e7f6      	b.n	8009f7e <_scanf_float+0x12a>
 8009f90:	6821      	ldr	r1, [r4, #0]
 8009f92:	05c8      	lsls	r0, r1, #23
 8009f94:	d51a      	bpl.n	8009fcc <_scanf_float+0x178>
 8009f96:	9b02      	ldr	r3, [sp, #8]
 8009f98:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009f9c:	6021      	str	r1, [r4, #0]
 8009f9e:	f109 0901 	add.w	r9, r9, #1
 8009fa2:	b11b      	cbz	r3, 8009fac <_scanf_float+0x158>
 8009fa4:	3b01      	subs	r3, #1
 8009fa6:	3201      	adds	r2, #1
 8009fa8:	9302      	str	r3, [sp, #8]
 8009faa:	60a2      	str	r2, [r4, #8]
 8009fac:	68a3      	ldr	r3, [r4, #8]
 8009fae:	3b01      	subs	r3, #1
 8009fb0:	60a3      	str	r3, [r4, #8]
 8009fb2:	6923      	ldr	r3, [r4, #16]
 8009fb4:	3301      	adds	r3, #1
 8009fb6:	6123      	str	r3, [r4, #16]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	3b01      	subs	r3, #1
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	607b      	str	r3, [r7, #4]
 8009fc0:	f340 8084 	ble.w	800a0cc <_scanf_float+0x278>
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	3301      	adds	r3, #1
 8009fc8:	603b      	str	r3, [r7, #0]
 8009fca:	e766      	b.n	8009e9a <_scanf_float+0x46>
 8009fcc:	eb1a 0f05 	cmn.w	sl, r5
 8009fd0:	f47f af70 	bne.w	8009eb4 <_scanf_float+0x60>
 8009fd4:	6822      	ldr	r2, [r4, #0]
 8009fd6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009fda:	6022      	str	r2, [r4, #0]
 8009fdc:	f806 3b01 	strb.w	r3, [r6], #1
 8009fe0:	e7e4      	b.n	8009fac <_scanf_float+0x158>
 8009fe2:	6822      	ldr	r2, [r4, #0]
 8009fe4:	0610      	lsls	r0, r2, #24
 8009fe6:	f57f af65 	bpl.w	8009eb4 <_scanf_float+0x60>
 8009fea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009fee:	e7f4      	b.n	8009fda <_scanf_float+0x186>
 8009ff0:	f1ba 0f00 	cmp.w	sl, #0
 8009ff4:	d10e      	bne.n	800a014 <_scanf_float+0x1c0>
 8009ff6:	f1b9 0f00 	cmp.w	r9, #0
 8009ffa:	d10e      	bne.n	800a01a <_scanf_float+0x1c6>
 8009ffc:	6822      	ldr	r2, [r4, #0]
 8009ffe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a002:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a006:	d108      	bne.n	800a01a <_scanf_float+0x1c6>
 800a008:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a00c:	6022      	str	r2, [r4, #0]
 800a00e:	f04f 0a01 	mov.w	sl, #1
 800a012:	e7e3      	b.n	8009fdc <_scanf_float+0x188>
 800a014:	f1ba 0f02 	cmp.w	sl, #2
 800a018:	d055      	beq.n	800a0c6 <_scanf_float+0x272>
 800a01a:	2d01      	cmp	r5, #1
 800a01c:	d002      	beq.n	800a024 <_scanf_float+0x1d0>
 800a01e:	2d04      	cmp	r5, #4
 800a020:	f47f af48 	bne.w	8009eb4 <_scanf_float+0x60>
 800a024:	3501      	adds	r5, #1
 800a026:	b2ed      	uxtb	r5, r5
 800a028:	e7d8      	b.n	8009fdc <_scanf_float+0x188>
 800a02a:	f1ba 0f01 	cmp.w	sl, #1
 800a02e:	f47f af41 	bne.w	8009eb4 <_scanf_float+0x60>
 800a032:	f04f 0a02 	mov.w	sl, #2
 800a036:	e7d1      	b.n	8009fdc <_scanf_float+0x188>
 800a038:	b97d      	cbnz	r5, 800a05a <_scanf_float+0x206>
 800a03a:	f1b9 0f00 	cmp.w	r9, #0
 800a03e:	f47f af3c 	bne.w	8009eba <_scanf_float+0x66>
 800a042:	6822      	ldr	r2, [r4, #0]
 800a044:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a048:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a04c:	f47f af39 	bne.w	8009ec2 <_scanf_float+0x6e>
 800a050:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a054:	6022      	str	r2, [r4, #0]
 800a056:	2501      	movs	r5, #1
 800a058:	e7c0      	b.n	8009fdc <_scanf_float+0x188>
 800a05a:	2d03      	cmp	r5, #3
 800a05c:	d0e2      	beq.n	800a024 <_scanf_float+0x1d0>
 800a05e:	2d05      	cmp	r5, #5
 800a060:	e7de      	b.n	800a020 <_scanf_float+0x1cc>
 800a062:	2d02      	cmp	r5, #2
 800a064:	f47f af26 	bne.w	8009eb4 <_scanf_float+0x60>
 800a068:	2503      	movs	r5, #3
 800a06a:	e7b7      	b.n	8009fdc <_scanf_float+0x188>
 800a06c:	2d06      	cmp	r5, #6
 800a06e:	f47f af21 	bne.w	8009eb4 <_scanf_float+0x60>
 800a072:	2507      	movs	r5, #7
 800a074:	e7b2      	b.n	8009fdc <_scanf_float+0x188>
 800a076:	6822      	ldr	r2, [r4, #0]
 800a078:	0591      	lsls	r1, r2, #22
 800a07a:	f57f af1b 	bpl.w	8009eb4 <_scanf_float+0x60>
 800a07e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a082:	6022      	str	r2, [r4, #0]
 800a084:	f8cd 9004 	str.w	r9, [sp, #4]
 800a088:	e7a8      	b.n	8009fdc <_scanf_float+0x188>
 800a08a:	6822      	ldr	r2, [r4, #0]
 800a08c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a090:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a094:	d006      	beq.n	800a0a4 <_scanf_float+0x250>
 800a096:	0550      	lsls	r0, r2, #21
 800a098:	f57f af0c 	bpl.w	8009eb4 <_scanf_float+0x60>
 800a09c:	f1b9 0f00 	cmp.w	r9, #0
 800a0a0:	f43f af0f 	beq.w	8009ec2 <_scanf_float+0x6e>
 800a0a4:	0591      	lsls	r1, r2, #22
 800a0a6:	bf58      	it	pl
 800a0a8:	9901      	ldrpl	r1, [sp, #4]
 800a0aa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a0ae:	bf58      	it	pl
 800a0b0:	eba9 0101 	subpl.w	r1, r9, r1
 800a0b4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a0b8:	bf58      	it	pl
 800a0ba:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a0be:	6022      	str	r2, [r4, #0]
 800a0c0:	f04f 0900 	mov.w	r9, #0
 800a0c4:	e78a      	b.n	8009fdc <_scanf_float+0x188>
 800a0c6:	f04f 0a03 	mov.w	sl, #3
 800a0ca:	e787      	b.n	8009fdc <_scanf_float+0x188>
 800a0cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a0d0:	4639      	mov	r1, r7
 800a0d2:	4640      	mov	r0, r8
 800a0d4:	4798      	blx	r3
 800a0d6:	2800      	cmp	r0, #0
 800a0d8:	f43f aedf 	beq.w	8009e9a <_scanf_float+0x46>
 800a0dc:	e6ea      	b.n	8009eb4 <_scanf_float+0x60>
 800a0de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a0e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a0e6:	463a      	mov	r2, r7
 800a0e8:	4640      	mov	r0, r8
 800a0ea:	4798      	blx	r3
 800a0ec:	6923      	ldr	r3, [r4, #16]
 800a0ee:	3b01      	subs	r3, #1
 800a0f0:	6123      	str	r3, [r4, #16]
 800a0f2:	e6ec      	b.n	8009ece <_scanf_float+0x7a>
 800a0f4:	1e6b      	subs	r3, r5, #1
 800a0f6:	2b06      	cmp	r3, #6
 800a0f8:	d825      	bhi.n	800a146 <_scanf_float+0x2f2>
 800a0fa:	2d02      	cmp	r5, #2
 800a0fc:	d836      	bhi.n	800a16c <_scanf_float+0x318>
 800a0fe:	455e      	cmp	r6, fp
 800a100:	f67f aee8 	bls.w	8009ed4 <_scanf_float+0x80>
 800a104:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a108:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a10c:	463a      	mov	r2, r7
 800a10e:	4640      	mov	r0, r8
 800a110:	4798      	blx	r3
 800a112:	6923      	ldr	r3, [r4, #16]
 800a114:	3b01      	subs	r3, #1
 800a116:	6123      	str	r3, [r4, #16]
 800a118:	e7f1      	b.n	800a0fe <_scanf_float+0x2aa>
 800a11a:	9802      	ldr	r0, [sp, #8]
 800a11c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a120:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a124:	9002      	str	r0, [sp, #8]
 800a126:	463a      	mov	r2, r7
 800a128:	4640      	mov	r0, r8
 800a12a:	4798      	blx	r3
 800a12c:	6923      	ldr	r3, [r4, #16]
 800a12e:	3b01      	subs	r3, #1
 800a130:	6123      	str	r3, [r4, #16]
 800a132:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a136:	fa5f fa8a 	uxtb.w	sl, sl
 800a13a:	f1ba 0f02 	cmp.w	sl, #2
 800a13e:	d1ec      	bne.n	800a11a <_scanf_float+0x2c6>
 800a140:	3d03      	subs	r5, #3
 800a142:	b2ed      	uxtb	r5, r5
 800a144:	1b76      	subs	r6, r6, r5
 800a146:	6823      	ldr	r3, [r4, #0]
 800a148:	05da      	lsls	r2, r3, #23
 800a14a:	d52f      	bpl.n	800a1ac <_scanf_float+0x358>
 800a14c:	055b      	lsls	r3, r3, #21
 800a14e:	d510      	bpl.n	800a172 <_scanf_float+0x31e>
 800a150:	455e      	cmp	r6, fp
 800a152:	f67f aebf 	bls.w	8009ed4 <_scanf_float+0x80>
 800a156:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a15a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a15e:	463a      	mov	r2, r7
 800a160:	4640      	mov	r0, r8
 800a162:	4798      	blx	r3
 800a164:	6923      	ldr	r3, [r4, #16]
 800a166:	3b01      	subs	r3, #1
 800a168:	6123      	str	r3, [r4, #16]
 800a16a:	e7f1      	b.n	800a150 <_scanf_float+0x2fc>
 800a16c:	46aa      	mov	sl, r5
 800a16e:	9602      	str	r6, [sp, #8]
 800a170:	e7df      	b.n	800a132 <_scanf_float+0x2de>
 800a172:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a176:	6923      	ldr	r3, [r4, #16]
 800a178:	2965      	cmp	r1, #101	; 0x65
 800a17a:	f103 33ff 	add.w	r3, r3, #4294967295
 800a17e:	f106 35ff 	add.w	r5, r6, #4294967295
 800a182:	6123      	str	r3, [r4, #16]
 800a184:	d00c      	beq.n	800a1a0 <_scanf_float+0x34c>
 800a186:	2945      	cmp	r1, #69	; 0x45
 800a188:	d00a      	beq.n	800a1a0 <_scanf_float+0x34c>
 800a18a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a18e:	463a      	mov	r2, r7
 800a190:	4640      	mov	r0, r8
 800a192:	4798      	blx	r3
 800a194:	6923      	ldr	r3, [r4, #16]
 800a196:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a19a:	3b01      	subs	r3, #1
 800a19c:	1eb5      	subs	r5, r6, #2
 800a19e:	6123      	str	r3, [r4, #16]
 800a1a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a1a4:	463a      	mov	r2, r7
 800a1a6:	4640      	mov	r0, r8
 800a1a8:	4798      	blx	r3
 800a1aa:	462e      	mov	r6, r5
 800a1ac:	6825      	ldr	r5, [r4, #0]
 800a1ae:	f015 0510 	ands.w	r5, r5, #16
 800a1b2:	d158      	bne.n	800a266 <_scanf_float+0x412>
 800a1b4:	7035      	strb	r5, [r6, #0]
 800a1b6:	6823      	ldr	r3, [r4, #0]
 800a1b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a1bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1c0:	d11c      	bne.n	800a1fc <_scanf_float+0x3a8>
 800a1c2:	9b01      	ldr	r3, [sp, #4]
 800a1c4:	454b      	cmp	r3, r9
 800a1c6:	eba3 0209 	sub.w	r2, r3, r9
 800a1ca:	d124      	bne.n	800a216 <_scanf_float+0x3c2>
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	4659      	mov	r1, fp
 800a1d0:	4640      	mov	r0, r8
 800a1d2:	f002 fcf1 	bl	800cbb8 <_strtod_r>
 800a1d6:	9b03      	ldr	r3, [sp, #12]
 800a1d8:	6821      	ldr	r1, [r4, #0]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f011 0f02 	tst.w	r1, #2
 800a1e0:	ec57 6b10 	vmov	r6, r7, d0
 800a1e4:	f103 0204 	add.w	r2, r3, #4
 800a1e8:	d020      	beq.n	800a22c <_scanf_float+0x3d8>
 800a1ea:	9903      	ldr	r1, [sp, #12]
 800a1ec:	600a      	str	r2, [r1, #0]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	e9c3 6700 	strd	r6, r7, [r3]
 800a1f4:	68e3      	ldr	r3, [r4, #12]
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	60e3      	str	r3, [r4, #12]
 800a1fa:	e66c      	b.n	8009ed6 <_scanf_float+0x82>
 800a1fc:	9b04      	ldr	r3, [sp, #16]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d0e4      	beq.n	800a1cc <_scanf_float+0x378>
 800a202:	9905      	ldr	r1, [sp, #20]
 800a204:	230a      	movs	r3, #10
 800a206:	462a      	mov	r2, r5
 800a208:	3101      	adds	r1, #1
 800a20a:	4640      	mov	r0, r8
 800a20c:	f002 fd5c 	bl	800ccc8 <_strtol_r>
 800a210:	9b04      	ldr	r3, [sp, #16]
 800a212:	9e05      	ldr	r6, [sp, #20]
 800a214:	1ac2      	subs	r2, r0, r3
 800a216:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a21a:	429e      	cmp	r6, r3
 800a21c:	bf28      	it	cs
 800a21e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a222:	4912      	ldr	r1, [pc, #72]	; (800a26c <_scanf_float+0x418>)
 800a224:	4630      	mov	r0, r6
 800a226:	f000 f9a7 	bl	800a578 <siprintf>
 800a22a:	e7cf      	b.n	800a1cc <_scanf_float+0x378>
 800a22c:	f011 0f04 	tst.w	r1, #4
 800a230:	9903      	ldr	r1, [sp, #12]
 800a232:	600a      	str	r2, [r1, #0]
 800a234:	d1db      	bne.n	800a1ee <_scanf_float+0x39a>
 800a236:	f8d3 8000 	ldr.w	r8, [r3]
 800a23a:	ee10 2a10 	vmov	r2, s0
 800a23e:	ee10 0a10 	vmov	r0, s0
 800a242:	463b      	mov	r3, r7
 800a244:	4639      	mov	r1, r7
 800a246:	f7f6 fc81 	bl	8000b4c <__aeabi_dcmpun>
 800a24a:	b128      	cbz	r0, 800a258 <_scanf_float+0x404>
 800a24c:	4808      	ldr	r0, [pc, #32]	; (800a270 <_scanf_float+0x41c>)
 800a24e:	f000 fa77 	bl	800a740 <nanf>
 800a252:	ed88 0a00 	vstr	s0, [r8]
 800a256:	e7cd      	b.n	800a1f4 <_scanf_float+0x3a0>
 800a258:	4630      	mov	r0, r6
 800a25a:	4639      	mov	r1, r7
 800a25c:	f7f6 fcd4 	bl	8000c08 <__aeabi_d2f>
 800a260:	f8c8 0000 	str.w	r0, [r8]
 800a264:	e7c6      	b.n	800a1f4 <_scanf_float+0x3a0>
 800a266:	2500      	movs	r5, #0
 800a268:	e635      	b.n	8009ed6 <_scanf_float+0x82>
 800a26a:	bf00      	nop
 800a26c:	0800edb0 	.word	0x0800edb0
 800a270:	0800f145 	.word	0x0800f145

0800a274 <std>:
 800a274:	2300      	movs	r3, #0
 800a276:	b510      	push	{r4, lr}
 800a278:	4604      	mov	r4, r0
 800a27a:	e9c0 3300 	strd	r3, r3, [r0]
 800a27e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a282:	6083      	str	r3, [r0, #8]
 800a284:	8181      	strh	r1, [r0, #12]
 800a286:	6643      	str	r3, [r0, #100]	; 0x64
 800a288:	81c2      	strh	r2, [r0, #14]
 800a28a:	6183      	str	r3, [r0, #24]
 800a28c:	4619      	mov	r1, r3
 800a28e:	2208      	movs	r2, #8
 800a290:	305c      	adds	r0, #92	; 0x5c
 800a292:	f000 f9d4 	bl	800a63e <memset>
 800a296:	4b0d      	ldr	r3, [pc, #52]	; (800a2cc <std+0x58>)
 800a298:	6263      	str	r3, [r4, #36]	; 0x24
 800a29a:	4b0d      	ldr	r3, [pc, #52]	; (800a2d0 <std+0x5c>)
 800a29c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a29e:	4b0d      	ldr	r3, [pc, #52]	; (800a2d4 <std+0x60>)
 800a2a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a2a2:	4b0d      	ldr	r3, [pc, #52]	; (800a2d8 <std+0x64>)
 800a2a4:	6323      	str	r3, [r4, #48]	; 0x30
 800a2a6:	4b0d      	ldr	r3, [pc, #52]	; (800a2dc <std+0x68>)
 800a2a8:	6224      	str	r4, [r4, #32]
 800a2aa:	429c      	cmp	r4, r3
 800a2ac:	d006      	beq.n	800a2bc <std+0x48>
 800a2ae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a2b2:	4294      	cmp	r4, r2
 800a2b4:	d002      	beq.n	800a2bc <std+0x48>
 800a2b6:	33d0      	adds	r3, #208	; 0xd0
 800a2b8:	429c      	cmp	r4, r3
 800a2ba:	d105      	bne.n	800a2c8 <std+0x54>
 800a2bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a2c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2c4:	f000 ba38 	b.w	800a738 <__retarget_lock_init_recursive>
 800a2c8:	bd10      	pop	{r4, pc}
 800a2ca:	bf00      	nop
 800a2cc:	0800a5b9 	.word	0x0800a5b9
 800a2d0:	0800a5db 	.word	0x0800a5db
 800a2d4:	0800a613 	.word	0x0800a613
 800a2d8:	0800a637 	.word	0x0800a637
 800a2dc:	20000f30 	.word	0x20000f30

0800a2e0 <stdio_exit_handler>:
 800a2e0:	4a02      	ldr	r2, [pc, #8]	; (800a2ec <stdio_exit_handler+0xc>)
 800a2e2:	4903      	ldr	r1, [pc, #12]	; (800a2f0 <stdio_exit_handler+0x10>)
 800a2e4:	4803      	ldr	r0, [pc, #12]	; (800a2f4 <stdio_exit_handler+0x14>)
 800a2e6:	f000 b869 	b.w	800a3bc <_fwalk_sglue>
 800a2ea:	bf00      	nop
 800a2ec:	2000001c 	.word	0x2000001c
 800a2f0:	0800d311 	.word	0x0800d311
 800a2f4:	20000028 	.word	0x20000028

0800a2f8 <cleanup_stdio>:
 800a2f8:	6841      	ldr	r1, [r0, #4]
 800a2fa:	4b0c      	ldr	r3, [pc, #48]	; (800a32c <cleanup_stdio+0x34>)
 800a2fc:	4299      	cmp	r1, r3
 800a2fe:	b510      	push	{r4, lr}
 800a300:	4604      	mov	r4, r0
 800a302:	d001      	beq.n	800a308 <cleanup_stdio+0x10>
 800a304:	f003 f804 	bl	800d310 <_fflush_r>
 800a308:	68a1      	ldr	r1, [r4, #8]
 800a30a:	4b09      	ldr	r3, [pc, #36]	; (800a330 <cleanup_stdio+0x38>)
 800a30c:	4299      	cmp	r1, r3
 800a30e:	d002      	beq.n	800a316 <cleanup_stdio+0x1e>
 800a310:	4620      	mov	r0, r4
 800a312:	f002 fffd 	bl	800d310 <_fflush_r>
 800a316:	68e1      	ldr	r1, [r4, #12]
 800a318:	4b06      	ldr	r3, [pc, #24]	; (800a334 <cleanup_stdio+0x3c>)
 800a31a:	4299      	cmp	r1, r3
 800a31c:	d004      	beq.n	800a328 <cleanup_stdio+0x30>
 800a31e:	4620      	mov	r0, r4
 800a320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a324:	f002 bff4 	b.w	800d310 <_fflush_r>
 800a328:	bd10      	pop	{r4, pc}
 800a32a:	bf00      	nop
 800a32c:	20000f30 	.word	0x20000f30
 800a330:	20000f98 	.word	0x20000f98
 800a334:	20001000 	.word	0x20001000

0800a338 <global_stdio_init.part.0>:
 800a338:	b510      	push	{r4, lr}
 800a33a:	4b0b      	ldr	r3, [pc, #44]	; (800a368 <global_stdio_init.part.0+0x30>)
 800a33c:	4c0b      	ldr	r4, [pc, #44]	; (800a36c <global_stdio_init.part.0+0x34>)
 800a33e:	4a0c      	ldr	r2, [pc, #48]	; (800a370 <global_stdio_init.part.0+0x38>)
 800a340:	601a      	str	r2, [r3, #0]
 800a342:	4620      	mov	r0, r4
 800a344:	2200      	movs	r2, #0
 800a346:	2104      	movs	r1, #4
 800a348:	f7ff ff94 	bl	800a274 <std>
 800a34c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a350:	2201      	movs	r2, #1
 800a352:	2109      	movs	r1, #9
 800a354:	f7ff ff8e 	bl	800a274 <std>
 800a358:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a35c:	2202      	movs	r2, #2
 800a35e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a362:	2112      	movs	r1, #18
 800a364:	f7ff bf86 	b.w	800a274 <std>
 800a368:	20001068 	.word	0x20001068
 800a36c:	20000f30 	.word	0x20000f30
 800a370:	0800a2e1 	.word	0x0800a2e1

0800a374 <__sfp_lock_acquire>:
 800a374:	4801      	ldr	r0, [pc, #4]	; (800a37c <__sfp_lock_acquire+0x8>)
 800a376:	f000 b9e0 	b.w	800a73a <__retarget_lock_acquire_recursive>
 800a37a:	bf00      	nop
 800a37c:	20001071 	.word	0x20001071

0800a380 <__sfp_lock_release>:
 800a380:	4801      	ldr	r0, [pc, #4]	; (800a388 <__sfp_lock_release+0x8>)
 800a382:	f000 b9db 	b.w	800a73c <__retarget_lock_release_recursive>
 800a386:	bf00      	nop
 800a388:	20001071 	.word	0x20001071

0800a38c <__sinit>:
 800a38c:	b510      	push	{r4, lr}
 800a38e:	4604      	mov	r4, r0
 800a390:	f7ff fff0 	bl	800a374 <__sfp_lock_acquire>
 800a394:	6a23      	ldr	r3, [r4, #32]
 800a396:	b11b      	cbz	r3, 800a3a0 <__sinit+0x14>
 800a398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a39c:	f7ff bff0 	b.w	800a380 <__sfp_lock_release>
 800a3a0:	4b04      	ldr	r3, [pc, #16]	; (800a3b4 <__sinit+0x28>)
 800a3a2:	6223      	str	r3, [r4, #32]
 800a3a4:	4b04      	ldr	r3, [pc, #16]	; (800a3b8 <__sinit+0x2c>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d1f5      	bne.n	800a398 <__sinit+0xc>
 800a3ac:	f7ff ffc4 	bl	800a338 <global_stdio_init.part.0>
 800a3b0:	e7f2      	b.n	800a398 <__sinit+0xc>
 800a3b2:	bf00      	nop
 800a3b4:	0800a2f9 	.word	0x0800a2f9
 800a3b8:	20001068 	.word	0x20001068

0800a3bc <_fwalk_sglue>:
 800a3bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3c0:	4607      	mov	r7, r0
 800a3c2:	4688      	mov	r8, r1
 800a3c4:	4614      	mov	r4, r2
 800a3c6:	2600      	movs	r6, #0
 800a3c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a3cc:	f1b9 0901 	subs.w	r9, r9, #1
 800a3d0:	d505      	bpl.n	800a3de <_fwalk_sglue+0x22>
 800a3d2:	6824      	ldr	r4, [r4, #0]
 800a3d4:	2c00      	cmp	r4, #0
 800a3d6:	d1f7      	bne.n	800a3c8 <_fwalk_sglue+0xc>
 800a3d8:	4630      	mov	r0, r6
 800a3da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3de:	89ab      	ldrh	r3, [r5, #12]
 800a3e0:	2b01      	cmp	r3, #1
 800a3e2:	d907      	bls.n	800a3f4 <_fwalk_sglue+0x38>
 800a3e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a3e8:	3301      	adds	r3, #1
 800a3ea:	d003      	beq.n	800a3f4 <_fwalk_sglue+0x38>
 800a3ec:	4629      	mov	r1, r5
 800a3ee:	4638      	mov	r0, r7
 800a3f0:	47c0      	blx	r8
 800a3f2:	4306      	orrs	r6, r0
 800a3f4:	3568      	adds	r5, #104	; 0x68
 800a3f6:	e7e9      	b.n	800a3cc <_fwalk_sglue+0x10>

0800a3f8 <iprintf>:
 800a3f8:	b40f      	push	{r0, r1, r2, r3}
 800a3fa:	b507      	push	{r0, r1, r2, lr}
 800a3fc:	4906      	ldr	r1, [pc, #24]	; (800a418 <iprintf+0x20>)
 800a3fe:	ab04      	add	r3, sp, #16
 800a400:	6808      	ldr	r0, [r1, #0]
 800a402:	f853 2b04 	ldr.w	r2, [r3], #4
 800a406:	6881      	ldr	r1, [r0, #8]
 800a408:	9301      	str	r3, [sp, #4]
 800a40a:	f002 fde1 	bl	800cfd0 <_vfiprintf_r>
 800a40e:	b003      	add	sp, #12
 800a410:	f85d eb04 	ldr.w	lr, [sp], #4
 800a414:	b004      	add	sp, #16
 800a416:	4770      	bx	lr
 800a418:	20000074 	.word	0x20000074

0800a41c <setvbuf>:
 800a41c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a420:	461d      	mov	r5, r3
 800a422:	4b54      	ldr	r3, [pc, #336]	; (800a574 <setvbuf+0x158>)
 800a424:	681f      	ldr	r7, [r3, #0]
 800a426:	4604      	mov	r4, r0
 800a428:	460e      	mov	r6, r1
 800a42a:	4690      	mov	r8, r2
 800a42c:	b127      	cbz	r7, 800a438 <setvbuf+0x1c>
 800a42e:	6a3b      	ldr	r3, [r7, #32]
 800a430:	b913      	cbnz	r3, 800a438 <setvbuf+0x1c>
 800a432:	4638      	mov	r0, r7
 800a434:	f7ff ffaa 	bl	800a38c <__sinit>
 800a438:	f1b8 0f02 	cmp.w	r8, #2
 800a43c:	d006      	beq.n	800a44c <setvbuf+0x30>
 800a43e:	f1b8 0f01 	cmp.w	r8, #1
 800a442:	f200 8094 	bhi.w	800a56e <setvbuf+0x152>
 800a446:	2d00      	cmp	r5, #0
 800a448:	f2c0 8091 	blt.w	800a56e <setvbuf+0x152>
 800a44c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a44e:	07da      	lsls	r2, r3, #31
 800a450:	d405      	bmi.n	800a45e <setvbuf+0x42>
 800a452:	89a3      	ldrh	r3, [r4, #12]
 800a454:	059b      	lsls	r3, r3, #22
 800a456:	d402      	bmi.n	800a45e <setvbuf+0x42>
 800a458:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a45a:	f000 f96e 	bl	800a73a <__retarget_lock_acquire_recursive>
 800a45e:	4621      	mov	r1, r4
 800a460:	4638      	mov	r0, r7
 800a462:	f002 ff55 	bl	800d310 <_fflush_r>
 800a466:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a468:	b141      	cbz	r1, 800a47c <setvbuf+0x60>
 800a46a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a46e:	4299      	cmp	r1, r3
 800a470:	d002      	beq.n	800a478 <setvbuf+0x5c>
 800a472:	4638      	mov	r0, r7
 800a474:	f000 ffe6 	bl	800b444 <_free_r>
 800a478:	2300      	movs	r3, #0
 800a47a:	6363      	str	r3, [r4, #52]	; 0x34
 800a47c:	2300      	movs	r3, #0
 800a47e:	61a3      	str	r3, [r4, #24]
 800a480:	6063      	str	r3, [r4, #4]
 800a482:	89a3      	ldrh	r3, [r4, #12]
 800a484:	0618      	lsls	r0, r3, #24
 800a486:	d503      	bpl.n	800a490 <setvbuf+0x74>
 800a488:	6921      	ldr	r1, [r4, #16]
 800a48a:	4638      	mov	r0, r7
 800a48c:	f000 ffda 	bl	800b444 <_free_r>
 800a490:	89a3      	ldrh	r3, [r4, #12]
 800a492:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800a496:	f023 0303 	bic.w	r3, r3, #3
 800a49a:	f1b8 0f02 	cmp.w	r8, #2
 800a49e:	81a3      	strh	r3, [r4, #12]
 800a4a0:	d05f      	beq.n	800a562 <setvbuf+0x146>
 800a4a2:	ab01      	add	r3, sp, #4
 800a4a4:	466a      	mov	r2, sp
 800a4a6:	4621      	mov	r1, r4
 800a4a8:	4638      	mov	r0, r7
 800a4aa:	f002 ff59 	bl	800d360 <__swhatbuf_r>
 800a4ae:	89a3      	ldrh	r3, [r4, #12]
 800a4b0:	4318      	orrs	r0, r3
 800a4b2:	81a0      	strh	r0, [r4, #12]
 800a4b4:	bb2d      	cbnz	r5, 800a502 <setvbuf+0xe6>
 800a4b6:	9d00      	ldr	r5, [sp, #0]
 800a4b8:	4628      	mov	r0, r5
 800a4ba:	f001 f80f 	bl	800b4dc <malloc>
 800a4be:	4606      	mov	r6, r0
 800a4c0:	2800      	cmp	r0, #0
 800a4c2:	d150      	bne.n	800a566 <setvbuf+0x14a>
 800a4c4:	f8dd 9000 	ldr.w	r9, [sp]
 800a4c8:	45a9      	cmp	r9, r5
 800a4ca:	d13e      	bne.n	800a54a <setvbuf+0x12e>
 800a4cc:	f04f 35ff 	mov.w	r5, #4294967295
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	60a2      	str	r2, [r4, #8]
 800a4d4:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800a4d8:	6022      	str	r2, [r4, #0]
 800a4da:	6122      	str	r2, [r4, #16]
 800a4dc:	2201      	movs	r2, #1
 800a4de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4e2:	6162      	str	r2, [r4, #20]
 800a4e4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a4e6:	f043 0302 	orr.w	r3, r3, #2
 800a4ea:	07d1      	lsls	r1, r2, #31
 800a4ec:	81a3      	strh	r3, [r4, #12]
 800a4ee:	d404      	bmi.n	800a4fa <setvbuf+0xde>
 800a4f0:	059b      	lsls	r3, r3, #22
 800a4f2:	d402      	bmi.n	800a4fa <setvbuf+0xde>
 800a4f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4f6:	f000 f921 	bl	800a73c <__retarget_lock_release_recursive>
 800a4fa:	4628      	mov	r0, r5
 800a4fc:	b003      	add	sp, #12
 800a4fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a502:	2e00      	cmp	r6, #0
 800a504:	d0d8      	beq.n	800a4b8 <setvbuf+0x9c>
 800a506:	6a3b      	ldr	r3, [r7, #32]
 800a508:	b913      	cbnz	r3, 800a510 <setvbuf+0xf4>
 800a50a:	4638      	mov	r0, r7
 800a50c:	f7ff ff3e 	bl	800a38c <__sinit>
 800a510:	f1b8 0f01 	cmp.w	r8, #1
 800a514:	bf08      	it	eq
 800a516:	89a3      	ldrheq	r3, [r4, #12]
 800a518:	6026      	str	r6, [r4, #0]
 800a51a:	bf04      	itt	eq
 800a51c:	f043 0301 	orreq.w	r3, r3, #1
 800a520:	81a3      	strheq	r3, [r4, #12]
 800a522:	89a3      	ldrh	r3, [r4, #12]
 800a524:	f013 0208 	ands.w	r2, r3, #8
 800a528:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800a52c:	d01d      	beq.n	800a56a <setvbuf+0x14e>
 800a52e:	07da      	lsls	r2, r3, #31
 800a530:	bf41      	itttt	mi
 800a532:	2200      	movmi	r2, #0
 800a534:	426d      	negmi	r5, r5
 800a536:	60a2      	strmi	r2, [r4, #8]
 800a538:	61a5      	strmi	r5, [r4, #24]
 800a53a:	bf58      	it	pl
 800a53c:	60a5      	strpl	r5, [r4, #8]
 800a53e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800a540:	f015 0501 	ands.w	r5, r5, #1
 800a544:	d0d4      	beq.n	800a4f0 <setvbuf+0xd4>
 800a546:	2500      	movs	r5, #0
 800a548:	e7d7      	b.n	800a4fa <setvbuf+0xde>
 800a54a:	4648      	mov	r0, r9
 800a54c:	f000 ffc6 	bl	800b4dc <malloc>
 800a550:	4606      	mov	r6, r0
 800a552:	2800      	cmp	r0, #0
 800a554:	d0ba      	beq.n	800a4cc <setvbuf+0xb0>
 800a556:	89a3      	ldrh	r3, [r4, #12]
 800a558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a55c:	81a3      	strh	r3, [r4, #12]
 800a55e:	464d      	mov	r5, r9
 800a560:	e7d1      	b.n	800a506 <setvbuf+0xea>
 800a562:	2500      	movs	r5, #0
 800a564:	e7b4      	b.n	800a4d0 <setvbuf+0xb4>
 800a566:	46a9      	mov	r9, r5
 800a568:	e7f5      	b.n	800a556 <setvbuf+0x13a>
 800a56a:	60a2      	str	r2, [r4, #8]
 800a56c:	e7e7      	b.n	800a53e <setvbuf+0x122>
 800a56e:	f04f 35ff 	mov.w	r5, #4294967295
 800a572:	e7c2      	b.n	800a4fa <setvbuf+0xde>
 800a574:	20000074 	.word	0x20000074

0800a578 <siprintf>:
 800a578:	b40e      	push	{r1, r2, r3}
 800a57a:	b500      	push	{lr}
 800a57c:	b09c      	sub	sp, #112	; 0x70
 800a57e:	ab1d      	add	r3, sp, #116	; 0x74
 800a580:	9002      	str	r0, [sp, #8]
 800a582:	9006      	str	r0, [sp, #24]
 800a584:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a588:	4809      	ldr	r0, [pc, #36]	; (800a5b0 <siprintf+0x38>)
 800a58a:	9107      	str	r1, [sp, #28]
 800a58c:	9104      	str	r1, [sp, #16]
 800a58e:	4909      	ldr	r1, [pc, #36]	; (800a5b4 <siprintf+0x3c>)
 800a590:	f853 2b04 	ldr.w	r2, [r3], #4
 800a594:	9105      	str	r1, [sp, #20]
 800a596:	6800      	ldr	r0, [r0, #0]
 800a598:	9301      	str	r3, [sp, #4]
 800a59a:	a902      	add	r1, sp, #8
 800a59c:	f002 fbf0 	bl	800cd80 <_svfiprintf_r>
 800a5a0:	9b02      	ldr	r3, [sp, #8]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	701a      	strb	r2, [r3, #0]
 800a5a6:	b01c      	add	sp, #112	; 0x70
 800a5a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5ac:	b003      	add	sp, #12
 800a5ae:	4770      	bx	lr
 800a5b0:	20000074 	.word	0x20000074
 800a5b4:	ffff0208 	.word	0xffff0208

0800a5b8 <__sread>:
 800a5b8:	b510      	push	{r4, lr}
 800a5ba:	460c      	mov	r4, r1
 800a5bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5c0:	f000 f86c 	bl	800a69c <_read_r>
 800a5c4:	2800      	cmp	r0, #0
 800a5c6:	bfab      	itete	ge
 800a5c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a5ca:	89a3      	ldrhlt	r3, [r4, #12]
 800a5cc:	181b      	addge	r3, r3, r0
 800a5ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a5d2:	bfac      	ite	ge
 800a5d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a5d6:	81a3      	strhlt	r3, [r4, #12]
 800a5d8:	bd10      	pop	{r4, pc}

0800a5da <__swrite>:
 800a5da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5de:	461f      	mov	r7, r3
 800a5e0:	898b      	ldrh	r3, [r1, #12]
 800a5e2:	05db      	lsls	r3, r3, #23
 800a5e4:	4605      	mov	r5, r0
 800a5e6:	460c      	mov	r4, r1
 800a5e8:	4616      	mov	r6, r2
 800a5ea:	d505      	bpl.n	800a5f8 <__swrite+0x1e>
 800a5ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5f0:	2302      	movs	r3, #2
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	f000 f840 	bl	800a678 <_lseek_r>
 800a5f8:	89a3      	ldrh	r3, [r4, #12]
 800a5fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a602:	81a3      	strh	r3, [r4, #12]
 800a604:	4632      	mov	r2, r6
 800a606:	463b      	mov	r3, r7
 800a608:	4628      	mov	r0, r5
 800a60a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a60e:	f000 b857 	b.w	800a6c0 <_write_r>

0800a612 <__sseek>:
 800a612:	b510      	push	{r4, lr}
 800a614:	460c      	mov	r4, r1
 800a616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a61a:	f000 f82d 	bl	800a678 <_lseek_r>
 800a61e:	1c43      	adds	r3, r0, #1
 800a620:	89a3      	ldrh	r3, [r4, #12]
 800a622:	bf15      	itete	ne
 800a624:	6560      	strne	r0, [r4, #84]	; 0x54
 800a626:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a62a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a62e:	81a3      	strheq	r3, [r4, #12]
 800a630:	bf18      	it	ne
 800a632:	81a3      	strhne	r3, [r4, #12]
 800a634:	bd10      	pop	{r4, pc}

0800a636 <__sclose>:
 800a636:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a63a:	f000 b80d 	b.w	800a658 <_close_r>

0800a63e <memset>:
 800a63e:	4402      	add	r2, r0
 800a640:	4603      	mov	r3, r0
 800a642:	4293      	cmp	r3, r2
 800a644:	d100      	bne.n	800a648 <memset+0xa>
 800a646:	4770      	bx	lr
 800a648:	f803 1b01 	strb.w	r1, [r3], #1
 800a64c:	e7f9      	b.n	800a642 <memset+0x4>
	...

0800a650 <_localeconv_r>:
 800a650:	4800      	ldr	r0, [pc, #0]	; (800a654 <_localeconv_r+0x4>)
 800a652:	4770      	bx	lr
 800a654:	20000168 	.word	0x20000168

0800a658 <_close_r>:
 800a658:	b538      	push	{r3, r4, r5, lr}
 800a65a:	4d06      	ldr	r5, [pc, #24]	; (800a674 <_close_r+0x1c>)
 800a65c:	2300      	movs	r3, #0
 800a65e:	4604      	mov	r4, r0
 800a660:	4608      	mov	r0, r1
 800a662:	602b      	str	r3, [r5, #0]
 800a664:	f7f9 f973 	bl	800394e <_close>
 800a668:	1c43      	adds	r3, r0, #1
 800a66a:	d102      	bne.n	800a672 <_close_r+0x1a>
 800a66c:	682b      	ldr	r3, [r5, #0]
 800a66e:	b103      	cbz	r3, 800a672 <_close_r+0x1a>
 800a670:	6023      	str	r3, [r4, #0]
 800a672:	bd38      	pop	{r3, r4, r5, pc}
 800a674:	2000106c 	.word	0x2000106c

0800a678 <_lseek_r>:
 800a678:	b538      	push	{r3, r4, r5, lr}
 800a67a:	4d07      	ldr	r5, [pc, #28]	; (800a698 <_lseek_r+0x20>)
 800a67c:	4604      	mov	r4, r0
 800a67e:	4608      	mov	r0, r1
 800a680:	4611      	mov	r1, r2
 800a682:	2200      	movs	r2, #0
 800a684:	602a      	str	r2, [r5, #0]
 800a686:	461a      	mov	r2, r3
 800a688:	f7f9 f988 	bl	800399c <_lseek>
 800a68c:	1c43      	adds	r3, r0, #1
 800a68e:	d102      	bne.n	800a696 <_lseek_r+0x1e>
 800a690:	682b      	ldr	r3, [r5, #0]
 800a692:	b103      	cbz	r3, 800a696 <_lseek_r+0x1e>
 800a694:	6023      	str	r3, [r4, #0]
 800a696:	bd38      	pop	{r3, r4, r5, pc}
 800a698:	2000106c 	.word	0x2000106c

0800a69c <_read_r>:
 800a69c:	b538      	push	{r3, r4, r5, lr}
 800a69e:	4d07      	ldr	r5, [pc, #28]	; (800a6bc <_read_r+0x20>)
 800a6a0:	4604      	mov	r4, r0
 800a6a2:	4608      	mov	r0, r1
 800a6a4:	4611      	mov	r1, r2
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	602a      	str	r2, [r5, #0]
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	f7f9 f932 	bl	8003914 <_read>
 800a6b0:	1c43      	adds	r3, r0, #1
 800a6b2:	d102      	bne.n	800a6ba <_read_r+0x1e>
 800a6b4:	682b      	ldr	r3, [r5, #0]
 800a6b6:	b103      	cbz	r3, 800a6ba <_read_r+0x1e>
 800a6b8:	6023      	str	r3, [r4, #0]
 800a6ba:	bd38      	pop	{r3, r4, r5, pc}
 800a6bc:	2000106c 	.word	0x2000106c

0800a6c0 <_write_r>:
 800a6c0:	b538      	push	{r3, r4, r5, lr}
 800a6c2:	4d07      	ldr	r5, [pc, #28]	; (800a6e0 <_write_r+0x20>)
 800a6c4:	4604      	mov	r4, r0
 800a6c6:	4608      	mov	r0, r1
 800a6c8:	4611      	mov	r1, r2
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	602a      	str	r2, [r5, #0]
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	f7f6 fc9e 	bl	8001010 <_write>
 800a6d4:	1c43      	adds	r3, r0, #1
 800a6d6:	d102      	bne.n	800a6de <_write_r+0x1e>
 800a6d8:	682b      	ldr	r3, [r5, #0]
 800a6da:	b103      	cbz	r3, 800a6de <_write_r+0x1e>
 800a6dc:	6023      	str	r3, [r4, #0]
 800a6de:	bd38      	pop	{r3, r4, r5, pc}
 800a6e0:	2000106c 	.word	0x2000106c

0800a6e4 <__errno>:
 800a6e4:	4b01      	ldr	r3, [pc, #4]	; (800a6ec <__errno+0x8>)
 800a6e6:	6818      	ldr	r0, [r3, #0]
 800a6e8:	4770      	bx	lr
 800a6ea:	bf00      	nop
 800a6ec:	20000074 	.word	0x20000074

0800a6f0 <__libc_init_array>:
 800a6f0:	b570      	push	{r4, r5, r6, lr}
 800a6f2:	4d0d      	ldr	r5, [pc, #52]	; (800a728 <__libc_init_array+0x38>)
 800a6f4:	4c0d      	ldr	r4, [pc, #52]	; (800a72c <__libc_init_array+0x3c>)
 800a6f6:	1b64      	subs	r4, r4, r5
 800a6f8:	10a4      	asrs	r4, r4, #2
 800a6fa:	2600      	movs	r6, #0
 800a6fc:	42a6      	cmp	r6, r4
 800a6fe:	d109      	bne.n	800a714 <__libc_init_array+0x24>
 800a700:	4d0b      	ldr	r5, [pc, #44]	; (800a730 <__libc_init_array+0x40>)
 800a702:	4c0c      	ldr	r4, [pc, #48]	; (800a734 <__libc_init_array+0x44>)
 800a704:	f004 fb10 	bl	800ed28 <_init>
 800a708:	1b64      	subs	r4, r4, r5
 800a70a:	10a4      	asrs	r4, r4, #2
 800a70c:	2600      	movs	r6, #0
 800a70e:	42a6      	cmp	r6, r4
 800a710:	d105      	bne.n	800a71e <__libc_init_array+0x2e>
 800a712:	bd70      	pop	{r4, r5, r6, pc}
 800a714:	f855 3b04 	ldr.w	r3, [r5], #4
 800a718:	4798      	blx	r3
 800a71a:	3601      	adds	r6, #1
 800a71c:	e7ee      	b.n	800a6fc <__libc_init_array+0xc>
 800a71e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a722:	4798      	blx	r3
 800a724:	3601      	adds	r6, #1
 800a726:	e7f2      	b.n	800a70e <__libc_init_array+0x1e>
 800a728:	0800f1e0 	.word	0x0800f1e0
 800a72c:	0800f1e0 	.word	0x0800f1e0
 800a730:	0800f1e0 	.word	0x0800f1e0
 800a734:	0800f1e4 	.word	0x0800f1e4

0800a738 <__retarget_lock_init_recursive>:
 800a738:	4770      	bx	lr

0800a73a <__retarget_lock_acquire_recursive>:
 800a73a:	4770      	bx	lr

0800a73c <__retarget_lock_release_recursive>:
 800a73c:	4770      	bx	lr
	...

0800a740 <nanf>:
 800a740:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a748 <nanf+0x8>
 800a744:	4770      	bx	lr
 800a746:	bf00      	nop
 800a748:	7fc00000 	.word	0x7fc00000

0800a74c <quorem>:
 800a74c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a750:	6903      	ldr	r3, [r0, #16]
 800a752:	690c      	ldr	r4, [r1, #16]
 800a754:	42a3      	cmp	r3, r4
 800a756:	4607      	mov	r7, r0
 800a758:	db7e      	blt.n	800a858 <quorem+0x10c>
 800a75a:	3c01      	subs	r4, #1
 800a75c:	f101 0814 	add.w	r8, r1, #20
 800a760:	f100 0514 	add.w	r5, r0, #20
 800a764:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a768:	9301      	str	r3, [sp, #4]
 800a76a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a76e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a772:	3301      	adds	r3, #1
 800a774:	429a      	cmp	r2, r3
 800a776:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a77a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a77e:	fbb2 f6f3 	udiv	r6, r2, r3
 800a782:	d331      	bcc.n	800a7e8 <quorem+0x9c>
 800a784:	f04f 0e00 	mov.w	lr, #0
 800a788:	4640      	mov	r0, r8
 800a78a:	46ac      	mov	ip, r5
 800a78c:	46f2      	mov	sl, lr
 800a78e:	f850 2b04 	ldr.w	r2, [r0], #4
 800a792:	b293      	uxth	r3, r2
 800a794:	fb06 e303 	mla	r3, r6, r3, lr
 800a798:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a79c:	0c1a      	lsrs	r2, r3, #16
 800a79e:	b29b      	uxth	r3, r3
 800a7a0:	ebaa 0303 	sub.w	r3, sl, r3
 800a7a4:	f8dc a000 	ldr.w	sl, [ip]
 800a7a8:	fa13 f38a 	uxtah	r3, r3, sl
 800a7ac:	fb06 220e 	mla	r2, r6, lr, r2
 800a7b0:	9300      	str	r3, [sp, #0]
 800a7b2:	9b00      	ldr	r3, [sp, #0]
 800a7b4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a7b8:	b292      	uxth	r2, r2
 800a7ba:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a7be:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a7c2:	f8bd 3000 	ldrh.w	r3, [sp]
 800a7c6:	4581      	cmp	r9, r0
 800a7c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a7cc:	f84c 3b04 	str.w	r3, [ip], #4
 800a7d0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a7d4:	d2db      	bcs.n	800a78e <quorem+0x42>
 800a7d6:	f855 300b 	ldr.w	r3, [r5, fp]
 800a7da:	b92b      	cbnz	r3, 800a7e8 <quorem+0x9c>
 800a7dc:	9b01      	ldr	r3, [sp, #4]
 800a7de:	3b04      	subs	r3, #4
 800a7e0:	429d      	cmp	r5, r3
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	d32c      	bcc.n	800a840 <quorem+0xf4>
 800a7e6:	613c      	str	r4, [r7, #16]
 800a7e8:	4638      	mov	r0, r7
 800a7ea:	f001 f9f1 	bl	800bbd0 <__mcmp>
 800a7ee:	2800      	cmp	r0, #0
 800a7f0:	db22      	blt.n	800a838 <quorem+0xec>
 800a7f2:	3601      	adds	r6, #1
 800a7f4:	4629      	mov	r1, r5
 800a7f6:	2000      	movs	r0, #0
 800a7f8:	f858 2b04 	ldr.w	r2, [r8], #4
 800a7fc:	f8d1 c000 	ldr.w	ip, [r1]
 800a800:	b293      	uxth	r3, r2
 800a802:	1ac3      	subs	r3, r0, r3
 800a804:	0c12      	lsrs	r2, r2, #16
 800a806:	fa13 f38c 	uxtah	r3, r3, ip
 800a80a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a80e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a812:	b29b      	uxth	r3, r3
 800a814:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a818:	45c1      	cmp	r9, r8
 800a81a:	f841 3b04 	str.w	r3, [r1], #4
 800a81e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a822:	d2e9      	bcs.n	800a7f8 <quorem+0xac>
 800a824:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a828:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a82c:	b922      	cbnz	r2, 800a838 <quorem+0xec>
 800a82e:	3b04      	subs	r3, #4
 800a830:	429d      	cmp	r5, r3
 800a832:	461a      	mov	r2, r3
 800a834:	d30a      	bcc.n	800a84c <quorem+0x100>
 800a836:	613c      	str	r4, [r7, #16]
 800a838:	4630      	mov	r0, r6
 800a83a:	b003      	add	sp, #12
 800a83c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a840:	6812      	ldr	r2, [r2, #0]
 800a842:	3b04      	subs	r3, #4
 800a844:	2a00      	cmp	r2, #0
 800a846:	d1ce      	bne.n	800a7e6 <quorem+0x9a>
 800a848:	3c01      	subs	r4, #1
 800a84a:	e7c9      	b.n	800a7e0 <quorem+0x94>
 800a84c:	6812      	ldr	r2, [r2, #0]
 800a84e:	3b04      	subs	r3, #4
 800a850:	2a00      	cmp	r2, #0
 800a852:	d1f0      	bne.n	800a836 <quorem+0xea>
 800a854:	3c01      	subs	r4, #1
 800a856:	e7eb      	b.n	800a830 <quorem+0xe4>
 800a858:	2000      	movs	r0, #0
 800a85a:	e7ee      	b.n	800a83a <quorem+0xee>
 800a85c:	0000      	movs	r0, r0
	...

0800a860 <_dtoa_r>:
 800a860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a864:	ed2d 8b04 	vpush	{d8-d9}
 800a868:	69c5      	ldr	r5, [r0, #28]
 800a86a:	b093      	sub	sp, #76	; 0x4c
 800a86c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a870:	ec57 6b10 	vmov	r6, r7, d0
 800a874:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a878:	9107      	str	r1, [sp, #28]
 800a87a:	4604      	mov	r4, r0
 800a87c:	920a      	str	r2, [sp, #40]	; 0x28
 800a87e:	930d      	str	r3, [sp, #52]	; 0x34
 800a880:	b975      	cbnz	r5, 800a8a0 <_dtoa_r+0x40>
 800a882:	2010      	movs	r0, #16
 800a884:	f000 fe2a 	bl	800b4dc <malloc>
 800a888:	4602      	mov	r2, r0
 800a88a:	61e0      	str	r0, [r4, #28]
 800a88c:	b920      	cbnz	r0, 800a898 <_dtoa_r+0x38>
 800a88e:	4bae      	ldr	r3, [pc, #696]	; (800ab48 <_dtoa_r+0x2e8>)
 800a890:	21ef      	movs	r1, #239	; 0xef
 800a892:	48ae      	ldr	r0, [pc, #696]	; (800ab4c <_dtoa_r+0x2ec>)
 800a894:	f002 fed0 	bl	800d638 <__assert_func>
 800a898:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a89c:	6005      	str	r5, [r0, #0]
 800a89e:	60c5      	str	r5, [r0, #12]
 800a8a0:	69e3      	ldr	r3, [r4, #28]
 800a8a2:	6819      	ldr	r1, [r3, #0]
 800a8a4:	b151      	cbz	r1, 800a8bc <_dtoa_r+0x5c>
 800a8a6:	685a      	ldr	r2, [r3, #4]
 800a8a8:	604a      	str	r2, [r1, #4]
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	4093      	lsls	r3, r2
 800a8ae:	608b      	str	r3, [r1, #8]
 800a8b0:	4620      	mov	r0, r4
 800a8b2:	f000 ff07 	bl	800b6c4 <_Bfree>
 800a8b6:	69e3      	ldr	r3, [r4, #28]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	601a      	str	r2, [r3, #0]
 800a8bc:	1e3b      	subs	r3, r7, #0
 800a8be:	bfbb      	ittet	lt
 800a8c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a8c4:	9303      	strlt	r3, [sp, #12]
 800a8c6:	2300      	movge	r3, #0
 800a8c8:	2201      	movlt	r2, #1
 800a8ca:	bfac      	ite	ge
 800a8cc:	f8c8 3000 	strge.w	r3, [r8]
 800a8d0:	f8c8 2000 	strlt.w	r2, [r8]
 800a8d4:	4b9e      	ldr	r3, [pc, #632]	; (800ab50 <_dtoa_r+0x2f0>)
 800a8d6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a8da:	ea33 0308 	bics.w	r3, r3, r8
 800a8de:	d11b      	bne.n	800a918 <_dtoa_r+0xb8>
 800a8e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a8e2:	f242 730f 	movw	r3, #9999	; 0x270f
 800a8e6:	6013      	str	r3, [r2, #0]
 800a8e8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a8ec:	4333      	orrs	r3, r6
 800a8ee:	f000 8593 	beq.w	800b418 <_dtoa_r+0xbb8>
 800a8f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a8f4:	b963      	cbnz	r3, 800a910 <_dtoa_r+0xb0>
 800a8f6:	4b97      	ldr	r3, [pc, #604]	; (800ab54 <_dtoa_r+0x2f4>)
 800a8f8:	e027      	b.n	800a94a <_dtoa_r+0xea>
 800a8fa:	4b97      	ldr	r3, [pc, #604]	; (800ab58 <_dtoa_r+0x2f8>)
 800a8fc:	9300      	str	r3, [sp, #0]
 800a8fe:	3308      	adds	r3, #8
 800a900:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a902:	6013      	str	r3, [r2, #0]
 800a904:	9800      	ldr	r0, [sp, #0]
 800a906:	b013      	add	sp, #76	; 0x4c
 800a908:	ecbd 8b04 	vpop	{d8-d9}
 800a90c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a910:	4b90      	ldr	r3, [pc, #576]	; (800ab54 <_dtoa_r+0x2f4>)
 800a912:	9300      	str	r3, [sp, #0]
 800a914:	3303      	adds	r3, #3
 800a916:	e7f3      	b.n	800a900 <_dtoa_r+0xa0>
 800a918:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a91c:	2200      	movs	r2, #0
 800a91e:	ec51 0b17 	vmov	r0, r1, d7
 800a922:	eeb0 8a47 	vmov.f32	s16, s14
 800a926:	eef0 8a67 	vmov.f32	s17, s15
 800a92a:	2300      	movs	r3, #0
 800a92c:	f7f6 f8dc 	bl	8000ae8 <__aeabi_dcmpeq>
 800a930:	4681      	mov	r9, r0
 800a932:	b160      	cbz	r0, 800a94e <_dtoa_r+0xee>
 800a934:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a936:	2301      	movs	r3, #1
 800a938:	6013      	str	r3, [r2, #0]
 800a93a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	f000 8568 	beq.w	800b412 <_dtoa_r+0xbb2>
 800a942:	4b86      	ldr	r3, [pc, #536]	; (800ab5c <_dtoa_r+0x2fc>)
 800a944:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a946:	6013      	str	r3, [r2, #0]
 800a948:	3b01      	subs	r3, #1
 800a94a:	9300      	str	r3, [sp, #0]
 800a94c:	e7da      	b.n	800a904 <_dtoa_r+0xa4>
 800a94e:	aa10      	add	r2, sp, #64	; 0x40
 800a950:	a911      	add	r1, sp, #68	; 0x44
 800a952:	4620      	mov	r0, r4
 800a954:	eeb0 0a48 	vmov.f32	s0, s16
 800a958:	eef0 0a68 	vmov.f32	s1, s17
 800a95c:	f001 fa4e 	bl	800bdfc <__d2b>
 800a960:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a964:	4682      	mov	sl, r0
 800a966:	2d00      	cmp	r5, #0
 800a968:	d07f      	beq.n	800aa6a <_dtoa_r+0x20a>
 800a96a:	ee18 3a90 	vmov	r3, s17
 800a96e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a972:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a976:	ec51 0b18 	vmov	r0, r1, d8
 800a97a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a97e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a982:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a986:	4619      	mov	r1, r3
 800a988:	2200      	movs	r2, #0
 800a98a:	4b75      	ldr	r3, [pc, #468]	; (800ab60 <_dtoa_r+0x300>)
 800a98c:	f7f5 fc8c 	bl	80002a8 <__aeabi_dsub>
 800a990:	a367      	add	r3, pc, #412	; (adr r3, 800ab30 <_dtoa_r+0x2d0>)
 800a992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a996:	f7f5 fe3f 	bl	8000618 <__aeabi_dmul>
 800a99a:	a367      	add	r3, pc, #412	; (adr r3, 800ab38 <_dtoa_r+0x2d8>)
 800a99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a0:	f7f5 fc84 	bl	80002ac <__adddf3>
 800a9a4:	4606      	mov	r6, r0
 800a9a6:	4628      	mov	r0, r5
 800a9a8:	460f      	mov	r7, r1
 800a9aa:	f7f5 fdcb 	bl	8000544 <__aeabi_i2d>
 800a9ae:	a364      	add	r3, pc, #400	; (adr r3, 800ab40 <_dtoa_r+0x2e0>)
 800a9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b4:	f7f5 fe30 	bl	8000618 <__aeabi_dmul>
 800a9b8:	4602      	mov	r2, r0
 800a9ba:	460b      	mov	r3, r1
 800a9bc:	4630      	mov	r0, r6
 800a9be:	4639      	mov	r1, r7
 800a9c0:	f7f5 fc74 	bl	80002ac <__adddf3>
 800a9c4:	4606      	mov	r6, r0
 800a9c6:	460f      	mov	r7, r1
 800a9c8:	f7f6 f8d6 	bl	8000b78 <__aeabi_d2iz>
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	4683      	mov	fp, r0
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	4630      	mov	r0, r6
 800a9d4:	4639      	mov	r1, r7
 800a9d6:	f7f6 f891 	bl	8000afc <__aeabi_dcmplt>
 800a9da:	b148      	cbz	r0, 800a9f0 <_dtoa_r+0x190>
 800a9dc:	4658      	mov	r0, fp
 800a9de:	f7f5 fdb1 	bl	8000544 <__aeabi_i2d>
 800a9e2:	4632      	mov	r2, r6
 800a9e4:	463b      	mov	r3, r7
 800a9e6:	f7f6 f87f 	bl	8000ae8 <__aeabi_dcmpeq>
 800a9ea:	b908      	cbnz	r0, 800a9f0 <_dtoa_r+0x190>
 800a9ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a9f0:	f1bb 0f16 	cmp.w	fp, #22
 800a9f4:	d857      	bhi.n	800aaa6 <_dtoa_r+0x246>
 800a9f6:	4b5b      	ldr	r3, [pc, #364]	; (800ab64 <_dtoa_r+0x304>)
 800a9f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa00:	ec51 0b18 	vmov	r0, r1, d8
 800aa04:	f7f6 f87a 	bl	8000afc <__aeabi_dcmplt>
 800aa08:	2800      	cmp	r0, #0
 800aa0a:	d04e      	beq.n	800aaaa <_dtoa_r+0x24a>
 800aa0c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aa10:	2300      	movs	r3, #0
 800aa12:	930c      	str	r3, [sp, #48]	; 0x30
 800aa14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa16:	1b5b      	subs	r3, r3, r5
 800aa18:	1e5a      	subs	r2, r3, #1
 800aa1a:	bf45      	ittet	mi
 800aa1c:	f1c3 0301 	rsbmi	r3, r3, #1
 800aa20:	9305      	strmi	r3, [sp, #20]
 800aa22:	2300      	movpl	r3, #0
 800aa24:	2300      	movmi	r3, #0
 800aa26:	9206      	str	r2, [sp, #24]
 800aa28:	bf54      	ite	pl
 800aa2a:	9305      	strpl	r3, [sp, #20]
 800aa2c:	9306      	strmi	r3, [sp, #24]
 800aa2e:	f1bb 0f00 	cmp.w	fp, #0
 800aa32:	db3c      	blt.n	800aaae <_dtoa_r+0x24e>
 800aa34:	9b06      	ldr	r3, [sp, #24]
 800aa36:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800aa3a:	445b      	add	r3, fp
 800aa3c:	9306      	str	r3, [sp, #24]
 800aa3e:	2300      	movs	r3, #0
 800aa40:	9308      	str	r3, [sp, #32]
 800aa42:	9b07      	ldr	r3, [sp, #28]
 800aa44:	2b09      	cmp	r3, #9
 800aa46:	d868      	bhi.n	800ab1a <_dtoa_r+0x2ba>
 800aa48:	2b05      	cmp	r3, #5
 800aa4a:	bfc4      	itt	gt
 800aa4c:	3b04      	subgt	r3, #4
 800aa4e:	9307      	strgt	r3, [sp, #28]
 800aa50:	9b07      	ldr	r3, [sp, #28]
 800aa52:	f1a3 0302 	sub.w	r3, r3, #2
 800aa56:	bfcc      	ite	gt
 800aa58:	2500      	movgt	r5, #0
 800aa5a:	2501      	movle	r5, #1
 800aa5c:	2b03      	cmp	r3, #3
 800aa5e:	f200 8085 	bhi.w	800ab6c <_dtoa_r+0x30c>
 800aa62:	e8df f003 	tbb	[pc, r3]
 800aa66:	3b2e      	.short	0x3b2e
 800aa68:	5839      	.short	0x5839
 800aa6a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800aa6e:	441d      	add	r5, r3
 800aa70:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800aa74:	2b20      	cmp	r3, #32
 800aa76:	bfc1      	itttt	gt
 800aa78:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800aa7c:	fa08 f803 	lslgt.w	r8, r8, r3
 800aa80:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800aa84:	fa26 f303 	lsrgt.w	r3, r6, r3
 800aa88:	bfd6      	itet	le
 800aa8a:	f1c3 0320 	rsble	r3, r3, #32
 800aa8e:	ea48 0003 	orrgt.w	r0, r8, r3
 800aa92:	fa06 f003 	lslle.w	r0, r6, r3
 800aa96:	f7f5 fd45 	bl	8000524 <__aeabi_ui2d>
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800aaa0:	3d01      	subs	r5, #1
 800aaa2:	920e      	str	r2, [sp, #56]	; 0x38
 800aaa4:	e76f      	b.n	800a986 <_dtoa_r+0x126>
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	e7b3      	b.n	800aa12 <_dtoa_r+0x1b2>
 800aaaa:	900c      	str	r0, [sp, #48]	; 0x30
 800aaac:	e7b2      	b.n	800aa14 <_dtoa_r+0x1b4>
 800aaae:	9b05      	ldr	r3, [sp, #20]
 800aab0:	eba3 030b 	sub.w	r3, r3, fp
 800aab4:	9305      	str	r3, [sp, #20]
 800aab6:	f1cb 0300 	rsb	r3, fp, #0
 800aaba:	9308      	str	r3, [sp, #32]
 800aabc:	2300      	movs	r3, #0
 800aabe:	930b      	str	r3, [sp, #44]	; 0x2c
 800aac0:	e7bf      	b.n	800aa42 <_dtoa_r+0x1e2>
 800aac2:	2300      	movs	r3, #0
 800aac4:	9309      	str	r3, [sp, #36]	; 0x24
 800aac6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	dc52      	bgt.n	800ab72 <_dtoa_r+0x312>
 800aacc:	2301      	movs	r3, #1
 800aace:	9301      	str	r3, [sp, #4]
 800aad0:	9304      	str	r3, [sp, #16]
 800aad2:	461a      	mov	r2, r3
 800aad4:	920a      	str	r2, [sp, #40]	; 0x28
 800aad6:	e00b      	b.n	800aaf0 <_dtoa_r+0x290>
 800aad8:	2301      	movs	r3, #1
 800aada:	e7f3      	b.n	800aac4 <_dtoa_r+0x264>
 800aadc:	2300      	movs	r3, #0
 800aade:	9309      	str	r3, [sp, #36]	; 0x24
 800aae0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aae2:	445b      	add	r3, fp
 800aae4:	9301      	str	r3, [sp, #4]
 800aae6:	3301      	adds	r3, #1
 800aae8:	2b01      	cmp	r3, #1
 800aaea:	9304      	str	r3, [sp, #16]
 800aaec:	bfb8      	it	lt
 800aaee:	2301      	movlt	r3, #1
 800aaf0:	69e0      	ldr	r0, [r4, #28]
 800aaf2:	2100      	movs	r1, #0
 800aaf4:	2204      	movs	r2, #4
 800aaf6:	f102 0614 	add.w	r6, r2, #20
 800aafa:	429e      	cmp	r6, r3
 800aafc:	d93d      	bls.n	800ab7a <_dtoa_r+0x31a>
 800aafe:	6041      	str	r1, [r0, #4]
 800ab00:	4620      	mov	r0, r4
 800ab02:	f000 fd9f 	bl	800b644 <_Balloc>
 800ab06:	9000      	str	r0, [sp, #0]
 800ab08:	2800      	cmp	r0, #0
 800ab0a:	d139      	bne.n	800ab80 <_dtoa_r+0x320>
 800ab0c:	4b16      	ldr	r3, [pc, #88]	; (800ab68 <_dtoa_r+0x308>)
 800ab0e:	4602      	mov	r2, r0
 800ab10:	f240 11af 	movw	r1, #431	; 0x1af
 800ab14:	e6bd      	b.n	800a892 <_dtoa_r+0x32>
 800ab16:	2301      	movs	r3, #1
 800ab18:	e7e1      	b.n	800aade <_dtoa_r+0x27e>
 800ab1a:	2501      	movs	r5, #1
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	9307      	str	r3, [sp, #28]
 800ab20:	9509      	str	r5, [sp, #36]	; 0x24
 800ab22:	f04f 33ff 	mov.w	r3, #4294967295
 800ab26:	9301      	str	r3, [sp, #4]
 800ab28:	9304      	str	r3, [sp, #16]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	2312      	movs	r3, #18
 800ab2e:	e7d1      	b.n	800aad4 <_dtoa_r+0x274>
 800ab30:	636f4361 	.word	0x636f4361
 800ab34:	3fd287a7 	.word	0x3fd287a7
 800ab38:	8b60c8b3 	.word	0x8b60c8b3
 800ab3c:	3fc68a28 	.word	0x3fc68a28
 800ab40:	509f79fb 	.word	0x509f79fb
 800ab44:	3fd34413 	.word	0x3fd34413
 800ab48:	0800edc2 	.word	0x0800edc2
 800ab4c:	0800edd9 	.word	0x0800edd9
 800ab50:	7ff00000 	.word	0x7ff00000
 800ab54:	0800edbe 	.word	0x0800edbe
 800ab58:	0800edb5 	.word	0x0800edb5
 800ab5c:	0800ed8d 	.word	0x0800ed8d
 800ab60:	3ff80000 	.word	0x3ff80000
 800ab64:	0800eec8 	.word	0x0800eec8
 800ab68:	0800ee31 	.word	0x0800ee31
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	9309      	str	r3, [sp, #36]	; 0x24
 800ab70:	e7d7      	b.n	800ab22 <_dtoa_r+0x2c2>
 800ab72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab74:	9301      	str	r3, [sp, #4]
 800ab76:	9304      	str	r3, [sp, #16]
 800ab78:	e7ba      	b.n	800aaf0 <_dtoa_r+0x290>
 800ab7a:	3101      	adds	r1, #1
 800ab7c:	0052      	lsls	r2, r2, #1
 800ab7e:	e7ba      	b.n	800aaf6 <_dtoa_r+0x296>
 800ab80:	69e3      	ldr	r3, [r4, #28]
 800ab82:	9a00      	ldr	r2, [sp, #0]
 800ab84:	601a      	str	r2, [r3, #0]
 800ab86:	9b04      	ldr	r3, [sp, #16]
 800ab88:	2b0e      	cmp	r3, #14
 800ab8a:	f200 80a8 	bhi.w	800acde <_dtoa_r+0x47e>
 800ab8e:	2d00      	cmp	r5, #0
 800ab90:	f000 80a5 	beq.w	800acde <_dtoa_r+0x47e>
 800ab94:	f1bb 0f00 	cmp.w	fp, #0
 800ab98:	dd38      	ble.n	800ac0c <_dtoa_r+0x3ac>
 800ab9a:	4bc0      	ldr	r3, [pc, #768]	; (800ae9c <_dtoa_r+0x63c>)
 800ab9c:	f00b 020f 	and.w	r2, fp, #15
 800aba0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aba4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800aba8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800abac:	ea4f 182b 	mov.w	r8, fp, asr #4
 800abb0:	d019      	beq.n	800abe6 <_dtoa_r+0x386>
 800abb2:	4bbb      	ldr	r3, [pc, #748]	; (800aea0 <_dtoa_r+0x640>)
 800abb4:	ec51 0b18 	vmov	r0, r1, d8
 800abb8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800abbc:	f7f5 fe56 	bl	800086c <__aeabi_ddiv>
 800abc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abc4:	f008 080f 	and.w	r8, r8, #15
 800abc8:	2503      	movs	r5, #3
 800abca:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800aea0 <_dtoa_r+0x640>
 800abce:	f1b8 0f00 	cmp.w	r8, #0
 800abd2:	d10a      	bne.n	800abea <_dtoa_r+0x38a>
 800abd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abd8:	4632      	mov	r2, r6
 800abda:	463b      	mov	r3, r7
 800abdc:	f7f5 fe46 	bl	800086c <__aeabi_ddiv>
 800abe0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abe4:	e02b      	b.n	800ac3e <_dtoa_r+0x3de>
 800abe6:	2502      	movs	r5, #2
 800abe8:	e7ef      	b.n	800abca <_dtoa_r+0x36a>
 800abea:	f018 0f01 	tst.w	r8, #1
 800abee:	d008      	beq.n	800ac02 <_dtoa_r+0x3a2>
 800abf0:	4630      	mov	r0, r6
 800abf2:	4639      	mov	r1, r7
 800abf4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800abf8:	f7f5 fd0e 	bl	8000618 <__aeabi_dmul>
 800abfc:	3501      	adds	r5, #1
 800abfe:	4606      	mov	r6, r0
 800ac00:	460f      	mov	r7, r1
 800ac02:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ac06:	f109 0908 	add.w	r9, r9, #8
 800ac0a:	e7e0      	b.n	800abce <_dtoa_r+0x36e>
 800ac0c:	f000 809f 	beq.w	800ad4e <_dtoa_r+0x4ee>
 800ac10:	f1cb 0600 	rsb	r6, fp, #0
 800ac14:	4ba1      	ldr	r3, [pc, #644]	; (800ae9c <_dtoa_r+0x63c>)
 800ac16:	4fa2      	ldr	r7, [pc, #648]	; (800aea0 <_dtoa_r+0x640>)
 800ac18:	f006 020f 	and.w	r2, r6, #15
 800ac1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac24:	ec51 0b18 	vmov	r0, r1, d8
 800ac28:	f7f5 fcf6 	bl	8000618 <__aeabi_dmul>
 800ac2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac30:	1136      	asrs	r6, r6, #4
 800ac32:	2300      	movs	r3, #0
 800ac34:	2502      	movs	r5, #2
 800ac36:	2e00      	cmp	r6, #0
 800ac38:	d17e      	bne.n	800ad38 <_dtoa_r+0x4d8>
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d1d0      	bne.n	800abe0 <_dtoa_r+0x380>
 800ac3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac40:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	f000 8084 	beq.w	800ad52 <_dtoa_r+0x4f2>
 800ac4a:	4b96      	ldr	r3, [pc, #600]	; (800aea4 <_dtoa_r+0x644>)
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	4640      	mov	r0, r8
 800ac50:	4649      	mov	r1, r9
 800ac52:	f7f5 ff53 	bl	8000afc <__aeabi_dcmplt>
 800ac56:	2800      	cmp	r0, #0
 800ac58:	d07b      	beq.n	800ad52 <_dtoa_r+0x4f2>
 800ac5a:	9b04      	ldr	r3, [sp, #16]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d078      	beq.n	800ad52 <_dtoa_r+0x4f2>
 800ac60:	9b01      	ldr	r3, [sp, #4]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	dd39      	ble.n	800acda <_dtoa_r+0x47a>
 800ac66:	4b90      	ldr	r3, [pc, #576]	; (800aea8 <_dtoa_r+0x648>)
 800ac68:	2200      	movs	r2, #0
 800ac6a:	4640      	mov	r0, r8
 800ac6c:	4649      	mov	r1, r9
 800ac6e:	f7f5 fcd3 	bl	8000618 <__aeabi_dmul>
 800ac72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac76:	9e01      	ldr	r6, [sp, #4]
 800ac78:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ac7c:	3501      	adds	r5, #1
 800ac7e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ac82:	4628      	mov	r0, r5
 800ac84:	f7f5 fc5e 	bl	8000544 <__aeabi_i2d>
 800ac88:	4642      	mov	r2, r8
 800ac8a:	464b      	mov	r3, r9
 800ac8c:	f7f5 fcc4 	bl	8000618 <__aeabi_dmul>
 800ac90:	4b86      	ldr	r3, [pc, #536]	; (800aeac <_dtoa_r+0x64c>)
 800ac92:	2200      	movs	r2, #0
 800ac94:	f7f5 fb0a 	bl	80002ac <__adddf3>
 800ac98:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ac9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aca0:	9303      	str	r3, [sp, #12]
 800aca2:	2e00      	cmp	r6, #0
 800aca4:	d158      	bne.n	800ad58 <_dtoa_r+0x4f8>
 800aca6:	4b82      	ldr	r3, [pc, #520]	; (800aeb0 <_dtoa_r+0x650>)
 800aca8:	2200      	movs	r2, #0
 800acaa:	4640      	mov	r0, r8
 800acac:	4649      	mov	r1, r9
 800acae:	f7f5 fafb 	bl	80002a8 <__aeabi_dsub>
 800acb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800acb6:	4680      	mov	r8, r0
 800acb8:	4689      	mov	r9, r1
 800acba:	f7f5 ff3d 	bl	8000b38 <__aeabi_dcmpgt>
 800acbe:	2800      	cmp	r0, #0
 800acc0:	f040 8296 	bne.w	800b1f0 <_dtoa_r+0x990>
 800acc4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800acc8:	4640      	mov	r0, r8
 800acca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800acce:	4649      	mov	r1, r9
 800acd0:	f7f5 ff14 	bl	8000afc <__aeabi_dcmplt>
 800acd4:	2800      	cmp	r0, #0
 800acd6:	f040 8289 	bne.w	800b1ec <_dtoa_r+0x98c>
 800acda:	ed8d 8b02 	vstr	d8, [sp, #8]
 800acde:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	f2c0 814e 	blt.w	800af82 <_dtoa_r+0x722>
 800ace6:	f1bb 0f0e 	cmp.w	fp, #14
 800acea:	f300 814a 	bgt.w	800af82 <_dtoa_r+0x722>
 800acee:	4b6b      	ldr	r3, [pc, #428]	; (800ae9c <_dtoa_r+0x63c>)
 800acf0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800acf4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800acf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	f280 80dc 	bge.w	800aeb8 <_dtoa_r+0x658>
 800ad00:	9b04      	ldr	r3, [sp, #16]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	f300 80d8 	bgt.w	800aeb8 <_dtoa_r+0x658>
 800ad08:	f040 826f 	bne.w	800b1ea <_dtoa_r+0x98a>
 800ad0c:	4b68      	ldr	r3, [pc, #416]	; (800aeb0 <_dtoa_r+0x650>)
 800ad0e:	2200      	movs	r2, #0
 800ad10:	4640      	mov	r0, r8
 800ad12:	4649      	mov	r1, r9
 800ad14:	f7f5 fc80 	bl	8000618 <__aeabi_dmul>
 800ad18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad1c:	f7f5 ff02 	bl	8000b24 <__aeabi_dcmpge>
 800ad20:	9e04      	ldr	r6, [sp, #16]
 800ad22:	4637      	mov	r7, r6
 800ad24:	2800      	cmp	r0, #0
 800ad26:	f040 8245 	bne.w	800b1b4 <_dtoa_r+0x954>
 800ad2a:	9d00      	ldr	r5, [sp, #0]
 800ad2c:	2331      	movs	r3, #49	; 0x31
 800ad2e:	f805 3b01 	strb.w	r3, [r5], #1
 800ad32:	f10b 0b01 	add.w	fp, fp, #1
 800ad36:	e241      	b.n	800b1bc <_dtoa_r+0x95c>
 800ad38:	07f2      	lsls	r2, r6, #31
 800ad3a:	d505      	bpl.n	800ad48 <_dtoa_r+0x4e8>
 800ad3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad40:	f7f5 fc6a 	bl	8000618 <__aeabi_dmul>
 800ad44:	3501      	adds	r5, #1
 800ad46:	2301      	movs	r3, #1
 800ad48:	1076      	asrs	r6, r6, #1
 800ad4a:	3708      	adds	r7, #8
 800ad4c:	e773      	b.n	800ac36 <_dtoa_r+0x3d6>
 800ad4e:	2502      	movs	r5, #2
 800ad50:	e775      	b.n	800ac3e <_dtoa_r+0x3de>
 800ad52:	9e04      	ldr	r6, [sp, #16]
 800ad54:	465f      	mov	r7, fp
 800ad56:	e792      	b.n	800ac7e <_dtoa_r+0x41e>
 800ad58:	9900      	ldr	r1, [sp, #0]
 800ad5a:	4b50      	ldr	r3, [pc, #320]	; (800ae9c <_dtoa_r+0x63c>)
 800ad5c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ad60:	4431      	add	r1, r6
 800ad62:	9102      	str	r1, [sp, #8]
 800ad64:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ad66:	eeb0 9a47 	vmov.f32	s18, s14
 800ad6a:	eef0 9a67 	vmov.f32	s19, s15
 800ad6e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ad72:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ad76:	2900      	cmp	r1, #0
 800ad78:	d044      	beq.n	800ae04 <_dtoa_r+0x5a4>
 800ad7a:	494e      	ldr	r1, [pc, #312]	; (800aeb4 <_dtoa_r+0x654>)
 800ad7c:	2000      	movs	r0, #0
 800ad7e:	f7f5 fd75 	bl	800086c <__aeabi_ddiv>
 800ad82:	ec53 2b19 	vmov	r2, r3, d9
 800ad86:	f7f5 fa8f 	bl	80002a8 <__aeabi_dsub>
 800ad8a:	9d00      	ldr	r5, [sp, #0]
 800ad8c:	ec41 0b19 	vmov	d9, r0, r1
 800ad90:	4649      	mov	r1, r9
 800ad92:	4640      	mov	r0, r8
 800ad94:	f7f5 fef0 	bl	8000b78 <__aeabi_d2iz>
 800ad98:	4606      	mov	r6, r0
 800ad9a:	f7f5 fbd3 	bl	8000544 <__aeabi_i2d>
 800ad9e:	4602      	mov	r2, r0
 800ada0:	460b      	mov	r3, r1
 800ada2:	4640      	mov	r0, r8
 800ada4:	4649      	mov	r1, r9
 800ada6:	f7f5 fa7f 	bl	80002a8 <__aeabi_dsub>
 800adaa:	3630      	adds	r6, #48	; 0x30
 800adac:	f805 6b01 	strb.w	r6, [r5], #1
 800adb0:	ec53 2b19 	vmov	r2, r3, d9
 800adb4:	4680      	mov	r8, r0
 800adb6:	4689      	mov	r9, r1
 800adb8:	f7f5 fea0 	bl	8000afc <__aeabi_dcmplt>
 800adbc:	2800      	cmp	r0, #0
 800adbe:	d164      	bne.n	800ae8a <_dtoa_r+0x62a>
 800adc0:	4642      	mov	r2, r8
 800adc2:	464b      	mov	r3, r9
 800adc4:	4937      	ldr	r1, [pc, #220]	; (800aea4 <_dtoa_r+0x644>)
 800adc6:	2000      	movs	r0, #0
 800adc8:	f7f5 fa6e 	bl	80002a8 <__aeabi_dsub>
 800adcc:	ec53 2b19 	vmov	r2, r3, d9
 800add0:	f7f5 fe94 	bl	8000afc <__aeabi_dcmplt>
 800add4:	2800      	cmp	r0, #0
 800add6:	f040 80b6 	bne.w	800af46 <_dtoa_r+0x6e6>
 800adda:	9b02      	ldr	r3, [sp, #8]
 800addc:	429d      	cmp	r5, r3
 800adde:	f43f af7c 	beq.w	800acda <_dtoa_r+0x47a>
 800ade2:	4b31      	ldr	r3, [pc, #196]	; (800aea8 <_dtoa_r+0x648>)
 800ade4:	ec51 0b19 	vmov	r0, r1, d9
 800ade8:	2200      	movs	r2, #0
 800adea:	f7f5 fc15 	bl	8000618 <__aeabi_dmul>
 800adee:	4b2e      	ldr	r3, [pc, #184]	; (800aea8 <_dtoa_r+0x648>)
 800adf0:	ec41 0b19 	vmov	d9, r0, r1
 800adf4:	2200      	movs	r2, #0
 800adf6:	4640      	mov	r0, r8
 800adf8:	4649      	mov	r1, r9
 800adfa:	f7f5 fc0d 	bl	8000618 <__aeabi_dmul>
 800adfe:	4680      	mov	r8, r0
 800ae00:	4689      	mov	r9, r1
 800ae02:	e7c5      	b.n	800ad90 <_dtoa_r+0x530>
 800ae04:	ec51 0b17 	vmov	r0, r1, d7
 800ae08:	f7f5 fc06 	bl	8000618 <__aeabi_dmul>
 800ae0c:	9b02      	ldr	r3, [sp, #8]
 800ae0e:	9d00      	ldr	r5, [sp, #0]
 800ae10:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae12:	ec41 0b19 	vmov	d9, r0, r1
 800ae16:	4649      	mov	r1, r9
 800ae18:	4640      	mov	r0, r8
 800ae1a:	f7f5 fead 	bl	8000b78 <__aeabi_d2iz>
 800ae1e:	4606      	mov	r6, r0
 800ae20:	f7f5 fb90 	bl	8000544 <__aeabi_i2d>
 800ae24:	3630      	adds	r6, #48	; 0x30
 800ae26:	4602      	mov	r2, r0
 800ae28:	460b      	mov	r3, r1
 800ae2a:	4640      	mov	r0, r8
 800ae2c:	4649      	mov	r1, r9
 800ae2e:	f7f5 fa3b 	bl	80002a8 <__aeabi_dsub>
 800ae32:	f805 6b01 	strb.w	r6, [r5], #1
 800ae36:	9b02      	ldr	r3, [sp, #8]
 800ae38:	429d      	cmp	r5, r3
 800ae3a:	4680      	mov	r8, r0
 800ae3c:	4689      	mov	r9, r1
 800ae3e:	f04f 0200 	mov.w	r2, #0
 800ae42:	d124      	bne.n	800ae8e <_dtoa_r+0x62e>
 800ae44:	4b1b      	ldr	r3, [pc, #108]	; (800aeb4 <_dtoa_r+0x654>)
 800ae46:	ec51 0b19 	vmov	r0, r1, d9
 800ae4a:	f7f5 fa2f 	bl	80002ac <__adddf3>
 800ae4e:	4602      	mov	r2, r0
 800ae50:	460b      	mov	r3, r1
 800ae52:	4640      	mov	r0, r8
 800ae54:	4649      	mov	r1, r9
 800ae56:	f7f5 fe6f 	bl	8000b38 <__aeabi_dcmpgt>
 800ae5a:	2800      	cmp	r0, #0
 800ae5c:	d173      	bne.n	800af46 <_dtoa_r+0x6e6>
 800ae5e:	ec53 2b19 	vmov	r2, r3, d9
 800ae62:	4914      	ldr	r1, [pc, #80]	; (800aeb4 <_dtoa_r+0x654>)
 800ae64:	2000      	movs	r0, #0
 800ae66:	f7f5 fa1f 	bl	80002a8 <__aeabi_dsub>
 800ae6a:	4602      	mov	r2, r0
 800ae6c:	460b      	mov	r3, r1
 800ae6e:	4640      	mov	r0, r8
 800ae70:	4649      	mov	r1, r9
 800ae72:	f7f5 fe43 	bl	8000afc <__aeabi_dcmplt>
 800ae76:	2800      	cmp	r0, #0
 800ae78:	f43f af2f 	beq.w	800acda <_dtoa_r+0x47a>
 800ae7c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ae7e:	1e6b      	subs	r3, r5, #1
 800ae80:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae82:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ae86:	2b30      	cmp	r3, #48	; 0x30
 800ae88:	d0f8      	beq.n	800ae7c <_dtoa_r+0x61c>
 800ae8a:	46bb      	mov	fp, r7
 800ae8c:	e04a      	b.n	800af24 <_dtoa_r+0x6c4>
 800ae8e:	4b06      	ldr	r3, [pc, #24]	; (800aea8 <_dtoa_r+0x648>)
 800ae90:	f7f5 fbc2 	bl	8000618 <__aeabi_dmul>
 800ae94:	4680      	mov	r8, r0
 800ae96:	4689      	mov	r9, r1
 800ae98:	e7bd      	b.n	800ae16 <_dtoa_r+0x5b6>
 800ae9a:	bf00      	nop
 800ae9c:	0800eec8 	.word	0x0800eec8
 800aea0:	0800eea0 	.word	0x0800eea0
 800aea4:	3ff00000 	.word	0x3ff00000
 800aea8:	40240000 	.word	0x40240000
 800aeac:	401c0000 	.word	0x401c0000
 800aeb0:	40140000 	.word	0x40140000
 800aeb4:	3fe00000 	.word	0x3fe00000
 800aeb8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800aebc:	9d00      	ldr	r5, [sp, #0]
 800aebe:	4642      	mov	r2, r8
 800aec0:	464b      	mov	r3, r9
 800aec2:	4630      	mov	r0, r6
 800aec4:	4639      	mov	r1, r7
 800aec6:	f7f5 fcd1 	bl	800086c <__aeabi_ddiv>
 800aeca:	f7f5 fe55 	bl	8000b78 <__aeabi_d2iz>
 800aece:	9001      	str	r0, [sp, #4]
 800aed0:	f7f5 fb38 	bl	8000544 <__aeabi_i2d>
 800aed4:	4642      	mov	r2, r8
 800aed6:	464b      	mov	r3, r9
 800aed8:	f7f5 fb9e 	bl	8000618 <__aeabi_dmul>
 800aedc:	4602      	mov	r2, r0
 800aede:	460b      	mov	r3, r1
 800aee0:	4630      	mov	r0, r6
 800aee2:	4639      	mov	r1, r7
 800aee4:	f7f5 f9e0 	bl	80002a8 <__aeabi_dsub>
 800aee8:	9e01      	ldr	r6, [sp, #4]
 800aeea:	9f04      	ldr	r7, [sp, #16]
 800aeec:	3630      	adds	r6, #48	; 0x30
 800aeee:	f805 6b01 	strb.w	r6, [r5], #1
 800aef2:	9e00      	ldr	r6, [sp, #0]
 800aef4:	1bae      	subs	r6, r5, r6
 800aef6:	42b7      	cmp	r7, r6
 800aef8:	4602      	mov	r2, r0
 800aefa:	460b      	mov	r3, r1
 800aefc:	d134      	bne.n	800af68 <_dtoa_r+0x708>
 800aefe:	f7f5 f9d5 	bl	80002ac <__adddf3>
 800af02:	4642      	mov	r2, r8
 800af04:	464b      	mov	r3, r9
 800af06:	4606      	mov	r6, r0
 800af08:	460f      	mov	r7, r1
 800af0a:	f7f5 fe15 	bl	8000b38 <__aeabi_dcmpgt>
 800af0e:	b9c8      	cbnz	r0, 800af44 <_dtoa_r+0x6e4>
 800af10:	4642      	mov	r2, r8
 800af12:	464b      	mov	r3, r9
 800af14:	4630      	mov	r0, r6
 800af16:	4639      	mov	r1, r7
 800af18:	f7f5 fde6 	bl	8000ae8 <__aeabi_dcmpeq>
 800af1c:	b110      	cbz	r0, 800af24 <_dtoa_r+0x6c4>
 800af1e:	9b01      	ldr	r3, [sp, #4]
 800af20:	07db      	lsls	r3, r3, #31
 800af22:	d40f      	bmi.n	800af44 <_dtoa_r+0x6e4>
 800af24:	4651      	mov	r1, sl
 800af26:	4620      	mov	r0, r4
 800af28:	f000 fbcc 	bl	800b6c4 <_Bfree>
 800af2c:	2300      	movs	r3, #0
 800af2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af30:	702b      	strb	r3, [r5, #0]
 800af32:	f10b 0301 	add.w	r3, fp, #1
 800af36:	6013      	str	r3, [r2, #0]
 800af38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	f43f ace2 	beq.w	800a904 <_dtoa_r+0xa4>
 800af40:	601d      	str	r5, [r3, #0]
 800af42:	e4df      	b.n	800a904 <_dtoa_r+0xa4>
 800af44:	465f      	mov	r7, fp
 800af46:	462b      	mov	r3, r5
 800af48:	461d      	mov	r5, r3
 800af4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af4e:	2a39      	cmp	r2, #57	; 0x39
 800af50:	d106      	bne.n	800af60 <_dtoa_r+0x700>
 800af52:	9a00      	ldr	r2, [sp, #0]
 800af54:	429a      	cmp	r2, r3
 800af56:	d1f7      	bne.n	800af48 <_dtoa_r+0x6e8>
 800af58:	9900      	ldr	r1, [sp, #0]
 800af5a:	2230      	movs	r2, #48	; 0x30
 800af5c:	3701      	adds	r7, #1
 800af5e:	700a      	strb	r2, [r1, #0]
 800af60:	781a      	ldrb	r2, [r3, #0]
 800af62:	3201      	adds	r2, #1
 800af64:	701a      	strb	r2, [r3, #0]
 800af66:	e790      	b.n	800ae8a <_dtoa_r+0x62a>
 800af68:	4ba3      	ldr	r3, [pc, #652]	; (800b1f8 <_dtoa_r+0x998>)
 800af6a:	2200      	movs	r2, #0
 800af6c:	f7f5 fb54 	bl	8000618 <__aeabi_dmul>
 800af70:	2200      	movs	r2, #0
 800af72:	2300      	movs	r3, #0
 800af74:	4606      	mov	r6, r0
 800af76:	460f      	mov	r7, r1
 800af78:	f7f5 fdb6 	bl	8000ae8 <__aeabi_dcmpeq>
 800af7c:	2800      	cmp	r0, #0
 800af7e:	d09e      	beq.n	800aebe <_dtoa_r+0x65e>
 800af80:	e7d0      	b.n	800af24 <_dtoa_r+0x6c4>
 800af82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af84:	2a00      	cmp	r2, #0
 800af86:	f000 80ca 	beq.w	800b11e <_dtoa_r+0x8be>
 800af8a:	9a07      	ldr	r2, [sp, #28]
 800af8c:	2a01      	cmp	r2, #1
 800af8e:	f300 80ad 	bgt.w	800b0ec <_dtoa_r+0x88c>
 800af92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af94:	2a00      	cmp	r2, #0
 800af96:	f000 80a5 	beq.w	800b0e4 <_dtoa_r+0x884>
 800af9a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800af9e:	9e08      	ldr	r6, [sp, #32]
 800afa0:	9d05      	ldr	r5, [sp, #20]
 800afa2:	9a05      	ldr	r2, [sp, #20]
 800afa4:	441a      	add	r2, r3
 800afa6:	9205      	str	r2, [sp, #20]
 800afa8:	9a06      	ldr	r2, [sp, #24]
 800afaa:	2101      	movs	r1, #1
 800afac:	441a      	add	r2, r3
 800afae:	4620      	mov	r0, r4
 800afb0:	9206      	str	r2, [sp, #24]
 800afb2:	f000 fc87 	bl	800b8c4 <__i2b>
 800afb6:	4607      	mov	r7, r0
 800afb8:	b165      	cbz	r5, 800afd4 <_dtoa_r+0x774>
 800afba:	9b06      	ldr	r3, [sp, #24]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	dd09      	ble.n	800afd4 <_dtoa_r+0x774>
 800afc0:	42ab      	cmp	r3, r5
 800afc2:	9a05      	ldr	r2, [sp, #20]
 800afc4:	bfa8      	it	ge
 800afc6:	462b      	movge	r3, r5
 800afc8:	1ad2      	subs	r2, r2, r3
 800afca:	9205      	str	r2, [sp, #20]
 800afcc:	9a06      	ldr	r2, [sp, #24]
 800afce:	1aed      	subs	r5, r5, r3
 800afd0:	1ad3      	subs	r3, r2, r3
 800afd2:	9306      	str	r3, [sp, #24]
 800afd4:	9b08      	ldr	r3, [sp, #32]
 800afd6:	b1f3      	cbz	r3, 800b016 <_dtoa_r+0x7b6>
 800afd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afda:	2b00      	cmp	r3, #0
 800afdc:	f000 80a3 	beq.w	800b126 <_dtoa_r+0x8c6>
 800afe0:	2e00      	cmp	r6, #0
 800afe2:	dd10      	ble.n	800b006 <_dtoa_r+0x7a6>
 800afe4:	4639      	mov	r1, r7
 800afe6:	4632      	mov	r2, r6
 800afe8:	4620      	mov	r0, r4
 800afea:	f000 fd2b 	bl	800ba44 <__pow5mult>
 800afee:	4652      	mov	r2, sl
 800aff0:	4601      	mov	r1, r0
 800aff2:	4607      	mov	r7, r0
 800aff4:	4620      	mov	r0, r4
 800aff6:	f000 fc7b 	bl	800b8f0 <__multiply>
 800affa:	4651      	mov	r1, sl
 800affc:	4680      	mov	r8, r0
 800affe:	4620      	mov	r0, r4
 800b000:	f000 fb60 	bl	800b6c4 <_Bfree>
 800b004:	46c2      	mov	sl, r8
 800b006:	9b08      	ldr	r3, [sp, #32]
 800b008:	1b9a      	subs	r2, r3, r6
 800b00a:	d004      	beq.n	800b016 <_dtoa_r+0x7b6>
 800b00c:	4651      	mov	r1, sl
 800b00e:	4620      	mov	r0, r4
 800b010:	f000 fd18 	bl	800ba44 <__pow5mult>
 800b014:	4682      	mov	sl, r0
 800b016:	2101      	movs	r1, #1
 800b018:	4620      	mov	r0, r4
 800b01a:	f000 fc53 	bl	800b8c4 <__i2b>
 800b01e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b020:	2b00      	cmp	r3, #0
 800b022:	4606      	mov	r6, r0
 800b024:	f340 8081 	ble.w	800b12a <_dtoa_r+0x8ca>
 800b028:	461a      	mov	r2, r3
 800b02a:	4601      	mov	r1, r0
 800b02c:	4620      	mov	r0, r4
 800b02e:	f000 fd09 	bl	800ba44 <__pow5mult>
 800b032:	9b07      	ldr	r3, [sp, #28]
 800b034:	2b01      	cmp	r3, #1
 800b036:	4606      	mov	r6, r0
 800b038:	dd7a      	ble.n	800b130 <_dtoa_r+0x8d0>
 800b03a:	f04f 0800 	mov.w	r8, #0
 800b03e:	6933      	ldr	r3, [r6, #16]
 800b040:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b044:	6918      	ldr	r0, [r3, #16]
 800b046:	f000 fbef 	bl	800b828 <__hi0bits>
 800b04a:	f1c0 0020 	rsb	r0, r0, #32
 800b04e:	9b06      	ldr	r3, [sp, #24]
 800b050:	4418      	add	r0, r3
 800b052:	f010 001f 	ands.w	r0, r0, #31
 800b056:	f000 8094 	beq.w	800b182 <_dtoa_r+0x922>
 800b05a:	f1c0 0320 	rsb	r3, r0, #32
 800b05e:	2b04      	cmp	r3, #4
 800b060:	f340 8085 	ble.w	800b16e <_dtoa_r+0x90e>
 800b064:	9b05      	ldr	r3, [sp, #20]
 800b066:	f1c0 001c 	rsb	r0, r0, #28
 800b06a:	4403      	add	r3, r0
 800b06c:	9305      	str	r3, [sp, #20]
 800b06e:	9b06      	ldr	r3, [sp, #24]
 800b070:	4403      	add	r3, r0
 800b072:	4405      	add	r5, r0
 800b074:	9306      	str	r3, [sp, #24]
 800b076:	9b05      	ldr	r3, [sp, #20]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	dd05      	ble.n	800b088 <_dtoa_r+0x828>
 800b07c:	4651      	mov	r1, sl
 800b07e:	461a      	mov	r2, r3
 800b080:	4620      	mov	r0, r4
 800b082:	f000 fd39 	bl	800baf8 <__lshift>
 800b086:	4682      	mov	sl, r0
 800b088:	9b06      	ldr	r3, [sp, #24]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	dd05      	ble.n	800b09a <_dtoa_r+0x83a>
 800b08e:	4631      	mov	r1, r6
 800b090:	461a      	mov	r2, r3
 800b092:	4620      	mov	r0, r4
 800b094:	f000 fd30 	bl	800baf8 <__lshift>
 800b098:	4606      	mov	r6, r0
 800b09a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d072      	beq.n	800b186 <_dtoa_r+0x926>
 800b0a0:	4631      	mov	r1, r6
 800b0a2:	4650      	mov	r0, sl
 800b0a4:	f000 fd94 	bl	800bbd0 <__mcmp>
 800b0a8:	2800      	cmp	r0, #0
 800b0aa:	da6c      	bge.n	800b186 <_dtoa_r+0x926>
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	4651      	mov	r1, sl
 800b0b0:	220a      	movs	r2, #10
 800b0b2:	4620      	mov	r0, r4
 800b0b4:	f000 fb28 	bl	800b708 <__multadd>
 800b0b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b0be:	4682      	mov	sl, r0
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	f000 81b0 	beq.w	800b426 <_dtoa_r+0xbc6>
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	4639      	mov	r1, r7
 800b0ca:	220a      	movs	r2, #10
 800b0cc:	4620      	mov	r0, r4
 800b0ce:	f000 fb1b 	bl	800b708 <__multadd>
 800b0d2:	9b01      	ldr	r3, [sp, #4]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	4607      	mov	r7, r0
 800b0d8:	f300 8096 	bgt.w	800b208 <_dtoa_r+0x9a8>
 800b0dc:	9b07      	ldr	r3, [sp, #28]
 800b0de:	2b02      	cmp	r3, #2
 800b0e0:	dc59      	bgt.n	800b196 <_dtoa_r+0x936>
 800b0e2:	e091      	b.n	800b208 <_dtoa_r+0x9a8>
 800b0e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b0e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b0ea:	e758      	b.n	800af9e <_dtoa_r+0x73e>
 800b0ec:	9b04      	ldr	r3, [sp, #16]
 800b0ee:	1e5e      	subs	r6, r3, #1
 800b0f0:	9b08      	ldr	r3, [sp, #32]
 800b0f2:	42b3      	cmp	r3, r6
 800b0f4:	bfbf      	itttt	lt
 800b0f6:	9b08      	ldrlt	r3, [sp, #32]
 800b0f8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b0fa:	9608      	strlt	r6, [sp, #32]
 800b0fc:	1af3      	sublt	r3, r6, r3
 800b0fe:	bfb4      	ite	lt
 800b100:	18d2      	addlt	r2, r2, r3
 800b102:	1b9e      	subge	r6, r3, r6
 800b104:	9b04      	ldr	r3, [sp, #16]
 800b106:	bfbc      	itt	lt
 800b108:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b10a:	2600      	movlt	r6, #0
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	bfb7      	itett	lt
 800b110:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b114:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b118:	1a9d      	sublt	r5, r3, r2
 800b11a:	2300      	movlt	r3, #0
 800b11c:	e741      	b.n	800afa2 <_dtoa_r+0x742>
 800b11e:	9e08      	ldr	r6, [sp, #32]
 800b120:	9d05      	ldr	r5, [sp, #20]
 800b122:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b124:	e748      	b.n	800afb8 <_dtoa_r+0x758>
 800b126:	9a08      	ldr	r2, [sp, #32]
 800b128:	e770      	b.n	800b00c <_dtoa_r+0x7ac>
 800b12a:	9b07      	ldr	r3, [sp, #28]
 800b12c:	2b01      	cmp	r3, #1
 800b12e:	dc19      	bgt.n	800b164 <_dtoa_r+0x904>
 800b130:	9b02      	ldr	r3, [sp, #8]
 800b132:	b9bb      	cbnz	r3, 800b164 <_dtoa_r+0x904>
 800b134:	9b03      	ldr	r3, [sp, #12]
 800b136:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b13a:	b99b      	cbnz	r3, 800b164 <_dtoa_r+0x904>
 800b13c:	9b03      	ldr	r3, [sp, #12]
 800b13e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b142:	0d1b      	lsrs	r3, r3, #20
 800b144:	051b      	lsls	r3, r3, #20
 800b146:	b183      	cbz	r3, 800b16a <_dtoa_r+0x90a>
 800b148:	9b05      	ldr	r3, [sp, #20]
 800b14a:	3301      	adds	r3, #1
 800b14c:	9305      	str	r3, [sp, #20]
 800b14e:	9b06      	ldr	r3, [sp, #24]
 800b150:	3301      	adds	r3, #1
 800b152:	9306      	str	r3, [sp, #24]
 800b154:	f04f 0801 	mov.w	r8, #1
 800b158:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	f47f af6f 	bne.w	800b03e <_dtoa_r+0x7de>
 800b160:	2001      	movs	r0, #1
 800b162:	e774      	b.n	800b04e <_dtoa_r+0x7ee>
 800b164:	f04f 0800 	mov.w	r8, #0
 800b168:	e7f6      	b.n	800b158 <_dtoa_r+0x8f8>
 800b16a:	4698      	mov	r8, r3
 800b16c:	e7f4      	b.n	800b158 <_dtoa_r+0x8f8>
 800b16e:	d082      	beq.n	800b076 <_dtoa_r+0x816>
 800b170:	9a05      	ldr	r2, [sp, #20]
 800b172:	331c      	adds	r3, #28
 800b174:	441a      	add	r2, r3
 800b176:	9205      	str	r2, [sp, #20]
 800b178:	9a06      	ldr	r2, [sp, #24]
 800b17a:	441a      	add	r2, r3
 800b17c:	441d      	add	r5, r3
 800b17e:	9206      	str	r2, [sp, #24]
 800b180:	e779      	b.n	800b076 <_dtoa_r+0x816>
 800b182:	4603      	mov	r3, r0
 800b184:	e7f4      	b.n	800b170 <_dtoa_r+0x910>
 800b186:	9b04      	ldr	r3, [sp, #16]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	dc37      	bgt.n	800b1fc <_dtoa_r+0x99c>
 800b18c:	9b07      	ldr	r3, [sp, #28]
 800b18e:	2b02      	cmp	r3, #2
 800b190:	dd34      	ble.n	800b1fc <_dtoa_r+0x99c>
 800b192:	9b04      	ldr	r3, [sp, #16]
 800b194:	9301      	str	r3, [sp, #4]
 800b196:	9b01      	ldr	r3, [sp, #4]
 800b198:	b963      	cbnz	r3, 800b1b4 <_dtoa_r+0x954>
 800b19a:	4631      	mov	r1, r6
 800b19c:	2205      	movs	r2, #5
 800b19e:	4620      	mov	r0, r4
 800b1a0:	f000 fab2 	bl	800b708 <__multadd>
 800b1a4:	4601      	mov	r1, r0
 800b1a6:	4606      	mov	r6, r0
 800b1a8:	4650      	mov	r0, sl
 800b1aa:	f000 fd11 	bl	800bbd0 <__mcmp>
 800b1ae:	2800      	cmp	r0, #0
 800b1b0:	f73f adbb 	bgt.w	800ad2a <_dtoa_r+0x4ca>
 800b1b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1b6:	9d00      	ldr	r5, [sp, #0]
 800b1b8:	ea6f 0b03 	mvn.w	fp, r3
 800b1bc:	f04f 0800 	mov.w	r8, #0
 800b1c0:	4631      	mov	r1, r6
 800b1c2:	4620      	mov	r0, r4
 800b1c4:	f000 fa7e 	bl	800b6c4 <_Bfree>
 800b1c8:	2f00      	cmp	r7, #0
 800b1ca:	f43f aeab 	beq.w	800af24 <_dtoa_r+0x6c4>
 800b1ce:	f1b8 0f00 	cmp.w	r8, #0
 800b1d2:	d005      	beq.n	800b1e0 <_dtoa_r+0x980>
 800b1d4:	45b8      	cmp	r8, r7
 800b1d6:	d003      	beq.n	800b1e0 <_dtoa_r+0x980>
 800b1d8:	4641      	mov	r1, r8
 800b1da:	4620      	mov	r0, r4
 800b1dc:	f000 fa72 	bl	800b6c4 <_Bfree>
 800b1e0:	4639      	mov	r1, r7
 800b1e2:	4620      	mov	r0, r4
 800b1e4:	f000 fa6e 	bl	800b6c4 <_Bfree>
 800b1e8:	e69c      	b.n	800af24 <_dtoa_r+0x6c4>
 800b1ea:	2600      	movs	r6, #0
 800b1ec:	4637      	mov	r7, r6
 800b1ee:	e7e1      	b.n	800b1b4 <_dtoa_r+0x954>
 800b1f0:	46bb      	mov	fp, r7
 800b1f2:	4637      	mov	r7, r6
 800b1f4:	e599      	b.n	800ad2a <_dtoa_r+0x4ca>
 800b1f6:	bf00      	nop
 800b1f8:	40240000 	.word	0x40240000
 800b1fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	f000 80c8 	beq.w	800b394 <_dtoa_r+0xb34>
 800b204:	9b04      	ldr	r3, [sp, #16]
 800b206:	9301      	str	r3, [sp, #4]
 800b208:	2d00      	cmp	r5, #0
 800b20a:	dd05      	ble.n	800b218 <_dtoa_r+0x9b8>
 800b20c:	4639      	mov	r1, r7
 800b20e:	462a      	mov	r2, r5
 800b210:	4620      	mov	r0, r4
 800b212:	f000 fc71 	bl	800baf8 <__lshift>
 800b216:	4607      	mov	r7, r0
 800b218:	f1b8 0f00 	cmp.w	r8, #0
 800b21c:	d05b      	beq.n	800b2d6 <_dtoa_r+0xa76>
 800b21e:	6879      	ldr	r1, [r7, #4]
 800b220:	4620      	mov	r0, r4
 800b222:	f000 fa0f 	bl	800b644 <_Balloc>
 800b226:	4605      	mov	r5, r0
 800b228:	b928      	cbnz	r0, 800b236 <_dtoa_r+0x9d6>
 800b22a:	4b83      	ldr	r3, [pc, #524]	; (800b438 <_dtoa_r+0xbd8>)
 800b22c:	4602      	mov	r2, r0
 800b22e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b232:	f7ff bb2e 	b.w	800a892 <_dtoa_r+0x32>
 800b236:	693a      	ldr	r2, [r7, #16]
 800b238:	3202      	adds	r2, #2
 800b23a:	0092      	lsls	r2, r2, #2
 800b23c:	f107 010c 	add.w	r1, r7, #12
 800b240:	300c      	adds	r0, #12
 800b242:	f002 f9e3 	bl	800d60c <memcpy>
 800b246:	2201      	movs	r2, #1
 800b248:	4629      	mov	r1, r5
 800b24a:	4620      	mov	r0, r4
 800b24c:	f000 fc54 	bl	800baf8 <__lshift>
 800b250:	9b00      	ldr	r3, [sp, #0]
 800b252:	3301      	adds	r3, #1
 800b254:	9304      	str	r3, [sp, #16]
 800b256:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b25a:	4413      	add	r3, r2
 800b25c:	9308      	str	r3, [sp, #32]
 800b25e:	9b02      	ldr	r3, [sp, #8]
 800b260:	f003 0301 	and.w	r3, r3, #1
 800b264:	46b8      	mov	r8, r7
 800b266:	9306      	str	r3, [sp, #24]
 800b268:	4607      	mov	r7, r0
 800b26a:	9b04      	ldr	r3, [sp, #16]
 800b26c:	4631      	mov	r1, r6
 800b26e:	3b01      	subs	r3, #1
 800b270:	4650      	mov	r0, sl
 800b272:	9301      	str	r3, [sp, #4]
 800b274:	f7ff fa6a 	bl	800a74c <quorem>
 800b278:	4641      	mov	r1, r8
 800b27a:	9002      	str	r0, [sp, #8]
 800b27c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b280:	4650      	mov	r0, sl
 800b282:	f000 fca5 	bl	800bbd0 <__mcmp>
 800b286:	463a      	mov	r2, r7
 800b288:	9005      	str	r0, [sp, #20]
 800b28a:	4631      	mov	r1, r6
 800b28c:	4620      	mov	r0, r4
 800b28e:	f000 fcbb 	bl	800bc08 <__mdiff>
 800b292:	68c2      	ldr	r2, [r0, #12]
 800b294:	4605      	mov	r5, r0
 800b296:	bb02      	cbnz	r2, 800b2da <_dtoa_r+0xa7a>
 800b298:	4601      	mov	r1, r0
 800b29a:	4650      	mov	r0, sl
 800b29c:	f000 fc98 	bl	800bbd0 <__mcmp>
 800b2a0:	4602      	mov	r2, r0
 800b2a2:	4629      	mov	r1, r5
 800b2a4:	4620      	mov	r0, r4
 800b2a6:	9209      	str	r2, [sp, #36]	; 0x24
 800b2a8:	f000 fa0c 	bl	800b6c4 <_Bfree>
 800b2ac:	9b07      	ldr	r3, [sp, #28]
 800b2ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2b0:	9d04      	ldr	r5, [sp, #16]
 800b2b2:	ea43 0102 	orr.w	r1, r3, r2
 800b2b6:	9b06      	ldr	r3, [sp, #24]
 800b2b8:	4319      	orrs	r1, r3
 800b2ba:	d110      	bne.n	800b2de <_dtoa_r+0xa7e>
 800b2bc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b2c0:	d029      	beq.n	800b316 <_dtoa_r+0xab6>
 800b2c2:	9b05      	ldr	r3, [sp, #20]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	dd02      	ble.n	800b2ce <_dtoa_r+0xa6e>
 800b2c8:	9b02      	ldr	r3, [sp, #8]
 800b2ca:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b2ce:	9b01      	ldr	r3, [sp, #4]
 800b2d0:	f883 9000 	strb.w	r9, [r3]
 800b2d4:	e774      	b.n	800b1c0 <_dtoa_r+0x960>
 800b2d6:	4638      	mov	r0, r7
 800b2d8:	e7ba      	b.n	800b250 <_dtoa_r+0x9f0>
 800b2da:	2201      	movs	r2, #1
 800b2dc:	e7e1      	b.n	800b2a2 <_dtoa_r+0xa42>
 800b2de:	9b05      	ldr	r3, [sp, #20]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	db04      	blt.n	800b2ee <_dtoa_r+0xa8e>
 800b2e4:	9907      	ldr	r1, [sp, #28]
 800b2e6:	430b      	orrs	r3, r1
 800b2e8:	9906      	ldr	r1, [sp, #24]
 800b2ea:	430b      	orrs	r3, r1
 800b2ec:	d120      	bne.n	800b330 <_dtoa_r+0xad0>
 800b2ee:	2a00      	cmp	r2, #0
 800b2f0:	dded      	ble.n	800b2ce <_dtoa_r+0xa6e>
 800b2f2:	4651      	mov	r1, sl
 800b2f4:	2201      	movs	r2, #1
 800b2f6:	4620      	mov	r0, r4
 800b2f8:	f000 fbfe 	bl	800baf8 <__lshift>
 800b2fc:	4631      	mov	r1, r6
 800b2fe:	4682      	mov	sl, r0
 800b300:	f000 fc66 	bl	800bbd0 <__mcmp>
 800b304:	2800      	cmp	r0, #0
 800b306:	dc03      	bgt.n	800b310 <_dtoa_r+0xab0>
 800b308:	d1e1      	bne.n	800b2ce <_dtoa_r+0xa6e>
 800b30a:	f019 0f01 	tst.w	r9, #1
 800b30e:	d0de      	beq.n	800b2ce <_dtoa_r+0xa6e>
 800b310:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b314:	d1d8      	bne.n	800b2c8 <_dtoa_r+0xa68>
 800b316:	9a01      	ldr	r2, [sp, #4]
 800b318:	2339      	movs	r3, #57	; 0x39
 800b31a:	7013      	strb	r3, [r2, #0]
 800b31c:	462b      	mov	r3, r5
 800b31e:	461d      	mov	r5, r3
 800b320:	3b01      	subs	r3, #1
 800b322:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b326:	2a39      	cmp	r2, #57	; 0x39
 800b328:	d06c      	beq.n	800b404 <_dtoa_r+0xba4>
 800b32a:	3201      	adds	r2, #1
 800b32c:	701a      	strb	r2, [r3, #0]
 800b32e:	e747      	b.n	800b1c0 <_dtoa_r+0x960>
 800b330:	2a00      	cmp	r2, #0
 800b332:	dd07      	ble.n	800b344 <_dtoa_r+0xae4>
 800b334:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b338:	d0ed      	beq.n	800b316 <_dtoa_r+0xab6>
 800b33a:	9a01      	ldr	r2, [sp, #4]
 800b33c:	f109 0301 	add.w	r3, r9, #1
 800b340:	7013      	strb	r3, [r2, #0]
 800b342:	e73d      	b.n	800b1c0 <_dtoa_r+0x960>
 800b344:	9b04      	ldr	r3, [sp, #16]
 800b346:	9a08      	ldr	r2, [sp, #32]
 800b348:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b34c:	4293      	cmp	r3, r2
 800b34e:	d043      	beq.n	800b3d8 <_dtoa_r+0xb78>
 800b350:	4651      	mov	r1, sl
 800b352:	2300      	movs	r3, #0
 800b354:	220a      	movs	r2, #10
 800b356:	4620      	mov	r0, r4
 800b358:	f000 f9d6 	bl	800b708 <__multadd>
 800b35c:	45b8      	cmp	r8, r7
 800b35e:	4682      	mov	sl, r0
 800b360:	f04f 0300 	mov.w	r3, #0
 800b364:	f04f 020a 	mov.w	r2, #10
 800b368:	4641      	mov	r1, r8
 800b36a:	4620      	mov	r0, r4
 800b36c:	d107      	bne.n	800b37e <_dtoa_r+0xb1e>
 800b36e:	f000 f9cb 	bl	800b708 <__multadd>
 800b372:	4680      	mov	r8, r0
 800b374:	4607      	mov	r7, r0
 800b376:	9b04      	ldr	r3, [sp, #16]
 800b378:	3301      	adds	r3, #1
 800b37a:	9304      	str	r3, [sp, #16]
 800b37c:	e775      	b.n	800b26a <_dtoa_r+0xa0a>
 800b37e:	f000 f9c3 	bl	800b708 <__multadd>
 800b382:	4639      	mov	r1, r7
 800b384:	4680      	mov	r8, r0
 800b386:	2300      	movs	r3, #0
 800b388:	220a      	movs	r2, #10
 800b38a:	4620      	mov	r0, r4
 800b38c:	f000 f9bc 	bl	800b708 <__multadd>
 800b390:	4607      	mov	r7, r0
 800b392:	e7f0      	b.n	800b376 <_dtoa_r+0xb16>
 800b394:	9b04      	ldr	r3, [sp, #16]
 800b396:	9301      	str	r3, [sp, #4]
 800b398:	9d00      	ldr	r5, [sp, #0]
 800b39a:	4631      	mov	r1, r6
 800b39c:	4650      	mov	r0, sl
 800b39e:	f7ff f9d5 	bl	800a74c <quorem>
 800b3a2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b3a6:	9b00      	ldr	r3, [sp, #0]
 800b3a8:	f805 9b01 	strb.w	r9, [r5], #1
 800b3ac:	1aea      	subs	r2, r5, r3
 800b3ae:	9b01      	ldr	r3, [sp, #4]
 800b3b0:	4293      	cmp	r3, r2
 800b3b2:	dd07      	ble.n	800b3c4 <_dtoa_r+0xb64>
 800b3b4:	4651      	mov	r1, sl
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	220a      	movs	r2, #10
 800b3ba:	4620      	mov	r0, r4
 800b3bc:	f000 f9a4 	bl	800b708 <__multadd>
 800b3c0:	4682      	mov	sl, r0
 800b3c2:	e7ea      	b.n	800b39a <_dtoa_r+0xb3a>
 800b3c4:	9b01      	ldr	r3, [sp, #4]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	bfc8      	it	gt
 800b3ca:	461d      	movgt	r5, r3
 800b3cc:	9b00      	ldr	r3, [sp, #0]
 800b3ce:	bfd8      	it	le
 800b3d0:	2501      	movle	r5, #1
 800b3d2:	441d      	add	r5, r3
 800b3d4:	f04f 0800 	mov.w	r8, #0
 800b3d8:	4651      	mov	r1, sl
 800b3da:	2201      	movs	r2, #1
 800b3dc:	4620      	mov	r0, r4
 800b3de:	f000 fb8b 	bl	800baf8 <__lshift>
 800b3e2:	4631      	mov	r1, r6
 800b3e4:	4682      	mov	sl, r0
 800b3e6:	f000 fbf3 	bl	800bbd0 <__mcmp>
 800b3ea:	2800      	cmp	r0, #0
 800b3ec:	dc96      	bgt.n	800b31c <_dtoa_r+0xabc>
 800b3ee:	d102      	bne.n	800b3f6 <_dtoa_r+0xb96>
 800b3f0:	f019 0f01 	tst.w	r9, #1
 800b3f4:	d192      	bne.n	800b31c <_dtoa_r+0xabc>
 800b3f6:	462b      	mov	r3, r5
 800b3f8:	461d      	mov	r5, r3
 800b3fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b3fe:	2a30      	cmp	r2, #48	; 0x30
 800b400:	d0fa      	beq.n	800b3f8 <_dtoa_r+0xb98>
 800b402:	e6dd      	b.n	800b1c0 <_dtoa_r+0x960>
 800b404:	9a00      	ldr	r2, [sp, #0]
 800b406:	429a      	cmp	r2, r3
 800b408:	d189      	bne.n	800b31e <_dtoa_r+0xabe>
 800b40a:	f10b 0b01 	add.w	fp, fp, #1
 800b40e:	2331      	movs	r3, #49	; 0x31
 800b410:	e796      	b.n	800b340 <_dtoa_r+0xae0>
 800b412:	4b0a      	ldr	r3, [pc, #40]	; (800b43c <_dtoa_r+0xbdc>)
 800b414:	f7ff ba99 	b.w	800a94a <_dtoa_r+0xea>
 800b418:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	f47f aa6d 	bne.w	800a8fa <_dtoa_r+0x9a>
 800b420:	4b07      	ldr	r3, [pc, #28]	; (800b440 <_dtoa_r+0xbe0>)
 800b422:	f7ff ba92 	b.w	800a94a <_dtoa_r+0xea>
 800b426:	9b01      	ldr	r3, [sp, #4]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	dcb5      	bgt.n	800b398 <_dtoa_r+0xb38>
 800b42c:	9b07      	ldr	r3, [sp, #28]
 800b42e:	2b02      	cmp	r3, #2
 800b430:	f73f aeb1 	bgt.w	800b196 <_dtoa_r+0x936>
 800b434:	e7b0      	b.n	800b398 <_dtoa_r+0xb38>
 800b436:	bf00      	nop
 800b438:	0800ee31 	.word	0x0800ee31
 800b43c:	0800ed8c 	.word	0x0800ed8c
 800b440:	0800edb5 	.word	0x0800edb5

0800b444 <_free_r>:
 800b444:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b446:	2900      	cmp	r1, #0
 800b448:	d044      	beq.n	800b4d4 <_free_r+0x90>
 800b44a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b44e:	9001      	str	r0, [sp, #4]
 800b450:	2b00      	cmp	r3, #0
 800b452:	f1a1 0404 	sub.w	r4, r1, #4
 800b456:	bfb8      	it	lt
 800b458:	18e4      	addlt	r4, r4, r3
 800b45a:	f000 f8e7 	bl	800b62c <__malloc_lock>
 800b45e:	4a1e      	ldr	r2, [pc, #120]	; (800b4d8 <_free_r+0x94>)
 800b460:	9801      	ldr	r0, [sp, #4]
 800b462:	6813      	ldr	r3, [r2, #0]
 800b464:	b933      	cbnz	r3, 800b474 <_free_r+0x30>
 800b466:	6063      	str	r3, [r4, #4]
 800b468:	6014      	str	r4, [r2, #0]
 800b46a:	b003      	add	sp, #12
 800b46c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b470:	f000 b8e2 	b.w	800b638 <__malloc_unlock>
 800b474:	42a3      	cmp	r3, r4
 800b476:	d908      	bls.n	800b48a <_free_r+0x46>
 800b478:	6825      	ldr	r5, [r4, #0]
 800b47a:	1961      	adds	r1, r4, r5
 800b47c:	428b      	cmp	r3, r1
 800b47e:	bf01      	itttt	eq
 800b480:	6819      	ldreq	r1, [r3, #0]
 800b482:	685b      	ldreq	r3, [r3, #4]
 800b484:	1949      	addeq	r1, r1, r5
 800b486:	6021      	streq	r1, [r4, #0]
 800b488:	e7ed      	b.n	800b466 <_free_r+0x22>
 800b48a:	461a      	mov	r2, r3
 800b48c:	685b      	ldr	r3, [r3, #4]
 800b48e:	b10b      	cbz	r3, 800b494 <_free_r+0x50>
 800b490:	42a3      	cmp	r3, r4
 800b492:	d9fa      	bls.n	800b48a <_free_r+0x46>
 800b494:	6811      	ldr	r1, [r2, #0]
 800b496:	1855      	adds	r5, r2, r1
 800b498:	42a5      	cmp	r5, r4
 800b49a:	d10b      	bne.n	800b4b4 <_free_r+0x70>
 800b49c:	6824      	ldr	r4, [r4, #0]
 800b49e:	4421      	add	r1, r4
 800b4a0:	1854      	adds	r4, r2, r1
 800b4a2:	42a3      	cmp	r3, r4
 800b4a4:	6011      	str	r1, [r2, #0]
 800b4a6:	d1e0      	bne.n	800b46a <_free_r+0x26>
 800b4a8:	681c      	ldr	r4, [r3, #0]
 800b4aa:	685b      	ldr	r3, [r3, #4]
 800b4ac:	6053      	str	r3, [r2, #4]
 800b4ae:	440c      	add	r4, r1
 800b4b0:	6014      	str	r4, [r2, #0]
 800b4b2:	e7da      	b.n	800b46a <_free_r+0x26>
 800b4b4:	d902      	bls.n	800b4bc <_free_r+0x78>
 800b4b6:	230c      	movs	r3, #12
 800b4b8:	6003      	str	r3, [r0, #0]
 800b4ba:	e7d6      	b.n	800b46a <_free_r+0x26>
 800b4bc:	6825      	ldr	r5, [r4, #0]
 800b4be:	1961      	adds	r1, r4, r5
 800b4c0:	428b      	cmp	r3, r1
 800b4c2:	bf04      	itt	eq
 800b4c4:	6819      	ldreq	r1, [r3, #0]
 800b4c6:	685b      	ldreq	r3, [r3, #4]
 800b4c8:	6063      	str	r3, [r4, #4]
 800b4ca:	bf04      	itt	eq
 800b4cc:	1949      	addeq	r1, r1, r5
 800b4ce:	6021      	streq	r1, [r4, #0]
 800b4d0:	6054      	str	r4, [r2, #4]
 800b4d2:	e7ca      	b.n	800b46a <_free_r+0x26>
 800b4d4:	b003      	add	sp, #12
 800b4d6:	bd30      	pop	{r4, r5, pc}
 800b4d8:	20001074 	.word	0x20001074

0800b4dc <malloc>:
 800b4dc:	4b02      	ldr	r3, [pc, #8]	; (800b4e8 <malloc+0xc>)
 800b4de:	4601      	mov	r1, r0
 800b4e0:	6818      	ldr	r0, [r3, #0]
 800b4e2:	f000 b823 	b.w	800b52c <_malloc_r>
 800b4e6:	bf00      	nop
 800b4e8:	20000074 	.word	0x20000074

0800b4ec <sbrk_aligned>:
 800b4ec:	b570      	push	{r4, r5, r6, lr}
 800b4ee:	4e0e      	ldr	r6, [pc, #56]	; (800b528 <sbrk_aligned+0x3c>)
 800b4f0:	460c      	mov	r4, r1
 800b4f2:	6831      	ldr	r1, [r6, #0]
 800b4f4:	4605      	mov	r5, r0
 800b4f6:	b911      	cbnz	r1, 800b4fe <sbrk_aligned+0x12>
 800b4f8:	f002 f878 	bl	800d5ec <_sbrk_r>
 800b4fc:	6030      	str	r0, [r6, #0]
 800b4fe:	4621      	mov	r1, r4
 800b500:	4628      	mov	r0, r5
 800b502:	f002 f873 	bl	800d5ec <_sbrk_r>
 800b506:	1c43      	adds	r3, r0, #1
 800b508:	d00a      	beq.n	800b520 <sbrk_aligned+0x34>
 800b50a:	1cc4      	adds	r4, r0, #3
 800b50c:	f024 0403 	bic.w	r4, r4, #3
 800b510:	42a0      	cmp	r0, r4
 800b512:	d007      	beq.n	800b524 <sbrk_aligned+0x38>
 800b514:	1a21      	subs	r1, r4, r0
 800b516:	4628      	mov	r0, r5
 800b518:	f002 f868 	bl	800d5ec <_sbrk_r>
 800b51c:	3001      	adds	r0, #1
 800b51e:	d101      	bne.n	800b524 <sbrk_aligned+0x38>
 800b520:	f04f 34ff 	mov.w	r4, #4294967295
 800b524:	4620      	mov	r0, r4
 800b526:	bd70      	pop	{r4, r5, r6, pc}
 800b528:	20001078 	.word	0x20001078

0800b52c <_malloc_r>:
 800b52c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b530:	1ccd      	adds	r5, r1, #3
 800b532:	f025 0503 	bic.w	r5, r5, #3
 800b536:	3508      	adds	r5, #8
 800b538:	2d0c      	cmp	r5, #12
 800b53a:	bf38      	it	cc
 800b53c:	250c      	movcc	r5, #12
 800b53e:	2d00      	cmp	r5, #0
 800b540:	4607      	mov	r7, r0
 800b542:	db01      	blt.n	800b548 <_malloc_r+0x1c>
 800b544:	42a9      	cmp	r1, r5
 800b546:	d905      	bls.n	800b554 <_malloc_r+0x28>
 800b548:	230c      	movs	r3, #12
 800b54a:	603b      	str	r3, [r7, #0]
 800b54c:	2600      	movs	r6, #0
 800b54e:	4630      	mov	r0, r6
 800b550:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b554:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b628 <_malloc_r+0xfc>
 800b558:	f000 f868 	bl	800b62c <__malloc_lock>
 800b55c:	f8d8 3000 	ldr.w	r3, [r8]
 800b560:	461c      	mov	r4, r3
 800b562:	bb5c      	cbnz	r4, 800b5bc <_malloc_r+0x90>
 800b564:	4629      	mov	r1, r5
 800b566:	4638      	mov	r0, r7
 800b568:	f7ff ffc0 	bl	800b4ec <sbrk_aligned>
 800b56c:	1c43      	adds	r3, r0, #1
 800b56e:	4604      	mov	r4, r0
 800b570:	d155      	bne.n	800b61e <_malloc_r+0xf2>
 800b572:	f8d8 4000 	ldr.w	r4, [r8]
 800b576:	4626      	mov	r6, r4
 800b578:	2e00      	cmp	r6, #0
 800b57a:	d145      	bne.n	800b608 <_malloc_r+0xdc>
 800b57c:	2c00      	cmp	r4, #0
 800b57e:	d048      	beq.n	800b612 <_malloc_r+0xe6>
 800b580:	6823      	ldr	r3, [r4, #0]
 800b582:	4631      	mov	r1, r6
 800b584:	4638      	mov	r0, r7
 800b586:	eb04 0903 	add.w	r9, r4, r3
 800b58a:	f002 f82f 	bl	800d5ec <_sbrk_r>
 800b58e:	4581      	cmp	r9, r0
 800b590:	d13f      	bne.n	800b612 <_malloc_r+0xe6>
 800b592:	6821      	ldr	r1, [r4, #0]
 800b594:	1a6d      	subs	r5, r5, r1
 800b596:	4629      	mov	r1, r5
 800b598:	4638      	mov	r0, r7
 800b59a:	f7ff ffa7 	bl	800b4ec <sbrk_aligned>
 800b59e:	3001      	adds	r0, #1
 800b5a0:	d037      	beq.n	800b612 <_malloc_r+0xe6>
 800b5a2:	6823      	ldr	r3, [r4, #0]
 800b5a4:	442b      	add	r3, r5
 800b5a6:	6023      	str	r3, [r4, #0]
 800b5a8:	f8d8 3000 	ldr.w	r3, [r8]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d038      	beq.n	800b622 <_malloc_r+0xf6>
 800b5b0:	685a      	ldr	r2, [r3, #4]
 800b5b2:	42a2      	cmp	r2, r4
 800b5b4:	d12b      	bne.n	800b60e <_malloc_r+0xe2>
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	605a      	str	r2, [r3, #4]
 800b5ba:	e00f      	b.n	800b5dc <_malloc_r+0xb0>
 800b5bc:	6822      	ldr	r2, [r4, #0]
 800b5be:	1b52      	subs	r2, r2, r5
 800b5c0:	d41f      	bmi.n	800b602 <_malloc_r+0xd6>
 800b5c2:	2a0b      	cmp	r2, #11
 800b5c4:	d917      	bls.n	800b5f6 <_malloc_r+0xca>
 800b5c6:	1961      	adds	r1, r4, r5
 800b5c8:	42a3      	cmp	r3, r4
 800b5ca:	6025      	str	r5, [r4, #0]
 800b5cc:	bf18      	it	ne
 800b5ce:	6059      	strne	r1, [r3, #4]
 800b5d0:	6863      	ldr	r3, [r4, #4]
 800b5d2:	bf08      	it	eq
 800b5d4:	f8c8 1000 	streq.w	r1, [r8]
 800b5d8:	5162      	str	r2, [r4, r5]
 800b5da:	604b      	str	r3, [r1, #4]
 800b5dc:	4638      	mov	r0, r7
 800b5de:	f104 060b 	add.w	r6, r4, #11
 800b5e2:	f000 f829 	bl	800b638 <__malloc_unlock>
 800b5e6:	f026 0607 	bic.w	r6, r6, #7
 800b5ea:	1d23      	adds	r3, r4, #4
 800b5ec:	1af2      	subs	r2, r6, r3
 800b5ee:	d0ae      	beq.n	800b54e <_malloc_r+0x22>
 800b5f0:	1b9b      	subs	r3, r3, r6
 800b5f2:	50a3      	str	r3, [r4, r2]
 800b5f4:	e7ab      	b.n	800b54e <_malloc_r+0x22>
 800b5f6:	42a3      	cmp	r3, r4
 800b5f8:	6862      	ldr	r2, [r4, #4]
 800b5fa:	d1dd      	bne.n	800b5b8 <_malloc_r+0x8c>
 800b5fc:	f8c8 2000 	str.w	r2, [r8]
 800b600:	e7ec      	b.n	800b5dc <_malloc_r+0xb0>
 800b602:	4623      	mov	r3, r4
 800b604:	6864      	ldr	r4, [r4, #4]
 800b606:	e7ac      	b.n	800b562 <_malloc_r+0x36>
 800b608:	4634      	mov	r4, r6
 800b60a:	6876      	ldr	r6, [r6, #4]
 800b60c:	e7b4      	b.n	800b578 <_malloc_r+0x4c>
 800b60e:	4613      	mov	r3, r2
 800b610:	e7cc      	b.n	800b5ac <_malloc_r+0x80>
 800b612:	230c      	movs	r3, #12
 800b614:	603b      	str	r3, [r7, #0]
 800b616:	4638      	mov	r0, r7
 800b618:	f000 f80e 	bl	800b638 <__malloc_unlock>
 800b61c:	e797      	b.n	800b54e <_malloc_r+0x22>
 800b61e:	6025      	str	r5, [r4, #0]
 800b620:	e7dc      	b.n	800b5dc <_malloc_r+0xb0>
 800b622:	605b      	str	r3, [r3, #4]
 800b624:	deff      	udf	#255	; 0xff
 800b626:	bf00      	nop
 800b628:	20001074 	.word	0x20001074

0800b62c <__malloc_lock>:
 800b62c:	4801      	ldr	r0, [pc, #4]	; (800b634 <__malloc_lock+0x8>)
 800b62e:	f7ff b884 	b.w	800a73a <__retarget_lock_acquire_recursive>
 800b632:	bf00      	nop
 800b634:	20001070 	.word	0x20001070

0800b638 <__malloc_unlock>:
 800b638:	4801      	ldr	r0, [pc, #4]	; (800b640 <__malloc_unlock+0x8>)
 800b63a:	f7ff b87f 	b.w	800a73c <__retarget_lock_release_recursive>
 800b63e:	bf00      	nop
 800b640:	20001070 	.word	0x20001070

0800b644 <_Balloc>:
 800b644:	b570      	push	{r4, r5, r6, lr}
 800b646:	69c6      	ldr	r6, [r0, #28]
 800b648:	4604      	mov	r4, r0
 800b64a:	460d      	mov	r5, r1
 800b64c:	b976      	cbnz	r6, 800b66c <_Balloc+0x28>
 800b64e:	2010      	movs	r0, #16
 800b650:	f7ff ff44 	bl	800b4dc <malloc>
 800b654:	4602      	mov	r2, r0
 800b656:	61e0      	str	r0, [r4, #28]
 800b658:	b920      	cbnz	r0, 800b664 <_Balloc+0x20>
 800b65a:	4b18      	ldr	r3, [pc, #96]	; (800b6bc <_Balloc+0x78>)
 800b65c:	4818      	ldr	r0, [pc, #96]	; (800b6c0 <_Balloc+0x7c>)
 800b65e:	216b      	movs	r1, #107	; 0x6b
 800b660:	f001 ffea 	bl	800d638 <__assert_func>
 800b664:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b668:	6006      	str	r6, [r0, #0]
 800b66a:	60c6      	str	r6, [r0, #12]
 800b66c:	69e6      	ldr	r6, [r4, #28]
 800b66e:	68f3      	ldr	r3, [r6, #12]
 800b670:	b183      	cbz	r3, 800b694 <_Balloc+0x50>
 800b672:	69e3      	ldr	r3, [r4, #28]
 800b674:	68db      	ldr	r3, [r3, #12]
 800b676:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b67a:	b9b8      	cbnz	r0, 800b6ac <_Balloc+0x68>
 800b67c:	2101      	movs	r1, #1
 800b67e:	fa01 f605 	lsl.w	r6, r1, r5
 800b682:	1d72      	adds	r2, r6, #5
 800b684:	0092      	lsls	r2, r2, #2
 800b686:	4620      	mov	r0, r4
 800b688:	f001 fff4 	bl	800d674 <_calloc_r>
 800b68c:	b160      	cbz	r0, 800b6a8 <_Balloc+0x64>
 800b68e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b692:	e00e      	b.n	800b6b2 <_Balloc+0x6e>
 800b694:	2221      	movs	r2, #33	; 0x21
 800b696:	2104      	movs	r1, #4
 800b698:	4620      	mov	r0, r4
 800b69a:	f001 ffeb 	bl	800d674 <_calloc_r>
 800b69e:	69e3      	ldr	r3, [r4, #28]
 800b6a0:	60f0      	str	r0, [r6, #12]
 800b6a2:	68db      	ldr	r3, [r3, #12]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d1e4      	bne.n	800b672 <_Balloc+0x2e>
 800b6a8:	2000      	movs	r0, #0
 800b6aa:	bd70      	pop	{r4, r5, r6, pc}
 800b6ac:	6802      	ldr	r2, [r0, #0]
 800b6ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b6b8:	e7f7      	b.n	800b6aa <_Balloc+0x66>
 800b6ba:	bf00      	nop
 800b6bc:	0800edc2 	.word	0x0800edc2
 800b6c0:	0800ee42 	.word	0x0800ee42

0800b6c4 <_Bfree>:
 800b6c4:	b570      	push	{r4, r5, r6, lr}
 800b6c6:	69c6      	ldr	r6, [r0, #28]
 800b6c8:	4605      	mov	r5, r0
 800b6ca:	460c      	mov	r4, r1
 800b6cc:	b976      	cbnz	r6, 800b6ec <_Bfree+0x28>
 800b6ce:	2010      	movs	r0, #16
 800b6d0:	f7ff ff04 	bl	800b4dc <malloc>
 800b6d4:	4602      	mov	r2, r0
 800b6d6:	61e8      	str	r0, [r5, #28]
 800b6d8:	b920      	cbnz	r0, 800b6e4 <_Bfree+0x20>
 800b6da:	4b09      	ldr	r3, [pc, #36]	; (800b700 <_Bfree+0x3c>)
 800b6dc:	4809      	ldr	r0, [pc, #36]	; (800b704 <_Bfree+0x40>)
 800b6de:	218f      	movs	r1, #143	; 0x8f
 800b6e0:	f001 ffaa 	bl	800d638 <__assert_func>
 800b6e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b6e8:	6006      	str	r6, [r0, #0]
 800b6ea:	60c6      	str	r6, [r0, #12]
 800b6ec:	b13c      	cbz	r4, 800b6fe <_Bfree+0x3a>
 800b6ee:	69eb      	ldr	r3, [r5, #28]
 800b6f0:	6862      	ldr	r2, [r4, #4]
 800b6f2:	68db      	ldr	r3, [r3, #12]
 800b6f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b6f8:	6021      	str	r1, [r4, #0]
 800b6fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b6fe:	bd70      	pop	{r4, r5, r6, pc}
 800b700:	0800edc2 	.word	0x0800edc2
 800b704:	0800ee42 	.word	0x0800ee42

0800b708 <__multadd>:
 800b708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b70c:	690d      	ldr	r5, [r1, #16]
 800b70e:	4607      	mov	r7, r0
 800b710:	460c      	mov	r4, r1
 800b712:	461e      	mov	r6, r3
 800b714:	f101 0c14 	add.w	ip, r1, #20
 800b718:	2000      	movs	r0, #0
 800b71a:	f8dc 3000 	ldr.w	r3, [ip]
 800b71e:	b299      	uxth	r1, r3
 800b720:	fb02 6101 	mla	r1, r2, r1, r6
 800b724:	0c1e      	lsrs	r6, r3, #16
 800b726:	0c0b      	lsrs	r3, r1, #16
 800b728:	fb02 3306 	mla	r3, r2, r6, r3
 800b72c:	b289      	uxth	r1, r1
 800b72e:	3001      	adds	r0, #1
 800b730:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b734:	4285      	cmp	r5, r0
 800b736:	f84c 1b04 	str.w	r1, [ip], #4
 800b73a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b73e:	dcec      	bgt.n	800b71a <__multadd+0x12>
 800b740:	b30e      	cbz	r6, 800b786 <__multadd+0x7e>
 800b742:	68a3      	ldr	r3, [r4, #8]
 800b744:	42ab      	cmp	r3, r5
 800b746:	dc19      	bgt.n	800b77c <__multadd+0x74>
 800b748:	6861      	ldr	r1, [r4, #4]
 800b74a:	4638      	mov	r0, r7
 800b74c:	3101      	adds	r1, #1
 800b74e:	f7ff ff79 	bl	800b644 <_Balloc>
 800b752:	4680      	mov	r8, r0
 800b754:	b928      	cbnz	r0, 800b762 <__multadd+0x5a>
 800b756:	4602      	mov	r2, r0
 800b758:	4b0c      	ldr	r3, [pc, #48]	; (800b78c <__multadd+0x84>)
 800b75a:	480d      	ldr	r0, [pc, #52]	; (800b790 <__multadd+0x88>)
 800b75c:	21ba      	movs	r1, #186	; 0xba
 800b75e:	f001 ff6b 	bl	800d638 <__assert_func>
 800b762:	6922      	ldr	r2, [r4, #16]
 800b764:	3202      	adds	r2, #2
 800b766:	f104 010c 	add.w	r1, r4, #12
 800b76a:	0092      	lsls	r2, r2, #2
 800b76c:	300c      	adds	r0, #12
 800b76e:	f001 ff4d 	bl	800d60c <memcpy>
 800b772:	4621      	mov	r1, r4
 800b774:	4638      	mov	r0, r7
 800b776:	f7ff ffa5 	bl	800b6c4 <_Bfree>
 800b77a:	4644      	mov	r4, r8
 800b77c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b780:	3501      	adds	r5, #1
 800b782:	615e      	str	r6, [r3, #20]
 800b784:	6125      	str	r5, [r4, #16]
 800b786:	4620      	mov	r0, r4
 800b788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b78c:	0800ee31 	.word	0x0800ee31
 800b790:	0800ee42 	.word	0x0800ee42

0800b794 <__s2b>:
 800b794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b798:	460c      	mov	r4, r1
 800b79a:	4615      	mov	r5, r2
 800b79c:	461f      	mov	r7, r3
 800b79e:	2209      	movs	r2, #9
 800b7a0:	3308      	adds	r3, #8
 800b7a2:	4606      	mov	r6, r0
 800b7a4:	fb93 f3f2 	sdiv	r3, r3, r2
 800b7a8:	2100      	movs	r1, #0
 800b7aa:	2201      	movs	r2, #1
 800b7ac:	429a      	cmp	r2, r3
 800b7ae:	db09      	blt.n	800b7c4 <__s2b+0x30>
 800b7b0:	4630      	mov	r0, r6
 800b7b2:	f7ff ff47 	bl	800b644 <_Balloc>
 800b7b6:	b940      	cbnz	r0, 800b7ca <__s2b+0x36>
 800b7b8:	4602      	mov	r2, r0
 800b7ba:	4b19      	ldr	r3, [pc, #100]	; (800b820 <__s2b+0x8c>)
 800b7bc:	4819      	ldr	r0, [pc, #100]	; (800b824 <__s2b+0x90>)
 800b7be:	21d3      	movs	r1, #211	; 0xd3
 800b7c0:	f001 ff3a 	bl	800d638 <__assert_func>
 800b7c4:	0052      	lsls	r2, r2, #1
 800b7c6:	3101      	adds	r1, #1
 800b7c8:	e7f0      	b.n	800b7ac <__s2b+0x18>
 800b7ca:	9b08      	ldr	r3, [sp, #32]
 800b7cc:	6143      	str	r3, [r0, #20]
 800b7ce:	2d09      	cmp	r5, #9
 800b7d0:	f04f 0301 	mov.w	r3, #1
 800b7d4:	6103      	str	r3, [r0, #16]
 800b7d6:	dd16      	ble.n	800b806 <__s2b+0x72>
 800b7d8:	f104 0909 	add.w	r9, r4, #9
 800b7dc:	46c8      	mov	r8, r9
 800b7de:	442c      	add	r4, r5
 800b7e0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b7e4:	4601      	mov	r1, r0
 800b7e6:	3b30      	subs	r3, #48	; 0x30
 800b7e8:	220a      	movs	r2, #10
 800b7ea:	4630      	mov	r0, r6
 800b7ec:	f7ff ff8c 	bl	800b708 <__multadd>
 800b7f0:	45a0      	cmp	r8, r4
 800b7f2:	d1f5      	bne.n	800b7e0 <__s2b+0x4c>
 800b7f4:	f1a5 0408 	sub.w	r4, r5, #8
 800b7f8:	444c      	add	r4, r9
 800b7fa:	1b2d      	subs	r5, r5, r4
 800b7fc:	1963      	adds	r3, r4, r5
 800b7fe:	42bb      	cmp	r3, r7
 800b800:	db04      	blt.n	800b80c <__s2b+0x78>
 800b802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b806:	340a      	adds	r4, #10
 800b808:	2509      	movs	r5, #9
 800b80a:	e7f6      	b.n	800b7fa <__s2b+0x66>
 800b80c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b810:	4601      	mov	r1, r0
 800b812:	3b30      	subs	r3, #48	; 0x30
 800b814:	220a      	movs	r2, #10
 800b816:	4630      	mov	r0, r6
 800b818:	f7ff ff76 	bl	800b708 <__multadd>
 800b81c:	e7ee      	b.n	800b7fc <__s2b+0x68>
 800b81e:	bf00      	nop
 800b820:	0800ee31 	.word	0x0800ee31
 800b824:	0800ee42 	.word	0x0800ee42

0800b828 <__hi0bits>:
 800b828:	0c03      	lsrs	r3, r0, #16
 800b82a:	041b      	lsls	r3, r3, #16
 800b82c:	b9d3      	cbnz	r3, 800b864 <__hi0bits+0x3c>
 800b82e:	0400      	lsls	r0, r0, #16
 800b830:	2310      	movs	r3, #16
 800b832:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b836:	bf04      	itt	eq
 800b838:	0200      	lsleq	r0, r0, #8
 800b83a:	3308      	addeq	r3, #8
 800b83c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b840:	bf04      	itt	eq
 800b842:	0100      	lsleq	r0, r0, #4
 800b844:	3304      	addeq	r3, #4
 800b846:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b84a:	bf04      	itt	eq
 800b84c:	0080      	lsleq	r0, r0, #2
 800b84e:	3302      	addeq	r3, #2
 800b850:	2800      	cmp	r0, #0
 800b852:	db05      	blt.n	800b860 <__hi0bits+0x38>
 800b854:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b858:	f103 0301 	add.w	r3, r3, #1
 800b85c:	bf08      	it	eq
 800b85e:	2320      	moveq	r3, #32
 800b860:	4618      	mov	r0, r3
 800b862:	4770      	bx	lr
 800b864:	2300      	movs	r3, #0
 800b866:	e7e4      	b.n	800b832 <__hi0bits+0xa>

0800b868 <__lo0bits>:
 800b868:	6803      	ldr	r3, [r0, #0]
 800b86a:	f013 0207 	ands.w	r2, r3, #7
 800b86e:	d00c      	beq.n	800b88a <__lo0bits+0x22>
 800b870:	07d9      	lsls	r1, r3, #31
 800b872:	d422      	bmi.n	800b8ba <__lo0bits+0x52>
 800b874:	079a      	lsls	r2, r3, #30
 800b876:	bf49      	itett	mi
 800b878:	085b      	lsrmi	r3, r3, #1
 800b87a:	089b      	lsrpl	r3, r3, #2
 800b87c:	6003      	strmi	r3, [r0, #0]
 800b87e:	2201      	movmi	r2, #1
 800b880:	bf5c      	itt	pl
 800b882:	6003      	strpl	r3, [r0, #0]
 800b884:	2202      	movpl	r2, #2
 800b886:	4610      	mov	r0, r2
 800b888:	4770      	bx	lr
 800b88a:	b299      	uxth	r1, r3
 800b88c:	b909      	cbnz	r1, 800b892 <__lo0bits+0x2a>
 800b88e:	0c1b      	lsrs	r3, r3, #16
 800b890:	2210      	movs	r2, #16
 800b892:	b2d9      	uxtb	r1, r3
 800b894:	b909      	cbnz	r1, 800b89a <__lo0bits+0x32>
 800b896:	3208      	adds	r2, #8
 800b898:	0a1b      	lsrs	r3, r3, #8
 800b89a:	0719      	lsls	r1, r3, #28
 800b89c:	bf04      	itt	eq
 800b89e:	091b      	lsreq	r3, r3, #4
 800b8a0:	3204      	addeq	r2, #4
 800b8a2:	0799      	lsls	r1, r3, #30
 800b8a4:	bf04      	itt	eq
 800b8a6:	089b      	lsreq	r3, r3, #2
 800b8a8:	3202      	addeq	r2, #2
 800b8aa:	07d9      	lsls	r1, r3, #31
 800b8ac:	d403      	bmi.n	800b8b6 <__lo0bits+0x4e>
 800b8ae:	085b      	lsrs	r3, r3, #1
 800b8b0:	f102 0201 	add.w	r2, r2, #1
 800b8b4:	d003      	beq.n	800b8be <__lo0bits+0x56>
 800b8b6:	6003      	str	r3, [r0, #0]
 800b8b8:	e7e5      	b.n	800b886 <__lo0bits+0x1e>
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	e7e3      	b.n	800b886 <__lo0bits+0x1e>
 800b8be:	2220      	movs	r2, #32
 800b8c0:	e7e1      	b.n	800b886 <__lo0bits+0x1e>
	...

0800b8c4 <__i2b>:
 800b8c4:	b510      	push	{r4, lr}
 800b8c6:	460c      	mov	r4, r1
 800b8c8:	2101      	movs	r1, #1
 800b8ca:	f7ff febb 	bl	800b644 <_Balloc>
 800b8ce:	4602      	mov	r2, r0
 800b8d0:	b928      	cbnz	r0, 800b8de <__i2b+0x1a>
 800b8d2:	4b05      	ldr	r3, [pc, #20]	; (800b8e8 <__i2b+0x24>)
 800b8d4:	4805      	ldr	r0, [pc, #20]	; (800b8ec <__i2b+0x28>)
 800b8d6:	f240 1145 	movw	r1, #325	; 0x145
 800b8da:	f001 fead 	bl	800d638 <__assert_func>
 800b8de:	2301      	movs	r3, #1
 800b8e0:	6144      	str	r4, [r0, #20]
 800b8e2:	6103      	str	r3, [r0, #16]
 800b8e4:	bd10      	pop	{r4, pc}
 800b8e6:	bf00      	nop
 800b8e8:	0800ee31 	.word	0x0800ee31
 800b8ec:	0800ee42 	.word	0x0800ee42

0800b8f0 <__multiply>:
 800b8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8f4:	4691      	mov	r9, r2
 800b8f6:	690a      	ldr	r2, [r1, #16]
 800b8f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b8fc:	429a      	cmp	r2, r3
 800b8fe:	bfb8      	it	lt
 800b900:	460b      	movlt	r3, r1
 800b902:	460c      	mov	r4, r1
 800b904:	bfbc      	itt	lt
 800b906:	464c      	movlt	r4, r9
 800b908:	4699      	movlt	r9, r3
 800b90a:	6927      	ldr	r7, [r4, #16]
 800b90c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b910:	68a3      	ldr	r3, [r4, #8]
 800b912:	6861      	ldr	r1, [r4, #4]
 800b914:	eb07 060a 	add.w	r6, r7, sl
 800b918:	42b3      	cmp	r3, r6
 800b91a:	b085      	sub	sp, #20
 800b91c:	bfb8      	it	lt
 800b91e:	3101      	addlt	r1, #1
 800b920:	f7ff fe90 	bl	800b644 <_Balloc>
 800b924:	b930      	cbnz	r0, 800b934 <__multiply+0x44>
 800b926:	4602      	mov	r2, r0
 800b928:	4b44      	ldr	r3, [pc, #272]	; (800ba3c <__multiply+0x14c>)
 800b92a:	4845      	ldr	r0, [pc, #276]	; (800ba40 <__multiply+0x150>)
 800b92c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b930:	f001 fe82 	bl	800d638 <__assert_func>
 800b934:	f100 0514 	add.w	r5, r0, #20
 800b938:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b93c:	462b      	mov	r3, r5
 800b93e:	2200      	movs	r2, #0
 800b940:	4543      	cmp	r3, r8
 800b942:	d321      	bcc.n	800b988 <__multiply+0x98>
 800b944:	f104 0314 	add.w	r3, r4, #20
 800b948:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b94c:	f109 0314 	add.w	r3, r9, #20
 800b950:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b954:	9202      	str	r2, [sp, #8]
 800b956:	1b3a      	subs	r2, r7, r4
 800b958:	3a15      	subs	r2, #21
 800b95a:	f022 0203 	bic.w	r2, r2, #3
 800b95e:	3204      	adds	r2, #4
 800b960:	f104 0115 	add.w	r1, r4, #21
 800b964:	428f      	cmp	r7, r1
 800b966:	bf38      	it	cc
 800b968:	2204      	movcc	r2, #4
 800b96a:	9201      	str	r2, [sp, #4]
 800b96c:	9a02      	ldr	r2, [sp, #8]
 800b96e:	9303      	str	r3, [sp, #12]
 800b970:	429a      	cmp	r2, r3
 800b972:	d80c      	bhi.n	800b98e <__multiply+0x9e>
 800b974:	2e00      	cmp	r6, #0
 800b976:	dd03      	ble.n	800b980 <__multiply+0x90>
 800b978:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d05b      	beq.n	800ba38 <__multiply+0x148>
 800b980:	6106      	str	r6, [r0, #16]
 800b982:	b005      	add	sp, #20
 800b984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b988:	f843 2b04 	str.w	r2, [r3], #4
 800b98c:	e7d8      	b.n	800b940 <__multiply+0x50>
 800b98e:	f8b3 a000 	ldrh.w	sl, [r3]
 800b992:	f1ba 0f00 	cmp.w	sl, #0
 800b996:	d024      	beq.n	800b9e2 <__multiply+0xf2>
 800b998:	f104 0e14 	add.w	lr, r4, #20
 800b99c:	46a9      	mov	r9, r5
 800b99e:	f04f 0c00 	mov.w	ip, #0
 800b9a2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b9a6:	f8d9 1000 	ldr.w	r1, [r9]
 800b9aa:	fa1f fb82 	uxth.w	fp, r2
 800b9ae:	b289      	uxth	r1, r1
 800b9b0:	fb0a 110b 	mla	r1, sl, fp, r1
 800b9b4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b9b8:	f8d9 2000 	ldr.w	r2, [r9]
 800b9bc:	4461      	add	r1, ip
 800b9be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b9c2:	fb0a c20b 	mla	r2, sl, fp, ip
 800b9c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b9ca:	b289      	uxth	r1, r1
 800b9cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b9d0:	4577      	cmp	r7, lr
 800b9d2:	f849 1b04 	str.w	r1, [r9], #4
 800b9d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b9da:	d8e2      	bhi.n	800b9a2 <__multiply+0xb2>
 800b9dc:	9a01      	ldr	r2, [sp, #4]
 800b9de:	f845 c002 	str.w	ip, [r5, r2]
 800b9e2:	9a03      	ldr	r2, [sp, #12]
 800b9e4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b9e8:	3304      	adds	r3, #4
 800b9ea:	f1b9 0f00 	cmp.w	r9, #0
 800b9ee:	d021      	beq.n	800ba34 <__multiply+0x144>
 800b9f0:	6829      	ldr	r1, [r5, #0]
 800b9f2:	f104 0c14 	add.w	ip, r4, #20
 800b9f6:	46ae      	mov	lr, r5
 800b9f8:	f04f 0a00 	mov.w	sl, #0
 800b9fc:	f8bc b000 	ldrh.w	fp, [ip]
 800ba00:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ba04:	fb09 220b 	mla	r2, r9, fp, r2
 800ba08:	4452      	add	r2, sl
 800ba0a:	b289      	uxth	r1, r1
 800ba0c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ba10:	f84e 1b04 	str.w	r1, [lr], #4
 800ba14:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ba18:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ba1c:	f8be 1000 	ldrh.w	r1, [lr]
 800ba20:	fb09 110a 	mla	r1, r9, sl, r1
 800ba24:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ba28:	4567      	cmp	r7, ip
 800ba2a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ba2e:	d8e5      	bhi.n	800b9fc <__multiply+0x10c>
 800ba30:	9a01      	ldr	r2, [sp, #4]
 800ba32:	50a9      	str	r1, [r5, r2]
 800ba34:	3504      	adds	r5, #4
 800ba36:	e799      	b.n	800b96c <__multiply+0x7c>
 800ba38:	3e01      	subs	r6, #1
 800ba3a:	e79b      	b.n	800b974 <__multiply+0x84>
 800ba3c:	0800ee31 	.word	0x0800ee31
 800ba40:	0800ee42 	.word	0x0800ee42

0800ba44 <__pow5mult>:
 800ba44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba48:	4615      	mov	r5, r2
 800ba4a:	f012 0203 	ands.w	r2, r2, #3
 800ba4e:	4606      	mov	r6, r0
 800ba50:	460f      	mov	r7, r1
 800ba52:	d007      	beq.n	800ba64 <__pow5mult+0x20>
 800ba54:	4c25      	ldr	r4, [pc, #148]	; (800baec <__pow5mult+0xa8>)
 800ba56:	3a01      	subs	r2, #1
 800ba58:	2300      	movs	r3, #0
 800ba5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ba5e:	f7ff fe53 	bl	800b708 <__multadd>
 800ba62:	4607      	mov	r7, r0
 800ba64:	10ad      	asrs	r5, r5, #2
 800ba66:	d03d      	beq.n	800bae4 <__pow5mult+0xa0>
 800ba68:	69f4      	ldr	r4, [r6, #28]
 800ba6a:	b97c      	cbnz	r4, 800ba8c <__pow5mult+0x48>
 800ba6c:	2010      	movs	r0, #16
 800ba6e:	f7ff fd35 	bl	800b4dc <malloc>
 800ba72:	4602      	mov	r2, r0
 800ba74:	61f0      	str	r0, [r6, #28]
 800ba76:	b928      	cbnz	r0, 800ba84 <__pow5mult+0x40>
 800ba78:	4b1d      	ldr	r3, [pc, #116]	; (800baf0 <__pow5mult+0xac>)
 800ba7a:	481e      	ldr	r0, [pc, #120]	; (800baf4 <__pow5mult+0xb0>)
 800ba7c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ba80:	f001 fdda 	bl	800d638 <__assert_func>
 800ba84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ba88:	6004      	str	r4, [r0, #0]
 800ba8a:	60c4      	str	r4, [r0, #12]
 800ba8c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ba90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ba94:	b94c      	cbnz	r4, 800baaa <__pow5mult+0x66>
 800ba96:	f240 2171 	movw	r1, #625	; 0x271
 800ba9a:	4630      	mov	r0, r6
 800ba9c:	f7ff ff12 	bl	800b8c4 <__i2b>
 800baa0:	2300      	movs	r3, #0
 800baa2:	f8c8 0008 	str.w	r0, [r8, #8]
 800baa6:	4604      	mov	r4, r0
 800baa8:	6003      	str	r3, [r0, #0]
 800baaa:	f04f 0900 	mov.w	r9, #0
 800baae:	07eb      	lsls	r3, r5, #31
 800bab0:	d50a      	bpl.n	800bac8 <__pow5mult+0x84>
 800bab2:	4639      	mov	r1, r7
 800bab4:	4622      	mov	r2, r4
 800bab6:	4630      	mov	r0, r6
 800bab8:	f7ff ff1a 	bl	800b8f0 <__multiply>
 800babc:	4639      	mov	r1, r7
 800babe:	4680      	mov	r8, r0
 800bac0:	4630      	mov	r0, r6
 800bac2:	f7ff fdff 	bl	800b6c4 <_Bfree>
 800bac6:	4647      	mov	r7, r8
 800bac8:	106d      	asrs	r5, r5, #1
 800baca:	d00b      	beq.n	800bae4 <__pow5mult+0xa0>
 800bacc:	6820      	ldr	r0, [r4, #0]
 800bace:	b938      	cbnz	r0, 800bae0 <__pow5mult+0x9c>
 800bad0:	4622      	mov	r2, r4
 800bad2:	4621      	mov	r1, r4
 800bad4:	4630      	mov	r0, r6
 800bad6:	f7ff ff0b 	bl	800b8f0 <__multiply>
 800bada:	6020      	str	r0, [r4, #0]
 800badc:	f8c0 9000 	str.w	r9, [r0]
 800bae0:	4604      	mov	r4, r0
 800bae2:	e7e4      	b.n	800baae <__pow5mult+0x6a>
 800bae4:	4638      	mov	r0, r7
 800bae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800baea:	bf00      	nop
 800baec:	0800ef90 	.word	0x0800ef90
 800baf0:	0800edc2 	.word	0x0800edc2
 800baf4:	0800ee42 	.word	0x0800ee42

0800baf8 <__lshift>:
 800baf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bafc:	460c      	mov	r4, r1
 800bafe:	6849      	ldr	r1, [r1, #4]
 800bb00:	6923      	ldr	r3, [r4, #16]
 800bb02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bb06:	68a3      	ldr	r3, [r4, #8]
 800bb08:	4607      	mov	r7, r0
 800bb0a:	4691      	mov	r9, r2
 800bb0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bb10:	f108 0601 	add.w	r6, r8, #1
 800bb14:	42b3      	cmp	r3, r6
 800bb16:	db0b      	blt.n	800bb30 <__lshift+0x38>
 800bb18:	4638      	mov	r0, r7
 800bb1a:	f7ff fd93 	bl	800b644 <_Balloc>
 800bb1e:	4605      	mov	r5, r0
 800bb20:	b948      	cbnz	r0, 800bb36 <__lshift+0x3e>
 800bb22:	4602      	mov	r2, r0
 800bb24:	4b28      	ldr	r3, [pc, #160]	; (800bbc8 <__lshift+0xd0>)
 800bb26:	4829      	ldr	r0, [pc, #164]	; (800bbcc <__lshift+0xd4>)
 800bb28:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800bb2c:	f001 fd84 	bl	800d638 <__assert_func>
 800bb30:	3101      	adds	r1, #1
 800bb32:	005b      	lsls	r3, r3, #1
 800bb34:	e7ee      	b.n	800bb14 <__lshift+0x1c>
 800bb36:	2300      	movs	r3, #0
 800bb38:	f100 0114 	add.w	r1, r0, #20
 800bb3c:	f100 0210 	add.w	r2, r0, #16
 800bb40:	4618      	mov	r0, r3
 800bb42:	4553      	cmp	r3, sl
 800bb44:	db33      	blt.n	800bbae <__lshift+0xb6>
 800bb46:	6920      	ldr	r0, [r4, #16]
 800bb48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bb4c:	f104 0314 	add.w	r3, r4, #20
 800bb50:	f019 091f 	ands.w	r9, r9, #31
 800bb54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bb58:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bb5c:	d02b      	beq.n	800bbb6 <__lshift+0xbe>
 800bb5e:	f1c9 0e20 	rsb	lr, r9, #32
 800bb62:	468a      	mov	sl, r1
 800bb64:	2200      	movs	r2, #0
 800bb66:	6818      	ldr	r0, [r3, #0]
 800bb68:	fa00 f009 	lsl.w	r0, r0, r9
 800bb6c:	4310      	orrs	r0, r2
 800bb6e:	f84a 0b04 	str.w	r0, [sl], #4
 800bb72:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb76:	459c      	cmp	ip, r3
 800bb78:	fa22 f20e 	lsr.w	r2, r2, lr
 800bb7c:	d8f3      	bhi.n	800bb66 <__lshift+0x6e>
 800bb7e:	ebac 0304 	sub.w	r3, ip, r4
 800bb82:	3b15      	subs	r3, #21
 800bb84:	f023 0303 	bic.w	r3, r3, #3
 800bb88:	3304      	adds	r3, #4
 800bb8a:	f104 0015 	add.w	r0, r4, #21
 800bb8e:	4584      	cmp	ip, r0
 800bb90:	bf38      	it	cc
 800bb92:	2304      	movcc	r3, #4
 800bb94:	50ca      	str	r2, [r1, r3]
 800bb96:	b10a      	cbz	r2, 800bb9c <__lshift+0xa4>
 800bb98:	f108 0602 	add.w	r6, r8, #2
 800bb9c:	3e01      	subs	r6, #1
 800bb9e:	4638      	mov	r0, r7
 800bba0:	612e      	str	r6, [r5, #16]
 800bba2:	4621      	mov	r1, r4
 800bba4:	f7ff fd8e 	bl	800b6c4 <_Bfree>
 800bba8:	4628      	mov	r0, r5
 800bbaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbae:	f842 0f04 	str.w	r0, [r2, #4]!
 800bbb2:	3301      	adds	r3, #1
 800bbb4:	e7c5      	b.n	800bb42 <__lshift+0x4a>
 800bbb6:	3904      	subs	r1, #4
 800bbb8:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbbc:	f841 2f04 	str.w	r2, [r1, #4]!
 800bbc0:	459c      	cmp	ip, r3
 800bbc2:	d8f9      	bhi.n	800bbb8 <__lshift+0xc0>
 800bbc4:	e7ea      	b.n	800bb9c <__lshift+0xa4>
 800bbc6:	bf00      	nop
 800bbc8:	0800ee31 	.word	0x0800ee31
 800bbcc:	0800ee42 	.word	0x0800ee42

0800bbd0 <__mcmp>:
 800bbd0:	b530      	push	{r4, r5, lr}
 800bbd2:	6902      	ldr	r2, [r0, #16]
 800bbd4:	690c      	ldr	r4, [r1, #16]
 800bbd6:	1b12      	subs	r2, r2, r4
 800bbd8:	d10e      	bne.n	800bbf8 <__mcmp+0x28>
 800bbda:	f100 0314 	add.w	r3, r0, #20
 800bbde:	3114      	adds	r1, #20
 800bbe0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bbe4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bbe8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bbec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bbf0:	42a5      	cmp	r5, r4
 800bbf2:	d003      	beq.n	800bbfc <__mcmp+0x2c>
 800bbf4:	d305      	bcc.n	800bc02 <__mcmp+0x32>
 800bbf6:	2201      	movs	r2, #1
 800bbf8:	4610      	mov	r0, r2
 800bbfa:	bd30      	pop	{r4, r5, pc}
 800bbfc:	4283      	cmp	r3, r0
 800bbfe:	d3f3      	bcc.n	800bbe8 <__mcmp+0x18>
 800bc00:	e7fa      	b.n	800bbf8 <__mcmp+0x28>
 800bc02:	f04f 32ff 	mov.w	r2, #4294967295
 800bc06:	e7f7      	b.n	800bbf8 <__mcmp+0x28>

0800bc08 <__mdiff>:
 800bc08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc0c:	460c      	mov	r4, r1
 800bc0e:	4606      	mov	r6, r0
 800bc10:	4611      	mov	r1, r2
 800bc12:	4620      	mov	r0, r4
 800bc14:	4690      	mov	r8, r2
 800bc16:	f7ff ffdb 	bl	800bbd0 <__mcmp>
 800bc1a:	1e05      	subs	r5, r0, #0
 800bc1c:	d110      	bne.n	800bc40 <__mdiff+0x38>
 800bc1e:	4629      	mov	r1, r5
 800bc20:	4630      	mov	r0, r6
 800bc22:	f7ff fd0f 	bl	800b644 <_Balloc>
 800bc26:	b930      	cbnz	r0, 800bc36 <__mdiff+0x2e>
 800bc28:	4b3a      	ldr	r3, [pc, #232]	; (800bd14 <__mdiff+0x10c>)
 800bc2a:	4602      	mov	r2, r0
 800bc2c:	f240 2137 	movw	r1, #567	; 0x237
 800bc30:	4839      	ldr	r0, [pc, #228]	; (800bd18 <__mdiff+0x110>)
 800bc32:	f001 fd01 	bl	800d638 <__assert_func>
 800bc36:	2301      	movs	r3, #1
 800bc38:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bc3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc40:	bfa4      	itt	ge
 800bc42:	4643      	movge	r3, r8
 800bc44:	46a0      	movge	r8, r4
 800bc46:	4630      	mov	r0, r6
 800bc48:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bc4c:	bfa6      	itte	ge
 800bc4e:	461c      	movge	r4, r3
 800bc50:	2500      	movge	r5, #0
 800bc52:	2501      	movlt	r5, #1
 800bc54:	f7ff fcf6 	bl	800b644 <_Balloc>
 800bc58:	b920      	cbnz	r0, 800bc64 <__mdiff+0x5c>
 800bc5a:	4b2e      	ldr	r3, [pc, #184]	; (800bd14 <__mdiff+0x10c>)
 800bc5c:	4602      	mov	r2, r0
 800bc5e:	f240 2145 	movw	r1, #581	; 0x245
 800bc62:	e7e5      	b.n	800bc30 <__mdiff+0x28>
 800bc64:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bc68:	6926      	ldr	r6, [r4, #16]
 800bc6a:	60c5      	str	r5, [r0, #12]
 800bc6c:	f104 0914 	add.w	r9, r4, #20
 800bc70:	f108 0514 	add.w	r5, r8, #20
 800bc74:	f100 0e14 	add.w	lr, r0, #20
 800bc78:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bc7c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bc80:	f108 0210 	add.w	r2, r8, #16
 800bc84:	46f2      	mov	sl, lr
 800bc86:	2100      	movs	r1, #0
 800bc88:	f859 3b04 	ldr.w	r3, [r9], #4
 800bc8c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bc90:	fa11 f88b 	uxtah	r8, r1, fp
 800bc94:	b299      	uxth	r1, r3
 800bc96:	0c1b      	lsrs	r3, r3, #16
 800bc98:	eba8 0801 	sub.w	r8, r8, r1
 800bc9c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bca0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bca4:	fa1f f888 	uxth.w	r8, r8
 800bca8:	1419      	asrs	r1, r3, #16
 800bcaa:	454e      	cmp	r6, r9
 800bcac:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bcb0:	f84a 3b04 	str.w	r3, [sl], #4
 800bcb4:	d8e8      	bhi.n	800bc88 <__mdiff+0x80>
 800bcb6:	1b33      	subs	r3, r6, r4
 800bcb8:	3b15      	subs	r3, #21
 800bcba:	f023 0303 	bic.w	r3, r3, #3
 800bcbe:	3304      	adds	r3, #4
 800bcc0:	3415      	adds	r4, #21
 800bcc2:	42a6      	cmp	r6, r4
 800bcc4:	bf38      	it	cc
 800bcc6:	2304      	movcc	r3, #4
 800bcc8:	441d      	add	r5, r3
 800bcca:	4473      	add	r3, lr
 800bccc:	469e      	mov	lr, r3
 800bcce:	462e      	mov	r6, r5
 800bcd0:	4566      	cmp	r6, ip
 800bcd2:	d30e      	bcc.n	800bcf2 <__mdiff+0xea>
 800bcd4:	f10c 0203 	add.w	r2, ip, #3
 800bcd8:	1b52      	subs	r2, r2, r5
 800bcda:	f022 0203 	bic.w	r2, r2, #3
 800bcde:	3d03      	subs	r5, #3
 800bce0:	45ac      	cmp	ip, r5
 800bce2:	bf38      	it	cc
 800bce4:	2200      	movcc	r2, #0
 800bce6:	4413      	add	r3, r2
 800bce8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bcec:	b17a      	cbz	r2, 800bd0e <__mdiff+0x106>
 800bcee:	6107      	str	r7, [r0, #16]
 800bcf0:	e7a4      	b.n	800bc3c <__mdiff+0x34>
 800bcf2:	f856 8b04 	ldr.w	r8, [r6], #4
 800bcf6:	fa11 f288 	uxtah	r2, r1, r8
 800bcfa:	1414      	asrs	r4, r2, #16
 800bcfc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bd00:	b292      	uxth	r2, r2
 800bd02:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bd06:	f84e 2b04 	str.w	r2, [lr], #4
 800bd0a:	1421      	asrs	r1, r4, #16
 800bd0c:	e7e0      	b.n	800bcd0 <__mdiff+0xc8>
 800bd0e:	3f01      	subs	r7, #1
 800bd10:	e7ea      	b.n	800bce8 <__mdiff+0xe0>
 800bd12:	bf00      	nop
 800bd14:	0800ee31 	.word	0x0800ee31
 800bd18:	0800ee42 	.word	0x0800ee42

0800bd1c <__ulp>:
 800bd1c:	b082      	sub	sp, #8
 800bd1e:	ed8d 0b00 	vstr	d0, [sp]
 800bd22:	9a01      	ldr	r2, [sp, #4]
 800bd24:	4b0f      	ldr	r3, [pc, #60]	; (800bd64 <__ulp+0x48>)
 800bd26:	4013      	ands	r3, r2
 800bd28:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	dc08      	bgt.n	800bd42 <__ulp+0x26>
 800bd30:	425b      	negs	r3, r3
 800bd32:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800bd36:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bd3a:	da04      	bge.n	800bd46 <__ulp+0x2a>
 800bd3c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bd40:	4113      	asrs	r3, r2
 800bd42:	2200      	movs	r2, #0
 800bd44:	e008      	b.n	800bd58 <__ulp+0x3c>
 800bd46:	f1a2 0314 	sub.w	r3, r2, #20
 800bd4a:	2b1e      	cmp	r3, #30
 800bd4c:	bfda      	itte	le
 800bd4e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800bd52:	40da      	lsrle	r2, r3
 800bd54:	2201      	movgt	r2, #1
 800bd56:	2300      	movs	r3, #0
 800bd58:	4619      	mov	r1, r3
 800bd5a:	4610      	mov	r0, r2
 800bd5c:	ec41 0b10 	vmov	d0, r0, r1
 800bd60:	b002      	add	sp, #8
 800bd62:	4770      	bx	lr
 800bd64:	7ff00000 	.word	0x7ff00000

0800bd68 <__b2d>:
 800bd68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd6c:	6906      	ldr	r6, [r0, #16]
 800bd6e:	f100 0814 	add.w	r8, r0, #20
 800bd72:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800bd76:	1f37      	subs	r7, r6, #4
 800bd78:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bd7c:	4610      	mov	r0, r2
 800bd7e:	f7ff fd53 	bl	800b828 <__hi0bits>
 800bd82:	f1c0 0320 	rsb	r3, r0, #32
 800bd86:	280a      	cmp	r0, #10
 800bd88:	600b      	str	r3, [r1, #0]
 800bd8a:	491b      	ldr	r1, [pc, #108]	; (800bdf8 <__b2d+0x90>)
 800bd8c:	dc15      	bgt.n	800bdba <__b2d+0x52>
 800bd8e:	f1c0 0c0b 	rsb	ip, r0, #11
 800bd92:	fa22 f30c 	lsr.w	r3, r2, ip
 800bd96:	45b8      	cmp	r8, r7
 800bd98:	ea43 0501 	orr.w	r5, r3, r1
 800bd9c:	bf34      	ite	cc
 800bd9e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bda2:	2300      	movcs	r3, #0
 800bda4:	3015      	adds	r0, #21
 800bda6:	fa02 f000 	lsl.w	r0, r2, r0
 800bdaa:	fa23 f30c 	lsr.w	r3, r3, ip
 800bdae:	4303      	orrs	r3, r0
 800bdb0:	461c      	mov	r4, r3
 800bdb2:	ec45 4b10 	vmov	d0, r4, r5
 800bdb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdba:	45b8      	cmp	r8, r7
 800bdbc:	bf3a      	itte	cc
 800bdbe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bdc2:	f1a6 0708 	subcc.w	r7, r6, #8
 800bdc6:	2300      	movcs	r3, #0
 800bdc8:	380b      	subs	r0, #11
 800bdca:	d012      	beq.n	800bdf2 <__b2d+0x8a>
 800bdcc:	f1c0 0120 	rsb	r1, r0, #32
 800bdd0:	fa23 f401 	lsr.w	r4, r3, r1
 800bdd4:	4082      	lsls	r2, r0
 800bdd6:	4322      	orrs	r2, r4
 800bdd8:	4547      	cmp	r7, r8
 800bdda:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800bdde:	bf8c      	ite	hi
 800bde0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bde4:	2200      	movls	r2, #0
 800bde6:	4083      	lsls	r3, r0
 800bde8:	40ca      	lsrs	r2, r1
 800bdea:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bdee:	4313      	orrs	r3, r2
 800bdf0:	e7de      	b.n	800bdb0 <__b2d+0x48>
 800bdf2:	ea42 0501 	orr.w	r5, r2, r1
 800bdf6:	e7db      	b.n	800bdb0 <__b2d+0x48>
 800bdf8:	3ff00000 	.word	0x3ff00000

0800bdfc <__d2b>:
 800bdfc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800be00:	460f      	mov	r7, r1
 800be02:	2101      	movs	r1, #1
 800be04:	ec59 8b10 	vmov	r8, r9, d0
 800be08:	4616      	mov	r6, r2
 800be0a:	f7ff fc1b 	bl	800b644 <_Balloc>
 800be0e:	4604      	mov	r4, r0
 800be10:	b930      	cbnz	r0, 800be20 <__d2b+0x24>
 800be12:	4602      	mov	r2, r0
 800be14:	4b24      	ldr	r3, [pc, #144]	; (800bea8 <__d2b+0xac>)
 800be16:	4825      	ldr	r0, [pc, #148]	; (800beac <__d2b+0xb0>)
 800be18:	f240 310f 	movw	r1, #783	; 0x30f
 800be1c:	f001 fc0c 	bl	800d638 <__assert_func>
 800be20:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800be24:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800be28:	bb2d      	cbnz	r5, 800be76 <__d2b+0x7a>
 800be2a:	9301      	str	r3, [sp, #4]
 800be2c:	f1b8 0300 	subs.w	r3, r8, #0
 800be30:	d026      	beq.n	800be80 <__d2b+0x84>
 800be32:	4668      	mov	r0, sp
 800be34:	9300      	str	r3, [sp, #0]
 800be36:	f7ff fd17 	bl	800b868 <__lo0bits>
 800be3a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800be3e:	b1e8      	cbz	r0, 800be7c <__d2b+0x80>
 800be40:	f1c0 0320 	rsb	r3, r0, #32
 800be44:	fa02 f303 	lsl.w	r3, r2, r3
 800be48:	430b      	orrs	r3, r1
 800be4a:	40c2      	lsrs	r2, r0
 800be4c:	6163      	str	r3, [r4, #20]
 800be4e:	9201      	str	r2, [sp, #4]
 800be50:	9b01      	ldr	r3, [sp, #4]
 800be52:	61a3      	str	r3, [r4, #24]
 800be54:	2b00      	cmp	r3, #0
 800be56:	bf14      	ite	ne
 800be58:	2202      	movne	r2, #2
 800be5a:	2201      	moveq	r2, #1
 800be5c:	6122      	str	r2, [r4, #16]
 800be5e:	b1bd      	cbz	r5, 800be90 <__d2b+0x94>
 800be60:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800be64:	4405      	add	r5, r0
 800be66:	603d      	str	r5, [r7, #0]
 800be68:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800be6c:	6030      	str	r0, [r6, #0]
 800be6e:	4620      	mov	r0, r4
 800be70:	b003      	add	sp, #12
 800be72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800be7a:	e7d6      	b.n	800be2a <__d2b+0x2e>
 800be7c:	6161      	str	r1, [r4, #20]
 800be7e:	e7e7      	b.n	800be50 <__d2b+0x54>
 800be80:	a801      	add	r0, sp, #4
 800be82:	f7ff fcf1 	bl	800b868 <__lo0bits>
 800be86:	9b01      	ldr	r3, [sp, #4]
 800be88:	6163      	str	r3, [r4, #20]
 800be8a:	3020      	adds	r0, #32
 800be8c:	2201      	movs	r2, #1
 800be8e:	e7e5      	b.n	800be5c <__d2b+0x60>
 800be90:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800be94:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800be98:	6038      	str	r0, [r7, #0]
 800be9a:	6918      	ldr	r0, [r3, #16]
 800be9c:	f7ff fcc4 	bl	800b828 <__hi0bits>
 800bea0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bea4:	e7e2      	b.n	800be6c <__d2b+0x70>
 800bea6:	bf00      	nop
 800bea8:	0800ee31 	.word	0x0800ee31
 800beac:	0800ee42 	.word	0x0800ee42

0800beb0 <__ratio>:
 800beb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beb4:	4688      	mov	r8, r1
 800beb6:	4669      	mov	r1, sp
 800beb8:	4681      	mov	r9, r0
 800beba:	f7ff ff55 	bl	800bd68 <__b2d>
 800bebe:	a901      	add	r1, sp, #4
 800bec0:	4640      	mov	r0, r8
 800bec2:	ec55 4b10 	vmov	r4, r5, d0
 800bec6:	f7ff ff4f 	bl	800bd68 <__b2d>
 800beca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bece:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bed2:	eba3 0c02 	sub.w	ip, r3, r2
 800bed6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800beda:	1a9b      	subs	r3, r3, r2
 800bedc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bee0:	ec51 0b10 	vmov	r0, r1, d0
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	bfd6      	itet	le
 800bee8:	460a      	movle	r2, r1
 800beea:	462a      	movgt	r2, r5
 800beec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bef0:	468b      	mov	fp, r1
 800bef2:	462f      	mov	r7, r5
 800bef4:	bfd4      	ite	le
 800bef6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800befa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800befe:	4620      	mov	r0, r4
 800bf00:	ee10 2a10 	vmov	r2, s0
 800bf04:	465b      	mov	r3, fp
 800bf06:	4639      	mov	r1, r7
 800bf08:	f7f4 fcb0 	bl	800086c <__aeabi_ddiv>
 800bf0c:	ec41 0b10 	vmov	d0, r0, r1
 800bf10:	b003      	add	sp, #12
 800bf12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bf16 <__copybits>:
 800bf16:	3901      	subs	r1, #1
 800bf18:	b570      	push	{r4, r5, r6, lr}
 800bf1a:	1149      	asrs	r1, r1, #5
 800bf1c:	6914      	ldr	r4, [r2, #16]
 800bf1e:	3101      	adds	r1, #1
 800bf20:	f102 0314 	add.w	r3, r2, #20
 800bf24:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bf28:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bf2c:	1f05      	subs	r5, r0, #4
 800bf2e:	42a3      	cmp	r3, r4
 800bf30:	d30c      	bcc.n	800bf4c <__copybits+0x36>
 800bf32:	1aa3      	subs	r3, r4, r2
 800bf34:	3b11      	subs	r3, #17
 800bf36:	f023 0303 	bic.w	r3, r3, #3
 800bf3a:	3211      	adds	r2, #17
 800bf3c:	42a2      	cmp	r2, r4
 800bf3e:	bf88      	it	hi
 800bf40:	2300      	movhi	r3, #0
 800bf42:	4418      	add	r0, r3
 800bf44:	2300      	movs	r3, #0
 800bf46:	4288      	cmp	r0, r1
 800bf48:	d305      	bcc.n	800bf56 <__copybits+0x40>
 800bf4a:	bd70      	pop	{r4, r5, r6, pc}
 800bf4c:	f853 6b04 	ldr.w	r6, [r3], #4
 800bf50:	f845 6f04 	str.w	r6, [r5, #4]!
 800bf54:	e7eb      	b.n	800bf2e <__copybits+0x18>
 800bf56:	f840 3b04 	str.w	r3, [r0], #4
 800bf5a:	e7f4      	b.n	800bf46 <__copybits+0x30>

0800bf5c <__any_on>:
 800bf5c:	f100 0214 	add.w	r2, r0, #20
 800bf60:	6900      	ldr	r0, [r0, #16]
 800bf62:	114b      	asrs	r3, r1, #5
 800bf64:	4298      	cmp	r0, r3
 800bf66:	b510      	push	{r4, lr}
 800bf68:	db11      	blt.n	800bf8e <__any_on+0x32>
 800bf6a:	dd0a      	ble.n	800bf82 <__any_on+0x26>
 800bf6c:	f011 011f 	ands.w	r1, r1, #31
 800bf70:	d007      	beq.n	800bf82 <__any_on+0x26>
 800bf72:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bf76:	fa24 f001 	lsr.w	r0, r4, r1
 800bf7a:	fa00 f101 	lsl.w	r1, r0, r1
 800bf7e:	428c      	cmp	r4, r1
 800bf80:	d10b      	bne.n	800bf9a <__any_on+0x3e>
 800bf82:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bf86:	4293      	cmp	r3, r2
 800bf88:	d803      	bhi.n	800bf92 <__any_on+0x36>
 800bf8a:	2000      	movs	r0, #0
 800bf8c:	bd10      	pop	{r4, pc}
 800bf8e:	4603      	mov	r3, r0
 800bf90:	e7f7      	b.n	800bf82 <__any_on+0x26>
 800bf92:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bf96:	2900      	cmp	r1, #0
 800bf98:	d0f5      	beq.n	800bf86 <__any_on+0x2a>
 800bf9a:	2001      	movs	r0, #1
 800bf9c:	e7f6      	b.n	800bf8c <__any_on+0x30>

0800bf9e <sulp>:
 800bf9e:	b570      	push	{r4, r5, r6, lr}
 800bfa0:	4604      	mov	r4, r0
 800bfa2:	460d      	mov	r5, r1
 800bfa4:	ec45 4b10 	vmov	d0, r4, r5
 800bfa8:	4616      	mov	r6, r2
 800bfaa:	f7ff feb7 	bl	800bd1c <__ulp>
 800bfae:	ec51 0b10 	vmov	r0, r1, d0
 800bfb2:	b17e      	cbz	r6, 800bfd4 <sulp+0x36>
 800bfb4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bfb8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	dd09      	ble.n	800bfd4 <sulp+0x36>
 800bfc0:	051b      	lsls	r3, r3, #20
 800bfc2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800bfc6:	2400      	movs	r4, #0
 800bfc8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800bfcc:	4622      	mov	r2, r4
 800bfce:	462b      	mov	r3, r5
 800bfd0:	f7f4 fb22 	bl	8000618 <__aeabi_dmul>
 800bfd4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bfd8 <_strtod_l>:
 800bfd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfdc:	ed2d 8b02 	vpush	{d8}
 800bfe0:	b09b      	sub	sp, #108	; 0x6c
 800bfe2:	4604      	mov	r4, r0
 800bfe4:	9213      	str	r2, [sp, #76]	; 0x4c
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	9216      	str	r2, [sp, #88]	; 0x58
 800bfea:	460d      	mov	r5, r1
 800bfec:	f04f 0800 	mov.w	r8, #0
 800bff0:	f04f 0900 	mov.w	r9, #0
 800bff4:	460a      	mov	r2, r1
 800bff6:	9215      	str	r2, [sp, #84]	; 0x54
 800bff8:	7811      	ldrb	r1, [r2, #0]
 800bffa:	292b      	cmp	r1, #43	; 0x2b
 800bffc:	d04c      	beq.n	800c098 <_strtod_l+0xc0>
 800bffe:	d83a      	bhi.n	800c076 <_strtod_l+0x9e>
 800c000:	290d      	cmp	r1, #13
 800c002:	d834      	bhi.n	800c06e <_strtod_l+0x96>
 800c004:	2908      	cmp	r1, #8
 800c006:	d834      	bhi.n	800c072 <_strtod_l+0x9a>
 800c008:	2900      	cmp	r1, #0
 800c00a:	d03d      	beq.n	800c088 <_strtod_l+0xb0>
 800c00c:	2200      	movs	r2, #0
 800c00e:	920a      	str	r2, [sp, #40]	; 0x28
 800c010:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800c012:	7832      	ldrb	r2, [r6, #0]
 800c014:	2a30      	cmp	r2, #48	; 0x30
 800c016:	f040 80b4 	bne.w	800c182 <_strtod_l+0x1aa>
 800c01a:	7872      	ldrb	r2, [r6, #1]
 800c01c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800c020:	2a58      	cmp	r2, #88	; 0x58
 800c022:	d170      	bne.n	800c106 <_strtod_l+0x12e>
 800c024:	9302      	str	r3, [sp, #8]
 800c026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c028:	9301      	str	r3, [sp, #4]
 800c02a:	ab16      	add	r3, sp, #88	; 0x58
 800c02c:	9300      	str	r3, [sp, #0]
 800c02e:	4a8e      	ldr	r2, [pc, #568]	; (800c268 <_strtod_l+0x290>)
 800c030:	ab17      	add	r3, sp, #92	; 0x5c
 800c032:	a915      	add	r1, sp, #84	; 0x54
 800c034:	4620      	mov	r0, r4
 800c036:	f001 fb9b 	bl	800d770 <__gethex>
 800c03a:	f010 070f 	ands.w	r7, r0, #15
 800c03e:	4605      	mov	r5, r0
 800c040:	d005      	beq.n	800c04e <_strtod_l+0x76>
 800c042:	2f06      	cmp	r7, #6
 800c044:	d12a      	bne.n	800c09c <_strtod_l+0xc4>
 800c046:	3601      	adds	r6, #1
 800c048:	2300      	movs	r3, #0
 800c04a:	9615      	str	r6, [sp, #84]	; 0x54
 800c04c:	930a      	str	r3, [sp, #40]	; 0x28
 800c04e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c050:	2b00      	cmp	r3, #0
 800c052:	f040 857f 	bne.w	800cb54 <_strtod_l+0xb7c>
 800c056:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c058:	b1db      	cbz	r3, 800c092 <_strtod_l+0xba>
 800c05a:	4642      	mov	r2, r8
 800c05c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c060:	ec43 2b10 	vmov	d0, r2, r3
 800c064:	b01b      	add	sp, #108	; 0x6c
 800c066:	ecbd 8b02 	vpop	{d8}
 800c06a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c06e:	2920      	cmp	r1, #32
 800c070:	d1cc      	bne.n	800c00c <_strtod_l+0x34>
 800c072:	3201      	adds	r2, #1
 800c074:	e7bf      	b.n	800bff6 <_strtod_l+0x1e>
 800c076:	292d      	cmp	r1, #45	; 0x2d
 800c078:	d1c8      	bne.n	800c00c <_strtod_l+0x34>
 800c07a:	2101      	movs	r1, #1
 800c07c:	910a      	str	r1, [sp, #40]	; 0x28
 800c07e:	1c51      	adds	r1, r2, #1
 800c080:	9115      	str	r1, [sp, #84]	; 0x54
 800c082:	7852      	ldrb	r2, [r2, #1]
 800c084:	2a00      	cmp	r2, #0
 800c086:	d1c3      	bne.n	800c010 <_strtod_l+0x38>
 800c088:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c08a:	9515      	str	r5, [sp, #84]	; 0x54
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	f040 855f 	bne.w	800cb50 <_strtod_l+0xb78>
 800c092:	4642      	mov	r2, r8
 800c094:	464b      	mov	r3, r9
 800c096:	e7e3      	b.n	800c060 <_strtod_l+0x88>
 800c098:	2100      	movs	r1, #0
 800c09a:	e7ef      	b.n	800c07c <_strtod_l+0xa4>
 800c09c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c09e:	b13a      	cbz	r2, 800c0b0 <_strtod_l+0xd8>
 800c0a0:	2135      	movs	r1, #53	; 0x35
 800c0a2:	a818      	add	r0, sp, #96	; 0x60
 800c0a4:	f7ff ff37 	bl	800bf16 <__copybits>
 800c0a8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c0aa:	4620      	mov	r0, r4
 800c0ac:	f7ff fb0a 	bl	800b6c4 <_Bfree>
 800c0b0:	3f01      	subs	r7, #1
 800c0b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c0b4:	2f04      	cmp	r7, #4
 800c0b6:	d806      	bhi.n	800c0c6 <_strtod_l+0xee>
 800c0b8:	e8df f007 	tbb	[pc, r7]
 800c0bc:	201d0314 	.word	0x201d0314
 800c0c0:	14          	.byte	0x14
 800c0c1:	00          	.byte	0x00
 800c0c2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800c0c6:	05e9      	lsls	r1, r5, #23
 800c0c8:	bf48      	it	mi
 800c0ca:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800c0ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c0d2:	0d1b      	lsrs	r3, r3, #20
 800c0d4:	051b      	lsls	r3, r3, #20
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d1b9      	bne.n	800c04e <_strtod_l+0x76>
 800c0da:	f7fe fb03 	bl	800a6e4 <__errno>
 800c0de:	2322      	movs	r3, #34	; 0x22
 800c0e0:	6003      	str	r3, [r0, #0]
 800c0e2:	e7b4      	b.n	800c04e <_strtod_l+0x76>
 800c0e4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800c0e8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c0ec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c0f0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800c0f4:	e7e7      	b.n	800c0c6 <_strtod_l+0xee>
 800c0f6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800c270 <_strtod_l+0x298>
 800c0fa:	e7e4      	b.n	800c0c6 <_strtod_l+0xee>
 800c0fc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800c100:	f04f 38ff 	mov.w	r8, #4294967295
 800c104:	e7df      	b.n	800c0c6 <_strtod_l+0xee>
 800c106:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c108:	1c5a      	adds	r2, r3, #1
 800c10a:	9215      	str	r2, [sp, #84]	; 0x54
 800c10c:	785b      	ldrb	r3, [r3, #1]
 800c10e:	2b30      	cmp	r3, #48	; 0x30
 800c110:	d0f9      	beq.n	800c106 <_strtod_l+0x12e>
 800c112:	2b00      	cmp	r3, #0
 800c114:	d09b      	beq.n	800c04e <_strtod_l+0x76>
 800c116:	2301      	movs	r3, #1
 800c118:	f04f 0a00 	mov.w	sl, #0
 800c11c:	9304      	str	r3, [sp, #16]
 800c11e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c120:	930b      	str	r3, [sp, #44]	; 0x2c
 800c122:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800c126:	46d3      	mov	fp, sl
 800c128:	220a      	movs	r2, #10
 800c12a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800c12c:	7806      	ldrb	r6, [r0, #0]
 800c12e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c132:	b2d9      	uxtb	r1, r3
 800c134:	2909      	cmp	r1, #9
 800c136:	d926      	bls.n	800c186 <_strtod_l+0x1ae>
 800c138:	494c      	ldr	r1, [pc, #304]	; (800c26c <_strtod_l+0x294>)
 800c13a:	2201      	movs	r2, #1
 800c13c:	f001 fa22 	bl	800d584 <strncmp>
 800c140:	2800      	cmp	r0, #0
 800c142:	d030      	beq.n	800c1a6 <_strtod_l+0x1ce>
 800c144:	2000      	movs	r0, #0
 800c146:	4632      	mov	r2, r6
 800c148:	9005      	str	r0, [sp, #20]
 800c14a:	465e      	mov	r6, fp
 800c14c:	4603      	mov	r3, r0
 800c14e:	2a65      	cmp	r2, #101	; 0x65
 800c150:	d001      	beq.n	800c156 <_strtod_l+0x17e>
 800c152:	2a45      	cmp	r2, #69	; 0x45
 800c154:	d113      	bne.n	800c17e <_strtod_l+0x1a6>
 800c156:	b91e      	cbnz	r6, 800c160 <_strtod_l+0x188>
 800c158:	9a04      	ldr	r2, [sp, #16]
 800c15a:	4302      	orrs	r2, r0
 800c15c:	d094      	beq.n	800c088 <_strtod_l+0xb0>
 800c15e:	2600      	movs	r6, #0
 800c160:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800c162:	1c6a      	adds	r2, r5, #1
 800c164:	9215      	str	r2, [sp, #84]	; 0x54
 800c166:	786a      	ldrb	r2, [r5, #1]
 800c168:	2a2b      	cmp	r2, #43	; 0x2b
 800c16a:	d074      	beq.n	800c256 <_strtod_l+0x27e>
 800c16c:	2a2d      	cmp	r2, #45	; 0x2d
 800c16e:	d078      	beq.n	800c262 <_strtod_l+0x28a>
 800c170:	f04f 0c00 	mov.w	ip, #0
 800c174:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c178:	2909      	cmp	r1, #9
 800c17a:	d97f      	bls.n	800c27c <_strtod_l+0x2a4>
 800c17c:	9515      	str	r5, [sp, #84]	; 0x54
 800c17e:	2700      	movs	r7, #0
 800c180:	e09e      	b.n	800c2c0 <_strtod_l+0x2e8>
 800c182:	2300      	movs	r3, #0
 800c184:	e7c8      	b.n	800c118 <_strtod_l+0x140>
 800c186:	f1bb 0f08 	cmp.w	fp, #8
 800c18a:	bfd8      	it	le
 800c18c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800c18e:	f100 0001 	add.w	r0, r0, #1
 800c192:	bfda      	itte	le
 800c194:	fb02 3301 	mlale	r3, r2, r1, r3
 800c198:	9309      	strle	r3, [sp, #36]	; 0x24
 800c19a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800c19e:	f10b 0b01 	add.w	fp, fp, #1
 800c1a2:	9015      	str	r0, [sp, #84]	; 0x54
 800c1a4:	e7c1      	b.n	800c12a <_strtod_l+0x152>
 800c1a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c1a8:	1c5a      	adds	r2, r3, #1
 800c1aa:	9215      	str	r2, [sp, #84]	; 0x54
 800c1ac:	785a      	ldrb	r2, [r3, #1]
 800c1ae:	f1bb 0f00 	cmp.w	fp, #0
 800c1b2:	d037      	beq.n	800c224 <_strtod_l+0x24c>
 800c1b4:	9005      	str	r0, [sp, #20]
 800c1b6:	465e      	mov	r6, fp
 800c1b8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c1bc:	2b09      	cmp	r3, #9
 800c1be:	d912      	bls.n	800c1e6 <_strtod_l+0x20e>
 800c1c0:	2301      	movs	r3, #1
 800c1c2:	e7c4      	b.n	800c14e <_strtod_l+0x176>
 800c1c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c1c6:	1c5a      	adds	r2, r3, #1
 800c1c8:	9215      	str	r2, [sp, #84]	; 0x54
 800c1ca:	785a      	ldrb	r2, [r3, #1]
 800c1cc:	3001      	adds	r0, #1
 800c1ce:	2a30      	cmp	r2, #48	; 0x30
 800c1d0:	d0f8      	beq.n	800c1c4 <_strtod_l+0x1ec>
 800c1d2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c1d6:	2b08      	cmp	r3, #8
 800c1d8:	f200 84c1 	bhi.w	800cb5e <_strtod_l+0xb86>
 800c1dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c1de:	9005      	str	r0, [sp, #20]
 800c1e0:	2000      	movs	r0, #0
 800c1e2:	930b      	str	r3, [sp, #44]	; 0x2c
 800c1e4:	4606      	mov	r6, r0
 800c1e6:	3a30      	subs	r2, #48	; 0x30
 800c1e8:	f100 0301 	add.w	r3, r0, #1
 800c1ec:	d014      	beq.n	800c218 <_strtod_l+0x240>
 800c1ee:	9905      	ldr	r1, [sp, #20]
 800c1f0:	4419      	add	r1, r3
 800c1f2:	9105      	str	r1, [sp, #20]
 800c1f4:	4633      	mov	r3, r6
 800c1f6:	eb00 0c06 	add.w	ip, r0, r6
 800c1fa:	210a      	movs	r1, #10
 800c1fc:	4563      	cmp	r3, ip
 800c1fe:	d113      	bne.n	800c228 <_strtod_l+0x250>
 800c200:	1833      	adds	r3, r6, r0
 800c202:	2b08      	cmp	r3, #8
 800c204:	f106 0601 	add.w	r6, r6, #1
 800c208:	4406      	add	r6, r0
 800c20a:	dc1a      	bgt.n	800c242 <_strtod_l+0x26a>
 800c20c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c20e:	230a      	movs	r3, #10
 800c210:	fb03 2301 	mla	r3, r3, r1, r2
 800c214:	9309      	str	r3, [sp, #36]	; 0x24
 800c216:	2300      	movs	r3, #0
 800c218:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c21a:	1c51      	adds	r1, r2, #1
 800c21c:	9115      	str	r1, [sp, #84]	; 0x54
 800c21e:	7852      	ldrb	r2, [r2, #1]
 800c220:	4618      	mov	r0, r3
 800c222:	e7c9      	b.n	800c1b8 <_strtod_l+0x1e0>
 800c224:	4658      	mov	r0, fp
 800c226:	e7d2      	b.n	800c1ce <_strtod_l+0x1f6>
 800c228:	2b08      	cmp	r3, #8
 800c22a:	f103 0301 	add.w	r3, r3, #1
 800c22e:	dc03      	bgt.n	800c238 <_strtod_l+0x260>
 800c230:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c232:	434f      	muls	r7, r1
 800c234:	9709      	str	r7, [sp, #36]	; 0x24
 800c236:	e7e1      	b.n	800c1fc <_strtod_l+0x224>
 800c238:	2b10      	cmp	r3, #16
 800c23a:	bfd8      	it	le
 800c23c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800c240:	e7dc      	b.n	800c1fc <_strtod_l+0x224>
 800c242:	2e10      	cmp	r6, #16
 800c244:	bfdc      	itt	le
 800c246:	230a      	movle	r3, #10
 800c248:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800c24c:	e7e3      	b.n	800c216 <_strtod_l+0x23e>
 800c24e:	2300      	movs	r3, #0
 800c250:	9305      	str	r3, [sp, #20]
 800c252:	2301      	movs	r3, #1
 800c254:	e780      	b.n	800c158 <_strtod_l+0x180>
 800c256:	f04f 0c00 	mov.w	ip, #0
 800c25a:	1caa      	adds	r2, r5, #2
 800c25c:	9215      	str	r2, [sp, #84]	; 0x54
 800c25e:	78aa      	ldrb	r2, [r5, #2]
 800c260:	e788      	b.n	800c174 <_strtod_l+0x19c>
 800c262:	f04f 0c01 	mov.w	ip, #1
 800c266:	e7f8      	b.n	800c25a <_strtod_l+0x282>
 800c268:	0800efa0 	.word	0x0800efa0
 800c26c:	0800ef9c 	.word	0x0800ef9c
 800c270:	7ff00000 	.word	0x7ff00000
 800c274:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c276:	1c51      	adds	r1, r2, #1
 800c278:	9115      	str	r1, [sp, #84]	; 0x54
 800c27a:	7852      	ldrb	r2, [r2, #1]
 800c27c:	2a30      	cmp	r2, #48	; 0x30
 800c27e:	d0f9      	beq.n	800c274 <_strtod_l+0x29c>
 800c280:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c284:	2908      	cmp	r1, #8
 800c286:	f63f af7a 	bhi.w	800c17e <_strtod_l+0x1a6>
 800c28a:	3a30      	subs	r2, #48	; 0x30
 800c28c:	9208      	str	r2, [sp, #32]
 800c28e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c290:	920c      	str	r2, [sp, #48]	; 0x30
 800c292:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c294:	1c57      	adds	r7, r2, #1
 800c296:	9715      	str	r7, [sp, #84]	; 0x54
 800c298:	7852      	ldrb	r2, [r2, #1]
 800c29a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c29e:	f1be 0f09 	cmp.w	lr, #9
 800c2a2:	d938      	bls.n	800c316 <_strtod_l+0x33e>
 800c2a4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c2a6:	1a7f      	subs	r7, r7, r1
 800c2a8:	2f08      	cmp	r7, #8
 800c2aa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800c2ae:	dc03      	bgt.n	800c2b8 <_strtod_l+0x2e0>
 800c2b0:	9908      	ldr	r1, [sp, #32]
 800c2b2:	428f      	cmp	r7, r1
 800c2b4:	bfa8      	it	ge
 800c2b6:	460f      	movge	r7, r1
 800c2b8:	f1bc 0f00 	cmp.w	ip, #0
 800c2bc:	d000      	beq.n	800c2c0 <_strtod_l+0x2e8>
 800c2be:	427f      	negs	r7, r7
 800c2c0:	2e00      	cmp	r6, #0
 800c2c2:	d14f      	bne.n	800c364 <_strtod_l+0x38c>
 800c2c4:	9904      	ldr	r1, [sp, #16]
 800c2c6:	4301      	orrs	r1, r0
 800c2c8:	f47f aec1 	bne.w	800c04e <_strtod_l+0x76>
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	f47f aedb 	bne.w	800c088 <_strtod_l+0xb0>
 800c2d2:	2a69      	cmp	r2, #105	; 0x69
 800c2d4:	d029      	beq.n	800c32a <_strtod_l+0x352>
 800c2d6:	dc26      	bgt.n	800c326 <_strtod_l+0x34e>
 800c2d8:	2a49      	cmp	r2, #73	; 0x49
 800c2da:	d026      	beq.n	800c32a <_strtod_l+0x352>
 800c2dc:	2a4e      	cmp	r2, #78	; 0x4e
 800c2de:	f47f aed3 	bne.w	800c088 <_strtod_l+0xb0>
 800c2e2:	499b      	ldr	r1, [pc, #620]	; (800c550 <_strtod_l+0x578>)
 800c2e4:	a815      	add	r0, sp, #84	; 0x54
 800c2e6:	f001 fc83 	bl	800dbf0 <__match>
 800c2ea:	2800      	cmp	r0, #0
 800c2ec:	f43f aecc 	beq.w	800c088 <_strtod_l+0xb0>
 800c2f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c2f2:	781b      	ldrb	r3, [r3, #0]
 800c2f4:	2b28      	cmp	r3, #40	; 0x28
 800c2f6:	d12f      	bne.n	800c358 <_strtod_l+0x380>
 800c2f8:	4996      	ldr	r1, [pc, #600]	; (800c554 <_strtod_l+0x57c>)
 800c2fa:	aa18      	add	r2, sp, #96	; 0x60
 800c2fc:	a815      	add	r0, sp, #84	; 0x54
 800c2fe:	f001 fc8b 	bl	800dc18 <__hexnan>
 800c302:	2805      	cmp	r0, #5
 800c304:	d128      	bne.n	800c358 <_strtod_l+0x380>
 800c306:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c308:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c30c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800c310:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800c314:	e69b      	b.n	800c04e <_strtod_l+0x76>
 800c316:	9f08      	ldr	r7, [sp, #32]
 800c318:	210a      	movs	r1, #10
 800c31a:	fb01 2107 	mla	r1, r1, r7, r2
 800c31e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800c322:	9208      	str	r2, [sp, #32]
 800c324:	e7b5      	b.n	800c292 <_strtod_l+0x2ba>
 800c326:	2a6e      	cmp	r2, #110	; 0x6e
 800c328:	e7d9      	b.n	800c2de <_strtod_l+0x306>
 800c32a:	498b      	ldr	r1, [pc, #556]	; (800c558 <_strtod_l+0x580>)
 800c32c:	a815      	add	r0, sp, #84	; 0x54
 800c32e:	f001 fc5f 	bl	800dbf0 <__match>
 800c332:	2800      	cmp	r0, #0
 800c334:	f43f aea8 	beq.w	800c088 <_strtod_l+0xb0>
 800c338:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c33a:	4988      	ldr	r1, [pc, #544]	; (800c55c <_strtod_l+0x584>)
 800c33c:	3b01      	subs	r3, #1
 800c33e:	a815      	add	r0, sp, #84	; 0x54
 800c340:	9315      	str	r3, [sp, #84]	; 0x54
 800c342:	f001 fc55 	bl	800dbf0 <__match>
 800c346:	b910      	cbnz	r0, 800c34e <_strtod_l+0x376>
 800c348:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c34a:	3301      	adds	r3, #1
 800c34c:	9315      	str	r3, [sp, #84]	; 0x54
 800c34e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800c56c <_strtod_l+0x594>
 800c352:	f04f 0800 	mov.w	r8, #0
 800c356:	e67a      	b.n	800c04e <_strtod_l+0x76>
 800c358:	4881      	ldr	r0, [pc, #516]	; (800c560 <_strtod_l+0x588>)
 800c35a:	f001 f965 	bl	800d628 <nan>
 800c35e:	ec59 8b10 	vmov	r8, r9, d0
 800c362:	e674      	b.n	800c04e <_strtod_l+0x76>
 800c364:	9b05      	ldr	r3, [sp, #20]
 800c366:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c368:	1afb      	subs	r3, r7, r3
 800c36a:	f1bb 0f00 	cmp.w	fp, #0
 800c36e:	bf08      	it	eq
 800c370:	46b3      	moveq	fp, r6
 800c372:	2e10      	cmp	r6, #16
 800c374:	9308      	str	r3, [sp, #32]
 800c376:	4635      	mov	r5, r6
 800c378:	bfa8      	it	ge
 800c37a:	2510      	movge	r5, #16
 800c37c:	f7f4 f8d2 	bl	8000524 <__aeabi_ui2d>
 800c380:	2e09      	cmp	r6, #9
 800c382:	4680      	mov	r8, r0
 800c384:	4689      	mov	r9, r1
 800c386:	dd13      	ble.n	800c3b0 <_strtod_l+0x3d8>
 800c388:	4b76      	ldr	r3, [pc, #472]	; (800c564 <_strtod_l+0x58c>)
 800c38a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c38e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c392:	f7f4 f941 	bl	8000618 <__aeabi_dmul>
 800c396:	4680      	mov	r8, r0
 800c398:	4650      	mov	r0, sl
 800c39a:	4689      	mov	r9, r1
 800c39c:	f7f4 f8c2 	bl	8000524 <__aeabi_ui2d>
 800c3a0:	4602      	mov	r2, r0
 800c3a2:	460b      	mov	r3, r1
 800c3a4:	4640      	mov	r0, r8
 800c3a6:	4649      	mov	r1, r9
 800c3a8:	f7f3 ff80 	bl	80002ac <__adddf3>
 800c3ac:	4680      	mov	r8, r0
 800c3ae:	4689      	mov	r9, r1
 800c3b0:	2e0f      	cmp	r6, #15
 800c3b2:	dc38      	bgt.n	800c426 <_strtod_l+0x44e>
 800c3b4:	9b08      	ldr	r3, [sp, #32]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	f43f ae49 	beq.w	800c04e <_strtod_l+0x76>
 800c3bc:	dd24      	ble.n	800c408 <_strtod_l+0x430>
 800c3be:	2b16      	cmp	r3, #22
 800c3c0:	dc0b      	bgt.n	800c3da <_strtod_l+0x402>
 800c3c2:	4968      	ldr	r1, [pc, #416]	; (800c564 <_strtod_l+0x58c>)
 800c3c4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c3c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3cc:	4642      	mov	r2, r8
 800c3ce:	464b      	mov	r3, r9
 800c3d0:	f7f4 f922 	bl	8000618 <__aeabi_dmul>
 800c3d4:	4680      	mov	r8, r0
 800c3d6:	4689      	mov	r9, r1
 800c3d8:	e639      	b.n	800c04e <_strtod_l+0x76>
 800c3da:	9a08      	ldr	r2, [sp, #32]
 800c3dc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800c3e0:	4293      	cmp	r3, r2
 800c3e2:	db20      	blt.n	800c426 <_strtod_l+0x44e>
 800c3e4:	4c5f      	ldr	r4, [pc, #380]	; (800c564 <_strtod_l+0x58c>)
 800c3e6:	f1c6 060f 	rsb	r6, r6, #15
 800c3ea:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800c3ee:	4642      	mov	r2, r8
 800c3f0:	464b      	mov	r3, r9
 800c3f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3f6:	f7f4 f90f 	bl	8000618 <__aeabi_dmul>
 800c3fa:	9b08      	ldr	r3, [sp, #32]
 800c3fc:	1b9e      	subs	r6, r3, r6
 800c3fe:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800c402:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c406:	e7e3      	b.n	800c3d0 <_strtod_l+0x3f8>
 800c408:	9b08      	ldr	r3, [sp, #32]
 800c40a:	3316      	adds	r3, #22
 800c40c:	db0b      	blt.n	800c426 <_strtod_l+0x44e>
 800c40e:	9b05      	ldr	r3, [sp, #20]
 800c410:	1bdf      	subs	r7, r3, r7
 800c412:	4b54      	ldr	r3, [pc, #336]	; (800c564 <_strtod_l+0x58c>)
 800c414:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c418:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c41c:	4640      	mov	r0, r8
 800c41e:	4649      	mov	r1, r9
 800c420:	f7f4 fa24 	bl	800086c <__aeabi_ddiv>
 800c424:	e7d6      	b.n	800c3d4 <_strtod_l+0x3fc>
 800c426:	9b08      	ldr	r3, [sp, #32]
 800c428:	1b75      	subs	r5, r6, r5
 800c42a:	441d      	add	r5, r3
 800c42c:	2d00      	cmp	r5, #0
 800c42e:	dd70      	ble.n	800c512 <_strtod_l+0x53a>
 800c430:	f015 030f 	ands.w	r3, r5, #15
 800c434:	d00a      	beq.n	800c44c <_strtod_l+0x474>
 800c436:	494b      	ldr	r1, [pc, #300]	; (800c564 <_strtod_l+0x58c>)
 800c438:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c43c:	4642      	mov	r2, r8
 800c43e:	464b      	mov	r3, r9
 800c440:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c444:	f7f4 f8e8 	bl	8000618 <__aeabi_dmul>
 800c448:	4680      	mov	r8, r0
 800c44a:	4689      	mov	r9, r1
 800c44c:	f035 050f 	bics.w	r5, r5, #15
 800c450:	d04d      	beq.n	800c4ee <_strtod_l+0x516>
 800c452:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800c456:	dd22      	ble.n	800c49e <_strtod_l+0x4c6>
 800c458:	2500      	movs	r5, #0
 800c45a:	46ab      	mov	fp, r5
 800c45c:	9509      	str	r5, [sp, #36]	; 0x24
 800c45e:	9505      	str	r5, [sp, #20]
 800c460:	2322      	movs	r3, #34	; 0x22
 800c462:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800c56c <_strtod_l+0x594>
 800c466:	6023      	str	r3, [r4, #0]
 800c468:	f04f 0800 	mov.w	r8, #0
 800c46c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c46e:	2b00      	cmp	r3, #0
 800c470:	f43f aded 	beq.w	800c04e <_strtod_l+0x76>
 800c474:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c476:	4620      	mov	r0, r4
 800c478:	f7ff f924 	bl	800b6c4 <_Bfree>
 800c47c:	9905      	ldr	r1, [sp, #20]
 800c47e:	4620      	mov	r0, r4
 800c480:	f7ff f920 	bl	800b6c4 <_Bfree>
 800c484:	4659      	mov	r1, fp
 800c486:	4620      	mov	r0, r4
 800c488:	f7ff f91c 	bl	800b6c4 <_Bfree>
 800c48c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c48e:	4620      	mov	r0, r4
 800c490:	f7ff f918 	bl	800b6c4 <_Bfree>
 800c494:	4629      	mov	r1, r5
 800c496:	4620      	mov	r0, r4
 800c498:	f7ff f914 	bl	800b6c4 <_Bfree>
 800c49c:	e5d7      	b.n	800c04e <_strtod_l+0x76>
 800c49e:	4b32      	ldr	r3, [pc, #200]	; (800c568 <_strtod_l+0x590>)
 800c4a0:	9304      	str	r3, [sp, #16]
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	112d      	asrs	r5, r5, #4
 800c4a6:	4640      	mov	r0, r8
 800c4a8:	4649      	mov	r1, r9
 800c4aa:	469a      	mov	sl, r3
 800c4ac:	2d01      	cmp	r5, #1
 800c4ae:	dc21      	bgt.n	800c4f4 <_strtod_l+0x51c>
 800c4b0:	b10b      	cbz	r3, 800c4b6 <_strtod_l+0x4de>
 800c4b2:	4680      	mov	r8, r0
 800c4b4:	4689      	mov	r9, r1
 800c4b6:	492c      	ldr	r1, [pc, #176]	; (800c568 <_strtod_l+0x590>)
 800c4b8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800c4bc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c4c0:	4642      	mov	r2, r8
 800c4c2:	464b      	mov	r3, r9
 800c4c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4c8:	f7f4 f8a6 	bl	8000618 <__aeabi_dmul>
 800c4cc:	4b27      	ldr	r3, [pc, #156]	; (800c56c <_strtod_l+0x594>)
 800c4ce:	460a      	mov	r2, r1
 800c4d0:	400b      	ands	r3, r1
 800c4d2:	4927      	ldr	r1, [pc, #156]	; (800c570 <_strtod_l+0x598>)
 800c4d4:	428b      	cmp	r3, r1
 800c4d6:	4680      	mov	r8, r0
 800c4d8:	d8be      	bhi.n	800c458 <_strtod_l+0x480>
 800c4da:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c4de:	428b      	cmp	r3, r1
 800c4e0:	bf86      	itte	hi
 800c4e2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800c574 <_strtod_l+0x59c>
 800c4e6:	f04f 38ff 	movhi.w	r8, #4294967295
 800c4ea:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	9304      	str	r3, [sp, #16]
 800c4f2:	e07b      	b.n	800c5ec <_strtod_l+0x614>
 800c4f4:	07ea      	lsls	r2, r5, #31
 800c4f6:	d505      	bpl.n	800c504 <_strtod_l+0x52c>
 800c4f8:	9b04      	ldr	r3, [sp, #16]
 800c4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4fe:	f7f4 f88b 	bl	8000618 <__aeabi_dmul>
 800c502:	2301      	movs	r3, #1
 800c504:	9a04      	ldr	r2, [sp, #16]
 800c506:	3208      	adds	r2, #8
 800c508:	f10a 0a01 	add.w	sl, sl, #1
 800c50c:	106d      	asrs	r5, r5, #1
 800c50e:	9204      	str	r2, [sp, #16]
 800c510:	e7cc      	b.n	800c4ac <_strtod_l+0x4d4>
 800c512:	d0ec      	beq.n	800c4ee <_strtod_l+0x516>
 800c514:	426d      	negs	r5, r5
 800c516:	f015 020f 	ands.w	r2, r5, #15
 800c51a:	d00a      	beq.n	800c532 <_strtod_l+0x55a>
 800c51c:	4b11      	ldr	r3, [pc, #68]	; (800c564 <_strtod_l+0x58c>)
 800c51e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c522:	4640      	mov	r0, r8
 800c524:	4649      	mov	r1, r9
 800c526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c52a:	f7f4 f99f 	bl	800086c <__aeabi_ddiv>
 800c52e:	4680      	mov	r8, r0
 800c530:	4689      	mov	r9, r1
 800c532:	112d      	asrs	r5, r5, #4
 800c534:	d0db      	beq.n	800c4ee <_strtod_l+0x516>
 800c536:	2d1f      	cmp	r5, #31
 800c538:	dd1e      	ble.n	800c578 <_strtod_l+0x5a0>
 800c53a:	2500      	movs	r5, #0
 800c53c:	46ab      	mov	fp, r5
 800c53e:	9509      	str	r5, [sp, #36]	; 0x24
 800c540:	9505      	str	r5, [sp, #20]
 800c542:	2322      	movs	r3, #34	; 0x22
 800c544:	f04f 0800 	mov.w	r8, #0
 800c548:	f04f 0900 	mov.w	r9, #0
 800c54c:	6023      	str	r3, [r4, #0]
 800c54e:	e78d      	b.n	800c46c <_strtod_l+0x494>
 800c550:	0800ed89 	.word	0x0800ed89
 800c554:	0800efb4 	.word	0x0800efb4
 800c558:	0800ed81 	.word	0x0800ed81
 800c55c:	0800edb8 	.word	0x0800edb8
 800c560:	0800f145 	.word	0x0800f145
 800c564:	0800eec8 	.word	0x0800eec8
 800c568:	0800eea0 	.word	0x0800eea0
 800c56c:	7ff00000 	.word	0x7ff00000
 800c570:	7ca00000 	.word	0x7ca00000
 800c574:	7fefffff 	.word	0x7fefffff
 800c578:	f015 0310 	ands.w	r3, r5, #16
 800c57c:	bf18      	it	ne
 800c57e:	236a      	movne	r3, #106	; 0x6a
 800c580:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800c924 <_strtod_l+0x94c>
 800c584:	9304      	str	r3, [sp, #16]
 800c586:	4640      	mov	r0, r8
 800c588:	4649      	mov	r1, r9
 800c58a:	2300      	movs	r3, #0
 800c58c:	07ea      	lsls	r2, r5, #31
 800c58e:	d504      	bpl.n	800c59a <_strtod_l+0x5c2>
 800c590:	e9da 2300 	ldrd	r2, r3, [sl]
 800c594:	f7f4 f840 	bl	8000618 <__aeabi_dmul>
 800c598:	2301      	movs	r3, #1
 800c59a:	106d      	asrs	r5, r5, #1
 800c59c:	f10a 0a08 	add.w	sl, sl, #8
 800c5a0:	d1f4      	bne.n	800c58c <_strtod_l+0x5b4>
 800c5a2:	b10b      	cbz	r3, 800c5a8 <_strtod_l+0x5d0>
 800c5a4:	4680      	mov	r8, r0
 800c5a6:	4689      	mov	r9, r1
 800c5a8:	9b04      	ldr	r3, [sp, #16]
 800c5aa:	b1bb      	cbz	r3, 800c5dc <_strtod_l+0x604>
 800c5ac:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800c5b0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	4649      	mov	r1, r9
 800c5b8:	dd10      	ble.n	800c5dc <_strtod_l+0x604>
 800c5ba:	2b1f      	cmp	r3, #31
 800c5bc:	f340 811e 	ble.w	800c7fc <_strtod_l+0x824>
 800c5c0:	2b34      	cmp	r3, #52	; 0x34
 800c5c2:	bfde      	ittt	le
 800c5c4:	f04f 33ff 	movle.w	r3, #4294967295
 800c5c8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c5cc:	4093      	lslle	r3, r2
 800c5ce:	f04f 0800 	mov.w	r8, #0
 800c5d2:	bfcc      	ite	gt
 800c5d4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800c5d8:	ea03 0901 	andle.w	r9, r3, r1
 800c5dc:	2200      	movs	r2, #0
 800c5de:	2300      	movs	r3, #0
 800c5e0:	4640      	mov	r0, r8
 800c5e2:	4649      	mov	r1, r9
 800c5e4:	f7f4 fa80 	bl	8000ae8 <__aeabi_dcmpeq>
 800c5e8:	2800      	cmp	r0, #0
 800c5ea:	d1a6      	bne.n	800c53a <_strtod_l+0x562>
 800c5ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5ee:	9300      	str	r3, [sp, #0]
 800c5f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c5f2:	4633      	mov	r3, r6
 800c5f4:	465a      	mov	r2, fp
 800c5f6:	4620      	mov	r0, r4
 800c5f8:	f7ff f8cc 	bl	800b794 <__s2b>
 800c5fc:	9009      	str	r0, [sp, #36]	; 0x24
 800c5fe:	2800      	cmp	r0, #0
 800c600:	f43f af2a 	beq.w	800c458 <_strtod_l+0x480>
 800c604:	9a08      	ldr	r2, [sp, #32]
 800c606:	9b05      	ldr	r3, [sp, #20]
 800c608:	2a00      	cmp	r2, #0
 800c60a:	eba3 0307 	sub.w	r3, r3, r7
 800c60e:	bfa8      	it	ge
 800c610:	2300      	movge	r3, #0
 800c612:	930c      	str	r3, [sp, #48]	; 0x30
 800c614:	2500      	movs	r5, #0
 800c616:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c61a:	9312      	str	r3, [sp, #72]	; 0x48
 800c61c:	46ab      	mov	fp, r5
 800c61e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c620:	4620      	mov	r0, r4
 800c622:	6859      	ldr	r1, [r3, #4]
 800c624:	f7ff f80e 	bl	800b644 <_Balloc>
 800c628:	9005      	str	r0, [sp, #20]
 800c62a:	2800      	cmp	r0, #0
 800c62c:	f43f af18 	beq.w	800c460 <_strtod_l+0x488>
 800c630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c632:	691a      	ldr	r2, [r3, #16]
 800c634:	3202      	adds	r2, #2
 800c636:	f103 010c 	add.w	r1, r3, #12
 800c63a:	0092      	lsls	r2, r2, #2
 800c63c:	300c      	adds	r0, #12
 800c63e:	f000 ffe5 	bl	800d60c <memcpy>
 800c642:	ec49 8b10 	vmov	d0, r8, r9
 800c646:	aa18      	add	r2, sp, #96	; 0x60
 800c648:	a917      	add	r1, sp, #92	; 0x5c
 800c64a:	4620      	mov	r0, r4
 800c64c:	f7ff fbd6 	bl	800bdfc <__d2b>
 800c650:	ec49 8b18 	vmov	d8, r8, r9
 800c654:	9016      	str	r0, [sp, #88]	; 0x58
 800c656:	2800      	cmp	r0, #0
 800c658:	f43f af02 	beq.w	800c460 <_strtod_l+0x488>
 800c65c:	2101      	movs	r1, #1
 800c65e:	4620      	mov	r0, r4
 800c660:	f7ff f930 	bl	800b8c4 <__i2b>
 800c664:	4683      	mov	fp, r0
 800c666:	2800      	cmp	r0, #0
 800c668:	f43f aefa 	beq.w	800c460 <_strtod_l+0x488>
 800c66c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c66e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c670:	2e00      	cmp	r6, #0
 800c672:	bfab      	itete	ge
 800c674:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800c676:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800c678:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c67a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800c67e:	bfac      	ite	ge
 800c680:	eb06 0a03 	addge.w	sl, r6, r3
 800c684:	1b9f      	sublt	r7, r3, r6
 800c686:	9b04      	ldr	r3, [sp, #16]
 800c688:	1af6      	subs	r6, r6, r3
 800c68a:	4416      	add	r6, r2
 800c68c:	4ba0      	ldr	r3, [pc, #640]	; (800c910 <_strtod_l+0x938>)
 800c68e:	3e01      	subs	r6, #1
 800c690:	429e      	cmp	r6, r3
 800c692:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c696:	f280 80c4 	bge.w	800c822 <_strtod_l+0x84a>
 800c69a:	1b9b      	subs	r3, r3, r6
 800c69c:	2b1f      	cmp	r3, #31
 800c69e:	eba2 0203 	sub.w	r2, r2, r3
 800c6a2:	f04f 0101 	mov.w	r1, #1
 800c6a6:	f300 80b0 	bgt.w	800c80a <_strtod_l+0x832>
 800c6aa:	fa01 f303 	lsl.w	r3, r1, r3
 800c6ae:	930e      	str	r3, [sp, #56]	; 0x38
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	930d      	str	r3, [sp, #52]	; 0x34
 800c6b4:	eb0a 0602 	add.w	r6, sl, r2
 800c6b8:	9b04      	ldr	r3, [sp, #16]
 800c6ba:	45b2      	cmp	sl, r6
 800c6bc:	4417      	add	r7, r2
 800c6be:	441f      	add	r7, r3
 800c6c0:	4653      	mov	r3, sl
 800c6c2:	bfa8      	it	ge
 800c6c4:	4633      	movge	r3, r6
 800c6c6:	42bb      	cmp	r3, r7
 800c6c8:	bfa8      	it	ge
 800c6ca:	463b      	movge	r3, r7
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	bfc2      	ittt	gt
 800c6d0:	1af6      	subgt	r6, r6, r3
 800c6d2:	1aff      	subgt	r7, r7, r3
 800c6d4:	ebaa 0a03 	subgt.w	sl, sl, r3
 800c6d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	dd17      	ble.n	800c70e <_strtod_l+0x736>
 800c6de:	4659      	mov	r1, fp
 800c6e0:	461a      	mov	r2, r3
 800c6e2:	4620      	mov	r0, r4
 800c6e4:	f7ff f9ae 	bl	800ba44 <__pow5mult>
 800c6e8:	4683      	mov	fp, r0
 800c6ea:	2800      	cmp	r0, #0
 800c6ec:	f43f aeb8 	beq.w	800c460 <_strtod_l+0x488>
 800c6f0:	4601      	mov	r1, r0
 800c6f2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c6f4:	4620      	mov	r0, r4
 800c6f6:	f7ff f8fb 	bl	800b8f0 <__multiply>
 800c6fa:	900b      	str	r0, [sp, #44]	; 0x2c
 800c6fc:	2800      	cmp	r0, #0
 800c6fe:	f43f aeaf 	beq.w	800c460 <_strtod_l+0x488>
 800c702:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c704:	4620      	mov	r0, r4
 800c706:	f7fe ffdd 	bl	800b6c4 <_Bfree>
 800c70a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c70c:	9316      	str	r3, [sp, #88]	; 0x58
 800c70e:	2e00      	cmp	r6, #0
 800c710:	f300 808c 	bgt.w	800c82c <_strtod_l+0x854>
 800c714:	9b08      	ldr	r3, [sp, #32]
 800c716:	2b00      	cmp	r3, #0
 800c718:	dd08      	ble.n	800c72c <_strtod_l+0x754>
 800c71a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c71c:	9905      	ldr	r1, [sp, #20]
 800c71e:	4620      	mov	r0, r4
 800c720:	f7ff f990 	bl	800ba44 <__pow5mult>
 800c724:	9005      	str	r0, [sp, #20]
 800c726:	2800      	cmp	r0, #0
 800c728:	f43f ae9a 	beq.w	800c460 <_strtod_l+0x488>
 800c72c:	2f00      	cmp	r7, #0
 800c72e:	dd08      	ble.n	800c742 <_strtod_l+0x76a>
 800c730:	9905      	ldr	r1, [sp, #20]
 800c732:	463a      	mov	r2, r7
 800c734:	4620      	mov	r0, r4
 800c736:	f7ff f9df 	bl	800baf8 <__lshift>
 800c73a:	9005      	str	r0, [sp, #20]
 800c73c:	2800      	cmp	r0, #0
 800c73e:	f43f ae8f 	beq.w	800c460 <_strtod_l+0x488>
 800c742:	f1ba 0f00 	cmp.w	sl, #0
 800c746:	dd08      	ble.n	800c75a <_strtod_l+0x782>
 800c748:	4659      	mov	r1, fp
 800c74a:	4652      	mov	r2, sl
 800c74c:	4620      	mov	r0, r4
 800c74e:	f7ff f9d3 	bl	800baf8 <__lshift>
 800c752:	4683      	mov	fp, r0
 800c754:	2800      	cmp	r0, #0
 800c756:	f43f ae83 	beq.w	800c460 <_strtod_l+0x488>
 800c75a:	9a05      	ldr	r2, [sp, #20]
 800c75c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c75e:	4620      	mov	r0, r4
 800c760:	f7ff fa52 	bl	800bc08 <__mdiff>
 800c764:	4605      	mov	r5, r0
 800c766:	2800      	cmp	r0, #0
 800c768:	f43f ae7a 	beq.w	800c460 <_strtod_l+0x488>
 800c76c:	68c3      	ldr	r3, [r0, #12]
 800c76e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c770:	2300      	movs	r3, #0
 800c772:	60c3      	str	r3, [r0, #12]
 800c774:	4659      	mov	r1, fp
 800c776:	f7ff fa2b 	bl	800bbd0 <__mcmp>
 800c77a:	2800      	cmp	r0, #0
 800c77c:	da60      	bge.n	800c840 <_strtod_l+0x868>
 800c77e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c780:	ea53 0308 	orrs.w	r3, r3, r8
 800c784:	f040 8084 	bne.w	800c890 <_strtod_l+0x8b8>
 800c788:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d17f      	bne.n	800c890 <_strtod_l+0x8b8>
 800c790:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c794:	0d1b      	lsrs	r3, r3, #20
 800c796:	051b      	lsls	r3, r3, #20
 800c798:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c79c:	d978      	bls.n	800c890 <_strtod_l+0x8b8>
 800c79e:	696b      	ldr	r3, [r5, #20]
 800c7a0:	b913      	cbnz	r3, 800c7a8 <_strtod_l+0x7d0>
 800c7a2:	692b      	ldr	r3, [r5, #16]
 800c7a4:	2b01      	cmp	r3, #1
 800c7a6:	dd73      	ble.n	800c890 <_strtod_l+0x8b8>
 800c7a8:	4629      	mov	r1, r5
 800c7aa:	2201      	movs	r2, #1
 800c7ac:	4620      	mov	r0, r4
 800c7ae:	f7ff f9a3 	bl	800baf8 <__lshift>
 800c7b2:	4659      	mov	r1, fp
 800c7b4:	4605      	mov	r5, r0
 800c7b6:	f7ff fa0b 	bl	800bbd0 <__mcmp>
 800c7ba:	2800      	cmp	r0, #0
 800c7bc:	dd68      	ble.n	800c890 <_strtod_l+0x8b8>
 800c7be:	9904      	ldr	r1, [sp, #16]
 800c7c0:	4a54      	ldr	r2, [pc, #336]	; (800c914 <_strtod_l+0x93c>)
 800c7c2:	464b      	mov	r3, r9
 800c7c4:	2900      	cmp	r1, #0
 800c7c6:	f000 8084 	beq.w	800c8d2 <_strtod_l+0x8fa>
 800c7ca:	ea02 0109 	and.w	r1, r2, r9
 800c7ce:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c7d2:	dc7e      	bgt.n	800c8d2 <_strtod_l+0x8fa>
 800c7d4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c7d8:	f77f aeb3 	ble.w	800c542 <_strtod_l+0x56a>
 800c7dc:	4b4e      	ldr	r3, [pc, #312]	; (800c918 <_strtod_l+0x940>)
 800c7de:	4640      	mov	r0, r8
 800c7e0:	4649      	mov	r1, r9
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	f7f3 ff18 	bl	8000618 <__aeabi_dmul>
 800c7e8:	4b4a      	ldr	r3, [pc, #296]	; (800c914 <_strtod_l+0x93c>)
 800c7ea:	400b      	ands	r3, r1
 800c7ec:	4680      	mov	r8, r0
 800c7ee:	4689      	mov	r9, r1
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	f47f ae3f 	bne.w	800c474 <_strtod_l+0x49c>
 800c7f6:	2322      	movs	r3, #34	; 0x22
 800c7f8:	6023      	str	r3, [r4, #0]
 800c7fa:	e63b      	b.n	800c474 <_strtod_l+0x49c>
 800c7fc:	f04f 32ff 	mov.w	r2, #4294967295
 800c800:	fa02 f303 	lsl.w	r3, r2, r3
 800c804:	ea03 0808 	and.w	r8, r3, r8
 800c808:	e6e8      	b.n	800c5dc <_strtod_l+0x604>
 800c80a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800c80e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800c812:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800c816:	36e2      	adds	r6, #226	; 0xe2
 800c818:	fa01 f306 	lsl.w	r3, r1, r6
 800c81c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800c820:	e748      	b.n	800c6b4 <_strtod_l+0x6dc>
 800c822:	2100      	movs	r1, #0
 800c824:	2301      	movs	r3, #1
 800c826:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800c82a:	e743      	b.n	800c6b4 <_strtod_l+0x6dc>
 800c82c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c82e:	4632      	mov	r2, r6
 800c830:	4620      	mov	r0, r4
 800c832:	f7ff f961 	bl	800baf8 <__lshift>
 800c836:	9016      	str	r0, [sp, #88]	; 0x58
 800c838:	2800      	cmp	r0, #0
 800c83a:	f47f af6b 	bne.w	800c714 <_strtod_l+0x73c>
 800c83e:	e60f      	b.n	800c460 <_strtod_l+0x488>
 800c840:	46ca      	mov	sl, r9
 800c842:	d171      	bne.n	800c928 <_strtod_l+0x950>
 800c844:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c846:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c84a:	b352      	cbz	r2, 800c8a2 <_strtod_l+0x8ca>
 800c84c:	4a33      	ldr	r2, [pc, #204]	; (800c91c <_strtod_l+0x944>)
 800c84e:	4293      	cmp	r3, r2
 800c850:	d12a      	bne.n	800c8a8 <_strtod_l+0x8d0>
 800c852:	9b04      	ldr	r3, [sp, #16]
 800c854:	4641      	mov	r1, r8
 800c856:	b1fb      	cbz	r3, 800c898 <_strtod_l+0x8c0>
 800c858:	4b2e      	ldr	r3, [pc, #184]	; (800c914 <_strtod_l+0x93c>)
 800c85a:	ea09 0303 	and.w	r3, r9, r3
 800c85e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c862:	f04f 32ff 	mov.w	r2, #4294967295
 800c866:	d81a      	bhi.n	800c89e <_strtod_l+0x8c6>
 800c868:	0d1b      	lsrs	r3, r3, #20
 800c86a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c86e:	fa02 f303 	lsl.w	r3, r2, r3
 800c872:	4299      	cmp	r1, r3
 800c874:	d118      	bne.n	800c8a8 <_strtod_l+0x8d0>
 800c876:	4b2a      	ldr	r3, [pc, #168]	; (800c920 <_strtod_l+0x948>)
 800c878:	459a      	cmp	sl, r3
 800c87a:	d102      	bne.n	800c882 <_strtod_l+0x8aa>
 800c87c:	3101      	adds	r1, #1
 800c87e:	f43f adef 	beq.w	800c460 <_strtod_l+0x488>
 800c882:	4b24      	ldr	r3, [pc, #144]	; (800c914 <_strtod_l+0x93c>)
 800c884:	ea0a 0303 	and.w	r3, sl, r3
 800c888:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800c88c:	f04f 0800 	mov.w	r8, #0
 800c890:	9b04      	ldr	r3, [sp, #16]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d1a2      	bne.n	800c7dc <_strtod_l+0x804>
 800c896:	e5ed      	b.n	800c474 <_strtod_l+0x49c>
 800c898:	f04f 33ff 	mov.w	r3, #4294967295
 800c89c:	e7e9      	b.n	800c872 <_strtod_l+0x89a>
 800c89e:	4613      	mov	r3, r2
 800c8a0:	e7e7      	b.n	800c872 <_strtod_l+0x89a>
 800c8a2:	ea53 0308 	orrs.w	r3, r3, r8
 800c8a6:	d08a      	beq.n	800c7be <_strtod_l+0x7e6>
 800c8a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8aa:	b1e3      	cbz	r3, 800c8e6 <_strtod_l+0x90e>
 800c8ac:	ea13 0f0a 	tst.w	r3, sl
 800c8b0:	d0ee      	beq.n	800c890 <_strtod_l+0x8b8>
 800c8b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8b4:	9a04      	ldr	r2, [sp, #16]
 800c8b6:	4640      	mov	r0, r8
 800c8b8:	4649      	mov	r1, r9
 800c8ba:	b1c3      	cbz	r3, 800c8ee <_strtod_l+0x916>
 800c8bc:	f7ff fb6f 	bl	800bf9e <sulp>
 800c8c0:	4602      	mov	r2, r0
 800c8c2:	460b      	mov	r3, r1
 800c8c4:	ec51 0b18 	vmov	r0, r1, d8
 800c8c8:	f7f3 fcf0 	bl	80002ac <__adddf3>
 800c8cc:	4680      	mov	r8, r0
 800c8ce:	4689      	mov	r9, r1
 800c8d0:	e7de      	b.n	800c890 <_strtod_l+0x8b8>
 800c8d2:	4013      	ands	r3, r2
 800c8d4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c8d8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800c8dc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800c8e0:	f04f 38ff 	mov.w	r8, #4294967295
 800c8e4:	e7d4      	b.n	800c890 <_strtod_l+0x8b8>
 800c8e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c8e8:	ea13 0f08 	tst.w	r3, r8
 800c8ec:	e7e0      	b.n	800c8b0 <_strtod_l+0x8d8>
 800c8ee:	f7ff fb56 	bl	800bf9e <sulp>
 800c8f2:	4602      	mov	r2, r0
 800c8f4:	460b      	mov	r3, r1
 800c8f6:	ec51 0b18 	vmov	r0, r1, d8
 800c8fa:	f7f3 fcd5 	bl	80002a8 <__aeabi_dsub>
 800c8fe:	2200      	movs	r2, #0
 800c900:	2300      	movs	r3, #0
 800c902:	4680      	mov	r8, r0
 800c904:	4689      	mov	r9, r1
 800c906:	f7f4 f8ef 	bl	8000ae8 <__aeabi_dcmpeq>
 800c90a:	2800      	cmp	r0, #0
 800c90c:	d0c0      	beq.n	800c890 <_strtod_l+0x8b8>
 800c90e:	e618      	b.n	800c542 <_strtod_l+0x56a>
 800c910:	fffffc02 	.word	0xfffffc02
 800c914:	7ff00000 	.word	0x7ff00000
 800c918:	39500000 	.word	0x39500000
 800c91c:	000fffff 	.word	0x000fffff
 800c920:	7fefffff 	.word	0x7fefffff
 800c924:	0800efc8 	.word	0x0800efc8
 800c928:	4659      	mov	r1, fp
 800c92a:	4628      	mov	r0, r5
 800c92c:	f7ff fac0 	bl	800beb0 <__ratio>
 800c930:	ec57 6b10 	vmov	r6, r7, d0
 800c934:	ee10 0a10 	vmov	r0, s0
 800c938:	2200      	movs	r2, #0
 800c93a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c93e:	4639      	mov	r1, r7
 800c940:	f7f4 f8e6 	bl	8000b10 <__aeabi_dcmple>
 800c944:	2800      	cmp	r0, #0
 800c946:	d071      	beq.n	800ca2c <_strtod_l+0xa54>
 800c948:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d17c      	bne.n	800ca48 <_strtod_l+0xa70>
 800c94e:	f1b8 0f00 	cmp.w	r8, #0
 800c952:	d15a      	bne.n	800ca0a <_strtod_l+0xa32>
 800c954:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d15d      	bne.n	800ca18 <_strtod_l+0xa40>
 800c95c:	4b90      	ldr	r3, [pc, #576]	; (800cba0 <_strtod_l+0xbc8>)
 800c95e:	2200      	movs	r2, #0
 800c960:	4630      	mov	r0, r6
 800c962:	4639      	mov	r1, r7
 800c964:	f7f4 f8ca 	bl	8000afc <__aeabi_dcmplt>
 800c968:	2800      	cmp	r0, #0
 800c96a:	d15c      	bne.n	800ca26 <_strtod_l+0xa4e>
 800c96c:	4630      	mov	r0, r6
 800c96e:	4639      	mov	r1, r7
 800c970:	4b8c      	ldr	r3, [pc, #560]	; (800cba4 <_strtod_l+0xbcc>)
 800c972:	2200      	movs	r2, #0
 800c974:	f7f3 fe50 	bl	8000618 <__aeabi_dmul>
 800c978:	4606      	mov	r6, r0
 800c97a:	460f      	mov	r7, r1
 800c97c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800c980:	9606      	str	r6, [sp, #24]
 800c982:	9307      	str	r3, [sp, #28]
 800c984:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c988:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c98c:	4b86      	ldr	r3, [pc, #536]	; (800cba8 <_strtod_l+0xbd0>)
 800c98e:	ea0a 0303 	and.w	r3, sl, r3
 800c992:	930d      	str	r3, [sp, #52]	; 0x34
 800c994:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c996:	4b85      	ldr	r3, [pc, #532]	; (800cbac <_strtod_l+0xbd4>)
 800c998:	429a      	cmp	r2, r3
 800c99a:	f040 8090 	bne.w	800cabe <_strtod_l+0xae6>
 800c99e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800c9a2:	ec49 8b10 	vmov	d0, r8, r9
 800c9a6:	f7ff f9b9 	bl	800bd1c <__ulp>
 800c9aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c9ae:	ec51 0b10 	vmov	r0, r1, d0
 800c9b2:	f7f3 fe31 	bl	8000618 <__aeabi_dmul>
 800c9b6:	4642      	mov	r2, r8
 800c9b8:	464b      	mov	r3, r9
 800c9ba:	f7f3 fc77 	bl	80002ac <__adddf3>
 800c9be:	460b      	mov	r3, r1
 800c9c0:	4979      	ldr	r1, [pc, #484]	; (800cba8 <_strtod_l+0xbd0>)
 800c9c2:	4a7b      	ldr	r2, [pc, #492]	; (800cbb0 <_strtod_l+0xbd8>)
 800c9c4:	4019      	ands	r1, r3
 800c9c6:	4291      	cmp	r1, r2
 800c9c8:	4680      	mov	r8, r0
 800c9ca:	d944      	bls.n	800ca56 <_strtod_l+0xa7e>
 800c9cc:	ee18 2a90 	vmov	r2, s17
 800c9d0:	4b78      	ldr	r3, [pc, #480]	; (800cbb4 <_strtod_l+0xbdc>)
 800c9d2:	429a      	cmp	r2, r3
 800c9d4:	d104      	bne.n	800c9e0 <_strtod_l+0xa08>
 800c9d6:	ee18 3a10 	vmov	r3, s16
 800c9da:	3301      	adds	r3, #1
 800c9dc:	f43f ad40 	beq.w	800c460 <_strtod_l+0x488>
 800c9e0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800cbb4 <_strtod_l+0xbdc>
 800c9e4:	f04f 38ff 	mov.w	r8, #4294967295
 800c9e8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c9ea:	4620      	mov	r0, r4
 800c9ec:	f7fe fe6a 	bl	800b6c4 <_Bfree>
 800c9f0:	9905      	ldr	r1, [sp, #20]
 800c9f2:	4620      	mov	r0, r4
 800c9f4:	f7fe fe66 	bl	800b6c4 <_Bfree>
 800c9f8:	4659      	mov	r1, fp
 800c9fa:	4620      	mov	r0, r4
 800c9fc:	f7fe fe62 	bl	800b6c4 <_Bfree>
 800ca00:	4629      	mov	r1, r5
 800ca02:	4620      	mov	r0, r4
 800ca04:	f7fe fe5e 	bl	800b6c4 <_Bfree>
 800ca08:	e609      	b.n	800c61e <_strtod_l+0x646>
 800ca0a:	f1b8 0f01 	cmp.w	r8, #1
 800ca0e:	d103      	bne.n	800ca18 <_strtod_l+0xa40>
 800ca10:	f1b9 0f00 	cmp.w	r9, #0
 800ca14:	f43f ad95 	beq.w	800c542 <_strtod_l+0x56a>
 800ca18:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800cb70 <_strtod_l+0xb98>
 800ca1c:	4f60      	ldr	r7, [pc, #384]	; (800cba0 <_strtod_l+0xbc8>)
 800ca1e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ca22:	2600      	movs	r6, #0
 800ca24:	e7ae      	b.n	800c984 <_strtod_l+0x9ac>
 800ca26:	4f5f      	ldr	r7, [pc, #380]	; (800cba4 <_strtod_l+0xbcc>)
 800ca28:	2600      	movs	r6, #0
 800ca2a:	e7a7      	b.n	800c97c <_strtod_l+0x9a4>
 800ca2c:	4b5d      	ldr	r3, [pc, #372]	; (800cba4 <_strtod_l+0xbcc>)
 800ca2e:	4630      	mov	r0, r6
 800ca30:	4639      	mov	r1, r7
 800ca32:	2200      	movs	r2, #0
 800ca34:	f7f3 fdf0 	bl	8000618 <__aeabi_dmul>
 800ca38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca3a:	4606      	mov	r6, r0
 800ca3c:	460f      	mov	r7, r1
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d09c      	beq.n	800c97c <_strtod_l+0x9a4>
 800ca42:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ca46:	e79d      	b.n	800c984 <_strtod_l+0x9ac>
 800ca48:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800cb78 <_strtod_l+0xba0>
 800ca4c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ca50:	ec57 6b17 	vmov	r6, r7, d7
 800ca54:	e796      	b.n	800c984 <_strtod_l+0x9ac>
 800ca56:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800ca5a:	9b04      	ldr	r3, [sp, #16]
 800ca5c:	46ca      	mov	sl, r9
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d1c2      	bne.n	800c9e8 <_strtod_l+0xa10>
 800ca62:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ca66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ca68:	0d1b      	lsrs	r3, r3, #20
 800ca6a:	051b      	lsls	r3, r3, #20
 800ca6c:	429a      	cmp	r2, r3
 800ca6e:	d1bb      	bne.n	800c9e8 <_strtod_l+0xa10>
 800ca70:	4630      	mov	r0, r6
 800ca72:	4639      	mov	r1, r7
 800ca74:	f7f4 f930 	bl	8000cd8 <__aeabi_d2lz>
 800ca78:	f7f3 fda0 	bl	80005bc <__aeabi_l2d>
 800ca7c:	4602      	mov	r2, r0
 800ca7e:	460b      	mov	r3, r1
 800ca80:	4630      	mov	r0, r6
 800ca82:	4639      	mov	r1, r7
 800ca84:	f7f3 fc10 	bl	80002a8 <__aeabi_dsub>
 800ca88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ca8a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ca8e:	ea43 0308 	orr.w	r3, r3, r8
 800ca92:	4313      	orrs	r3, r2
 800ca94:	4606      	mov	r6, r0
 800ca96:	460f      	mov	r7, r1
 800ca98:	d054      	beq.n	800cb44 <_strtod_l+0xb6c>
 800ca9a:	a339      	add	r3, pc, #228	; (adr r3, 800cb80 <_strtod_l+0xba8>)
 800ca9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caa0:	f7f4 f82c 	bl	8000afc <__aeabi_dcmplt>
 800caa4:	2800      	cmp	r0, #0
 800caa6:	f47f ace5 	bne.w	800c474 <_strtod_l+0x49c>
 800caaa:	a337      	add	r3, pc, #220	; (adr r3, 800cb88 <_strtod_l+0xbb0>)
 800caac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab0:	4630      	mov	r0, r6
 800cab2:	4639      	mov	r1, r7
 800cab4:	f7f4 f840 	bl	8000b38 <__aeabi_dcmpgt>
 800cab8:	2800      	cmp	r0, #0
 800caba:	d095      	beq.n	800c9e8 <_strtod_l+0xa10>
 800cabc:	e4da      	b.n	800c474 <_strtod_l+0x49c>
 800cabe:	9b04      	ldr	r3, [sp, #16]
 800cac0:	b333      	cbz	r3, 800cb10 <_strtod_l+0xb38>
 800cac2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cac4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cac8:	d822      	bhi.n	800cb10 <_strtod_l+0xb38>
 800caca:	a331      	add	r3, pc, #196	; (adr r3, 800cb90 <_strtod_l+0xbb8>)
 800cacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad0:	4630      	mov	r0, r6
 800cad2:	4639      	mov	r1, r7
 800cad4:	f7f4 f81c 	bl	8000b10 <__aeabi_dcmple>
 800cad8:	b1a0      	cbz	r0, 800cb04 <_strtod_l+0xb2c>
 800cada:	4639      	mov	r1, r7
 800cadc:	4630      	mov	r0, r6
 800cade:	f7f4 f873 	bl	8000bc8 <__aeabi_d2uiz>
 800cae2:	2801      	cmp	r0, #1
 800cae4:	bf38      	it	cc
 800cae6:	2001      	movcc	r0, #1
 800cae8:	f7f3 fd1c 	bl	8000524 <__aeabi_ui2d>
 800caec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800caee:	4606      	mov	r6, r0
 800caf0:	460f      	mov	r7, r1
 800caf2:	bb23      	cbnz	r3, 800cb3e <_strtod_l+0xb66>
 800caf4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800caf8:	9010      	str	r0, [sp, #64]	; 0x40
 800cafa:	9311      	str	r3, [sp, #68]	; 0x44
 800cafc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cb00:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800cb04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cb08:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800cb0c:	1a9b      	subs	r3, r3, r2
 800cb0e:	930f      	str	r3, [sp, #60]	; 0x3c
 800cb10:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800cb14:	eeb0 0a48 	vmov.f32	s0, s16
 800cb18:	eef0 0a68 	vmov.f32	s1, s17
 800cb1c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800cb20:	f7ff f8fc 	bl	800bd1c <__ulp>
 800cb24:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800cb28:	ec53 2b10 	vmov	r2, r3, d0
 800cb2c:	f7f3 fd74 	bl	8000618 <__aeabi_dmul>
 800cb30:	ec53 2b18 	vmov	r2, r3, d8
 800cb34:	f7f3 fbba 	bl	80002ac <__adddf3>
 800cb38:	4680      	mov	r8, r0
 800cb3a:	4689      	mov	r9, r1
 800cb3c:	e78d      	b.n	800ca5a <_strtod_l+0xa82>
 800cb3e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800cb42:	e7db      	b.n	800cafc <_strtod_l+0xb24>
 800cb44:	a314      	add	r3, pc, #80	; (adr r3, 800cb98 <_strtod_l+0xbc0>)
 800cb46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb4a:	f7f3 ffd7 	bl	8000afc <__aeabi_dcmplt>
 800cb4e:	e7b3      	b.n	800cab8 <_strtod_l+0xae0>
 800cb50:	2300      	movs	r3, #0
 800cb52:	930a      	str	r3, [sp, #40]	; 0x28
 800cb54:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800cb56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cb58:	6013      	str	r3, [r2, #0]
 800cb5a:	f7ff ba7c 	b.w	800c056 <_strtod_l+0x7e>
 800cb5e:	2a65      	cmp	r2, #101	; 0x65
 800cb60:	f43f ab75 	beq.w	800c24e <_strtod_l+0x276>
 800cb64:	2a45      	cmp	r2, #69	; 0x45
 800cb66:	f43f ab72 	beq.w	800c24e <_strtod_l+0x276>
 800cb6a:	2301      	movs	r3, #1
 800cb6c:	f7ff bbaa 	b.w	800c2c4 <_strtod_l+0x2ec>
 800cb70:	00000000 	.word	0x00000000
 800cb74:	bff00000 	.word	0xbff00000
 800cb78:	00000000 	.word	0x00000000
 800cb7c:	3ff00000 	.word	0x3ff00000
 800cb80:	94a03595 	.word	0x94a03595
 800cb84:	3fdfffff 	.word	0x3fdfffff
 800cb88:	35afe535 	.word	0x35afe535
 800cb8c:	3fe00000 	.word	0x3fe00000
 800cb90:	ffc00000 	.word	0xffc00000
 800cb94:	41dfffff 	.word	0x41dfffff
 800cb98:	94a03595 	.word	0x94a03595
 800cb9c:	3fcfffff 	.word	0x3fcfffff
 800cba0:	3ff00000 	.word	0x3ff00000
 800cba4:	3fe00000 	.word	0x3fe00000
 800cba8:	7ff00000 	.word	0x7ff00000
 800cbac:	7fe00000 	.word	0x7fe00000
 800cbb0:	7c9fffff 	.word	0x7c9fffff
 800cbb4:	7fefffff 	.word	0x7fefffff

0800cbb8 <_strtod_r>:
 800cbb8:	4b01      	ldr	r3, [pc, #4]	; (800cbc0 <_strtod_r+0x8>)
 800cbba:	f7ff ba0d 	b.w	800bfd8 <_strtod_l>
 800cbbe:	bf00      	nop
 800cbc0:	20000078 	.word	0x20000078

0800cbc4 <_strtol_l.constprop.0>:
 800cbc4:	2b01      	cmp	r3, #1
 800cbc6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbca:	d001      	beq.n	800cbd0 <_strtol_l.constprop.0+0xc>
 800cbcc:	2b24      	cmp	r3, #36	; 0x24
 800cbce:	d906      	bls.n	800cbde <_strtol_l.constprop.0+0x1a>
 800cbd0:	f7fd fd88 	bl	800a6e4 <__errno>
 800cbd4:	2316      	movs	r3, #22
 800cbd6:	6003      	str	r3, [r0, #0]
 800cbd8:	2000      	movs	r0, #0
 800cbda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbde:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ccc4 <_strtol_l.constprop.0+0x100>
 800cbe2:	460d      	mov	r5, r1
 800cbe4:	462e      	mov	r6, r5
 800cbe6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cbea:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800cbee:	f017 0708 	ands.w	r7, r7, #8
 800cbf2:	d1f7      	bne.n	800cbe4 <_strtol_l.constprop.0+0x20>
 800cbf4:	2c2d      	cmp	r4, #45	; 0x2d
 800cbf6:	d132      	bne.n	800cc5e <_strtol_l.constprop.0+0x9a>
 800cbf8:	782c      	ldrb	r4, [r5, #0]
 800cbfa:	2701      	movs	r7, #1
 800cbfc:	1cb5      	adds	r5, r6, #2
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d05b      	beq.n	800ccba <_strtol_l.constprop.0+0xf6>
 800cc02:	2b10      	cmp	r3, #16
 800cc04:	d109      	bne.n	800cc1a <_strtol_l.constprop.0+0x56>
 800cc06:	2c30      	cmp	r4, #48	; 0x30
 800cc08:	d107      	bne.n	800cc1a <_strtol_l.constprop.0+0x56>
 800cc0a:	782c      	ldrb	r4, [r5, #0]
 800cc0c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800cc10:	2c58      	cmp	r4, #88	; 0x58
 800cc12:	d14d      	bne.n	800ccb0 <_strtol_l.constprop.0+0xec>
 800cc14:	786c      	ldrb	r4, [r5, #1]
 800cc16:	2310      	movs	r3, #16
 800cc18:	3502      	adds	r5, #2
 800cc1a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800cc1e:	f108 38ff 	add.w	r8, r8, #4294967295
 800cc22:	f04f 0e00 	mov.w	lr, #0
 800cc26:	fbb8 f9f3 	udiv	r9, r8, r3
 800cc2a:	4676      	mov	r6, lr
 800cc2c:	fb03 8a19 	mls	sl, r3, r9, r8
 800cc30:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800cc34:	f1bc 0f09 	cmp.w	ip, #9
 800cc38:	d816      	bhi.n	800cc68 <_strtol_l.constprop.0+0xa4>
 800cc3a:	4664      	mov	r4, ip
 800cc3c:	42a3      	cmp	r3, r4
 800cc3e:	dd24      	ble.n	800cc8a <_strtol_l.constprop.0+0xc6>
 800cc40:	f1be 3fff 	cmp.w	lr, #4294967295
 800cc44:	d008      	beq.n	800cc58 <_strtol_l.constprop.0+0x94>
 800cc46:	45b1      	cmp	r9, r6
 800cc48:	d31c      	bcc.n	800cc84 <_strtol_l.constprop.0+0xc0>
 800cc4a:	d101      	bne.n	800cc50 <_strtol_l.constprop.0+0x8c>
 800cc4c:	45a2      	cmp	sl, r4
 800cc4e:	db19      	blt.n	800cc84 <_strtol_l.constprop.0+0xc0>
 800cc50:	fb06 4603 	mla	r6, r6, r3, r4
 800cc54:	f04f 0e01 	mov.w	lr, #1
 800cc58:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cc5c:	e7e8      	b.n	800cc30 <_strtol_l.constprop.0+0x6c>
 800cc5e:	2c2b      	cmp	r4, #43	; 0x2b
 800cc60:	bf04      	itt	eq
 800cc62:	782c      	ldrbeq	r4, [r5, #0]
 800cc64:	1cb5      	addeq	r5, r6, #2
 800cc66:	e7ca      	b.n	800cbfe <_strtol_l.constprop.0+0x3a>
 800cc68:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800cc6c:	f1bc 0f19 	cmp.w	ip, #25
 800cc70:	d801      	bhi.n	800cc76 <_strtol_l.constprop.0+0xb2>
 800cc72:	3c37      	subs	r4, #55	; 0x37
 800cc74:	e7e2      	b.n	800cc3c <_strtol_l.constprop.0+0x78>
 800cc76:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cc7a:	f1bc 0f19 	cmp.w	ip, #25
 800cc7e:	d804      	bhi.n	800cc8a <_strtol_l.constprop.0+0xc6>
 800cc80:	3c57      	subs	r4, #87	; 0x57
 800cc82:	e7db      	b.n	800cc3c <_strtol_l.constprop.0+0x78>
 800cc84:	f04f 3eff 	mov.w	lr, #4294967295
 800cc88:	e7e6      	b.n	800cc58 <_strtol_l.constprop.0+0x94>
 800cc8a:	f1be 3fff 	cmp.w	lr, #4294967295
 800cc8e:	d105      	bne.n	800cc9c <_strtol_l.constprop.0+0xd8>
 800cc90:	2322      	movs	r3, #34	; 0x22
 800cc92:	6003      	str	r3, [r0, #0]
 800cc94:	4646      	mov	r6, r8
 800cc96:	b942      	cbnz	r2, 800ccaa <_strtol_l.constprop.0+0xe6>
 800cc98:	4630      	mov	r0, r6
 800cc9a:	e79e      	b.n	800cbda <_strtol_l.constprop.0+0x16>
 800cc9c:	b107      	cbz	r7, 800cca0 <_strtol_l.constprop.0+0xdc>
 800cc9e:	4276      	negs	r6, r6
 800cca0:	2a00      	cmp	r2, #0
 800cca2:	d0f9      	beq.n	800cc98 <_strtol_l.constprop.0+0xd4>
 800cca4:	f1be 0f00 	cmp.w	lr, #0
 800cca8:	d000      	beq.n	800ccac <_strtol_l.constprop.0+0xe8>
 800ccaa:	1e69      	subs	r1, r5, #1
 800ccac:	6011      	str	r1, [r2, #0]
 800ccae:	e7f3      	b.n	800cc98 <_strtol_l.constprop.0+0xd4>
 800ccb0:	2430      	movs	r4, #48	; 0x30
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d1b1      	bne.n	800cc1a <_strtol_l.constprop.0+0x56>
 800ccb6:	2308      	movs	r3, #8
 800ccb8:	e7af      	b.n	800cc1a <_strtol_l.constprop.0+0x56>
 800ccba:	2c30      	cmp	r4, #48	; 0x30
 800ccbc:	d0a5      	beq.n	800cc0a <_strtol_l.constprop.0+0x46>
 800ccbe:	230a      	movs	r3, #10
 800ccc0:	e7ab      	b.n	800cc1a <_strtol_l.constprop.0+0x56>
 800ccc2:	bf00      	nop
 800ccc4:	0800eff1 	.word	0x0800eff1

0800ccc8 <_strtol_r>:
 800ccc8:	f7ff bf7c 	b.w	800cbc4 <_strtol_l.constprop.0>

0800cccc <__ssputs_r>:
 800cccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccd0:	688e      	ldr	r6, [r1, #8]
 800ccd2:	461f      	mov	r7, r3
 800ccd4:	42be      	cmp	r6, r7
 800ccd6:	680b      	ldr	r3, [r1, #0]
 800ccd8:	4682      	mov	sl, r0
 800ccda:	460c      	mov	r4, r1
 800ccdc:	4690      	mov	r8, r2
 800ccde:	d82c      	bhi.n	800cd3a <__ssputs_r+0x6e>
 800cce0:	898a      	ldrh	r2, [r1, #12]
 800cce2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cce6:	d026      	beq.n	800cd36 <__ssputs_r+0x6a>
 800cce8:	6965      	ldr	r5, [r4, #20]
 800ccea:	6909      	ldr	r1, [r1, #16]
 800ccec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ccf0:	eba3 0901 	sub.w	r9, r3, r1
 800ccf4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ccf8:	1c7b      	adds	r3, r7, #1
 800ccfa:	444b      	add	r3, r9
 800ccfc:	106d      	asrs	r5, r5, #1
 800ccfe:	429d      	cmp	r5, r3
 800cd00:	bf38      	it	cc
 800cd02:	461d      	movcc	r5, r3
 800cd04:	0553      	lsls	r3, r2, #21
 800cd06:	d527      	bpl.n	800cd58 <__ssputs_r+0x8c>
 800cd08:	4629      	mov	r1, r5
 800cd0a:	f7fe fc0f 	bl	800b52c <_malloc_r>
 800cd0e:	4606      	mov	r6, r0
 800cd10:	b360      	cbz	r0, 800cd6c <__ssputs_r+0xa0>
 800cd12:	6921      	ldr	r1, [r4, #16]
 800cd14:	464a      	mov	r2, r9
 800cd16:	f000 fc79 	bl	800d60c <memcpy>
 800cd1a:	89a3      	ldrh	r3, [r4, #12]
 800cd1c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cd20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd24:	81a3      	strh	r3, [r4, #12]
 800cd26:	6126      	str	r6, [r4, #16]
 800cd28:	6165      	str	r5, [r4, #20]
 800cd2a:	444e      	add	r6, r9
 800cd2c:	eba5 0509 	sub.w	r5, r5, r9
 800cd30:	6026      	str	r6, [r4, #0]
 800cd32:	60a5      	str	r5, [r4, #8]
 800cd34:	463e      	mov	r6, r7
 800cd36:	42be      	cmp	r6, r7
 800cd38:	d900      	bls.n	800cd3c <__ssputs_r+0x70>
 800cd3a:	463e      	mov	r6, r7
 800cd3c:	6820      	ldr	r0, [r4, #0]
 800cd3e:	4632      	mov	r2, r6
 800cd40:	4641      	mov	r1, r8
 800cd42:	f000 fc05 	bl	800d550 <memmove>
 800cd46:	68a3      	ldr	r3, [r4, #8]
 800cd48:	1b9b      	subs	r3, r3, r6
 800cd4a:	60a3      	str	r3, [r4, #8]
 800cd4c:	6823      	ldr	r3, [r4, #0]
 800cd4e:	4433      	add	r3, r6
 800cd50:	6023      	str	r3, [r4, #0]
 800cd52:	2000      	movs	r0, #0
 800cd54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd58:	462a      	mov	r2, r5
 800cd5a:	f001 f80a 	bl	800dd72 <_realloc_r>
 800cd5e:	4606      	mov	r6, r0
 800cd60:	2800      	cmp	r0, #0
 800cd62:	d1e0      	bne.n	800cd26 <__ssputs_r+0x5a>
 800cd64:	6921      	ldr	r1, [r4, #16]
 800cd66:	4650      	mov	r0, sl
 800cd68:	f7fe fb6c 	bl	800b444 <_free_r>
 800cd6c:	230c      	movs	r3, #12
 800cd6e:	f8ca 3000 	str.w	r3, [sl]
 800cd72:	89a3      	ldrh	r3, [r4, #12]
 800cd74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd78:	81a3      	strh	r3, [r4, #12]
 800cd7a:	f04f 30ff 	mov.w	r0, #4294967295
 800cd7e:	e7e9      	b.n	800cd54 <__ssputs_r+0x88>

0800cd80 <_svfiprintf_r>:
 800cd80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd84:	4698      	mov	r8, r3
 800cd86:	898b      	ldrh	r3, [r1, #12]
 800cd88:	061b      	lsls	r3, r3, #24
 800cd8a:	b09d      	sub	sp, #116	; 0x74
 800cd8c:	4607      	mov	r7, r0
 800cd8e:	460d      	mov	r5, r1
 800cd90:	4614      	mov	r4, r2
 800cd92:	d50e      	bpl.n	800cdb2 <_svfiprintf_r+0x32>
 800cd94:	690b      	ldr	r3, [r1, #16]
 800cd96:	b963      	cbnz	r3, 800cdb2 <_svfiprintf_r+0x32>
 800cd98:	2140      	movs	r1, #64	; 0x40
 800cd9a:	f7fe fbc7 	bl	800b52c <_malloc_r>
 800cd9e:	6028      	str	r0, [r5, #0]
 800cda0:	6128      	str	r0, [r5, #16]
 800cda2:	b920      	cbnz	r0, 800cdae <_svfiprintf_r+0x2e>
 800cda4:	230c      	movs	r3, #12
 800cda6:	603b      	str	r3, [r7, #0]
 800cda8:	f04f 30ff 	mov.w	r0, #4294967295
 800cdac:	e0d0      	b.n	800cf50 <_svfiprintf_r+0x1d0>
 800cdae:	2340      	movs	r3, #64	; 0x40
 800cdb0:	616b      	str	r3, [r5, #20]
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	9309      	str	r3, [sp, #36]	; 0x24
 800cdb6:	2320      	movs	r3, #32
 800cdb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cdbc:	f8cd 800c 	str.w	r8, [sp, #12]
 800cdc0:	2330      	movs	r3, #48	; 0x30
 800cdc2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cf68 <_svfiprintf_r+0x1e8>
 800cdc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cdca:	f04f 0901 	mov.w	r9, #1
 800cdce:	4623      	mov	r3, r4
 800cdd0:	469a      	mov	sl, r3
 800cdd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cdd6:	b10a      	cbz	r2, 800cddc <_svfiprintf_r+0x5c>
 800cdd8:	2a25      	cmp	r2, #37	; 0x25
 800cdda:	d1f9      	bne.n	800cdd0 <_svfiprintf_r+0x50>
 800cddc:	ebba 0b04 	subs.w	fp, sl, r4
 800cde0:	d00b      	beq.n	800cdfa <_svfiprintf_r+0x7a>
 800cde2:	465b      	mov	r3, fp
 800cde4:	4622      	mov	r2, r4
 800cde6:	4629      	mov	r1, r5
 800cde8:	4638      	mov	r0, r7
 800cdea:	f7ff ff6f 	bl	800cccc <__ssputs_r>
 800cdee:	3001      	adds	r0, #1
 800cdf0:	f000 80a9 	beq.w	800cf46 <_svfiprintf_r+0x1c6>
 800cdf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cdf6:	445a      	add	r2, fp
 800cdf8:	9209      	str	r2, [sp, #36]	; 0x24
 800cdfa:	f89a 3000 	ldrb.w	r3, [sl]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	f000 80a1 	beq.w	800cf46 <_svfiprintf_r+0x1c6>
 800ce04:	2300      	movs	r3, #0
 800ce06:	f04f 32ff 	mov.w	r2, #4294967295
 800ce0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce0e:	f10a 0a01 	add.w	sl, sl, #1
 800ce12:	9304      	str	r3, [sp, #16]
 800ce14:	9307      	str	r3, [sp, #28]
 800ce16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ce1a:	931a      	str	r3, [sp, #104]	; 0x68
 800ce1c:	4654      	mov	r4, sl
 800ce1e:	2205      	movs	r2, #5
 800ce20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce24:	4850      	ldr	r0, [pc, #320]	; (800cf68 <_svfiprintf_r+0x1e8>)
 800ce26:	f7f3 f9e3 	bl	80001f0 <memchr>
 800ce2a:	9a04      	ldr	r2, [sp, #16]
 800ce2c:	b9d8      	cbnz	r0, 800ce66 <_svfiprintf_r+0xe6>
 800ce2e:	06d0      	lsls	r0, r2, #27
 800ce30:	bf44      	itt	mi
 800ce32:	2320      	movmi	r3, #32
 800ce34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce38:	0711      	lsls	r1, r2, #28
 800ce3a:	bf44      	itt	mi
 800ce3c:	232b      	movmi	r3, #43	; 0x2b
 800ce3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce42:	f89a 3000 	ldrb.w	r3, [sl]
 800ce46:	2b2a      	cmp	r3, #42	; 0x2a
 800ce48:	d015      	beq.n	800ce76 <_svfiprintf_r+0xf6>
 800ce4a:	9a07      	ldr	r2, [sp, #28]
 800ce4c:	4654      	mov	r4, sl
 800ce4e:	2000      	movs	r0, #0
 800ce50:	f04f 0c0a 	mov.w	ip, #10
 800ce54:	4621      	mov	r1, r4
 800ce56:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce5a:	3b30      	subs	r3, #48	; 0x30
 800ce5c:	2b09      	cmp	r3, #9
 800ce5e:	d94d      	bls.n	800cefc <_svfiprintf_r+0x17c>
 800ce60:	b1b0      	cbz	r0, 800ce90 <_svfiprintf_r+0x110>
 800ce62:	9207      	str	r2, [sp, #28]
 800ce64:	e014      	b.n	800ce90 <_svfiprintf_r+0x110>
 800ce66:	eba0 0308 	sub.w	r3, r0, r8
 800ce6a:	fa09 f303 	lsl.w	r3, r9, r3
 800ce6e:	4313      	orrs	r3, r2
 800ce70:	9304      	str	r3, [sp, #16]
 800ce72:	46a2      	mov	sl, r4
 800ce74:	e7d2      	b.n	800ce1c <_svfiprintf_r+0x9c>
 800ce76:	9b03      	ldr	r3, [sp, #12]
 800ce78:	1d19      	adds	r1, r3, #4
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	9103      	str	r1, [sp, #12]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	bfbb      	ittet	lt
 800ce82:	425b      	neglt	r3, r3
 800ce84:	f042 0202 	orrlt.w	r2, r2, #2
 800ce88:	9307      	strge	r3, [sp, #28]
 800ce8a:	9307      	strlt	r3, [sp, #28]
 800ce8c:	bfb8      	it	lt
 800ce8e:	9204      	strlt	r2, [sp, #16]
 800ce90:	7823      	ldrb	r3, [r4, #0]
 800ce92:	2b2e      	cmp	r3, #46	; 0x2e
 800ce94:	d10c      	bne.n	800ceb0 <_svfiprintf_r+0x130>
 800ce96:	7863      	ldrb	r3, [r4, #1]
 800ce98:	2b2a      	cmp	r3, #42	; 0x2a
 800ce9a:	d134      	bne.n	800cf06 <_svfiprintf_r+0x186>
 800ce9c:	9b03      	ldr	r3, [sp, #12]
 800ce9e:	1d1a      	adds	r2, r3, #4
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	9203      	str	r2, [sp, #12]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	bfb8      	it	lt
 800cea8:	f04f 33ff 	movlt.w	r3, #4294967295
 800ceac:	3402      	adds	r4, #2
 800ceae:	9305      	str	r3, [sp, #20]
 800ceb0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800cf78 <_svfiprintf_r+0x1f8>
 800ceb4:	7821      	ldrb	r1, [r4, #0]
 800ceb6:	2203      	movs	r2, #3
 800ceb8:	4650      	mov	r0, sl
 800ceba:	f7f3 f999 	bl	80001f0 <memchr>
 800cebe:	b138      	cbz	r0, 800ced0 <_svfiprintf_r+0x150>
 800cec0:	9b04      	ldr	r3, [sp, #16]
 800cec2:	eba0 000a 	sub.w	r0, r0, sl
 800cec6:	2240      	movs	r2, #64	; 0x40
 800cec8:	4082      	lsls	r2, r0
 800ceca:	4313      	orrs	r3, r2
 800cecc:	3401      	adds	r4, #1
 800cece:	9304      	str	r3, [sp, #16]
 800ced0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ced4:	4825      	ldr	r0, [pc, #148]	; (800cf6c <_svfiprintf_r+0x1ec>)
 800ced6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ceda:	2206      	movs	r2, #6
 800cedc:	f7f3 f988 	bl	80001f0 <memchr>
 800cee0:	2800      	cmp	r0, #0
 800cee2:	d038      	beq.n	800cf56 <_svfiprintf_r+0x1d6>
 800cee4:	4b22      	ldr	r3, [pc, #136]	; (800cf70 <_svfiprintf_r+0x1f0>)
 800cee6:	bb1b      	cbnz	r3, 800cf30 <_svfiprintf_r+0x1b0>
 800cee8:	9b03      	ldr	r3, [sp, #12]
 800ceea:	3307      	adds	r3, #7
 800ceec:	f023 0307 	bic.w	r3, r3, #7
 800cef0:	3308      	adds	r3, #8
 800cef2:	9303      	str	r3, [sp, #12]
 800cef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cef6:	4433      	add	r3, r6
 800cef8:	9309      	str	r3, [sp, #36]	; 0x24
 800cefa:	e768      	b.n	800cdce <_svfiprintf_r+0x4e>
 800cefc:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf00:	460c      	mov	r4, r1
 800cf02:	2001      	movs	r0, #1
 800cf04:	e7a6      	b.n	800ce54 <_svfiprintf_r+0xd4>
 800cf06:	2300      	movs	r3, #0
 800cf08:	3401      	adds	r4, #1
 800cf0a:	9305      	str	r3, [sp, #20]
 800cf0c:	4619      	mov	r1, r3
 800cf0e:	f04f 0c0a 	mov.w	ip, #10
 800cf12:	4620      	mov	r0, r4
 800cf14:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf18:	3a30      	subs	r2, #48	; 0x30
 800cf1a:	2a09      	cmp	r2, #9
 800cf1c:	d903      	bls.n	800cf26 <_svfiprintf_r+0x1a6>
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d0c6      	beq.n	800ceb0 <_svfiprintf_r+0x130>
 800cf22:	9105      	str	r1, [sp, #20]
 800cf24:	e7c4      	b.n	800ceb0 <_svfiprintf_r+0x130>
 800cf26:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf2a:	4604      	mov	r4, r0
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	e7f0      	b.n	800cf12 <_svfiprintf_r+0x192>
 800cf30:	ab03      	add	r3, sp, #12
 800cf32:	9300      	str	r3, [sp, #0]
 800cf34:	462a      	mov	r2, r5
 800cf36:	4b0f      	ldr	r3, [pc, #60]	; (800cf74 <_svfiprintf_r+0x1f4>)
 800cf38:	a904      	add	r1, sp, #16
 800cf3a:	4638      	mov	r0, r7
 800cf3c:	f7fc fbc4 	bl	80096c8 <_printf_float>
 800cf40:	1c42      	adds	r2, r0, #1
 800cf42:	4606      	mov	r6, r0
 800cf44:	d1d6      	bne.n	800cef4 <_svfiprintf_r+0x174>
 800cf46:	89ab      	ldrh	r3, [r5, #12]
 800cf48:	065b      	lsls	r3, r3, #25
 800cf4a:	f53f af2d 	bmi.w	800cda8 <_svfiprintf_r+0x28>
 800cf4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cf50:	b01d      	add	sp, #116	; 0x74
 800cf52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf56:	ab03      	add	r3, sp, #12
 800cf58:	9300      	str	r3, [sp, #0]
 800cf5a:	462a      	mov	r2, r5
 800cf5c:	4b05      	ldr	r3, [pc, #20]	; (800cf74 <_svfiprintf_r+0x1f4>)
 800cf5e:	a904      	add	r1, sp, #16
 800cf60:	4638      	mov	r0, r7
 800cf62:	f7fc fe55 	bl	8009c10 <_printf_i>
 800cf66:	e7eb      	b.n	800cf40 <_svfiprintf_r+0x1c0>
 800cf68:	0800f0f1 	.word	0x0800f0f1
 800cf6c:	0800f0fb 	.word	0x0800f0fb
 800cf70:	080096c9 	.word	0x080096c9
 800cf74:	0800cccd 	.word	0x0800cccd
 800cf78:	0800f0f7 	.word	0x0800f0f7

0800cf7c <__sfputc_r>:
 800cf7c:	6893      	ldr	r3, [r2, #8]
 800cf7e:	3b01      	subs	r3, #1
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	b410      	push	{r4}
 800cf84:	6093      	str	r3, [r2, #8]
 800cf86:	da08      	bge.n	800cf9a <__sfputc_r+0x1e>
 800cf88:	6994      	ldr	r4, [r2, #24]
 800cf8a:	42a3      	cmp	r3, r4
 800cf8c:	db01      	blt.n	800cf92 <__sfputc_r+0x16>
 800cf8e:	290a      	cmp	r1, #10
 800cf90:	d103      	bne.n	800cf9a <__sfputc_r+0x1e>
 800cf92:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf96:	f000 ba45 	b.w	800d424 <__swbuf_r>
 800cf9a:	6813      	ldr	r3, [r2, #0]
 800cf9c:	1c58      	adds	r0, r3, #1
 800cf9e:	6010      	str	r0, [r2, #0]
 800cfa0:	7019      	strb	r1, [r3, #0]
 800cfa2:	4608      	mov	r0, r1
 800cfa4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cfa8:	4770      	bx	lr

0800cfaa <__sfputs_r>:
 800cfaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfac:	4606      	mov	r6, r0
 800cfae:	460f      	mov	r7, r1
 800cfb0:	4614      	mov	r4, r2
 800cfb2:	18d5      	adds	r5, r2, r3
 800cfb4:	42ac      	cmp	r4, r5
 800cfb6:	d101      	bne.n	800cfbc <__sfputs_r+0x12>
 800cfb8:	2000      	movs	r0, #0
 800cfba:	e007      	b.n	800cfcc <__sfputs_r+0x22>
 800cfbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfc0:	463a      	mov	r2, r7
 800cfc2:	4630      	mov	r0, r6
 800cfc4:	f7ff ffda 	bl	800cf7c <__sfputc_r>
 800cfc8:	1c43      	adds	r3, r0, #1
 800cfca:	d1f3      	bne.n	800cfb4 <__sfputs_r+0xa>
 800cfcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cfd0 <_vfiprintf_r>:
 800cfd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfd4:	460d      	mov	r5, r1
 800cfd6:	b09d      	sub	sp, #116	; 0x74
 800cfd8:	4614      	mov	r4, r2
 800cfda:	4698      	mov	r8, r3
 800cfdc:	4606      	mov	r6, r0
 800cfde:	b118      	cbz	r0, 800cfe8 <_vfiprintf_r+0x18>
 800cfe0:	6a03      	ldr	r3, [r0, #32]
 800cfe2:	b90b      	cbnz	r3, 800cfe8 <_vfiprintf_r+0x18>
 800cfe4:	f7fd f9d2 	bl	800a38c <__sinit>
 800cfe8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cfea:	07d9      	lsls	r1, r3, #31
 800cfec:	d405      	bmi.n	800cffa <_vfiprintf_r+0x2a>
 800cfee:	89ab      	ldrh	r3, [r5, #12]
 800cff0:	059a      	lsls	r2, r3, #22
 800cff2:	d402      	bmi.n	800cffa <_vfiprintf_r+0x2a>
 800cff4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cff6:	f7fd fba0 	bl	800a73a <__retarget_lock_acquire_recursive>
 800cffa:	89ab      	ldrh	r3, [r5, #12]
 800cffc:	071b      	lsls	r3, r3, #28
 800cffe:	d501      	bpl.n	800d004 <_vfiprintf_r+0x34>
 800d000:	692b      	ldr	r3, [r5, #16]
 800d002:	b99b      	cbnz	r3, 800d02c <_vfiprintf_r+0x5c>
 800d004:	4629      	mov	r1, r5
 800d006:	4630      	mov	r0, r6
 800d008:	f000 fa4a 	bl	800d4a0 <__swsetup_r>
 800d00c:	b170      	cbz	r0, 800d02c <_vfiprintf_r+0x5c>
 800d00e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d010:	07dc      	lsls	r4, r3, #31
 800d012:	d504      	bpl.n	800d01e <_vfiprintf_r+0x4e>
 800d014:	f04f 30ff 	mov.w	r0, #4294967295
 800d018:	b01d      	add	sp, #116	; 0x74
 800d01a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d01e:	89ab      	ldrh	r3, [r5, #12]
 800d020:	0598      	lsls	r0, r3, #22
 800d022:	d4f7      	bmi.n	800d014 <_vfiprintf_r+0x44>
 800d024:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d026:	f7fd fb89 	bl	800a73c <__retarget_lock_release_recursive>
 800d02a:	e7f3      	b.n	800d014 <_vfiprintf_r+0x44>
 800d02c:	2300      	movs	r3, #0
 800d02e:	9309      	str	r3, [sp, #36]	; 0x24
 800d030:	2320      	movs	r3, #32
 800d032:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d036:	f8cd 800c 	str.w	r8, [sp, #12]
 800d03a:	2330      	movs	r3, #48	; 0x30
 800d03c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d1f0 <_vfiprintf_r+0x220>
 800d040:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d044:	f04f 0901 	mov.w	r9, #1
 800d048:	4623      	mov	r3, r4
 800d04a:	469a      	mov	sl, r3
 800d04c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d050:	b10a      	cbz	r2, 800d056 <_vfiprintf_r+0x86>
 800d052:	2a25      	cmp	r2, #37	; 0x25
 800d054:	d1f9      	bne.n	800d04a <_vfiprintf_r+0x7a>
 800d056:	ebba 0b04 	subs.w	fp, sl, r4
 800d05a:	d00b      	beq.n	800d074 <_vfiprintf_r+0xa4>
 800d05c:	465b      	mov	r3, fp
 800d05e:	4622      	mov	r2, r4
 800d060:	4629      	mov	r1, r5
 800d062:	4630      	mov	r0, r6
 800d064:	f7ff ffa1 	bl	800cfaa <__sfputs_r>
 800d068:	3001      	adds	r0, #1
 800d06a:	f000 80a9 	beq.w	800d1c0 <_vfiprintf_r+0x1f0>
 800d06e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d070:	445a      	add	r2, fp
 800d072:	9209      	str	r2, [sp, #36]	; 0x24
 800d074:	f89a 3000 	ldrb.w	r3, [sl]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	f000 80a1 	beq.w	800d1c0 <_vfiprintf_r+0x1f0>
 800d07e:	2300      	movs	r3, #0
 800d080:	f04f 32ff 	mov.w	r2, #4294967295
 800d084:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d088:	f10a 0a01 	add.w	sl, sl, #1
 800d08c:	9304      	str	r3, [sp, #16]
 800d08e:	9307      	str	r3, [sp, #28]
 800d090:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d094:	931a      	str	r3, [sp, #104]	; 0x68
 800d096:	4654      	mov	r4, sl
 800d098:	2205      	movs	r2, #5
 800d09a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d09e:	4854      	ldr	r0, [pc, #336]	; (800d1f0 <_vfiprintf_r+0x220>)
 800d0a0:	f7f3 f8a6 	bl	80001f0 <memchr>
 800d0a4:	9a04      	ldr	r2, [sp, #16]
 800d0a6:	b9d8      	cbnz	r0, 800d0e0 <_vfiprintf_r+0x110>
 800d0a8:	06d1      	lsls	r1, r2, #27
 800d0aa:	bf44      	itt	mi
 800d0ac:	2320      	movmi	r3, #32
 800d0ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0b2:	0713      	lsls	r3, r2, #28
 800d0b4:	bf44      	itt	mi
 800d0b6:	232b      	movmi	r3, #43	; 0x2b
 800d0b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0bc:	f89a 3000 	ldrb.w	r3, [sl]
 800d0c0:	2b2a      	cmp	r3, #42	; 0x2a
 800d0c2:	d015      	beq.n	800d0f0 <_vfiprintf_r+0x120>
 800d0c4:	9a07      	ldr	r2, [sp, #28]
 800d0c6:	4654      	mov	r4, sl
 800d0c8:	2000      	movs	r0, #0
 800d0ca:	f04f 0c0a 	mov.w	ip, #10
 800d0ce:	4621      	mov	r1, r4
 800d0d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0d4:	3b30      	subs	r3, #48	; 0x30
 800d0d6:	2b09      	cmp	r3, #9
 800d0d8:	d94d      	bls.n	800d176 <_vfiprintf_r+0x1a6>
 800d0da:	b1b0      	cbz	r0, 800d10a <_vfiprintf_r+0x13a>
 800d0dc:	9207      	str	r2, [sp, #28]
 800d0de:	e014      	b.n	800d10a <_vfiprintf_r+0x13a>
 800d0e0:	eba0 0308 	sub.w	r3, r0, r8
 800d0e4:	fa09 f303 	lsl.w	r3, r9, r3
 800d0e8:	4313      	orrs	r3, r2
 800d0ea:	9304      	str	r3, [sp, #16]
 800d0ec:	46a2      	mov	sl, r4
 800d0ee:	e7d2      	b.n	800d096 <_vfiprintf_r+0xc6>
 800d0f0:	9b03      	ldr	r3, [sp, #12]
 800d0f2:	1d19      	adds	r1, r3, #4
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	9103      	str	r1, [sp, #12]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	bfbb      	ittet	lt
 800d0fc:	425b      	neglt	r3, r3
 800d0fe:	f042 0202 	orrlt.w	r2, r2, #2
 800d102:	9307      	strge	r3, [sp, #28]
 800d104:	9307      	strlt	r3, [sp, #28]
 800d106:	bfb8      	it	lt
 800d108:	9204      	strlt	r2, [sp, #16]
 800d10a:	7823      	ldrb	r3, [r4, #0]
 800d10c:	2b2e      	cmp	r3, #46	; 0x2e
 800d10e:	d10c      	bne.n	800d12a <_vfiprintf_r+0x15a>
 800d110:	7863      	ldrb	r3, [r4, #1]
 800d112:	2b2a      	cmp	r3, #42	; 0x2a
 800d114:	d134      	bne.n	800d180 <_vfiprintf_r+0x1b0>
 800d116:	9b03      	ldr	r3, [sp, #12]
 800d118:	1d1a      	adds	r2, r3, #4
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	9203      	str	r2, [sp, #12]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	bfb8      	it	lt
 800d122:	f04f 33ff 	movlt.w	r3, #4294967295
 800d126:	3402      	adds	r4, #2
 800d128:	9305      	str	r3, [sp, #20]
 800d12a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d200 <_vfiprintf_r+0x230>
 800d12e:	7821      	ldrb	r1, [r4, #0]
 800d130:	2203      	movs	r2, #3
 800d132:	4650      	mov	r0, sl
 800d134:	f7f3 f85c 	bl	80001f0 <memchr>
 800d138:	b138      	cbz	r0, 800d14a <_vfiprintf_r+0x17a>
 800d13a:	9b04      	ldr	r3, [sp, #16]
 800d13c:	eba0 000a 	sub.w	r0, r0, sl
 800d140:	2240      	movs	r2, #64	; 0x40
 800d142:	4082      	lsls	r2, r0
 800d144:	4313      	orrs	r3, r2
 800d146:	3401      	adds	r4, #1
 800d148:	9304      	str	r3, [sp, #16]
 800d14a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d14e:	4829      	ldr	r0, [pc, #164]	; (800d1f4 <_vfiprintf_r+0x224>)
 800d150:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d154:	2206      	movs	r2, #6
 800d156:	f7f3 f84b 	bl	80001f0 <memchr>
 800d15a:	2800      	cmp	r0, #0
 800d15c:	d03f      	beq.n	800d1de <_vfiprintf_r+0x20e>
 800d15e:	4b26      	ldr	r3, [pc, #152]	; (800d1f8 <_vfiprintf_r+0x228>)
 800d160:	bb1b      	cbnz	r3, 800d1aa <_vfiprintf_r+0x1da>
 800d162:	9b03      	ldr	r3, [sp, #12]
 800d164:	3307      	adds	r3, #7
 800d166:	f023 0307 	bic.w	r3, r3, #7
 800d16a:	3308      	adds	r3, #8
 800d16c:	9303      	str	r3, [sp, #12]
 800d16e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d170:	443b      	add	r3, r7
 800d172:	9309      	str	r3, [sp, #36]	; 0x24
 800d174:	e768      	b.n	800d048 <_vfiprintf_r+0x78>
 800d176:	fb0c 3202 	mla	r2, ip, r2, r3
 800d17a:	460c      	mov	r4, r1
 800d17c:	2001      	movs	r0, #1
 800d17e:	e7a6      	b.n	800d0ce <_vfiprintf_r+0xfe>
 800d180:	2300      	movs	r3, #0
 800d182:	3401      	adds	r4, #1
 800d184:	9305      	str	r3, [sp, #20]
 800d186:	4619      	mov	r1, r3
 800d188:	f04f 0c0a 	mov.w	ip, #10
 800d18c:	4620      	mov	r0, r4
 800d18e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d192:	3a30      	subs	r2, #48	; 0x30
 800d194:	2a09      	cmp	r2, #9
 800d196:	d903      	bls.n	800d1a0 <_vfiprintf_r+0x1d0>
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d0c6      	beq.n	800d12a <_vfiprintf_r+0x15a>
 800d19c:	9105      	str	r1, [sp, #20]
 800d19e:	e7c4      	b.n	800d12a <_vfiprintf_r+0x15a>
 800d1a0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d1a4:	4604      	mov	r4, r0
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	e7f0      	b.n	800d18c <_vfiprintf_r+0x1bc>
 800d1aa:	ab03      	add	r3, sp, #12
 800d1ac:	9300      	str	r3, [sp, #0]
 800d1ae:	462a      	mov	r2, r5
 800d1b0:	4b12      	ldr	r3, [pc, #72]	; (800d1fc <_vfiprintf_r+0x22c>)
 800d1b2:	a904      	add	r1, sp, #16
 800d1b4:	4630      	mov	r0, r6
 800d1b6:	f7fc fa87 	bl	80096c8 <_printf_float>
 800d1ba:	4607      	mov	r7, r0
 800d1bc:	1c78      	adds	r0, r7, #1
 800d1be:	d1d6      	bne.n	800d16e <_vfiprintf_r+0x19e>
 800d1c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d1c2:	07d9      	lsls	r1, r3, #31
 800d1c4:	d405      	bmi.n	800d1d2 <_vfiprintf_r+0x202>
 800d1c6:	89ab      	ldrh	r3, [r5, #12]
 800d1c8:	059a      	lsls	r2, r3, #22
 800d1ca:	d402      	bmi.n	800d1d2 <_vfiprintf_r+0x202>
 800d1cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d1ce:	f7fd fab5 	bl	800a73c <__retarget_lock_release_recursive>
 800d1d2:	89ab      	ldrh	r3, [r5, #12]
 800d1d4:	065b      	lsls	r3, r3, #25
 800d1d6:	f53f af1d 	bmi.w	800d014 <_vfiprintf_r+0x44>
 800d1da:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d1dc:	e71c      	b.n	800d018 <_vfiprintf_r+0x48>
 800d1de:	ab03      	add	r3, sp, #12
 800d1e0:	9300      	str	r3, [sp, #0]
 800d1e2:	462a      	mov	r2, r5
 800d1e4:	4b05      	ldr	r3, [pc, #20]	; (800d1fc <_vfiprintf_r+0x22c>)
 800d1e6:	a904      	add	r1, sp, #16
 800d1e8:	4630      	mov	r0, r6
 800d1ea:	f7fc fd11 	bl	8009c10 <_printf_i>
 800d1ee:	e7e4      	b.n	800d1ba <_vfiprintf_r+0x1ea>
 800d1f0:	0800f0f1 	.word	0x0800f0f1
 800d1f4:	0800f0fb 	.word	0x0800f0fb
 800d1f8:	080096c9 	.word	0x080096c9
 800d1fc:	0800cfab 	.word	0x0800cfab
 800d200:	0800f0f7 	.word	0x0800f0f7

0800d204 <__sflush_r>:
 800d204:	898a      	ldrh	r2, [r1, #12]
 800d206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d20a:	4605      	mov	r5, r0
 800d20c:	0710      	lsls	r0, r2, #28
 800d20e:	460c      	mov	r4, r1
 800d210:	d458      	bmi.n	800d2c4 <__sflush_r+0xc0>
 800d212:	684b      	ldr	r3, [r1, #4]
 800d214:	2b00      	cmp	r3, #0
 800d216:	dc05      	bgt.n	800d224 <__sflush_r+0x20>
 800d218:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	dc02      	bgt.n	800d224 <__sflush_r+0x20>
 800d21e:	2000      	movs	r0, #0
 800d220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d224:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d226:	2e00      	cmp	r6, #0
 800d228:	d0f9      	beq.n	800d21e <__sflush_r+0x1a>
 800d22a:	2300      	movs	r3, #0
 800d22c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d230:	682f      	ldr	r7, [r5, #0]
 800d232:	6a21      	ldr	r1, [r4, #32]
 800d234:	602b      	str	r3, [r5, #0]
 800d236:	d032      	beq.n	800d29e <__sflush_r+0x9a>
 800d238:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d23a:	89a3      	ldrh	r3, [r4, #12]
 800d23c:	075a      	lsls	r2, r3, #29
 800d23e:	d505      	bpl.n	800d24c <__sflush_r+0x48>
 800d240:	6863      	ldr	r3, [r4, #4]
 800d242:	1ac0      	subs	r0, r0, r3
 800d244:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d246:	b10b      	cbz	r3, 800d24c <__sflush_r+0x48>
 800d248:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d24a:	1ac0      	subs	r0, r0, r3
 800d24c:	2300      	movs	r3, #0
 800d24e:	4602      	mov	r2, r0
 800d250:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d252:	6a21      	ldr	r1, [r4, #32]
 800d254:	4628      	mov	r0, r5
 800d256:	47b0      	blx	r6
 800d258:	1c43      	adds	r3, r0, #1
 800d25a:	89a3      	ldrh	r3, [r4, #12]
 800d25c:	d106      	bne.n	800d26c <__sflush_r+0x68>
 800d25e:	6829      	ldr	r1, [r5, #0]
 800d260:	291d      	cmp	r1, #29
 800d262:	d82b      	bhi.n	800d2bc <__sflush_r+0xb8>
 800d264:	4a29      	ldr	r2, [pc, #164]	; (800d30c <__sflush_r+0x108>)
 800d266:	410a      	asrs	r2, r1
 800d268:	07d6      	lsls	r6, r2, #31
 800d26a:	d427      	bmi.n	800d2bc <__sflush_r+0xb8>
 800d26c:	2200      	movs	r2, #0
 800d26e:	6062      	str	r2, [r4, #4]
 800d270:	04d9      	lsls	r1, r3, #19
 800d272:	6922      	ldr	r2, [r4, #16]
 800d274:	6022      	str	r2, [r4, #0]
 800d276:	d504      	bpl.n	800d282 <__sflush_r+0x7e>
 800d278:	1c42      	adds	r2, r0, #1
 800d27a:	d101      	bne.n	800d280 <__sflush_r+0x7c>
 800d27c:	682b      	ldr	r3, [r5, #0]
 800d27e:	b903      	cbnz	r3, 800d282 <__sflush_r+0x7e>
 800d280:	6560      	str	r0, [r4, #84]	; 0x54
 800d282:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d284:	602f      	str	r7, [r5, #0]
 800d286:	2900      	cmp	r1, #0
 800d288:	d0c9      	beq.n	800d21e <__sflush_r+0x1a>
 800d28a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d28e:	4299      	cmp	r1, r3
 800d290:	d002      	beq.n	800d298 <__sflush_r+0x94>
 800d292:	4628      	mov	r0, r5
 800d294:	f7fe f8d6 	bl	800b444 <_free_r>
 800d298:	2000      	movs	r0, #0
 800d29a:	6360      	str	r0, [r4, #52]	; 0x34
 800d29c:	e7c0      	b.n	800d220 <__sflush_r+0x1c>
 800d29e:	2301      	movs	r3, #1
 800d2a0:	4628      	mov	r0, r5
 800d2a2:	47b0      	blx	r6
 800d2a4:	1c41      	adds	r1, r0, #1
 800d2a6:	d1c8      	bne.n	800d23a <__sflush_r+0x36>
 800d2a8:	682b      	ldr	r3, [r5, #0]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d0c5      	beq.n	800d23a <__sflush_r+0x36>
 800d2ae:	2b1d      	cmp	r3, #29
 800d2b0:	d001      	beq.n	800d2b6 <__sflush_r+0xb2>
 800d2b2:	2b16      	cmp	r3, #22
 800d2b4:	d101      	bne.n	800d2ba <__sflush_r+0xb6>
 800d2b6:	602f      	str	r7, [r5, #0]
 800d2b8:	e7b1      	b.n	800d21e <__sflush_r+0x1a>
 800d2ba:	89a3      	ldrh	r3, [r4, #12]
 800d2bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2c0:	81a3      	strh	r3, [r4, #12]
 800d2c2:	e7ad      	b.n	800d220 <__sflush_r+0x1c>
 800d2c4:	690f      	ldr	r7, [r1, #16]
 800d2c6:	2f00      	cmp	r7, #0
 800d2c8:	d0a9      	beq.n	800d21e <__sflush_r+0x1a>
 800d2ca:	0793      	lsls	r3, r2, #30
 800d2cc:	680e      	ldr	r6, [r1, #0]
 800d2ce:	bf08      	it	eq
 800d2d0:	694b      	ldreq	r3, [r1, #20]
 800d2d2:	600f      	str	r7, [r1, #0]
 800d2d4:	bf18      	it	ne
 800d2d6:	2300      	movne	r3, #0
 800d2d8:	eba6 0807 	sub.w	r8, r6, r7
 800d2dc:	608b      	str	r3, [r1, #8]
 800d2de:	f1b8 0f00 	cmp.w	r8, #0
 800d2e2:	dd9c      	ble.n	800d21e <__sflush_r+0x1a>
 800d2e4:	6a21      	ldr	r1, [r4, #32]
 800d2e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d2e8:	4643      	mov	r3, r8
 800d2ea:	463a      	mov	r2, r7
 800d2ec:	4628      	mov	r0, r5
 800d2ee:	47b0      	blx	r6
 800d2f0:	2800      	cmp	r0, #0
 800d2f2:	dc06      	bgt.n	800d302 <__sflush_r+0xfe>
 800d2f4:	89a3      	ldrh	r3, [r4, #12]
 800d2f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2fa:	81a3      	strh	r3, [r4, #12]
 800d2fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d300:	e78e      	b.n	800d220 <__sflush_r+0x1c>
 800d302:	4407      	add	r7, r0
 800d304:	eba8 0800 	sub.w	r8, r8, r0
 800d308:	e7e9      	b.n	800d2de <__sflush_r+0xda>
 800d30a:	bf00      	nop
 800d30c:	dfbffffe 	.word	0xdfbffffe

0800d310 <_fflush_r>:
 800d310:	b538      	push	{r3, r4, r5, lr}
 800d312:	690b      	ldr	r3, [r1, #16]
 800d314:	4605      	mov	r5, r0
 800d316:	460c      	mov	r4, r1
 800d318:	b913      	cbnz	r3, 800d320 <_fflush_r+0x10>
 800d31a:	2500      	movs	r5, #0
 800d31c:	4628      	mov	r0, r5
 800d31e:	bd38      	pop	{r3, r4, r5, pc}
 800d320:	b118      	cbz	r0, 800d32a <_fflush_r+0x1a>
 800d322:	6a03      	ldr	r3, [r0, #32]
 800d324:	b90b      	cbnz	r3, 800d32a <_fflush_r+0x1a>
 800d326:	f7fd f831 	bl	800a38c <__sinit>
 800d32a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d0f3      	beq.n	800d31a <_fflush_r+0xa>
 800d332:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d334:	07d0      	lsls	r0, r2, #31
 800d336:	d404      	bmi.n	800d342 <_fflush_r+0x32>
 800d338:	0599      	lsls	r1, r3, #22
 800d33a:	d402      	bmi.n	800d342 <_fflush_r+0x32>
 800d33c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d33e:	f7fd f9fc 	bl	800a73a <__retarget_lock_acquire_recursive>
 800d342:	4628      	mov	r0, r5
 800d344:	4621      	mov	r1, r4
 800d346:	f7ff ff5d 	bl	800d204 <__sflush_r>
 800d34a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d34c:	07da      	lsls	r2, r3, #31
 800d34e:	4605      	mov	r5, r0
 800d350:	d4e4      	bmi.n	800d31c <_fflush_r+0xc>
 800d352:	89a3      	ldrh	r3, [r4, #12]
 800d354:	059b      	lsls	r3, r3, #22
 800d356:	d4e1      	bmi.n	800d31c <_fflush_r+0xc>
 800d358:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d35a:	f7fd f9ef 	bl	800a73c <__retarget_lock_release_recursive>
 800d35e:	e7dd      	b.n	800d31c <_fflush_r+0xc>

0800d360 <__swhatbuf_r>:
 800d360:	b570      	push	{r4, r5, r6, lr}
 800d362:	460c      	mov	r4, r1
 800d364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d368:	2900      	cmp	r1, #0
 800d36a:	b096      	sub	sp, #88	; 0x58
 800d36c:	4615      	mov	r5, r2
 800d36e:	461e      	mov	r6, r3
 800d370:	da0d      	bge.n	800d38e <__swhatbuf_r+0x2e>
 800d372:	89a3      	ldrh	r3, [r4, #12]
 800d374:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d378:	f04f 0100 	mov.w	r1, #0
 800d37c:	bf0c      	ite	eq
 800d37e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d382:	2340      	movne	r3, #64	; 0x40
 800d384:	2000      	movs	r0, #0
 800d386:	6031      	str	r1, [r6, #0]
 800d388:	602b      	str	r3, [r5, #0]
 800d38a:	b016      	add	sp, #88	; 0x58
 800d38c:	bd70      	pop	{r4, r5, r6, pc}
 800d38e:	466a      	mov	r2, sp
 800d390:	f000 f90a 	bl	800d5a8 <_fstat_r>
 800d394:	2800      	cmp	r0, #0
 800d396:	dbec      	blt.n	800d372 <__swhatbuf_r+0x12>
 800d398:	9901      	ldr	r1, [sp, #4]
 800d39a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d39e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d3a2:	4259      	negs	r1, r3
 800d3a4:	4159      	adcs	r1, r3
 800d3a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d3aa:	e7eb      	b.n	800d384 <__swhatbuf_r+0x24>

0800d3ac <__smakebuf_r>:
 800d3ac:	898b      	ldrh	r3, [r1, #12]
 800d3ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d3b0:	079d      	lsls	r5, r3, #30
 800d3b2:	4606      	mov	r6, r0
 800d3b4:	460c      	mov	r4, r1
 800d3b6:	d507      	bpl.n	800d3c8 <__smakebuf_r+0x1c>
 800d3b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d3bc:	6023      	str	r3, [r4, #0]
 800d3be:	6123      	str	r3, [r4, #16]
 800d3c0:	2301      	movs	r3, #1
 800d3c2:	6163      	str	r3, [r4, #20]
 800d3c4:	b002      	add	sp, #8
 800d3c6:	bd70      	pop	{r4, r5, r6, pc}
 800d3c8:	ab01      	add	r3, sp, #4
 800d3ca:	466a      	mov	r2, sp
 800d3cc:	f7ff ffc8 	bl	800d360 <__swhatbuf_r>
 800d3d0:	9900      	ldr	r1, [sp, #0]
 800d3d2:	4605      	mov	r5, r0
 800d3d4:	4630      	mov	r0, r6
 800d3d6:	f7fe f8a9 	bl	800b52c <_malloc_r>
 800d3da:	b948      	cbnz	r0, 800d3f0 <__smakebuf_r+0x44>
 800d3dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3e0:	059a      	lsls	r2, r3, #22
 800d3e2:	d4ef      	bmi.n	800d3c4 <__smakebuf_r+0x18>
 800d3e4:	f023 0303 	bic.w	r3, r3, #3
 800d3e8:	f043 0302 	orr.w	r3, r3, #2
 800d3ec:	81a3      	strh	r3, [r4, #12]
 800d3ee:	e7e3      	b.n	800d3b8 <__smakebuf_r+0xc>
 800d3f0:	89a3      	ldrh	r3, [r4, #12]
 800d3f2:	6020      	str	r0, [r4, #0]
 800d3f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3f8:	81a3      	strh	r3, [r4, #12]
 800d3fa:	9b00      	ldr	r3, [sp, #0]
 800d3fc:	6163      	str	r3, [r4, #20]
 800d3fe:	9b01      	ldr	r3, [sp, #4]
 800d400:	6120      	str	r0, [r4, #16]
 800d402:	b15b      	cbz	r3, 800d41c <__smakebuf_r+0x70>
 800d404:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d408:	4630      	mov	r0, r6
 800d40a:	f000 f8df 	bl	800d5cc <_isatty_r>
 800d40e:	b128      	cbz	r0, 800d41c <__smakebuf_r+0x70>
 800d410:	89a3      	ldrh	r3, [r4, #12]
 800d412:	f023 0303 	bic.w	r3, r3, #3
 800d416:	f043 0301 	orr.w	r3, r3, #1
 800d41a:	81a3      	strh	r3, [r4, #12]
 800d41c:	89a3      	ldrh	r3, [r4, #12]
 800d41e:	431d      	orrs	r5, r3
 800d420:	81a5      	strh	r5, [r4, #12]
 800d422:	e7cf      	b.n	800d3c4 <__smakebuf_r+0x18>

0800d424 <__swbuf_r>:
 800d424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d426:	460e      	mov	r6, r1
 800d428:	4614      	mov	r4, r2
 800d42a:	4605      	mov	r5, r0
 800d42c:	b118      	cbz	r0, 800d436 <__swbuf_r+0x12>
 800d42e:	6a03      	ldr	r3, [r0, #32]
 800d430:	b90b      	cbnz	r3, 800d436 <__swbuf_r+0x12>
 800d432:	f7fc ffab 	bl	800a38c <__sinit>
 800d436:	69a3      	ldr	r3, [r4, #24]
 800d438:	60a3      	str	r3, [r4, #8]
 800d43a:	89a3      	ldrh	r3, [r4, #12]
 800d43c:	071a      	lsls	r2, r3, #28
 800d43e:	d525      	bpl.n	800d48c <__swbuf_r+0x68>
 800d440:	6923      	ldr	r3, [r4, #16]
 800d442:	b31b      	cbz	r3, 800d48c <__swbuf_r+0x68>
 800d444:	6823      	ldr	r3, [r4, #0]
 800d446:	6922      	ldr	r2, [r4, #16]
 800d448:	1a98      	subs	r0, r3, r2
 800d44a:	6963      	ldr	r3, [r4, #20]
 800d44c:	b2f6      	uxtb	r6, r6
 800d44e:	4283      	cmp	r3, r0
 800d450:	4637      	mov	r7, r6
 800d452:	dc04      	bgt.n	800d45e <__swbuf_r+0x3a>
 800d454:	4621      	mov	r1, r4
 800d456:	4628      	mov	r0, r5
 800d458:	f7ff ff5a 	bl	800d310 <_fflush_r>
 800d45c:	b9e0      	cbnz	r0, 800d498 <__swbuf_r+0x74>
 800d45e:	68a3      	ldr	r3, [r4, #8]
 800d460:	3b01      	subs	r3, #1
 800d462:	60a3      	str	r3, [r4, #8]
 800d464:	6823      	ldr	r3, [r4, #0]
 800d466:	1c5a      	adds	r2, r3, #1
 800d468:	6022      	str	r2, [r4, #0]
 800d46a:	701e      	strb	r6, [r3, #0]
 800d46c:	6962      	ldr	r2, [r4, #20]
 800d46e:	1c43      	adds	r3, r0, #1
 800d470:	429a      	cmp	r2, r3
 800d472:	d004      	beq.n	800d47e <__swbuf_r+0x5a>
 800d474:	89a3      	ldrh	r3, [r4, #12]
 800d476:	07db      	lsls	r3, r3, #31
 800d478:	d506      	bpl.n	800d488 <__swbuf_r+0x64>
 800d47a:	2e0a      	cmp	r6, #10
 800d47c:	d104      	bne.n	800d488 <__swbuf_r+0x64>
 800d47e:	4621      	mov	r1, r4
 800d480:	4628      	mov	r0, r5
 800d482:	f7ff ff45 	bl	800d310 <_fflush_r>
 800d486:	b938      	cbnz	r0, 800d498 <__swbuf_r+0x74>
 800d488:	4638      	mov	r0, r7
 800d48a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d48c:	4621      	mov	r1, r4
 800d48e:	4628      	mov	r0, r5
 800d490:	f000 f806 	bl	800d4a0 <__swsetup_r>
 800d494:	2800      	cmp	r0, #0
 800d496:	d0d5      	beq.n	800d444 <__swbuf_r+0x20>
 800d498:	f04f 37ff 	mov.w	r7, #4294967295
 800d49c:	e7f4      	b.n	800d488 <__swbuf_r+0x64>
	...

0800d4a0 <__swsetup_r>:
 800d4a0:	b538      	push	{r3, r4, r5, lr}
 800d4a2:	4b2a      	ldr	r3, [pc, #168]	; (800d54c <__swsetup_r+0xac>)
 800d4a4:	4605      	mov	r5, r0
 800d4a6:	6818      	ldr	r0, [r3, #0]
 800d4a8:	460c      	mov	r4, r1
 800d4aa:	b118      	cbz	r0, 800d4b4 <__swsetup_r+0x14>
 800d4ac:	6a03      	ldr	r3, [r0, #32]
 800d4ae:	b90b      	cbnz	r3, 800d4b4 <__swsetup_r+0x14>
 800d4b0:	f7fc ff6c 	bl	800a38c <__sinit>
 800d4b4:	89a3      	ldrh	r3, [r4, #12]
 800d4b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d4ba:	0718      	lsls	r0, r3, #28
 800d4bc:	d422      	bmi.n	800d504 <__swsetup_r+0x64>
 800d4be:	06d9      	lsls	r1, r3, #27
 800d4c0:	d407      	bmi.n	800d4d2 <__swsetup_r+0x32>
 800d4c2:	2309      	movs	r3, #9
 800d4c4:	602b      	str	r3, [r5, #0]
 800d4c6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d4ca:	81a3      	strh	r3, [r4, #12]
 800d4cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d4d0:	e034      	b.n	800d53c <__swsetup_r+0x9c>
 800d4d2:	0758      	lsls	r0, r3, #29
 800d4d4:	d512      	bpl.n	800d4fc <__swsetup_r+0x5c>
 800d4d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d4d8:	b141      	cbz	r1, 800d4ec <__swsetup_r+0x4c>
 800d4da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d4de:	4299      	cmp	r1, r3
 800d4e0:	d002      	beq.n	800d4e8 <__swsetup_r+0x48>
 800d4e2:	4628      	mov	r0, r5
 800d4e4:	f7fd ffae 	bl	800b444 <_free_r>
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	6363      	str	r3, [r4, #52]	; 0x34
 800d4ec:	89a3      	ldrh	r3, [r4, #12]
 800d4ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d4f2:	81a3      	strh	r3, [r4, #12]
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	6063      	str	r3, [r4, #4]
 800d4f8:	6923      	ldr	r3, [r4, #16]
 800d4fa:	6023      	str	r3, [r4, #0]
 800d4fc:	89a3      	ldrh	r3, [r4, #12]
 800d4fe:	f043 0308 	orr.w	r3, r3, #8
 800d502:	81a3      	strh	r3, [r4, #12]
 800d504:	6923      	ldr	r3, [r4, #16]
 800d506:	b94b      	cbnz	r3, 800d51c <__swsetup_r+0x7c>
 800d508:	89a3      	ldrh	r3, [r4, #12]
 800d50a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d50e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d512:	d003      	beq.n	800d51c <__swsetup_r+0x7c>
 800d514:	4621      	mov	r1, r4
 800d516:	4628      	mov	r0, r5
 800d518:	f7ff ff48 	bl	800d3ac <__smakebuf_r>
 800d51c:	89a0      	ldrh	r0, [r4, #12]
 800d51e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d522:	f010 0301 	ands.w	r3, r0, #1
 800d526:	d00a      	beq.n	800d53e <__swsetup_r+0x9e>
 800d528:	2300      	movs	r3, #0
 800d52a:	60a3      	str	r3, [r4, #8]
 800d52c:	6963      	ldr	r3, [r4, #20]
 800d52e:	425b      	negs	r3, r3
 800d530:	61a3      	str	r3, [r4, #24]
 800d532:	6923      	ldr	r3, [r4, #16]
 800d534:	b943      	cbnz	r3, 800d548 <__swsetup_r+0xa8>
 800d536:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d53a:	d1c4      	bne.n	800d4c6 <__swsetup_r+0x26>
 800d53c:	bd38      	pop	{r3, r4, r5, pc}
 800d53e:	0781      	lsls	r1, r0, #30
 800d540:	bf58      	it	pl
 800d542:	6963      	ldrpl	r3, [r4, #20]
 800d544:	60a3      	str	r3, [r4, #8]
 800d546:	e7f4      	b.n	800d532 <__swsetup_r+0x92>
 800d548:	2000      	movs	r0, #0
 800d54a:	e7f7      	b.n	800d53c <__swsetup_r+0x9c>
 800d54c:	20000074 	.word	0x20000074

0800d550 <memmove>:
 800d550:	4288      	cmp	r0, r1
 800d552:	b510      	push	{r4, lr}
 800d554:	eb01 0402 	add.w	r4, r1, r2
 800d558:	d902      	bls.n	800d560 <memmove+0x10>
 800d55a:	4284      	cmp	r4, r0
 800d55c:	4623      	mov	r3, r4
 800d55e:	d807      	bhi.n	800d570 <memmove+0x20>
 800d560:	1e43      	subs	r3, r0, #1
 800d562:	42a1      	cmp	r1, r4
 800d564:	d008      	beq.n	800d578 <memmove+0x28>
 800d566:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d56a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d56e:	e7f8      	b.n	800d562 <memmove+0x12>
 800d570:	4402      	add	r2, r0
 800d572:	4601      	mov	r1, r0
 800d574:	428a      	cmp	r2, r1
 800d576:	d100      	bne.n	800d57a <memmove+0x2a>
 800d578:	bd10      	pop	{r4, pc}
 800d57a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d57e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d582:	e7f7      	b.n	800d574 <memmove+0x24>

0800d584 <strncmp>:
 800d584:	b510      	push	{r4, lr}
 800d586:	b16a      	cbz	r2, 800d5a4 <strncmp+0x20>
 800d588:	3901      	subs	r1, #1
 800d58a:	1884      	adds	r4, r0, r2
 800d58c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d590:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d594:	429a      	cmp	r2, r3
 800d596:	d103      	bne.n	800d5a0 <strncmp+0x1c>
 800d598:	42a0      	cmp	r0, r4
 800d59a:	d001      	beq.n	800d5a0 <strncmp+0x1c>
 800d59c:	2a00      	cmp	r2, #0
 800d59e:	d1f5      	bne.n	800d58c <strncmp+0x8>
 800d5a0:	1ad0      	subs	r0, r2, r3
 800d5a2:	bd10      	pop	{r4, pc}
 800d5a4:	4610      	mov	r0, r2
 800d5a6:	e7fc      	b.n	800d5a2 <strncmp+0x1e>

0800d5a8 <_fstat_r>:
 800d5a8:	b538      	push	{r3, r4, r5, lr}
 800d5aa:	4d07      	ldr	r5, [pc, #28]	; (800d5c8 <_fstat_r+0x20>)
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	4604      	mov	r4, r0
 800d5b0:	4608      	mov	r0, r1
 800d5b2:	4611      	mov	r1, r2
 800d5b4:	602b      	str	r3, [r5, #0]
 800d5b6:	f7f6 f9d6 	bl	8003966 <_fstat>
 800d5ba:	1c43      	adds	r3, r0, #1
 800d5bc:	d102      	bne.n	800d5c4 <_fstat_r+0x1c>
 800d5be:	682b      	ldr	r3, [r5, #0]
 800d5c0:	b103      	cbz	r3, 800d5c4 <_fstat_r+0x1c>
 800d5c2:	6023      	str	r3, [r4, #0]
 800d5c4:	bd38      	pop	{r3, r4, r5, pc}
 800d5c6:	bf00      	nop
 800d5c8:	2000106c 	.word	0x2000106c

0800d5cc <_isatty_r>:
 800d5cc:	b538      	push	{r3, r4, r5, lr}
 800d5ce:	4d06      	ldr	r5, [pc, #24]	; (800d5e8 <_isatty_r+0x1c>)
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	4604      	mov	r4, r0
 800d5d4:	4608      	mov	r0, r1
 800d5d6:	602b      	str	r3, [r5, #0]
 800d5d8:	f7f6 f9d5 	bl	8003986 <_isatty>
 800d5dc:	1c43      	adds	r3, r0, #1
 800d5de:	d102      	bne.n	800d5e6 <_isatty_r+0x1a>
 800d5e0:	682b      	ldr	r3, [r5, #0]
 800d5e2:	b103      	cbz	r3, 800d5e6 <_isatty_r+0x1a>
 800d5e4:	6023      	str	r3, [r4, #0]
 800d5e6:	bd38      	pop	{r3, r4, r5, pc}
 800d5e8:	2000106c 	.word	0x2000106c

0800d5ec <_sbrk_r>:
 800d5ec:	b538      	push	{r3, r4, r5, lr}
 800d5ee:	4d06      	ldr	r5, [pc, #24]	; (800d608 <_sbrk_r+0x1c>)
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	4604      	mov	r4, r0
 800d5f4:	4608      	mov	r0, r1
 800d5f6:	602b      	str	r3, [r5, #0]
 800d5f8:	f7f6 f9de 	bl	80039b8 <_sbrk>
 800d5fc:	1c43      	adds	r3, r0, #1
 800d5fe:	d102      	bne.n	800d606 <_sbrk_r+0x1a>
 800d600:	682b      	ldr	r3, [r5, #0]
 800d602:	b103      	cbz	r3, 800d606 <_sbrk_r+0x1a>
 800d604:	6023      	str	r3, [r4, #0]
 800d606:	bd38      	pop	{r3, r4, r5, pc}
 800d608:	2000106c 	.word	0x2000106c

0800d60c <memcpy>:
 800d60c:	440a      	add	r2, r1
 800d60e:	4291      	cmp	r1, r2
 800d610:	f100 33ff 	add.w	r3, r0, #4294967295
 800d614:	d100      	bne.n	800d618 <memcpy+0xc>
 800d616:	4770      	bx	lr
 800d618:	b510      	push	{r4, lr}
 800d61a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d61e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d622:	4291      	cmp	r1, r2
 800d624:	d1f9      	bne.n	800d61a <memcpy+0xe>
 800d626:	bd10      	pop	{r4, pc}

0800d628 <nan>:
 800d628:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d630 <nan+0x8>
 800d62c:	4770      	bx	lr
 800d62e:	bf00      	nop
 800d630:	00000000 	.word	0x00000000
 800d634:	7ff80000 	.word	0x7ff80000

0800d638 <__assert_func>:
 800d638:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d63a:	4614      	mov	r4, r2
 800d63c:	461a      	mov	r2, r3
 800d63e:	4b09      	ldr	r3, [pc, #36]	; (800d664 <__assert_func+0x2c>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	4605      	mov	r5, r0
 800d644:	68d8      	ldr	r0, [r3, #12]
 800d646:	b14c      	cbz	r4, 800d65c <__assert_func+0x24>
 800d648:	4b07      	ldr	r3, [pc, #28]	; (800d668 <__assert_func+0x30>)
 800d64a:	9100      	str	r1, [sp, #0]
 800d64c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d650:	4906      	ldr	r1, [pc, #24]	; (800d66c <__assert_func+0x34>)
 800d652:	462b      	mov	r3, r5
 800d654:	f000 fbca 	bl	800ddec <fiprintf>
 800d658:	f000 fbda 	bl	800de10 <abort>
 800d65c:	4b04      	ldr	r3, [pc, #16]	; (800d670 <__assert_func+0x38>)
 800d65e:	461c      	mov	r4, r3
 800d660:	e7f3      	b.n	800d64a <__assert_func+0x12>
 800d662:	bf00      	nop
 800d664:	20000074 	.word	0x20000074
 800d668:	0800f10a 	.word	0x0800f10a
 800d66c:	0800f117 	.word	0x0800f117
 800d670:	0800f145 	.word	0x0800f145

0800d674 <_calloc_r>:
 800d674:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d676:	fba1 2402 	umull	r2, r4, r1, r2
 800d67a:	b94c      	cbnz	r4, 800d690 <_calloc_r+0x1c>
 800d67c:	4611      	mov	r1, r2
 800d67e:	9201      	str	r2, [sp, #4]
 800d680:	f7fd ff54 	bl	800b52c <_malloc_r>
 800d684:	9a01      	ldr	r2, [sp, #4]
 800d686:	4605      	mov	r5, r0
 800d688:	b930      	cbnz	r0, 800d698 <_calloc_r+0x24>
 800d68a:	4628      	mov	r0, r5
 800d68c:	b003      	add	sp, #12
 800d68e:	bd30      	pop	{r4, r5, pc}
 800d690:	220c      	movs	r2, #12
 800d692:	6002      	str	r2, [r0, #0]
 800d694:	2500      	movs	r5, #0
 800d696:	e7f8      	b.n	800d68a <_calloc_r+0x16>
 800d698:	4621      	mov	r1, r4
 800d69a:	f7fc ffd0 	bl	800a63e <memset>
 800d69e:	e7f4      	b.n	800d68a <_calloc_r+0x16>

0800d6a0 <rshift>:
 800d6a0:	6903      	ldr	r3, [r0, #16]
 800d6a2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d6a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d6aa:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d6ae:	f100 0414 	add.w	r4, r0, #20
 800d6b2:	dd45      	ble.n	800d740 <rshift+0xa0>
 800d6b4:	f011 011f 	ands.w	r1, r1, #31
 800d6b8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d6bc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d6c0:	d10c      	bne.n	800d6dc <rshift+0x3c>
 800d6c2:	f100 0710 	add.w	r7, r0, #16
 800d6c6:	4629      	mov	r1, r5
 800d6c8:	42b1      	cmp	r1, r6
 800d6ca:	d334      	bcc.n	800d736 <rshift+0x96>
 800d6cc:	1a9b      	subs	r3, r3, r2
 800d6ce:	009b      	lsls	r3, r3, #2
 800d6d0:	1eea      	subs	r2, r5, #3
 800d6d2:	4296      	cmp	r6, r2
 800d6d4:	bf38      	it	cc
 800d6d6:	2300      	movcc	r3, #0
 800d6d8:	4423      	add	r3, r4
 800d6da:	e015      	b.n	800d708 <rshift+0x68>
 800d6dc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d6e0:	f1c1 0820 	rsb	r8, r1, #32
 800d6e4:	40cf      	lsrs	r7, r1
 800d6e6:	f105 0e04 	add.w	lr, r5, #4
 800d6ea:	46a1      	mov	r9, r4
 800d6ec:	4576      	cmp	r6, lr
 800d6ee:	46f4      	mov	ip, lr
 800d6f0:	d815      	bhi.n	800d71e <rshift+0x7e>
 800d6f2:	1a9a      	subs	r2, r3, r2
 800d6f4:	0092      	lsls	r2, r2, #2
 800d6f6:	3a04      	subs	r2, #4
 800d6f8:	3501      	adds	r5, #1
 800d6fa:	42ae      	cmp	r6, r5
 800d6fc:	bf38      	it	cc
 800d6fe:	2200      	movcc	r2, #0
 800d700:	18a3      	adds	r3, r4, r2
 800d702:	50a7      	str	r7, [r4, r2]
 800d704:	b107      	cbz	r7, 800d708 <rshift+0x68>
 800d706:	3304      	adds	r3, #4
 800d708:	1b1a      	subs	r2, r3, r4
 800d70a:	42a3      	cmp	r3, r4
 800d70c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d710:	bf08      	it	eq
 800d712:	2300      	moveq	r3, #0
 800d714:	6102      	str	r2, [r0, #16]
 800d716:	bf08      	it	eq
 800d718:	6143      	streq	r3, [r0, #20]
 800d71a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d71e:	f8dc c000 	ldr.w	ip, [ip]
 800d722:	fa0c fc08 	lsl.w	ip, ip, r8
 800d726:	ea4c 0707 	orr.w	r7, ip, r7
 800d72a:	f849 7b04 	str.w	r7, [r9], #4
 800d72e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d732:	40cf      	lsrs	r7, r1
 800d734:	e7da      	b.n	800d6ec <rshift+0x4c>
 800d736:	f851 cb04 	ldr.w	ip, [r1], #4
 800d73a:	f847 cf04 	str.w	ip, [r7, #4]!
 800d73e:	e7c3      	b.n	800d6c8 <rshift+0x28>
 800d740:	4623      	mov	r3, r4
 800d742:	e7e1      	b.n	800d708 <rshift+0x68>

0800d744 <__hexdig_fun>:
 800d744:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d748:	2b09      	cmp	r3, #9
 800d74a:	d802      	bhi.n	800d752 <__hexdig_fun+0xe>
 800d74c:	3820      	subs	r0, #32
 800d74e:	b2c0      	uxtb	r0, r0
 800d750:	4770      	bx	lr
 800d752:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d756:	2b05      	cmp	r3, #5
 800d758:	d801      	bhi.n	800d75e <__hexdig_fun+0x1a>
 800d75a:	3847      	subs	r0, #71	; 0x47
 800d75c:	e7f7      	b.n	800d74e <__hexdig_fun+0xa>
 800d75e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d762:	2b05      	cmp	r3, #5
 800d764:	d801      	bhi.n	800d76a <__hexdig_fun+0x26>
 800d766:	3827      	subs	r0, #39	; 0x27
 800d768:	e7f1      	b.n	800d74e <__hexdig_fun+0xa>
 800d76a:	2000      	movs	r0, #0
 800d76c:	4770      	bx	lr
	...

0800d770 <__gethex>:
 800d770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d774:	4617      	mov	r7, r2
 800d776:	680a      	ldr	r2, [r1, #0]
 800d778:	b085      	sub	sp, #20
 800d77a:	f102 0b02 	add.w	fp, r2, #2
 800d77e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d782:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d786:	4681      	mov	r9, r0
 800d788:	468a      	mov	sl, r1
 800d78a:	9302      	str	r3, [sp, #8]
 800d78c:	32fe      	adds	r2, #254	; 0xfe
 800d78e:	eb02 030b 	add.w	r3, r2, fp
 800d792:	46d8      	mov	r8, fp
 800d794:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800d798:	9301      	str	r3, [sp, #4]
 800d79a:	2830      	cmp	r0, #48	; 0x30
 800d79c:	d0f7      	beq.n	800d78e <__gethex+0x1e>
 800d79e:	f7ff ffd1 	bl	800d744 <__hexdig_fun>
 800d7a2:	4604      	mov	r4, r0
 800d7a4:	2800      	cmp	r0, #0
 800d7a6:	d138      	bne.n	800d81a <__gethex+0xaa>
 800d7a8:	49a7      	ldr	r1, [pc, #668]	; (800da48 <__gethex+0x2d8>)
 800d7aa:	2201      	movs	r2, #1
 800d7ac:	4640      	mov	r0, r8
 800d7ae:	f7ff fee9 	bl	800d584 <strncmp>
 800d7b2:	4606      	mov	r6, r0
 800d7b4:	2800      	cmp	r0, #0
 800d7b6:	d169      	bne.n	800d88c <__gethex+0x11c>
 800d7b8:	f898 0001 	ldrb.w	r0, [r8, #1]
 800d7bc:	465d      	mov	r5, fp
 800d7be:	f7ff ffc1 	bl	800d744 <__hexdig_fun>
 800d7c2:	2800      	cmp	r0, #0
 800d7c4:	d064      	beq.n	800d890 <__gethex+0x120>
 800d7c6:	465a      	mov	r2, fp
 800d7c8:	7810      	ldrb	r0, [r2, #0]
 800d7ca:	2830      	cmp	r0, #48	; 0x30
 800d7cc:	4690      	mov	r8, r2
 800d7ce:	f102 0201 	add.w	r2, r2, #1
 800d7d2:	d0f9      	beq.n	800d7c8 <__gethex+0x58>
 800d7d4:	f7ff ffb6 	bl	800d744 <__hexdig_fun>
 800d7d8:	2301      	movs	r3, #1
 800d7da:	fab0 f480 	clz	r4, r0
 800d7de:	0964      	lsrs	r4, r4, #5
 800d7e0:	465e      	mov	r6, fp
 800d7e2:	9301      	str	r3, [sp, #4]
 800d7e4:	4642      	mov	r2, r8
 800d7e6:	4615      	mov	r5, r2
 800d7e8:	3201      	adds	r2, #1
 800d7ea:	7828      	ldrb	r0, [r5, #0]
 800d7ec:	f7ff ffaa 	bl	800d744 <__hexdig_fun>
 800d7f0:	2800      	cmp	r0, #0
 800d7f2:	d1f8      	bne.n	800d7e6 <__gethex+0x76>
 800d7f4:	4994      	ldr	r1, [pc, #592]	; (800da48 <__gethex+0x2d8>)
 800d7f6:	2201      	movs	r2, #1
 800d7f8:	4628      	mov	r0, r5
 800d7fa:	f7ff fec3 	bl	800d584 <strncmp>
 800d7fe:	b978      	cbnz	r0, 800d820 <__gethex+0xb0>
 800d800:	b946      	cbnz	r6, 800d814 <__gethex+0xa4>
 800d802:	1c6e      	adds	r6, r5, #1
 800d804:	4632      	mov	r2, r6
 800d806:	4615      	mov	r5, r2
 800d808:	3201      	adds	r2, #1
 800d80a:	7828      	ldrb	r0, [r5, #0]
 800d80c:	f7ff ff9a 	bl	800d744 <__hexdig_fun>
 800d810:	2800      	cmp	r0, #0
 800d812:	d1f8      	bne.n	800d806 <__gethex+0x96>
 800d814:	1b73      	subs	r3, r6, r5
 800d816:	009e      	lsls	r6, r3, #2
 800d818:	e004      	b.n	800d824 <__gethex+0xb4>
 800d81a:	2400      	movs	r4, #0
 800d81c:	4626      	mov	r6, r4
 800d81e:	e7e1      	b.n	800d7e4 <__gethex+0x74>
 800d820:	2e00      	cmp	r6, #0
 800d822:	d1f7      	bne.n	800d814 <__gethex+0xa4>
 800d824:	782b      	ldrb	r3, [r5, #0]
 800d826:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d82a:	2b50      	cmp	r3, #80	; 0x50
 800d82c:	d13d      	bne.n	800d8aa <__gethex+0x13a>
 800d82e:	786b      	ldrb	r3, [r5, #1]
 800d830:	2b2b      	cmp	r3, #43	; 0x2b
 800d832:	d02f      	beq.n	800d894 <__gethex+0x124>
 800d834:	2b2d      	cmp	r3, #45	; 0x2d
 800d836:	d031      	beq.n	800d89c <__gethex+0x12c>
 800d838:	1c69      	adds	r1, r5, #1
 800d83a:	f04f 0b00 	mov.w	fp, #0
 800d83e:	7808      	ldrb	r0, [r1, #0]
 800d840:	f7ff ff80 	bl	800d744 <__hexdig_fun>
 800d844:	1e42      	subs	r2, r0, #1
 800d846:	b2d2      	uxtb	r2, r2
 800d848:	2a18      	cmp	r2, #24
 800d84a:	d82e      	bhi.n	800d8aa <__gethex+0x13a>
 800d84c:	f1a0 0210 	sub.w	r2, r0, #16
 800d850:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d854:	f7ff ff76 	bl	800d744 <__hexdig_fun>
 800d858:	f100 3cff 	add.w	ip, r0, #4294967295
 800d85c:	fa5f fc8c 	uxtb.w	ip, ip
 800d860:	f1bc 0f18 	cmp.w	ip, #24
 800d864:	d91d      	bls.n	800d8a2 <__gethex+0x132>
 800d866:	f1bb 0f00 	cmp.w	fp, #0
 800d86a:	d000      	beq.n	800d86e <__gethex+0xfe>
 800d86c:	4252      	negs	r2, r2
 800d86e:	4416      	add	r6, r2
 800d870:	f8ca 1000 	str.w	r1, [sl]
 800d874:	b1dc      	cbz	r4, 800d8ae <__gethex+0x13e>
 800d876:	9b01      	ldr	r3, [sp, #4]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	bf14      	ite	ne
 800d87c:	f04f 0800 	movne.w	r8, #0
 800d880:	f04f 0806 	moveq.w	r8, #6
 800d884:	4640      	mov	r0, r8
 800d886:	b005      	add	sp, #20
 800d888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d88c:	4645      	mov	r5, r8
 800d88e:	4626      	mov	r6, r4
 800d890:	2401      	movs	r4, #1
 800d892:	e7c7      	b.n	800d824 <__gethex+0xb4>
 800d894:	f04f 0b00 	mov.w	fp, #0
 800d898:	1ca9      	adds	r1, r5, #2
 800d89a:	e7d0      	b.n	800d83e <__gethex+0xce>
 800d89c:	f04f 0b01 	mov.w	fp, #1
 800d8a0:	e7fa      	b.n	800d898 <__gethex+0x128>
 800d8a2:	230a      	movs	r3, #10
 800d8a4:	fb03 0002 	mla	r0, r3, r2, r0
 800d8a8:	e7d0      	b.n	800d84c <__gethex+0xdc>
 800d8aa:	4629      	mov	r1, r5
 800d8ac:	e7e0      	b.n	800d870 <__gethex+0x100>
 800d8ae:	eba5 0308 	sub.w	r3, r5, r8
 800d8b2:	3b01      	subs	r3, #1
 800d8b4:	4621      	mov	r1, r4
 800d8b6:	2b07      	cmp	r3, #7
 800d8b8:	dc0a      	bgt.n	800d8d0 <__gethex+0x160>
 800d8ba:	4648      	mov	r0, r9
 800d8bc:	f7fd fec2 	bl	800b644 <_Balloc>
 800d8c0:	4604      	mov	r4, r0
 800d8c2:	b940      	cbnz	r0, 800d8d6 <__gethex+0x166>
 800d8c4:	4b61      	ldr	r3, [pc, #388]	; (800da4c <__gethex+0x2dc>)
 800d8c6:	4602      	mov	r2, r0
 800d8c8:	21e4      	movs	r1, #228	; 0xe4
 800d8ca:	4861      	ldr	r0, [pc, #388]	; (800da50 <__gethex+0x2e0>)
 800d8cc:	f7ff feb4 	bl	800d638 <__assert_func>
 800d8d0:	3101      	adds	r1, #1
 800d8d2:	105b      	asrs	r3, r3, #1
 800d8d4:	e7ef      	b.n	800d8b6 <__gethex+0x146>
 800d8d6:	f100 0a14 	add.w	sl, r0, #20
 800d8da:	2300      	movs	r3, #0
 800d8dc:	495a      	ldr	r1, [pc, #360]	; (800da48 <__gethex+0x2d8>)
 800d8de:	f8cd a004 	str.w	sl, [sp, #4]
 800d8e2:	469b      	mov	fp, r3
 800d8e4:	45a8      	cmp	r8, r5
 800d8e6:	d342      	bcc.n	800d96e <__gethex+0x1fe>
 800d8e8:	9801      	ldr	r0, [sp, #4]
 800d8ea:	f840 bb04 	str.w	fp, [r0], #4
 800d8ee:	eba0 000a 	sub.w	r0, r0, sl
 800d8f2:	1080      	asrs	r0, r0, #2
 800d8f4:	6120      	str	r0, [r4, #16]
 800d8f6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800d8fa:	4658      	mov	r0, fp
 800d8fc:	f7fd ff94 	bl	800b828 <__hi0bits>
 800d900:	683d      	ldr	r5, [r7, #0]
 800d902:	eba8 0000 	sub.w	r0, r8, r0
 800d906:	42a8      	cmp	r0, r5
 800d908:	dd59      	ble.n	800d9be <__gethex+0x24e>
 800d90a:	eba0 0805 	sub.w	r8, r0, r5
 800d90e:	4641      	mov	r1, r8
 800d910:	4620      	mov	r0, r4
 800d912:	f7fe fb23 	bl	800bf5c <__any_on>
 800d916:	4683      	mov	fp, r0
 800d918:	b1b8      	cbz	r0, 800d94a <__gethex+0x1da>
 800d91a:	f108 33ff 	add.w	r3, r8, #4294967295
 800d91e:	1159      	asrs	r1, r3, #5
 800d920:	f003 021f 	and.w	r2, r3, #31
 800d924:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d928:	f04f 0b01 	mov.w	fp, #1
 800d92c:	fa0b f202 	lsl.w	r2, fp, r2
 800d930:	420a      	tst	r2, r1
 800d932:	d00a      	beq.n	800d94a <__gethex+0x1da>
 800d934:	455b      	cmp	r3, fp
 800d936:	dd06      	ble.n	800d946 <__gethex+0x1d6>
 800d938:	f1a8 0102 	sub.w	r1, r8, #2
 800d93c:	4620      	mov	r0, r4
 800d93e:	f7fe fb0d 	bl	800bf5c <__any_on>
 800d942:	2800      	cmp	r0, #0
 800d944:	d138      	bne.n	800d9b8 <__gethex+0x248>
 800d946:	f04f 0b02 	mov.w	fp, #2
 800d94a:	4641      	mov	r1, r8
 800d94c:	4620      	mov	r0, r4
 800d94e:	f7ff fea7 	bl	800d6a0 <rshift>
 800d952:	4446      	add	r6, r8
 800d954:	68bb      	ldr	r3, [r7, #8]
 800d956:	42b3      	cmp	r3, r6
 800d958:	da41      	bge.n	800d9de <__gethex+0x26e>
 800d95a:	4621      	mov	r1, r4
 800d95c:	4648      	mov	r0, r9
 800d95e:	f7fd feb1 	bl	800b6c4 <_Bfree>
 800d962:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d964:	2300      	movs	r3, #0
 800d966:	6013      	str	r3, [r2, #0]
 800d968:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800d96c:	e78a      	b.n	800d884 <__gethex+0x114>
 800d96e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800d972:	2a2e      	cmp	r2, #46	; 0x2e
 800d974:	d014      	beq.n	800d9a0 <__gethex+0x230>
 800d976:	2b20      	cmp	r3, #32
 800d978:	d106      	bne.n	800d988 <__gethex+0x218>
 800d97a:	9b01      	ldr	r3, [sp, #4]
 800d97c:	f843 bb04 	str.w	fp, [r3], #4
 800d980:	f04f 0b00 	mov.w	fp, #0
 800d984:	9301      	str	r3, [sp, #4]
 800d986:	465b      	mov	r3, fp
 800d988:	7828      	ldrb	r0, [r5, #0]
 800d98a:	9303      	str	r3, [sp, #12]
 800d98c:	f7ff feda 	bl	800d744 <__hexdig_fun>
 800d990:	9b03      	ldr	r3, [sp, #12]
 800d992:	f000 000f 	and.w	r0, r0, #15
 800d996:	4098      	lsls	r0, r3
 800d998:	ea4b 0b00 	orr.w	fp, fp, r0
 800d99c:	3304      	adds	r3, #4
 800d99e:	e7a1      	b.n	800d8e4 <__gethex+0x174>
 800d9a0:	45a8      	cmp	r8, r5
 800d9a2:	d8e8      	bhi.n	800d976 <__gethex+0x206>
 800d9a4:	2201      	movs	r2, #1
 800d9a6:	4628      	mov	r0, r5
 800d9a8:	9303      	str	r3, [sp, #12]
 800d9aa:	f7ff fdeb 	bl	800d584 <strncmp>
 800d9ae:	4926      	ldr	r1, [pc, #152]	; (800da48 <__gethex+0x2d8>)
 800d9b0:	9b03      	ldr	r3, [sp, #12]
 800d9b2:	2800      	cmp	r0, #0
 800d9b4:	d1df      	bne.n	800d976 <__gethex+0x206>
 800d9b6:	e795      	b.n	800d8e4 <__gethex+0x174>
 800d9b8:	f04f 0b03 	mov.w	fp, #3
 800d9bc:	e7c5      	b.n	800d94a <__gethex+0x1da>
 800d9be:	da0b      	bge.n	800d9d8 <__gethex+0x268>
 800d9c0:	eba5 0800 	sub.w	r8, r5, r0
 800d9c4:	4621      	mov	r1, r4
 800d9c6:	4642      	mov	r2, r8
 800d9c8:	4648      	mov	r0, r9
 800d9ca:	f7fe f895 	bl	800baf8 <__lshift>
 800d9ce:	eba6 0608 	sub.w	r6, r6, r8
 800d9d2:	4604      	mov	r4, r0
 800d9d4:	f100 0a14 	add.w	sl, r0, #20
 800d9d8:	f04f 0b00 	mov.w	fp, #0
 800d9dc:	e7ba      	b.n	800d954 <__gethex+0x1e4>
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	42b3      	cmp	r3, r6
 800d9e2:	dd73      	ble.n	800dacc <__gethex+0x35c>
 800d9e4:	1b9e      	subs	r6, r3, r6
 800d9e6:	42b5      	cmp	r5, r6
 800d9e8:	dc34      	bgt.n	800da54 <__gethex+0x2e4>
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	2b02      	cmp	r3, #2
 800d9ee:	d023      	beq.n	800da38 <__gethex+0x2c8>
 800d9f0:	2b03      	cmp	r3, #3
 800d9f2:	d025      	beq.n	800da40 <__gethex+0x2d0>
 800d9f4:	2b01      	cmp	r3, #1
 800d9f6:	d115      	bne.n	800da24 <__gethex+0x2b4>
 800d9f8:	42b5      	cmp	r5, r6
 800d9fa:	d113      	bne.n	800da24 <__gethex+0x2b4>
 800d9fc:	2d01      	cmp	r5, #1
 800d9fe:	d10b      	bne.n	800da18 <__gethex+0x2a8>
 800da00:	9a02      	ldr	r2, [sp, #8]
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6013      	str	r3, [r2, #0]
 800da06:	2301      	movs	r3, #1
 800da08:	6123      	str	r3, [r4, #16]
 800da0a:	f8ca 3000 	str.w	r3, [sl]
 800da0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800da10:	f04f 0862 	mov.w	r8, #98	; 0x62
 800da14:	601c      	str	r4, [r3, #0]
 800da16:	e735      	b.n	800d884 <__gethex+0x114>
 800da18:	1e69      	subs	r1, r5, #1
 800da1a:	4620      	mov	r0, r4
 800da1c:	f7fe fa9e 	bl	800bf5c <__any_on>
 800da20:	2800      	cmp	r0, #0
 800da22:	d1ed      	bne.n	800da00 <__gethex+0x290>
 800da24:	4621      	mov	r1, r4
 800da26:	4648      	mov	r0, r9
 800da28:	f7fd fe4c 	bl	800b6c4 <_Bfree>
 800da2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800da2e:	2300      	movs	r3, #0
 800da30:	6013      	str	r3, [r2, #0]
 800da32:	f04f 0850 	mov.w	r8, #80	; 0x50
 800da36:	e725      	b.n	800d884 <__gethex+0x114>
 800da38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d1f2      	bne.n	800da24 <__gethex+0x2b4>
 800da3e:	e7df      	b.n	800da00 <__gethex+0x290>
 800da40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800da42:	2b00      	cmp	r3, #0
 800da44:	d1dc      	bne.n	800da00 <__gethex+0x290>
 800da46:	e7ed      	b.n	800da24 <__gethex+0x2b4>
 800da48:	0800ef9c 	.word	0x0800ef9c
 800da4c:	0800ee31 	.word	0x0800ee31
 800da50:	0800f146 	.word	0x0800f146
 800da54:	f106 38ff 	add.w	r8, r6, #4294967295
 800da58:	f1bb 0f00 	cmp.w	fp, #0
 800da5c:	d133      	bne.n	800dac6 <__gethex+0x356>
 800da5e:	f1b8 0f00 	cmp.w	r8, #0
 800da62:	d004      	beq.n	800da6e <__gethex+0x2fe>
 800da64:	4641      	mov	r1, r8
 800da66:	4620      	mov	r0, r4
 800da68:	f7fe fa78 	bl	800bf5c <__any_on>
 800da6c:	4683      	mov	fp, r0
 800da6e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800da72:	2301      	movs	r3, #1
 800da74:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800da78:	f008 081f 	and.w	r8, r8, #31
 800da7c:	fa03 f308 	lsl.w	r3, r3, r8
 800da80:	4213      	tst	r3, r2
 800da82:	4631      	mov	r1, r6
 800da84:	4620      	mov	r0, r4
 800da86:	bf18      	it	ne
 800da88:	f04b 0b02 	orrne.w	fp, fp, #2
 800da8c:	1bad      	subs	r5, r5, r6
 800da8e:	f7ff fe07 	bl	800d6a0 <rshift>
 800da92:	687e      	ldr	r6, [r7, #4]
 800da94:	f04f 0802 	mov.w	r8, #2
 800da98:	f1bb 0f00 	cmp.w	fp, #0
 800da9c:	d04a      	beq.n	800db34 <__gethex+0x3c4>
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	2b02      	cmp	r3, #2
 800daa2:	d016      	beq.n	800dad2 <__gethex+0x362>
 800daa4:	2b03      	cmp	r3, #3
 800daa6:	d018      	beq.n	800dada <__gethex+0x36a>
 800daa8:	2b01      	cmp	r3, #1
 800daaa:	d109      	bne.n	800dac0 <__gethex+0x350>
 800daac:	f01b 0f02 	tst.w	fp, #2
 800dab0:	d006      	beq.n	800dac0 <__gethex+0x350>
 800dab2:	f8da 3000 	ldr.w	r3, [sl]
 800dab6:	ea4b 0b03 	orr.w	fp, fp, r3
 800daba:	f01b 0f01 	tst.w	fp, #1
 800dabe:	d10f      	bne.n	800dae0 <__gethex+0x370>
 800dac0:	f048 0810 	orr.w	r8, r8, #16
 800dac4:	e036      	b.n	800db34 <__gethex+0x3c4>
 800dac6:	f04f 0b01 	mov.w	fp, #1
 800daca:	e7d0      	b.n	800da6e <__gethex+0x2fe>
 800dacc:	f04f 0801 	mov.w	r8, #1
 800dad0:	e7e2      	b.n	800da98 <__gethex+0x328>
 800dad2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dad4:	f1c3 0301 	rsb	r3, r3, #1
 800dad8:	930f      	str	r3, [sp, #60]	; 0x3c
 800dada:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d0ef      	beq.n	800dac0 <__gethex+0x350>
 800dae0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dae4:	f104 0214 	add.w	r2, r4, #20
 800dae8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800daec:	9301      	str	r3, [sp, #4]
 800daee:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800daf2:	2300      	movs	r3, #0
 800daf4:	4694      	mov	ip, r2
 800daf6:	f852 1b04 	ldr.w	r1, [r2], #4
 800dafa:	f1b1 3fff 	cmp.w	r1, #4294967295
 800dafe:	d01e      	beq.n	800db3e <__gethex+0x3ce>
 800db00:	3101      	adds	r1, #1
 800db02:	f8cc 1000 	str.w	r1, [ip]
 800db06:	f1b8 0f02 	cmp.w	r8, #2
 800db0a:	f104 0214 	add.w	r2, r4, #20
 800db0e:	d13d      	bne.n	800db8c <__gethex+0x41c>
 800db10:	683b      	ldr	r3, [r7, #0]
 800db12:	3b01      	subs	r3, #1
 800db14:	42ab      	cmp	r3, r5
 800db16:	d10b      	bne.n	800db30 <__gethex+0x3c0>
 800db18:	1169      	asrs	r1, r5, #5
 800db1a:	2301      	movs	r3, #1
 800db1c:	f005 051f 	and.w	r5, r5, #31
 800db20:	fa03 f505 	lsl.w	r5, r3, r5
 800db24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800db28:	421d      	tst	r5, r3
 800db2a:	bf18      	it	ne
 800db2c:	f04f 0801 	movne.w	r8, #1
 800db30:	f048 0820 	orr.w	r8, r8, #32
 800db34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db36:	601c      	str	r4, [r3, #0]
 800db38:	9b02      	ldr	r3, [sp, #8]
 800db3a:	601e      	str	r6, [r3, #0]
 800db3c:	e6a2      	b.n	800d884 <__gethex+0x114>
 800db3e:	4290      	cmp	r0, r2
 800db40:	f842 3c04 	str.w	r3, [r2, #-4]
 800db44:	d8d6      	bhi.n	800daf4 <__gethex+0x384>
 800db46:	68a2      	ldr	r2, [r4, #8]
 800db48:	4593      	cmp	fp, r2
 800db4a:	db17      	blt.n	800db7c <__gethex+0x40c>
 800db4c:	6861      	ldr	r1, [r4, #4]
 800db4e:	4648      	mov	r0, r9
 800db50:	3101      	adds	r1, #1
 800db52:	f7fd fd77 	bl	800b644 <_Balloc>
 800db56:	4682      	mov	sl, r0
 800db58:	b918      	cbnz	r0, 800db62 <__gethex+0x3f2>
 800db5a:	4b1b      	ldr	r3, [pc, #108]	; (800dbc8 <__gethex+0x458>)
 800db5c:	4602      	mov	r2, r0
 800db5e:	2184      	movs	r1, #132	; 0x84
 800db60:	e6b3      	b.n	800d8ca <__gethex+0x15a>
 800db62:	6922      	ldr	r2, [r4, #16]
 800db64:	3202      	adds	r2, #2
 800db66:	f104 010c 	add.w	r1, r4, #12
 800db6a:	0092      	lsls	r2, r2, #2
 800db6c:	300c      	adds	r0, #12
 800db6e:	f7ff fd4d 	bl	800d60c <memcpy>
 800db72:	4621      	mov	r1, r4
 800db74:	4648      	mov	r0, r9
 800db76:	f7fd fda5 	bl	800b6c4 <_Bfree>
 800db7a:	4654      	mov	r4, sl
 800db7c:	6922      	ldr	r2, [r4, #16]
 800db7e:	1c51      	adds	r1, r2, #1
 800db80:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800db84:	6121      	str	r1, [r4, #16]
 800db86:	2101      	movs	r1, #1
 800db88:	6151      	str	r1, [r2, #20]
 800db8a:	e7bc      	b.n	800db06 <__gethex+0x396>
 800db8c:	6921      	ldr	r1, [r4, #16]
 800db8e:	4559      	cmp	r1, fp
 800db90:	dd0b      	ble.n	800dbaa <__gethex+0x43a>
 800db92:	2101      	movs	r1, #1
 800db94:	4620      	mov	r0, r4
 800db96:	f7ff fd83 	bl	800d6a0 <rshift>
 800db9a:	68bb      	ldr	r3, [r7, #8]
 800db9c:	3601      	adds	r6, #1
 800db9e:	42b3      	cmp	r3, r6
 800dba0:	f6ff aedb 	blt.w	800d95a <__gethex+0x1ea>
 800dba4:	f04f 0801 	mov.w	r8, #1
 800dba8:	e7c2      	b.n	800db30 <__gethex+0x3c0>
 800dbaa:	f015 051f 	ands.w	r5, r5, #31
 800dbae:	d0f9      	beq.n	800dba4 <__gethex+0x434>
 800dbb0:	9b01      	ldr	r3, [sp, #4]
 800dbb2:	441a      	add	r2, r3
 800dbb4:	f1c5 0520 	rsb	r5, r5, #32
 800dbb8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800dbbc:	f7fd fe34 	bl	800b828 <__hi0bits>
 800dbc0:	42a8      	cmp	r0, r5
 800dbc2:	dbe6      	blt.n	800db92 <__gethex+0x422>
 800dbc4:	e7ee      	b.n	800dba4 <__gethex+0x434>
 800dbc6:	bf00      	nop
 800dbc8:	0800ee31 	.word	0x0800ee31

0800dbcc <L_shift>:
 800dbcc:	f1c2 0208 	rsb	r2, r2, #8
 800dbd0:	0092      	lsls	r2, r2, #2
 800dbd2:	b570      	push	{r4, r5, r6, lr}
 800dbd4:	f1c2 0620 	rsb	r6, r2, #32
 800dbd8:	6843      	ldr	r3, [r0, #4]
 800dbda:	6804      	ldr	r4, [r0, #0]
 800dbdc:	fa03 f506 	lsl.w	r5, r3, r6
 800dbe0:	432c      	orrs	r4, r5
 800dbe2:	40d3      	lsrs	r3, r2
 800dbe4:	6004      	str	r4, [r0, #0]
 800dbe6:	f840 3f04 	str.w	r3, [r0, #4]!
 800dbea:	4288      	cmp	r0, r1
 800dbec:	d3f4      	bcc.n	800dbd8 <L_shift+0xc>
 800dbee:	bd70      	pop	{r4, r5, r6, pc}

0800dbf0 <__match>:
 800dbf0:	b530      	push	{r4, r5, lr}
 800dbf2:	6803      	ldr	r3, [r0, #0]
 800dbf4:	3301      	adds	r3, #1
 800dbf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dbfa:	b914      	cbnz	r4, 800dc02 <__match+0x12>
 800dbfc:	6003      	str	r3, [r0, #0]
 800dbfe:	2001      	movs	r0, #1
 800dc00:	bd30      	pop	{r4, r5, pc}
 800dc02:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc06:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800dc0a:	2d19      	cmp	r5, #25
 800dc0c:	bf98      	it	ls
 800dc0e:	3220      	addls	r2, #32
 800dc10:	42a2      	cmp	r2, r4
 800dc12:	d0f0      	beq.n	800dbf6 <__match+0x6>
 800dc14:	2000      	movs	r0, #0
 800dc16:	e7f3      	b.n	800dc00 <__match+0x10>

0800dc18 <__hexnan>:
 800dc18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc1c:	680b      	ldr	r3, [r1, #0]
 800dc1e:	6801      	ldr	r1, [r0, #0]
 800dc20:	115e      	asrs	r6, r3, #5
 800dc22:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800dc26:	f013 031f 	ands.w	r3, r3, #31
 800dc2a:	b087      	sub	sp, #28
 800dc2c:	bf18      	it	ne
 800dc2e:	3604      	addne	r6, #4
 800dc30:	2500      	movs	r5, #0
 800dc32:	1f37      	subs	r7, r6, #4
 800dc34:	4682      	mov	sl, r0
 800dc36:	4690      	mov	r8, r2
 800dc38:	9301      	str	r3, [sp, #4]
 800dc3a:	f846 5c04 	str.w	r5, [r6, #-4]
 800dc3e:	46b9      	mov	r9, r7
 800dc40:	463c      	mov	r4, r7
 800dc42:	9502      	str	r5, [sp, #8]
 800dc44:	46ab      	mov	fp, r5
 800dc46:	784a      	ldrb	r2, [r1, #1]
 800dc48:	1c4b      	adds	r3, r1, #1
 800dc4a:	9303      	str	r3, [sp, #12]
 800dc4c:	b342      	cbz	r2, 800dca0 <__hexnan+0x88>
 800dc4e:	4610      	mov	r0, r2
 800dc50:	9105      	str	r1, [sp, #20]
 800dc52:	9204      	str	r2, [sp, #16]
 800dc54:	f7ff fd76 	bl	800d744 <__hexdig_fun>
 800dc58:	2800      	cmp	r0, #0
 800dc5a:	d14f      	bne.n	800dcfc <__hexnan+0xe4>
 800dc5c:	9a04      	ldr	r2, [sp, #16]
 800dc5e:	9905      	ldr	r1, [sp, #20]
 800dc60:	2a20      	cmp	r2, #32
 800dc62:	d818      	bhi.n	800dc96 <__hexnan+0x7e>
 800dc64:	9b02      	ldr	r3, [sp, #8]
 800dc66:	459b      	cmp	fp, r3
 800dc68:	dd13      	ble.n	800dc92 <__hexnan+0x7a>
 800dc6a:	454c      	cmp	r4, r9
 800dc6c:	d206      	bcs.n	800dc7c <__hexnan+0x64>
 800dc6e:	2d07      	cmp	r5, #7
 800dc70:	dc04      	bgt.n	800dc7c <__hexnan+0x64>
 800dc72:	462a      	mov	r2, r5
 800dc74:	4649      	mov	r1, r9
 800dc76:	4620      	mov	r0, r4
 800dc78:	f7ff ffa8 	bl	800dbcc <L_shift>
 800dc7c:	4544      	cmp	r4, r8
 800dc7e:	d950      	bls.n	800dd22 <__hexnan+0x10a>
 800dc80:	2300      	movs	r3, #0
 800dc82:	f1a4 0904 	sub.w	r9, r4, #4
 800dc86:	f844 3c04 	str.w	r3, [r4, #-4]
 800dc8a:	f8cd b008 	str.w	fp, [sp, #8]
 800dc8e:	464c      	mov	r4, r9
 800dc90:	461d      	mov	r5, r3
 800dc92:	9903      	ldr	r1, [sp, #12]
 800dc94:	e7d7      	b.n	800dc46 <__hexnan+0x2e>
 800dc96:	2a29      	cmp	r2, #41	; 0x29
 800dc98:	d155      	bne.n	800dd46 <__hexnan+0x12e>
 800dc9a:	3102      	adds	r1, #2
 800dc9c:	f8ca 1000 	str.w	r1, [sl]
 800dca0:	f1bb 0f00 	cmp.w	fp, #0
 800dca4:	d04f      	beq.n	800dd46 <__hexnan+0x12e>
 800dca6:	454c      	cmp	r4, r9
 800dca8:	d206      	bcs.n	800dcb8 <__hexnan+0xa0>
 800dcaa:	2d07      	cmp	r5, #7
 800dcac:	dc04      	bgt.n	800dcb8 <__hexnan+0xa0>
 800dcae:	462a      	mov	r2, r5
 800dcb0:	4649      	mov	r1, r9
 800dcb2:	4620      	mov	r0, r4
 800dcb4:	f7ff ff8a 	bl	800dbcc <L_shift>
 800dcb8:	4544      	cmp	r4, r8
 800dcba:	d934      	bls.n	800dd26 <__hexnan+0x10e>
 800dcbc:	f1a8 0204 	sub.w	r2, r8, #4
 800dcc0:	4623      	mov	r3, r4
 800dcc2:	f853 1b04 	ldr.w	r1, [r3], #4
 800dcc6:	f842 1f04 	str.w	r1, [r2, #4]!
 800dcca:	429f      	cmp	r7, r3
 800dccc:	d2f9      	bcs.n	800dcc2 <__hexnan+0xaa>
 800dcce:	1b3b      	subs	r3, r7, r4
 800dcd0:	f023 0303 	bic.w	r3, r3, #3
 800dcd4:	3304      	adds	r3, #4
 800dcd6:	3e03      	subs	r6, #3
 800dcd8:	3401      	adds	r4, #1
 800dcda:	42a6      	cmp	r6, r4
 800dcdc:	bf38      	it	cc
 800dcde:	2304      	movcc	r3, #4
 800dce0:	4443      	add	r3, r8
 800dce2:	2200      	movs	r2, #0
 800dce4:	f843 2b04 	str.w	r2, [r3], #4
 800dce8:	429f      	cmp	r7, r3
 800dcea:	d2fb      	bcs.n	800dce4 <__hexnan+0xcc>
 800dcec:	683b      	ldr	r3, [r7, #0]
 800dcee:	b91b      	cbnz	r3, 800dcf8 <__hexnan+0xe0>
 800dcf0:	4547      	cmp	r7, r8
 800dcf2:	d126      	bne.n	800dd42 <__hexnan+0x12a>
 800dcf4:	2301      	movs	r3, #1
 800dcf6:	603b      	str	r3, [r7, #0]
 800dcf8:	2005      	movs	r0, #5
 800dcfa:	e025      	b.n	800dd48 <__hexnan+0x130>
 800dcfc:	3501      	adds	r5, #1
 800dcfe:	2d08      	cmp	r5, #8
 800dd00:	f10b 0b01 	add.w	fp, fp, #1
 800dd04:	dd06      	ble.n	800dd14 <__hexnan+0xfc>
 800dd06:	4544      	cmp	r4, r8
 800dd08:	d9c3      	bls.n	800dc92 <__hexnan+0x7a>
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	f844 3c04 	str.w	r3, [r4, #-4]
 800dd10:	2501      	movs	r5, #1
 800dd12:	3c04      	subs	r4, #4
 800dd14:	6822      	ldr	r2, [r4, #0]
 800dd16:	f000 000f 	and.w	r0, r0, #15
 800dd1a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800dd1e:	6020      	str	r0, [r4, #0]
 800dd20:	e7b7      	b.n	800dc92 <__hexnan+0x7a>
 800dd22:	2508      	movs	r5, #8
 800dd24:	e7b5      	b.n	800dc92 <__hexnan+0x7a>
 800dd26:	9b01      	ldr	r3, [sp, #4]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d0df      	beq.n	800dcec <__hexnan+0xd4>
 800dd2c:	f1c3 0320 	rsb	r3, r3, #32
 800dd30:	f04f 32ff 	mov.w	r2, #4294967295
 800dd34:	40da      	lsrs	r2, r3
 800dd36:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800dd3a:	4013      	ands	r3, r2
 800dd3c:	f846 3c04 	str.w	r3, [r6, #-4]
 800dd40:	e7d4      	b.n	800dcec <__hexnan+0xd4>
 800dd42:	3f04      	subs	r7, #4
 800dd44:	e7d2      	b.n	800dcec <__hexnan+0xd4>
 800dd46:	2004      	movs	r0, #4
 800dd48:	b007      	add	sp, #28
 800dd4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dd4e <__ascii_mbtowc>:
 800dd4e:	b082      	sub	sp, #8
 800dd50:	b901      	cbnz	r1, 800dd54 <__ascii_mbtowc+0x6>
 800dd52:	a901      	add	r1, sp, #4
 800dd54:	b142      	cbz	r2, 800dd68 <__ascii_mbtowc+0x1a>
 800dd56:	b14b      	cbz	r3, 800dd6c <__ascii_mbtowc+0x1e>
 800dd58:	7813      	ldrb	r3, [r2, #0]
 800dd5a:	600b      	str	r3, [r1, #0]
 800dd5c:	7812      	ldrb	r2, [r2, #0]
 800dd5e:	1e10      	subs	r0, r2, #0
 800dd60:	bf18      	it	ne
 800dd62:	2001      	movne	r0, #1
 800dd64:	b002      	add	sp, #8
 800dd66:	4770      	bx	lr
 800dd68:	4610      	mov	r0, r2
 800dd6a:	e7fb      	b.n	800dd64 <__ascii_mbtowc+0x16>
 800dd6c:	f06f 0001 	mvn.w	r0, #1
 800dd70:	e7f8      	b.n	800dd64 <__ascii_mbtowc+0x16>

0800dd72 <_realloc_r>:
 800dd72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd76:	4680      	mov	r8, r0
 800dd78:	4614      	mov	r4, r2
 800dd7a:	460e      	mov	r6, r1
 800dd7c:	b921      	cbnz	r1, 800dd88 <_realloc_r+0x16>
 800dd7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd82:	4611      	mov	r1, r2
 800dd84:	f7fd bbd2 	b.w	800b52c <_malloc_r>
 800dd88:	b92a      	cbnz	r2, 800dd96 <_realloc_r+0x24>
 800dd8a:	f7fd fb5b 	bl	800b444 <_free_r>
 800dd8e:	4625      	mov	r5, r4
 800dd90:	4628      	mov	r0, r5
 800dd92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd96:	f000 f842 	bl	800de1e <_malloc_usable_size_r>
 800dd9a:	4284      	cmp	r4, r0
 800dd9c:	4607      	mov	r7, r0
 800dd9e:	d802      	bhi.n	800dda6 <_realloc_r+0x34>
 800dda0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dda4:	d812      	bhi.n	800ddcc <_realloc_r+0x5a>
 800dda6:	4621      	mov	r1, r4
 800dda8:	4640      	mov	r0, r8
 800ddaa:	f7fd fbbf 	bl	800b52c <_malloc_r>
 800ddae:	4605      	mov	r5, r0
 800ddb0:	2800      	cmp	r0, #0
 800ddb2:	d0ed      	beq.n	800dd90 <_realloc_r+0x1e>
 800ddb4:	42bc      	cmp	r4, r7
 800ddb6:	4622      	mov	r2, r4
 800ddb8:	4631      	mov	r1, r6
 800ddba:	bf28      	it	cs
 800ddbc:	463a      	movcs	r2, r7
 800ddbe:	f7ff fc25 	bl	800d60c <memcpy>
 800ddc2:	4631      	mov	r1, r6
 800ddc4:	4640      	mov	r0, r8
 800ddc6:	f7fd fb3d 	bl	800b444 <_free_r>
 800ddca:	e7e1      	b.n	800dd90 <_realloc_r+0x1e>
 800ddcc:	4635      	mov	r5, r6
 800ddce:	e7df      	b.n	800dd90 <_realloc_r+0x1e>

0800ddd0 <__ascii_wctomb>:
 800ddd0:	b149      	cbz	r1, 800dde6 <__ascii_wctomb+0x16>
 800ddd2:	2aff      	cmp	r2, #255	; 0xff
 800ddd4:	bf85      	ittet	hi
 800ddd6:	238a      	movhi	r3, #138	; 0x8a
 800ddd8:	6003      	strhi	r3, [r0, #0]
 800ddda:	700a      	strbls	r2, [r1, #0]
 800dddc:	f04f 30ff 	movhi.w	r0, #4294967295
 800dde0:	bf98      	it	ls
 800dde2:	2001      	movls	r0, #1
 800dde4:	4770      	bx	lr
 800dde6:	4608      	mov	r0, r1
 800dde8:	4770      	bx	lr
	...

0800ddec <fiprintf>:
 800ddec:	b40e      	push	{r1, r2, r3}
 800ddee:	b503      	push	{r0, r1, lr}
 800ddf0:	4601      	mov	r1, r0
 800ddf2:	ab03      	add	r3, sp, #12
 800ddf4:	4805      	ldr	r0, [pc, #20]	; (800de0c <fiprintf+0x20>)
 800ddf6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ddfa:	6800      	ldr	r0, [r0, #0]
 800ddfc:	9301      	str	r3, [sp, #4]
 800ddfe:	f7ff f8e7 	bl	800cfd0 <_vfiprintf_r>
 800de02:	b002      	add	sp, #8
 800de04:	f85d eb04 	ldr.w	lr, [sp], #4
 800de08:	b003      	add	sp, #12
 800de0a:	4770      	bx	lr
 800de0c:	20000074 	.word	0x20000074

0800de10 <abort>:
 800de10:	b508      	push	{r3, lr}
 800de12:	2006      	movs	r0, #6
 800de14:	f000 f834 	bl	800de80 <raise>
 800de18:	2001      	movs	r0, #1
 800de1a:	f7f5 fd71 	bl	8003900 <_exit>

0800de1e <_malloc_usable_size_r>:
 800de1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de22:	1f18      	subs	r0, r3, #4
 800de24:	2b00      	cmp	r3, #0
 800de26:	bfbc      	itt	lt
 800de28:	580b      	ldrlt	r3, [r1, r0]
 800de2a:	18c0      	addlt	r0, r0, r3
 800de2c:	4770      	bx	lr

0800de2e <_raise_r>:
 800de2e:	291f      	cmp	r1, #31
 800de30:	b538      	push	{r3, r4, r5, lr}
 800de32:	4604      	mov	r4, r0
 800de34:	460d      	mov	r5, r1
 800de36:	d904      	bls.n	800de42 <_raise_r+0x14>
 800de38:	2316      	movs	r3, #22
 800de3a:	6003      	str	r3, [r0, #0]
 800de3c:	f04f 30ff 	mov.w	r0, #4294967295
 800de40:	bd38      	pop	{r3, r4, r5, pc}
 800de42:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800de44:	b112      	cbz	r2, 800de4c <_raise_r+0x1e>
 800de46:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800de4a:	b94b      	cbnz	r3, 800de60 <_raise_r+0x32>
 800de4c:	4620      	mov	r0, r4
 800de4e:	f000 f831 	bl	800deb4 <_getpid_r>
 800de52:	462a      	mov	r2, r5
 800de54:	4601      	mov	r1, r0
 800de56:	4620      	mov	r0, r4
 800de58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de5c:	f000 b818 	b.w	800de90 <_kill_r>
 800de60:	2b01      	cmp	r3, #1
 800de62:	d00a      	beq.n	800de7a <_raise_r+0x4c>
 800de64:	1c59      	adds	r1, r3, #1
 800de66:	d103      	bne.n	800de70 <_raise_r+0x42>
 800de68:	2316      	movs	r3, #22
 800de6a:	6003      	str	r3, [r0, #0]
 800de6c:	2001      	movs	r0, #1
 800de6e:	e7e7      	b.n	800de40 <_raise_r+0x12>
 800de70:	2400      	movs	r4, #0
 800de72:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800de76:	4628      	mov	r0, r5
 800de78:	4798      	blx	r3
 800de7a:	2000      	movs	r0, #0
 800de7c:	e7e0      	b.n	800de40 <_raise_r+0x12>
	...

0800de80 <raise>:
 800de80:	4b02      	ldr	r3, [pc, #8]	; (800de8c <raise+0xc>)
 800de82:	4601      	mov	r1, r0
 800de84:	6818      	ldr	r0, [r3, #0]
 800de86:	f7ff bfd2 	b.w	800de2e <_raise_r>
 800de8a:	bf00      	nop
 800de8c:	20000074 	.word	0x20000074

0800de90 <_kill_r>:
 800de90:	b538      	push	{r3, r4, r5, lr}
 800de92:	4d07      	ldr	r5, [pc, #28]	; (800deb0 <_kill_r+0x20>)
 800de94:	2300      	movs	r3, #0
 800de96:	4604      	mov	r4, r0
 800de98:	4608      	mov	r0, r1
 800de9a:	4611      	mov	r1, r2
 800de9c:	602b      	str	r3, [r5, #0]
 800de9e:	f7f5 fd1f 	bl	80038e0 <_kill>
 800dea2:	1c43      	adds	r3, r0, #1
 800dea4:	d102      	bne.n	800deac <_kill_r+0x1c>
 800dea6:	682b      	ldr	r3, [r5, #0]
 800dea8:	b103      	cbz	r3, 800deac <_kill_r+0x1c>
 800deaa:	6023      	str	r3, [r4, #0]
 800deac:	bd38      	pop	{r3, r4, r5, pc}
 800deae:	bf00      	nop
 800deb0:	2000106c 	.word	0x2000106c

0800deb4 <_getpid_r>:
 800deb4:	f7f5 bd0c 	b.w	80038d0 <_getpid>

0800deb8 <pow>:
 800deb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deba:	ed2d 8b02 	vpush	{d8}
 800debe:	eeb0 8a40 	vmov.f32	s16, s0
 800dec2:	eef0 8a60 	vmov.f32	s17, s1
 800dec6:	ec55 4b11 	vmov	r4, r5, d1
 800deca:	f000 f871 	bl	800dfb0 <__ieee754_pow>
 800dece:	4622      	mov	r2, r4
 800ded0:	462b      	mov	r3, r5
 800ded2:	4620      	mov	r0, r4
 800ded4:	4629      	mov	r1, r5
 800ded6:	ec57 6b10 	vmov	r6, r7, d0
 800deda:	f7f2 fe37 	bl	8000b4c <__aeabi_dcmpun>
 800dede:	2800      	cmp	r0, #0
 800dee0:	d13b      	bne.n	800df5a <pow+0xa2>
 800dee2:	ec51 0b18 	vmov	r0, r1, d8
 800dee6:	2200      	movs	r2, #0
 800dee8:	2300      	movs	r3, #0
 800deea:	f7f2 fdfd 	bl	8000ae8 <__aeabi_dcmpeq>
 800deee:	b1b8      	cbz	r0, 800df20 <pow+0x68>
 800def0:	2200      	movs	r2, #0
 800def2:	2300      	movs	r3, #0
 800def4:	4620      	mov	r0, r4
 800def6:	4629      	mov	r1, r5
 800def8:	f7f2 fdf6 	bl	8000ae8 <__aeabi_dcmpeq>
 800defc:	2800      	cmp	r0, #0
 800defe:	d146      	bne.n	800df8e <pow+0xd6>
 800df00:	ec45 4b10 	vmov	d0, r4, r5
 800df04:	f000 f848 	bl	800df98 <finite>
 800df08:	b338      	cbz	r0, 800df5a <pow+0xa2>
 800df0a:	2200      	movs	r2, #0
 800df0c:	2300      	movs	r3, #0
 800df0e:	4620      	mov	r0, r4
 800df10:	4629      	mov	r1, r5
 800df12:	f7f2 fdf3 	bl	8000afc <__aeabi_dcmplt>
 800df16:	b300      	cbz	r0, 800df5a <pow+0xa2>
 800df18:	f7fc fbe4 	bl	800a6e4 <__errno>
 800df1c:	2322      	movs	r3, #34	; 0x22
 800df1e:	e01b      	b.n	800df58 <pow+0xa0>
 800df20:	ec47 6b10 	vmov	d0, r6, r7
 800df24:	f000 f838 	bl	800df98 <finite>
 800df28:	b9e0      	cbnz	r0, 800df64 <pow+0xac>
 800df2a:	eeb0 0a48 	vmov.f32	s0, s16
 800df2e:	eef0 0a68 	vmov.f32	s1, s17
 800df32:	f000 f831 	bl	800df98 <finite>
 800df36:	b1a8      	cbz	r0, 800df64 <pow+0xac>
 800df38:	ec45 4b10 	vmov	d0, r4, r5
 800df3c:	f000 f82c 	bl	800df98 <finite>
 800df40:	b180      	cbz	r0, 800df64 <pow+0xac>
 800df42:	4632      	mov	r2, r6
 800df44:	463b      	mov	r3, r7
 800df46:	4630      	mov	r0, r6
 800df48:	4639      	mov	r1, r7
 800df4a:	f7f2 fdff 	bl	8000b4c <__aeabi_dcmpun>
 800df4e:	2800      	cmp	r0, #0
 800df50:	d0e2      	beq.n	800df18 <pow+0x60>
 800df52:	f7fc fbc7 	bl	800a6e4 <__errno>
 800df56:	2321      	movs	r3, #33	; 0x21
 800df58:	6003      	str	r3, [r0, #0]
 800df5a:	ecbd 8b02 	vpop	{d8}
 800df5e:	ec47 6b10 	vmov	d0, r6, r7
 800df62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df64:	2200      	movs	r2, #0
 800df66:	2300      	movs	r3, #0
 800df68:	4630      	mov	r0, r6
 800df6a:	4639      	mov	r1, r7
 800df6c:	f7f2 fdbc 	bl	8000ae8 <__aeabi_dcmpeq>
 800df70:	2800      	cmp	r0, #0
 800df72:	d0f2      	beq.n	800df5a <pow+0xa2>
 800df74:	eeb0 0a48 	vmov.f32	s0, s16
 800df78:	eef0 0a68 	vmov.f32	s1, s17
 800df7c:	f000 f80c 	bl	800df98 <finite>
 800df80:	2800      	cmp	r0, #0
 800df82:	d0ea      	beq.n	800df5a <pow+0xa2>
 800df84:	ec45 4b10 	vmov	d0, r4, r5
 800df88:	f000 f806 	bl	800df98 <finite>
 800df8c:	e7c3      	b.n	800df16 <pow+0x5e>
 800df8e:	4f01      	ldr	r7, [pc, #4]	; (800df94 <pow+0xdc>)
 800df90:	2600      	movs	r6, #0
 800df92:	e7e2      	b.n	800df5a <pow+0xa2>
 800df94:	3ff00000 	.word	0x3ff00000

0800df98 <finite>:
 800df98:	b082      	sub	sp, #8
 800df9a:	ed8d 0b00 	vstr	d0, [sp]
 800df9e:	9801      	ldr	r0, [sp, #4]
 800dfa0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800dfa4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800dfa8:	0fc0      	lsrs	r0, r0, #31
 800dfaa:	b002      	add	sp, #8
 800dfac:	4770      	bx	lr
	...

0800dfb0 <__ieee754_pow>:
 800dfb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfb4:	ed2d 8b06 	vpush	{d8-d10}
 800dfb8:	b089      	sub	sp, #36	; 0x24
 800dfba:	ed8d 1b00 	vstr	d1, [sp]
 800dfbe:	e9dd 2900 	ldrd	r2, r9, [sp]
 800dfc2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800dfc6:	ea58 0102 	orrs.w	r1, r8, r2
 800dfca:	ec57 6b10 	vmov	r6, r7, d0
 800dfce:	d115      	bne.n	800dffc <__ieee754_pow+0x4c>
 800dfd0:	19b3      	adds	r3, r6, r6
 800dfd2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800dfd6:	4152      	adcs	r2, r2
 800dfd8:	4299      	cmp	r1, r3
 800dfda:	4b89      	ldr	r3, [pc, #548]	; (800e200 <__ieee754_pow+0x250>)
 800dfdc:	4193      	sbcs	r3, r2
 800dfde:	f080 84d1 	bcs.w	800e984 <__ieee754_pow+0x9d4>
 800dfe2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dfe6:	4630      	mov	r0, r6
 800dfe8:	4639      	mov	r1, r7
 800dfea:	f7f2 f95f 	bl	80002ac <__adddf3>
 800dfee:	ec41 0b10 	vmov	d0, r0, r1
 800dff2:	b009      	add	sp, #36	; 0x24
 800dff4:	ecbd 8b06 	vpop	{d8-d10}
 800dff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dffc:	4b81      	ldr	r3, [pc, #516]	; (800e204 <__ieee754_pow+0x254>)
 800dffe:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800e002:	429c      	cmp	r4, r3
 800e004:	ee10 aa10 	vmov	sl, s0
 800e008:	463d      	mov	r5, r7
 800e00a:	dc06      	bgt.n	800e01a <__ieee754_pow+0x6a>
 800e00c:	d101      	bne.n	800e012 <__ieee754_pow+0x62>
 800e00e:	2e00      	cmp	r6, #0
 800e010:	d1e7      	bne.n	800dfe2 <__ieee754_pow+0x32>
 800e012:	4598      	cmp	r8, r3
 800e014:	dc01      	bgt.n	800e01a <__ieee754_pow+0x6a>
 800e016:	d10f      	bne.n	800e038 <__ieee754_pow+0x88>
 800e018:	b172      	cbz	r2, 800e038 <__ieee754_pow+0x88>
 800e01a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800e01e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800e022:	ea55 050a 	orrs.w	r5, r5, sl
 800e026:	d1dc      	bne.n	800dfe2 <__ieee754_pow+0x32>
 800e028:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e02c:	18db      	adds	r3, r3, r3
 800e02e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800e032:	4152      	adcs	r2, r2
 800e034:	429d      	cmp	r5, r3
 800e036:	e7d0      	b.n	800dfda <__ieee754_pow+0x2a>
 800e038:	2d00      	cmp	r5, #0
 800e03a:	da3b      	bge.n	800e0b4 <__ieee754_pow+0x104>
 800e03c:	4b72      	ldr	r3, [pc, #456]	; (800e208 <__ieee754_pow+0x258>)
 800e03e:	4598      	cmp	r8, r3
 800e040:	dc51      	bgt.n	800e0e6 <__ieee754_pow+0x136>
 800e042:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800e046:	4598      	cmp	r8, r3
 800e048:	f340 84ab 	ble.w	800e9a2 <__ieee754_pow+0x9f2>
 800e04c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e050:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e054:	2b14      	cmp	r3, #20
 800e056:	dd0f      	ble.n	800e078 <__ieee754_pow+0xc8>
 800e058:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e05c:	fa22 f103 	lsr.w	r1, r2, r3
 800e060:	fa01 f303 	lsl.w	r3, r1, r3
 800e064:	4293      	cmp	r3, r2
 800e066:	f040 849c 	bne.w	800e9a2 <__ieee754_pow+0x9f2>
 800e06a:	f001 0101 	and.w	r1, r1, #1
 800e06e:	f1c1 0302 	rsb	r3, r1, #2
 800e072:	9304      	str	r3, [sp, #16]
 800e074:	b182      	cbz	r2, 800e098 <__ieee754_pow+0xe8>
 800e076:	e05f      	b.n	800e138 <__ieee754_pow+0x188>
 800e078:	2a00      	cmp	r2, #0
 800e07a:	d15b      	bne.n	800e134 <__ieee754_pow+0x184>
 800e07c:	f1c3 0314 	rsb	r3, r3, #20
 800e080:	fa48 f103 	asr.w	r1, r8, r3
 800e084:	fa01 f303 	lsl.w	r3, r1, r3
 800e088:	4543      	cmp	r3, r8
 800e08a:	f040 8487 	bne.w	800e99c <__ieee754_pow+0x9ec>
 800e08e:	f001 0101 	and.w	r1, r1, #1
 800e092:	f1c1 0302 	rsb	r3, r1, #2
 800e096:	9304      	str	r3, [sp, #16]
 800e098:	4b5c      	ldr	r3, [pc, #368]	; (800e20c <__ieee754_pow+0x25c>)
 800e09a:	4598      	cmp	r8, r3
 800e09c:	d132      	bne.n	800e104 <__ieee754_pow+0x154>
 800e09e:	f1b9 0f00 	cmp.w	r9, #0
 800e0a2:	f280 8477 	bge.w	800e994 <__ieee754_pow+0x9e4>
 800e0a6:	4959      	ldr	r1, [pc, #356]	; (800e20c <__ieee754_pow+0x25c>)
 800e0a8:	4632      	mov	r2, r6
 800e0aa:	463b      	mov	r3, r7
 800e0ac:	2000      	movs	r0, #0
 800e0ae:	f7f2 fbdd 	bl	800086c <__aeabi_ddiv>
 800e0b2:	e79c      	b.n	800dfee <__ieee754_pow+0x3e>
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	9304      	str	r3, [sp, #16]
 800e0b8:	2a00      	cmp	r2, #0
 800e0ba:	d13d      	bne.n	800e138 <__ieee754_pow+0x188>
 800e0bc:	4b51      	ldr	r3, [pc, #324]	; (800e204 <__ieee754_pow+0x254>)
 800e0be:	4598      	cmp	r8, r3
 800e0c0:	d1ea      	bne.n	800e098 <__ieee754_pow+0xe8>
 800e0c2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e0c6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e0ca:	ea53 030a 	orrs.w	r3, r3, sl
 800e0ce:	f000 8459 	beq.w	800e984 <__ieee754_pow+0x9d4>
 800e0d2:	4b4f      	ldr	r3, [pc, #316]	; (800e210 <__ieee754_pow+0x260>)
 800e0d4:	429c      	cmp	r4, r3
 800e0d6:	dd08      	ble.n	800e0ea <__ieee754_pow+0x13a>
 800e0d8:	f1b9 0f00 	cmp.w	r9, #0
 800e0dc:	f2c0 8456 	blt.w	800e98c <__ieee754_pow+0x9dc>
 800e0e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e0e4:	e783      	b.n	800dfee <__ieee754_pow+0x3e>
 800e0e6:	2302      	movs	r3, #2
 800e0e8:	e7e5      	b.n	800e0b6 <__ieee754_pow+0x106>
 800e0ea:	f1b9 0f00 	cmp.w	r9, #0
 800e0ee:	f04f 0000 	mov.w	r0, #0
 800e0f2:	f04f 0100 	mov.w	r1, #0
 800e0f6:	f6bf af7a 	bge.w	800dfee <__ieee754_pow+0x3e>
 800e0fa:	e9dd 0300 	ldrd	r0, r3, [sp]
 800e0fe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e102:	e774      	b.n	800dfee <__ieee754_pow+0x3e>
 800e104:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800e108:	d106      	bne.n	800e118 <__ieee754_pow+0x168>
 800e10a:	4632      	mov	r2, r6
 800e10c:	463b      	mov	r3, r7
 800e10e:	4630      	mov	r0, r6
 800e110:	4639      	mov	r1, r7
 800e112:	f7f2 fa81 	bl	8000618 <__aeabi_dmul>
 800e116:	e76a      	b.n	800dfee <__ieee754_pow+0x3e>
 800e118:	4b3e      	ldr	r3, [pc, #248]	; (800e214 <__ieee754_pow+0x264>)
 800e11a:	4599      	cmp	r9, r3
 800e11c:	d10c      	bne.n	800e138 <__ieee754_pow+0x188>
 800e11e:	2d00      	cmp	r5, #0
 800e120:	db0a      	blt.n	800e138 <__ieee754_pow+0x188>
 800e122:	ec47 6b10 	vmov	d0, r6, r7
 800e126:	b009      	add	sp, #36	; 0x24
 800e128:	ecbd 8b06 	vpop	{d8-d10}
 800e12c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e130:	f000 bd20 	b.w	800eb74 <__ieee754_sqrt>
 800e134:	2300      	movs	r3, #0
 800e136:	9304      	str	r3, [sp, #16]
 800e138:	ec47 6b10 	vmov	d0, r6, r7
 800e13c:	f000 fc62 	bl	800ea04 <fabs>
 800e140:	ec51 0b10 	vmov	r0, r1, d0
 800e144:	f1ba 0f00 	cmp.w	sl, #0
 800e148:	d129      	bne.n	800e19e <__ieee754_pow+0x1ee>
 800e14a:	b124      	cbz	r4, 800e156 <__ieee754_pow+0x1a6>
 800e14c:	4b2f      	ldr	r3, [pc, #188]	; (800e20c <__ieee754_pow+0x25c>)
 800e14e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800e152:	429a      	cmp	r2, r3
 800e154:	d123      	bne.n	800e19e <__ieee754_pow+0x1ee>
 800e156:	f1b9 0f00 	cmp.w	r9, #0
 800e15a:	da05      	bge.n	800e168 <__ieee754_pow+0x1b8>
 800e15c:	4602      	mov	r2, r0
 800e15e:	460b      	mov	r3, r1
 800e160:	2000      	movs	r0, #0
 800e162:	492a      	ldr	r1, [pc, #168]	; (800e20c <__ieee754_pow+0x25c>)
 800e164:	f7f2 fb82 	bl	800086c <__aeabi_ddiv>
 800e168:	2d00      	cmp	r5, #0
 800e16a:	f6bf af40 	bge.w	800dfee <__ieee754_pow+0x3e>
 800e16e:	9b04      	ldr	r3, [sp, #16]
 800e170:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e174:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e178:	431c      	orrs	r4, r3
 800e17a:	d108      	bne.n	800e18e <__ieee754_pow+0x1de>
 800e17c:	4602      	mov	r2, r0
 800e17e:	460b      	mov	r3, r1
 800e180:	4610      	mov	r0, r2
 800e182:	4619      	mov	r1, r3
 800e184:	f7f2 f890 	bl	80002a8 <__aeabi_dsub>
 800e188:	4602      	mov	r2, r0
 800e18a:	460b      	mov	r3, r1
 800e18c:	e78f      	b.n	800e0ae <__ieee754_pow+0xfe>
 800e18e:	9b04      	ldr	r3, [sp, #16]
 800e190:	2b01      	cmp	r3, #1
 800e192:	f47f af2c 	bne.w	800dfee <__ieee754_pow+0x3e>
 800e196:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e19a:	4619      	mov	r1, r3
 800e19c:	e727      	b.n	800dfee <__ieee754_pow+0x3e>
 800e19e:	0feb      	lsrs	r3, r5, #31
 800e1a0:	3b01      	subs	r3, #1
 800e1a2:	9306      	str	r3, [sp, #24]
 800e1a4:	9a06      	ldr	r2, [sp, #24]
 800e1a6:	9b04      	ldr	r3, [sp, #16]
 800e1a8:	4313      	orrs	r3, r2
 800e1aa:	d102      	bne.n	800e1b2 <__ieee754_pow+0x202>
 800e1ac:	4632      	mov	r2, r6
 800e1ae:	463b      	mov	r3, r7
 800e1b0:	e7e6      	b.n	800e180 <__ieee754_pow+0x1d0>
 800e1b2:	4b19      	ldr	r3, [pc, #100]	; (800e218 <__ieee754_pow+0x268>)
 800e1b4:	4598      	cmp	r8, r3
 800e1b6:	f340 80fb 	ble.w	800e3b0 <__ieee754_pow+0x400>
 800e1ba:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e1be:	4598      	cmp	r8, r3
 800e1c0:	4b13      	ldr	r3, [pc, #76]	; (800e210 <__ieee754_pow+0x260>)
 800e1c2:	dd0c      	ble.n	800e1de <__ieee754_pow+0x22e>
 800e1c4:	429c      	cmp	r4, r3
 800e1c6:	dc0f      	bgt.n	800e1e8 <__ieee754_pow+0x238>
 800e1c8:	f1b9 0f00 	cmp.w	r9, #0
 800e1cc:	da0f      	bge.n	800e1ee <__ieee754_pow+0x23e>
 800e1ce:	2000      	movs	r0, #0
 800e1d0:	b009      	add	sp, #36	; 0x24
 800e1d2:	ecbd 8b06 	vpop	{d8-d10}
 800e1d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1da:	f000 bcc2 	b.w	800eb62 <__math_oflow>
 800e1de:	429c      	cmp	r4, r3
 800e1e0:	dbf2      	blt.n	800e1c8 <__ieee754_pow+0x218>
 800e1e2:	4b0a      	ldr	r3, [pc, #40]	; (800e20c <__ieee754_pow+0x25c>)
 800e1e4:	429c      	cmp	r4, r3
 800e1e6:	dd19      	ble.n	800e21c <__ieee754_pow+0x26c>
 800e1e8:	f1b9 0f00 	cmp.w	r9, #0
 800e1ec:	dcef      	bgt.n	800e1ce <__ieee754_pow+0x21e>
 800e1ee:	2000      	movs	r0, #0
 800e1f0:	b009      	add	sp, #36	; 0x24
 800e1f2:	ecbd 8b06 	vpop	{d8-d10}
 800e1f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1fa:	f000 bca9 	b.w	800eb50 <__math_uflow>
 800e1fe:	bf00      	nop
 800e200:	fff00000 	.word	0xfff00000
 800e204:	7ff00000 	.word	0x7ff00000
 800e208:	433fffff 	.word	0x433fffff
 800e20c:	3ff00000 	.word	0x3ff00000
 800e210:	3fefffff 	.word	0x3fefffff
 800e214:	3fe00000 	.word	0x3fe00000
 800e218:	41e00000 	.word	0x41e00000
 800e21c:	4b60      	ldr	r3, [pc, #384]	; (800e3a0 <__ieee754_pow+0x3f0>)
 800e21e:	2200      	movs	r2, #0
 800e220:	f7f2 f842 	bl	80002a8 <__aeabi_dsub>
 800e224:	a354      	add	r3, pc, #336	; (adr r3, 800e378 <__ieee754_pow+0x3c8>)
 800e226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e22a:	4604      	mov	r4, r0
 800e22c:	460d      	mov	r5, r1
 800e22e:	f7f2 f9f3 	bl	8000618 <__aeabi_dmul>
 800e232:	a353      	add	r3, pc, #332	; (adr r3, 800e380 <__ieee754_pow+0x3d0>)
 800e234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e238:	4606      	mov	r6, r0
 800e23a:	460f      	mov	r7, r1
 800e23c:	4620      	mov	r0, r4
 800e23e:	4629      	mov	r1, r5
 800e240:	f7f2 f9ea 	bl	8000618 <__aeabi_dmul>
 800e244:	4b57      	ldr	r3, [pc, #348]	; (800e3a4 <__ieee754_pow+0x3f4>)
 800e246:	4682      	mov	sl, r0
 800e248:	468b      	mov	fp, r1
 800e24a:	2200      	movs	r2, #0
 800e24c:	4620      	mov	r0, r4
 800e24e:	4629      	mov	r1, r5
 800e250:	f7f2 f9e2 	bl	8000618 <__aeabi_dmul>
 800e254:	4602      	mov	r2, r0
 800e256:	460b      	mov	r3, r1
 800e258:	a14b      	add	r1, pc, #300	; (adr r1, 800e388 <__ieee754_pow+0x3d8>)
 800e25a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e25e:	f7f2 f823 	bl	80002a8 <__aeabi_dsub>
 800e262:	4622      	mov	r2, r4
 800e264:	462b      	mov	r3, r5
 800e266:	f7f2 f9d7 	bl	8000618 <__aeabi_dmul>
 800e26a:	4602      	mov	r2, r0
 800e26c:	460b      	mov	r3, r1
 800e26e:	2000      	movs	r0, #0
 800e270:	494d      	ldr	r1, [pc, #308]	; (800e3a8 <__ieee754_pow+0x3f8>)
 800e272:	f7f2 f819 	bl	80002a8 <__aeabi_dsub>
 800e276:	4622      	mov	r2, r4
 800e278:	4680      	mov	r8, r0
 800e27a:	4689      	mov	r9, r1
 800e27c:	462b      	mov	r3, r5
 800e27e:	4620      	mov	r0, r4
 800e280:	4629      	mov	r1, r5
 800e282:	f7f2 f9c9 	bl	8000618 <__aeabi_dmul>
 800e286:	4602      	mov	r2, r0
 800e288:	460b      	mov	r3, r1
 800e28a:	4640      	mov	r0, r8
 800e28c:	4649      	mov	r1, r9
 800e28e:	f7f2 f9c3 	bl	8000618 <__aeabi_dmul>
 800e292:	a33f      	add	r3, pc, #252	; (adr r3, 800e390 <__ieee754_pow+0x3e0>)
 800e294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e298:	f7f2 f9be 	bl	8000618 <__aeabi_dmul>
 800e29c:	4602      	mov	r2, r0
 800e29e:	460b      	mov	r3, r1
 800e2a0:	4650      	mov	r0, sl
 800e2a2:	4659      	mov	r1, fp
 800e2a4:	f7f2 f800 	bl	80002a8 <__aeabi_dsub>
 800e2a8:	4602      	mov	r2, r0
 800e2aa:	460b      	mov	r3, r1
 800e2ac:	4680      	mov	r8, r0
 800e2ae:	4689      	mov	r9, r1
 800e2b0:	4630      	mov	r0, r6
 800e2b2:	4639      	mov	r1, r7
 800e2b4:	f7f1 fffa 	bl	80002ac <__adddf3>
 800e2b8:	2000      	movs	r0, #0
 800e2ba:	4632      	mov	r2, r6
 800e2bc:	463b      	mov	r3, r7
 800e2be:	4604      	mov	r4, r0
 800e2c0:	460d      	mov	r5, r1
 800e2c2:	f7f1 fff1 	bl	80002a8 <__aeabi_dsub>
 800e2c6:	4602      	mov	r2, r0
 800e2c8:	460b      	mov	r3, r1
 800e2ca:	4640      	mov	r0, r8
 800e2cc:	4649      	mov	r1, r9
 800e2ce:	f7f1 ffeb 	bl	80002a8 <__aeabi_dsub>
 800e2d2:	9b04      	ldr	r3, [sp, #16]
 800e2d4:	9a06      	ldr	r2, [sp, #24]
 800e2d6:	3b01      	subs	r3, #1
 800e2d8:	4313      	orrs	r3, r2
 800e2da:	4682      	mov	sl, r0
 800e2dc:	468b      	mov	fp, r1
 800e2de:	f040 81e7 	bne.w	800e6b0 <__ieee754_pow+0x700>
 800e2e2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800e398 <__ieee754_pow+0x3e8>
 800e2e6:	eeb0 8a47 	vmov.f32	s16, s14
 800e2ea:	eef0 8a67 	vmov.f32	s17, s15
 800e2ee:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e2f2:	2600      	movs	r6, #0
 800e2f4:	4632      	mov	r2, r6
 800e2f6:	463b      	mov	r3, r7
 800e2f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e2fc:	f7f1 ffd4 	bl	80002a8 <__aeabi_dsub>
 800e300:	4622      	mov	r2, r4
 800e302:	462b      	mov	r3, r5
 800e304:	f7f2 f988 	bl	8000618 <__aeabi_dmul>
 800e308:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e30c:	4680      	mov	r8, r0
 800e30e:	4689      	mov	r9, r1
 800e310:	4650      	mov	r0, sl
 800e312:	4659      	mov	r1, fp
 800e314:	f7f2 f980 	bl	8000618 <__aeabi_dmul>
 800e318:	4602      	mov	r2, r0
 800e31a:	460b      	mov	r3, r1
 800e31c:	4640      	mov	r0, r8
 800e31e:	4649      	mov	r1, r9
 800e320:	f7f1 ffc4 	bl	80002ac <__adddf3>
 800e324:	4632      	mov	r2, r6
 800e326:	463b      	mov	r3, r7
 800e328:	4680      	mov	r8, r0
 800e32a:	4689      	mov	r9, r1
 800e32c:	4620      	mov	r0, r4
 800e32e:	4629      	mov	r1, r5
 800e330:	f7f2 f972 	bl	8000618 <__aeabi_dmul>
 800e334:	460b      	mov	r3, r1
 800e336:	4604      	mov	r4, r0
 800e338:	460d      	mov	r5, r1
 800e33a:	4602      	mov	r2, r0
 800e33c:	4649      	mov	r1, r9
 800e33e:	4640      	mov	r0, r8
 800e340:	f7f1 ffb4 	bl	80002ac <__adddf3>
 800e344:	4b19      	ldr	r3, [pc, #100]	; (800e3ac <__ieee754_pow+0x3fc>)
 800e346:	4299      	cmp	r1, r3
 800e348:	ec45 4b19 	vmov	d9, r4, r5
 800e34c:	4606      	mov	r6, r0
 800e34e:	460f      	mov	r7, r1
 800e350:	468b      	mov	fp, r1
 800e352:	f340 82f0 	ble.w	800e936 <__ieee754_pow+0x986>
 800e356:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e35a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e35e:	4303      	orrs	r3, r0
 800e360:	f000 81e4 	beq.w	800e72c <__ieee754_pow+0x77c>
 800e364:	ec51 0b18 	vmov	r0, r1, d8
 800e368:	2200      	movs	r2, #0
 800e36a:	2300      	movs	r3, #0
 800e36c:	f7f2 fbc6 	bl	8000afc <__aeabi_dcmplt>
 800e370:	3800      	subs	r0, #0
 800e372:	bf18      	it	ne
 800e374:	2001      	movne	r0, #1
 800e376:	e72b      	b.n	800e1d0 <__ieee754_pow+0x220>
 800e378:	60000000 	.word	0x60000000
 800e37c:	3ff71547 	.word	0x3ff71547
 800e380:	f85ddf44 	.word	0xf85ddf44
 800e384:	3e54ae0b 	.word	0x3e54ae0b
 800e388:	55555555 	.word	0x55555555
 800e38c:	3fd55555 	.word	0x3fd55555
 800e390:	652b82fe 	.word	0x652b82fe
 800e394:	3ff71547 	.word	0x3ff71547
 800e398:	00000000 	.word	0x00000000
 800e39c:	bff00000 	.word	0xbff00000
 800e3a0:	3ff00000 	.word	0x3ff00000
 800e3a4:	3fd00000 	.word	0x3fd00000
 800e3a8:	3fe00000 	.word	0x3fe00000
 800e3ac:	408fffff 	.word	0x408fffff
 800e3b0:	4bd5      	ldr	r3, [pc, #852]	; (800e708 <__ieee754_pow+0x758>)
 800e3b2:	402b      	ands	r3, r5
 800e3b4:	2200      	movs	r2, #0
 800e3b6:	b92b      	cbnz	r3, 800e3c4 <__ieee754_pow+0x414>
 800e3b8:	4bd4      	ldr	r3, [pc, #848]	; (800e70c <__ieee754_pow+0x75c>)
 800e3ba:	f7f2 f92d 	bl	8000618 <__aeabi_dmul>
 800e3be:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e3c2:	460c      	mov	r4, r1
 800e3c4:	1523      	asrs	r3, r4, #20
 800e3c6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e3ca:	4413      	add	r3, r2
 800e3cc:	9305      	str	r3, [sp, #20]
 800e3ce:	4bd0      	ldr	r3, [pc, #832]	; (800e710 <__ieee754_pow+0x760>)
 800e3d0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e3d4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e3d8:	429c      	cmp	r4, r3
 800e3da:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e3de:	dd08      	ble.n	800e3f2 <__ieee754_pow+0x442>
 800e3e0:	4bcc      	ldr	r3, [pc, #816]	; (800e714 <__ieee754_pow+0x764>)
 800e3e2:	429c      	cmp	r4, r3
 800e3e4:	f340 8162 	ble.w	800e6ac <__ieee754_pow+0x6fc>
 800e3e8:	9b05      	ldr	r3, [sp, #20]
 800e3ea:	3301      	adds	r3, #1
 800e3ec:	9305      	str	r3, [sp, #20]
 800e3ee:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e3f2:	2400      	movs	r4, #0
 800e3f4:	00e3      	lsls	r3, r4, #3
 800e3f6:	9307      	str	r3, [sp, #28]
 800e3f8:	4bc7      	ldr	r3, [pc, #796]	; (800e718 <__ieee754_pow+0x768>)
 800e3fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e3fe:	ed93 7b00 	vldr	d7, [r3]
 800e402:	4629      	mov	r1, r5
 800e404:	ec53 2b17 	vmov	r2, r3, d7
 800e408:	eeb0 9a47 	vmov.f32	s18, s14
 800e40c:	eef0 9a67 	vmov.f32	s19, s15
 800e410:	4682      	mov	sl, r0
 800e412:	f7f1 ff49 	bl	80002a8 <__aeabi_dsub>
 800e416:	4652      	mov	r2, sl
 800e418:	4606      	mov	r6, r0
 800e41a:	460f      	mov	r7, r1
 800e41c:	462b      	mov	r3, r5
 800e41e:	ec51 0b19 	vmov	r0, r1, d9
 800e422:	f7f1 ff43 	bl	80002ac <__adddf3>
 800e426:	4602      	mov	r2, r0
 800e428:	460b      	mov	r3, r1
 800e42a:	2000      	movs	r0, #0
 800e42c:	49bb      	ldr	r1, [pc, #748]	; (800e71c <__ieee754_pow+0x76c>)
 800e42e:	f7f2 fa1d 	bl	800086c <__aeabi_ddiv>
 800e432:	ec41 0b1a 	vmov	d10, r0, r1
 800e436:	4602      	mov	r2, r0
 800e438:	460b      	mov	r3, r1
 800e43a:	4630      	mov	r0, r6
 800e43c:	4639      	mov	r1, r7
 800e43e:	f7f2 f8eb 	bl	8000618 <__aeabi_dmul>
 800e442:	2300      	movs	r3, #0
 800e444:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e448:	9302      	str	r3, [sp, #8]
 800e44a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e44e:	46ab      	mov	fp, r5
 800e450:	106d      	asrs	r5, r5, #1
 800e452:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e456:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e45a:	ec41 0b18 	vmov	d8, r0, r1
 800e45e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800e462:	2200      	movs	r2, #0
 800e464:	4640      	mov	r0, r8
 800e466:	4649      	mov	r1, r9
 800e468:	4614      	mov	r4, r2
 800e46a:	461d      	mov	r5, r3
 800e46c:	f7f2 f8d4 	bl	8000618 <__aeabi_dmul>
 800e470:	4602      	mov	r2, r0
 800e472:	460b      	mov	r3, r1
 800e474:	4630      	mov	r0, r6
 800e476:	4639      	mov	r1, r7
 800e478:	f7f1 ff16 	bl	80002a8 <__aeabi_dsub>
 800e47c:	ec53 2b19 	vmov	r2, r3, d9
 800e480:	4606      	mov	r6, r0
 800e482:	460f      	mov	r7, r1
 800e484:	4620      	mov	r0, r4
 800e486:	4629      	mov	r1, r5
 800e488:	f7f1 ff0e 	bl	80002a8 <__aeabi_dsub>
 800e48c:	4602      	mov	r2, r0
 800e48e:	460b      	mov	r3, r1
 800e490:	4650      	mov	r0, sl
 800e492:	4659      	mov	r1, fp
 800e494:	f7f1 ff08 	bl	80002a8 <__aeabi_dsub>
 800e498:	4642      	mov	r2, r8
 800e49a:	464b      	mov	r3, r9
 800e49c:	f7f2 f8bc 	bl	8000618 <__aeabi_dmul>
 800e4a0:	4602      	mov	r2, r0
 800e4a2:	460b      	mov	r3, r1
 800e4a4:	4630      	mov	r0, r6
 800e4a6:	4639      	mov	r1, r7
 800e4a8:	f7f1 fefe 	bl	80002a8 <__aeabi_dsub>
 800e4ac:	ec53 2b1a 	vmov	r2, r3, d10
 800e4b0:	f7f2 f8b2 	bl	8000618 <__aeabi_dmul>
 800e4b4:	ec53 2b18 	vmov	r2, r3, d8
 800e4b8:	ec41 0b19 	vmov	d9, r0, r1
 800e4bc:	ec51 0b18 	vmov	r0, r1, d8
 800e4c0:	f7f2 f8aa 	bl	8000618 <__aeabi_dmul>
 800e4c4:	a37c      	add	r3, pc, #496	; (adr r3, 800e6b8 <__ieee754_pow+0x708>)
 800e4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ca:	4604      	mov	r4, r0
 800e4cc:	460d      	mov	r5, r1
 800e4ce:	f7f2 f8a3 	bl	8000618 <__aeabi_dmul>
 800e4d2:	a37b      	add	r3, pc, #492	; (adr r3, 800e6c0 <__ieee754_pow+0x710>)
 800e4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4d8:	f7f1 fee8 	bl	80002ac <__adddf3>
 800e4dc:	4622      	mov	r2, r4
 800e4de:	462b      	mov	r3, r5
 800e4e0:	f7f2 f89a 	bl	8000618 <__aeabi_dmul>
 800e4e4:	a378      	add	r3, pc, #480	; (adr r3, 800e6c8 <__ieee754_pow+0x718>)
 800e4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ea:	f7f1 fedf 	bl	80002ac <__adddf3>
 800e4ee:	4622      	mov	r2, r4
 800e4f0:	462b      	mov	r3, r5
 800e4f2:	f7f2 f891 	bl	8000618 <__aeabi_dmul>
 800e4f6:	a376      	add	r3, pc, #472	; (adr r3, 800e6d0 <__ieee754_pow+0x720>)
 800e4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4fc:	f7f1 fed6 	bl	80002ac <__adddf3>
 800e500:	4622      	mov	r2, r4
 800e502:	462b      	mov	r3, r5
 800e504:	f7f2 f888 	bl	8000618 <__aeabi_dmul>
 800e508:	a373      	add	r3, pc, #460	; (adr r3, 800e6d8 <__ieee754_pow+0x728>)
 800e50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e50e:	f7f1 fecd 	bl	80002ac <__adddf3>
 800e512:	4622      	mov	r2, r4
 800e514:	462b      	mov	r3, r5
 800e516:	f7f2 f87f 	bl	8000618 <__aeabi_dmul>
 800e51a:	a371      	add	r3, pc, #452	; (adr r3, 800e6e0 <__ieee754_pow+0x730>)
 800e51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e520:	f7f1 fec4 	bl	80002ac <__adddf3>
 800e524:	4622      	mov	r2, r4
 800e526:	4606      	mov	r6, r0
 800e528:	460f      	mov	r7, r1
 800e52a:	462b      	mov	r3, r5
 800e52c:	4620      	mov	r0, r4
 800e52e:	4629      	mov	r1, r5
 800e530:	f7f2 f872 	bl	8000618 <__aeabi_dmul>
 800e534:	4602      	mov	r2, r0
 800e536:	460b      	mov	r3, r1
 800e538:	4630      	mov	r0, r6
 800e53a:	4639      	mov	r1, r7
 800e53c:	f7f2 f86c 	bl	8000618 <__aeabi_dmul>
 800e540:	4642      	mov	r2, r8
 800e542:	4604      	mov	r4, r0
 800e544:	460d      	mov	r5, r1
 800e546:	464b      	mov	r3, r9
 800e548:	ec51 0b18 	vmov	r0, r1, d8
 800e54c:	f7f1 feae 	bl	80002ac <__adddf3>
 800e550:	ec53 2b19 	vmov	r2, r3, d9
 800e554:	f7f2 f860 	bl	8000618 <__aeabi_dmul>
 800e558:	4622      	mov	r2, r4
 800e55a:	462b      	mov	r3, r5
 800e55c:	f7f1 fea6 	bl	80002ac <__adddf3>
 800e560:	4642      	mov	r2, r8
 800e562:	4682      	mov	sl, r0
 800e564:	468b      	mov	fp, r1
 800e566:	464b      	mov	r3, r9
 800e568:	4640      	mov	r0, r8
 800e56a:	4649      	mov	r1, r9
 800e56c:	f7f2 f854 	bl	8000618 <__aeabi_dmul>
 800e570:	4b6b      	ldr	r3, [pc, #428]	; (800e720 <__ieee754_pow+0x770>)
 800e572:	2200      	movs	r2, #0
 800e574:	4606      	mov	r6, r0
 800e576:	460f      	mov	r7, r1
 800e578:	f7f1 fe98 	bl	80002ac <__adddf3>
 800e57c:	4652      	mov	r2, sl
 800e57e:	465b      	mov	r3, fp
 800e580:	f7f1 fe94 	bl	80002ac <__adddf3>
 800e584:	2000      	movs	r0, #0
 800e586:	4604      	mov	r4, r0
 800e588:	460d      	mov	r5, r1
 800e58a:	4602      	mov	r2, r0
 800e58c:	460b      	mov	r3, r1
 800e58e:	4640      	mov	r0, r8
 800e590:	4649      	mov	r1, r9
 800e592:	f7f2 f841 	bl	8000618 <__aeabi_dmul>
 800e596:	4b62      	ldr	r3, [pc, #392]	; (800e720 <__ieee754_pow+0x770>)
 800e598:	4680      	mov	r8, r0
 800e59a:	4689      	mov	r9, r1
 800e59c:	2200      	movs	r2, #0
 800e59e:	4620      	mov	r0, r4
 800e5a0:	4629      	mov	r1, r5
 800e5a2:	f7f1 fe81 	bl	80002a8 <__aeabi_dsub>
 800e5a6:	4632      	mov	r2, r6
 800e5a8:	463b      	mov	r3, r7
 800e5aa:	f7f1 fe7d 	bl	80002a8 <__aeabi_dsub>
 800e5ae:	4602      	mov	r2, r0
 800e5b0:	460b      	mov	r3, r1
 800e5b2:	4650      	mov	r0, sl
 800e5b4:	4659      	mov	r1, fp
 800e5b6:	f7f1 fe77 	bl	80002a8 <__aeabi_dsub>
 800e5ba:	ec53 2b18 	vmov	r2, r3, d8
 800e5be:	f7f2 f82b 	bl	8000618 <__aeabi_dmul>
 800e5c2:	4622      	mov	r2, r4
 800e5c4:	4606      	mov	r6, r0
 800e5c6:	460f      	mov	r7, r1
 800e5c8:	462b      	mov	r3, r5
 800e5ca:	ec51 0b19 	vmov	r0, r1, d9
 800e5ce:	f7f2 f823 	bl	8000618 <__aeabi_dmul>
 800e5d2:	4602      	mov	r2, r0
 800e5d4:	460b      	mov	r3, r1
 800e5d6:	4630      	mov	r0, r6
 800e5d8:	4639      	mov	r1, r7
 800e5da:	f7f1 fe67 	bl	80002ac <__adddf3>
 800e5de:	4606      	mov	r6, r0
 800e5e0:	460f      	mov	r7, r1
 800e5e2:	4602      	mov	r2, r0
 800e5e4:	460b      	mov	r3, r1
 800e5e6:	4640      	mov	r0, r8
 800e5e8:	4649      	mov	r1, r9
 800e5ea:	f7f1 fe5f 	bl	80002ac <__adddf3>
 800e5ee:	a33e      	add	r3, pc, #248	; (adr r3, 800e6e8 <__ieee754_pow+0x738>)
 800e5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5f4:	2000      	movs	r0, #0
 800e5f6:	4604      	mov	r4, r0
 800e5f8:	460d      	mov	r5, r1
 800e5fa:	f7f2 f80d 	bl	8000618 <__aeabi_dmul>
 800e5fe:	4642      	mov	r2, r8
 800e600:	ec41 0b18 	vmov	d8, r0, r1
 800e604:	464b      	mov	r3, r9
 800e606:	4620      	mov	r0, r4
 800e608:	4629      	mov	r1, r5
 800e60a:	f7f1 fe4d 	bl	80002a8 <__aeabi_dsub>
 800e60e:	4602      	mov	r2, r0
 800e610:	460b      	mov	r3, r1
 800e612:	4630      	mov	r0, r6
 800e614:	4639      	mov	r1, r7
 800e616:	f7f1 fe47 	bl	80002a8 <__aeabi_dsub>
 800e61a:	a335      	add	r3, pc, #212	; (adr r3, 800e6f0 <__ieee754_pow+0x740>)
 800e61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e620:	f7f1 fffa 	bl	8000618 <__aeabi_dmul>
 800e624:	a334      	add	r3, pc, #208	; (adr r3, 800e6f8 <__ieee754_pow+0x748>)
 800e626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e62a:	4606      	mov	r6, r0
 800e62c:	460f      	mov	r7, r1
 800e62e:	4620      	mov	r0, r4
 800e630:	4629      	mov	r1, r5
 800e632:	f7f1 fff1 	bl	8000618 <__aeabi_dmul>
 800e636:	4602      	mov	r2, r0
 800e638:	460b      	mov	r3, r1
 800e63a:	4630      	mov	r0, r6
 800e63c:	4639      	mov	r1, r7
 800e63e:	f7f1 fe35 	bl	80002ac <__adddf3>
 800e642:	9a07      	ldr	r2, [sp, #28]
 800e644:	4b37      	ldr	r3, [pc, #220]	; (800e724 <__ieee754_pow+0x774>)
 800e646:	4413      	add	r3, r2
 800e648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e64c:	f7f1 fe2e 	bl	80002ac <__adddf3>
 800e650:	4682      	mov	sl, r0
 800e652:	9805      	ldr	r0, [sp, #20]
 800e654:	468b      	mov	fp, r1
 800e656:	f7f1 ff75 	bl	8000544 <__aeabi_i2d>
 800e65a:	9a07      	ldr	r2, [sp, #28]
 800e65c:	4b32      	ldr	r3, [pc, #200]	; (800e728 <__ieee754_pow+0x778>)
 800e65e:	4413      	add	r3, r2
 800e660:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e664:	4606      	mov	r6, r0
 800e666:	460f      	mov	r7, r1
 800e668:	4652      	mov	r2, sl
 800e66a:	465b      	mov	r3, fp
 800e66c:	ec51 0b18 	vmov	r0, r1, d8
 800e670:	f7f1 fe1c 	bl	80002ac <__adddf3>
 800e674:	4642      	mov	r2, r8
 800e676:	464b      	mov	r3, r9
 800e678:	f7f1 fe18 	bl	80002ac <__adddf3>
 800e67c:	4632      	mov	r2, r6
 800e67e:	463b      	mov	r3, r7
 800e680:	f7f1 fe14 	bl	80002ac <__adddf3>
 800e684:	2000      	movs	r0, #0
 800e686:	4632      	mov	r2, r6
 800e688:	463b      	mov	r3, r7
 800e68a:	4604      	mov	r4, r0
 800e68c:	460d      	mov	r5, r1
 800e68e:	f7f1 fe0b 	bl	80002a8 <__aeabi_dsub>
 800e692:	4642      	mov	r2, r8
 800e694:	464b      	mov	r3, r9
 800e696:	f7f1 fe07 	bl	80002a8 <__aeabi_dsub>
 800e69a:	ec53 2b18 	vmov	r2, r3, d8
 800e69e:	f7f1 fe03 	bl	80002a8 <__aeabi_dsub>
 800e6a2:	4602      	mov	r2, r0
 800e6a4:	460b      	mov	r3, r1
 800e6a6:	4650      	mov	r0, sl
 800e6a8:	4659      	mov	r1, fp
 800e6aa:	e610      	b.n	800e2ce <__ieee754_pow+0x31e>
 800e6ac:	2401      	movs	r4, #1
 800e6ae:	e6a1      	b.n	800e3f4 <__ieee754_pow+0x444>
 800e6b0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800e700 <__ieee754_pow+0x750>
 800e6b4:	e617      	b.n	800e2e6 <__ieee754_pow+0x336>
 800e6b6:	bf00      	nop
 800e6b8:	4a454eef 	.word	0x4a454eef
 800e6bc:	3fca7e28 	.word	0x3fca7e28
 800e6c0:	93c9db65 	.word	0x93c9db65
 800e6c4:	3fcd864a 	.word	0x3fcd864a
 800e6c8:	a91d4101 	.word	0xa91d4101
 800e6cc:	3fd17460 	.word	0x3fd17460
 800e6d0:	518f264d 	.word	0x518f264d
 800e6d4:	3fd55555 	.word	0x3fd55555
 800e6d8:	db6fabff 	.word	0xdb6fabff
 800e6dc:	3fdb6db6 	.word	0x3fdb6db6
 800e6e0:	33333303 	.word	0x33333303
 800e6e4:	3fe33333 	.word	0x3fe33333
 800e6e8:	e0000000 	.word	0xe0000000
 800e6ec:	3feec709 	.word	0x3feec709
 800e6f0:	dc3a03fd 	.word	0xdc3a03fd
 800e6f4:	3feec709 	.word	0x3feec709
 800e6f8:	145b01f5 	.word	0x145b01f5
 800e6fc:	be3e2fe0 	.word	0xbe3e2fe0
 800e700:	00000000 	.word	0x00000000
 800e704:	3ff00000 	.word	0x3ff00000
 800e708:	7ff00000 	.word	0x7ff00000
 800e70c:	43400000 	.word	0x43400000
 800e710:	0003988e 	.word	0x0003988e
 800e714:	000bb679 	.word	0x000bb679
 800e718:	0800f1a8 	.word	0x0800f1a8
 800e71c:	3ff00000 	.word	0x3ff00000
 800e720:	40080000 	.word	0x40080000
 800e724:	0800f1c8 	.word	0x0800f1c8
 800e728:	0800f1b8 	.word	0x0800f1b8
 800e72c:	a3b3      	add	r3, pc, #716	; (adr r3, 800e9fc <__ieee754_pow+0xa4c>)
 800e72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e732:	4640      	mov	r0, r8
 800e734:	4649      	mov	r1, r9
 800e736:	f7f1 fdb9 	bl	80002ac <__adddf3>
 800e73a:	4622      	mov	r2, r4
 800e73c:	ec41 0b1a 	vmov	d10, r0, r1
 800e740:	462b      	mov	r3, r5
 800e742:	4630      	mov	r0, r6
 800e744:	4639      	mov	r1, r7
 800e746:	f7f1 fdaf 	bl	80002a8 <__aeabi_dsub>
 800e74a:	4602      	mov	r2, r0
 800e74c:	460b      	mov	r3, r1
 800e74e:	ec51 0b1a 	vmov	r0, r1, d10
 800e752:	f7f2 f9f1 	bl	8000b38 <__aeabi_dcmpgt>
 800e756:	2800      	cmp	r0, #0
 800e758:	f47f ae04 	bne.w	800e364 <__ieee754_pow+0x3b4>
 800e75c:	4aa2      	ldr	r2, [pc, #648]	; (800e9e8 <__ieee754_pow+0xa38>)
 800e75e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e762:	4293      	cmp	r3, r2
 800e764:	f340 8107 	ble.w	800e976 <__ieee754_pow+0x9c6>
 800e768:	151b      	asrs	r3, r3, #20
 800e76a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e76e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e772:	fa4a fa03 	asr.w	sl, sl, r3
 800e776:	44da      	add	sl, fp
 800e778:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800e77c:	489b      	ldr	r0, [pc, #620]	; (800e9ec <__ieee754_pow+0xa3c>)
 800e77e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800e782:	4108      	asrs	r0, r1
 800e784:	ea00 030a 	and.w	r3, r0, sl
 800e788:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800e78c:	f1c1 0114 	rsb	r1, r1, #20
 800e790:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e794:	fa4a fa01 	asr.w	sl, sl, r1
 800e798:	f1bb 0f00 	cmp.w	fp, #0
 800e79c:	f04f 0200 	mov.w	r2, #0
 800e7a0:	4620      	mov	r0, r4
 800e7a2:	4629      	mov	r1, r5
 800e7a4:	bfb8      	it	lt
 800e7a6:	f1ca 0a00 	rsblt	sl, sl, #0
 800e7aa:	f7f1 fd7d 	bl	80002a8 <__aeabi_dsub>
 800e7ae:	ec41 0b19 	vmov	d9, r0, r1
 800e7b2:	4642      	mov	r2, r8
 800e7b4:	464b      	mov	r3, r9
 800e7b6:	ec51 0b19 	vmov	r0, r1, d9
 800e7ba:	f7f1 fd77 	bl	80002ac <__adddf3>
 800e7be:	a37a      	add	r3, pc, #488	; (adr r3, 800e9a8 <__ieee754_pow+0x9f8>)
 800e7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7c4:	2000      	movs	r0, #0
 800e7c6:	4604      	mov	r4, r0
 800e7c8:	460d      	mov	r5, r1
 800e7ca:	f7f1 ff25 	bl	8000618 <__aeabi_dmul>
 800e7ce:	ec53 2b19 	vmov	r2, r3, d9
 800e7d2:	4606      	mov	r6, r0
 800e7d4:	460f      	mov	r7, r1
 800e7d6:	4620      	mov	r0, r4
 800e7d8:	4629      	mov	r1, r5
 800e7da:	f7f1 fd65 	bl	80002a8 <__aeabi_dsub>
 800e7de:	4602      	mov	r2, r0
 800e7e0:	460b      	mov	r3, r1
 800e7e2:	4640      	mov	r0, r8
 800e7e4:	4649      	mov	r1, r9
 800e7e6:	f7f1 fd5f 	bl	80002a8 <__aeabi_dsub>
 800e7ea:	a371      	add	r3, pc, #452	; (adr r3, 800e9b0 <__ieee754_pow+0xa00>)
 800e7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7f0:	f7f1 ff12 	bl	8000618 <__aeabi_dmul>
 800e7f4:	a370      	add	r3, pc, #448	; (adr r3, 800e9b8 <__ieee754_pow+0xa08>)
 800e7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7fa:	4680      	mov	r8, r0
 800e7fc:	4689      	mov	r9, r1
 800e7fe:	4620      	mov	r0, r4
 800e800:	4629      	mov	r1, r5
 800e802:	f7f1 ff09 	bl	8000618 <__aeabi_dmul>
 800e806:	4602      	mov	r2, r0
 800e808:	460b      	mov	r3, r1
 800e80a:	4640      	mov	r0, r8
 800e80c:	4649      	mov	r1, r9
 800e80e:	f7f1 fd4d 	bl	80002ac <__adddf3>
 800e812:	4604      	mov	r4, r0
 800e814:	460d      	mov	r5, r1
 800e816:	4602      	mov	r2, r0
 800e818:	460b      	mov	r3, r1
 800e81a:	4630      	mov	r0, r6
 800e81c:	4639      	mov	r1, r7
 800e81e:	f7f1 fd45 	bl	80002ac <__adddf3>
 800e822:	4632      	mov	r2, r6
 800e824:	463b      	mov	r3, r7
 800e826:	4680      	mov	r8, r0
 800e828:	4689      	mov	r9, r1
 800e82a:	f7f1 fd3d 	bl	80002a8 <__aeabi_dsub>
 800e82e:	4602      	mov	r2, r0
 800e830:	460b      	mov	r3, r1
 800e832:	4620      	mov	r0, r4
 800e834:	4629      	mov	r1, r5
 800e836:	f7f1 fd37 	bl	80002a8 <__aeabi_dsub>
 800e83a:	4642      	mov	r2, r8
 800e83c:	4606      	mov	r6, r0
 800e83e:	460f      	mov	r7, r1
 800e840:	464b      	mov	r3, r9
 800e842:	4640      	mov	r0, r8
 800e844:	4649      	mov	r1, r9
 800e846:	f7f1 fee7 	bl	8000618 <__aeabi_dmul>
 800e84a:	a35d      	add	r3, pc, #372	; (adr r3, 800e9c0 <__ieee754_pow+0xa10>)
 800e84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e850:	4604      	mov	r4, r0
 800e852:	460d      	mov	r5, r1
 800e854:	f7f1 fee0 	bl	8000618 <__aeabi_dmul>
 800e858:	a35b      	add	r3, pc, #364	; (adr r3, 800e9c8 <__ieee754_pow+0xa18>)
 800e85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e85e:	f7f1 fd23 	bl	80002a8 <__aeabi_dsub>
 800e862:	4622      	mov	r2, r4
 800e864:	462b      	mov	r3, r5
 800e866:	f7f1 fed7 	bl	8000618 <__aeabi_dmul>
 800e86a:	a359      	add	r3, pc, #356	; (adr r3, 800e9d0 <__ieee754_pow+0xa20>)
 800e86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e870:	f7f1 fd1c 	bl	80002ac <__adddf3>
 800e874:	4622      	mov	r2, r4
 800e876:	462b      	mov	r3, r5
 800e878:	f7f1 fece 	bl	8000618 <__aeabi_dmul>
 800e87c:	a356      	add	r3, pc, #344	; (adr r3, 800e9d8 <__ieee754_pow+0xa28>)
 800e87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e882:	f7f1 fd11 	bl	80002a8 <__aeabi_dsub>
 800e886:	4622      	mov	r2, r4
 800e888:	462b      	mov	r3, r5
 800e88a:	f7f1 fec5 	bl	8000618 <__aeabi_dmul>
 800e88e:	a354      	add	r3, pc, #336	; (adr r3, 800e9e0 <__ieee754_pow+0xa30>)
 800e890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e894:	f7f1 fd0a 	bl	80002ac <__adddf3>
 800e898:	4622      	mov	r2, r4
 800e89a:	462b      	mov	r3, r5
 800e89c:	f7f1 febc 	bl	8000618 <__aeabi_dmul>
 800e8a0:	4602      	mov	r2, r0
 800e8a2:	460b      	mov	r3, r1
 800e8a4:	4640      	mov	r0, r8
 800e8a6:	4649      	mov	r1, r9
 800e8a8:	f7f1 fcfe 	bl	80002a8 <__aeabi_dsub>
 800e8ac:	4604      	mov	r4, r0
 800e8ae:	460d      	mov	r5, r1
 800e8b0:	4602      	mov	r2, r0
 800e8b2:	460b      	mov	r3, r1
 800e8b4:	4640      	mov	r0, r8
 800e8b6:	4649      	mov	r1, r9
 800e8b8:	f7f1 feae 	bl	8000618 <__aeabi_dmul>
 800e8bc:	2200      	movs	r2, #0
 800e8be:	ec41 0b19 	vmov	d9, r0, r1
 800e8c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e8c6:	4620      	mov	r0, r4
 800e8c8:	4629      	mov	r1, r5
 800e8ca:	f7f1 fced 	bl	80002a8 <__aeabi_dsub>
 800e8ce:	4602      	mov	r2, r0
 800e8d0:	460b      	mov	r3, r1
 800e8d2:	ec51 0b19 	vmov	r0, r1, d9
 800e8d6:	f7f1 ffc9 	bl	800086c <__aeabi_ddiv>
 800e8da:	4632      	mov	r2, r6
 800e8dc:	4604      	mov	r4, r0
 800e8de:	460d      	mov	r5, r1
 800e8e0:	463b      	mov	r3, r7
 800e8e2:	4640      	mov	r0, r8
 800e8e4:	4649      	mov	r1, r9
 800e8e6:	f7f1 fe97 	bl	8000618 <__aeabi_dmul>
 800e8ea:	4632      	mov	r2, r6
 800e8ec:	463b      	mov	r3, r7
 800e8ee:	f7f1 fcdd 	bl	80002ac <__adddf3>
 800e8f2:	4602      	mov	r2, r0
 800e8f4:	460b      	mov	r3, r1
 800e8f6:	4620      	mov	r0, r4
 800e8f8:	4629      	mov	r1, r5
 800e8fa:	f7f1 fcd5 	bl	80002a8 <__aeabi_dsub>
 800e8fe:	4642      	mov	r2, r8
 800e900:	464b      	mov	r3, r9
 800e902:	f7f1 fcd1 	bl	80002a8 <__aeabi_dsub>
 800e906:	460b      	mov	r3, r1
 800e908:	4602      	mov	r2, r0
 800e90a:	4939      	ldr	r1, [pc, #228]	; (800e9f0 <__ieee754_pow+0xa40>)
 800e90c:	2000      	movs	r0, #0
 800e90e:	f7f1 fccb 	bl	80002a8 <__aeabi_dsub>
 800e912:	ec41 0b10 	vmov	d0, r0, r1
 800e916:	ee10 3a90 	vmov	r3, s1
 800e91a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e91e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e922:	da2b      	bge.n	800e97c <__ieee754_pow+0x9cc>
 800e924:	4650      	mov	r0, sl
 800e926:	f000 f877 	bl	800ea18 <scalbn>
 800e92a:	ec51 0b10 	vmov	r0, r1, d0
 800e92e:	ec53 2b18 	vmov	r2, r3, d8
 800e932:	f7ff bbee 	b.w	800e112 <__ieee754_pow+0x162>
 800e936:	4b2f      	ldr	r3, [pc, #188]	; (800e9f4 <__ieee754_pow+0xa44>)
 800e938:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e93c:	429e      	cmp	r6, r3
 800e93e:	f77f af0d 	ble.w	800e75c <__ieee754_pow+0x7ac>
 800e942:	4b2d      	ldr	r3, [pc, #180]	; (800e9f8 <__ieee754_pow+0xa48>)
 800e944:	440b      	add	r3, r1
 800e946:	4303      	orrs	r3, r0
 800e948:	d009      	beq.n	800e95e <__ieee754_pow+0x9ae>
 800e94a:	ec51 0b18 	vmov	r0, r1, d8
 800e94e:	2200      	movs	r2, #0
 800e950:	2300      	movs	r3, #0
 800e952:	f7f2 f8d3 	bl	8000afc <__aeabi_dcmplt>
 800e956:	3800      	subs	r0, #0
 800e958:	bf18      	it	ne
 800e95a:	2001      	movne	r0, #1
 800e95c:	e448      	b.n	800e1f0 <__ieee754_pow+0x240>
 800e95e:	4622      	mov	r2, r4
 800e960:	462b      	mov	r3, r5
 800e962:	f7f1 fca1 	bl	80002a8 <__aeabi_dsub>
 800e966:	4642      	mov	r2, r8
 800e968:	464b      	mov	r3, r9
 800e96a:	f7f2 f8db 	bl	8000b24 <__aeabi_dcmpge>
 800e96e:	2800      	cmp	r0, #0
 800e970:	f43f aef4 	beq.w	800e75c <__ieee754_pow+0x7ac>
 800e974:	e7e9      	b.n	800e94a <__ieee754_pow+0x99a>
 800e976:	f04f 0a00 	mov.w	sl, #0
 800e97a:	e71a      	b.n	800e7b2 <__ieee754_pow+0x802>
 800e97c:	ec51 0b10 	vmov	r0, r1, d0
 800e980:	4619      	mov	r1, r3
 800e982:	e7d4      	b.n	800e92e <__ieee754_pow+0x97e>
 800e984:	491a      	ldr	r1, [pc, #104]	; (800e9f0 <__ieee754_pow+0xa40>)
 800e986:	2000      	movs	r0, #0
 800e988:	f7ff bb31 	b.w	800dfee <__ieee754_pow+0x3e>
 800e98c:	2000      	movs	r0, #0
 800e98e:	2100      	movs	r1, #0
 800e990:	f7ff bb2d 	b.w	800dfee <__ieee754_pow+0x3e>
 800e994:	4630      	mov	r0, r6
 800e996:	4639      	mov	r1, r7
 800e998:	f7ff bb29 	b.w	800dfee <__ieee754_pow+0x3e>
 800e99c:	9204      	str	r2, [sp, #16]
 800e99e:	f7ff bb7b 	b.w	800e098 <__ieee754_pow+0xe8>
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	f7ff bb65 	b.w	800e072 <__ieee754_pow+0xc2>
 800e9a8:	00000000 	.word	0x00000000
 800e9ac:	3fe62e43 	.word	0x3fe62e43
 800e9b0:	fefa39ef 	.word	0xfefa39ef
 800e9b4:	3fe62e42 	.word	0x3fe62e42
 800e9b8:	0ca86c39 	.word	0x0ca86c39
 800e9bc:	be205c61 	.word	0xbe205c61
 800e9c0:	72bea4d0 	.word	0x72bea4d0
 800e9c4:	3e663769 	.word	0x3e663769
 800e9c8:	c5d26bf1 	.word	0xc5d26bf1
 800e9cc:	3ebbbd41 	.word	0x3ebbbd41
 800e9d0:	af25de2c 	.word	0xaf25de2c
 800e9d4:	3f11566a 	.word	0x3f11566a
 800e9d8:	16bebd93 	.word	0x16bebd93
 800e9dc:	3f66c16c 	.word	0x3f66c16c
 800e9e0:	5555553e 	.word	0x5555553e
 800e9e4:	3fc55555 	.word	0x3fc55555
 800e9e8:	3fe00000 	.word	0x3fe00000
 800e9ec:	fff00000 	.word	0xfff00000
 800e9f0:	3ff00000 	.word	0x3ff00000
 800e9f4:	4090cbff 	.word	0x4090cbff
 800e9f8:	3f6f3400 	.word	0x3f6f3400
 800e9fc:	652b82fe 	.word	0x652b82fe
 800ea00:	3c971547 	.word	0x3c971547

0800ea04 <fabs>:
 800ea04:	ec51 0b10 	vmov	r0, r1, d0
 800ea08:	ee10 2a10 	vmov	r2, s0
 800ea0c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ea10:	ec43 2b10 	vmov	d0, r2, r3
 800ea14:	4770      	bx	lr
	...

0800ea18 <scalbn>:
 800ea18:	b570      	push	{r4, r5, r6, lr}
 800ea1a:	ec55 4b10 	vmov	r4, r5, d0
 800ea1e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800ea22:	4606      	mov	r6, r0
 800ea24:	462b      	mov	r3, r5
 800ea26:	b999      	cbnz	r1, 800ea50 <scalbn+0x38>
 800ea28:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ea2c:	4323      	orrs	r3, r4
 800ea2e:	d03f      	beq.n	800eab0 <scalbn+0x98>
 800ea30:	4b35      	ldr	r3, [pc, #212]	; (800eb08 <scalbn+0xf0>)
 800ea32:	4629      	mov	r1, r5
 800ea34:	ee10 0a10 	vmov	r0, s0
 800ea38:	2200      	movs	r2, #0
 800ea3a:	f7f1 fded 	bl	8000618 <__aeabi_dmul>
 800ea3e:	4b33      	ldr	r3, [pc, #204]	; (800eb0c <scalbn+0xf4>)
 800ea40:	429e      	cmp	r6, r3
 800ea42:	4604      	mov	r4, r0
 800ea44:	460d      	mov	r5, r1
 800ea46:	da10      	bge.n	800ea6a <scalbn+0x52>
 800ea48:	a327      	add	r3, pc, #156	; (adr r3, 800eae8 <scalbn+0xd0>)
 800ea4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea4e:	e01f      	b.n	800ea90 <scalbn+0x78>
 800ea50:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800ea54:	4291      	cmp	r1, r2
 800ea56:	d10c      	bne.n	800ea72 <scalbn+0x5a>
 800ea58:	ee10 2a10 	vmov	r2, s0
 800ea5c:	4620      	mov	r0, r4
 800ea5e:	4629      	mov	r1, r5
 800ea60:	f7f1 fc24 	bl	80002ac <__adddf3>
 800ea64:	4604      	mov	r4, r0
 800ea66:	460d      	mov	r5, r1
 800ea68:	e022      	b.n	800eab0 <scalbn+0x98>
 800ea6a:	460b      	mov	r3, r1
 800ea6c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ea70:	3936      	subs	r1, #54	; 0x36
 800ea72:	f24c 3250 	movw	r2, #50000	; 0xc350
 800ea76:	4296      	cmp	r6, r2
 800ea78:	dd0d      	ble.n	800ea96 <scalbn+0x7e>
 800ea7a:	2d00      	cmp	r5, #0
 800ea7c:	a11c      	add	r1, pc, #112	; (adr r1, 800eaf0 <scalbn+0xd8>)
 800ea7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea82:	da02      	bge.n	800ea8a <scalbn+0x72>
 800ea84:	a11c      	add	r1, pc, #112	; (adr r1, 800eaf8 <scalbn+0xe0>)
 800ea86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea8a:	a319      	add	r3, pc, #100	; (adr r3, 800eaf0 <scalbn+0xd8>)
 800ea8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea90:	f7f1 fdc2 	bl	8000618 <__aeabi_dmul>
 800ea94:	e7e6      	b.n	800ea64 <scalbn+0x4c>
 800ea96:	1872      	adds	r2, r6, r1
 800ea98:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ea9c:	428a      	cmp	r2, r1
 800ea9e:	dcec      	bgt.n	800ea7a <scalbn+0x62>
 800eaa0:	2a00      	cmp	r2, #0
 800eaa2:	dd08      	ble.n	800eab6 <scalbn+0x9e>
 800eaa4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800eaa8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800eaac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800eab0:	ec45 4b10 	vmov	d0, r4, r5
 800eab4:	bd70      	pop	{r4, r5, r6, pc}
 800eab6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800eaba:	da08      	bge.n	800eace <scalbn+0xb6>
 800eabc:	2d00      	cmp	r5, #0
 800eabe:	a10a      	add	r1, pc, #40	; (adr r1, 800eae8 <scalbn+0xd0>)
 800eac0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eac4:	dac0      	bge.n	800ea48 <scalbn+0x30>
 800eac6:	a10e      	add	r1, pc, #56	; (adr r1, 800eb00 <scalbn+0xe8>)
 800eac8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eacc:	e7bc      	b.n	800ea48 <scalbn+0x30>
 800eace:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ead2:	3236      	adds	r2, #54	; 0x36
 800ead4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ead8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800eadc:	4620      	mov	r0, r4
 800eade:	4b0c      	ldr	r3, [pc, #48]	; (800eb10 <scalbn+0xf8>)
 800eae0:	2200      	movs	r2, #0
 800eae2:	e7d5      	b.n	800ea90 <scalbn+0x78>
 800eae4:	f3af 8000 	nop.w
 800eae8:	c2f8f359 	.word	0xc2f8f359
 800eaec:	01a56e1f 	.word	0x01a56e1f
 800eaf0:	8800759c 	.word	0x8800759c
 800eaf4:	7e37e43c 	.word	0x7e37e43c
 800eaf8:	8800759c 	.word	0x8800759c
 800eafc:	fe37e43c 	.word	0xfe37e43c
 800eb00:	c2f8f359 	.word	0xc2f8f359
 800eb04:	81a56e1f 	.word	0x81a56e1f
 800eb08:	43500000 	.word	0x43500000
 800eb0c:	ffff3cb0 	.word	0xffff3cb0
 800eb10:	3c900000 	.word	0x3c900000

0800eb14 <with_errno>:
 800eb14:	b570      	push	{r4, r5, r6, lr}
 800eb16:	4604      	mov	r4, r0
 800eb18:	460d      	mov	r5, r1
 800eb1a:	4616      	mov	r6, r2
 800eb1c:	f7fb fde2 	bl	800a6e4 <__errno>
 800eb20:	4629      	mov	r1, r5
 800eb22:	6006      	str	r6, [r0, #0]
 800eb24:	4620      	mov	r0, r4
 800eb26:	bd70      	pop	{r4, r5, r6, pc}

0800eb28 <xflow>:
 800eb28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eb2a:	4614      	mov	r4, r2
 800eb2c:	461d      	mov	r5, r3
 800eb2e:	b108      	cbz	r0, 800eb34 <xflow+0xc>
 800eb30:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800eb34:	e9cd 2300 	strd	r2, r3, [sp]
 800eb38:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eb3c:	4620      	mov	r0, r4
 800eb3e:	4629      	mov	r1, r5
 800eb40:	f7f1 fd6a 	bl	8000618 <__aeabi_dmul>
 800eb44:	2222      	movs	r2, #34	; 0x22
 800eb46:	b003      	add	sp, #12
 800eb48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eb4c:	f7ff bfe2 	b.w	800eb14 <with_errno>

0800eb50 <__math_uflow>:
 800eb50:	b508      	push	{r3, lr}
 800eb52:	2200      	movs	r2, #0
 800eb54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800eb58:	f7ff ffe6 	bl	800eb28 <xflow>
 800eb5c:	ec41 0b10 	vmov	d0, r0, r1
 800eb60:	bd08      	pop	{r3, pc}

0800eb62 <__math_oflow>:
 800eb62:	b508      	push	{r3, lr}
 800eb64:	2200      	movs	r2, #0
 800eb66:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800eb6a:	f7ff ffdd 	bl	800eb28 <xflow>
 800eb6e:	ec41 0b10 	vmov	d0, r0, r1
 800eb72:	bd08      	pop	{r3, pc}

0800eb74 <__ieee754_sqrt>:
 800eb74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb78:	ec55 4b10 	vmov	r4, r5, d0
 800eb7c:	4e67      	ldr	r6, [pc, #412]	; (800ed1c <__ieee754_sqrt+0x1a8>)
 800eb7e:	43ae      	bics	r6, r5
 800eb80:	ee10 0a10 	vmov	r0, s0
 800eb84:	ee10 2a10 	vmov	r2, s0
 800eb88:	4629      	mov	r1, r5
 800eb8a:	462b      	mov	r3, r5
 800eb8c:	d10d      	bne.n	800ebaa <__ieee754_sqrt+0x36>
 800eb8e:	f7f1 fd43 	bl	8000618 <__aeabi_dmul>
 800eb92:	4602      	mov	r2, r0
 800eb94:	460b      	mov	r3, r1
 800eb96:	4620      	mov	r0, r4
 800eb98:	4629      	mov	r1, r5
 800eb9a:	f7f1 fb87 	bl	80002ac <__adddf3>
 800eb9e:	4604      	mov	r4, r0
 800eba0:	460d      	mov	r5, r1
 800eba2:	ec45 4b10 	vmov	d0, r4, r5
 800eba6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebaa:	2d00      	cmp	r5, #0
 800ebac:	dc0b      	bgt.n	800ebc6 <__ieee754_sqrt+0x52>
 800ebae:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ebb2:	4326      	orrs	r6, r4
 800ebb4:	d0f5      	beq.n	800eba2 <__ieee754_sqrt+0x2e>
 800ebb6:	b135      	cbz	r5, 800ebc6 <__ieee754_sqrt+0x52>
 800ebb8:	f7f1 fb76 	bl	80002a8 <__aeabi_dsub>
 800ebbc:	4602      	mov	r2, r0
 800ebbe:	460b      	mov	r3, r1
 800ebc0:	f7f1 fe54 	bl	800086c <__aeabi_ddiv>
 800ebc4:	e7eb      	b.n	800eb9e <__ieee754_sqrt+0x2a>
 800ebc6:	1509      	asrs	r1, r1, #20
 800ebc8:	f000 808d 	beq.w	800ece6 <__ieee754_sqrt+0x172>
 800ebcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ebd0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800ebd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ebd8:	07c9      	lsls	r1, r1, #31
 800ebda:	bf5c      	itt	pl
 800ebdc:	005b      	lslpl	r3, r3, #1
 800ebde:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800ebe2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ebe6:	bf58      	it	pl
 800ebe8:	0052      	lslpl	r2, r2, #1
 800ebea:	2500      	movs	r5, #0
 800ebec:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ebf0:	1076      	asrs	r6, r6, #1
 800ebf2:	0052      	lsls	r2, r2, #1
 800ebf4:	f04f 0e16 	mov.w	lr, #22
 800ebf8:	46ac      	mov	ip, r5
 800ebfa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ebfe:	eb0c 0001 	add.w	r0, ip, r1
 800ec02:	4298      	cmp	r0, r3
 800ec04:	bfde      	ittt	le
 800ec06:	1a1b      	suble	r3, r3, r0
 800ec08:	eb00 0c01 	addle.w	ip, r0, r1
 800ec0c:	186d      	addle	r5, r5, r1
 800ec0e:	005b      	lsls	r3, r3, #1
 800ec10:	f1be 0e01 	subs.w	lr, lr, #1
 800ec14:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ec18:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ec1c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800ec20:	d1ed      	bne.n	800ebfe <__ieee754_sqrt+0x8a>
 800ec22:	4674      	mov	r4, lr
 800ec24:	2720      	movs	r7, #32
 800ec26:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800ec2a:	4563      	cmp	r3, ip
 800ec2c:	eb01 000e 	add.w	r0, r1, lr
 800ec30:	dc02      	bgt.n	800ec38 <__ieee754_sqrt+0xc4>
 800ec32:	d113      	bne.n	800ec5c <__ieee754_sqrt+0xe8>
 800ec34:	4290      	cmp	r0, r2
 800ec36:	d811      	bhi.n	800ec5c <__ieee754_sqrt+0xe8>
 800ec38:	2800      	cmp	r0, #0
 800ec3a:	eb00 0e01 	add.w	lr, r0, r1
 800ec3e:	da57      	bge.n	800ecf0 <__ieee754_sqrt+0x17c>
 800ec40:	f1be 0f00 	cmp.w	lr, #0
 800ec44:	db54      	blt.n	800ecf0 <__ieee754_sqrt+0x17c>
 800ec46:	f10c 0801 	add.w	r8, ip, #1
 800ec4a:	eba3 030c 	sub.w	r3, r3, ip
 800ec4e:	4290      	cmp	r0, r2
 800ec50:	bf88      	it	hi
 800ec52:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ec56:	1a12      	subs	r2, r2, r0
 800ec58:	440c      	add	r4, r1
 800ec5a:	46c4      	mov	ip, r8
 800ec5c:	005b      	lsls	r3, r3, #1
 800ec5e:	3f01      	subs	r7, #1
 800ec60:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ec64:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ec68:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800ec6c:	d1dd      	bne.n	800ec2a <__ieee754_sqrt+0xb6>
 800ec6e:	4313      	orrs	r3, r2
 800ec70:	d01b      	beq.n	800ecaa <__ieee754_sqrt+0x136>
 800ec72:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800ed20 <__ieee754_sqrt+0x1ac>
 800ec76:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800ed24 <__ieee754_sqrt+0x1b0>
 800ec7a:	e9da 0100 	ldrd	r0, r1, [sl]
 800ec7e:	e9db 2300 	ldrd	r2, r3, [fp]
 800ec82:	f7f1 fb11 	bl	80002a8 <__aeabi_dsub>
 800ec86:	e9da 8900 	ldrd	r8, r9, [sl]
 800ec8a:	4602      	mov	r2, r0
 800ec8c:	460b      	mov	r3, r1
 800ec8e:	4640      	mov	r0, r8
 800ec90:	4649      	mov	r1, r9
 800ec92:	f7f1 ff3d 	bl	8000b10 <__aeabi_dcmple>
 800ec96:	b140      	cbz	r0, 800ecaa <__ieee754_sqrt+0x136>
 800ec98:	f1b4 3fff 	cmp.w	r4, #4294967295
 800ec9c:	e9da 0100 	ldrd	r0, r1, [sl]
 800eca0:	e9db 2300 	ldrd	r2, r3, [fp]
 800eca4:	d126      	bne.n	800ecf4 <__ieee754_sqrt+0x180>
 800eca6:	3501      	adds	r5, #1
 800eca8:	463c      	mov	r4, r7
 800ecaa:	106a      	asrs	r2, r5, #1
 800ecac:	0863      	lsrs	r3, r4, #1
 800ecae:	07e9      	lsls	r1, r5, #31
 800ecb0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800ecb4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800ecb8:	bf48      	it	mi
 800ecba:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800ecbe:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800ecc2:	461c      	mov	r4, r3
 800ecc4:	e76d      	b.n	800eba2 <__ieee754_sqrt+0x2e>
 800ecc6:	0ad3      	lsrs	r3, r2, #11
 800ecc8:	3815      	subs	r0, #21
 800ecca:	0552      	lsls	r2, r2, #21
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d0fa      	beq.n	800ecc6 <__ieee754_sqrt+0x152>
 800ecd0:	02dc      	lsls	r4, r3, #11
 800ecd2:	d50a      	bpl.n	800ecea <__ieee754_sqrt+0x176>
 800ecd4:	f1c1 0420 	rsb	r4, r1, #32
 800ecd8:	fa22 f404 	lsr.w	r4, r2, r4
 800ecdc:	1e4d      	subs	r5, r1, #1
 800ecde:	408a      	lsls	r2, r1
 800ece0:	4323      	orrs	r3, r4
 800ece2:	1b41      	subs	r1, r0, r5
 800ece4:	e772      	b.n	800ebcc <__ieee754_sqrt+0x58>
 800ece6:	4608      	mov	r0, r1
 800ece8:	e7f0      	b.n	800eccc <__ieee754_sqrt+0x158>
 800ecea:	005b      	lsls	r3, r3, #1
 800ecec:	3101      	adds	r1, #1
 800ecee:	e7ef      	b.n	800ecd0 <__ieee754_sqrt+0x15c>
 800ecf0:	46e0      	mov	r8, ip
 800ecf2:	e7aa      	b.n	800ec4a <__ieee754_sqrt+0xd6>
 800ecf4:	f7f1 fada 	bl	80002ac <__adddf3>
 800ecf8:	e9da 8900 	ldrd	r8, r9, [sl]
 800ecfc:	4602      	mov	r2, r0
 800ecfe:	460b      	mov	r3, r1
 800ed00:	4640      	mov	r0, r8
 800ed02:	4649      	mov	r1, r9
 800ed04:	f7f1 fefa 	bl	8000afc <__aeabi_dcmplt>
 800ed08:	b120      	cbz	r0, 800ed14 <__ieee754_sqrt+0x1a0>
 800ed0a:	1ca0      	adds	r0, r4, #2
 800ed0c:	bf08      	it	eq
 800ed0e:	3501      	addeq	r5, #1
 800ed10:	3402      	adds	r4, #2
 800ed12:	e7ca      	b.n	800ecaa <__ieee754_sqrt+0x136>
 800ed14:	3401      	adds	r4, #1
 800ed16:	f024 0401 	bic.w	r4, r4, #1
 800ed1a:	e7c6      	b.n	800ecaa <__ieee754_sqrt+0x136>
 800ed1c:	7ff00000 	.word	0x7ff00000
 800ed20:	200001e8 	.word	0x200001e8
 800ed24:	200001f0 	.word	0x200001f0

0800ed28 <_init>:
 800ed28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed2a:	bf00      	nop
 800ed2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed2e:	bc08      	pop	{r3}
 800ed30:	469e      	mov	lr, r3
 800ed32:	4770      	bx	lr

0800ed34 <_fini>:
 800ed34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed36:	bf00      	nop
 800ed38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed3a:	bc08      	pop	{r3}
 800ed3c:	469e      	mov	lr, r3
 800ed3e:	4770      	bx	lr
