
step motor 0308.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d970  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  0800db20  0800db20  0001db20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df88  0800df88  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800df88  0800df88  0001df88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df90  0800df90  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df90  0800df90  0001df90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800df94  0800df94  0001df94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800df98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000e38  200001e0  200001e0  000201e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20001018  20001018  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001a5ff  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000310e  00000000  00000000  0003a84e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001490  00000000  00000000  0003d960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001358  00000000  00000000  0003edf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002848a  00000000  00000000  00040148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00019000  00000000  00000000  000685d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f28bc  00000000  00000000  000815d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006d70  00000000  00000000  00173e90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800db08 	.word	0x0800db08

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	0800db08 	.word	0x0800db08

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a6 	b.w	800100c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9e08      	ldr	r6, [sp, #32]
 8000d4a:	460d      	mov	r5, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	460f      	mov	r7, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4694      	mov	ip, r2
 8000d58:	d965      	bls.n	8000e26 <__udivmoddi4+0xe2>
 8000d5a:	fab2 f382 	clz	r3, r2
 8000d5e:	b143      	cbz	r3, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d64:	f1c3 0220 	rsb	r2, r3, #32
 8000d68:	409f      	lsls	r7, r3
 8000d6a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6e:	4317      	orrs	r7, r2
 8000d70:	409c      	lsls	r4, r3
 8000d72:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d76:	fa1f f58c 	uxth.w	r5, ip
 8000d7a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d7e:	0c22      	lsrs	r2, r4, #16
 8000d80:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d84:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d88:	fb01 f005 	mul.w	r0, r1, r5
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d90:	eb1c 0202 	adds.w	r2, ip, r2
 8000d94:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d98:	f080 811c 	bcs.w	8000fd4 <__udivmoddi4+0x290>
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	f240 8119 	bls.w	8000fd4 <__udivmoddi4+0x290>
 8000da2:	3902      	subs	r1, #2
 8000da4:	4462      	add	r2, ip
 8000da6:	1a12      	subs	r2, r2, r0
 8000da8:	b2a4      	uxth	r4, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000db6:	fb00 f505 	mul.w	r5, r0, r5
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	d90a      	bls.n	8000dd4 <__udivmoddi4+0x90>
 8000dbe:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc6:	f080 8107 	bcs.w	8000fd8 <__udivmoddi4+0x294>
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	f240 8104 	bls.w	8000fd8 <__udivmoddi4+0x294>
 8000dd0:	4464      	add	r4, ip
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11e      	cbz	r6, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40dc      	lsrs	r4, r3
 8000de0:	2300      	movs	r3, #0
 8000de2:	e9c6 4300 	strd	r4, r3, [r6]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0xbc>
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	f000 80ed 	beq.w	8000fce <__udivmoddi4+0x28a>
 8000df4:	2100      	movs	r1, #0
 8000df6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e00:	fab3 f183 	clz	r1, r3
 8000e04:	2900      	cmp	r1, #0
 8000e06:	d149      	bne.n	8000e9c <__udivmoddi4+0x158>
 8000e08:	42ab      	cmp	r3, r5
 8000e0a:	d302      	bcc.n	8000e12 <__udivmoddi4+0xce>
 8000e0c:	4282      	cmp	r2, r0
 8000e0e:	f200 80f8 	bhi.w	8001002 <__udivmoddi4+0x2be>
 8000e12:	1a84      	subs	r4, r0, r2
 8000e14:	eb65 0203 	sbc.w	r2, r5, r3
 8000e18:	2001      	movs	r0, #1
 8000e1a:	4617      	mov	r7, r2
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d0e2      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	e9c6 4700 	strd	r4, r7, [r6]
 8000e24:	e7df      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e26:	b902      	cbnz	r2, 8000e2a <__udivmoddi4+0xe6>
 8000e28:	deff      	udf	#255	; 0xff
 8000e2a:	fab2 f382 	clz	r3, r2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f040 8090 	bne.w	8000f54 <__udivmoddi4+0x210>
 8000e34:	1a8a      	subs	r2, r1, r2
 8000e36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e3a:	fa1f fe8c 	uxth.w	lr, ip
 8000e3e:	2101      	movs	r1, #1
 8000e40:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e44:	fb07 2015 	mls	r0, r7, r5, r2
 8000e48:	0c22      	lsrs	r2, r4, #16
 8000e4a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e4e:	fb0e f005 	mul.w	r0, lr, r5
 8000e52:	4290      	cmp	r0, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x124>
 8000e56:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x122>
 8000e60:	4290      	cmp	r0, r2
 8000e62:	f200 80cb 	bhi.w	8000ffc <__udivmoddi4+0x2b8>
 8000e66:	4645      	mov	r5, r8
 8000e68:	1a12      	subs	r2, r2, r0
 8000e6a:	b2a4      	uxth	r4, r4
 8000e6c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e70:	fb07 2210 	mls	r2, r7, r0, r2
 8000e74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e78:	fb0e fe00 	mul.w	lr, lr, r0
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x14e>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x14c>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	f200 80bb 	bhi.w	8001006 <__udivmoddi4+0x2c2>
 8000e90:	4610      	mov	r0, r2
 8000e92:	eba4 040e 	sub.w	r4, r4, lr
 8000e96:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e9a:	e79f      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e9c:	f1c1 0720 	rsb	r7, r1, #32
 8000ea0:	408b      	lsls	r3, r1
 8000ea2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ea6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eaa:	fa05 f401 	lsl.w	r4, r5, r1
 8000eae:	fa20 f307 	lsr.w	r3, r0, r7
 8000eb2:	40fd      	lsrs	r5, r7
 8000eb4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb8:	4323      	orrs	r3, r4
 8000eba:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ebe:	fa1f fe8c 	uxth.w	lr, ip
 8000ec2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ec6:	0c1c      	lsrs	r4, r3, #16
 8000ec8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ecc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ed0:	42a5      	cmp	r5, r4
 8000ed2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eda:	d90b      	bls.n	8000ef4 <__udivmoddi4+0x1b0>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ee4:	f080 8088 	bcs.w	8000ff8 <__udivmoddi4+0x2b4>
 8000ee8:	42a5      	cmp	r5, r4
 8000eea:	f240 8085 	bls.w	8000ff8 <__udivmoddi4+0x2b4>
 8000eee:	f1a8 0802 	sub.w	r8, r8, #2
 8000ef2:	4464      	add	r4, ip
 8000ef4:	1b64      	subs	r4, r4, r5
 8000ef6:	b29d      	uxth	r5, r3
 8000ef8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000efc:	fb09 4413 	mls	r4, r9, r3, r4
 8000f00:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f04:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f08:	45a6      	cmp	lr, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x1da>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f14:	d26c      	bcs.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f16:	45a6      	cmp	lr, r4
 8000f18:	d96a      	bls.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f1a:	3b02      	subs	r3, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f22:	fba3 9502 	umull	r9, r5, r3, r2
 8000f26:	eba4 040e 	sub.w	r4, r4, lr
 8000f2a:	42ac      	cmp	r4, r5
 8000f2c:	46c8      	mov	r8, r9
 8000f2e:	46ae      	mov	lr, r5
 8000f30:	d356      	bcc.n	8000fe0 <__udivmoddi4+0x29c>
 8000f32:	d053      	beq.n	8000fdc <__udivmoddi4+0x298>
 8000f34:	b156      	cbz	r6, 8000f4c <__udivmoddi4+0x208>
 8000f36:	ebb0 0208 	subs.w	r2, r0, r8
 8000f3a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f42:	40ca      	lsrs	r2, r1
 8000f44:	40cc      	lsrs	r4, r1
 8000f46:	4317      	orrs	r7, r2
 8000f48:	e9c6 7400 	strd	r7, r4, [r6]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	2100      	movs	r1, #0
 8000f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f54:	f1c3 0120 	rsb	r1, r3, #32
 8000f58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f5c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f60:	fa25 f101 	lsr.w	r1, r5, r1
 8000f64:	409d      	lsls	r5, r3
 8000f66:	432a      	orrs	r2, r5
 8000f68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f6c:	fa1f fe8c 	uxth.w	lr, ip
 8000f70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f74:	fb07 1510 	mls	r5, r7, r0, r1
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f7e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f82:	428d      	cmp	r5, r1
 8000f84:	fa04 f403 	lsl.w	r4, r4, r3
 8000f88:	d908      	bls.n	8000f9c <__udivmoddi4+0x258>
 8000f8a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f92:	d22f      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f94:	428d      	cmp	r5, r1
 8000f96:	d92d      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f98:	3802      	subs	r0, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	1b49      	subs	r1, r1, r5
 8000f9e:	b292      	uxth	r2, r2
 8000fa0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fa4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fa8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fac:	fb05 f10e 	mul.w	r1, r5, lr
 8000fb0:	4291      	cmp	r1, r2
 8000fb2:	d908      	bls.n	8000fc6 <__udivmoddi4+0x282>
 8000fb4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fb8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fbc:	d216      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000fbe:	4291      	cmp	r1, r2
 8000fc0:	d914      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000fc2:	3d02      	subs	r5, #2
 8000fc4:	4462      	add	r2, ip
 8000fc6:	1a52      	subs	r2, r2, r1
 8000fc8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fcc:	e738      	b.n	8000e40 <__udivmoddi4+0xfc>
 8000fce:	4631      	mov	r1, r6
 8000fd0:	4630      	mov	r0, r6
 8000fd2:	e708      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000fd4:	4639      	mov	r1, r7
 8000fd6:	e6e6      	b.n	8000da6 <__udivmoddi4+0x62>
 8000fd8:	4610      	mov	r0, r2
 8000fda:	e6fb      	b.n	8000dd4 <__udivmoddi4+0x90>
 8000fdc:	4548      	cmp	r0, r9
 8000fde:	d2a9      	bcs.n	8000f34 <__udivmoddi4+0x1f0>
 8000fe0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fe4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	e7a3      	b.n	8000f34 <__udivmoddi4+0x1f0>
 8000fec:	4645      	mov	r5, r8
 8000fee:	e7ea      	b.n	8000fc6 <__udivmoddi4+0x282>
 8000ff0:	462b      	mov	r3, r5
 8000ff2:	e794      	b.n	8000f1e <__udivmoddi4+0x1da>
 8000ff4:	4640      	mov	r0, r8
 8000ff6:	e7d1      	b.n	8000f9c <__udivmoddi4+0x258>
 8000ff8:	46d0      	mov	r8, sl
 8000ffa:	e77b      	b.n	8000ef4 <__udivmoddi4+0x1b0>
 8000ffc:	3d02      	subs	r5, #2
 8000ffe:	4462      	add	r2, ip
 8001000:	e732      	b.n	8000e68 <__udivmoddi4+0x124>
 8001002:	4608      	mov	r0, r1
 8001004:	e70a      	b.n	8000e1c <__udivmoddi4+0xd8>
 8001006:	4464      	add	r4, ip
 8001008:	3802      	subs	r0, #2
 800100a:	e742      	b.n	8000e92 <__udivmoddi4+0x14e>

0800100c <__aeabi_idiv0>:
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop

08001010 <_write>:
{
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
  return ch;
}

int _write(int file, char* p, int len){        //테라텀
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, p, len, 10);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	b29a      	uxth	r2, r3
 8001020:	230a      	movs	r3, #10
 8001022:	68b9      	ldr	r1, [r7, #8]
 8001024:	4803      	ldr	r0, [pc, #12]	; (8001034 <_write+0x24>)
 8001026:	f006 fdd3 	bl	8007bd0 <HAL_UART_Transmit>
	return len;
 800102a:	687b      	ldr	r3, [r7, #4]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	2000030c 	.word	0x2000030c

08001038 <SerialSendChar_WIFI>:
	while((USART3->SR & 1<<7) == RESET);
	USART3->DR = (Ch1 & 0x01FF);	// 전송 (최대 9bit 이므로 0x01FF과 masking)
}

void SerialSendChar_WIFI(uint8_t Ch2) // 1문자 보내기 함수
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
	while((UART4->SR & 1<<7) == RESET);
 8001042:	bf00      	nop
 8001044:	4b07      	ldr	r3, [pc, #28]	; (8001064 <SerialSendChar_WIFI+0x2c>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800104c:	2b00      	cmp	r3, #0
 800104e:	d0f9      	beq.n	8001044 <SerialSendChar_WIFI+0xc>
	UART4->DR = (Ch2 & 0x01FF);
 8001050:	4a04      	ldr	r2, [pc, #16]	; (8001064 <SerialSendChar_WIFI+0x2c>)
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	6053      	str	r3, [r2, #4]
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	40004c00 	.word	0x40004c00

08001068 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	encoder_count=TIM4->CNT;
 8001070:	4bb8      	ldr	r3, [pc, #736]	; (8001354 <HAL_UART_RxCpltCallback+0x2ec>)
 8001072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001074:	4ab8      	ldr	r2, [pc, #736]	; (8001358 <HAL_UART_RxCpltCallback+0x2f0>)
 8001076:	6013      	str	r3, [r2, #0]

  if(huart->Instance == USART3)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4ab7      	ldr	r2, [pc, #732]	; (800135c <HAL_UART_RxCpltCallback+0x2f4>)
 800107e:	4293      	cmp	r3, r2
 8001080:	f040 819c 	bne.w	80013bc <HAL_UART_RxCpltCallback+0x354>
  {

	  HAL_UART_Receive_IT(&huart3, &key_value, 1);
 8001084:	2201      	movs	r2, #1
 8001086:	49b6      	ldr	r1, [pc, #728]	; (8001360 <HAL_UART_RxCpltCallback+0x2f8>)
 8001088:	48b6      	ldr	r0, [pc, #728]	; (8001364 <HAL_UART_RxCpltCallback+0x2fc>)
 800108a:	f006 fe2c 	bl	8007ce6 <HAL_UART_Receive_IT>
	  printf("%d,^^ %c \r\n", key_value,key_value);
 800108e:	4bb4      	ldr	r3, [pc, #720]	; (8001360 <HAL_UART_RxCpltCallback+0x2f8>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	4619      	mov	r1, r3
 8001094:	4bb2      	ldr	r3, [pc, #712]	; (8001360 <HAL_UART_RxCpltCallback+0x2f8>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	461a      	mov	r2, r3
 800109a:	48b3      	ldr	r0, [pc, #716]	; (8001368 <HAL_UART_RxCpltCallback+0x300>)
 800109c:	f008 ffd6 	bl	800a04c <iprintf>

	  switch(key_value)
 80010a0:	4baf      	ldr	r3, [pc, #700]	; (8001360 <HAL_UART_RxCpltCallback+0x2f8>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	3b2c      	subs	r3, #44	; 0x2c
 80010a6:	2b4b      	cmp	r3, #75	; 0x4b
 80010a8:	f200 8188 	bhi.w	80013bc <HAL_UART_RxCpltCallback+0x354>
 80010ac:	a201      	add	r2, pc, #4	; (adr r2, 80010b4 <HAL_UART_RxCpltCallback+0x4c>)
 80010ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b2:	bf00      	nop
 80010b4:	0800131f 	.word	0x0800131f
 80010b8:	080013bd 	.word	0x080013bd
 80010bc:	0800132d 	.word	0x0800132d
 80010c0:	0800133b 	.word	0x0800133b
 80010c4:	080013bd 	.word	0x080013bd
 80010c8:	08001219 	.word	0x08001219
 80010cc:	08001227 	.word	0x08001227
 80010d0:	08001235 	.word	0x08001235
 80010d4:	0800123d 	.word	0x0800123d
 80010d8:	08001245 	.word	0x08001245
 80010dc:	0800124f 	.word	0x0800124f
 80010e0:	08001259 	.word	0x08001259
 80010e4:	080013bd 	.word	0x080013bd
 80010e8:	080013bd 	.word	0x080013bd
 80010ec:	080013bd 	.word	0x080013bd
 80010f0:	080013bd 	.word	0x080013bd
 80010f4:	080013bd 	.word	0x080013bd
 80010f8:	080013bd 	.word	0x080013bd
 80010fc:	080013bd 	.word	0x080013bd
 8001100:	0800139d 	.word	0x0800139d
 8001104:	080013bd 	.word	0x080013bd
 8001108:	080013bd 	.word	0x080013bd
 800110c:	080013bd 	.word	0x080013bd
 8001110:	080013bd 	.word	0x080013bd
 8001114:	080013bd 	.word	0x080013bd
 8001118:	080013bd 	.word	0x080013bd
 800111c:	080013bd 	.word	0x080013bd
 8001120:	080013bd 	.word	0x080013bd
 8001124:	080013bd 	.word	0x080013bd
 8001128:	080013bd 	.word	0x080013bd
 800112c:	080013bd 	.word	0x080013bd
 8001130:	080013bd 	.word	0x080013bd
 8001134:	080013bd 	.word	0x080013bd
 8001138:	080013bd 	.word	0x080013bd
 800113c:	080013bd 	.word	0x080013bd
 8001140:	080013bd 	.word	0x080013bd
 8001144:	080013bd 	.word	0x080013bd
 8001148:	080013bd 	.word	0x080013bd
 800114c:	080013bd 	.word	0x080013bd
 8001150:	080013bd 	.word	0x080013bd
 8001154:	080013bd 	.word	0x080013bd
 8001158:	080013bd 	.word	0x080013bd
 800115c:	080013bd 	.word	0x080013bd
 8001160:	080013bd 	.word	0x080013bd
 8001164:	080013bd 	.word	0x080013bd
 8001168:	080013bd 	.word	0x080013bd
 800116c:	080013bd 	.word	0x080013bd
 8001170:	080013bd 	.word	0x080013bd
 8001174:	080013bd 	.word	0x080013bd
 8001178:	080013bd 	.word	0x080013bd
 800117c:	080013bd 	.word	0x080013bd
 8001180:	080013bd 	.word	0x080013bd
 8001184:	080013bd 	.word	0x080013bd
 8001188:	08001263 	.word	0x08001263
 800118c:	080012e3 	.word	0x080012e3
 8001190:	080013bd 	.word	0x080013bd
 8001194:	080013bd 	.word	0x080013bd
 8001198:	080013bd 	.word	0x080013bd
 800119c:	080013bd 	.word	0x080013bd
 80011a0:	080013bd 	.word	0x080013bd
 80011a4:	080013bd 	.word	0x080013bd
 80011a8:	08001295 	.word	0x08001295
 80011ac:	080013bd 	.word	0x080013bd
 80011b0:	080013bd 	.word	0x080013bd
 80011b4:	080013bd 	.word	0x080013bd
 80011b8:	08001311 	.word	0x08001311
 80011bc:	08001303 	.word	0x08001303
 80011c0:	080012af 	.word	0x080012af
 80011c4:	080012c9 	.word	0x080012c9
 80011c8:	080011e5 	.word	0x080011e5
 80011cc:	080013bd 	.word	0x080013bd
 80011d0:	080013bd 	.word	0x080013bd
 80011d4:	080013bd 	.word	0x080013bd
 80011d8:	08001273 	.word	0x08001273
 80011dc:	080013bd 	.word	0x080013bd
 80011e0:	080011ff 	.word	0x080011ff
	  	{
	  		case 'q':  // forward
	  			GPIOE->ODR |= 1<<0;  // back
 80011e4:	4b61      	ldr	r3, [pc, #388]	; (800136c <HAL_UART_RxCpltCallback+0x304>)
 80011e6:	695b      	ldr	r3, [r3, #20]
 80011e8:	4a60      	ldr	r2, [pc, #384]	; (800136c <HAL_UART_RxCpltCallback+0x304>)
 80011ea:	f043 0301 	orr.w	r3, r3, #1
 80011ee:	6153      	str	r3, [r2, #20]
	  	  	 	GPIOB->ODR |= 1<<0;  //LD1
 80011f0:	4b5f      	ldr	r3, [pc, #380]	; (8001370 <HAL_UART_RxCpltCallback+0x308>)
 80011f2:	695b      	ldr	r3, [r3, #20]
 80011f4:	4a5e      	ldr	r2, [pc, #376]	; (8001370 <HAL_UART_RxCpltCallback+0x308>)
 80011f6:	f043 0301 	orr.w	r3, r3, #1
 80011fa:	6153      	str	r3, [r2, #20]

	  			break;
 80011fc:	e0de      	b.n	80013bc <HAL_UART_RxCpltCallback+0x354>

	  		case 'w':  // back
	  			GPIOE->ODR &= ~1<<0;  // go
 80011fe:	4b5b      	ldr	r3, [pc, #364]	; (800136c <HAL_UART_RxCpltCallback+0x304>)
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	4a5a      	ldr	r2, [pc, #360]	; (800136c <HAL_UART_RxCpltCallback+0x304>)
 8001204:	f023 0301 	bic.w	r3, r3, #1
 8001208:	6153      	str	r3, [r2, #20]
	  		    GPIOB->ODR &= ~1<<0;  //LD1
 800120a:	4b59      	ldr	r3, [pc, #356]	; (8001370 <HAL_UART_RxCpltCallback+0x308>)
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	4a58      	ldr	r2, [pc, #352]	; (8001370 <HAL_UART_RxCpltCallback+0x308>)
 8001210:	f023 0301 	bic.w	r3, r3, #1
 8001214:	6153      	str	r3, [r2, #20]

	  			break;
 8001216:	e0d1      	b.n	80013bc <HAL_UART_RxCpltCallback+0x354>

	  		case '1':
	  			GPIOG->ODR |= 1<<0;  //stop
 8001218:	4b56      	ldr	r3, [pc, #344]	; (8001374 <HAL_UART_RxCpltCallback+0x30c>)
 800121a:	695b      	ldr	r3, [r3, #20]
 800121c:	4a55      	ldr	r2, [pc, #340]	; (8001374 <HAL_UART_RxCpltCallback+0x30c>)
 800121e:	f043 0301 	orr.w	r3, r3, #1
 8001222:	6153      	str	r3, [r2, #20]

	  			break;
 8001224:	e0ca      	b.n	80013bc <HAL_UART_RxCpltCallback+0x354>

	  		case '2':
	  			  GPIOG->ODR &= ~1<<0;  //start
 8001226:	4b53      	ldr	r3, [pc, #332]	; (8001374 <HAL_UART_RxCpltCallback+0x30c>)
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	4a52      	ldr	r2, [pc, #328]	; (8001374 <HAL_UART_RxCpltCallback+0x30c>)
 800122c:	f023 0301 	bic.w	r3, r3, #1
 8001230:	6153      	str	r3, [r2, #20]

	  			break;
 8001232:	e0c3      	b.n	80013bc <HAL_UART_RxCpltCallback+0x354>

	  		case '3':
	  			TIM3->CCR1 = 50;
 8001234:	4b50      	ldr	r3, [pc, #320]	; (8001378 <HAL_UART_RxCpltCallback+0x310>)
 8001236:	2232      	movs	r2, #50	; 0x32
 8001238:	635a      	str	r2, [r3, #52]	; 0x34
	  		//	TIM3->CCR2 = 50;

	  			break;
 800123a:	e0bf      	b.n	80013bc <HAL_UART_RxCpltCallback+0x354>

	  		case '4':
	  			TIM3->CCR1 = 100;
 800123c:	4b4e      	ldr	r3, [pc, #312]	; (8001378 <HAL_UART_RxCpltCallback+0x310>)
 800123e:	2264      	movs	r2, #100	; 0x64
 8001240:	635a      	str	r2, [r3, #52]	; 0x34
	  	  		//	TIM3->CCR2 = 100;

	  			break;
 8001242:	e0bb      	b.n	80013bc <HAL_UART_RxCpltCallback+0x354>

	  		case '5':
	  			TIM3->CCR1 = 500;
 8001244:	4b4c      	ldr	r3, [pc, #304]	; (8001378 <HAL_UART_RxCpltCallback+0x310>)
 8001246:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800124a:	635a      	str	r2, [r3, #52]	; 0x34
	  	  	  	//	TIM3->CCR2 = 500;

	  			break;
 800124c:	e0b6      	b.n	80013bc <HAL_UART_RxCpltCallback+0x354>

	  		case '6':
	  			TIM3->CCR1 = 800;
 800124e:	4b4a      	ldr	r3, [pc, #296]	; (8001378 <HAL_UART_RxCpltCallback+0x310>)
 8001250:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001254:	635a      	str	r2, [r3, #52]	; 0x34
	  	  	  	//	TIM3->CCR2 = 800;
	  			break;
 8001256:	e0b1      	b.n	80013bc <HAL_UART_RxCpltCallback+0x354>

	  		case '7':
	  			TIM3->CCR1 = 1000;
 8001258:	4b47      	ldr	r3, [pc, #284]	; (8001378 <HAL_UART_RxCpltCallback+0x310>)
 800125a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800125e:	635a      	str	r2, [r3, #52]	; 0x34
	  	  	//  		TIM3->CCR2 = 1000;

	  			break;
 8001260:	e0ac      	b.n	80013bc <HAL_UART_RxCpltCallback+0x354>

	  		case 'a':
	  			  TIM4->CNT=10000;
 8001262:	4b3c      	ldr	r3, [pc, #240]	; (8001354 <HAL_UART_RxCpltCallback+0x2ec>)
 8001264:	f242 7210 	movw	r2, #10000	; 0x2710
 8001268:	625a      	str	r2, [r3, #36]	; 0x24

	  		  key_flag=1;
 800126a:	4b44      	ldr	r3, [pc, #272]	; (800137c <HAL_UART_RxCpltCallback+0x314>)
 800126c:	2201      	movs	r2, #1
 800126e:	701a      	strb	r2, [r3, #0]

	  			break;
 8001270:	e0a4      	b.n	80013bc <HAL_UART_RxCpltCallback+0x354>


	  		case 'u':
	  			if(position_start==0)
 8001272:	4b43      	ldr	r3, [pc, #268]	; (8001380 <HAL_UART_RxCpltCallback+0x318>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d103      	bne.n	8001282 <HAL_UART_RxCpltCallback+0x21a>
	  			{
	  				position_start=1;
 800127a:	4b41      	ldr	r3, [pc, #260]	; (8001380 <HAL_UART_RxCpltCallback+0x318>)
 800127c:	2201      	movs	r2, #1
 800127e:	601a      	str	r2, [r3, #0]
	  			else if(position_start==1)
	  		    {
	  				position_start=0;

	  			}
	  			  			 break;
 8001280:	e099      	b.n	80013b6 <HAL_UART_RxCpltCallback+0x34e>
	  			else if(position_start==1)
 8001282:	4b3f      	ldr	r3, [pc, #252]	; (8001380 <HAL_UART_RxCpltCallback+0x318>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2b01      	cmp	r3, #1
 8001288:	f040 8095 	bne.w	80013b6 <HAL_UART_RxCpltCallback+0x34e>
	  				position_start=0;
 800128c:	4b3c      	ldr	r3, [pc, #240]	; (8001380 <HAL_UART_RxCpltCallback+0x318>)
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
	  			  			 break;
 8001292:	e090      	b.n	80013b6 <HAL_UART_RxCpltCallback+0x34e>
	  			case 'i':
	  			      TIM4->CNT=10000;
 8001294:	4b2f      	ldr	r3, [pc, #188]	; (8001354 <HAL_UART_RxCpltCallback+0x2ec>)
 8001296:	f242 7210 	movw	r2, #10000	; 0x2710
 800129a:	625a      	str	r2, [r3, #36]	; 0x24
	  			    input_position=10000+512*1;
 800129c:	4b39      	ldr	r3, [pc, #228]	; (8001384 <HAL_UART_RxCpltCallback+0x31c>)
 800129e:	f642 1210 	movw	r2, #10512	; 0x2910
 80012a2:	801a      	strh	r2, [r3, #0]
	  			  	  err_sum=0;
 80012a4:	4b38      	ldr	r3, [pc, #224]	; (8001388 <HAL_UART_RxCpltCallback+0x320>)
 80012a6:	f04f 0200 	mov.w	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
	  			 break;
 80012ac:	e086      	b.n	80013bc <HAL_UART_RxCpltCallback+0x354>
	  			case 'o':
	  				  TIM4->CNT=10000;
 80012ae:	4b29      	ldr	r3, [pc, #164]	; (8001354 <HAL_UART_RxCpltCallback+0x2ec>)
 80012b0:	f242 7210 	movw	r2, #10000	; 0x2710
 80012b4:	625a      	str	r2, [r3, #36]	; 0x24
	  				input_position=10000+512*2;
 80012b6:	4b33      	ldr	r3, [pc, #204]	; (8001384 <HAL_UART_RxCpltCallback+0x31c>)
 80012b8:	f642 3210 	movw	r2, #11024	; 0x2b10
 80012bc:	801a      	strh	r2, [r3, #0]
	  				  err_sum=0;
 80012be:	4b32      	ldr	r3, [pc, #200]	; (8001388 <HAL_UART_RxCpltCallback+0x320>)
 80012c0:	f04f 0200 	mov.w	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
	  			break;
 80012c6:	e079      	b.n	80013bc <HAL_UART_RxCpltCallback+0x354>
	  			case 'p':
	  				   TIM4->CNT=10000;
 80012c8:	4b22      	ldr	r3, [pc, #136]	; (8001354 <HAL_UART_RxCpltCallback+0x2ec>)
 80012ca:	f242 7210 	movw	r2, #10000	; 0x2710
 80012ce:	625a      	str	r2, [r3, #36]	; 0x24
	  				 input_position=10000-512*1;
 80012d0:	4b2c      	ldr	r3, [pc, #176]	; (8001384 <HAL_UART_RxCpltCallback+0x31c>)
 80012d2:	f242 5210 	movw	r2, #9488	; 0x2510
 80012d6:	801a      	strh	r2, [r3, #0]
	  			 	   err_sum=0;
 80012d8:	4b2b      	ldr	r3, [pc, #172]	; (8001388 <HAL_UART_RxCpltCallback+0x320>)
 80012da:	f04f 0200 	mov.w	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
	  			 break;
 80012e0:	e06c      	b.n	80013bc <HAL_UART_RxCpltCallback+0x354>

	  			case 'b':

	  				if(step_enable==0)
 80012e2:	4b2a      	ldr	r3, [pc, #168]	; (800138c <HAL_UART_RxCpltCallback+0x324>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d103      	bne.n	80012f2 <HAL_UART_RxCpltCallback+0x28a>
	     			{
	  					step_enable=1;
 80012ea:	4b28      	ldr	r3, [pc, #160]	; (800138c <HAL_UART_RxCpltCallback+0x324>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	601a      	str	r2, [r3, #0]
	  			 	}
	  				else if(step_enable==1)
	  			   {
	  					step_enable=0;
                    }
	  			  break;
 80012f0:	e063      	b.n	80013ba <HAL_UART_RxCpltCallback+0x352>
	  				else if(step_enable==1)
 80012f2:	4b26      	ldr	r3, [pc, #152]	; (800138c <HAL_UART_RxCpltCallback+0x324>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d15f      	bne.n	80013ba <HAL_UART_RxCpltCallback+0x352>
	  					step_enable=0;
 80012fa:	4b24      	ldr	r3, [pc, #144]	; (800138c <HAL_UART_RxCpltCallback+0x324>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
	  			  break;
 8001300:	e05b      	b.n	80013ba <HAL_UART_RxCpltCallback+0x352>
	  			case 'n':
	  			 HAL_GPIO_WritePin(GPIOF,  GPIO_PIN_13, 1);  //정지
 8001302:	2201      	movs	r2, #1
 8001304:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001308:	4821      	ldr	r0, [pc, #132]	; (8001390 <HAL_UART_RxCpltCallback+0x328>)
 800130a:	f004 fb27 	bl	800595c <HAL_GPIO_WritePin>

	  				  	break;
 800130e:	e055      	b.n	80013bc <HAL_UART_RxCpltCallback+0x354>

	  			case 'm':
	  				 HAL_GPIO_WritePin(GPIOF,  GPIO_PIN_13, 0);  //출발
 8001310:	2200      	movs	r2, #0
 8001312:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001316:	481e      	ldr	r0, [pc, #120]	; (8001390 <HAL_UART_RxCpltCallback+0x328>)
 8001318:	f004 fb20 	bl	800595c <HAL_GPIO_WritePin>

	  		  	break;
 800131c:	e04e      	b.n	80013bc <HAL_UART_RxCpltCallback+0x354>
	  			case ',':
	  				 HAL_GPIO_WritePin(GPIOF,  GPIO_PIN_14, 0);  //방향
 800131e:	2200      	movs	r2, #0
 8001320:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001324:	481a      	ldr	r0, [pc, #104]	; (8001390 <HAL_UART_RxCpltCallback+0x328>)
 8001326:	f004 fb19 	bl	800595c <HAL_GPIO_WritePin>

	  				  	break;
 800132a:	e047      	b.n	80013bc <HAL_UART_RxCpltCallback+0x354>
	  			case '.':
	  				 HAL_GPIO_WritePin(GPIOF,  GPIO_PIN_14, 1);  //방향
 800132c:	2201      	movs	r2, #1
 800132e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001332:	4817      	ldr	r0, [pc, #92]	; (8001390 <HAL_UART_RxCpltCallback+0x328>)
 8001334:	f004 fb12 	bl	800595c <HAL_GPIO_WritePin>

	  				   break;
 8001338:	e040      	b.n	80013bc <HAL_UART_RxCpltCallback+0x354>
	  			case '/': //
	  				rev10_flag=1;
 800133a:	4b16      	ldr	r3, [pc, #88]	; (8001394 <HAL_UART_RxCpltCallback+0x32c>)
 800133c:	2201      	movs	r2, #1
 800133e:	701a      	strb	r2, [r3, #0]
	  				step_count=0;
 8001340:	4b15      	ldr	r3, [pc, #84]	; (8001398 <HAL_UART_RxCpltCallback+0x330>)
 8001342:	2200      	movs	r2, #0
 8001344:	801a      	strh	r2, [r3, #0]
	  				HAL_GPIO_WritePin(GPIOF,  GPIO_PIN_13, 0);  //출발
 8001346:	2200      	movs	r2, #0
 8001348:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800134c:	4810      	ldr	r0, [pc, #64]	; (8001390 <HAL_UART_RxCpltCallback+0x328>)
 800134e:	f004 fb05 	bl	800595c <HAL_GPIO_WritePin>

	  				   break;
 8001352:	e033      	b.n	80013bc <HAL_UART_RxCpltCallback+0x354>
 8001354:	40000800 	.word	0x40000800
 8001358:	20000000 	.word	0x20000000
 800135c:	40004800 	.word	0x40004800
 8001360:	20000308 	.word	0x20000308
 8001364:	2000030c 	.word	0x2000030c
 8001368:	0800db20 	.word	0x0800db20
 800136c:	40021000 	.word	0x40021000
 8001370:	40020400 	.word	0x40020400
 8001374:	40021800 	.word	0x40021800
 8001378:	40000400 	.word	0x40000400
 800137c:	20000200 	.word	0x20000200
 8001380:	200001fc 	.word	0x200001fc
 8001384:	20000e26 	.word	0x20000e26
 8001388:	20000e2c 	.word	0x20000e2c
 800138c:	20000204 	.word	0x20000204
 8001390:	40021400 	.word	0x40021400
 8001394:	20000201 	.word	0x20000201
 8001398:	200003c8 	.word	0x200003c8
	  			case '?': //
	  		     	rev1_flag=1;
 800139c:	4b64      	ldr	r3, [pc, #400]	; (8001530 <HAL_UART_RxCpltCallback+0x4c8>)
 800139e:	2201      	movs	r2, #1
 80013a0:	701a      	strb	r2, [r3, #0]
	  				step_count=0;
 80013a2:	4b64      	ldr	r3, [pc, #400]	; (8001534 <HAL_UART_RxCpltCallback+0x4cc>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	801a      	strh	r2, [r3, #0]
	  				HAL_GPIO_WritePin(GPIOF,  GPIO_PIN_13, 0);  //출발
 80013a8:	2200      	movs	r2, #0
 80013aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013ae:	4862      	ldr	r0, [pc, #392]	; (8001538 <HAL_UART_RxCpltCallback+0x4d0>)
 80013b0:	f004 fad4 	bl	800595c <HAL_GPIO_WritePin>
             		   break;
 80013b4:	e002      	b.n	80013bc <HAL_UART_RxCpltCallback+0x354>
	  			  			 break;
 80013b6:	bf00      	nop
 80013b8:	e000      	b.n	80013bc <HAL_UART_RxCpltCallback+0x354>
	  			  break;
 80013ba:	bf00      	nop




  }
  if(huart->Instance == UART4)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a5e      	ldr	r2, [pc, #376]	; (800153c <HAL_UART_RxCpltCallback+0x4d4>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	f040 80af 	bne.w	8001526 <HAL_UART_RxCpltCallback+0x4be>
    {
	  HAL_UART_Receive_IT(&huart4, &data, 1);
 80013c8:	2201      	movs	r2, #1
 80013ca:	495d      	ldr	r1, [pc, #372]	; (8001540 <HAL_UART_RxCpltCallback+0x4d8>)
 80013cc:	485d      	ldr	r0, [pc, #372]	; (8001544 <HAL_UART_RxCpltCallback+0x4dc>)
 80013ce:	f006 fc8a 	bl	8007ce6 <HAL_UART_Receive_IT>

	  printf("%d -- %c \r\n", data,data);
 80013d2:	4b5b      	ldr	r3, [pc, #364]	; (8001540 <HAL_UART_RxCpltCallback+0x4d8>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	4619      	mov	r1, r3
 80013d8:	4b59      	ldr	r3, [pc, #356]	; (8001540 <HAL_UART_RxCpltCallback+0x4d8>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	485a      	ldr	r0, [pc, #360]	; (8001548 <HAL_UART_RxCpltCallback+0x4e0>)
 80013e0:	f008 fe34 	bl	800a04c <iprintf>
		switch(data)
 80013e4:	4b56      	ldr	r3, [pc, #344]	; (8001540 <HAL_UART_RxCpltCallback+0x4d8>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	3b21      	subs	r3, #33	; 0x21
 80013ea:	2b20      	cmp	r3, #32
 80013ec:	f200 809b 	bhi.w	8001526 <HAL_UART_RxCpltCallback+0x4be>
 80013f0:	a201      	add	r2, pc, #4	; (adr r2, 80013f8 <HAL_UART_RxCpltCallback+0x390>)
 80013f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013f6:	bf00      	nop
 80013f8:	08001509 	.word	0x08001509
 80013fc:	08001527 	.word	0x08001527
 8001400:	08001527 	.word	0x08001527
 8001404:	08001527 	.word	0x08001527
 8001408:	08001527 	.word	0x08001527
 800140c:	08001527 	.word	0x08001527
 8001410:	08001527 	.word	0x08001527
 8001414:	08001527 	.word	0x08001527
 8001418:	08001527 	.word	0x08001527
 800141c:	08001527 	.word	0x08001527
 8001420:	08001527 	.word	0x08001527
 8001424:	08001527 	.word	0x08001527
 8001428:	08001527 	.word	0x08001527
 800142c:	08001527 	.word	0x08001527
 8001430:	08001527 	.word	0x08001527
 8001434:	0800147d 	.word	0x0800147d
 8001438:	08001497 	.word	0x08001497
 800143c:	080014b1 	.word	0x080014b1
 8001440:	080014bf 	.word	0x080014bf
 8001444:	080014cd 	.word	0x080014cd
 8001448:	080014db 	.word	0x080014db
 800144c:	080014e9 	.word	0x080014e9
 8001450:	080014f7 	.word	0x080014f7
 8001454:	08001527 	.word	0x08001527
 8001458:	08001527 	.word	0x08001527
 800145c:	08001527 	.word	0x08001527
 8001460:	08001527 	.word	0x08001527
 8001464:	08001527 	.word	0x08001527
 8001468:	08001527 	.word	0x08001527
 800146c:	08001527 	.word	0x08001527
 8001470:	08001527 	.word	0x08001527
 8001474:	08001527 	.word	0x08001527
 8001478:	0800151f 	.word	0x0800151f
		{
		case '0':
			 GPIOB->ODR |= 1<<0;
 800147c:	4b33      	ldr	r3, [pc, #204]	; (800154c <HAL_UART_RxCpltCallback+0x4e4>)
 800147e:	695b      	ldr	r3, [r3, #20]
 8001480:	4a32      	ldr	r2, [pc, #200]	; (800154c <HAL_UART_RxCpltCallback+0x4e4>)
 8001482:	f043 0301 	orr.w	r3, r3, #1
 8001486:	6153      	str	r3, [r2, #20]
			GPIOG->ODR &= ~1<<0;// start
 8001488:	4b31      	ldr	r3, [pc, #196]	; (8001550 <HAL_UART_RxCpltCallback+0x4e8>)
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	4a30      	ldr	r2, [pc, #192]	; (8001550 <HAL_UART_RxCpltCallback+0x4e8>)
 800148e:	f023 0301 	bic.w	r3, r3, #1
 8001492:	6153      	str	r3, [r2, #20]

			break;
 8001494:	e047      	b.n	8001526 <HAL_UART_RxCpltCallback+0x4be>

		case '1':  //stop
			  GPIOB->ODR &= ~1<<0;
 8001496:	4b2d      	ldr	r3, [pc, #180]	; (800154c <HAL_UART_RxCpltCallback+0x4e4>)
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	4a2c      	ldr	r2, [pc, #176]	; (800154c <HAL_UART_RxCpltCallback+0x4e4>)
 800149c:	f023 0301 	bic.w	r3, r3, #1
 80014a0:	6153      	str	r3, [r2, #20]
	          GPIOG->ODR |= 1<<0;
 80014a2:	4b2b      	ldr	r3, [pc, #172]	; (8001550 <HAL_UART_RxCpltCallback+0x4e8>)
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	4a2a      	ldr	r2, [pc, #168]	; (8001550 <HAL_UART_RxCpltCallback+0x4e8>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	6153      	str	r3, [r2, #20]
			break;
 80014ae:	e03a      	b.n	8001526 <HAL_UART_RxCpltCallback+0x4be>

		case '2':  //dir
			  GPIOE->ODR |= 1<<0;  // back
 80014b0:	4b28      	ldr	r3, [pc, #160]	; (8001554 <HAL_UART_RxCpltCallback+0x4ec>)
 80014b2:	695b      	ldr	r3, [r3, #20]
 80014b4:	4a27      	ldr	r2, [pc, #156]	; (8001554 <HAL_UART_RxCpltCallback+0x4ec>)
 80014b6:	f043 0301 	orr.w	r3, r3, #1
 80014ba:	6153      	str	r3, [r2, #20]
			break;
 80014bc:	e033      	b.n	8001526 <HAL_UART_RxCpltCallback+0x4be>

		case '3'://dir
			 GPIOE->ODR &= ~1<<0; // go
 80014be:	4b25      	ldr	r3, [pc, #148]	; (8001554 <HAL_UART_RxCpltCallback+0x4ec>)
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	4a24      	ldr	r2, [pc, #144]	; (8001554 <HAL_UART_RxCpltCallback+0x4ec>)
 80014c4:	f023 0301 	bic.w	r3, r3, #1
 80014c8:	6153      	str	r3, [r2, #20]
			break;
 80014ca:	e02c      	b.n	8001526 <HAL_UART_RxCpltCallback+0x4be>

		case '4':

		    TIM3->CCR1 = 0;
 80014cc:	4b22      	ldr	r3, [pc, #136]	; (8001558 <HAL_UART_RxCpltCallback+0x4f0>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 0;
 80014d2:	4b21      	ldr	r3, [pc, #132]	; (8001558 <HAL_UART_RxCpltCallback+0x4f0>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	639a      	str	r2, [r3, #56]	; 0x38

			break;
 80014d8:	e025      	b.n	8001526 <HAL_UART_RxCpltCallback+0x4be>

		case '5':
			TIM3->CCR1 = 50;
 80014da:	4b1f      	ldr	r3, [pc, #124]	; (8001558 <HAL_UART_RxCpltCallback+0x4f0>)
 80014dc:	2232      	movs	r2, #50	; 0x32
 80014de:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 50;
 80014e0:	4b1d      	ldr	r3, [pc, #116]	; (8001558 <HAL_UART_RxCpltCallback+0x4f0>)
 80014e2:	2232      	movs	r2, #50	; 0x32
 80014e4:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 80014e6:	e01e      	b.n	8001526 <HAL_UART_RxCpltCallback+0x4be>

		case '6':
			TIM3->CCR1 = 200;
 80014e8:	4b1b      	ldr	r3, [pc, #108]	; (8001558 <HAL_UART_RxCpltCallback+0x4f0>)
 80014ea:	22c8      	movs	r2, #200	; 0xc8
 80014ec:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 200;
 80014ee:	4b1a      	ldr	r3, [pc, #104]	; (8001558 <HAL_UART_RxCpltCallback+0x4f0>)
 80014f0:	22c8      	movs	r2, #200	; 0xc8
 80014f2:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 80014f4:	e017      	b.n	8001526 <HAL_UART_RxCpltCallback+0x4be>

		case '7':
			TIM3->CCR1 = 1000;
 80014f6:	4b18      	ldr	r3, [pc, #96]	; (8001558 <HAL_UART_RxCpltCallback+0x4f0>)
 80014f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014fc:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 1000;
 80014fe:	4b16      	ldr	r3, [pc, #88]	; (8001558 <HAL_UART_RxCpltCallback+0x4f0>)
 8001500:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001504:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8001506:	e00e      	b.n	8001526 <HAL_UART_RxCpltCallback+0x4be>

		case '!':
			RX_flag=1;
 8001508:	4b14      	ldr	r3, [pc, #80]	; (800155c <HAL_UART_RxCpltCallback+0x4f4>)
 800150a:	2201      	movs	r2, #1
 800150c:	701a      	strb	r2, [r3, #0]
			 TIM2->CNT=0;
 800150e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001512:	2200      	movs	r2, #0
 8001514:	625a      	str	r2, [r3, #36]	; 0x24
			 TIM4->CNT=0;
 8001516:	4b12      	ldr	r3, [pc, #72]	; (8001560 <HAL_UART_RxCpltCallback+0x4f8>)
 8001518:	2200      	movs	r2, #0
 800151a:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 800151c:	e003      	b.n	8001526 <HAL_UART_RxCpltCallback+0x4be>
		case 'A':  //Tx

			RX_flag=2;
 800151e:	4b0f      	ldr	r3, [pc, #60]	; (800155c <HAL_UART_RxCpltCallback+0x4f4>)
 8001520:	2202      	movs	r2, #2
 8001522:	701a      	strb	r2, [r3, #0]
				break;
 8001524:	bf00      	nop



    }

}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000202 	.word	0x20000202
 8001534:	200003c8 	.word	0x200003c8
 8001538:	40021400 	.word	0x40021400
 800153c:	40004c00 	.word	0x40004c00
 8001540:	20000354 	.word	0x20000354
 8001544:	20000358 	.word	0x20000358
 8001548:	0800db2c 	.word	0x0800db2c
 800154c:	40020400 	.word	0x40020400
 8001550:	40021800 	.word	0x40021800
 8001554:	40021000 	.word	0x40021000
 8001558:	40000400 	.word	0x40000400
 800155c:	200003a0 	.word	0x200003a0
 8001560:	40000800 	.word	0x40000800

08001564 <microDelay>:

uint16_t delay_us =400;


void microDelay(uint16_t delay)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim6,0);
 800156e:	4b09      	ldr	r3, [pc, #36]	; (8001594 <microDelay+0x30>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2200      	movs	r2, #0
 8001574:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim6) < delay );
 8001576:	bf00      	nop
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <microDelay+0x30>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800157e:	88fb      	ldrh	r3, [r7, #6]
 8001580:	429a      	cmp	r2, r3
 8001582:	d3f9      	bcc.n	8001578 <microDelay+0x14>
}
 8001584:	bf00      	nop
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	200007bc 	.word	0x200007bc

08001598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800159c:	f002 fa0c 	bl	80039b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015a0:	f000 f964 	bl	800186c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015a4:	f000 fe54 	bl	8002250 <MX_GPIO_Init>
  MX_DMA_Init();
 80015a8:	f000 fe1c 	bl	80021e4 <MX_DMA_Init>
  MX_ETH_Init();
 80015ac:	f000 fa38 	bl	8001a20 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80015b0:	f000 fdc0 	bl	8002134 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80015b4:	f000 fde8 	bl	8002188 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 80015b8:	f000 fb28 	bl	8001c0c <MX_TIM3_Init>
  MX_TIM14_Init();
 80015bc:	f000 fd58 	bl	8002070 <MX_TIM14_Init>
  MX_TIM4_Init();
 80015c0:	f000 fbd4 	bl	8001d6c <MX_TIM4_Init>
  MX_UART4_Init();
 80015c4:	f000 fd8c 	bl	80020e0 <MX_UART4_Init>
  MX_TIM2_Init();
 80015c8:	f000 fac8 	bl	8001b5c <MX_TIM2_Init>
  MX_TIM8_Init();
 80015cc:	f000 fc60 	bl	8001e90 <MX_TIM8_Init>
  MX_TIM6_Init();
 80015d0:	f000 fc26 	bl	8001e20 <MX_TIM6_Init>
  MX_TIM13_Init();
 80015d4:	f000 fcfc 	bl	8001fd0 <MX_TIM13_Init>
  MX_TIM1_Init();
 80015d8:	f000 fa70 	bl	8001abc <MX_TIM1_Init>
  MX_ADC3_Init();
 80015dc:	f000 f9b0 	bl	8001940 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */


  HAL_UART_Receive_IT(&huart3, &key_value, 1);
 80015e0:	2201      	movs	r2, #1
 80015e2:	4985      	ldr	r1, [pc, #532]	; (80017f8 <main+0x260>)
 80015e4:	4885      	ldr	r0, [pc, #532]	; (80017fc <main+0x264>)
 80015e6:	f006 fb7e 	bl	8007ce6 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart4, &data, 1);
 80015ea:	2201      	movs	r2, #1
 80015ec:	4984      	ldr	r1, [pc, #528]	; (8001800 <main+0x268>)
 80015ee:	4885      	ldr	r0, [pc, #532]	; (8001804 <main+0x26c>)
 80015f0:	f006 fb79 	bl	8007ce6 <HAL_UART_Receive_IT>


  HAL_ADC_Start_DMA(&hadc3, (uint32_t*)ADC3_value, 3);
 80015f4:	2203      	movs	r2, #3
 80015f6:	4984      	ldr	r1, [pc, #528]	; (8001808 <main+0x270>)
 80015f8:	4884      	ldr	r0, [pc, #528]	; (800180c <main+0x274>)
 80015fa:	f002 fbc7 	bl	8003d8c <HAL_ADC_Start_DMA>




   HAL_TIM_Base_Start_IT(&htim6);
 80015fe:	4884      	ldr	r0, [pc, #528]	; (8001810 <main+0x278>)
 8001600:	f005 f824 	bl	800664c <HAL_TIM_Base_Start_IT>


   HAL_TIM_Base_Start(&htim1);
 8001604:	4883      	ldr	r0, [pc, #524]	; (8001814 <main+0x27c>)
 8001606:	f004 ffb9 	bl	800657c <HAL_TIM_Base_Start>
   setvbuf(stdin, NULL, _IONBF, 0);
 800160a:	4b83      	ldr	r3, [pc, #524]	; (8001818 <main+0x280>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	6858      	ldr	r0, [r3, #4]
 8001610:	2300      	movs	r3, #0
 8001612:	2202      	movs	r2, #2
 8001614:	2100      	movs	r1, #0
 8001616:	f008 fd2b 	bl	800a070 <setvbuf>
    /* USER CODE BEGIN 3 */




	  if(step_enable==1)
 800161a:	4b80      	ldr	r3, [pc, #512]	; (800181c <main+0x284>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d149      	bne.n	80016b6 <main+0x11e>
	  {
		 // step_motor();

		   for(step_count=0; step_count<40000; step_count++) //40000은 별 의미 없음
 8001622:	4b7f      	ldr	r3, [pc, #508]	; (8001820 <main+0x288>)
 8001624:	2200      	movs	r2, #0
 8001626:	801a      	strh	r2, [r3, #0]
 8001628:	e03f      	b.n	80016aa <main+0x112>
	     {
	     HAL_GPIO_WritePin(GPIOF,  GPIO_PIN_15, 0);  //펄스
 800162a:	2200      	movs	r2, #0
 800162c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001630:	487c      	ldr	r0, [pc, #496]	; (8001824 <main+0x28c>)
 8001632:	f004 f993 	bl	800595c <HAL_GPIO_WritePin>
	     microDelay(delay_us);
 8001636:	4b7c      	ldr	r3, [pc, #496]	; (8001828 <main+0x290>)
 8001638:	881b      	ldrh	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff ff92 	bl	8001564 <microDelay>
	     HAL_GPIO_WritePin(GPIOF,  GPIO_PIN_15, 1);
 8001640:	2201      	movs	r2, #1
 8001642:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001646:	4877      	ldr	r0, [pc, #476]	; (8001824 <main+0x28c>)
 8001648:	f004 f988 	bl	800595c <HAL_GPIO_WritePin>
	     microDelay(delay_us);
 800164c:	4b76      	ldr	r3, [pc, #472]	; (8001828 <main+0x290>)
 800164e:	881b      	ldrh	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff ff87 	bl	8001564 <microDelay>
	     if(step_count==200*10 && rev10_flag==1)  //10회전 정지
 8001656:	4b72      	ldr	r3, [pc, #456]	; (8001820 <main+0x288>)
 8001658:	881b      	ldrh	r3, [r3, #0]
 800165a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800165e:	d10d      	bne.n	800167c <main+0xe4>
 8001660:	4b72      	ldr	r3, [pc, #456]	; (800182c <main+0x294>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d109      	bne.n	800167c <main+0xe4>
	     {
	    	 HAL_GPIO_WritePin(GPIOF,  GPIO_PIN_13, 1);  //정지
 8001668:	2201      	movs	r2, #1
 800166a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800166e:	486d      	ldr	r0, [pc, #436]	; (8001824 <main+0x28c>)
 8001670:	f004 f974 	bl	800595c <HAL_GPIO_WritePin>
	    	 rev10_flag=0;
 8001674:	4b6d      	ldr	r3, [pc, #436]	; (800182c <main+0x294>)
 8001676:	2200      	movs	r2, #0
 8001678:	701a      	strb	r2, [r3, #0]
 800167a:	e010      	b.n	800169e <main+0x106>
	     }
	     else if(step_count==200*1 && rev1_flag==1) //1회전 정지
 800167c:	4b68      	ldr	r3, [pc, #416]	; (8001820 <main+0x288>)
 800167e:	881b      	ldrh	r3, [r3, #0]
 8001680:	2bc8      	cmp	r3, #200	; 0xc8
 8001682:	d10c      	bne.n	800169e <main+0x106>
 8001684:	4b6a      	ldr	r3, [pc, #424]	; (8001830 <main+0x298>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d108      	bne.n	800169e <main+0x106>
	     {
	      	 HAL_GPIO_WritePin(GPIOF,  GPIO_PIN_13, 1);  //정지
 800168c:	2201      	movs	r2, #1
 800168e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001692:	4864      	ldr	r0, [pc, #400]	; (8001824 <main+0x28c>)
 8001694:	f004 f962 	bl	800595c <HAL_GPIO_WritePin>
	      	 rev1_flag=0;
 8001698:	4b65      	ldr	r3, [pc, #404]	; (8001830 <main+0x298>)
 800169a:	2200      	movs	r2, #0
 800169c:	701a      	strb	r2, [r3, #0]
		   for(step_count=0; step_count<40000; step_count++) //40000은 별 의미 없음
 800169e:	4b60      	ldr	r3, [pc, #384]	; (8001820 <main+0x288>)
 80016a0:	881b      	ldrh	r3, [r3, #0]
 80016a2:	3301      	adds	r3, #1
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	4b5e      	ldr	r3, [pc, #376]	; (8001820 <main+0x288>)
 80016a8:	801a      	strh	r2, [r3, #0]
 80016aa:	4b5d      	ldr	r3, [pc, #372]	; (8001820 <main+0x288>)
 80016ac:	881b      	ldrh	r3, [r3, #0]
 80016ae:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d9b9      	bls.n	800162a <main+0x92>
	    }
	  }



	  if(tim6_flag==1)
 80016b6:	4b5f      	ldr	r3, [pc, #380]	; (8001834 <main+0x29c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d104      	bne.n	80016c8 <main+0x130>
	  {
		  distance_sensor();  //거리 센서
 80016be:	f001 f833 	bl	8002728 <distance_sensor>

	       tim6_flag=0;
 80016c2:	4b5c      	ldr	r3, [pc, #368]	; (8001834 <main+0x29c>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
	  }
	  if(tim14_flag==20) //2초
 80016c8:	4b5b      	ldr	r3, [pc, #364]	; (8001838 <main+0x2a0>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2b14      	cmp	r3, #20
 80016ce:	d14f      	bne.n	8001770 <main+0x1d8>
	  {
		  //  RPM_uint16=RPM*100;    // float를 uint로 변경
		  RPM_uint16=ADC3_value[0]*10;  //나중에 rpm으로 변경
 80016d0:	4b4d      	ldr	r3, [pc, #308]	; (8001808 <main+0x270>)
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	461a      	mov	r2, r3
 80016d6:	0092      	lsls	r2, r2, #2
 80016d8:	4413      	add	r3, r2
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	b29a      	uxth	r2, r3
 80016de:	4b57      	ldr	r3, [pc, #348]	; (800183c <main+0x2a4>)
 80016e0:	801a      	strh	r2, [r3, #0]
		  battery_uint16 = battery_V*100;
 80016e2:	4b57      	ldr	r3, [pc, #348]	; (8001840 <main+0x2a8>)
 80016e4:	edd3 7a00 	vldr	s15, [r3]
 80016e8:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001844 <main+0x2ac>
 80016ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016f4:	ee17 3a90 	vmov	r3, s15
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	4b53      	ldr	r3, [pc, #332]	; (8001848 <main+0x2b0>)
 80016fc:	801a      	strh	r2, [r3, #0]
	/*	    ENC[3]=RPM_uint16 / 1000;		// 10000 ?���???????????????????????????????????????
    	    ENC[2]=RPM_uint16 % 1000/100;	// 1000 ?���???????????????????????????????????????
			ENC[1]= RPM_uint16 % 100/10;	// 100 ?���???????????????????????????????????????
		 	ENC[0]=RPM_uint16 % 10/1;		// 10 ?���???????????????????????????????????????
*/
		   	SerialSendChar_WIFI('?');
 80016fe:	203f      	movs	r0, #63	; 0x3f
 8001700:	f7ff fc9a 	bl	8001038 <SerialSendChar_WIFI>
  	 sprintf((char *)buffer, "%d \r\n",RPM_uint16);
  	HAL_UART_Transmit(&huart3, buffer, strlen((char *)buffer), 100);
*/

//배터리, 속도 전송
	  sprintf((char *)buffer, "%d",battery_uint16);
 8001704:	4b50      	ldr	r3, [pc, #320]	; (8001848 <main+0x2b0>)
 8001706:	881b      	ldrh	r3, [r3, #0]
 8001708:	461a      	mov	r2, r3
 800170a:	4950      	ldr	r1, [pc, #320]	; (800184c <main+0x2b4>)
 800170c:	4850      	ldr	r0, [pc, #320]	; (8001850 <main+0x2b8>)
 800170e:	f008 fd5d 	bl	800a1cc <siprintf>
	HAL_UART_Transmit(&huart4, buffer, strlen((char *)buffer), 100);
 8001712:	484f      	ldr	r0, [pc, #316]	; (8001850 <main+0x2b8>)
 8001714:	f7fe fdbc 	bl	8000290 <strlen>
 8001718:	4603      	mov	r3, r0
 800171a:	b29a      	uxth	r2, r3
 800171c:	2364      	movs	r3, #100	; 0x64
 800171e:	494c      	ldr	r1, [pc, #304]	; (8001850 <main+0x2b8>)
 8001720:	4838      	ldr	r0, [pc, #224]	; (8001804 <main+0x26c>)
 8001722:	f006 fa55 	bl	8007bd0 <HAL_UART_Transmit>
  	sprintf((char *)buffer, "%d",RPM_uint16);
 8001726:	4b45      	ldr	r3, [pc, #276]	; (800183c <main+0x2a4>)
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	461a      	mov	r2, r3
 800172c:	4947      	ldr	r1, [pc, #284]	; (800184c <main+0x2b4>)
 800172e:	4848      	ldr	r0, [pc, #288]	; (8001850 <main+0x2b8>)
 8001730:	f008 fd4c 	bl	800a1cc <siprintf>
  	HAL_UART_Transmit(&huart4, buffer, strlen((char *)buffer), 100);
 8001734:	4846      	ldr	r0, [pc, #280]	; (8001850 <main+0x2b8>)
 8001736:	f7fe fdab 	bl	8000290 <strlen>
 800173a:	4603      	mov	r3, r0
 800173c:	b29a      	uxth	r2, r3
 800173e:	2364      	movs	r3, #100	; 0x64
 8001740:	4943      	ldr	r1, [pc, #268]	; (8001850 <main+0x2b8>)
 8001742:	4830      	ldr	r0, [pc, #192]	; (8001804 <main+0x26c>)
 8001744:	f006 fa44 	bl	8007bd0 <HAL_UART_Transmit>
  	  sprintf((char *)buffer, "%d",battery_uint16);
 8001748:	4b3f      	ldr	r3, [pc, #252]	; (8001848 <main+0x2b0>)
 800174a:	881b      	ldrh	r3, [r3, #0]
 800174c:	461a      	mov	r2, r3
 800174e:	493f      	ldr	r1, [pc, #252]	; (800184c <main+0x2b4>)
 8001750:	483f      	ldr	r0, [pc, #252]	; (8001850 <main+0x2b8>)
 8001752:	f008 fd3b 	bl	800a1cc <siprintf>
  	HAL_UART_Transmit(&huart4, buffer, strlen((char *)buffer), 100);
 8001756:	483e      	ldr	r0, [pc, #248]	; (8001850 <main+0x2b8>)
 8001758:	f7fe fd9a 	bl	8000290 <strlen>
 800175c:	4603      	mov	r3, r0
 800175e:	b29a      	uxth	r2, r3
 8001760:	2364      	movs	r3, #100	; 0x64
 8001762:	493b      	ldr	r1, [pc, #236]	; (8001850 <main+0x2b8>)
 8001764:	4827      	ldr	r0, [pc, #156]	; (8001804 <main+0x26c>)
 8001766:	f006 fa33 	bl	8007bd0 <HAL_UART_Transmit>

	 	 //  	  HAL_Delay(2000);

		  tim14_flag=0;
 800176a:	4b33      	ldr	r3, [pc, #204]	; (8001838 <main+0x2a0>)
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
	  }
	  if(tim13_flag==1)
 8001770:	4b38      	ldr	r3, [pc, #224]	; (8001854 <main+0x2bc>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d108      	bne.n	800178a <main+0x1f2>
	  {
		  if(position_start==1)
 8001778:	4b37      	ldr	r3, [pc, #220]	; (8001858 <main+0x2c0>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d104      	bne.n	800178a <main+0x1f2>
		  	{
			  position_pid();
 8001780:	f000 fe92 	bl	80024a8 <position_pid>

			  tim13_flag=0;
 8001784:	4b33      	ldr	r3, [pc, #204]	; (8001854 <main+0x2bc>)
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]





	  if(RX_flag==1)
 800178a:	4b34      	ldr	r3, [pc, #208]	; (800185c <main+0x2c4>)
 800178c:	f993 3000 	ldrsb.w	r3, [r3]
 8001790:	2b01      	cmp	r3, #1
 8001792:	f47f af42 	bne.w	800161a <main+0x82>
	  {
		 // RX_flag=0;
		//  TIM4->CNT=0;
	  	 		TIM3->CCR1 = 1000;
 8001796:	4b32      	ldr	r3, [pc, #200]	; (8001860 <main+0x2c8>)
 8001798:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800179c:	635a      	str	r2, [r3, #52]	; 0x34
	  	 		TIM3->CCR2 = 1000;
 800179e:	4b30      	ldr	r3, [pc, #192]	; (8001860 <main+0x2c8>)
 80017a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017a4:	639a      	str	r2, [r3, #56]	; 0x38
	  	 			if(encoder_count>=1200)
 80017a6:	4b2f      	ldr	r3, [pc, #188]	; (8001864 <main+0x2cc>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80017ae:	f4ff af34 	bcc.w	800161a <main+0x82>
	  		 		{
	  	 				TIM3->CCR1 = 50;
 80017b2:	4b2b      	ldr	r3, [pc, #172]	; (8001860 <main+0x2c8>)
 80017b4:	2232      	movs	r2, #50	; 0x32
 80017b6:	635a      	str	r2, [r3, #52]	; 0x34

	  	 				GPIOG->ODR |= 1<<0;
 80017b8:	4b2b      	ldr	r3, [pc, #172]	; (8001868 <main+0x2d0>)
 80017ba:	695b      	ldr	r3, [r3, #20]
 80017bc:	4a2a      	ldr	r2, [pc, #168]	; (8001868 <main+0x2d0>)
 80017be:	f043 0301 	orr.w	r3, r3, #1
 80017c2:	6153      	str	r3, [r2, #20]
	  	 				HAL_Delay(100);
 80017c4:	2064      	movs	r0, #100	; 0x64
 80017c6:	f002 f969 	bl	8003a9c <HAL_Delay>
	  	 				GPIOG->ODR &= ~1<<0;
 80017ca:	4b27      	ldr	r3, [pc, #156]	; (8001868 <main+0x2d0>)
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	4a26      	ldr	r2, [pc, #152]	; (8001868 <main+0x2d0>)
 80017d0:	f023 0301 	bic.w	r3, r3, #1
 80017d4:	6153      	str	r3, [r2, #20]
	  	 				TIM3->CCR1 = 50;
 80017d6:	4b22      	ldr	r3, [pc, #136]	; (8001860 <main+0x2c8>)
 80017d8:	2232      	movs	r2, #50	; 0x32
 80017da:	635a      	str	r2, [r3, #52]	; 0x34
	  	 				if(encoder_count>=512*3)
 80017dc:	4b21      	ldr	r3, [pc, #132]	; (8001864 <main+0x2cc>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80017e4:	f4ff af19 	bcc.w	800161a <main+0x82>
	  	 				{
	  	 					TIM3->CCR1 = 0;
 80017e8:	4b1d      	ldr	r3, [pc, #116]	; (8001860 <main+0x2c8>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	635a      	str	r2, [r3, #52]	; 0x34
	  	 					RX_flag=0;
 80017ee:	4b1b      	ldr	r3, [pc, #108]	; (800185c <main+0x2c4>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	701a      	strb	r2, [r3, #0]
	  if(step_enable==1)
 80017f4:	e711      	b.n	800161a <main+0x82>
 80017f6:	bf00      	nop
 80017f8:	20000308 	.word	0x20000308
 80017fc:	2000030c 	.word	0x2000030c
 8001800:	20000354 	.word	0x20000354
 8001804:	20000358 	.word	0x20000358
 8001808:	200003bc 	.word	0x200003bc
 800180c:	20000544 	.word	0x20000544
 8001810:	200007bc 	.word	0x200007bc
 8001814:	2000069c 	.word	0x2000069c
 8001818:	2000006c 	.word	0x2000006c
 800181c:	20000204 	.word	0x20000204
 8001820:	200003c8 	.word	0x200003c8
 8001824:	40021400 	.word	0x40021400
 8001828:	20000004 	.word	0x20000004
 800182c:	20000201 	.word	0x20000201
 8001830:	20000202 	.word	0x20000202
 8001834:	20000e98 	.word	0x20000e98
 8001838:	20000e9c 	.word	0x20000e9c
 800183c:	200003b4 	.word	0x200003b4
 8001840:	20000e88 	.word	0x20000e88
 8001844:	42c80000 	.word	0x42c80000
 8001848:	200003b6 	.word	0x200003b6
 800184c:	0800db38 	.word	0x0800db38
 8001850:	20000208 	.word	0x20000208
 8001854:	20000ea0 	.word	0x20000ea0
 8001858:	200001fc 	.word	0x200001fc
 800185c:	200003a0 	.word	0x200003a0
 8001860:	40000400 	.word	0x40000400
 8001864:	20000000 	.word	0x20000000
 8001868:	40021800 	.word	0x40021800

0800186c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b094      	sub	sp, #80	; 0x50
 8001870:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001872:	f107 0320 	add.w	r3, r7, #32
 8001876:	2230      	movs	r2, #48	; 0x30
 8001878:	2100      	movs	r1, #0
 800187a:	4618      	mov	r0, r3
 800187c:	f008 fd09 	bl	800a292 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001880:	f107 030c 	add.w	r3, r7, #12
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001890:	2300      	movs	r3, #0
 8001892:	60bb      	str	r3, [r7, #8]
 8001894:	4b28      	ldr	r3, [pc, #160]	; (8001938 <SystemClock_Config+0xcc>)
 8001896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001898:	4a27      	ldr	r2, [pc, #156]	; (8001938 <SystemClock_Config+0xcc>)
 800189a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800189e:	6413      	str	r3, [r2, #64]	; 0x40
 80018a0:	4b25      	ldr	r3, [pc, #148]	; (8001938 <SystemClock_Config+0xcc>)
 80018a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a8:	60bb      	str	r3, [r7, #8]
 80018aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018ac:	2300      	movs	r3, #0
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	4b22      	ldr	r3, [pc, #136]	; (800193c <SystemClock_Config+0xd0>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a21      	ldr	r2, [pc, #132]	; (800193c <SystemClock_Config+0xd0>)
 80018b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018ba:	6013      	str	r3, [r2, #0]
 80018bc:	4b1f      	ldr	r3, [pc, #124]	; (800193c <SystemClock_Config+0xd0>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018c4:	607b      	str	r3, [r7, #4]
 80018c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018c8:	2301      	movs	r3, #1
 80018ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80018cc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018d2:	2302      	movs	r3, #2
 80018d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018dc:	2304      	movs	r3, #4
 80018de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80018e0:	23a8      	movs	r3, #168	; 0xa8
 80018e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018e4:	2302      	movs	r3, #2
 80018e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80018e8:	2307      	movs	r3, #7
 80018ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018ec:	f107 0320 	add.w	r3, r7, #32
 80018f0:	4618      	mov	r0, r3
 80018f2:	f004 f95b 	bl	8005bac <HAL_RCC_OscConfig>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80018fc:	f000 fdcc 	bl	8002498 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001900:	230f      	movs	r3, #15
 8001902:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001904:	2302      	movs	r3, #2
 8001906:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800190c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001910:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001912:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001916:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001918:	f107 030c 	add.w	r3, r7, #12
 800191c:	2105      	movs	r1, #5
 800191e:	4618      	mov	r0, r3
 8001920:	f004 fbbc 	bl	800609c <HAL_RCC_ClockConfig>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800192a:	f000 fdb5 	bl	8002498 <Error_Handler>
  }
}
 800192e:	bf00      	nop
 8001930:	3750      	adds	r7, #80	; 0x50
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40023800 	.word	0x40023800
 800193c:	40007000 	.word	0x40007000

08001940 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001946:	463b      	mov	r3, r7
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001952:	4b31      	ldr	r3, [pc, #196]	; (8001a18 <MX_ADC3_Init+0xd8>)
 8001954:	4a31      	ldr	r2, [pc, #196]	; (8001a1c <MX_ADC3_Init+0xdc>)
 8001956:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001958:	4b2f      	ldr	r3, [pc, #188]	; (8001a18 <MX_ADC3_Init+0xd8>)
 800195a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800195e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_10B;
 8001960:	4b2d      	ldr	r3, [pc, #180]	; (8001a18 <MX_ADC3_Init+0xd8>)
 8001962:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001966:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 8001968:	4b2b      	ldr	r3, [pc, #172]	; (8001a18 <MX_ADC3_Init+0xd8>)
 800196a:	2201      	movs	r2, #1
 800196c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800196e:	4b2a      	ldr	r3, [pc, #168]	; (8001a18 <MX_ADC3_Init+0xd8>)
 8001970:	2200      	movs	r2, #0
 8001972:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001974:	4b28      	ldr	r3, [pc, #160]	; (8001a18 <MX_ADC3_Init+0xd8>)
 8001976:	2200      	movs	r2, #0
 8001978:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800197c:	4b26      	ldr	r3, [pc, #152]	; (8001a18 <MX_ADC3_Init+0xd8>)
 800197e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001982:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8001984:	4b24      	ldr	r3, [pc, #144]	; (8001a18 <MX_ADC3_Init+0xd8>)
 8001986:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800198a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800198c:	4b22      	ldr	r3, [pc, #136]	; (8001a18 <MX_ADC3_Init+0xd8>)
 800198e:	2200      	movs	r2, #0
 8001990:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 3;
 8001992:	4b21      	ldr	r3, [pc, #132]	; (8001a18 <MX_ADC3_Init+0xd8>)
 8001994:	2203      	movs	r2, #3
 8001996:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001998:	4b1f      	ldr	r3, [pc, #124]	; (8001a18 <MX_ADC3_Init+0xd8>)
 800199a:	2201      	movs	r2, #1
 800199c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019a0:	4b1d      	ldr	r3, [pc, #116]	; (8001a18 <MX_ADC3_Init+0xd8>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80019a6:	481c      	ldr	r0, [pc, #112]	; (8001a18 <MX_ADC3_Init+0xd8>)
 80019a8:	f002 f89c 	bl	8003ae4 <HAL_ADC_Init>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_ADC3_Init+0x76>
  {
    Error_Handler();
 80019b2:	f000 fd71 	bl	8002498 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80019b6:	230c      	movs	r3, #12
 80019b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80019ba:	2301      	movs	r3, #1
 80019bc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80019be:	2307      	movs	r3, #7
 80019c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80019c2:	463b      	mov	r3, r7
 80019c4:	4619      	mov	r1, r3
 80019c6:	4814      	ldr	r0, [pc, #80]	; (8001a18 <MX_ADC3_Init+0xd8>)
 80019c8:	f002 fb0e 	bl	8003fe8 <HAL_ADC_ConfigChannel>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 80019d2:	f000 fd61 	bl	8002498 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80019d6:	230d      	movs	r3, #13
 80019d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80019da:	2302      	movs	r3, #2
 80019dc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80019de:	463b      	mov	r3, r7
 80019e0:	4619      	mov	r1, r3
 80019e2:	480d      	ldr	r0, [pc, #52]	; (8001a18 <MX_ADC3_Init+0xd8>)
 80019e4:	f002 fb00 	bl	8003fe8 <HAL_ADC_ConfigChannel>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80019ee:	f000 fd53 	bl	8002498 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80019f2:	230e      	movs	r3, #14
 80019f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80019f6:	2303      	movs	r3, #3
 80019f8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80019fa:	463b      	mov	r3, r7
 80019fc:	4619      	mov	r1, r3
 80019fe:	4806      	ldr	r0, [pc, #24]	; (8001a18 <MX_ADC3_Init+0xd8>)
 8001a00:	f002 faf2 	bl	8003fe8 <HAL_ADC_ConfigChannel>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 8001a0a:	f000 fd45 	bl	8002498 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000544 	.word	0x20000544
 8001a1c:	40012200 	.word	0x40012200

08001a20 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001a24:	4b1f      	ldr	r3, [pc, #124]	; (8001aa4 <MX_ETH_Init+0x84>)
 8001a26:	4a20      	ldr	r2, [pc, #128]	; (8001aa8 <MX_ETH_Init+0x88>)
 8001a28:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001a2a:	4b20      	ldr	r3, [pc, #128]	; (8001aac <MX_ETH_Init+0x8c>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001a30:	4b1e      	ldr	r3, [pc, #120]	; (8001aac <MX_ETH_Init+0x8c>)
 8001a32:	2280      	movs	r2, #128	; 0x80
 8001a34:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001a36:	4b1d      	ldr	r3, [pc, #116]	; (8001aac <MX_ETH_Init+0x8c>)
 8001a38:	22e1      	movs	r2, #225	; 0xe1
 8001a3a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001a3c:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <MX_ETH_Init+0x8c>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001a42:	4b1a      	ldr	r3, [pc, #104]	; (8001aac <MX_ETH_Init+0x8c>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001a48:	4b18      	ldr	r3, [pc, #96]	; (8001aac <MX_ETH_Init+0x8c>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001a4e:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <MX_ETH_Init+0x84>)
 8001a50:	4a16      	ldr	r2, [pc, #88]	; (8001aac <MX_ETH_Init+0x8c>)
 8001a52:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001a54:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <MX_ETH_Init+0x84>)
 8001a56:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001a5a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001a5c:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <MX_ETH_Init+0x84>)
 8001a5e:	4a14      	ldr	r2, [pc, #80]	; (8001ab0 <MX_ETH_Init+0x90>)
 8001a60:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001a62:	4b10      	ldr	r3, [pc, #64]	; (8001aa4 <MX_ETH_Init+0x84>)
 8001a64:	4a13      	ldr	r2, [pc, #76]	; (8001ab4 <MX_ETH_Init+0x94>)
 8001a66:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001a68:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <MX_ETH_Init+0x84>)
 8001a6a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001a6e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001a70:	480c      	ldr	r0, [pc, #48]	; (8001aa4 <MX_ETH_Init+0x84>)
 8001a72:	f003 fa87 	bl	8004f84 <HAL_ETH_Init>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001a7c:	f000 fd0c 	bl	8002498 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001a80:	2238      	movs	r2, #56	; 0x38
 8001a82:	2100      	movs	r1, #0
 8001a84:	480c      	ldr	r0, [pc, #48]	; (8001ab8 <MX_ETH_Init+0x98>)
 8001a86:	f008 fc04 	bl	800a292 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001a8a:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <MX_ETH_Init+0x98>)
 8001a8c:	2221      	movs	r2, #33	; 0x21
 8001a8e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001a90:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <MX_ETH_Init+0x98>)
 8001a92:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001a96:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001a98:	4b07      	ldr	r3, [pc, #28]	; (8001ab8 <MX_ETH_Init+0x98>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	200005ec 	.word	0x200005ec
 8001aa8:	40028000 	.word	0x40028000
 8001aac:	20000e20 	.word	0x20000e20
 8001ab0:	200004a4 	.word	0x200004a4
 8001ab4:	20000404 	.word	0x20000404
 8001ab8:	200003cc 	.word	0x200003cc

08001abc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ac2:	f107 0308 	add.w	r3, r7, #8
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	605a      	str	r2, [r3, #4]
 8001acc:	609a      	str	r2, [r3, #8]
 8001ace:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad0:	463b      	mov	r3, r7
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ad8:	4b1e      	ldr	r3, [pc, #120]	; (8001b54 <MX_TIM1_Init+0x98>)
 8001ada:	4a1f      	ldr	r2, [pc, #124]	; (8001b58 <MX_TIM1_Init+0x9c>)
 8001adc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001ade:	4b1d      	ldr	r3, [pc, #116]	; (8001b54 <MX_TIM1_Init+0x98>)
 8001ae0:	2253      	movs	r2, #83	; 0x53
 8001ae2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae4:	4b1b      	ldr	r3, [pc, #108]	; (8001b54 <MX_TIM1_Init+0x98>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001aea:	4b1a      	ldr	r3, [pc, #104]	; (8001b54 <MX_TIM1_Init+0x98>)
 8001aec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001af0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001af2:	4b18      	ldr	r3, [pc, #96]	; (8001b54 <MX_TIM1_Init+0x98>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001af8:	4b16      	ldr	r3, [pc, #88]	; (8001b54 <MX_TIM1_Init+0x98>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001afe:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <MX_TIM1_Init+0x98>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b04:	4813      	ldr	r0, [pc, #76]	; (8001b54 <MX_TIM1_Init+0x98>)
 8001b06:	f004 fce9 	bl	80064dc <HAL_TIM_Base_Init>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001b10:	f000 fcc2 	bl	8002498 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b1a:	f107 0308 	add.w	r3, r7, #8
 8001b1e:	4619      	mov	r1, r3
 8001b20:	480c      	ldr	r0, [pc, #48]	; (8001b54 <MX_TIM1_Init+0x98>)
 8001b22:	f005 fb0d 	bl	8007140 <HAL_TIM_ConfigClockSource>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001b2c:	f000 fcb4 	bl	8002498 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b30:	2300      	movs	r3, #0
 8001b32:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b34:	2300      	movs	r3, #0
 8001b36:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b38:	463b      	mov	r3, r7
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4805      	ldr	r0, [pc, #20]	; (8001b54 <MX_TIM1_Init+0x98>)
 8001b3e:	f005 ff15 	bl	800796c <HAL_TIMEx_MasterConfigSynchronization>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001b48:	f000 fca6 	bl	8002498 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b4c:	bf00      	nop
 8001b4e:	3718      	adds	r7, #24
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	2000069c 	.word	0x2000069c
 8001b58:	40010000 	.word	0x40010000

08001b5c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08c      	sub	sp, #48	; 0x30
 8001b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b62:	f107 030c 	add.w	r3, r7, #12
 8001b66:	2224      	movs	r2, #36	; 0x24
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f008 fb91 	bl	800a292 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b70:	1d3b      	adds	r3, r7, #4
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b78:	4b23      	ldr	r3, [pc, #140]	; (8001c08 <MX_TIM2_Init+0xac>)
 8001b7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 340;
 8001b80:	4b21      	ldr	r3, [pc, #132]	; (8001c08 <MX_TIM2_Init+0xac>)
 8001b82:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8001b86:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b88:	4b1f      	ldr	r3, [pc, #124]	; (8001c08 <MX_TIM2_Init+0xac>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65000;
 8001b8e:	4b1e      	ldr	r3, [pc, #120]	; (8001c08 <MX_TIM2_Init+0xac>)
 8001b90:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001b94:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b96:	4b1c      	ldr	r3, [pc, #112]	; (8001c08 <MX_TIM2_Init+0xac>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b9c:	4b1a      	ldr	r3, [pc, #104]	; (8001c08 <MX_TIM2_Init+0xac>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001baa:	2301      	movs	r3, #1
 8001bac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001bc6:	f107 030c 	add.w	r3, r7, #12
 8001bca:	4619      	mov	r1, r3
 8001bcc:	480e      	ldr	r0, [pc, #56]	; (8001c08 <MX_TIM2_Init+0xac>)
 8001bce:	f004 ff75 	bl	8006abc <HAL_TIM_Encoder_Init>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001bd8:	f000 fc5e 	bl	8002498 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be0:	2300      	movs	r3, #0
 8001be2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001be4:	1d3b      	adds	r3, r7, #4
 8001be6:	4619      	mov	r1, r3
 8001be8:	4807      	ldr	r0, [pc, #28]	; (8001c08 <MX_TIM2_Init+0xac>)
 8001bea:	f005 febf 	bl	800796c <HAL_TIMEx_MasterConfigSynchronization>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001bf4:	f000 fc50 	bl	8002498 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001bf8:	213c      	movs	r1, #60	; 0x3c
 8001bfa:	4803      	ldr	r0, [pc, #12]	; (8001c08 <MX_TIM2_Init+0xac>)
 8001bfc:	f005 f804 	bl	8006c08 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM2_Init 2 */

}
 8001c00:	bf00      	nop
 8001c02:	3730      	adds	r7, #48	; 0x30
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	200006e4 	.word	0x200006e4

08001c0c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08e      	sub	sp, #56	; 0x38
 8001c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	605a      	str	r2, [r3, #4]
 8001c1c:	609a      	str	r2, [r3, #8]
 8001c1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c20:	f107 0320 	add.w	r3, r7, #32
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c2a:	1d3b      	adds	r3, r7, #4
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]
 8001c38:	615a      	str	r2, [r3, #20]
 8001c3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c3c:	4b48      	ldr	r3, [pc, #288]	; (8001d60 <MX_TIM3_Init+0x154>)
 8001c3e:	4a49      	ldr	r2, [pc, #292]	; (8001d64 <MX_TIM3_Init+0x158>)
 8001c40:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 840-1;
 8001c42:	4b47      	ldr	r3, [pc, #284]	; (8001d60 <MX_TIM3_Init+0x154>)
 8001c44:	f240 3247 	movw	r2, #839	; 0x347
 8001c48:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c4a:	4b45      	ldr	r3, [pc, #276]	; (8001d60 <MX_TIM3_Init+0x154>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001c50:	4b43      	ldr	r3, [pc, #268]	; (8001d60 <MX_TIM3_Init+0x154>)
 8001c52:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c56:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c58:	4b41      	ldr	r3, [pc, #260]	; (8001d60 <MX_TIM3_Init+0x154>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c5e:	4b40      	ldr	r3, [pc, #256]	; (8001d60 <MX_TIM3_Init+0x154>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c64:	483e      	ldr	r0, [pc, #248]	; (8001d60 <MX_TIM3_Init+0x154>)
 8001c66:	f004 fc39 	bl	80064dc <HAL_TIM_Base_Init>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001c70:	f000 fc12 	bl	8002498 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c78:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4837      	ldr	r0, [pc, #220]	; (8001d60 <MX_TIM3_Init+0x154>)
 8001c82:	f005 fa5d 	bl	8007140 <HAL_TIM_ConfigClockSource>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001c8c:	f000 fc04 	bl	8002498 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c90:	4833      	ldr	r0, [pc, #204]	; (8001d60 <MX_TIM3_Init+0x154>)
 8001c92:	f004 fda4 	bl	80067de <HAL_TIM_PWM_Init>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001c9c:	f000 fbfc 	bl	8002498 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ca8:	f107 0320 	add.w	r3, r7, #32
 8001cac:	4619      	mov	r1, r3
 8001cae:	482c      	ldr	r0, [pc, #176]	; (8001d60 <MX_TIM3_Init+0x154>)
 8001cb0:	f005 fe5c 	bl	800796c <HAL_TIMEx_MasterConfigSynchronization>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001cba:	f000 fbed 	bl	8002498 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cbe:	2360      	movs	r3, #96	; 0x60
 8001cc0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8001cc2:	2364      	movs	r3, #100	; 0x64
 8001cc4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cce:	1d3b      	adds	r3, r7, #4
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4822      	ldr	r0, [pc, #136]	; (8001d60 <MX_TIM3_Init+0x154>)
 8001cd6:	f005 f971 	bl	8006fbc <HAL_TIM_PWM_ConfigChannel>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001ce0:	f000 fbda 	bl	8002498 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 8001ce4:	4b1e      	ldr	r3, [pc, #120]	; (8001d60 <MX_TIM3_Init+0x154>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	699a      	ldr	r2, [r3, #24]
 8001cea:	4b1d      	ldr	r3, [pc, #116]	; (8001d60 <MX_TIM3_Init+0x154>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f022 0208 	bic.w	r2, r2, #8
 8001cf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cf4:	1d3b      	adds	r3, r7, #4
 8001cf6:	2204      	movs	r2, #4
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4819      	ldr	r0, [pc, #100]	; (8001d60 <MX_TIM3_Init+0x154>)
 8001cfc:	f005 f95e 	bl	8006fbc <HAL_TIM_PWM_ConfigChannel>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_TIM3_Init+0xfe>
  {
    Error_Handler();
 8001d06:	f000 fbc7 	bl	8002498 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_2);
 8001d0a:	4b15      	ldr	r3, [pc, #84]	; (8001d60 <MX_TIM3_Init+0x154>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	699a      	ldr	r2, [r3, #24]
 8001d10:	4b13      	ldr	r3, [pc, #76]	; (8001d60 <MX_TIM3_Init+0x154>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d18:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM3_Init 2 */
  TIM3->DIER |= (1<<1);   // CC1IE: Enable the Tim3 CC1 interrupt
 8001d1a:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <MX_TIM3_Init+0x158>)
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	4a11      	ldr	r2, [pc, #68]	; (8001d64 <MX_TIM3_Init+0x158>)
 8001d20:	f043 0302 	orr.w	r3, r3, #2
 8001d24:	60d3      	str	r3, [r2, #12]
   NVIC->ISER[0] |= (1<<29); // TIM3_CC
 8001d26:	4b10      	ldr	r3, [pc, #64]	; (8001d68 <MX_TIM3_Init+0x15c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a0f      	ldr	r2, [pc, #60]	; (8001d68 <MX_TIM3_Init+0x15c>)
 8001d2c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001d30:	6013      	str	r3, [r2, #0]
   TIM3->CCER	|= (1<<0);	// CC1E=1: OC1(TIM5_CH1) Active(Capture/Compare 1 output enable)
 8001d32:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <MX_TIM3_Init+0x158>)
 8001d34:	6a1b      	ldr	r3, [r3, #32]
 8001d36:	4a0b      	ldr	r2, [pc, #44]	; (8001d64 <MX_TIM3_Init+0x158>)
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	6213      	str	r3, [r2, #32]
    					// ?��?��??(40�??????????????????????????????????????????)?�� ?��?�� ?��?��출력
   TIM3->CR1	|= (1<<0);	// CEN: Counter TIM3 enable
 8001d3e:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <MX_TIM3_Init+0x158>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a08      	ldr	r2, [pc, #32]	; (8001d64 <MX_TIM3_Init+0x158>)
 8001d44:	f043 0301 	orr.w	r3, r3, #1
 8001d48:	6013      	str	r3, [r2, #0]

  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	4804      	ldr	r0, [pc, #16]	; (8001d60 <MX_TIM3_Init+0x154>)
 8001d4e:	f004 fd9f 	bl	8006890 <HAL_TIM_PWM_Start_IT>

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d52:	4803      	ldr	r0, [pc, #12]	; (8001d60 <MX_TIM3_Init+0x154>)
 8001d54:	f001 f8ae 	bl	8002eb4 <HAL_TIM_MspPostInit>

}
 8001d58:	bf00      	nop
 8001d5a:	3738      	adds	r7, #56	; 0x38
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	2000072c 	.word	0x2000072c
 8001d64:	40000400 	.word	0x40000400
 8001d68:	e000e100 	.word	0xe000e100

08001d6c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08c      	sub	sp, #48	; 0x30
 8001d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d72:	f107 030c 	add.w	r3, r7, #12
 8001d76:	2224      	movs	r2, #36	; 0x24
 8001d78:	2100      	movs	r1, #0
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f008 fa89 	bl	800a292 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d80:	1d3b      	adds	r3, r7, #4
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d88:	4b23      	ldr	r3, [pc, #140]	; (8001e18 <MX_TIM4_Init+0xac>)
 8001d8a:	4a24      	ldr	r2, [pc, #144]	; (8001e1c <MX_TIM4_Init+0xb0>)
 8001d8c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 340;
 8001d8e:	4b22      	ldr	r3, [pc, #136]	; (8001e18 <MX_TIM4_Init+0xac>)
 8001d90:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8001d94:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d96:	4b20      	ldr	r3, [pc, #128]	; (8001e18 <MX_TIM4_Init+0xac>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65000;
 8001d9c:	4b1e      	ldr	r3, [pc, #120]	; (8001e18 <MX_TIM4_Init+0xac>)
 8001d9e:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001da2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001da4:	4b1c      	ldr	r3, [pc, #112]	; (8001e18 <MX_TIM4_Init+0xac>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001daa:	4b1b      	ldr	r3, [pc, #108]	; (8001e18 <MX_TIM4_Init+0xac>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001db0:	2303      	movs	r3, #3
 8001db2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001db4:	2300      	movs	r3, #0
 8001db6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001db8:	2301      	movs	r3, #1
 8001dba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001dd4:	f107 030c 	add.w	r3, r7, #12
 8001dd8:	4619      	mov	r1, r3
 8001dda:	480f      	ldr	r0, [pc, #60]	; (8001e18 <MX_TIM4_Init+0xac>)
 8001ddc:	f004 fe6e 	bl	8006abc <HAL_TIM_Encoder_Init>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001de6:	f000 fb57 	bl	8002498 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dea:	2300      	movs	r3, #0
 8001dec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dee:	2300      	movs	r3, #0
 8001df0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001df2:	1d3b      	adds	r3, r7, #4
 8001df4:	4619      	mov	r1, r3
 8001df6:	4808      	ldr	r0, [pc, #32]	; (8001e18 <MX_TIM4_Init+0xac>)
 8001df8:	f005 fdb8 	bl	800796c <HAL_TIMEx_MasterConfigSynchronization>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001e02:	f000 fb49 	bl	8002498 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001e06:	213c      	movs	r1, #60	; 0x3c
 8001e08:	4803      	ldr	r0, [pc, #12]	; (8001e18 <MX_TIM4_Init+0xac>)
 8001e0a:	f004 fefd 	bl	8006c08 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM4_Init 2 */

}
 8001e0e:	bf00      	nop
 8001e10:	3730      	adds	r7, #48	; 0x30
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000774 	.word	0x20000774
 8001e1c:	40000800 	.word	0x40000800

08001e20 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e26:	463b      	mov	r3, r7
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001e2e:	4b16      	ldr	r3, [pc, #88]	; (8001e88 <MX_TIM6_Init+0x68>)
 8001e30:	4a16      	ldr	r2, [pc, #88]	; (8001e8c <MX_TIM6_Init+0x6c>)
 8001e32:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 8001e34:	4b14      	ldr	r3, [pc, #80]	; (8001e88 <MX_TIM6_Init+0x68>)
 8001e36:	2253      	movs	r2, #83	; 0x53
 8001e38:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e3a:	4b13      	ldr	r3, [pc, #76]	; (8001e88 <MX_TIM6_Init+0x68>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8001e40:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <MX_TIM6_Init+0x68>)
 8001e42:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e46:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e48:	4b0f      	ldr	r3, [pc, #60]	; (8001e88 <MX_TIM6_Init+0x68>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001e4e:	480e      	ldr	r0, [pc, #56]	; (8001e88 <MX_TIM6_Init+0x68>)
 8001e50:	f004 fb44 	bl	80064dc <HAL_TIM_Base_Init>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001e5a:	f000 fb1d 	bl	8002498 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e62:	2300      	movs	r3, #0
 8001e64:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001e66:	463b      	mov	r3, r7
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4807      	ldr	r0, [pc, #28]	; (8001e88 <MX_TIM6_Init+0x68>)
 8001e6c:	f005 fd7e 	bl	800796c <HAL_TIMEx_MasterConfigSynchronization>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001e76:	f000 fb0f 	bl	8002498 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8001e7a:	4803      	ldr	r0, [pc, #12]	; (8001e88 <MX_TIM6_Init+0x68>)
 8001e7c:	f004 fbe6 	bl	800664c <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM6_Init 2 */

}
 8001e80:	bf00      	nop
 8001e82:	3708      	adds	r7, #8
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	200007bc 	.word	0x200007bc
 8001e8c:	40001000 	.word	0x40001000

08001e90 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b096      	sub	sp, #88	; 0x58
 8001e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e96:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	605a      	str	r2, [r3, #4]
 8001ea0:	609a      	str	r2, [r3, #8]
 8001ea2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ea4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001eae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	605a      	str	r2, [r3, #4]
 8001eb8:	609a      	str	r2, [r3, #8]
 8001eba:	60da      	str	r2, [r3, #12]
 8001ebc:	611a      	str	r2, [r3, #16]
 8001ebe:	615a      	str	r2, [r3, #20]
 8001ec0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ec2:	1d3b      	adds	r3, r7, #4
 8001ec4:	2220      	movs	r2, #32
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f008 f9e2 	bl	800a292 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001ece:	4b3e      	ldr	r3, [pc, #248]	; (8001fc8 <MX_TIM8_Init+0x138>)
 8001ed0:	4a3e      	ldr	r2, [pc, #248]	; (8001fcc <MX_TIM8_Init+0x13c>)
 8001ed2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 840-1;
 8001ed4:	4b3c      	ldr	r3, [pc, #240]	; (8001fc8 <MX_TIM8_Init+0x138>)
 8001ed6:	f240 3247 	movw	r2, #839	; 0x347
 8001eda:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001edc:	4b3a      	ldr	r3, [pc, #232]	; (8001fc8 <MX_TIM8_Init+0x138>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 50-1;
 8001ee2:	4b39      	ldr	r3, [pc, #228]	; (8001fc8 <MX_TIM8_Init+0x138>)
 8001ee4:	2231      	movs	r2, #49	; 0x31
 8001ee6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ee8:	4b37      	ldr	r3, [pc, #220]	; (8001fc8 <MX_TIM8_Init+0x138>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001eee:	4b36      	ldr	r3, [pc, #216]	; (8001fc8 <MX_TIM8_Init+0x138>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ef4:	4b34      	ldr	r3, [pc, #208]	; (8001fc8 <MX_TIM8_Init+0x138>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001efa:	4833      	ldr	r0, [pc, #204]	; (8001fc8 <MX_TIM8_Init+0x138>)
 8001efc:	f004 faee 	bl	80064dc <HAL_TIM_Base_Init>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001f06:	f000 fac7 	bl	8002498 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f0e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001f10:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f14:	4619      	mov	r1, r3
 8001f16:	482c      	ldr	r0, [pc, #176]	; (8001fc8 <MX_TIM8_Init+0x138>)
 8001f18:	f005 f912 	bl	8007140 <HAL_TIM_ConfigClockSource>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001f22:	f000 fab9 	bl	8002498 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8001f26:	4828      	ldr	r0, [pc, #160]	; (8001fc8 <MX_TIM8_Init+0x138>)
 8001f28:	f004 fc00 	bl	800672c <HAL_TIM_OC_Init>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001f32:	f000 fab1 	bl	8002498 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001f36:	2320      	movs	r3, #32
 8001f38:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001f3e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f42:	4619      	mov	r1, r3
 8001f44:	4820      	ldr	r0, [pc, #128]	; (8001fc8 <MX_TIM8_Init+0x138>)
 8001f46:	f005 fd11 	bl	800796c <HAL_TIMEx_MasterConfigSynchronization>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001f50:	f000 faa2 	bl	8002498 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001f54:	2300      	movs	r3, #0
 8001f56:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2000;
 8001f58:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001f5c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f62:	2300      	movs	r3, #0
 8001f64:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f66:	2300      	movs	r3, #0
 8001f68:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f72:	220c      	movs	r2, #12
 8001f74:	4619      	mov	r1, r3
 8001f76:	4814      	ldr	r0, [pc, #80]	; (8001fc8 <MX_TIM8_Init+0x138>)
 8001f78:	f004 ffc4 	bl	8006f04 <HAL_TIM_OC_ConfigChannel>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8001f82:	f000 fa89 	bl	8002498 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f86:	2300      	movs	r3, #0
 8001f88:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f9e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001fa4:	1d3b      	adds	r3, r7, #4
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4807      	ldr	r0, [pc, #28]	; (8001fc8 <MX_TIM8_Init+0x138>)
 8001faa:	f005 fd5b 	bl	8007a64 <HAL_TIMEx_ConfigBreakDeadTime>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8001fb4:	f000 fa70 	bl	8002498 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */
  HAL_TIM_Base_Start_IT(&htim8);
 8001fb8:	4803      	ldr	r0, [pc, #12]	; (8001fc8 <MX_TIM8_Init+0x138>)
 8001fba:	f004 fb47 	bl	800664c <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM8_Init 2 */

}
 8001fbe:	bf00      	nop
 8001fc0:	3758      	adds	r7, #88	; 0x58
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000804 	.word	0x20000804
 8001fcc:	40010400 	.word	0x40010400

08001fd0 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b088      	sub	sp, #32
 8001fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fd6:	1d3b      	adds	r3, r7, #4
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	611a      	str	r2, [r3, #16]
 8001fe4:	615a      	str	r2, [r3, #20]
 8001fe6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001fe8:	4b1f      	ldr	r3, [pc, #124]	; (8002068 <MX_TIM13_Init+0x98>)
 8001fea:	4a20      	ldr	r2, [pc, #128]	; (800206c <MX_TIM13_Init+0x9c>)
 8001fec:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 84;
 8001fee:	4b1e      	ldr	r3, [pc, #120]	; (8002068 <MX_TIM13_Init+0x98>)
 8001ff0:	2254      	movs	r2, #84	; 0x54
 8001ff2:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff4:	4b1c      	ldr	r3, [pc, #112]	; (8002068 <MX_TIM13_Init+0x98>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100;
 8001ffa:	4b1b      	ldr	r3, [pc, #108]	; (8002068 <MX_TIM13_Init+0x98>)
 8001ffc:	2264      	movs	r2, #100	; 0x64
 8001ffe:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002000:	4b19      	ldr	r3, [pc, #100]	; (8002068 <MX_TIM13_Init+0x98>)
 8002002:	2200      	movs	r2, #0
 8002004:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002006:	4b18      	ldr	r3, [pc, #96]	; (8002068 <MX_TIM13_Init+0x98>)
 8002008:	2200      	movs	r2, #0
 800200a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800200c:	4816      	ldr	r0, [pc, #88]	; (8002068 <MX_TIM13_Init+0x98>)
 800200e:	f004 fa65 	bl	80064dc <HAL_TIM_Base_Init>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_TIM13_Init+0x4c>
  {
    Error_Handler();
 8002018:	f000 fa3e 	bl	8002498 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800201c:	4812      	ldr	r0, [pc, #72]	; (8002068 <MX_TIM13_Init+0x98>)
 800201e:	f004 fbde 	bl	80067de <HAL_TIM_PWM_Init>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_TIM13_Init+0x5c>
  {
    Error_Handler();
 8002028:	f000 fa36 	bl	8002498 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800202c:	2360      	movs	r3, #96	; 0x60
 800202e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8002030:	2332      	movs	r3, #50	; 0x32
 8002032:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002034:	2300      	movs	r3, #0
 8002036:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800203c:	1d3b      	adds	r3, r7, #4
 800203e:	2200      	movs	r2, #0
 8002040:	4619      	mov	r1, r3
 8002042:	4809      	ldr	r0, [pc, #36]	; (8002068 <MX_TIM13_Init+0x98>)
 8002044:	f004 ffba 	bl	8006fbc <HAL_TIM_PWM_ConfigChannel>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <MX_TIM13_Init+0x82>
  {
    Error_Handler();
 800204e:	f000 fa23 	bl	8002498 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002052:	4805      	ldr	r0, [pc, #20]	; (8002068 <MX_TIM13_Init+0x98>)
 8002054:	f000 ff2e 	bl	8002eb4 <HAL_TIM_MspPostInit>
  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002058:	4803      	ldr	r0, [pc, #12]	; (8002068 <MX_TIM13_Init+0x98>)
 800205a:	f000 ff2b 	bl	8002eb4 <HAL_TIM_MspPostInit>

}
 800205e:	bf00      	nop
 8002060:	3720      	adds	r7, #32
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	2000084c 	.word	0x2000084c
 800206c:	40001c00 	.word	0x40001c00

08002070 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002074:	4b17      	ldr	r3, [pc, #92]	; (80020d4 <MX_TIM14_Init+0x64>)
 8002076:	4a18      	ldr	r2, [pc, #96]	; (80020d8 <MX_TIM14_Init+0x68>)
 8002078:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 840-1;
 800207a:	4b16      	ldr	r3, [pc, #88]	; (80020d4 <MX_TIM14_Init+0x64>)
 800207c:	f240 3247 	movw	r2, #839	; 0x347
 8002080:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002082:	4b14      	ldr	r3, [pc, #80]	; (80020d4 <MX_TIM14_Init+0x64>)
 8002084:	2200      	movs	r2, #0
 8002086:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 8002088:	4b12      	ldr	r3, [pc, #72]	; (80020d4 <MX_TIM14_Init+0x64>)
 800208a:	f242 720f 	movw	r2, #9999	; 0x270f
 800208e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002090:	4b10      	ldr	r3, [pc, #64]	; (80020d4 <MX_TIM14_Init+0x64>)
 8002092:	2200      	movs	r2, #0
 8002094:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002096:	4b0f      	ldr	r3, [pc, #60]	; (80020d4 <MX_TIM14_Init+0x64>)
 8002098:	2200      	movs	r2, #0
 800209a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800209c:	480d      	ldr	r0, [pc, #52]	; (80020d4 <MX_TIM14_Init+0x64>)
 800209e:	f004 fa1d 	bl	80064dc <HAL_TIM_Base_Init>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 80020a8:	f000 f9f6 	bl	8002498 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */
  TIM14->DIER |= (1<<0);   // CC1IE: Enable the Tim14 UG interrupt
 80020ac:	4b0a      	ldr	r3, [pc, #40]	; (80020d8 <MX_TIM14_Init+0x68>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	4a09      	ldr	r2, [pc, #36]	; (80020d8 <MX_TIM14_Init+0x68>)
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	60d3      	str	r3, [r2, #12]
   NVIC->ISER[1] |= (1<<(45-32)); // TIM14_CC
 80020b8:	4b08      	ldr	r3, [pc, #32]	; (80020dc <MX_TIM14_Init+0x6c>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	4a07      	ldr	r2, [pc, #28]	; (80020dc <MX_TIM14_Init+0x6c>)
 80020be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020c2:	6053      	str	r3, [r2, #4]

   TIM14->CR1	|= (1<<0);	// CEN: Counter TIM14 enable
 80020c4:	4b04      	ldr	r3, [pc, #16]	; (80020d8 <MX_TIM14_Init+0x68>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a03      	ldr	r2, [pc, #12]	; (80020d8 <MX_TIM14_Init+0x68>)
 80020ca:	f043 0301 	orr.w	r3, r3, #1
 80020ce:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM14_Init 2 */

}
 80020d0:	bf00      	nop
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	20000894 	.word	0x20000894
 80020d8:	40002000 	.word	0x40002000
 80020dc:	e000e100 	.word	0xe000e100

080020e0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80020e4:	4b11      	ldr	r3, [pc, #68]	; (800212c <MX_UART4_Init+0x4c>)
 80020e6:	4a12      	ldr	r2, [pc, #72]	; (8002130 <MX_UART4_Init+0x50>)
 80020e8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80020ea:	4b10      	ldr	r3, [pc, #64]	; (800212c <MX_UART4_Init+0x4c>)
 80020ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020f0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80020f2:	4b0e      	ldr	r3, [pc, #56]	; (800212c <MX_UART4_Init+0x4c>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80020f8:	4b0c      	ldr	r3, [pc, #48]	; (800212c <MX_UART4_Init+0x4c>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 80020fe:	4b0b      	ldr	r3, [pc, #44]	; (800212c <MX_UART4_Init+0x4c>)
 8002100:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002104:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002106:	4b09      	ldr	r3, [pc, #36]	; (800212c <MX_UART4_Init+0x4c>)
 8002108:	220c      	movs	r2, #12
 800210a:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800210c:	4b07      	ldr	r3, [pc, #28]	; (800212c <MX_UART4_Init+0x4c>)
 800210e:	2200      	movs	r2, #0
 8002110:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002112:	4b06      	ldr	r3, [pc, #24]	; (800212c <MX_UART4_Init+0x4c>)
 8002114:	2200      	movs	r2, #0
 8002116:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002118:	4804      	ldr	r0, [pc, #16]	; (800212c <MX_UART4_Init+0x4c>)
 800211a:	f005 fd09 	bl	8007b30 <HAL_UART_Init>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_UART4_Init+0x48>
  {
    Error_Handler();
 8002124:	f000 f9b8 	bl	8002498 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002128:	bf00      	nop
 800212a:	bd80      	pop	{r7, pc}
 800212c:	20000358 	.word	0x20000358
 8002130:	40004c00 	.word	0x40004c00

08002134 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002138:	4b11      	ldr	r3, [pc, #68]	; (8002180 <MX_USART3_UART_Init+0x4c>)
 800213a:	4a12      	ldr	r2, [pc, #72]	; (8002184 <MX_USART3_UART_Init+0x50>)
 800213c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800213e:	4b10      	ldr	r3, [pc, #64]	; (8002180 <MX_USART3_UART_Init+0x4c>)
 8002140:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002144:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002146:	4b0e      	ldr	r3, [pc, #56]	; (8002180 <MX_USART3_UART_Init+0x4c>)
 8002148:	2200      	movs	r2, #0
 800214a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800214c:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <MX_USART3_UART_Init+0x4c>)
 800214e:	2200      	movs	r2, #0
 8002150:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002152:	4b0b      	ldr	r3, [pc, #44]	; (8002180 <MX_USART3_UART_Init+0x4c>)
 8002154:	2200      	movs	r2, #0
 8002156:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002158:	4b09      	ldr	r3, [pc, #36]	; (8002180 <MX_USART3_UART_Init+0x4c>)
 800215a:	220c      	movs	r2, #12
 800215c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800215e:	4b08      	ldr	r3, [pc, #32]	; (8002180 <MX_USART3_UART_Init+0x4c>)
 8002160:	2200      	movs	r2, #0
 8002162:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002164:	4b06      	ldr	r3, [pc, #24]	; (8002180 <MX_USART3_UART_Init+0x4c>)
 8002166:	2200      	movs	r2, #0
 8002168:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800216a:	4805      	ldr	r0, [pc, #20]	; (8002180 <MX_USART3_UART_Init+0x4c>)
 800216c:	f005 fce0 	bl	8007b30 <HAL_UART_Init>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002176:	f000 f98f 	bl	8002498 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800217a:	bf00      	nop
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	2000030c 	.word	0x2000030c
 8002184:	40004800 	.word	0x40004800

08002188 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800218c:	4b14      	ldr	r3, [pc, #80]	; (80021e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800218e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002192:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8002194:	4b12      	ldr	r3, [pc, #72]	; (80021e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002196:	2204      	movs	r2, #4
 8002198:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800219a:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800219c:	2202      	movs	r2, #2
 800219e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80021a0:	4b0f      	ldr	r3, [pc, #60]	; (80021e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80021a6:	4b0e      	ldr	r3, [pc, #56]	; (80021e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021a8:	2202      	movs	r2, #2
 80021aa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80021ac:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021ae:	2201      	movs	r2, #1
 80021b0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80021b2:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80021b8:	4b09      	ldr	r3, [pc, #36]	; (80021e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80021be:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021c0:	2201      	movs	r2, #1
 80021c2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80021c4:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80021ca:	4805      	ldr	r0, [pc, #20]	; (80021e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021cc:	f003 fbdf 	bl	800598e <HAL_PCD_Init>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80021d6:	f000 f95f 	bl	8002498 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	2000093c 	.word	0x2000093c

080021e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	607b      	str	r3, [r7, #4]
 80021ee:	4b17      	ldr	r3, [pc, #92]	; (800224c <MX_DMA_Init+0x68>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	4a16      	ldr	r2, [pc, #88]	; (800224c <MX_DMA_Init+0x68>)
 80021f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021f8:	6313      	str	r3, [r2, #48]	; 0x30
 80021fa:	4b14      	ldr	r3, [pc, #80]	; (800224c <MX_DMA_Init+0x68>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002202:	607b      	str	r3, [r7, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	603b      	str	r3, [r7, #0]
 800220a:	4b10      	ldr	r3, [pc, #64]	; (800224c <MX_DMA_Init+0x68>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	4a0f      	ldr	r2, [pc, #60]	; (800224c <MX_DMA_Init+0x68>)
 8002210:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002214:	6313      	str	r3, [r2, #48]	; 0x30
 8002216:	4b0d      	ldr	r3, [pc, #52]	; (800224c <MX_DMA_Init+0x68>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800221e:	603b      	str	r3, [r7, #0]
 8002220:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002222:	2200      	movs	r2, #0
 8002224:	2100      	movs	r1, #0
 8002226:	2011      	movs	r0, #17
 8002228:	f002 fa73 	bl	8004712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800222c:	2011      	movs	r0, #17
 800222e:	f002 fa8c 	bl	800474a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8002232:	2200      	movs	r2, #0
 8002234:	2100      	movs	r1, #0
 8002236:	2039      	movs	r0, #57	; 0x39
 8002238:	f002 fa6b 	bl	8004712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800223c:	2039      	movs	r0, #57	; 0x39
 800223e:	f002 fa84 	bl	800474a <HAL_NVIC_EnableIRQ>

}
 8002242:	bf00      	nop
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40023800 	.word	0x40023800

08002250 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b08e      	sub	sp, #56	; 0x38
 8002254:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002256:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	605a      	str	r2, [r3, #4]
 8002260:	609a      	str	r2, [r3, #8]
 8002262:	60da      	str	r2, [r3, #12]
 8002264:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	623b      	str	r3, [r7, #32]
 800226a:	4b84      	ldr	r3, [pc, #528]	; (800247c <MX_GPIO_Init+0x22c>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	4a83      	ldr	r2, [pc, #524]	; (800247c <MX_GPIO_Init+0x22c>)
 8002270:	f043 0304 	orr.w	r3, r3, #4
 8002274:	6313      	str	r3, [r2, #48]	; 0x30
 8002276:	4b81      	ldr	r3, [pc, #516]	; (800247c <MX_GPIO_Init+0x22c>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	f003 0304 	and.w	r3, r3, #4
 800227e:	623b      	str	r3, [r7, #32]
 8002280:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	61fb      	str	r3, [r7, #28]
 8002286:	4b7d      	ldr	r3, [pc, #500]	; (800247c <MX_GPIO_Init+0x22c>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	4a7c      	ldr	r2, [pc, #496]	; (800247c <MX_GPIO_Init+0x22c>)
 800228c:	f043 0320 	orr.w	r3, r3, #32
 8002290:	6313      	str	r3, [r2, #48]	; 0x30
 8002292:	4b7a      	ldr	r3, [pc, #488]	; (800247c <MX_GPIO_Init+0x22c>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	f003 0320 	and.w	r3, r3, #32
 800229a:	61fb      	str	r3, [r7, #28]
 800229c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	61bb      	str	r3, [r7, #24]
 80022a2:	4b76      	ldr	r3, [pc, #472]	; (800247c <MX_GPIO_Init+0x22c>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	4a75      	ldr	r2, [pc, #468]	; (800247c <MX_GPIO_Init+0x22c>)
 80022a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022ac:	6313      	str	r3, [r2, #48]	; 0x30
 80022ae:	4b73      	ldr	r3, [pc, #460]	; (800247c <MX_GPIO_Init+0x22c>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022b6:	61bb      	str	r3, [r7, #24]
 80022b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	617b      	str	r3, [r7, #20]
 80022be:	4b6f      	ldr	r3, [pc, #444]	; (800247c <MX_GPIO_Init+0x22c>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	4a6e      	ldr	r2, [pc, #440]	; (800247c <MX_GPIO_Init+0x22c>)
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ca:	4b6c      	ldr	r3, [pc, #432]	; (800247c <MX_GPIO_Init+0x22c>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	617b      	str	r3, [r7, #20]
 80022d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	613b      	str	r3, [r7, #16]
 80022da:	4b68      	ldr	r3, [pc, #416]	; (800247c <MX_GPIO_Init+0x22c>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	4a67      	ldr	r2, [pc, #412]	; (800247c <MX_GPIO_Init+0x22c>)
 80022e0:	f043 0302 	orr.w	r3, r3, #2
 80022e4:	6313      	str	r3, [r2, #48]	; 0x30
 80022e6:	4b65      	ldr	r3, [pc, #404]	; (800247c <MX_GPIO_Init+0x22c>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	613b      	str	r3, [r7, #16]
 80022f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	4b61      	ldr	r3, [pc, #388]	; (800247c <MX_GPIO_Init+0x22c>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	4a60      	ldr	r2, [pc, #384]	; (800247c <MX_GPIO_Init+0x22c>)
 80022fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002300:	6313      	str	r3, [r2, #48]	; 0x30
 8002302:	4b5e      	ldr	r3, [pc, #376]	; (800247c <MX_GPIO_Init+0x22c>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	60bb      	str	r3, [r7, #8]
 8002312:	4b5a      	ldr	r3, [pc, #360]	; (800247c <MX_GPIO_Init+0x22c>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	4a59      	ldr	r2, [pc, #356]	; (800247c <MX_GPIO_Init+0x22c>)
 8002318:	f043 0308 	orr.w	r3, r3, #8
 800231c:	6313      	str	r3, [r2, #48]	; 0x30
 800231e:	4b57      	ldr	r3, [pc, #348]	; (800247c <MX_GPIO_Init+0x22c>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	f003 0308 	and.w	r3, r3, #8
 8002326:	60bb      	str	r3, [r7, #8]
 8002328:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	607b      	str	r3, [r7, #4]
 800232e:	4b53      	ldr	r3, [pc, #332]	; (800247c <MX_GPIO_Init+0x22c>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	4a52      	ldr	r2, [pc, #328]	; (800247c <MX_GPIO_Init+0x22c>)
 8002334:	f043 0310 	orr.w	r3, r3, #16
 8002338:	6313      	str	r3, [r2, #48]	; 0x30
 800233a:	4b50      	ldr	r3, [pc, #320]	; (800247c <MX_GPIO_Init+0x22c>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	f003 0310 	and.w	r3, r3, #16
 8002342:	607b      	str	r3, [r7, #4]
 8002344:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD3_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 8002346:	2200      	movs	r2, #0
 8002348:	f244 0181 	movw	r1, #16513	; 0x4081
 800234c:	484c      	ldr	r0, [pc, #304]	; (8002480 <MX_GPIO_Init+0x230>)
 800234e:	f003 fb05 	bl	800595c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8002352:	2200      	movs	r2, #0
 8002354:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8002358:	484a      	ldr	r0, [pc, #296]	; (8002484 <MX_GPIO_Init+0x234>)
 800235a:	f003 faff 	bl	800595c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800235e:	2200      	movs	r2, #0
 8002360:	2103      	movs	r1, #3
 8002362:	4849      	ldr	r0, [pc, #292]	; (8002488 <MX_GPIO_Init+0x238>)
 8002364:	f003 fafa 	bl	800595c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8002368:	2200      	movs	r2, #0
 800236a:	2180      	movs	r1, #128	; 0x80
 800236c:	4847      	ldr	r0, [pc, #284]	; (800248c <MX_GPIO_Init+0x23c>)
 800236e:	f003 faf5 	bl	800595c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
 8002372:	2200      	movs	r2, #0
 8002374:	2101      	movs	r1, #1
 8002376:	4846      	ldr	r0, [pc, #280]	; (8002490 <MX_GPIO_Init+0x240>)
 8002378:	f003 faf0 	bl	800595c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800237c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002380:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002382:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002386:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800238c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002390:	4619      	mov	r1, r3
 8002392:	4840      	ldr	r0, [pc, #256]	; (8002494 <MX_GPIO_Init+0x244>)
 8002394:	f003 f91e 	bl	80055d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 LD3_Pin PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin|GPIO_PIN_7;
 8002398:	f244 0381 	movw	r3, #16513	; 0x4081
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800239e:	2301      	movs	r3, #1
 80023a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a6:	2300      	movs	r3, #0
 80023a8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ae:	4619      	mov	r1, r3
 80023b0:	4833      	ldr	r0, [pc, #204]	; (8002480 <MX_GPIO_Init+0x230>)
 80023b2:	f003 f90f 	bl	80055d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80023b6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80023ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023bc:	2301      	movs	r3, #1
 80023be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c4:	2300      	movs	r3, #0
 80023c6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80023c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023cc:	4619      	mov	r1, r3
 80023ce:	482d      	ldr	r0, [pc, #180]	; (8002484 <MX_GPIO_Init+0x234>)
 80023d0:	f003 f900 	bl	80055d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80023d4:	2303      	movs	r3, #3
 80023d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023d8:	2301      	movs	r3, #1
 80023da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023dc:	2300      	movs	r3, #0
 80023de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e0:	2300      	movs	r3, #0
 80023e2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023e8:	4619      	mov	r1, r3
 80023ea:	4827      	ldr	r0, [pc, #156]	; (8002488 <MX_GPIO_Init+0x238>)
 80023ec:	f003 f8f2 	bl	80055d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80023f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023f6:	2300      	movs	r3, #0
 80023f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fa:	2300      	movs	r3, #0
 80023fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002402:	4619      	mov	r1, r3
 8002404:	481e      	ldr	r0, [pc, #120]	; (8002480 <MX_GPIO_Init+0x230>)
 8002406:	f003 f8e5 	bl	80055d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800240a:	2380      	movs	r3, #128	; 0x80
 800240c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800240e:	2300      	movs	r3, #0
 8002410:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002412:	2300      	movs	r3, #0
 8002414:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002416:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800241a:	4619      	mov	r1, r3
 800241c:	481a      	ldr	r0, [pc, #104]	; (8002488 <MX_GPIO_Init+0x238>)
 800241e:	f003 f8d9 	bl	80055d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002422:	2340      	movs	r3, #64	; 0x40
 8002424:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002426:	2300      	movs	r3, #0
 8002428:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242a:	2300      	movs	r3, #0
 800242c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800242e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002432:	4619      	mov	r1, r3
 8002434:	4815      	ldr	r0, [pc, #84]	; (800248c <MX_GPIO_Init+0x23c>)
 8002436:	f003 f8cd 	bl	80055d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800243a:	2380      	movs	r3, #128	; 0x80
 800243c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800243e:	2301      	movs	r3, #1
 8002440:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002442:	2300      	movs	r3, #0
 8002444:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002446:	2300      	movs	r3, #0
 8002448:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800244a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800244e:	4619      	mov	r1, r3
 8002450:	480e      	ldr	r0, [pc, #56]	; (800248c <MX_GPIO_Init+0x23c>)
 8002452:	f003 f8bf 	bl	80055d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002456:	2301      	movs	r3, #1
 8002458:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800245a:	2301      	movs	r3, #1
 800245c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245e:	2300      	movs	r3, #0
 8002460:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002462:	2300      	movs	r3, #0
 8002464:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002466:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800246a:	4619      	mov	r1, r3
 800246c:	4808      	ldr	r0, [pc, #32]	; (8002490 <MX_GPIO_Init+0x240>)
 800246e:	f003 f8b1 	bl	80055d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002472:	bf00      	nop
 8002474:	3738      	adds	r7, #56	; 0x38
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40023800 	.word	0x40023800
 8002480:	40020400 	.word	0x40020400
 8002484:	40021400 	.word	0x40021400
 8002488:	40021800 	.word	0x40021800
 800248c:	40020c00 	.word	0x40020c00
 8002490:	40021000 	.word	0x40021000
 8002494:	40020800 	.word	0x40020800

08002498 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800249c:	b672      	cpsid	i
}
 800249e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024a0:	e7fe      	b.n	80024a0 <Error_Handler+0x8>
 80024a2:	0000      	movs	r0, r0
 80024a4:	0000      	movs	r0, r0
	...

080024a8 <position_pid>:




void position_pid(void)
{
 80024a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80024ac:	af00      	add	r7, sp, #0
//	p_kp = 4;
//	p_ki = 1;
//	p_kd = 0.02;


	err = input_position - encoder_count;
 80024ae:	4b8c      	ldr	r3, [pc, #560]	; (80026e0 <position_pid+0x238>)
 80024b0:	881b      	ldrh	r3, [r3, #0]
 80024b2:	461a      	mov	r2, r3
 80024b4:	4b8b      	ldr	r3, [pc, #556]	; (80026e4 <position_pid+0x23c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	461a      	mov	r2, r3
 80024bc:	4b8a      	ldr	r3, [pc, #552]	; (80026e8 <position_pid+0x240>)
 80024be:	601a      	str	r2, [r3, #0]
	P_KP = err * p_kp;
 80024c0:	4b89      	ldr	r3, [pc, #548]	; (80026e8 <position_pid+0x240>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	ee07 3a90 	vmov	s15, r3
 80024c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024cc:	4b87      	ldr	r3, [pc, #540]	; (80026ec <position_pid+0x244>)
 80024ce:	edd3 7a00 	vldr	s15, [r3]
 80024d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024d6:	4b86      	ldr	r3, [pc, #536]	; (80026f0 <position_pid+0x248>)
 80024d8:	edc3 7a00 	vstr	s15, [r3]

	err_sum = err_sum + err * 0.0001;
 80024dc:	4b85      	ldr	r3, [pc, #532]	; (80026f4 <position_pid+0x24c>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7fe f841 	bl	8000568 <__aeabi_f2d>
 80024e6:	4680      	mov	r8, r0
 80024e8:	4689      	mov	r9, r1
 80024ea:	4b7f      	ldr	r3, [pc, #508]	; (80026e8 <position_pid+0x240>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fe f828 	bl	8000544 <__aeabi_i2d>
 80024f4:	a378      	add	r3, pc, #480	; (adr r3, 80026d8 <position_pid+0x230>)
 80024f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fa:	f7fe f88d 	bl	8000618 <__aeabi_dmul>
 80024fe:	4602      	mov	r2, r0
 8002500:	460b      	mov	r3, r1
 8002502:	4640      	mov	r0, r8
 8002504:	4649      	mov	r1, r9
 8002506:	f7fd fed1 	bl	80002ac <__adddf3>
 800250a:	4602      	mov	r2, r0
 800250c:	460b      	mov	r3, r1
 800250e:	4610      	mov	r0, r2
 8002510:	4619      	mov	r1, r3
 8002512:	f7fe fb79 	bl	8000c08 <__aeabi_d2f>
 8002516:	4603      	mov	r3, r0
 8002518:	4a76      	ldr	r2, [pc, #472]	; (80026f4 <position_pid+0x24c>)
 800251a:	6013      	str	r3, [r2, #0]
	if (p_PID == 0)
 800251c:	4b76      	ldr	r3, [pc, #472]	; (80026f8 <position_pid+0x250>)
 800251e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002522:	f04f 0200 	mov.w	r2, #0
 8002526:	f04f 0300 	mov.w	r3, #0
 800252a:	f7fe fadd 	bl	8000ae8 <__aeabi_dcmpeq>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d003      	beq.n	800253c <position_pid+0x94>
	{
		err_sum = 0;
 8002534:	4b6f      	ldr	r3, [pc, #444]	; (80026f4 <position_pid+0x24c>)
 8002536:	f04f 0200 	mov.w	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
	}
	P_KI = err_sum * p_ki;
 800253c:	4b6d      	ldr	r3, [pc, #436]	; (80026f4 <position_pid+0x24c>)
 800253e:	ed93 7a00 	vldr	s14, [r3]
 8002542:	4b6e      	ldr	r3, [pc, #440]	; (80026fc <position_pid+0x254>)
 8002544:	edd3 7a00 	vldr	s15, [r3]
 8002548:	ee67 7a27 	vmul.f32	s15, s14, s15
 800254c:	4b6c      	ldr	r3, [pc, #432]	; (8002700 <position_pid+0x258>)
 800254e:	edc3 7a00 	vstr	s15, [r3]

	err_d = (err - previous_err) / 0.0001;
 8002552:	4b65      	ldr	r3, [pc, #404]	; (80026e8 <position_pid+0x240>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	ee07 3a90 	vmov	s15, r3
 800255a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800255e:	4b69      	ldr	r3, [pc, #420]	; (8002704 <position_pid+0x25c>)
 8002560:	edd3 7a00 	vldr	s15, [r3]
 8002564:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002568:	ee17 0a90 	vmov	r0, s15
 800256c:	f7fd fffc 	bl	8000568 <__aeabi_f2d>
 8002570:	a359      	add	r3, pc, #356	; (adr r3, 80026d8 <position_pid+0x230>)
 8002572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002576:	f7fe f979 	bl	800086c <__aeabi_ddiv>
 800257a:	4602      	mov	r2, r0
 800257c:	460b      	mov	r3, r1
 800257e:	4962      	ldr	r1, [pc, #392]	; (8002708 <position_pid+0x260>)
 8002580:	e9c1 2300 	strd	r2, r3, [r1]
	previous_err = err;
 8002584:	4b58      	ldr	r3, [pc, #352]	; (80026e8 <position_pid+0x240>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	ee07 3a90 	vmov	s15, r3
 800258c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002590:	4b5c      	ldr	r3, [pc, #368]	; (8002704 <position_pid+0x25c>)
 8002592:	edc3 7a00 	vstr	s15, [r3]
	P_KD = err_d * p_kd;
 8002596:	4b5d      	ldr	r3, [pc, #372]	; (800270c <position_pid+0x264>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4618      	mov	r0, r3
 800259c:	f7fd ffe4 	bl	8000568 <__aeabi_f2d>
 80025a0:	4b59      	ldr	r3, [pc, #356]	; (8002708 <position_pid+0x260>)
 80025a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a6:	f7fe f837 	bl	8000618 <__aeabi_dmul>
 80025aa:	4602      	mov	r2, r0
 80025ac:	460b      	mov	r3, r1
 80025ae:	4958      	ldr	r1, [pc, #352]	; (8002710 <position_pid+0x268>)
 80025b0:	e9c1 2300 	strd	r2, r3, [r1]

	p_PID = P_KP + P_KI + P_KD;
 80025b4:	4b4e      	ldr	r3, [pc, #312]	; (80026f0 <position_pid+0x248>)
 80025b6:	ed93 7a00 	vldr	s14, [r3]
 80025ba:	4b51      	ldr	r3, [pc, #324]	; (8002700 <position_pid+0x258>)
 80025bc:	edd3 7a00 	vldr	s15, [r3]
 80025c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025c4:	ee17 0a90 	vmov	r0, s15
 80025c8:	f7fd ffce 	bl	8000568 <__aeabi_f2d>
 80025cc:	4b50      	ldr	r3, [pc, #320]	; (8002710 <position_pid+0x268>)
 80025ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d2:	f7fd fe6b 	bl	80002ac <__adddf3>
 80025d6:	4602      	mov	r2, r0
 80025d8:	460b      	mov	r3, r1
 80025da:	4947      	ldr	r1, [pc, #284]	; (80026f8 <position_pid+0x250>)
 80025dc:	e9c1 2300 	strd	r2, r3, [r1]

	if (p_PID >= 400)
 80025e0:	4b45      	ldr	r3, [pc, #276]	; (80026f8 <position_pid+0x250>)
 80025e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025e6:	f04f 0200 	mov.w	r2, #0
 80025ea:	4b4a      	ldr	r3, [pc, #296]	; (8002714 <position_pid+0x26c>)
 80025ec:	f7fe fa9a 	bl	8000b24 <__aeabi_dcmpge>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d006      	beq.n	8002604 <position_pid+0x15c>
	{
		p_PID = 400;
 80025f6:	4940      	ldr	r1, [pc, #256]	; (80026f8 <position_pid+0x250>)
 80025f8:	f04f 0200 	mov.w	r2, #0
 80025fc:	4b45      	ldr	r3, [pc, #276]	; (8002714 <position_pid+0x26c>)
 80025fe:	e9c1 2300 	strd	r2, r3, [r1]
 8002602:	e010      	b.n	8002626 <position_pid+0x17e>
	}
	else if (p_PID <= -400)
 8002604:	4b3c      	ldr	r3, [pc, #240]	; (80026f8 <position_pid+0x250>)
 8002606:	e9d3 0100 	ldrd	r0, r1, [r3]
 800260a:	f04f 0200 	mov.w	r2, #0
 800260e:	4b42      	ldr	r3, [pc, #264]	; (8002718 <position_pid+0x270>)
 8002610:	f7fe fa7e 	bl	8000b10 <__aeabi_dcmple>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d005      	beq.n	8002626 <position_pid+0x17e>
	{
		p_PID = -400;
 800261a:	4937      	ldr	r1, [pc, #220]	; (80026f8 <position_pid+0x250>)
 800261c:	f04f 0200 	mov.w	r2, #0
 8002620:	4b3d      	ldr	r3, [pc, #244]	; (8002718 <position_pid+0x270>)
 8002622:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if (p_PID > 0)
 8002626:	4b34      	ldr	r3, [pc, #208]	; (80026f8 <position_pid+0x250>)
 8002628:	e9d3 0100 	ldrd	r0, r1, [r3]
 800262c:	f04f 0200 	mov.w	r2, #0
 8002630:	f04f 0300 	mov.w	r3, #0
 8002634:	f7fe fa80 	bl	8000b38 <__aeabi_dcmpgt>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d010      	beq.n	8002660 <position_pid+0x1b8>
	{
		GPIOE->ODR &= ~1 << 0; // go
 800263e:	4b37      	ldr	r3, [pc, #220]	; (800271c <position_pid+0x274>)
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	4a36      	ldr	r2, [pc, #216]	; (800271c <position_pid+0x274>)
 8002644:	f023 0301 	bic.w	r3, r3, #1
 8002648:	6153      	str	r3, [r2, #20]
		TIM3->CCR1 = p_PID;
 800264a:	4b2b      	ldr	r3, [pc, #172]	; (80026f8 <position_pid+0x250>)
 800264c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002650:	4c33      	ldr	r4, [pc, #204]	; (8002720 <position_pid+0x278>)
 8002652:	4610      	mov	r0, r2
 8002654:	4619      	mov	r1, r3
 8002656:	f7fe fab7 	bl	8000bc8 <__aeabi_d2uiz>
 800265a:	4603      	mov	r3, r0
 800265c:	6363      	str	r3, [r4, #52]	; 0x34
	}




}
 800265e:	e036      	b.n	80026ce <position_pid+0x226>
	else if (p_PID < 0)
 8002660:	4b25      	ldr	r3, [pc, #148]	; (80026f8 <position_pid+0x250>)
 8002662:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002666:	f04f 0200 	mov.w	r2, #0
 800266a:	f04f 0300 	mov.w	r3, #0
 800266e:	f7fe fa45 	bl	8000afc <__aeabi_dcmplt>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d019      	beq.n	80026ac <position_pid+0x204>
		GPIOE->ODR |= 1 << 0; // back
 8002678:	4b28      	ldr	r3, [pc, #160]	; (800271c <position_pid+0x274>)
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	4a27      	ldr	r2, [pc, #156]	; (800271c <position_pid+0x274>)
 800267e:	f043 0301 	orr.w	r3, r3, #1
 8002682:	6153      	str	r3, [r2, #20]
		p_PID = -p_PID;
 8002684:	4b1c      	ldr	r3, [pc, #112]	; (80026f8 <position_pid+0x250>)
 8002686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268a:	4614      	mov	r4, r2
 800268c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002690:	4b19      	ldr	r3, [pc, #100]	; (80026f8 <position_pid+0x250>)
 8002692:	e9c3 4500 	strd	r4, r5, [r3]
		TIM3->CCR1 = p_PID;
 8002696:	4b18      	ldr	r3, [pc, #96]	; (80026f8 <position_pid+0x250>)
 8002698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269c:	4c20      	ldr	r4, [pc, #128]	; (8002720 <position_pid+0x278>)
 800269e:	4610      	mov	r0, r2
 80026a0:	4619      	mov	r1, r3
 80026a2:	f7fe fa91 	bl	8000bc8 <__aeabi_d2uiz>
 80026a6:	4603      	mov	r3, r0
 80026a8:	6363      	str	r3, [r4, #52]	; 0x34
}
 80026aa:	e010      	b.n	80026ce <position_pid+0x226>
		p_PID = 0;
 80026ac:	4912      	ldr	r1, [pc, #72]	; (80026f8 <position_pid+0x250>)
 80026ae:	f04f 0200 	mov.w	r2, #0
 80026b2:	f04f 0300 	mov.w	r3, #0
 80026b6:	e9c1 2300 	strd	r2, r3, [r1]
		TIM3->CCR1 = p_PID;
 80026ba:	4b0f      	ldr	r3, [pc, #60]	; (80026f8 <position_pid+0x250>)
 80026bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c0:	4c17      	ldr	r4, [pc, #92]	; (8002720 <position_pid+0x278>)
 80026c2:	4610      	mov	r0, r2
 80026c4:	4619      	mov	r1, r3
 80026c6:	f7fe fa7f 	bl	8000bc8 <__aeabi_d2uiz>
 80026ca:	4603      	mov	r3, r0
 80026cc:	6363      	str	r3, [r4, #52]	; 0x34
}
 80026ce:	bf00      	nop
 80026d0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80026d4:	f3af 8000 	nop.w
 80026d8:	eb1c432d 	.word	0xeb1c432d
 80026dc:	3f1a36e2 	.word	0x3f1a36e2
 80026e0:	20000e26 	.word	0x20000e26
 80026e4:	20000000 	.word	0x20000000
 80026e8:	20000e28 	.word	0x20000e28
 80026ec:	20000e38 	.word	0x20000e38
 80026f0:	20000e44 	.word	0x20000e44
 80026f4:	20000e2c 	.word	0x20000e2c
 80026f8:	20000e30 	.word	0x20000e30
 80026fc:	20000e3c 	.word	0x20000e3c
 8002700:	20000e48 	.word	0x20000e48
 8002704:	20000e60 	.word	0x20000e60
 8002708:	20000e58 	.word	0x20000e58
 800270c:	20000e40 	.word	0x20000e40
 8002710:	20000e50 	.word	0x20000e50
 8002714:	40790000 	.word	0x40790000
 8002718:	c0790000 	.word	0xc0790000
 800271c:	40021000 	.word	0x40021000
 8002720:	40000400 	.word	0x40000400
 8002724:	00000000 	.word	0x00000000

08002728 <distance_sensor>:
uint16_t j=0;

extern TIM_HandleTypeDef htim1;

void distance_sensor (void)
{
 8002728:	b598      	push	{r3, r4, r7, lr}
 800272a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 800272c:	2201      	movs	r2, #1
 800272e:	2180      	movs	r1, #128	; 0x80
 8002730:	4849      	ldr	r0, [pc, #292]	; (8002858 <distance_sensor+0x130>)
 8002732:	f003 f913 	bl	800595c <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002736:	4b49      	ldr	r3, [pc, #292]	; (800285c <distance_sensor+0x134>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2200      	movs	r2, #0
 800273c:	625a      	str	r2, [r3, #36]	; 0x24
    while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 800273e:	bf00      	nop
 8002740:	4b46      	ldr	r3, [pc, #280]	; (800285c <distance_sensor+0x134>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	2b09      	cmp	r3, #9
 8002748:	d9fa      	bls.n	8002740 <distance_sensor+0x18>
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 800274a:	2200      	movs	r2, #0
 800274c:	2180      	movs	r1, #128	; 0x80
 800274e:	4842      	ldr	r0, [pc, #264]	; (8002858 <distance_sensor+0x130>)
 8002750:	f003 f904 	bl	800595c <HAL_GPIO_WritePin>

    pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8002754:	f001 f996 	bl	8003a84 <HAL_GetTick>
 8002758:	4603      	mov	r3, r0
 800275a:	4a41      	ldr	r2, [pc, #260]	; (8002860 <distance_sensor+0x138>)
 800275c:	6013      	str	r3, [r2, #0]
    // wait for the echo pin to go high
    while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 800275e:	bf00      	nop
 8002760:	2140      	movs	r1, #64	; 0x40
 8002762:	483d      	ldr	r0, [pc, #244]	; (8002858 <distance_sensor+0x130>)
 8002764:	f003 f8e2 	bl	800592c <HAL_GPIO_ReadPin>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d108      	bne.n	8002780 <distance_sensor+0x58>
 800276e:	4b3c      	ldr	r3, [pc, #240]	; (8002860 <distance_sensor+0x138>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f103 040a 	add.w	r4, r3, #10
 8002776:	f001 f985 	bl	8003a84 <HAL_GetTick>
 800277a:	4603      	mov	r3, r0
 800277c:	429c      	cmp	r4, r3
 800277e:	d8ef      	bhi.n	8002760 <distance_sensor+0x38>
    Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 8002780:	4b36      	ldr	r3, [pc, #216]	; (800285c <distance_sensor+0x134>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002786:	4a37      	ldr	r2, [pc, #220]	; (8002864 <distance_sensor+0x13c>)
 8002788:	6013      	str	r3, [r2, #0]

    pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 800278a:	f001 f97b 	bl	8003a84 <HAL_GetTick>
 800278e:	4603      	mov	r3, r0
 8002790:	4a33      	ldr	r2, [pc, #204]	; (8002860 <distance_sensor+0x138>)
 8002792:	6013      	str	r3, [r2, #0]
    // wait for the echo pin to go low
    while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 8002794:	bf00      	nop
 8002796:	2140      	movs	r1, #64	; 0x40
 8002798:	482f      	ldr	r0, [pc, #188]	; (8002858 <distance_sensor+0x130>)
 800279a:	f003 f8c7 	bl	800592c <HAL_GPIO_ReadPin>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d008      	beq.n	80027b6 <distance_sensor+0x8e>
 80027a4:	4b2e      	ldr	r3, [pc, #184]	; (8002860 <distance_sensor+0x138>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f103 0432 	add.w	r4, r3, #50	; 0x32
 80027ac:	f001 f96a 	bl	8003a84 <HAL_GetTick>
 80027b0:	4603      	mov	r3, r0
 80027b2:	429c      	cmp	r4, r3
 80027b4:	d8ef      	bhi.n	8002796 <distance_sensor+0x6e>
    Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 80027b6:	4b29      	ldr	r3, [pc, #164]	; (800285c <distance_sensor+0x134>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027bc:	4a2a      	ldr	r2, [pc, #168]	; (8002868 <distance_sensor+0x140>)
 80027be:	6013      	str	r3, [r2, #0]

    Distance = (Value2-Value1)* 0.017/2;
 80027c0:	4b29      	ldr	r3, [pc, #164]	; (8002868 <distance_sensor+0x140>)
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	4b27      	ldr	r3, [pc, #156]	; (8002864 <distance_sensor+0x13c>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7fd feaa 	bl	8000524 <__aeabi_ui2d>
 80027d0:	a31f      	add	r3, pc, #124	; (adr r3, 8002850 <distance_sensor+0x128>)
 80027d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d6:	f7fd ff1f 	bl	8000618 <__aeabi_dmul>
 80027da:	4602      	mov	r2, r0
 80027dc:	460b      	mov	r3, r1
 80027de:	4610      	mov	r0, r2
 80027e0:	4619      	mov	r1, r3
 80027e2:	f04f 0200 	mov.w	r2, #0
 80027e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027ea:	f7fe f83f 	bl	800086c <__aeabi_ddiv>
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
 80027f2:	4610      	mov	r0, r2
 80027f4:	4619      	mov	r1, r3
 80027f6:	f7fe fa07 	bl	8000c08 <__aeabi_d2f>
 80027fa:	4603      	mov	r3, r0
 80027fc:	4a1b      	ldr	r2, [pc, #108]	; (800286c <distance_sensor+0x144>)
 80027fe:	6013      	str	r3, [r2, #0]

    Distance_Sum = Distance + Distance_Sum;
 8002800:	4b1a      	ldr	r3, [pc, #104]	; (800286c <distance_sensor+0x144>)
 8002802:	ed93 7a00 	vldr	s14, [r3]
 8002806:	4b1a      	ldr	r3, [pc, #104]	; (8002870 <distance_sensor+0x148>)
 8002808:	edd3 7a00 	vldr	s15, [r3]
 800280c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002810:	4b17      	ldr	r3, [pc, #92]	; (8002870 <distance_sensor+0x148>)
 8002812:	edc3 7a00 	vstr	s15, [r3]
    	  j++;
 8002816:	4b17      	ldr	r3, [pc, #92]	; (8002874 <distance_sensor+0x14c>)
 8002818:	881b      	ldrh	r3, [r3, #0]
 800281a:	3301      	adds	r3, #1
 800281c:	b29a      	uxth	r2, r3
 800281e:	4b15      	ldr	r3, [pc, #84]	; (8002874 <distance_sensor+0x14c>)
 8002820:	801a      	strh	r2, [r3, #0]
    	 	 if(j==200)
 8002822:	4b14      	ldr	r3, [pc, #80]	; (8002874 <distance_sensor+0x14c>)
 8002824:	881b      	ldrh	r3, [r3, #0]
 8002826:	2bc8      	cmp	r3, #200	; 0xc8
 8002828:	d110      	bne.n	800284c <distance_sensor+0x124>
    	 	  {
    	 		Distance_Avg = Distance_Sum/201;
 800282a:	4b11      	ldr	r3, [pc, #68]	; (8002870 <distance_sensor+0x148>)
 800282c:	ed93 7a00 	vldr	s14, [r3]
 8002830:	eddf 6a11 	vldr	s13, [pc, #68]	; 8002878 <distance_sensor+0x150>
 8002834:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002838:	4b10      	ldr	r3, [pc, #64]	; (800287c <distance_sensor+0x154>)
 800283a:	edc3 7a00 	vstr	s15, [r3]

    	 			  j=0;
 800283e:	4b0d      	ldr	r3, [pc, #52]	; (8002874 <distance_sensor+0x14c>)
 8002840:	2200      	movs	r2, #0
 8002842:	801a      	strh	r2, [r3, #0]
    	 			 Distance_Sum=0;
 8002844:	4b0a      	ldr	r3, [pc, #40]	; (8002870 <distance_sensor+0x148>)
 8002846:	f04f 0200 	mov.w	r2, #0
 800284a:	601a      	str	r2, [r3, #0]

    //     printf("Distance = %f \r\n",Distance);
	//      sprintf((char *)buffer, "%d \r\n",Distance);
		 //     HAL_UART_Transmit(&huart3, buffer, strlen((char *)buffer), 100);

}
 800284c:	bf00      	nop
 800284e:	bd98      	pop	{r3, r4, r7, pc}
 8002850:	b020c49c 	.word	0xb020c49c
 8002854:	3f916872 	.word	0x3f916872
 8002858:	40020c00 	.word	0x40020c00
 800285c:	2000069c 	.word	0x2000069c
 8002860:	20000e64 	.word	0x20000e64
 8002864:	20000e68 	.word	0x20000e68
 8002868:	20000e6c 	.word	0x20000e6c
 800286c:	20000e70 	.word	0x20000e70
 8002870:	20000e74 	.word	0x20000e74
 8002874:	20000e7c 	.word	0x20000e7c
 8002878:	43490000 	.word	0x43490000
 800287c:	20000e78 	.word	0x20000e78

08002880 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002886:	2300      	movs	r3, #0
 8002888:	607b      	str	r3, [r7, #4]
 800288a:	4b10      	ldr	r3, [pc, #64]	; (80028cc <HAL_MspInit+0x4c>)
 800288c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288e:	4a0f      	ldr	r2, [pc, #60]	; (80028cc <HAL_MspInit+0x4c>)
 8002890:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002894:	6453      	str	r3, [r2, #68]	; 0x44
 8002896:	4b0d      	ldr	r3, [pc, #52]	; (80028cc <HAL_MspInit+0x4c>)
 8002898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800289e:	607b      	str	r3, [r7, #4]
 80028a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	603b      	str	r3, [r7, #0]
 80028a6:	4b09      	ldr	r3, [pc, #36]	; (80028cc <HAL_MspInit+0x4c>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	4a08      	ldr	r2, [pc, #32]	; (80028cc <HAL_MspInit+0x4c>)
 80028ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028b0:	6413      	str	r3, [r2, #64]	; 0x40
 80028b2:	4b06      	ldr	r3, [pc, #24]	; (80028cc <HAL_MspInit+0x4c>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ba:	603b      	str	r3, [r7, #0]
 80028bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	40023800 	.word	0x40023800

080028d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b08a      	sub	sp, #40	; 0x28
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d8:	f107 0314 	add.w	r3, r7, #20
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	605a      	str	r2, [r3, #4]
 80028e2:	609a      	str	r2, [r3, #8]
 80028e4:	60da      	str	r2, [r3, #12]
 80028e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a40      	ldr	r2, [pc, #256]	; (80029f0 <HAL_ADC_MspInit+0x120>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d17a      	bne.n	80029e8 <HAL_ADC_MspInit+0x118>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	613b      	str	r3, [r7, #16]
 80028f6:	4b3f      	ldr	r3, [pc, #252]	; (80029f4 <HAL_ADC_MspInit+0x124>)
 80028f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fa:	4a3e      	ldr	r2, [pc, #248]	; (80029f4 <HAL_ADC_MspInit+0x124>)
 80028fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002900:	6453      	str	r3, [r2, #68]	; 0x44
 8002902:	4b3c      	ldr	r3, [pc, #240]	; (80029f4 <HAL_ADC_MspInit+0x124>)
 8002904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800290a:	613b      	str	r3, [r7, #16]
 800290c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800290e:	2300      	movs	r3, #0
 8002910:	60fb      	str	r3, [r7, #12]
 8002912:	4b38      	ldr	r3, [pc, #224]	; (80029f4 <HAL_ADC_MspInit+0x124>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	4a37      	ldr	r2, [pc, #220]	; (80029f4 <HAL_ADC_MspInit+0x124>)
 8002918:	f043 0320 	orr.w	r3, r3, #32
 800291c:	6313      	str	r3, [r2, #48]	; 0x30
 800291e:	4b35      	ldr	r3, [pc, #212]	; (80029f4 <HAL_ADC_MspInit+0x124>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	f003 0320 	and.w	r3, r3, #32
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800292a:	2300      	movs	r3, #0
 800292c:	60bb      	str	r3, [r7, #8]
 800292e:	4b31      	ldr	r3, [pc, #196]	; (80029f4 <HAL_ADC_MspInit+0x124>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	4a30      	ldr	r2, [pc, #192]	; (80029f4 <HAL_ADC_MspInit+0x124>)
 8002934:	f043 0304 	orr.w	r3, r3, #4
 8002938:	6313      	str	r3, [r2, #48]	; 0x30
 800293a:	4b2e      	ldr	r3, [pc, #184]	; (80029f4 <HAL_ADC_MspInit+0x124>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	f003 0304 	and.w	r3, r3, #4
 8002942:	60bb      	str	r3, [r7, #8]
 8002944:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PF4     ------> ADC3_IN14
    PC2     ------> ADC3_IN12
    PC3     ------> ADC3_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002946:	2310      	movs	r3, #16
 8002948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800294a:	2303      	movs	r3, #3
 800294c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294e:	2300      	movs	r3, #0
 8002950:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002952:	f107 0314 	add.w	r3, r7, #20
 8002956:	4619      	mov	r1, r3
 8002958:	4827      	ldr	r0, [pc, #156]	; (80029f8 <HAL_ADC_MspInit+0x128>)
 800295a:	f002 fe3b 	bl	80055d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800295e:	230c      	movs	r3, #12
 8002960:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002962:	2303      	movs	r3, #3
 8002964:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002966:	2300      	movs	r3, #0
 8002968:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800296a:	f107 0314 	add.w	r3, r7, #20
 800296e:	4619      	mov	r1, r3
 8002970:	4822      	ldr	r0, [pc, #136]	; (80029fc <HAL_ADC_MspInit+0x12c>)
 8002972:	f002 fe2f 	bl	80055d4 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream1;
 8002976:	4b22      	ldr	r3, [pc, #136]	; (8002a00 <HAL_ADC_MspInit+0x130>)
 8002978:	4a22      	ldr	r2, [pc, #136]	; (8002a04 <HAL_ADC_MspInit+0x134>)
 800297a:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 800297c:	4b20      	ldr	r3, [pc, #128]	; (8002a00 <HAL_ADC_MspInit+0x130>)
 800297e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002982:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002984:	4b1e      	ldr	r3, [pc, #120]	; (8002a00 <HAL_ADC_MspInit+0x130>)
 8002986:	2200      	movs	r2, #0
 8002988:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800298a:	4b1d      	ldr	r3, [pc, #116]	; (8002a00 <HAL_ADC_MspInit+0x130>)
 800298c:	2200      	movs	r2, #0
 800298e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002990:	4b1b      	ldr	r3, [pc, #108]	; (8002a00 <HAL_ADC_MspInit+0x130>)
 8002992:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002996:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002998:	4b19      	ldr	r3, [pc, #100]	; (8002a00 <HAL_ADC_MspInit+0x130>)
 800299a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800299e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80029a0:	4b17      	ldr	r3, [pc, #92]	; (8002a00 <HAL_ADC_MspInit+0x130>)
 80029a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029a6:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80029a8:	4b15      	ldr	r3, [pc, #84]	; (8002a00 <HAL_ADC_MspInit+0x130>)
 80029aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029ae:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80029b0:	4b13      	ldr	r3, [pc, #76]	; (8002a00 <HAL_ADC_MspInit+0x130>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029b6:	4b12      	ldr	r3, [pc, #72]	; (8002a00 <HAL_ADC_MspInit+0x130>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80029bc:	4810      	ldr	r0, [pc, #64]	; (8002a00 <HAL_ADC_MspInit+0x130>)
 80029be:	f001 fedf 	bl	8004780 <HAL_DMA_Init>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 80029c8:	f7ff fd66 	bl	8002498 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a0c      	ldr	r2, [pc, #48]	; (8002a00 <HAL_ADC_MspInit+0x130>)
 80029d0:	639a      	str	r2, [r3, #56]	; 0x38
 80029d2:	4a0b      	ldr	r2, [pc, #44]	; (8002a00 <HAL_ADC_MspInit+0x130>)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80029d8:	2200      	movs	r2, #0
 80029da:	2100      	movs	r1, #0
 80029dc:	2012      	movs	r0, #18
 80029de:	f001 fe98 	bl	8004712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80029e2:	2012      	movs	r0, #18
 80029e4:	f001 feb1 	bl	800474a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80029e8:	bf00      	nop
 80029ea:	3728      	adds	r7, #40	; 0x28
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40012200 	.word	0x40012200
 80029f4:	40023800 	.word	0x40023800
 80029f8:	40021400 	.word	0x40021400
 80029fc:	40020800 	.word	0x40020800
 8002a00:	2000058c 	.word	0x2000058c
 8002a04:	40026428 	.word	0x40026428

08002a08 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b08e      	sub	sp, #56	; 0x38
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	605a      	str	r2, [r3, #4]
 8002a1a:	609a      	str	r2, [r3, #8]
 8002a1c:	60da      	str	r2, [r3, #12]
 8002a1e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a55      	ldr	r2, [pc, #340]	; (8002b7c <HAL_ETH_MspInit+0x174>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	f040 80a4 	bne.w	8002b74 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	623b      	str	r3, [r7, #32]
 8002a30:	4b53      	ldr	r3, [pc, #332]	; (8002b80 <HAL_ETH_MspInit+0x178>)
 8002a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a34:	4a52      	ldr	r2, [pc, #328]	; (8002b80 <HAL_ETH_MspInit+0x178>)
 8002a36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a3a:	6313      	str	r3, [r2, #48]	; 0x30
 8002a3c:	4b50      	ldr	r3, [pc, #320]	; (8002b80 <HAL_ETH_MspInit+0x178>)
 8002a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a44:	623b      	str	r3, [r7, #32]
 8002a46:	6a3b      	ldr	r3, [r7, #32]
 8002a48:	2300      	movs	r3, #0
 8002a4a:	61fb      	str	r3, [r7, #28]
 8002a4c:	4b4c      	ldr	r3, [pc, #304]	; (8002b80 <HAL_ETH_MspInit+0x178>)
 8002a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a50:	4a4b      	ldr	r2, [pc, #300]	; (8002b80 <HAL_ETH_MspInit+0x178>)
 8002a52:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a56:	6313      	str	r3, [r2, #48]	; 0x30
 8002a58:	4b49      	ldr	r3, [pc, #292]	; (8002b80 <HAL_ETH_MspInit+0x178>)
 8002a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a60:	61fb      	str	r3, [r7, #28]
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	2300      	movs	r3, #0
 8002a66:	61bb      	str	r3, [r7, #24]
 8002a68:	4b45      	ldr	r3, [pc, #276]	; (8002b80 <HAL_ETH_MspInit+0x178>)
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6c:	4a44      	ldr	r2, [pc, #272]	; (8002b80 <HAL_ETH_MspInit+0x178>)
 8002a6e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a72:	6313      	str	r3, [r2, #48]	; 0x30
 8002a74:	4b42      	ldr	r3, [pc, #264]	; (8002b80 <HAL_ETH_MspInit+0x178>)
 8002a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a7c:	61bb      	str	r3, [r7, #24]
 8002a7e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a80:	2300      	movs	r3, #0
 8002a82:	617b      	str	r3, [r7, #20]
 8002a84:	4b3e      	ldr	r3, [pc, #248]	; (8002b80 <HAL_ETH_MspInit+0x178>)
 8002a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a88:	4a3d      	ldr	r2, [pc, #244]	; (8002b80 <HAL_ETH_MspInit+0x178>)
 8002a8a:	f043 0304 	orr.w	r3, r3, #4
 8002a8e:	6313      	str	r3, [r2, #48]	; 0x30
 8002a90:	4b3b      	ldr	r3, [pc, #236]	; (8002b80 <HAL_ETH_MspInit+0x178>)
 8002a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a94:	f003 0304 	and.w	r3, r3, #4
 8002a98:	617b      	str	r3, [r7, #20]
 8002a9a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	613b      	str	r3, [r7, #16]
 8002aa0:	4b37      	ldr	r3, [pc, #220]	; (8002b80 <HAL_ETH_MspInit+0x178>)
 8002aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa4:	4a36      	ldr	r2, [pc, #216]	; (8002b80 <HAL_ETH_MspInit+0x178>)
 8002aa6:	f043 0301 	orr.w	r3, r3, #1
 8002aaa:	6313      	str	r3, [r2, #48]	; 0x30
 8002aac:	4b34      	ldr	r3, [pc, #208]	; (8002b80 <HAL_ETH_MspInit+0x178>)
 8002aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	613b      	str	r3, [r7, #16]
 8002ab6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab8:	2300      	movs	r3, #0
 8002aba:	60fb      	str	r3, [r7, #12]
 8002abc:	4b30      	ldr	r3, [pc, #192]	; (8002b80 <HAL_ETH_MspInit+0x178>)
 8002abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac0:	4a2f      	ldr	r2, [pc, #188]	; (8002b80 <HAL_ETH_MspInit+0x178>)
 8002ac2:	f043 0302 	orr.w	r3, r3, #2
 8002ac6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac8:	4b2d      	ldr	r3, [pc, #180]	; (8002b80 <HAL_ETH_MspInit+0x178>)
 8002aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	60bb      	str	r3, [r7, #8]
 8002ad8:	4b29      	ldr	r3, [pc, #164]	; (8002b80 <HAL_ETH_MspInit+0x178>)
 8002ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002adc:	4a28      	ldr	r2, [pc, #160]	; (8002b80 <HAL_ETH_MspInit+0x178>)
 8002ade:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ae2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae4:	4b26      	ldr	r3, [pc, #152]	; (8002b80 <HAL_ETH_MspInit+0x178>)
 8002ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aec:	60bb      	str	r3, [r7, #8]
 8002aee:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002af0:	2332      	movs	r3, #50	; 0x32
 8002af2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af4:	2302      	movs	r3, #2
 8002af6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af8:	2300      	movs	r3, #0
 8002afa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002afc:	2303      	movs	r3, #3
 8002afe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002b00:	230b      	movs	r3, #11
 8002b02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b08:	4619      	mov	r1, r3
 8002b0a:	481e      	ldr	r0, [pc, #120]	; (8002b84 <HAL_ETH_MspInit+0x17c>)
 8002b0c:	f002 fd62 	bl	80055d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002b10:	2386      	movs	r3, #134	; 0x86
 8002b12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b14:	2302      	movs	r3, #2
 8002b16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002b20:	230b      	movs	r3, #11
 8002b22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4817      	ldr	r0, [pc, #92]	; (8002b88 <HAL_ETH_MspInit+0x180>)
 8002b2c:	f002 fd52 	bl	80055d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002b30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b36:	2302      	movs	r3, #2
 8002b38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002b42:	230b      	movs	r3, #11
 8002b44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002b46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	480f      	ldr	r0, [pc, #60]	; (8002b8c <HAL_ETH_MspInit+0x184>)
 8002b4e:	f002 fd41 	bl	80055d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002b52:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002b56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b58:	2302      	movs	r3, #2
 8002b5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b60:	2303      	movs	r3, #3
 8002b62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002b64:	230b      	movs	r3, #11
 8002b66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4808      	ldr	r0, [pc, #32]	; (8002b90 <HAL_ETH_MspInit+0x188>)
 8002b70:	f002 fd30 	bl	80055d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002b74:	bf00      	nop
 8002b76:	3738      	adds	r7, #56	; 0x38
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40028000 	.word	0x40028000
 8002b80:	40023800 	.word	0x40023800
 8002b84:	40020800 	.word	0x40020800
 8002b88:	40020000 	.word	0x40020000
 8002b8c:	40020400 	.word	0x40020400
 8002b90:	40021800 	.word	0x40021800

08002b94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b088      	sub	sp, #32
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a54      	ldr	r2, [pc, #336]	; (8002cf4 <HAL_TIM_Base_MspInit+0x160>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d10e      	bne.n	8002bc4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61fb      	str	r3, [r7, #28]
 8002baa:	4b53      	ldr	r3, [pc, #332]	; (8002cf8 <HAL_TIM_Base_MspInit+0x164>)
 8002bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bae:	4a52      	ldr	r2, [pc, #328]	; (8002cf8 <HAL_TIM_Base_MspInit+0x164>)
 8002bb0:	f043 0301 	orr.w	r3, r3, #1
 8002bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002bb6:	4b50      	ldr	r3, [pc, #320]	; (8002cf8 <HAL_TIM_Base_MspInit+0x164>)
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	61fb      	str	r3, [r7, #28]
 8002bc0:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002bc2:	e092      	b.n	8002cea <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM3)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a4c      	ldr	r2, [pc, #304]	; (8002cfc <HAL_TIM_Base_MspInit+0x168>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d116      	bne.n	8002bfc <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61bb      	str	r3, [r7, #24]
 8002bd2:	4b49      	ldr	r3, [pc, #292]	; (8002cf8 <HAL_TIM_Base_MspInit+0x164>)
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	4a48      	ldr	r2, [pc, #288]	; (8002cf8 <HAL_TIM_Base_MspInit+0x164>)
 8002bd8:	f043 0302 	orr.w	r3, r3, #2
 8002bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8002bde:	4b46      	ldr	r3, [pc, #280]	; (8002cf8 <HAL_TIM_Base_MspInit+0x164>)
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	61bb      	str	r3, [r7, #24]
 8002be8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002bea:	2200      	movs	r2, #0
 8002bec:	2100      	movs	r1, #0
 8002bee:	201d      	movs	r0, #29
 8002bf0:	f001 fd8f 	bl	8004712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002bf4:	201d      	movs	r0, #29
 8002bf6:	f001 fda8 	bl	800474a <HAL_NVIC_EnableIRQ>
}
 8002bfa:	e076      	b.n	8002cea <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM6)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a3f      	ldr	r2, [pc, #252]	; (8002d00 <HAL_TIM_Base_MspInit+0x16c>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d116      	bne.n	8002c34 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	617b      	str	r3, [r7, #20]
 8002c0a:	4b3b      	ldr	r3, [pc, #236]	; (8002cf8 <HAL_TIM_Base_MspInit+0x164>)
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	4a3a      	ldr	r2, [pc, #232]	; (8002cf8 <HAL_TIM_Base_MspInit+0x164>)
 8002c10:	f043 0310 	orr.w	r3, r3, #16
 8002c14:	6413      	str	r3, [r2, #64]	; 0x40
 8002c16:	4b38      	ldr	r3, [pc, #224]	; (8002cf8 <HAL_TIM_Base_MspInit+0x164>)
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	f003 0310 	and.w	r3, r3, #16
 8002c1e:	617b      	str	r3, [r7, #20]
 8002c20:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8002c22:	2200      	movs	r2, #0
 8002c24:	2106      	movs	r1, #6
 8002c26:	2036      	movs	r0, #54	; 0x36
 8002c28:	f001 fd73 	bl	8004712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002c2c:	2036      	movs	r0, #54	; 0x36
 8002c2e:	f001 fd8c 	bl	800474a <HAL_NVIC_EnableIRQ>
}
 8002c32:	e05a      	b.n	8002cea <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM8)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a32      	ldr	r2, [pc, #200]	; (8002d04 <HAL_TIM_Base_MspInit+0x170>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d11e      	bne.n	8002c7c <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	613b      	str	r3, [r7, #16]
 8002c42:	4b2d      	ldr	r3, [pc, #180]	; (8002cf8 <HAL_TIM_Base_MspInit+0x164>)
 8002c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c46:	4a2c      	ldr	r2, [pc, #176]	; (8002cf8 <HAL_TIM_Base_MspInit+0x164>)
 8002c48:	f043 0302 	orr.w	r3, r3, #2
 8002c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c4e:	4b2a      	ldr	r3, [pc, #168]	; (8002cf8 <HAL_TIM_Base_MspInit+0x164>)
 8002c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	613b      	str	r3, [r7, #16]
 8002c58:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	202c      	movs	r0, #44	; 0x2c
 8002c60:	f001 fd57 	bl	8004712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002c64:	202c      	movs	r0, #44	; 0x2c
 8002c66:	f001 fd70 	bl	800474a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	202d      	movs	r0, #45	; 0x2d
 8002c70:	f001 fd4f 	bl	8004712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002c74:	202d      	movs	r0, #45	; 0x2d
 8002c76:	f001 fd68 	bl	800474a <HAL_NVIC_EnableIRQ>
}
 8002c7a:	e036      	b.n	8002cea <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM13)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a21      	ldr	r2, [pc, #132]	; (8002d08 <HAL_TIM_Base_MspInit+0x174>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d116      	bne.n	8002cb4 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	4b1b      	ldr	r3, [pc, #108]	; (8002cf8 <HAL_TIM_Base_MspInit+0x164>)
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	4a1a      	ldr	r2, [pc, #104]	; (8002cf8 <HAL_TIM_Base_MspInit+0x164>)
 8002c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c94:	6413      	str	r3, [r2, #64]	; 0x40
 8002c96:	4b18      	ldr	r3, [pc, #96]	; (8002cf8 <HAL_TIM_Base_MspInit+0x164>)
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	202c      	movs	r0, #44	; 0x2c
 8002ca8:	f001 fd33 	bl	8004712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002cac:	202c      	movs	r0, #44	; 0x2c
 8002cae:	f001 fd4c 	bl	800474a <HAL_NVIC_EnableIRQ>
}
 8002cb2:	e01a      	b.n	8002cea <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM14)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a14      	ldr	r2, [pc, #80]	; (8002d0c <HAL_TIM_Base_MspInit+0x178>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d115      	bne.n	8002cea <HAL_TIM_Base_MspInit+0x156>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60bb      	str	r3, [r7, #8]
 8002cc2:	4b0d      	ldr	r3, [pc, #52]	; (8002cf8 <HAL_TIM_Base_MspInit+0x164>)
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	4a0c      	ldr	r2, [pc, #48]	; (8002cf8 <HAL_TIM_Base_MspInit+0x164>)
 8002cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8002cce:	4b0a      	ldr	r3, [pc, #40]	; (8002cf8 <HAL_TIM_Base_MspInit+0x164>)
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd6:	60bb      	str	r3, [r7, #8]
 8002cd8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002cda:	2200      	movs	r2, #0
 8002cdc:	2100      	movs	r1, #0
 8002cde:	202d      	movs	r0, #45	; 0x2d
 8002ce0:	f001 fd17 	bl	8004712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002ce4:	202d      	movs	r0, #45	; 0x2d
 8002ce6:	f001 fd30 	bl	800474a <HAL_NVIC_EnableIRQ>
}
 8002cea:	bf00      	nop
 8002cec:	3720      	adds	r7, #32
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	40010000 	.word	0x40010000
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	40000400 	.word	0x40000400
 8002d00:	40001000 	.word	0x40001000
 8002d04:	40010400 	.word	0x40010400
 8002d08:	40001c00 	.word	0x40001c00
 8002d0c:	40002000 	.word	0x40002000

08002d10 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b08c      	sub	sp, #48	; 0x30
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d18:	f107 031c 	add.w	r3, r7, #28
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	605a      	str	r2, [r3, #4]
 8002d22:	609a      	str	r2, [r3, #8]
 8002d24:	60da      	str	r2, [r3, #12]
 8002d26:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d30:	d14b      	bne.n	8002dca <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d32:	2300      	movs	r3, #0
 8002d34:	61bb      	str	r3, [r7, #24]
 8002d36:	4b58      	ldr	r3, [pc, #352]	; (8002e98 <HAL_TIM_Encoder_MspInit+0x188>)
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	4a57      	ldr	r2, [pc, #348]	; (8002e98 <HAL_TIM_Encoder_MspInit+0x188>)
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	6413      	str	r3, [r2, #64]	; 0x40
 8002d42:	4b55      	ldr	r3, [pc, #340]	; (8002e98 <HAL_TIM_Encoder_MspInit+0x188>)
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	61bb      	str	r3, [r7, #24]
 8002d4c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d4e:	2300      	movs	r3, #0
 8002d50:	617b      	str	r3, [r7, #20]
 8002d52:	4b51      	ldr	r3, [pc, #324]	; (8002e98 <HAL_TIM_Encoder_MspInit+0x188>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	4a50      	ldr	r2, [pc, #320]	; (8002e98 <HAL_TIM_Encoder_MspInit+0x188>)
 8002d58:	f043 0301 	orr.w	r3, r3, #1
 8002d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d5e:	4b4e      	ldr	r3, [pc, #312]	; (8002e98 <HAL_TIM_Encoder_MspInit+0x188>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	617b      	str	r3, [r7, #20]
 8002d68:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	613b      	str	r3, [r7, #16]
 8002d6e:	4b4a      	ldr	r3, [pc, #296]	; (8002e98 <HAL_TIM_Encoder_MspInit+0x188>)
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	4a49      	ldr	r2, [pc, #292]	; (8002e98 <HAL_TIM_Encoder_MspInit+0x188>)
 8002d74:	f043 0302 	orr.w	r3, r3, #2
 8002d78:	6313      	str	r3, [r2, #48]	; 0x30
 8002d7a:	4b47      	ldr	r3, [pc, #284]	; (8002e98 <HAL_TIM_Encoder_MspInit+0x188>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	613b      	str	r3, [r7, #16]
 8002d84:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002d86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d90:	2300      	movs	r3, #0
 8002d92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d94:	2300      	movs	r3, #0
 8002d96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d9c:	f107 031c 	add.w	r3, r7, #28
 8002da0:	4619      	mov	r1, r3
 8002da2:	483e      	ldr	r0, [pc, #248]	; (8002e9c <HAL_TIM_Encoder_MspInit+0x18c>)
 8002da4:	f002 fc16 	bl	80055d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002da8:	2308      	movs	r3, #8
 8002daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dac:	2302      	movs	r3, #2
 8002dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db0:	2300      	movs	r3, #0
 8002db2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db4:	2300      	movs	r3, #0
 8002db6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002db8:	2301      	movs	r3, #1
 8002dba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dbc:	f107 031c 	add.w	r3, r7, #28
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	4837      	ldr	r0, [pc, #220]	; (8002ea0 <HAL_TIM_Encoder_MspInit+0x190>)
 8002dc4:	f002 fc06 	bl	80055d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002dc8:	e061      	b.n	8002e8e <HAL_TIM_Encoder_MspInit+0x17e>
  else if(htim_encoder->Instance==TIM4)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a35      	ldr	r2, [pc, #212]	; (8002ea4 <HAL_TIM_Encoder_MspInit+0x194>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d15c      	bne.n	8002e8e <HAL_TIM_Encoder_MspInit+0x17e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	60fb      	str	r3, [r7, #12]
 8002dd8:	4b2f      	ldr	r3, [pc, #188]	; (8002e98 <HAL_TIM_Encoder_MspInit+0x188>)
 8002dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ddc:	4a2e      	ldr	r2, [pc, #184]	; (8002e98 <HAL_TIM_Encoder_MspInit+0x188>)
 8002dde:	f043 0304 	orr.w	r3, r3, #4
 8002de2:	6413      	str	r3, [r2, #64]	; 0x40
 8002de4:	4b2c      	ldr	r3, [pc, #176]	; (8002e98 <HAL_TIM_Encoder_MspInit+0x188>)
 8002de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de8:	f003 0304 	and.w	r3, r3, #4
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002df0:	2300      	movs	r3, #0
 8002df2:	60bb      	str	r3, [r7, #8]
 8002df4:	4b28      	ldr	r3, [pc, #160]	; (8002e98 <HAL_TIM_Encoder_MspInit+0x188>)
 8002df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df8:	4a27      	ldr	r2, [pc, #156]	; (8002e98 <HAL_TIM_Encoder_MspInit+0x188>)
 8002dfa:	f043 0308 	orr.w	r3, r3, #8
 8002dfe:	6313      	str	r3, [r2, #48]	; 0x30
 8002e00:	4b25      	ldr	r3, [pc, #148]	; (8002e98 <HAL_TIM_Encoder_MspInit+0x188>)
 8002e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e04:	f003 0308 	and.w	r3, r3, #8
 8002e08:	60bb      	str	r3, [r7, #8]
 8002e0a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002e0c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e12:	2302      	movs	r3, #2
 8002e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e16:	2300      	movs	r3, #0
 8002e18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002e1e:	2302      	movs	r3, #2
 8002e20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e22:	f107 031c 	add.w	r3, r7, #28
 8002e26:	4619      	mov	r1, r3
 8002e28:	481f      	ldr	r0, [pc, #124]	; (8002ea8 <HAL_TIM_Encoder_MspInit+0x198>)
 8002e2a:	f002 fbd3 	bl	80055d4 <HAL_GPIO_Init>
    hdma_tim4_up.Instance = DMA1_Stream6;
 8002e2e:	4b1f      	ldr	r3, [pc, #124]	; (8002eac <HAL_TIM_Encoder_MspInit+0x19c>)
 8002e30:	4a1f      	ldr	r2, [pc, #124]	; (8002eb0 <HAL_TIM_Encoder_MspInit+0x1a0>)
 8002e32:	601a      	str	r2, [r3, #0]
    hdma_tim4_up.Init.Channel = DMA_CHANNEL_2;
 8002e34:	4b1d      	ldr	r3, [pc, #116]	; (8002eac <HAL_TIM_Encoder_MspInit+0x19c>)
 8002e36:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002e3a:	605a      	str	r2, [r3, #4]
    hdma_tim4_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e3c:	4b1b      	ldr	r3, [pc, #108]	; (8002eac <HAL_TIM_Encoder_MspInit+0x19c>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	609a      	str	r2, [r3, #8]
    hdma_tim4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e42:	4b1a      	ldr	r3, [pc, #104]	; (8002eac <HAL_TIM_Encoder_MspInit+0x19c>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	60da      	str	r2, [r3, #12]
    hdma_tim4_up.Init.MemInc = DMA_MINC_ENABLE;
 8002e48:	4b18      	ldr	r3, [pc, #96]	; (8002eac <HAL_TIM_Encoder_MspInit+0x19c>)
 8002e4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e4e:	611a      	str	r2, [r3, #16]
    hdma_tim4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e50:	4b16      	ldr	r3, [pc, #88]	; (8002eac <HAL_TIM_Encoder_MspInit+0x19c>)
 8002e52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e56:	615a      	str	r2, [r3, #20]
    hdma_tim4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e58:	4b14      	ldr	r3, [pc, #80]	; (8002eac <HAL_TIM_Encoder_MspInit+0x19c>)
 8002e5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e5e:	619a      	str	r2, [r3, #24]
    hdma_tim4_up.Init.Mode = DMA_NORMAL;
 8002e60:	4b12      	ldr	r3, [pc, #72]	; (8002eac <HAL_TIM_Encoder_MspInit+0x19c>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	61da      	str	r2, [r3, #28]
    hdma_tim4_up.Init.Priority = DMA_PRIORITY_LOW;
 8002e66:	4b11      	ldr	r3, [pc, #68]	; (8002eac <HAL_TIM_Encoder_MspInit+0x19c>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	621a      	str	r2, [r3, #32]
    hdma_tim4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e6c:	4b0f      	ldr	r3, [pc, #60]	; (8002eac <HAL_TIM_Encoder_MspInit+0x19c>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_up) != HAL_OK)
 8002e72:	480e      	ldr	r0, [pc, #56]	; (8002eac <HAL_TIM_Encoder_MspInit+0x19c>)
 8002e74:	f001 fc84 	bl	8004780 <HAL_DMA_Init>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <HAL_TIM_Encoder_MspInit+0x172>
      Error_Handler();
 8002e7e:	f7ff fb0b 	bl	8002498 <Error_Handler>
    __HAL_LINKDMA(htim_encoder,hdma[TIM_DMA_ID_UPDATE],hdma_tim4_up);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a09      	ldr	r2, [pc, #36]	; (8002eac <HAL_TIM_Encoder_MspInit+0x19c>)
 8002e86:	621a      	str	r2, [r3, #32]
 8002e88:	4a08      	ldr	r2, [pc, #32]	; (8002eac <HAL_TIM_Encoder_MspInit+0x19c>)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002e8e:	bf00      	nop
 8002e90:	3730      	adds	r7, #48	; 0x30
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	40020000 	.word	0x40020000
 8002ea0:	40020400 	.word	0x40020400
 8002ea4:	40000800 	.word	0x40000800
 8002ea8:	40020c00 	.word	0x40020c00
 8002eac:	200008dc 	.word	0x200008dc
 8002eb0:	400260a0 	.word	0x400260a0

08002eb4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b08a      	sub	sp, #40	; 0x28
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ebc:	f107 0314 	add.w	r3, r7, #20
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	605a      	str	r2, [r3, #4]
 8002ec6:	609a      	str	r2, [r3, #8]
 8002ec8:	60da      	str	r2, [r3, #12]
 8002eca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a33      	ldr	r2, [pc, #204]	; (8002fa0 <HAL_TIM_MspPostInit+0xec>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d13c      	bne.n	8002f50 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	613b      	str	r3, [r7, #16]
 8002eda:	4b32      	ldr	r3, [pc, #200]	; (8002fa4 <HAL_TIM_MspPostInit+0xf0>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	4a31      	ldr	r2, [pc, #196]	; (8002fa4 <HAL_TIM_MspPostInit+0xf0>)
 8002ee0:	f043 0301 	orr.w	r3, r3, #1
 8002ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee6:	4b2f      	ldr	r3, [pc, #188]	; (8002fa4 <HAL_TIM_MspPostInit+0xf0>)
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	613b      	str	r3, [r7, #16]
 8002ef0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60fb      	str	r3, [r7, #12]
 8002ef6:	4b2b      	ldr	r3, [pc, #172]	; (8002fa4 <HAL_TIM_MspPostInit+0xf0>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efa:	4a2a      	ldr	r2, [pc, #168]	; (8002fa4 <HAL_TIM_MspPostInit+0xf0>)
 8002efc:	f043 0304 	orr.w	r3, r3, #4
 8002f00:	6313      	str	r3, [r2, #48]	; 0x30
 8002f02:	4b28      	ldr	r3, [pc, #160]	; (8002fa4 <HAL_TIM_MspPostInit+0xf0>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	f003 0304 	and.w	r3, r3, #4
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002f0e:	2340      	movs	r3, #64	; 0x40
 8002f10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f12:	2302      	movs	r3, #2
 8002f14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f16:	2300      	movs	r3, #0
 8002f18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002f1e:	2302      	movs	r3, #2
 8002f20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f22:	f107 0314 	add.w	r3, r7, #20
 8002f26:	4619      	mov	r1, r3
 8002f28:	481f      	ldr	r0, [pc, #124]	; (8002fa8 <HAL_TIM_MspPostInit+0xf4>)
 8002f2a:	f002 fb53 	bl	80055d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002f2e:	2380      	movs	r3, #128	; 0x80
 8002f30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f32:	2302      	movs	r3, #2
 8002f34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f36:	2300      	movs	r3, #0
 8002f38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002f3e:	2302      	movs	r3, #2
 8002f40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f42:	f107 0314 	add.w	r3, r7, #20
 8002f46:	4619      	mov	r1, r3
 8002f48:	4818      	ldr	r0, [pc, #96]	; (8002fac <HAL_TIM_MspPostInit+0xf8>)
 8002f4a:	f002 fb43 	bl	80055d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8002f4e:	e023      	b.n	8002f98 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM13)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a16      	ldr	r2, [pc, #88]	; (8002fb0 <HAL_TIM_MspPostInit+0xfc>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d11e      	bne.n	8002f98 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60bb      	str	r3, [r7, #8]
 8002f5e:	4b11      	ldr	r3, [pc, #68]	; (8002fa4 <HAL_TIM_MspPostInit+0xf0>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f62:	4a10      	ldr	r2, [pc, #64]	; (8002fa4 <HAL_TIM_MspPostInit+0xf0>)
 8002f64:	f043 0320 	orr.w	r3, r3, #32
 8002f68:	6313      	str	r3, [r2, #48]	; 0x30
 8002f6a:	4b0e      	ldr	r3, [pc, #56]	; (8002fa4 <HAL_TIM_MspPostInit+0xf0>)
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6e:	f003 0320 	and.w	r3, r3, #32
 8002f72:	60bb      	str	r3, [r7, #8]
 8002f74:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002f76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f80:	2300      	movs	r3, #0
 8002f82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f84:	2300      	movs	r3, #0
 8002f86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002f88:	2309      	movs	r3, #9
 8002f8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f8c:	f107 0314 	add.w	r3, r7, #20
 8002f90:	4619      	mov	r1, r3
 8002f92:	4808      	ldr	r0, [pc, #32]	; (8002fb4 <HAL_TIM_MspPostInit+0x100>)
 8002f94:	f002 fb1e 	bl	80055d4 <HAL_GPIO_Init>
}
 8002f98:	bf00      	nop
 8002f9a:	3728      	adds	r7, #40	; 0x28
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40000400 	.word	0x40000400
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	40020000 	.word	0x40020000
 8002fac:	40020800 	.word	0x40020800
 8002fb0:	40001c00 	.word	0x40001c00
 8002fb4:	40021400 	.word	0x40021400

08002fb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b08c      	sub	sp, #48	; 0x30
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc0:	f107 031c 	add.w	r3, r7, #28
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	605a      	str	r2, [r3, #4]
 8002fca:	609a      	str	r2, [r3, #8]
 8002fcc:	60da      	str	r2, [r3, #12]
 8002fce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a3b      	ldr	r2, [pc, #236]	; (80030c4 <HAL_UART_MspInit+0x10c>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d135      	bne.n	8003046 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002fda:	2300      	movs	r3, #0
 8002fdc:	61bb      	str	r3, [r7, #24]
 8002fde:	4b3a      	ldr	r3, [pc, #232]	; (80030c8 <HAL_UART_MspInit+0x110>)
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	4a39      	ldr	r2, [pc, #228]	; (80030c8 <HAL_UART_MspInit+0x110>)
 8002fe4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8002fea:	4b37      	ldr	r3, [pc, #220]	; (80030c8 <HAL_UART_MspInit+0x110>)
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ff2:	61bb      	str	r3, [r7, #24]
 8002ff4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	617b      	str	r3, [r7, #20]
 8002ffa:	4b33      	ldr	r3, [pc, #204]	; (80030c8 <HAL_UART_MspInit+0x110>)
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffe:	4a32      	ldr	r2, [pc, #200]	; (80030c8 <HAL_UART_MspInit+0x110>)
 8003000:	f043 0304 	orr.w	r3, r3, #4
 8003004:	6313      	str	r3, [r2, #48]	; 0x30
 8003006:	4b30      	ldr	r3, [pc, #192]	; (80030c8 <HAL_UART_MspInit+0x110>)
 8003008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300a:	f003 0304 	and.w	r3, r3, #4
 800300e:	617b      	str	r3, [r7, #20]
 8003010:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003012:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003018:	2302      	movs	r3, #2
 800301a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301c:	2300      	movs	r3, #0
 800301e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003020:	2303      	movs	r3, #3
 8003022:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003024:	2308      	movs	r3, #8
 8003026:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003028:	f107 031c 	add.w	r3, r7, #28
 800302c:	4619      	mov	r1, r3
 800302e:	4827      	ldr	r0, [pc, #156]	; (80030cc <HAL_UART_MspInit+0x114>)
 8003030:	f002 fad0 	bl	80055d4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003034:	2200      	movs	r2, #0
 8003036:	2100      	movs	r1, #0
 8003038:	2034      	movs	r0, #52	; 0x34
 800303a:	f001 fb6a 	bl	8004712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800303e:	2034      	movs	r0, #52	; 0x34
 8003040:	f001 fb83 	bl	800474a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003044:	e039      	b.n	80030ba <HAL_UART_MspInit+0x102>
  else if(huart->Instance==USART3)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a21      	ldr	r2, [pc, #132]	; (80030d0 <HAL_UART_MspInit+0x118>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d134      	bne.n	80030ba <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003050:	2300      	movs	r3, #0
 8003052:	613b      	str	r3, [r7, #16]
 8003054:	4b1c      	ldr	r3, [pc, #112]	; (80030c8 <HAL_UART_MspInit+0x110>)
 8003056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003058:	4a1b      	ldr	r2, [pc, #108]	; (80030c8 <HAL_UART_MspInit+0x110>)
 800305a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800305e:	6413      	str	r3, [r2, #64]	; 0x40
 8003060:	4b19      	ldr	r3, [pc, #100]	; (80030c8 <HAL_UART_MspInit+0x110>)
 8003062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003064:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003068:	613b      	str	r3, [r7, #16]
 800306a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800306c:	2300      	movs	r3, #0
 800306e:	60fb      	str	r3, [r7, #12]
 8003070:	4b15      	ldr	r3, [pc, #84]	; (80030c8 <HAL_UART_MspInit+0x110>)
 8003072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003074:	4a14      	ldr	r2, [pc, #80]	; (80030c8 <HAL_UART_MspInit+0x110>)
 8003076:	f043 0308 	orr.w	r3, r3, #8
 800307a:	6313      	str	r3, [r2, #48]	; 0x30
 800307c:	4b12      	ldr	r3, [pc, #72]	; (80030c8 <HAL_UART_MspInit+0x110>)
 800307e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003080:	f003 0308 	and.w	r3, r3, #8
 8003084:	60fb      	str	r3, [r7, #12]
 8003086:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003088:	f44f 7340 	mov.w	r3, #768	; 0x300
 800308c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800308e:	2302      	movs	r3, #2
 8003090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003092:	2300      	movs	r3, #0
 8003094:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003096:	2303      	movs	r3, #3
 8003098:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800309a:	2307      	movs	r3, #7
 800309c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800309e:	f107 031c 	add.w	r3, r7, #28
 80030a2:	4619      	mov	r1, r3
 80030a4:	480b      	ldr	r0, [pc, #44]	; (80030d4 <HAL_UART_MspInit+0x11c>)
 80030a6:	f002 fa95 	bl	80055d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80030aa:	2200      	movs	r2, #0
 80030ac:	2100      	movs	r1, #0
 80030ae:	2027      	movs	r0, #39	; 0x27
 80030b0:	f001 fb2f 	bl	8004712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80030b4:	2027      	movs	r0, #39	; 0x27
 80030b6:	f001 fb48 	bl	800474a <HAL_NVIC_EnableIRQ>
}
 80030ba:	bf00      	nop
 80030bc:	3730      	adds	r7, #48	; 0x30
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	40004c00 	.word	0x40004c00
 80030c8:	40023800 	.word	0x40023800
 80030cc:	40020800 	.word	0x40020800
 80030d0:	40004800 	.word	0x40004800
 80030d4:	40020c00 	.word	0x40020c00

080030d8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b08a      	sub	sp, #40	; 0x28
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e0:	f107 0314 	add.w	r3, r7, #20
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	605a      	str	r2, [r3, #4]
 80030ea:	609a      	str	r2, [r3, #8]
 80030ec:	60da      	str	r2, [r3, #12]
 80030ee:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030f8:	d13f      	bne.n	800317a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030fa:	2300      	movs	r3, #0
 80030fc:	613b      	str	r3, [r7, #16]
 80030fe:	4b21      	ldr	r3, [pc, #132]	; (8003184 <HAL_PCD_MspInit+0xac>)
 8003100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003102:	4a20      	ldr	r2, [pc, #128]	; (8003184 <HAL_PCD_MspInit+0xac>)
 8003104:	f043 0301 	orr.w	r3, r3, #1
 8003108:	6313      	str	r3, [r2, #48]	; 0x30
 800310a:	4b1e      	ldr	r3, [pc, #120]	; (8003184 <HAL_PCD_MspInit+0xac>)
 800310c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	613b      	str	r3, [r7, #16]
 8003114:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003116:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800311a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800311c:	2302      	movs	r3, #2
 800311e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003120:	2300      	movs	r3, #0
 8003122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003124:	2303      	movs	r3, #3
 8003126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003128:	230a      	movs	r3, #10
 800312a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800312c:	f107 0314 	add.w	r3, r7, #20
 8003130:	4619      	mov	r1, r3
 8003132:	4815      	ldr	r0, [pc, #84]	; (8003188 <HAL_PCD_MspInit+0xb0>)
 8003134:	f002 fa4e 	bl	80055d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003138:	f44f 7300 	mov.w	r3, #512	; 0x200
 800313c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800313e:	2300      	movs	r3, #0
 8003140:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003142:	2300      	movs	r3, #0
 8003144:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003146:	f107 0314 	add.w	r3, r7, #20
 800314a:	4619      	mov	r1, r3
 800314c:	480e      	ldr	r0, [pc, #56]	; (8003188 <HAL_PCD_MspInit+0xb0>)
 800314e:	f002 fa41 	bl	80055d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003152:	4b0c      	ldr	r3, [pc, #48]	; (8003184 <HAL_PCD_MspInit+0xac>)
 8003154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003156:	4a0b      	ldr	r2, [pc, #44]	; (8003184 <HAL_PCD_MspInit+0xac>)
 8003158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800315c:	6353      	str	r3, [r2, #52]	; 0x34
 800315e:	2300      	movs	r3, #0
 8003160:	60fb      	str	r3, [r7, #12]
 8003162:	4b08      	ldr	r3, [pc, #32]	; (8003184 <HAL_PCD_MspInit+0xac>)
 8003164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003166:	4a07      	ldr	r2, [pc, #28]	; (8003184 <HAL_PCD_MspInit+0xac>)
 8003168:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800316c:	6453      	str	r3, [r2, #68]	; 0x44
 800316e:	4b05      	ldr	r3, [pc, #20]	; (8003184 <HAL_PCD_MspInit+0xac>)
 8003170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003176:	60fb      	str	r3, [r7, #12]
 8003178:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800317a:	bf00      	nop
 800317c:	3728      	adds	r7, #40	; 0x28
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	40023800 	.word	0x40023800
 8003188:	40020000 	.word	0x40020000
 800318c:	00000000 	.word	0x00000000

08003190 <HAL_ADC_ConvCpltCallback>:




void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]

		if(hadc->Instance == hadc3.Instance)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	4b30      	ldr	r3, [pc, #192]	; (8003260 <HAL_ADC_ConvCpltCallback+0xd0>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d14a      	bne.n	800323a <HAL_ADC_ConvCpltCallback+0xaa>

		{

		//	GPIOB->ODR ^= 1<<7;  ok

			battery_V=ADC3_value[2]/67.8*27.667  +2.2
 80031a4:	4b2f      	ldr	r3, [pc, #188]	; (8003264 <HAL_ADC_ConvCpltCallback+0xd4>)
 80031a6:	889b      	ldrh	r3, [r3, #4]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7fd f9cb 	bl	8000544 <__aeabi_i2d>
 80031ae:	a326      	add	r3, pc, #152	; (adr r3, 8003248 <HAL_ADC_ConvCpltCallback+0xb8>)
 80031b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b4:	f7fd fb5a 	bl	800086c <__aeabi_ddiv>
 80031b8:	4602      	mov	r2, r0
 80031ba:	460b      	mov	r3, r1
 80031bc:	4610      	mov	r0, r2
 80031be:	4619      	mov	r1, r3
 80031c0:	a323      	add	r3, pc, #140	; (adr r3, 8003250 <HAL_ADC_ConvCpltCallback+0xc0>)
 80031c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c6:	f7fd fa27 	bl	8000618 <__aeabi_dmul>
 80031ca:	4602      	mov	r2, r0
 80031cc:	460b      	mov	r3, r1
 80031ce:	4610      	mov	r0, r2
 80031d0:	4619      	mov	r1, r3
 80031d2:	a321      	add	r3, pc, #132	; (adr r3, 8003258 <HAL_ADC_ConvCpltCallback+0xc8>)
 80031d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d8:	f7fd f868 	bl	80002ac <__adddf3>
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	4610      	mov	r0, r2
 80031e2:	4619      	mov	r1, r3
 80031e4:	f7fd fd10 	bl	8000c08 <__aeabi_d2f>
 80031e8:	4603      	mov	r3, r0
 80031ea:	4a1f      	ldr	r2, [pc, #124]	; (8003268 <HAL_ADC_ConvCpltCallback+0xd8>)
 80031ec:	6013      	str	r3, [r2, #0]
					;




			 battery_V_sum = battery_V + battery_V_sum;
 80031ee:	4b1e      	ldr	r3, [pc, #120]	; (8003268 <HAL_ADC_ConvCpltCallback+0xd8>)
 80031f0:	ed93 7a00 	vldr	s14, [r3]
 80031f4:	4b1d      	ldr	r3, [pc, #116]	; (800326c <HAL_ADC_ConvCpltCallback+0xdc>)
 80031f6:	edd3 7a00 	vldr	s15, [r3]
 80031fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031fe:	4b1b      	ldr	r3, [pc, #108]	; (800326c <HAL_ADC_ConvCpltCallback+0xdc>)
 8003200:	edc3 7a00 	vstr	s15, [r3]

			    	  k++;
 8003204:	4b1a      	ldr	r3, [pc, #104]	; (8003270 <HAL_ADC_ConvCpltCallback+0xe0>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	3301      	adds	r3, #1
 800320a:	4a19      	ldr	r2, [pc, #100]	; (8003270 <HAL_ADC_ConvCpltCallback+0xe0>)
 800320c:	6013      	str	r3, [r2, #0]
			    	 	 if(k==2000)
 800320e:	4b18      	ldr	r3, [pc, #96]	; (8003270 <HAL_ADC_ConvCpltCallback+0xe0>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003216:	d110      	bne.n	800323a <HAL_ADC_ConvCpltCallback+0xaa>
			    	 	  {
			    	 		battery_V_avg = battery_V_sum/2001;
 8003218:	4b14      	ldr	r3, [pc, #80]	; (800326c <HAL_ADC_ConvCpltCallback+0xdc>)
 800321a:	ed93 7a00 	vldr	s14, [r3]
 800321e:	eddf 6a15 	vldr	s13, [pc, #84]	; 8003274 <HAL_ADC_ConvCpltCallback+0xe4>
 8003222:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003226:	4b14      	ldr	r3, [pc, #80]	; (8003278 <HAL_ADC_ConvCpltCallback+0xe8>)
 8003228:	edc3 7a00 	vstr	s15, [r3]

			    	 			  k=0;
 800322c:	4b10      	ldr	r3, [pc, #64]	; (8003270 <HAL_ADC_ConvCpltCallback+0xe0>)
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]
			    	 			 battery_V_sum=0;
 8003232:	4b0e      	ldr	r3, [pc, #56]	; (800326c <HAL_ADC_ConvCpltCallback+0xdc>)
 8003234:	f04f 0200 	mov.w	r2, #0
 8003238:	601a      	str	r2, [r3, #0]
			    	 	  }


		}

}
 800323a:	bf00      	nop
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	f3af 8000 	nop.w
 8003248:	33333333 	.word	0x33333333
 800324c:	4050f333 	.word	0x4050f333
 8003250:	83126e98 	.word	0x83126e98
 8003254:	403baac0 	.word	0x403baac0
 8003258:	9999999a 	.word	0x9999999a
 800325c:	40019999 	.word	0x40019999
 8003260:	20000544 	.word	0x20000544
 8003264:	200003bc 	.word	0x200003bc
 8003268:	20000e88 	.word	0x20000e88
 800326c:	20000e90 	.word	0x20000e90
 8003270:	20000e84 	.word	0x20000e84
 8003274:	44fa2000 	.word	0x44fa2000
 8003278:	20000e8c 	.word	0x20000e8c

0800327c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003280:	e7fe      	b.n	8003280 <NMI_Handler+0x4>

08003282 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003282:	b480      	push	{r7}
 8003284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003286:	e7fe      	b.n	8003286 <HardFault_Handler+0x4>

08003288 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800328c:	e7fe      	b.n	800328c <MemManage_Handler+0x4>

0800328e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800328e:	b480      	push	{r7}
 8003290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003292:	e7fe      	b.n	8003292 <BusFault_Handler+0x4>

08003294 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003298:	e7fe      	b.n	8003298 <UsageFault_Handler+0x4>

0800329a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800329a:	b480      	push	{r7}
 800329c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800329e:	bf00      	nop
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032ac:	bf00      	nop
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr

080032b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032b6:	b480      	push	{r7}
 80032b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032ba:	bf00      	nop
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032c8:	f000 fbc8 	bl	8003a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032cc:	bf00      	nop
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_up);
 80032d4:	4802      	ldr	r0, [pc, #8]	; (80032e0 <DMA1_Stream6_IRQHandler+0x10>)
 80032d6:	f001 fbeb 	bl	8004ab0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80032da:	bf00      	nop
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	200008dc 	.word	0x200008dc
 80032e4:	00000000 	.word	0x00000000

080032e8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80032e8:	b5b0      	push	{r4, r5, r7, lr}
 80032ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80032ec:	4872      	ldr	r0, [pc, #456]	; (80034b8 <ADC_IRQHandler+0x1d0>)
 80032ee:	f000 fc3c 	bl	8003b6a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */



  ADC3_IN12 = ADC3_value[0];
 80032f2:	4b72      	ldr	r3, [pc, #456]	; (80034bc <ADC_IRQHandler+0x1d4>)
 80032f4:	881a      	ldrh	r2, [r3, #0]
 80032f6:	4b72      	ldr	r3, [pc, #456]	; (80034c0 <ADC_IRQHandler+0x1d8>)
 80032f8:	801a      	strh	r2, [r3, #0]
  ADC3_IN13 = ADC3_value[1];
 80032fa:	4b70      	ldr	r3, [pc, #448]	; (80034bc <ADC_IRQHandler+0x1d4>)
 80032fc:	885a      	ldrh	r2, [r3, #2]
 80032fe:	4b71      	ldr	r3, [pc, #452]	; (80034c4 <ADC_IRQHandler+0x1dc>)
 8003300:	801a      	strh	r2, [r3, #0]




  V=ADC1_0 * 0.6547877;  //3227 > 2113(ref)= 2.58V
 8003302:	4b71      	ldr	r3, [pc, #452]	; (80034c8 <ADC_IRQHandler+0x1e0>)
 8003304:	881b      	ldrh	r3, [r3, #0]
 8003306:	4618      	mov	r0, r3
 8003308:	f7fd f91c 	bl	8000544 <__aeabi_i2d>
 800330c:	a364      	add	r3, pc, #400	; (adr r3, 80034a0 <ADC_IRQHandler+0x1b8>)
 800330e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003312:	f7fd f981 	bl	8000618 <__aeabi_dmul>
 8003316:	4602      	mov	r2, r0
 8003318:	460b      	mov	r3, r1
 800331a:	4610      	mov	r0, r2
 800331c:	4619      	mov	r1, r3
 800331e:	f7fd fc73 	bl	8000c08 <__aeabi_d2f>
 8003322:	4603      	mov	r3, r0
 8003324:	4a69      	ldr	r2, [pc, #420]	; (80034cc <ADC_IRQHandler+0x1e4>)
 8003326:	6013      	str	r3, [r2, #0]
  V1_mV = V *5000 / 4095.0; //[mV]
 8003328:	4b68      	ldr	r3, [pc, #416]	; (80034cc <ADC_IRQHandler+0x1e4>)
 800332a:	edd3 7a00 	vldr	s15, [r3]
 800332e:	ed9f 7a68 	vldr	s14, [pc, #416]	; 80034d0 <ADC_IRQHandler+0x1e8>
 8003332:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003336:	eddf 6a67 	vldr	s13, [pc, #412]	; 80034d4 <ADC_IRQHandler+0x1ec>
 800333a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800333e:	4b66      	ldr	r3, [pc, #408]	; (80034d8 <ADC_IRQHandler+0x1f0>)
 8003340:	edc3 7a00 	vstr	s15, [r3]
  V1_V = V *5 / 4095.0; //[V]
 8003344:	4b61      	ldr	r3, [pc, #388]	; (80034cc <ADC_IRQHandler+0x1e4>)
 8003346:	edd3 7a00 	vldr	s15, [r3]
 800334a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800334e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003352:	eddf 6a60 	vldr	s13, [pc, #384]	; 80034d4 <ADC_IRQHandler+0x1ec>
 8003356:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800335a:	4b60      	ldr	r3, [pc, #384]	; (80034dc <ADC_IRQHandler+0x1f4>)
 800335c:	edc3 7a00 	vstr	s15, [r3]


  if(V1_V - 2.58>=0)
 8003360:	4b5e      	ldr	r3, [pc, #376]	; (80034dc <ADC_IRQHandler+0x1f4>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4618      	mov	r0, r3
 8003366:	f7fd f8ff 	bl	8000568 <__aeabi_f2d>
 800336a:	a34f      	add	r3, pc, #316	; (adr r3, 80034a8 <ADC_IRQHandler+0x1c0>)
 800336c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003370:	f7fc ff9a 	bl	80002a8 <__aeabi_dsub>
 8003374:	4602      	mov	r2, r0
 8003376:	460b      	mov	r3, r1
 8003378:	4610      	mov	r0, r2
 800337a:	4619      	mov	r1, r3
 800337c:	f04f 0200 	mov.w	r2, #0
 8003380:	f04f 0300 	mov.w	r3, #0
 8003384:	f7fd fbce 	bl	8000b24 <__aeabi_dcmpge>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d025      	beq.n	80033da <ADC_IRQHandler+0xf2>
  {
	  amp_A = (V1_V -2.58) /285*1000;
 800338e:	4b53      	ldr	r3, [pc, #332]	; (80034dc <ADC_IRQHandler+0x1f4>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4618      	mov	r0, r3
 8003394:	f7fd f8e8 	bl	8000568 <__aeabi_f2d>
 8003398:	a343      	add	r3, pc, #268	; (adr r3, 80034a8 <ADC_IRQHandler+0x1c0>)
 800339a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800339e:	f7fc ff83 	bl	80002a8 <__aeabi_dsub>
 80033a2:	4602      	mov	r2, r0
 80033a4:	460b      	mov	r3, r1
 80033a6:	4610      	mov	r0, r2
 80033a8:	4619      	mov	r1, r3
 80033aa:	a341      	add	r3, pc, #260	; (adr r3, 80034b0 <ADC_IRQHandler+0x1c8>)
 80033ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b0:	f7fd fa5c 	bl	800086c <__aeabi_ddiv>
 80033b4:	4602      	mov	r2, r0
 80033b6:	460b      	mov	r3, r1
 80033b8:	4610      	mov	r0, r2
 80033ba:	4619      	mov	r1, r3
 80033bc:	f04f 0200 	mov.w	r2, #0
 80033c0:	4b47      	ldr	r3, [pc, #284]	; (80034e0 <ADC_IRQHandler+0x1f8>)
 80033c2:	f7fd f929 	bl	8000618 <__aeabi_dmul>
 80033c6:	4602      	mov	r2, r0
 80033c8:	460b      	mov	r3, r1
 80033ca:	4610      	mov	r0, r2
 80033cc:	4619      	mov	r1, r3
 80033ce:	f7fd fc1b 	bl	8000c08 <__aeabi_d2f>
 80033d2:	4603      	mov	r3, r0
 80033d4:	4a43      	ldr	r2, [pc, #268]	; (80034e4 <ADC_IRQHandler+0x1fc>)
 80033d6:	6013      	str	r3, [r2, #0]
 80033d8:	e03e      	b.n	8003458 <ADC_IRQHandler+0x170>
  }
  else if(V1_V - 2.58 < 0)
 80033da:	4b40      	ldr	r3, [pc, #256]	; (80034dc <ADC_IRQHandler+0x1f4>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4618      	mov	r0, r3
 80033e0:	f7fd f8c2 	bl	8000568 <__aeabi_f2d>
 80033e4:	a330      	add	r3, pc, #192	; (adr r3, 80034a8 <ADC_IRQHandler+0x1c0>)
 80033e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ea:	f7fc ff5d 	bl	80002a8 <__aeabi_dsub>
 80033ee:	4602      	mov	r2, r0
 80033f0:	460b      	mov	r3, r1
 80033f2:	4610      	mov	r0, r2
 80033f4:	4619      	mov	r1, r3
 80033f6:	f04f 0200 	mov.w	r2, #0
 80033fa:	f04f 0300 	mov.w	r3, #0
 80033fe:	f7fd fb7d 	bl	8000afc <__aeabi_dcmplt>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d027      	beq.n	8003458 <ADC_IRQHandler+0x170>
  {
	  amp_A = -(V1_V - 2.58) /285*1000;
 8003408:	4b34      	ldr	r3, [pc, #208]	; (80034dc <ADC_IRQHandler+0x1f4>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4618      	mov	r0, r3
 800340e:	f7fd f8ab 	bl	8000568 <__aeabi_f2d>
 8003412:	a325      	add	r3, pc, #148	; (adr r3, 80034a8 <ADC_IRQHandler+0x1c0>)
 8003414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003418:	f7fc ff46 	bl	80002a8 <__aeabi_dsub>
 800341c:	4602      	mov	r2, r0
 800341e:	460b      	mov	r3, r1
 8003420:	4614      	mov	r4, r2
 8003422:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003426:	a322      	add	r3, pc, #136	; (adr r3, 80034b0 <ADC_IRQHandler+0x1c8>)
 8003428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342c:	4620      	mov	r0, r4
 800342e:	4629      	mov	r1, r5
 8003430:	f7fd fa1c 	bl	800086c <__aeabi_ddiv>
 8003434:	4602      	mov	r2, r0
 8003436:	460b      	mov	r3, r1
 8003438:	4610      	mov	r0, r2
 800343a:	4619      	mov	r1, r3
 800343c:	f04f 0200 	mov.w	r2, #0
 8003440:	4b27      	ldr	r3, [pc, #156]	; (80034e0 <ADC_IRQHandler+0x1f8>)
 8003442:	f7fd f8e9 	bl	8000618 <__aeabi_dmul>
 8003446:	4602      	mov	r2, r0
 8003448:	460b      	mov	r3, r1
 800344a:	4610      	mov	r0, r2
 800344c:	4619      	mov	r1, r3
 800344e:	f7fd fbdb 	bl	8000c08 <__aeabi_d2f>
 8003452:	4603      	mov	r3, r0
 8003454:	4a23      	ldr	r2, [pc, #140]	; (80034e4 <ADC_IRQHandler+0x1fc>)
 8003456:	6013      	str	r3, [r2, #0]
  }


  amp_mA = amp_A * 1000;
 8003458:	4b22      	ldr	r3, [pc, #136]	; (80034e4 <ADC_IRQHandler+0x1fc>)
 800345a:	edd3 7a00 	vldr	s15, [r3]
 800345e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80034e8 <ADC_IRQHandler+0x200>
 8003462:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003466:	4b21      	ldr	r3, [pc, #132]	; (80034ec <ADC_IRQHandler+0x204>)
 8003468:	edc3 7a00 	vstr	s15, [r3]

  sum=amp_mA + sum;
 800346c:	4b1f      	ldr	r3, [pc, #124]	; (80034ec <ADC_IRQHandler+0x204>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4618      	mov	r0, r3
 8003472:	f7fd f879 	bl	8000568 <__aeabi_f2d>
 8003476:	4b1e      	ldr	r3, [pc, #120]	; (80034f0 <ADC_IRQHandler+0x208>)
 8003478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800347c:	f7fc ff16 	bl	80002ac <__adddf3>
 8003480:	4602      	mov	r2, r0
 8003482:	460b      	mov	r3, r1
 8003484:	491a      	ldr	r1, [pc, #104]	; (80034f0 <ADC_IRQHandler+0x208>)
 8003486:	e9c1 2300 	strd	r2, r3, [r1]
 	  i++;
 800348a:	4b1a      	ldr	r3, [pc, #104]	; (80034f4 <ADC_IRQHandler+0x20c>)
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	3301      	adds	r3, #1
 8003490:	b2da      	uxtb	r2, r3
 8003492:	4b18      	ldr	r3, [pc, #96]	; (80034f4 <ADC_IRQHandler+0x20c>)
 8003494:	701a      	strb	r2, [r3, #0]
 	 	  }



  /* USER CODE END ADC_IRQn 1 */
}
 8003496:	bf00      	nop
 8003498:	bdb0      	pop	{r4, r5, r7, pc}
 800349a:	bf00      	nop
 800349c:	f3af 8000 	nop.w
 80034a0:	55aa5680 	.word	0x55aa5680
 80034a4:	3fe4f405 	.word	0x3fe4f405
 80034a8:	0a3d70a4 	.word	0x0a3d70a4
 80034ac:	4004a3d7 	.word	0x4004a3d7
 80034b0:	00000000 	.word	0x00000000
 80034b4:	4071d000 	.word	0x4071d000
 80034b8:	20000544 	.word	0x20000544
 80034bc:	200003bc 	.word	0x200003bc
 80034c0:	20000e94 	.word	0x20000e94
 80034c4:	20000e96 	.word	0x20000e96
 80034c8:	200003b8 	.word	0x200003b8
 80034cc:	20000ea4 	.word	0x20000ea4
 80034d0:	459c4000 	.word	0x459c4000
 80034d4:	457ff000 	.word	0x457ff000
 80034d8:	20000ea8 	.word	0x20000ea8
 80034dc:	20000eac 	.word	0x20000eac
 80034e0:	408f4000 	.word	0x408f4000
 80034e4:	20000eb0 	.word	0x20000eb0
 80034e8:	447a0000 	.word	0x447a0000
 80034ec:	20000eb4 	.word	0x20000eb4
 80034f0:	20000eb8 	.word	0x20000eb8
 80034f4:	20000ec0 	.word	0x20000ec0

080034f8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80034fc:	4802      	ldr	r0, [pc, #8]	; (8003508 <TIM3_IRQHandler+0x10>)
 80034fe:	f003 fc11 	bl	8006d24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */


  /* USER CODE END TIM3_IRQn 1 */
}
 8003502:	bf00      	nop
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	2000072c 	.word	0x2000072c

0800350c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003510:	4802      	ldr	r0, [pc, #8]	; (800351c <USART3_IRQHandler+0x10>)
 8003512:	f004 fc0d 	bl	8007d30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003516:	bf00      	nop
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	2000030c 	.word	0x2000030c

08003520 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003524:	4805      	ldr	r0, [pc, #20]	; (800353c <TIM8_UP_TIM13_IRQHandler+0x1c>)
 8003526:	f003 fbfd 	bl	8006d24 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 800352a:	4805      	ldr	r0, [pc, #20]	; (8003540 <TIM8_UP_TIM13_IRQHandler+0x20>)
 800352c:	f003 fbfa 	bl	8006d24 <HAL_TIM_IRQHandler>
  //0.0001/4

  //GPIOB->ODR ^=1<<0;  //ok


  tim13_flag=1;
 8003530:	4b04      	ldr	r3, [pc, #16]	; (8003544 <TIM8_UP_TIM13_IRQHandler+0x24>)
 8003532:	2201      	movs	r2, #1
 8003534:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003536:	bf00      	nop
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	20000804 	.word	0x20000804
 8003540:	2000084c 	.word	0x2000084c
 8003544:	20000ea0 	.word	0x20000ea0

08003548 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800354c:	484e      	ldr	r0, [pc, #312]	; (8003688 <TIM8_TRG_COM_TIM14_IRQHandler+0x140>)
 800354e:	f003 fbe9 	bl	8006d24 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 8003552:	484e      	ldr	r0, [pc, #312]	; (800368c <TIM8_TRG_COM_TIM14_IRQHandler+0x144>)
 8003554:	f003 fbe6 	bl	8006d24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

 tim14_flag++;
 8003558:	4b4d      	ldr	r3, [pc, #308]	; (8003690 <TIM8_TRG_COM_TIM14_IRQHandler+0x148>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	3301      	adds	r3, #1
 800355e:	4a4c      	ldr	r2, [pc, #304]	; (8003690 <TIM8_TRG_COM_TIM14_IRQHandler+0x148>)
 8003560:	6013      	str	r3, [r2, #0]
if(tim14_flag>20)
 8003562:	4b4b      	ldr	r3, [pc, #300]	; (8003690 <TIM8_TRG_COM_TIM14_IRQHandler+0x148>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2b14      	cmp	r3, #20
 8003568:	dd02      	ble.n	8003570 <TIM8_TRG_COM_TIM14_IRQHandler+0x28>
	tim14_flag=0;
 800356a:	4b49      	ldr	r3, [pc, #292]	; (8003690 <TIM8_TRG_COM_TIM14_IRQHandler+0x148>)
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]
//motor1
  ENCODER_OLD= ENCODER_NEW;
 8003570:	4b48      	ldr	r3, [pc, #288]	; (8003694 <TIM8_TRG_COM_TIM14_IRQHandler+0x14c>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a48      	ldr	r2, [pc, #288]	; (8003698 <TIM8_TRG_COM_TIM14_IRQHandler+0x150>)
 8003576:	6013      	str	r3, [r2, #0]
  ENCODER_NEW = TIM4->CNT;
 8003578:	4b48      	ldr	r3, [pc, #288]	; (800369c <TIM8_TRG_COM_TIM14_IRQHandler+0x154>)
 800357a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357c:	4a45      	ldr	r2, [pc, #276]	; (8003694 <TIM8_TRG_COM_TIM14_IRQHandler+0x14c>)
 800357e:	6013      	str	r3, [r2, #0]


   	RPM =  ((abs(ENCODER_NEW-ENCODER_OLD)*60))/512.0/0.1;	// ?��코더 ?��?��: 1 turn?�� 3 pulse 출력
 8003580:	4b44      	ldr	r3, [pc, #272]	; (8003694 <TIM8_TRG_COM_TIM14_IRQHandler+0x14c>)
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	4b44      	ldr	r3, [pc, #272]	; (8003698 <TIM8_TRG_COM_TIM14_IRQHandler+0x150>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800358e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003592:	4613      	mov	r3, r2
 8003594:	011b      	lsls	r3, r3, #4
 8003596:	1a9b      	subs	r3, r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4618      	mov	r0, r3
 800359c:	f7fc ffd2 	bl	8000544 <__aeabi_i2d>
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 80035a8:	f7fd f960 	bl	800086c <__aeabi_ddiv>
 80035ac:	4602      	mov	r2, r0
 80035ae:	460b      	mov	r3, r1
 80035b0:	4610      	mov	r0, r2
 80035b2:	4619      	mov	r1, r3
 80035b4:	a32c      	add	r3, pc, #176	; (adr r3, 8003668 <TIM8_TRG_COM_TIM14_IRQHandler+0x120>)
 80035b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ba:	f7fd f957 	bl	800086c <__aeabi_ddiv>
 80035be:	4602      	mov	r2, r0
 80035c0:	460b      	mov	r3, r1
 80035c2:	4610      	mov	r0, r2
 80035c4:	4619      	mov	r1, r3
 80035c6:	f7fd fb1f 	bl	8000c08 <__aeabi_d2f>
 80035ca:	4603      	mov	r3, r0
 80035cc:	4a34      	ldr	r2, [pc, #208]	; (80036a0 <TIM8_TRG_COM_TIM14_IRQHandler+0x158>)
 80035ce:	6013      	str	r3, [r2, #0]
    	RPS=RPM/60;
 80035d0:	4b33      	ldr	r3, [pc, #204]	; (80036a0 <TIM8_TRG_COM_TIM14_IRQHandler+0x158>)
 80035d2:	ed93 7a00 	vldr	s14, [r3]
 80035d6:	eddf 6a33 	vldr	s13, [pc, #204]	; 80036a4 <TIM8_TRG_COM_TIM14_IRQHandler+0x15c>
 80035da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035de:	4b32      	ldr	r3, [pc, #200]	; (80036a8 <TIM8_TRG_COM_TIM14_IRQHandler+0x160>)
 80035e0:	edc3 7a00 	vstr	s15, [r3]
    	Omega= RPS*2*M_PI;
 80035e4:	4b30      	ldr	r3, [pc, #192]	; (80036a8 <TIM8_TRG_COM_TIM14_IRQHandler+0x160>)
 80035e6:	edd3 7a00 	vldr	s15, [r3]
 80035ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80035ee:	ee17 0a90 	vmov	r0, s15
 80035f2:	f7fc ffb9 	bl	8000568 <__aeabi_f2d>
 80035f6:	a31e      	add	r3, pc, #120	; (adr r3, 8003670 <TIM8_TRG_COM_TIM14_IRQHandler+0x128>)
 80035f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fc:	f7fd f80c 	bl	8000618 <__aeabi_dmul>
 8003600:	4602      	mov	r2, r0
 8003602:	460b      	mov	r3, r1
 8003604:	4610      	mov	r0, r2
 8003606:	4619      	mov	r1, r3
 8003608:	f7fd fafe 	bl	8000c08 <__aeabi_d2f>
 800360c:	4603      	mov	r3, r0
 800360e:	4a27      	ldr	r2, [pc, #156]	; (80036ac <TIM8_TRG_COM_TIM14_IRQHandler+0x164>)
 8003610:	6013      	str	r3, [r2, #0]

    //	printf("RPS = %d \r\n",RPS);
   // 	 printf("RPM = %d \r\n",RPM);

    	step_RPM = 1.8/2/delay_us/6*1000000;
 8003612:	4b27      	ldr	r3, [pc, #156]	; (80036b0 <TIM8_TRG_COM_TIM14_IRQHandler+0x168>)
 8003614:	881b      	ldrh	r3, [r3, #0]
 8003616:	4618      	mov	r0, r3
 8003618:	f7fc ff94 	bl	8000544 <__aeabi_i2d>
 800361c:	4602      	mov	r2, r0
 800361e:	460b      	mov	r3, r1
 8003620:	a115      	add	r1, pc, #84	; (adr r1, 8003678 <TIM8_TRG_COM_TIM14_IRQHandler+0x130>)
 8003622:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003626:	f7fd f921 	bl	800086c <__aeabi_ddiv>
 800362a:	4602      	mov	r2, r0
 800362c:	460b      	mov	r3, r1
 800362e:	4610      	mov	r0, r2
 8003630:	4619      	mov	r1, r3
 8003632:	f04f 0200 	mov.w	r2, #0
 8003636:	4b1f      	ldr	r3, [pc, #124]	; (80036b4 <TIM8_TRG_COM_TIM14_IRQHandler+0x16c>)
 8003638:	f7fd f918 	bl	800086c <__aeabi_ddiv>
 800363c:	4602      	mov	r2, r0
 800363e:	460b      	mov	r3, r1
 8003640:	4610      	mov	r0, r2
 8003642:	4619      	mov	r1, r3
 8003644:	a30e      	add	r3, pc, #56	; (adr r3, 8003680 <TIM8_TRG_COM_TIM14_IRQHandler+0x138>)
 8003646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364a:	f7fc ffe5 	bl	8000618 <__aeabi_dmul>
 800364e:	4602      	mov	r2, r0
 8003650:	460b      	mov	r3, r1
 8003652:	4610      	mov	r0, r2
 8003654:	4619      	mov	r1, r3
 8003656:	f7fd fad7 	bl	8000c08 <__aeabi_d2f>
 800365a:	4603      	mov	r3, r0
 800365c:	4a16      	ldr	r2, [pc, #88]	; (80036b8 <TIM8_TRG_COM_TIM14_IRQHandler+0x170>)
 800365e:	6013      	str	r3, [r2, #0]




  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003660:	bf00      	nop
 8003662:	bd80      	pop	{r7, pc}
 8003664:	f3af 8000 	nop.w
 8003668:	9999999a 	.word	0x9999999a
 800366c:	3fb99999 	.word	0x3fb99999
 8003670:	54442d18 	.word	0x54442d18
 8003674:	400921fb 	.word	0x400921fb
 8003678:	cccccccd 	.word	0xcccccccd
 800367c:	3feccccc 	.word	0x3feccccc
 8003680:	00000000 	.word	0x00000000
 8003684:	412e8480 	.word	0x412e8480
 8003688:	20000804 	.word	0x20000804
 800368c:	20000894 	.word	0x20000894
 8003690:	20000e9c 	.word	0x20000e9c
 8003694:	200003a4 	.word	0x200003a4
 8003698:	200003a8 	.word	0x200003a8
 800369c:	40000800 	.word	0x40000800
 80036a0:	200003ac 	.word	0x200003ac
 80036a4:	42700000 	.word	0x42700000
 80036a8:	200003b0 	.word	0x200003b0
 80036ac:	200003c4 	.word	0x200003c4
 80036b0:	20000004 	.word	0x20000004
 80036b4:	40180000 	.word	0x40180000
 80036b8:	20000e80 	.word	0x20000e80

080036bc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80036c0:	4802      	ldr	r0, [pc, #8]	; (80036cc <UART4_IRQHandler+0x10>)
 80036c2:	f004 fb35 	bl	8007d30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80036c6:	bf00      	nop
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	20000358 	.word	0x20000358

080036d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80036d4:	4837      	ldr	r0, [pc, #220]	; (80037b4 <TIM6_DAC_IRQHandler+0xe4>)
 80036d6:	f003 fb25 	bl	8006d24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  tim6_flag=1;
 80036da:	4b37      	ldr	r3, [pc, #220]	; (80037b8 <TIM6_DAC_IRQHandler+0xe8>)
 80036dc:	2201      	movs	r2, #1
 80036de:	601a      	str	r2, [r3, #0]





  encoder_count=TIM4->CNT;
 80036e0:	4b36      	ldr	r3, [pc, #216]	; (80037bc <TIM6_DAC_IRQHandler+0xec>)
 80036e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e4:	4a36      	ldr	r2, [pc, #216]	; (80037c0 <TIM6_DAC_IRQHandler+0xf0>)
 80036e6:	6013      	str	r3, [r2, #0]



	if(key_flag==1)
 80036e8:	4b36      	ldr	r3, [pc, #216]	; (80037c4 <TIM6_DAC_IRQHandler+0xf4>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d12d      	bne.n	800374c <TIM6_DAC_IRQHandler+0x7c>
	  {
		  GPIOE->ODR &= ~1<<0;  // forward
 80036f0:	4b35      	ldr	r3, [pc, #212]	; (80037c8 <TIM6_DAC_IRQHandler+0xf8>)
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	4a34      	ldr	r2, [pc, #208]	; (80037c8 <TIM6_DAC_IRQHandler+0xf8>)
 80036f6:	f023 0301 	bic.w	r3, r3, #1
 80036fa:	6153      	str	r3, [r2, #20]

	      GPIOG->ODR &= ~1<<0;  //start
 80036fc:	4b33      	ldr	r3, [pc, #204]	; (80037cc <TIM6_DAC_IRQHandler+0xfc>)
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	4a32      	ldr	r2, [pc, #200]	; (80037cc <TIM6_DAC_IRQHandler+0xfc>)
 8003702:	f023 0301 	bic.w	r3, r3, #1
 8003706:	6153      	str	r3, [r2, #20]

		  TIM3->CCR1 = 250;
 8003708:	4b31      	ldr	r3, [pc, #196]	; (80037d0 <TIM6_DAC_IRQHandler+0x100>)
 800370a:	22fa      	movs	r2, #250	; 0xfa
 800370c:	635a      	str	r2, [r3, #52]	; 0x34

		    if(TIM4->CNT>=10220)
 800370e:	4b2b      	ldr	r3, [pc, #172]	; (80037bc <TIM6_DAC_IRQHandler+0xec>)
 8003710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003712:	f242 72eb 	movw	r2, #10219	; 0x27eb
 8003716:	4293      	cmp	r3, r2
 8003718:	d918      	bls.n	800374c <TIM6_DAC_IRQHandler+0x7c>
			{
		    	TIM3->CCR1 = 100;
 800371a:	4b2d      	ldr	r3, [pc, #180]	; (80037d0 <TIM6_DAC_IRQHandler+0x100>)
 800371c:	2264      	movs	r2, #100	; 0x64
 800371e:	635a      	str	r2, [r3, #52]	; 0x34

		 		if(TIM4->CNT>=10512)
 8003720:	4b26      	ldr	r3, [pc, #152]	; (80037bc <TIM6_DAC_IRQHandler+0xec>)
 8003722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003724:	f642 120f 	movw	r2, #10511	; 0x290f
 8003728:	4293      	cmp	r3, r2
 800372a:	d90f      	bls.n	800374c <TIM6_DAC_IRQHandler+0x7c>
		  		{
			         GPIOG->ODR |= 1<<0;  //stop
 800372c:	4b27      	ldr	r3, [pc, #156]	; (80037cc <TIM6_DAC_IRQHandler+0xfc>)
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	4a26      	ldr	r2, [pc, #152]	; (80037cc <TIM6_DAC_IRQHandler+0xfc>)
 8003732:	f043 0301 	orr.w	r3, r3, #1
 8003736:	6153      	str	r3, [r2, #20]
			        //  key_flag=0;
			          stop_flag=1;
 8003738:	4b26      	ldr	r3, [pc, #152]	; (80037d4 <TIM6_DAC_IRQHandler+0x104>)
 800373a:	2201      	movs	r2, #1
 800373c:	701a      	strb	r2, [r3, #0]
			          key_flag=0;
 800373e:	4b21      	ldr	r3, [pc, #132]	; (80037c4 <TIM6_DAC_IRQHandler+0xf4>)
 8003740:	2200      	movs	r2, #0
 8003742:	701a      	strb	r2, [r3, #0]
			          HAL_Delay(2000);
 8003744:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003748:	f000 f9a8 	bl	8003a9c <HAL_Delay>


	  }


	  if(stop_flag==1)
 800374c:	4b21      	ldr	r3, [pc, #132]	; (80037d4 <TIM6_DAC_IRQHandler+0x104>)
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d12c      	bne.n	80037ae <TIM6_DAC_IRQHandler+0xde>
	      	    {
	      	          GPIOE->ODR |= 1<<0;  //back
 8003754:	4b1c      	ldr	r3, [pc, #112]	; (80037c8 <TIM6_DAC_IRQHandler+0xf8>)
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	4a1b      	ldr	r2, [pc, #108]	; (80037c8 <TIM6_DAC_IRQHandler+0xf8>)
 800375a:	f043 0301 	orr.w	r3, r3, #1
 800375e:	6153      	str	r3, [r2, #20]
	      	          GPIOG->ODR &= ~1<<0;  //start
 8003760:	4b1a      	ldr	r3, [pc, #104]	; (80037cc <TIM6_DAC_IRQHandler+0xfc>)
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	4a19      	ldr	r2, [pc, #100]	; (80037cc <TIM6_DAC_IRQHandler+0xfc>)
 8003766:	f023 0301 	bic.w	r3, r3, #1
 800376a:	6153      	str	r3, [r2, #20]
	      	          TIM3->CCR1 = 250;
 800376c:	4b18      	ldr	r3, [pc, #96]	; (80037d0 <TIM6_DAC_IRQHandler+0x100>)
 800376e:	22fa      	movs	r2, #250	; 0xfa
 8003770:	635a      	str	r2, [r3, #52]	; 0x34


	      	            if(encoder_count<=10280)
 8003772:	4b13      	ldr	r3, [pc, #76]	; (80037c0 <TIM6_DAC_IRQHandler+0xf0>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f642 0228 	movw	r2, #10280	; 0x2828
 800377a:	4293      	cmp	r3, r2
 800377c:	d817      	bhi.n	80037ae <TIM6_DAC_IRQHandler+0xde>
	      	            {
	      	            	  TIM3->CCR1 = 87;
 800377e:	4b14      	ldr	r3, [pc, #80]	; (80037d0 <TIM6_DAC_IRQHandler+0x100>)
 8003780:	2257      	movs	r2, #87	; 0x57
 8003782:	635a      	str	r2, [r3, #52]	; 0x34
	      	             	  if(encoder_count<=10000)
 8003784:	4b0e      	ldr	r3, [pc, #56]	; (80037c0 <TIM6_DAC_IRQHandler+0xf0>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f242 7210 	movw	r2, #10000	; 0x2710
 800378c:	4293      	cmp	r3, r2
 800378e:	d80e      	bhi.n	80037ae <TIM6_DAC_IRQHandler+0xde>
	      	    	      	    {
	      	    	  		 		  GPIOG->ODR |= 1<<0;  //stop
 8003790:	4b0e      	ldr	r3, [pc, #56]	; (80037cc <TIM6_DAC_IRQHandler+0xfc>)
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	4a0d      	ldr	r2, [pc, #52]	; (80037cc <TIM6_DAC_IRQHandler+0xfc>)
 8003796:	f043 0301 	orr.w	r3, r3, #1
 800379a:	6153      	str	r3, [r2, #20]
	      	    	          		  GPIOE->ODR &= ~1<<0;  //go
 800379c:	4b0a      	ldr	r3, [pc, #40]	; (80037c8 <TIM6_DAC_IRQHandler+0xf8>)
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	4a09      	ldr	r2, [pc, #36]	; (80037c8 <TIM6_DAC_IRQHandler+0xf8>)
 80037a2:	f023 0301 	bic.w	r3, r3, #1
 80037a6:	6153      	str	r3, [r2, #20]
	      	    	  		         stop_flag=0;
 80037a8:	4b0a      	ldr	r3, [pc, #40]	; (80037d4 <TIM6_DAC_IRQHandler+0x104>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	701a      	strb	r2, [r3, #0]




  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80037ae:	bf00      	nop
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	200007bc 	.word	0x200007bc
 80037b8:	20000e98 	.word	0x20000e98
 80037bc:	40000800 	.word	0x40000800
 80037c0:	20000000 	.word	0x20000000
 80037c4:	20000200 	.word	0x20000200
 80037c8:	40021000 	.word	0x40021000
 80037cc:	40021800 	.word	0x40021800
 80037d0:	40000400 	.word	0x40000400
 80037d4:	20000ec1 	.word	0x20000ec1

080037d8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80037dc:	4802      	ldr	r0, [pc, #8]	; (80037e8 <DMA2_Stream1_IRQHandler+0x10>)
 80037de:	f001 f967 	bl	8004ab0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80037e2:	bf00      	nop
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	2000058c 	.word	0x2000058c

080037ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
  return 1;
 80037f0:	2301      	movs	r3, #1
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <_kill>:

int _kill(int pid, int sig)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003806:	f006 fd97 	bl	800a338 <__errno>
 800380a:	4603      	mov	r3, r0
 800380c:	2216      	movs	r2, #22
 800380e:	601a      	str	r2, [r3, #0]
  return -1;
 8003810:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003814:	4618      	mov	r0, r3
 8003816:	3708      	adds	r7, #8
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <_exit>:

void _exit (int status)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003824:	f04f 31ff 	mov.w	r1, #4294967295
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f7ff ffe7 	bl	80037fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800382e:	e7fe      	b.n	800382e <_exit+0x12>

08003830 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800383c:	2300      	movs	r3, #0
 800383e:	617b      	str	r3, [r7, #20]
 8003840:	e00a      	b.n	8003858 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003842:	f3af 8000 	nop.w
 8003846:	4601      	mov	r1, r0
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	1c5a      	adds	r2, r3, #1
 800384c:	60ba      	str	r2, [r7, #8]
 800384e:	b2ca      	uxtb	r2, r1
 8003850:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	3301      	adds	r3, #1
 8003856:	617b      	str	r3, [r7, #20]
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	429a      	cmp	r2, r3
 800385e:	dbf0      	blt.n	8003842 <_read+0x12>
  }

  return len;
 8003860:	687b      	ldr	r3, [r7, #4]
}
 8003862:	4618      	mov	r0, r3
 8003864:	3718      	adds	r7, #24
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <_close>:
  }
  return len;
}

int _close(int file)
{
 800386a:	b480      	push	{r7}
 800386c:	b083      	sub	sp, #12
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003872:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003876:	4618      	mov	r0, r3
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
 800388a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003892:	605a      	str	r2, [r3, #4]
  return 0;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr

080038a2 <_isatty>:

int _isatty(int file)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b083      	sub	sp, #12
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80038aa:	2301      	movs	r3, #1
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3714      	adds	r7, #20
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
	...

080038d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038dc:	4a14      	ldr	r2, [pc, #80]	; (8003930 <_sbrk+0x5c>)
 80038de:	4b15      	ldr	r3, [pc, #84]	; (8003934 <_sbrk+0x60>)
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038e8:	4b13      	ldr	r3, [pc, #76]	; (8003938 <_sbrk+0x64>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d102      	bne.n	80038f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038f0:	4b11      	ldr	r3, [pc, #68]	; (8003938 <_sbrk+0x64>)
 80038f2:	4a12      	ldr	r2, [pc, #72]	; (800393c <_sbrk+0x68>)
 80038f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038f6:	4b10      	ldr	r3, [pc, #64]	; (8003938 <_sbrk+0x64>)
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4413      	add	r3, r2
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	429a      	cmp	r2, r3
 8003902:	d207      	bcs.n	8003914 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003904:	f006 fd18 	bl	800a338 <__errno>
 8003908:	4603      	mov	r3, r0
 800390a:	220c      	movs	r2, #12
 800390c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800390e:	f04f 33ff 	mov.w	r3, #4294967295
 8003912:	e009      	b.n	8003928 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003914:	4b08      	ldr	r3, [pc, #32]	; (8003938 <_sbrk+0x64>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800391a:	4b07      	ldr	r3, [pc, #28]	; (8003938 <_sbrk+0x64>)
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4413      	add	r3, r2
 8003922:	4a05      	ldr	r2, [pc, #20]	; (8003938 <_sbrk+0x64>)
 8003924:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003926:	68fb      	ldr	r3, [r7, #12]
}
 8003928:	4618      	mov	r0, r3
 800392a:	3718      	adds	r7, #24
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	20030000 	.word	0x20030000
 8003934:	00000400 	.word	0x00000400
 8003938:	20000ec4 	.word	0x20000ec4
 800393c:	20001018 	.word	0x20001018

08003940 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003944:	4b06      	ldr	r3, [pc, #24]	; (8003960 <SystemInit+0x20>)
 8003946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800394a:	4a05      	ldr	r2, [pc, #20]	; (8003960 <SystemInit+0x20>)
 800394c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003950:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003954:	bf00      	nop
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	e000ed00 	.word	0xe000ed00

08003964 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003964:	f8df d034 	ldr.w	sp, [pc, #52]	; 800399c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003968:	f7ff ffea 	bl	8003940 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800396c:	480c      	ldr	r0, [pc, #48]	; (80039a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800396e:	490d      	ldr	r1, [pc, #52]	; (80039a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003970:	4a0d      	ldr	r2, [pc, #52]	; (80039a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003972:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003974:	e002      	b.n	800397c <LoopCopyDataInit>

08003976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800397a:	3304      	adds	r3, #4

0800397c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800397c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800397e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003980:	d3f9      	bcc.n	8003976 <CopyDataInit>
  


/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003982:	4a0a      	ldr	r2, [pc, #40]	; (80039ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003984:	4c0a      	ldr	r4, [pc, #40]	; (80039b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003988:	e001      	b.n	800398e <LoopFillZerobss>

0800398a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800398a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800398c:	3204      	adds	r2, #4

0800398e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800398e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003990:	d3fb      	bcc.n	800398a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003992:	f006 fcd7 	bl	800a344 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003996:	f7fd fdff 	bl	8001598 <main>
  bx  lr    
 800399a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800399c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80039a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039a4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80039a8:	0800df98 	.word	0x0800df98
  ldr r2, =_sbss
 80039ac:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80039b0:	20001018 	.word	0x20001018

080039b4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039b4:	e7fe      	b.n	80039b4 <CAN1_RX0_IRQHandler>
	...

080039b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80039bc:	4b0e      	ldr	r3, [pc, #56]	; (80039f8 <HAL_Init+0x40>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a0d      	ldr	r2, [pc, #52]	; (80039f8 <HAL_Init+0x40>)
 80039c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80039c8:	4b0b      	ldr	r3, [pc, #44]	; (80039f8 <HAL_Init+0x40>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a0a      	ldr	r2, [pc, #40]	; (80039f8 <HAL_Init+0x40>)
 80039ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039d4:	4b08      	ldr	r3, [pc, #32]	; (80039f8 <HAL_Init+0x40>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a07      	ldr	r2, [pc, #28]	; (80039f8 <HAL_Init+0x40>)
 80039da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039e0:	2003      	movs	r0, #3
 80039e2:	f000 fe8b 	bl	80046fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039e6:	2000      	movs	r0, #0
 80039e8:	f000 f808 	bl	80039fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039ec:	f7fe ff48 	bl	8002880 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40023c00 	.word	0x40023c00

080039fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a04:	4b12      	ldr	r3, [pc, #72]	; (8003a50 <HAL_InitTick+0x54>)
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	4b12      	ldr	r3, [pc, #72]	; (8003a54 <HAL_InitTick+0x58>)
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 fea3 	bl	8004766 <HAL_SYSTICK_Config>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e00e      	b.n	8003a48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b0f      	cmp	r3, #15
 8003a2e:	d80a      	bhi.n	8003a46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a30:	2200      	movs	r2, #0
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	f04f 30ff 	mov.w	r0, #4294967295
 8003a38:	f000 fe6b 	bl	8004712 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a3c:	4a06      	ldr	r2, [pc, #24]	; (8003a58 <HAL_InitTick+0x5c>)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
 8003a44:	e000      	b.n	8003a48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	20000008 	.word	0x20000008
 8003a54:	20000010 	.word	0x20000010
 8003a58:	2000000c 	.word	0x2000000c

08003a5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a60:	4b06      	ldr	r3, [pc, #24]	; (8003a7c <HAL_IncTick+0x20>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	461a      	mov	r2, r3
 8003a66:	4b06      	ldr	r3, [pc, #24]	; (8003a80 <HAL_IncTick+0x24>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	4a04      	ldr	r2, [pc, #16]	; (8003a80 <HAL_IncTick+0x24>)
 8003a6e:	6013      	str	r3, [r2, #0]
}
 8003a70:	bf00      	nop
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	20000010 	.word	0x20000010
 8003a80:	20000ec8 	.word	0x20000ec8

08003a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  return uwTick;
 8003a88:	4b03      	ldr	r3, [pc, #12]	; (8003a98 <HAL_GetTick+0x14>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	20000ec8 	.word	0x20000ec8

08003a9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003aa4:	f7ff ffee 	bl	8003a84 <HAL_GetTick>
 8003aa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab4:	d005      	beq.n	8003ac2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ab6:	4b0a      	ldr	r3, [pc, #40]	; (8003ae0 <HAL_Delay+0x44>)
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	461a      	mov	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4413      	add	r3, r2
 8003ac0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003ac2:	bf00      	nop
 8003ac4:	f7ff ffde 	bl	8003a84 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d8f7      	bhi.n	8003ac4 <HAL_Delay+0x28>
  {
  }
}
 8003ad4:	bf00      	nop
 8003ad6:	bf00      	nop
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	20000010 	.word	0x20000010

08003ae4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003aec:	2300      	movs	r3, #0
 8003aee:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e033      	b.n	8003b62 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d109      	bne.n	8003b16 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7fe fee4 	bl	80028d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	f003 0310 	and.w	r3, r3, #16
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d118      	bne.n	8003b54 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003b2a:	f023 0302 	bic.w	r3, r3, #2
 8003b2e:	f043 0202 	orr.w	r2, r3, #2
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 fb88 	bl	800424c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	f023 0303 	bic.w	r3, r3, #3
 8003b4a:	f043 0201 	orr.w	r2, r3, #1
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	641a      	str	r2, [r3, #64]	; 0x40
 8003b52:	e001      	b.n	8003b58 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b086      	sub	sp, #24
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003b72:	2300      	movs	r3, #0
 8003b74:	617b      	str	r3, [r7, #20]
 8003b76:	2300      	movs	r3, #0
 8003b78:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	f003 0320 	and.w	r3, r3, #32
 8003b98:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d049      	beq.n	8003c34 <HAL_ADC_IRQHandler+0xca>
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d046      	beq.n	8003c34 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	f003 0310 	and.w	r3, r3, #16
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d105      	bne.n	8003bbe <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d12b      	bne.n	8003c24 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d127      	bne.n	8003c24 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bda:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d006      	beq.n	8003bf0 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d119      	bne.n	8003c24 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f022 0220 	bic.w	r2, r2, #32
 8003bfe:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d105      	bne.n	8003c24 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1c:	f043 0201 	orr.w	r2, r3, #1
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f7ff fab3 	bl	8003190 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f06f 0212 	mvn.w	r2, #18
 8003c32:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f003 0304 	and.w	r3, r3, #4
 8003c3a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c42:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d057      	beq.n	8003cfa <HAL_ADC_IRQHandler+0x190>
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d054      	beq.n	8003cfa <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c54:	f003 0310 	and.w	r3, r3, #16
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d105      	bne.n	8003c68 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c60:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d139      	bne.n	8003cea <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d006      	beq.n	8003c92 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d12b      	bne.n	8003cea <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d124      	bne.n	8003cea <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d11d      	bne.n	8003cea <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d119      	bne.n	8003cea <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cc4:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d105      	bne.n	8003cea <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	f043 0201 	orr.w	r2, r3, #1
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 fc2c 	bl	8004548 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f06f 020c 	mvn.w	r2, #12
 8003cf8:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d08:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d017      	beq.n	8003d40 <HAL_ADC_IRQHandler+0x1d6>
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d014      	beq.n	8003d40 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0301 	and.w	r3, r3, #1
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d10d      	bne.n	8003d40 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d28:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 f945 	bl	8003fc0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f06f 0201 	mvn.w	r2, #1
 8003d3e:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f003 0320 	and.w	r3, r3, #32
 8003d46:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d4e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d015      	beq.n	8003d82 <HAL_ADC_IRQHandler+0x218>
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d012      	beq.n	8003d82 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d60:	f043 0202 	orr.w	r2, r3, #2
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f06f 0220 	mvn.w	r2, #32
 8003d70:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 f92e 	bl	8003fd4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f06f 0220 	mvn.w	r2, #32
 8003d80:	601a      	str	r2, [r3, #0]
  }
}
 8003d82:	bf00      	nop
 8003d84:	3718      	adds	r7, #24
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
	...

08003d8c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d101      	bne.n	8003daa <HAL_ADC_Start_DMA+0x1e>
 8003da6:	2302      	movs	r3, #2
 8003da8:	e0e9      	b.n	8003f7e <HAL_ADC_Start_DMA+0x1f2>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d018      	beq.n	8003df2 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	689a      	ldr	r2, [r3, #8]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f042 0201 	orr.w	r2, r2, #1
 8003dce:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003dd0:	4b6d      	ldr	r3, [pc, #436]	; (8003f88 <HAL_ADC_Start_DMA+0x1fc>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a6d      	ldr	r2, [pc, #436]	; (8003f8c <HAL_ADC_Start_DMA+0x200>)
 8003dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dda:	0c9a      	lsrs	r2, r3, #18
 8003ddc:	4613      	mov	r3, r2
 8003dde:	005b      	lsls	r3, r3, #1
 8003de0:	4413      	add	r3, r2
 8003de2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003de4:	e002      	b.n	8003dec <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	3b01      	subs	r3, #1
 8003dea:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1f9      	bne.n	8003de6 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e00:	d107      	bne.n	8003e12 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	689a      	ldr	r2, [r3, #8]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e10:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	f040 80a1 	bne.w	8003f64 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003e2a:	f023 0301 	bic.w	r3, r3, #1
 8003e2e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d007      	beq.n	8003e54 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e48:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e4c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e60:	d106      	bne.n	8003e70 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e66:	f023 0206 	bic.w	r2, r3, #6
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	645a      	str	r2, [r3, #68]	; 0x44
 8003e6e:	e002      	b.n	8003e76 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e7e:	4b44      	ldr	r3, [pc, #272]	; (8003f90 <HAL_ADC_Start_DMA+0x204>)
 8003e80:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e86:	4a43      	ldr	r2, [pc, #268]	; (8003f94 <HAL_ADC_Start_DMA+0x208>)
 8003e88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8e:	4a42      	ldr	r2, [pc, #264]	; (8003f98 <HAL_ADC_Start_DMA+0x20c>)
 8003e90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e96:	4a41      	ldr	r2, [pc, #260]	; (8003f9c <HAL_ADC_Start_DMA+0x210>)
 8003e98:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003ea2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	685a      	ldr	r2, [r3, #4]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003eb2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	689a      	ldr	r2, [r3, #8]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ec2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	334c      	adds	r3, #76	; 0x4c
 8003ece:	4619      	mov	r1, r3
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f000 fd02 	bl	80048dc <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f003 031f 	and.w	r3, r3, #31
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d12a      	bne.n	8003f3a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a2d      	ldr	r2, [pc, #180]	; (8003fa0 <HAL_ADC_Start_DMA+0x214>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d015      	beq.n	8003f1a <HAL_ADC_Start_DMA+0x18e>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a2c      	ldr	r2, [pc, #176]	; (8003fa4 <HAL_ADC_Start_DMA+0x218>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d105      	bne.n	8003f04 <HAL_ADC_Start_DMA+0x178>
 8003ef8:	4b25      	ldr	r3, [pc, #148]	; (8003f90 <HAL_ADC_Start_DMA+0x204>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f003 031f 	and.w	r3, r3, #31
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00a      	beq.n	8003f1a <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a27      	ldr	r2, [pc, #156]	; (8003fa8 <HAL_ADC_Start_DMA+0x21c>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d136      	bne.n	8003f7c <HAL_ADC_Start_DMA+0x1f0>
 8003f0e:	4b20      	ldr	r3, [pc, #128]	; (8003f90 <HAL_ADC_Start_DMA+0x204>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f003 0310 	and.w	r3, r3, #16
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d130      	bne.n	8003f7c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d129      	bne.n	8003f7c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689a      	ldr	r2, [r3, #8]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f36:	609a      	str	r2, [r3, #8]
 8003f38:	e020      	b.n	8003f7c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a18      	ldr	r2, [pc, #96]	; (8003fa0 <HAL_ADC_Start_DMA+0x214>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d11b      	bne.n	8003f7c <HAL_ADC_Start_DMA+0x1f0>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d114      	bne.n	8003f7c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	689a      	ldr	r2, [r3, #8]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f60:	609a      	str	r2, [r3, #8]
 8003f62:	e00b      	b.n	8003f7c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f68:	f043 0210 	orr.w	r2, r3, #16
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f74:	f043 0201 	orr.w	r2, r3, #1
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3718      	adds	r7, #24
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	20000008 	.word	0x20000008
 8003f8c:	431bde83 	.word	0x431bde83
 8003f90:	40012300 	.word	0x40012300
 8003f94:	08004445 	.word	0x08004445
 8003f98:	080044ff 	.word	0x080044ff
 8003f9c:	0800451b 	.word	0x0800451b
 8003fa0:	40012000 	.word	0x40012000
 8003fa4:	40012100 	.word	0x40012100
 8003fa8:	40012200 	.word	0x40012200

08003fac <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d101      	bne.n	8004004 <HAL_ADC_ConfigChannel+0x1c>
 8004000:	2302      	movs	r3, #2
 8004002:	e113      	b.n	800422c <HAL_ADC_ConfigChannel+0x244>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2b09      	cmp	r3, #9
 8004012:	d925      	bls.n	8004060 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68d9      	ldr	r1, [r3, #12]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	b29b      	uxth	r3, r3
 8004020:	461a      	mov	r2, r3
 8004022:	4613      	mov	r3, r2
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	4413      	add	r3, r2
 8004028:	3b1e      	subs	r3, #30
 800402a:	2207      	movs	r2, #7
 800402c:	fa02 f303 	lsl.w	r3, r2, r3
 8004030:	43da      	mvns	r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	400a      	ands	r2, r1
 8004038:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68d9      	ldr	r1, [r3, #12]
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	689a      	ldr	r2, [r3, #8]
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	b29b      	uxth	r3, r3
 800404a:	4618      	mov	r0, r3
 800404c:	4603      	mov	r3, r0
 800404e:	005b      	lsls	r3, r3, #1
 8004050:	4403      	add	r3, r0
 8004052:	3b1e      	subs	r3, #30
 8004054:	409a      	lsls	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	430a      	orrs	r2, r1
 800405c:	60da      	str	r2, [r3, #12]
 800405e:	e022      	b.n	80040a6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6919      	ldr	r1, [r3, #16]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	b29b      	uxth	r3, r3
 800406c:	461a      	mov	r2, r3
 800406e:	4613      	mov	r3, r2
 8004070:	005b      	lsls	r3, r3, #1
 8004072:	4413      	add	r3, r2
 8004074:	2207      	movs	r2, #7
 8004076:	fa02 f303 	lsl.w	r3, r2, r3
 800407a:	43da      	mvns	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	400a      	ands	r2, r1
 8004082:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	6919      	ldr	r1, [r3, #16]
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	689a      	ldr	r2, [r3, #8]
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	b29b      	uxth	r3, r3
 8004094:	4618      	mov	r0, r3
 8004096:	4603      	mov	r3, r0
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	4403      	add	r3, r0
 800409c:	409a      	lsls	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	430a      	orrs	r2, r1
 80040a4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	2b06      	cmp	r3, #6
 80040ac:	d824      	bhi.n	80040f8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685a      	ldr	r2, [r3, #4]
 80040b8:	4613      	mov	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	4413      	add	r3, r2
 80040be:	3b05      	subs	r3, #5
 80040c0:	221f      	movs	r2, #31
 80040c2:	fa02 f303 	lsl.w	r3, r2, r3
 80040c6:	43da      	mvns	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	400a      	ands	r2, r1
 80040ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	b29b      	uxth	r3, r3
 80040dc:	4618      	mov	r0, r3
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	685a      	ldr	r2, [r3, #4]
 80040e2:	4613      	mov	r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	4413      	add	r3, r2
 80040e8:	3b05      	subs	r3, #5
 80040ea:	fa00 f203 	lsl.w	r2, r0, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	635a      	str	r2, [r3, #52]	; 0x34
 80040f6:	e04c      	b.n	8004192 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	2b0c      	cmp	r3, #12
 80040fe:	d824      	bhi.n	800414a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	685a      	ldr	r2, [r3, #4]
 800410a:	4613      	mov	r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	4413      	add	r3, r2
 8004110:	3b23      	subs	r3, #35	; 0x23
 8004112:	221f      	movs	r2, #31
 8004114:	fa02 f303 	lsl.w	r3, r2, r3
 8004118:	43da      	mvns	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	400a      	ands	r2, r1
 8004120:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	b29b      	uxth	r3, r3
 800412e:	4618      	mov	r0, r3
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	4613      	mov	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4413      	add	r3, r2
 800413a:	3b23      	subs	r3, #35	; 0x23
 800413c:	fa00 f203 	lsl.w	r2, r0, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	430a      	orrs	r2, r1
 8004146:	631a      	str	r2, [r3, #48]	; 0x30
 8004148:	e023      	b.n	8004192 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	4613      	mov	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4413      	add	r3, r2
 800415a:	3b41      	subs	r3, #65	; 0x41
 800415c:	221f      	movs	r2, #31
 800415e:	fa02 f303 	lsl.w	r3, r2, r3
 8004162:	43da      	mvns	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	400a      	ands	r2, r1
 800416a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	b29b      	uxth	r3, r3
 8004178:	4618      	mov	r0, r3
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	685a      	ldr	r2, [r3, #4]
 800417e:	4613      	mov	r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	4413      	add	r3, r2
 8004184:	3b41      	subs	r3, #65	; 0x41
 8004186:	fa00 f203 	lsl.w	r2, r0, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	430a      	orrs	r2, r1
 8004190:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004192:	4b29      	ldr	r3, [pc, #164]	; (8004238 <HAL_ADC_ConfigChannel+0x250>)
 8004194:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a28      	ldr	r2, [pc, #160]	; (800423c <HAL_ADC_ConfigChannel+0x254>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d10f      	bne.n	80041c0 <HAL_ADC_ConfigChannel+0x1d8>
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2b12      	cmp	r3, #18
 80041a6:	d10b      	bne.n	80041c0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a1d      	ldr	r2, [pc, #116]	; (800423c <HAL_ADC_ConfigChannel+0x254>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d12b      	bne.n	8004222 <HAL_ADC_ConfigChannel+0x23a>
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a1c      	ldr	r2, [pc, #112]	; (8004240 <HAL_ADC_ConfigChannel+0x258>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d003      	beq.n	80041dc <HAL_ADC_ConfigChannel+0x1f4>
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2b11      	cmp	r3, #17
 80041da:	d122      	bne.n	8004222 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a11      	ldr	r2, [pc, #68]	; (8004240 <HAL_ADC_ConfigChannel+0x258>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d111      	bne.n	8004222 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80041fe:	4b11      	ldr	r3, [pc, #68]	; (8004244 <HAL_ADC_ConfigChannel+0x25c>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a11      	ldr	r2, [pc, #68]	; (8004248 <HAL_ADC_ConfigChannel+0x260>)
 8004204:	fba2 2303 	umull	r2, r3, r2, r3
 8004208:	0c9a      	lsrs	r2, r3, #18
 800420a:	4613      	mov	r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	4413      	add	r3, r2
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004214:	e002      	b.n	800421c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	3b01      	subs	r3, #1
 800421a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1f9      	bne.n	8004216 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3714      	adds	r7, #20
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	40012300 	.word	0x40012300
 800423c:	40012000 	.word	0x40012000
 8004240:	10000012 	.word	0x10000012
 8004244:	20000008 	.word	0x20000008
 8004248:	431bde83 	.word	0x431bde83

0800424c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004254:	4b79      	ldr	r3, [pc, #484]	; (800443c <ADC_Init+0x1f0>)
 8004256:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	431a      	orrs	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004280:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	6859      	ldr	r1, [r3, #4]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	021a      	lsls	r2, r3, #8
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80042a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	6859      	ldr	r1, [r3, #4]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689a      	ldr	r2, [r3, #8]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	430a      	orrs	r2, r1
 80042b6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	689a      	ldr	r2, [r3, #8]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6899      	ldr	r1, [r3, #8]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68da      	ldr	r2, [r3, #12]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042de:	4a58      	ldr	r2, [pc, #352]	; (8004440 <ADC_Init+0x1f4>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d022      	beq.n	800432a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	689a      	ldr	r2, [r3, #8]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80042f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	6899      	ldr	r1, [r3, #8]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	430a      	orrs	r2, r1
 8004304:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	689a      	ldr	r2, [r3, #8]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004314:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	6899      	ldr	r1, [r3, #8]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	430a      	orrs	r2, r1
 8004326:	609a      	str	r2, [r3, #8]
 8004328:	e00f      	b.n	800434a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	689a      	ldr	r2, [r3, #8]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004338:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	689a      	ldr	r2, [r3, #8]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004348:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	689a      	ldr	r2, [r3, #8]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 0202 	bic.w	r2, r2, #2
 8004358:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	6899      	ldr	r1, [r3, #8]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	7e1b      	ldrb	r3, [r3, #24]
 8004364:	005a      	lsls	r2, r3, #1
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d01b      	beq.n	80043b0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	685a      	ldr	r2, [r3, #4]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004386:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	685a      	ldr	r2, [r3, #4]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004396:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6859      	ldr	r1, [r3, #4]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a2:	3b01      	subs	r3, #1
 80043a4:	035a      	lsls	r2, r3, #13
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	605a      	str	r2, [r3, #4]
 80043ae:	e007      	b.n	80043c0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	685a      	ldr	r2, [r3, #4]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043be:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80043ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	3b01      	subs	r3, #1
 80043dc:	051a      	lsls	r2, r3, #20
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	430a      	orrs	r2, r1
 80043e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	689a      	ldr	r2, [r3, #8]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80043f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	6899      	ldr	r1, [r3, #8]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004402:	025a      	lsls	r2, r3, #9
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	430a      	orrs	r2, r1
 800440a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	689a      	ldr	r2, [r3, #8]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800441a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6899      	ldr	r1, [r3, #8]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	029a      	lsls	r2, r3, #10
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	430a      	orrs	r2, r1
 800442e:	609a      	str	r2, [r3, #8]
}
 8004430:	bf00      	nop
 8004432:	3714      	adds	r7, #20
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr
 800443c:	40012300 	.word	0x40012300
 8004440:	0f000001 	.word	0x0f000001

08004444 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004450:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800445a:	2b00      	cmp	r3, #0
 800445c:	d13c      	bne.n	80044d8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d12b      	bne.n	80044d0 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800447c:	2b00      	cmp	r3, #0
 800447e:	d127      	bne.n	80044d0 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004486:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800448a:	2b00      	cmp	r3, #0
 800448c:	d006      	beq.n	800449c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004498:	2b00      	cmp	r3, #0
 800449a:	d119      	bne.n	80044d0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f022 0220 	bic.w	r2, r2, #32
 80044aa:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d105      	bne.n	80044d0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c8:	f043 0201 	orr.w	r2, r3, #1
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f7fe fe5d 	bl	8003190 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80044d6:	e00e      	b.n	80044f6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044dc:	f003 0310 	and.w	r3, r3, #16
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d003      	beq.n	80044ec <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f7ff fd75 	bl	8003fd4 <HAL_ADC_ErrorCallback>
}
 80044ea:	e004      	b.n	80044f6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	4798      	blx	r3
}
 80044f6:	bf00      	nop
 80044f8:	3710      	adds	r7, #16
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b084      	sub	sp, #16
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f7ff fd4d 	bl	8003fac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004512:	bf00      	nop
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800451a:	b580      	push	{r7, lr}
 800451c:	b084      	sub	sp, #16
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004526:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2240      	movs	r2, #64	; 0x40
 800452c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004532:	f043 0204 	orr.w	r2, r3, #4
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f7ff fd4a 	bl	8003fd4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004540:	bf00      	nop
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f003 0307 	and.w	r3, r3, #7
 800456a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800456c:	4b0c      	ldr	r3, [pc, #48]	; (80045a0 <__NVIC_SetPriorityGrouping+0x44>)
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004572:	68ba      	ldr	r2, [r7, #8]
 8004574:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004578:	4013      	ands	r3, r2
 800457a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004584:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800458c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800458e:	4a04      	ldr	r2, [pc, #16]	; (80045a0 <__NVIC_SetPriorityGrouping+0x44>)
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	60d3      	str	r3, [r2, #12]
}
 8004594:	bf00      	nop
 8004596:	3714      	adds	r7, #20
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr
 80045a0:	e000ed00 	.word	0xe000ed00

080045a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045a4:	b480      	push	{r7}
 80045a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045a8:	4b04      	ldr	r3, [pc, #16]	; (80045bc <__NVIC_GetPriorityGrouping+0x18>)
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	0a1b      	lsrs	r3, r3, #8
 80045ae:	f003 0307 	and.w	r3, r3, #7
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr
 80045bc:	e000ed00 	.word	0xe000ed00

080045c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	4603      	mov	r3, r0
 80045c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	db0b      	blt.n	80045ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045d2:	79fb      	ldrb	r3, [r7, #7]
 80045d4:	f003 021f 	and.w	r2, r3, #31
 80045d8:	4907      	ldr	r1, [pc, #28]	; (80045f8 <__NVIC_EnableIRQ+0x38>)
 80045da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045de:	095b      	lsrs	r3, r3, #5
 80045e0:	2001      	movs	r0, #1
 80045e2:	fa00 f202 	lsl.w	r2, r0, r2
 80045e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80045ea:	bf00      	nop
 80045ec:	370c      	adds	r7, #12
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	e000e100 	.word	0xe000e100

080045fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	4603      	mov	r3, r0
 8004604:	6039      	str	r1, [r7, #0]
 8004606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800460c:	2b00      	cmp	r3, #0
 800460e:	db0a      	blt.n	8004626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	b2da      	uxtb	r2, r3
 8004614:	490c      	ldr	r1, [pc, #48]	; (8004648 <__NVIC_SetPriority+0x4c>)
 8004616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800461a:	0112      	lsls	r2, r2, #4
 800461c:	b2d2      	uxtb	r2, r2
 800461e:	440b      	add	r3, r1
 8004620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004624:	e00a      	b.n	800463c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	b2da      	uxtb	r2, r3
 800462a:	4908      	ldr	r1, [pc, #32]	; (800464c <__NVIC_SetPriority+0x50>)
 800462c:	79fb      	ldrb	r3, [r7, #7]
 800462e:	f003 030f 	and.w	r3, r3, #15
 8004632:	3b04      	subs	r3, #4
 8004634:	0112      	lsls	r2, r2, #4
 8004636:	b2d2      	uxtb	r2, r2
 8004638:	440b      	add	r3, r1
 800463a:	761a      	strb	r2, [r3, #24]
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr
 8004648:	e000e100 	.word	0xe000e100
 800464c:	e000ed00 	.word	0xe000ed00

08004650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004650:	b480      	push	{r7}
 8004652:	b089      	sub	sp, #36	; 0x24
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f003 0307 	and.w	r3, r3, #7
 8004662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	f1c3 0307 	rsb	r3, r3, #7
 800466a:	2b04      	cmp	r3, #4
 800466c:	bf28      	it	cs
 800466e:	2304      	movcs	r3, #4
 8004670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	3304      	adds	r3, #4
 8004676:	2b06      	cmp	r3, #6
 8004678:	d902      	bls.n	8004680 <NVIC_EncodePriority+0x30>
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	3b03      	subs	r3, #3
 800467e:	e000      	b.n	8004682 <NVIC_EncodePriority+0x32>
 8004680:	2300      	movs	r3, #0
 8004682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004684:	f04f 32ff 	mov.w	r2, #4294967295
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	fa02 f303 	lsl.w	r3, r2, r3
 800468e:	43da      	mvns	r2, r3
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	401a      	ands	r2, r3
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004698:	f04f 31ff 	mov.w	r1, #4294967295
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	fa01 f303 	lsl.w	r3, r1, r3
 80046a2:	43d9      	mvns	r1, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046a8:	4313      	orrs	r3, r2
         );
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3724      	adds	r7, #36	; 0x24
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
	...

080046b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	3b01      	subs	r3, #1
 80046c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046c8:	d301      	bcc.n	80046ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046ca:	2301      	movs	r3, #1
 80046cc:	e00f      	b.n	80046ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046ce:	4a0a      	ldr	r2, [pc, #40]	; (80046f8 <SysTick_Config+0x40>)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	3b01      	subs	r3, #1
 80046d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046d6:	210f      	movs	r1, #15
 80046d8:	f04f 30ff 	mov.w	r0, #4294967295
 80046dc:	f7ff ff8e 	bl	80045fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046e0:	4b05      	ldr	r3, [pc, #20]	; (80046f8 <SysTick_Config+0x40>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046e6:	4b04      	ldr	r3, [pc, #16]	; (80046f8 <SysTick_Config+0x40>)
 80046e8:	2207      	movs	r2, #7
 80046ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	e000e010 	.word	0xe000e010

080046fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f7ff ff29 	bl	800455c <__NVIC_SetPriorityGrouping>
}
 800470a:	bf00      	nop
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004712:	b580      	push	{r7, lr}
 8004714:	b086      	sub	sp, #24
 8004716:	af00      	add	r7, sp, #0
 8004718:	4603      	mov	r3, r0
 800471a:	60b9      	str	r1, [r7, #8]
 800471c:	607a      	str	r2, [r7, #4]
 800471e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004720:	2300      	movs	r3, #0
 8004722:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004724:	f7ff ff3e 	bl	80045a4 <__NVIC_GetPriorityGrouping>
 8004728:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	68b9      	ldr	r1, [r7, #8]
 800472e:	6978      	ldr	r0, [r7, #20]
 8004730:	f7ff ff8e 	bl	8004650 <NVIC_EncodePriority>
 8004734:	4602      	mov	r2, r0
 8004736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800473a:	4611      	mov	r1, r2
 800473c:	4618      	mov	r0, r3
 800473e:	f7ff ff5d 	bl	80045fc <__NVIC_SetPriority>
}
 8004742:	bf00      	nop
 8004744:	3718      	adds	r7, #24
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b082      	sub	sp, #8
 800474e:	af00      	add	r7, sp, #0
 8004750:	4603      	mov	r3, r0
 8004752:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004758:	4618      	mov	r0, r3
 800475a:	f7ff ff31 	bl	80045c0 <__NVIC_EnableIRQ>
}
 800475e:	bf00      	nop
 8004760:	3708      	adds	r7, #8
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}

08004766 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004766:	b580      	push	{r7, lr}
 8004768:	b082      	sub	sp, #8
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f7ff ffa2 	bl	80046b8 <SysTick_Config>
 8004774:	4603      	mov	r3, r0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
	...

08004780 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004788:	2300      	movs	r3, #0
 800478a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800478c:	f7ff f97a 	bl	8003a84 <HAL_GetTick>
 8004790:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e099      	b.n	80048d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2202      	movs	r2, #2
 80047a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f022 0201 	bic.w	r2, r2, #1
 80047ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047bc:	e00f      	b.n	80047de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047be:	f7ff f961 	bl	8003a84 <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	2b05      	cmp	r3, #5
 80047ca:	d908      	bls.n	80047de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2220      	movs	r2, #32
 80047d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2203      	movs	r2, #3
 80047d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e078      	b.n	80048d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0301 	and.w	r3, r3, #1
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1e8      	bne.n	80047be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	4b38      	ldr	r3, [pc, #224]	; (80048d8 <HAL_DMA_Init+0x158>)
 80047f8:	4013      	ands	r3, r2
 80047fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800480a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004816:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004822:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	4313      	orrs	r3, r2
 800482e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004834:	2b04      	cmp	r3, #4
 8004836:	d107      	bne.n	8004848 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004840:	4313      	orrs	r3, r2
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	4313      	orrs	r3, r2
 8004846:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	f023 0307 	bic.w	r3, r3, #7
 800485e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	4313      	orrs	r3, r2
 8004868:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486e:	2b04      	cmp	r3, #4
 8004870:	d117      	bne.n	80048a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	4313      	orrs	r3, r2
 800487a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00e      	beq.n	80048a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 fb01 	bl	8004e8c <DMA_CheckFifoParam>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d008      	beq.n	80048a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2240      	movs	r2, #64	; 0x40
 8004894:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800489e:	2301      	movs	r3, #1
 80048a0:	e016      	b.n	80048d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 fab8 	bl	8004e20 <DMA_CalcBaseAndBitshift>
 80048b0:	4603      	mov	r3, r0
 80048b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b8:	223f      	movs	r2, #63	; 0x3f
 80048ba:	409a      	lsls	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3718      	adds	r7, #24
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	f010803f 	.word	0xf010803f

080048dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
 80048e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048ea:	2300      	movs	r3, #0
 80048ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d101      	bne.n	8004902 <HAL_DMA_Start_IT+0x26>
 80048fe:	2302      	movs	r3, #2
 8004900:	e040      	b.n	8004984 <HAL_DMA_Start_IT+0xa8>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b01      	cmp	r3, #1
 8004914:	d12f      	bne.n	8004976 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2202      	movs	r2, #2
 800491a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	68b9      	ldr	r1, [r7, #8]
 800492a:	68f8      	ldr	r0, [r7, #12]
 800492c:	f000 fa4a 	bl	8004dc4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004934:	223f      	movs	r2, #63	; 0x3f
 8004936:	409a      	lsls	r2, r3
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f042 0216 	orr.w	r2, r2, #22
 800494a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004950:	2b00      	cmp	r3, #0
 8004952:	d007      	beq.n	8004964 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f042 0208 	orr.w	r2, r2, #8
 8004962:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f042 0201 	orr.w	r2, r2, #1
 8004972:	601a      	str	r2, [r3, #0]
 8004974:	e005      	b.n	8004982 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800497e:	2302      	movs	r3, #2
 8004980:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004982:	7dfb      	ldrb	r3, [r7, #23]
}
 8004984:	4618      	mov	r0, r3
 8004986:	3718      	adds	r7, #24
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004998:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800499a:	f7ff f873 	bl	8003a84 <HAL_GetTick>
 800499e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d008      	beq.n	80049be <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2280      	movs	r2, #128	; 0x80
 80049b0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e052      	b.n	8004a64 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f022 0216 	bic.w	r2, r2, #22
 80049cc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	695a      	ldr	r2, [r3, #20]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049dc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d103      	bne.n	80049ee <HAL_DMA_Abort+0x62>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d007      	beq.n	80049fe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f022 0208 	bic.w	r2, r2, #8
 80049fc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f022 0201 	bic.w	r2, r2, #1
 8004a0c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a0e:	e013      	b.n	8004a38 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a10:	f7ff f838 	bl	8003a84 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	2b05      	cmp	r3, #5
 8004a1c:	d90c      	bls.n	8004a38 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2220      	movs	r2, #32
 8004a22:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2203      	movs	r2, #3
 8004a28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e015      	b.n	8004a64 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1e4      	bne.n	8004a10 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a4a:	223f      	movs	r2, #63	; 0x3f
 8004a4c:	409a      	lsls	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3710      	adds	r7, #16
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d004      	beq.n	8004a8a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2280      	movs	r2, #128	; 0x80
 8004a84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e00c      	b.n	8004aa4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2205      	movs	r2, #5
 8004a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f022 0201 	bic.w	r2, r2, #1
 8004aa0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004abc:	4b8e      	ldr	r3, [pc, #568]	; (8004cf8 <HAL_DMA_IRQHandler+0x248>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a8e      	ldr	r2, [pc, #568]	; (8004cfc <HAL_DMA_IRQHandler+0x24c>)
 8004ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac6:	0a9b      	lsrs	r3, r3, #10
 8004ac8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ace:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ada:	2208      	movs	r2, #8
 8004adc:	409a      	lsls	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d01a      	beq.n	8004b1c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0304 	and.w	r3, r3, #4
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d013      	beq.n	8004b1c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 0204 	bic.w	r2, r2, #4
 8004b02:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b08:	2208      	movs	r2, #8
 8004b0a:	409a      	lsls	r2, r3
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b14:	f043 0201 	orr.w	r2, r3, #1
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b20:	2201      	movs	r2, #1
 8004b22:	409a      	lsls	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	4013      	ands	r3, r2
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d012      	beq.n	8004b52 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00b      	beq.n	8004b52 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b3e:	2201      	movs	r2, #1
 8004b40:	409a      	lsls	r2, r3
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b4a:	f043 0202 	orr.w	r2, r3, #2
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b56:	2204      	movs	r2, #4
 8004b58:	409a      	lsls	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d012      	beq.n	8004b88 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0302 	and.w	r3, r3, #2
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00b      	beq.n	8004b88 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b74:	2204      	movs	r2, #4
 8004b76:	409a      	lsls	r2, r3
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b80:	f043 0204 	orr.w	r2, r3, #4
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b8c:	2210      	movs	r2, #16
 8004b8e:	409a      	lsls	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	4013      	ands	r3, r2
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d043      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0308 	and.w	r3, r3, #8
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d03c      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004baa:	2210      	movs	r2, #16
 8004bac:	409a      	lsls	r2, r3
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d018      	beq.n	8004bf2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d108      	bne.n	8004be0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d024      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	4798      	blx	r3
 8004bde:	e01f      	b.n	8004c20 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d01b      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	4798      	blx	r3
 8004bf0:	e016      	b.n	8004c20 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d107      	bne.n	8004c10 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f022 0208 	bic.w	r2, r2, #8
 8004c0e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d003      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c24:	2220      	movs	r2, #32
 8004c26:	409a      	lsls	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f000 808f 	beq.w	8004d50 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0310 	and.w	r3, r3, #16
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f000 8087 	beq.w	8004d50 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c46:	2220      	movs	r2, #32
 8004c48:	409a      	lsls	r2, r3
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b05      	cmp	r3, #5
 8004c58:	d136      	bne.n	8004cc8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f022 0216 	bic.w	r2, r2, #22
 8004c68:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	695a      	ldr	r2, [r3, #20]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c78:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d103      	bne.n	8004c8a <HAL_DMA_IRQHandler+0x1da>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d007      	beq.n	8004c9a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f022 0208 	bic.w	r2, r2, #8
 8004c98:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c9e:	223f      	movs	r2, #63	; 0x3f
 8004ca0:	409a      	lsls	r2, r3
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d07e      	beq.n	8004dbc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	4798      	blx	r3
        }
        return;
 8004cc6:	e079      	b.n	8004dbc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d01d      	beq.n	8004d12 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d10d      	bne.n	8004d00 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d031      	beq.n	8004d50 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	4798      	blx	r3
 8004cf4:	e02c      	b.n	8004d50 <HAL_DMA_IRQHandler+0x2a0>
 8004cf6:	bf00      	nop
 8004cf8:	20000008 	.word	0x20000008
 8004cfc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d023      	beq.n	8004d50 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	4798      	blx	r3
 8004d10:	e01e      	b.n	8004d50 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10f      	bne.n	8004d40 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f022 0210 	bic.w	r2, r2, #16
 8004d2e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d003      	beq.n	8004d50 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d032      	beq.n	8004dbe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d5c:	f003 0301 	and.w	r3, r3, #1
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d022      	beq.n	8004daa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2205      	movs	r2, #5
 8004d68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f022 0201 	bic.w	r2, r2, #1
 8004d7a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	3301      	adds	r3, #1
 8004d80:	60bb      	str	r3, [r7, #8]
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d307      	bcc.n	8004d98 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1f2      	bne.n	8004d7c <HAL_DMA_IRQHandler+0x2cc>
 8004d96:	e000      	b.n	8004d9a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004d98:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d005      	beq.n	8004dbe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	4798      	blx	r3
 8004dba:	e000      	b.n	8004dbe <HAL_DMA_IRQHandler+0x30e>
        return;
 8004dbc:	bf00      	nop
    }
  }
}
 8004dbe:	3718      	adds	r7, #24
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
 8004dd0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004de0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	683a      	ldr	r2, [r7, #0]
 8004de8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	2b40      	cmp	r3, #64	; 0x40
 8004df0:	d108      	bne.n	8004e04 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68ba      	ldr	r2, [r7, #8]
 8004e00:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004e02:	e007      	b.n	8004e14 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68ba      	ldr	r2, [r7, #8]
 8004e0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	60da      	str	r2, [r3, #12]
}
 8004e14:	bf00      	nop
 8004e16:	3714      	adds	r7, #20
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	3b10      	subs	r3, #16
 8004e30:	4a14      	ldr	r2, [pc, #80]	; (8004e84 <DMA_CalcBaseAndBitshift+0x64>)
 8004e32:	fba2 2303 	umull	r2, r3, r2, r3
 8004e36:	091b      	lsrs	r3, r3, #4
 8004e38:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004e3a:	4a13      	ldr	r2, [pc, #76]	; (8004e88 <DMA_CalcBaseAndBitshift+0x68>)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	4413      	add	r3, r2
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	461a      	mov	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2b03      	cmp	r3, #3
 8004e4c:	d909      	bls.n	8004e62 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004e56:	f023 0303 	bic.w	r3, r3, #3
 8004e5a:	1d1a      	adds	r2, r3, #4
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	659a      	str	r2, [r3, #88]	; 0x58
 8004e60:	e007      	b.n	8004e72 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004e6a:	f023 0303 	bic.w	r3, r3, #3
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3714      	adds	r7, #20
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	aaaaaaab 	.word	0xaaaaaaab
 8004e88:	0800db54 	.word	0x0800db54

08004e8c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e94:	2300      	movs	r3, #0
 8004e96:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d11f      	bne.n	8004ee6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	2b03      	cmp	r3, #3
 8004eaa:	d856      	bhi.n	8004f5a <DMA_CheckFifoParam+0xce>
 8004eac:	a201      	add	r2, pc, #4	; (adr r2, 8004eb4 <DMA_CheckFifoParam+0x28>)
 8004eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb2:	bf00      	nop
 8004eb4:	08004ec5 	.word	0x08004ec5
 8004eb8:	08004ed7 	.word	0x08004ed7
 8004ebc:	08004ec5 	.word	0x08004ec5
 8004ec0:	08004f5b 	.word	0x08004f5b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d046      	beq.n	8004f5e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ed4:	e043      	b.n	8004f5e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eda:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ede:	d140      	bne.n	8004f62 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ee4:	e03d      	b.n	8004f62 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eee:	d121      	bne.n	8004f34 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	2b03      	cmp	r3, #3
 8004ef4:	d837      	bhi.n	8004f66 <DMA_CheckFifoParam+0xda>
 8004ef6:	a201      	add	r2, pc, #4	; (adr r2, 8004efc <DMA_CheckFifoParam+0x70>)
 8004ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efc:	08004f0d 	.word	0x08004f0d
 8004f00:	08004f13 	.word	0x08004f13
 8004f04:	08004f0d 	.word	0x08004f0d
 8004f08:	08004f25 	.word	0x08004f25
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f10:	e030      	b.n	8004f74 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d025      	beq.n	8004f6a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f22:	e022      	b.n	8004f6a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f28:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f2c:	d11f      	bne.n	8004f6e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004f32:	e01c      	b.n	8004f6e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d903      	bls.n	8004f42 <DMA_CheckFifoParam+0xb6>
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	2b03      	cmp	r3, #3
 8004f3e:	d003      	beq.n	8004f48 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004f40:	e018      	b.n	8004f74 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	73fb      	strb	r3, [r7, #15]
      break;
 8004f46:	e015      	b.n	8004f74 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00e      	beq.n	8004f72 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	73fb      	strb	r3, [r7, #15]
      break;
 8004f58:	e00b      	b.n	8004f72 <DMA_CheckFifoParam+0xe6>
      break;
 8004f5a:	bf00      	nop
 8004f5c:	e00a      	b.n	8004f74 <DMA_CheckFifoParam+0xe8>
      break;
 8004f5e:	bf00      	nop
 8004f60:	e008      	b.n	8004f74 <DMA_CheckFifoParam+0xe8>
      break;
 8004f62:	bf00      	nop
 8004f64:	e006      	b.n	8004f74 <DMA_CheckFifoParam+0xe8>
      break;
 8004f66:	bf00      	nop
 8004f68:	e004      	b.n	8004f74 <DMA_CheckFifoParam+0xe8>
      break;
 8004f6a:	bf00      	nop
 8004f6c:	e002      	b.n	8004f74 <DMA_CheckFifoParam+0xe8>
      break;   
 8004f6e:	bf00      	nop
 8004f70:	e000      	b.n	8004f74 <DMA_CheckFifoParam+0xe8>
      break;
 8004f72:	bf00      	nop
    }
  } 
  
  return status; 
 8004f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3714      	adds	r7, #20
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop

08004f84 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d101      	bne.n	8004f96 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e06c      	b.n	8005070 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d106      	bne.n	8004fae <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2223      	movs	r2, #35	; 0x23
 8004fa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f7fd fd2d 	bl	8002a08 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fae:	2300      	movs	r3, #0
 8004fb0:	60bb      	str	r3, [r7, #8]
 8004fb2:	4b31      	ldr	r3, [pc, #196]	; (8005078 <HAL_ETH_Init+0xf4>)
 8004fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fb6:	4a30      	ldr	r2, [pc, #192]	; (8005078 <HAL_ETH_Init+0xf4>)
 8004fb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8004fbe:	4b2e      	ldr	r3, [pc, #184]	; (8005078 <HAL_ETH_Init+0xf4>)
 8004fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fc6:	60bb      	str	r3, [r7, #8]
 8004fc8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004fca:	4b2c      	ldr	r3, [pc, #176]	; (800507c <HAL_ETH_Init+0xf8>)
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	4a2b      	ldr	r2, [pc, #172]	; (800507c <HAL_ETH_Init+0xf8>)
 8004fd0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004fd4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004fd6:	4b29      	ldr	r3, [pc, #164]	; (800507c <HAL_ETH_Init+0xf8>)
 8004fd8:	685a      	ldr	r2, [r3, #4]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	4927      	ldr	r1, [pc, #156]	; (800507c <HAL_ETH_Init+0xf8>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8004fe4:	4b25      	ldr	r3, [pc, #148]	; (800507c <HAL_ETH_Init+0xf8>)
 8004fe6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	6812      	ldr	r2, [r2, #0]
 8004ff6:	f043 0301 	orr.w	r3, r3, #1
 8004ffa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004ffe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005000:	f7fe fd40 	bl	8003a84 <HAL_GetTick>
 8005004:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8005006:	e011      	b.n	800502c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8005008:	f7fe fd3c 	bl	8003a84 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005016:	d909      	bls.n	800502c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2204      	movs	r2, #4
 800501c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	22e0      	movs	r2, #224	; 0xe0
 8005024:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e021      	b.n	8005070 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1e4      	bne.n	8005008 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f958 	bl	80052f4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 f9ff 	bl	8005448 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 fa55 	bl	80054fa <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	461a      	mov	r2, r3
 8005056:	2100      	movs	r1, #0
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 f9bd 	bl	80053d8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2210      	movs	r2, #16
 800506a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	40023800 	.word	0x40023800
 800507c:	40013800 	.word	0x40013800

08005080 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	4b51      	ldr	r3, [pc, #324]	; (80051dc <ETH_SetMACConfig+0x15c>)
 8005096:	4013      	ands	r3, r2
 8005098:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	7c1b      	ldrb	r3, [r3, #16]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d102      	bne.n	80050a8 <ETH_SetMACConfig+0x28>
 80050a2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80050a6:	e000      	b.n	80050aa <ETH_SetMACConfig+0x2a>
 80050a8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	7c5b      	ldrb	r3, [r3, #17]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d102      	bne.n	80050b8 <ETH_SetMACConfig+0x38>
 80050b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80050b6:	e000      	b.n	80050ba <ETH_SetMACConfig+0x3a>
 80050b8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80050ba:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80050c0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	7fdb      	ldrb	r3, [r3, #31]
 80050c6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80050c8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80050ce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80050d0:	683a      	ldr	r2, [r7, #0]
 80050d2:	7f92      	ldrb	r2, [r2, #30]
 80050d4:	2a00      	cmp	r2, #0
 80050d6:	d102      	bne.n	80050de <ETH_SetMACConfig+0x5e>
 80050d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80050dc:	e000      	b.n	80050e0 <ETH_SetMACConfig+0x60>
 80050de:	2200      	movs	r2, #0
                        macconf->Speed |
 80050e0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	7f1b      	ldrb	r3, [r3, #28]
 80050e6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80050e8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80050ee:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	791b      	ldrb	r3, [r3, #4]
 80050f4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80050f6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80050f8:	683a      	ldr	r2, [r7, #0]
 80050fa:	f892 2020 	ldrb.w	r2, [r2, #32]
 80050fe:	2a00      	cmp	r2, #0
 8005100:	d102      	bne.n	8005108 <ETH_SetMACConfig+0x88>
 8005102:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005106:	e000      	b.n	800510a <ETH_SetMACConfig+0x8a>
 8005108:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800510a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	7bdb      	ldrb	r3, [r3, #15]
 8005110:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8005112:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8005118:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005120:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8005122:	4313      	orrs	r3, r2
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	4313      	orrs	r3, r2
 8005128:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800513a:	2001      	movs	r0, #1
 800513c:	f7fe fcae 	bl	8003a9c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	f64f 7341 	movw	r3, #65345	; 0xff41
 8005156:	4013      	ands	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800515e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8005160:	683a      	ldr	r2, [r7, #0]
 8005162:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8005166:	2a00      	cmp	r2, #0
 8005168:	d101      	bne.n	800516e <ETH_SetMACConfig+0xee>
 800516a:	2280      	movs	r2, #128	; 0x80
 800516c:	e000      	b.n	8005170 <ETH_SetMACConfig+0xf0>
 800516e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005170:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8005176:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005178:	683a      	ldr	r2, [r7, #0]
 800517a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800517e:	2a01      	cmp	r2, #1
 8005180:	d101      	bne.n	8005186 <ETH_SetMACConfig+0x106>
 8005182:	2208      	movs	r2, #8
 8005184:	e000      	b.n	8005188 <ETH_SetMACConfig+0x108>
 8005186:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8005188:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8005190:	2a01      	cmp	r2, #1
 8005192:	d101      	bne.n	8005198 <ETH_SetMACConfig+0x118>
 8005194:	2204      	movs	r2, #4
 8005196:	e000      	b.n	800519a <ETH_SetMACConfig+0x11a>
 8005198:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800519a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800519c:	683a      	ldr	r2, [r7, #0]
 800519e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80051a2:	2a01      	cmp	r2, #1
 80051a4:	d101      	bne.n	80051aa <ETH_SetMACConfig+0x12a>
 80051a6:	2202      	movs	r2, #2
 80051a8:	e000      	b.n	80051ac <ETH_SetMACConfig+0x12c>
 80051aa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80051ac:	4313      	orrs	r3, r2
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80051c4:	2001      	movs	r0, #1
 80051c6:	f7fe fc69 	bl	8003a9c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	619a      	str	r2, [r3, #24]
}
 80051d2:	bf00      	nop
 80051d4:	3710      	adds	r7, #16
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	ff20810f 	.word	0xff20810f

080051e0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	4b3d      	ldr	r3, [pc, #244]	; (80052f0 <ETH_SetDMAConfig+0x110>)
 80051fa:	4013      	ands	r3, r2
 80051fc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	7b1b      	ldrb	r3, [r3, #12]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d102      	bne.n	800520c <ETH_SetDMAConfig+0x2c>
 8005206:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800520a:	e000      	b.n	800520e <ETH_SetDMAConfig+0x2e>
 800520c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	7b5b      	ldrb	r3, [r3, #13]
 8005212:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005214:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8005216:	683a      	ldr	r2, [r7, #0]
 8005218:	7f52      	ldrb	r2, [r2, #29]
 800521a:	2a00      	cmp	r2, #0
 800521c:	d102      	bne.n	8005224 <ETH_SetDMAConfig+0x44>
 800521e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005222:	e000      	b.n	8005226 <ETH_SetDMAConfig+0x46>
 8005224:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8005226:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	7b9b      	ldrb	r3, [r3, #14]
 800522c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800522e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005234:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	7f1b      	ldrb	r3, [r3, #28]
 800523a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800523c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	7f9b      	ldrb	r3, [r3, #30]
 8005242:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8005244:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800524a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005252:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005254:	4313      	orrs	r3, r2
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	4313      	orrs	r3, r2
 800525a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005264:	461a      	mov	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005276:	2001      	movs	r0, #1
 8005278:	f7fe fc10 	bl	8003a9c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005284:	461a      	mov	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	791b      	ldrb	r3, [r3, #4]
 800528e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005294:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800529a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80052a0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80052a8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80052aa:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80052b2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80052b8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	6812      	ldr	r2, [r2, #0]
 80052be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80052c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80052c6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80052d4:	2001      	movs	r0, #1
 80052d6:	f7fe fbe1 	bl	8003a9c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052e2:	461a      	mov	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6013      	str	r3, [r2, #0]
}
 80052e8:	bf00      	nop
 80052ea:	3710      	adds	r7, #16
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	f8de3f23 	.word	0xf8de3f23

080052f4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b0a6      	sub	sp, #152	; 0x98
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80052fc:	2301      	movs	r3, #1
 80052fe:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8005302:	2301      	movs	r3, #1
 8005304:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8005308:	2300      	movs	r3, #0
 800530a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800530c:	2300      	movs	r3, #0
 800530e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8005312:	2301      	movs	r3, #1
 8005314:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8005318:	2300      	movs	r3, #0
 800531a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800531e:	2301      	movs	r3, #1
 8005320:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8005324:	2300      	movs	r3, #0
 8005326:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800532a:	2300      	movs	r3, #0
 800532c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005330:	2300      	movs	r3, #0
 8005332:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8005334:	2300      	movs	r3, #0
 8005336:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800533a:	2300      	movs	r3, #0
 800533c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800533e:	2300      	movs	r3, #0
 8005340:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8005344:	2300      	movs	r3, #0
 8005346:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800534a:	2300      	movs	r3, #0
 800534c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005350:	2300      	movs	r3, #0
 8005352:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005356:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800535a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800535c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005360:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005362:	2300      	movs	r3, #0
 8005364:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005368:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800536c:	4619      	mov	r1, r3
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f7ff fe86 	bl	8005080 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8005374:	2301      	movs	r3, #1
 8005376:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8005378:	2301      	movs	r3, #1
 800537a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800537c:	2301      	movs	r3, #1
 800537e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8005382:	2301      	movs	r3, #1
 8005384:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8005386:	2300      	movs	r3, #0
 8005388:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800538a:	2300      	movs	r3, #0
 800538c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8005390:	2300      	movs	r3, #0
 8005392:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8005396:	2300      	movs	r3, #0
 8005398:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800539a:	2301      	movs	r3, #1
 800539c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80053a0:	2301      	movs	r3, #1
 80053a2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80053a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80053a8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80053aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80053ae:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80053b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80053b4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80053b6:	2301      	movs	r3, #1
 80053b8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80053bc:	2300      	movs	r3, #0
 80053be:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80053c0:	2300      	movs	r3, #0
 80053c2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80053c4:	f107 0308 	add.w	r3, r7, #8
 80053c8:	4619      	mov	r1, r3
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f7ff ff08 	bl	80051e0 <ETH_SetDMAConfig>
}
 80053d0:	bf00      	nop
 80053d2:	3798      	adds	r7, #152	; 0x98
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80053d8:	b480      	push	{r7}
 80053da:	b087      	sub	sp, #28
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	3305      	adds	r3, #5
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	021b      	lsls	r3, r3, #8
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	3204      	adds	r2, #4
 80053f0:	7812      	ldrb	r2, [r2, #0]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	4b11      	ldr	r3, [pc, #68]	; (8005440 <ETH_MACAddressConfig+0x68>)
 80053fa:	4413      	add	r3, r2
 80053fc:	461a      	mov	r2, r3
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	3303      	adds	r3, #3
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	061a      	lsls	r2, r3, #24
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	3302      	adds	r3, #2
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	041b      	lsls	r3, r3, #16
 8005412:	431a      	orrs	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	3301      	adds	r3, #1
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	021b      	lsls	r3, r3, #8
 800541c:	4313      	orrs	r3, r2
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	7812      	ldrb	r2, [r2, #0]
 8005422:	4313      	orrs	r3, r2
 8005424:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	4b06      	ldr	r3, [pc, #24]	; (8005444 <ETH_MACAddressConfig+0x6c>)
 800542a:	4413      	add	r3, r2
 800542c:	461a      	mov	r2, r3
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	6013      	str	r3, [r2, #0]
}
 8005432:	bf00      	nop
 8005434:	371c      	adds	r7, #28
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	40028040 	.word	0x40028040
 8005444:	40028044 	.word	0x40028044

08005448 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005450:	2300      	movs	r3, #0
 8005452:	60fb      	str	r3, [r7, #12]
 8005454:	e03e      	b.n	80054d4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	68d9      	ldr	r1, [r3, #12]
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	4613      	mov	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	4413      	add	r3, r2
 8005462:	00db      	lsls	r3, r3, #3
 8005464:	440b      	add	r3, r1
 8005466:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	2200      	movs	r2, #0
 800546c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	2200      	movs	r2, #0
 8005472:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	2200      	movs	r2, #0
 8005478:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	2200      	movs	r2, #0
 800547e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005480:	68b9      	ldr	r1, [r7, #8]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	3206      	adds	r2, #6
 8005488:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2b02      	cmp	r3, #2
 800549c:	d80c      	bhi.n	80054b8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	68d9      	ldr	r1, [r3, #12]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	1c5a      	adds	r2, r3, #1
 80054a6:	4613      	mov	r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	4413      	add	r3, r2
 80054ac:	00db      	lsls	r3, r3, #3
 80054ae:	440b      	add	r3, r1
 80054b0:	461a      	mov	r2, r3
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	60da      	str	r2, [r3, #12]
 80054b6:	e004      	b.n	80054c2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	461a      	mov	r2, r3
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	3301      	adds	r3, #1
 80054d2:	60fb      	str	r3, [r7, #12]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2b03      	cmp	r3, #3
 80054d8:	d9bd      	bls.n	8005456 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	68da      	ldr	r2, [r3, #12]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054ec:	611a      	str	r2, [r3, #16]
}
 80054ee:	bf00      	nop
 80054f0:	3714      	adds	r7, #20
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80054fa:	b480      	push	{r7}
 80054fc:	b085      	sub	sp, #20
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005502:	2300      	movs	r3, #0
 8005504:	60fb      	str	r3, [r7, #12]
 8005506:	e046      	b.n	8005596 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6919      	ldr	r1, [r3, #16]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	4613      	mov	r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	4413      	add	r3, r2
 8005514:	00db      	lsls	r3, r3, #3
 8005516:	440b      	add	r3, r1
 8005518:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	2200      	movs	r2, #0
 800551e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	2200      	movs	r2, #0
 8005524:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	2200      	movs	r2, #0
 800552a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	2200      	movs	r2, #0
 8005530:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	2200      	movs	r2, #0
 8005536:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	2200      	movs	r2, #0
 800553c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005544:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800554c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800555a:	68b9      	ldr	r1, [r7, #8]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	3212      	adds	r2, #18
 8005562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2b02      	cmp	r3, #2
 800556a:	d80c      	bhi.n	8005586 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6919      	ldr	r1, [r3, #16]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	1c5a      	adds	r2, r3, #1
 8005574:	4613      	mov	r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	4413      	add	r3, r2
 800557a:	00db      	lsls	r3, r3, #3
 800557c:	440b      	add	r3, r1
 800557e:	461a      	mov	r2, r3
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	60da      	str	r2, [r3, #12]
 8005584:	e004      	b.n	8005590 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	461a      	mov	r2, r3
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	3301      	adds	r3, #1
 8005594:	60fb      	str	r3, [r7, #12]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2b03      	cmp	r3, #3
 800559a:	d9b5      	bls.n	8005508 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	691a      	ldr	r2, [r3, #16]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055c6:	60da      	str	r2, [r3, #12]
}
 80055c8:	bf00      	nop
 80055ca:	3714      	adds	r7, #20
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b089      	sub	sp, #36	; 0x24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80055de:	2300      	movs	r3, #0
 80055e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80055e2:	2300      	movs	r3, #0
 80055e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80055e6:	2300      	movs	r3, #0
 80055e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80055ea:	2300      	movs	r3, #0
 80055ec:	61fb      	str	r3, [r7, #28]
 80055ee:	e177      	b.n	80058e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80055f0:	2201      	movs	r2, #1
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	fa02 f303 	lsl.w	r3, r2, r3
 80055f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	697a      	ldr	r2, [r7, #20]
 8005600:	4013      	ands	r3, r2
 8005602:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	429a      	cmp	r2, r3
 800560a:	f040 8166 	bne.w	80058da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f003 0303 	and.w	r3, r3, #3
 8005616:	2b01      	cmp	r3, #1
 8005618:	d005      	beq.n	8005626 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005622:	2b02      	cmp	r3, #2
 8005624:	d130      	bne.n	8005688 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	005b      	lsls	r3, r3, #1
 8005630:	2203      	movs	r2, #3
 8005632:	fa02 f303 	lsl.w	r3, r2, r3
 8005636:	43db      	mvns	r3, r3
 8005638:	69ba      	ldr	r2, [r7, #24]
 800563a:	4013      	ands	r3, r2
 800563c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	68da      	ldr	r2, [r3, #12]
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	005b      	lsls	r3, r3, #1
 8005646:	fa02 f303 	lsl.w	r3, r2, r3
 800564a:	69ba      	ldr	r2, [r7, #24]
 800564c:	4313      	orrs	r3, r2
 800564e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	69ba      	ldr	r2, [r7, #24]
 8005654:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800565c:	2201      	movs	r2, #1
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	fa02 f303 	lsl.w	r3, r2, r3
 8005664:	43db      	mvns	r3, r3
 8005666:	69ba      	ldr	r2, [r7, #24]
 8005668:	4013      	ands	r3, r2
 800566a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	091b      	lsrs	r3, r3, #4
 8005672:	f003 0201 	and.w	r2, r3, #1
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	fa02 f303 	lsl.w	r3, r2, r3
 800567c:	69ba      	ldr	r2, [r7, #24]
 800567e:	4313      	orrs	r3, r2
 8005680:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	69ba      	ldr	r2, [r7, #24]
 8005686:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f003 0303 	and.w	r3, r3, #3
 8005690:	2b03      	cmp	r3, #3
 8005692:	d017      	beq.n	80056c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	005b      	lsls	r3, r3, #1
 800569e:	2203      	movs	r2, #3
 80056a0:	fa02 f303 	lsl.w	r3, r2, r3
 80056a4:	43db      	mvns	r3, r3
 80056a6:	69ba      	ldr	r2, [r7, #24]
 80056a8:	4013      	ands	r3, r2
 80056aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	689a      	ldr	r2, [r3, #8]
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	005b      	lsls	r3, r3, #1
 80056b4:	fa02 f303 	lsl.w	r3, r2, r3
 80056b8:	69ba      	ldr	r2, [r7, #24]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	69ba      	ldr	r2, [r7, #24]
 80056c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	f003 0303 	and.w	r3, r3, #3
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d123      	bne.n	8005718 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	08da      	lsrs	r2, r3, #3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	3208      	adds	r2, #8
 80056d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	f003 0307 	and.w	r3, r3, #7
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	220f      	movs	r2, #15
 80056e8:	fa02 f303 	lsl.w	r3, r2, r3
 80056ec:	43db      	mvns	r3, r3
 80056ee:	69ba      	ldr	r2, [r7, #24]
 80056f0:	4013      	ands	r3, r2
 80056f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	691a      	ldr	r2, [r3, #16]
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	f003 0307 	and.w	r3, r3, #7
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	fa02 f303 	lsl.w	r3, r2, r3
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	4313      	orrs	r3, r2
 8005708:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	08da      	lsrs	r2, r3, #3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	3208      	adds	r2, #8
 8005712:	69b9      	ldr	r1, [r7, #24]
 8005714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	005b      	lsls	r3, r3, #1
 8005722:	2203      	movs	r2, #3
 8005724:	fa02 f303 	lsl.w	r3, r2, r3
 8005728:	43db      	mvns	r3, r3
 800572a:	69ba      	ldr	r2, [r7, #24]
 800572c:	4013      	ands	r3, r2
 800572e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f003 0203 	and.w	r2, r3, #3
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	005b      	lsls	r3, r3, #1
 800573c:	fa02 f303 	lsl.w	r3, r2, r3
 8005740:	69ba      	ldr	r2, [r7, #24]
 8005742:	4313      	orrs	r3, r2
 8005744:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	69ba      	ldr	r2, [r7, #24]
 800574a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005754:	2b00      	cmp	r3, #0
 8005756:	f000 80c0 	beq.w	80058da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800575a:	2300      	movs	r3, #0
 800575c:	60fb      	str	r3, [r7, #12]
 800575e:	4b66      	ldr	r3, [pc, #408]	; (80058f8 <HAL_GPIO_Init+0x324>)
 8005760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005762:	4a65      	ldr	r2, [pc, #404]	; (80058f8 <HAL_GPIO_Init+0x324>)
 8005764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005768:	6453      	str	r3, [r2, #68]	; 0x44
 800576a:	4b63      	ldr	r3, [pc, #396]	; (80058f8 <HAL_GPIO_Init+0x324>)
 800576c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800576e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005772:	60fb      	str	r3, [r7, #12]
 8005774:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005776:	4a61      	ldr	r2, [pc, #388]	; (80058fc <HAL_GPIO_Init+0x328>)
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	089b      	lsrs	r3, r3, #2
 800577c:	3302      	adds	r3, #2
 800577e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005782:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	f003 0303 	and.w	r3, r3, #3
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	220f      	movs	r2, #15
 800578e:	fa02 f303 	lsl.w	r3, r2, r3
 8005792:	43db      	mvns	r3, r3
 8005794:	69ba      	ldr	r2, [r7, #24]
 8005796:	4013      	ands	r3, r2
 8005798:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a58      	ldr	r2, [pc, #352]	; (8005900 <HAL_GPIO_Init+0x32c>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d037      	beq.n	8005812 <HAL_GPIO_Init+0x23e>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a57      	ldr	r2, [pc, #348]	; (8005904 <HAL_GPIO_Init+0x330>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d031      	beq.n	800580e <HAL_GPIO_Init+0x23a>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a56      	ldr	r2, [pc, #344]	; (8005908 <HAL_GPIO_Init+0x334>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d02b      	beq.n	800580a <HAL_GPIO_Init+0x236>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a55      	ldr	r2, [pc, #340]	; (800590c <HAL_GPIO_Init+0x338>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d025      	beq.n	8005806 <HAL_GPIO_Init+0x232>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a54      	ldr	r2, [pc, #336]	; (8005910 <HAL_GPIO_Init+0x33c>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d01f      	beq.n	8005802 <HAL_GPIO_Init+0x22e>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a53      	ldr	r2, [pc, #332]	; (8005914 <HAL_GPIO_Init+0x340>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d019      	beq.n	80057fe <HAL_GPIO_Init+0x22a>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a52      	ldr	r2, [pc, #328]	; (8005918 <HAL_GPIO_Init+0x344>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d013      	beq.n	80057fa <HAL_GPIO_Init+0x226>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a51      	ldr	r2, [pc, #324]	; (800591c <HAL_GPIO_Init+0x348>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d00d      	beq.n	80057f6 <HAL_GPIO_Init+0x222>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a50      	ldr	r2, [pc, #320]	; (8005920 <HAL_GPIO_Init+0x34c>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d007      	beq.n	80057f2 <HAL_GPIO_Init+0x21e>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a4f      	ldr	r2, [pc, #316]	; (8005924 <HAL_GPIO_Init+0x350>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d101      	bne.n	80057ee <HAL_GPIO_Init+0x21a>
 80057ea:	2309      	movs	r3, #9
 80057ec:	e012      	b.n	8005814 <HAL_GPIO_Init+0x240>
 80057ee:	230a      	movs	r3, #10
 80057f0:	e010      	b.n	8005814 <HAL_GPIO_Init+0x240>
 80057f2:	2308      	movs	r3, #8
 80057f4:	e00e      	b.n	8005814 <HAL_GPIO_Init+0x240>
 80057f6:	2307      	movs	r3, #7
 80057f8:	e00c      	b.n	8005814 <HAL_GPIO_Init+0x240>
 80057fa:	2306      	movs	r3, #6
 80057fc:	e00a      	b.n	8005814 <HAL_GPIO_Init+0x240>
 80057fe:	2305      	movs	r3, #5
 8005800:	e008      	b.n	8005814 <HAL_GPIO_Init+0x240>
 8005802:	2304      	movs	r3, #4
 8005804:	e006      	b.n	8005814 <HAL_GPIO_Init+0x240>
 8005806:	2303      	movs	r3, #3
 8005808:	e004      	b.n	8005814 <HAL_GPIO_Init+0x240>
 800580a:	2302      	movs	r3, #2
 800580c:	e002      	b.n	8005814 <HAL_GPIO_Init+0x240>
 800580e:	2301      	movs	r3, #1
 8005810:	e000      	b.n	8005814 <HAL_GPIO_Init+0x240>
 8005812:	2300      	movs	r3, #0
 8005814:	69fa      	ldr	r2, [r7, #28]
 8005816:	f002 0203 	and.w	r2, r2, #3
 800581a:	0092      	lsls	r2, r2, #2
 800581c:	4093      	lsls	r3, r2
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	4313      	orrs	r3, r2
 8005822:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005824:	4935      	ldr	r1, [pc, #212]	; (80058fc <HAL_GPIO_Init+0x328>)
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	089b      	lsrs	r3, r3, #2
 800582a:	3302      	adds	r3, #2
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005832:	4b3d      	ldr	r3, [pc, #244]	; (8005928 <HAL_GPIO_Init+0x354>)
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	43db      	mvns	r3, r3
 800583c:	69ba      	ldr	r2, [r7, #24]
 800583e:	4013      	ands	r3, r2
 8005840:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d003      	beq.n	8005856 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800584e:	69ba      	ldr	r2, [r7, #24]
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	4313      	orrs	r3, r2
 8005854:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005856:	4a34      	ldr	r2, [pc, #208]	; (8005928 <HAL_GPIO_Init+0x354>)
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800585c:	4b32      	ldr	r3, [pc, #200]	; (8005928 <HAL_GPIO_Init+0x354>)
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	43db      	mvns	r3, r3
 8005866:	69ba      	ldr	r2, [r7, #24]
 8005868:	4013      	ands	r3, r2
 800586a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d003      	beq.n	8005880 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005878:	69ba      	ldr	r2, [r7, #24]
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	4313      	orrs	r3, r2
 800587e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005880:	4a29      	ldr	r2, [pc, #164]	; (8005928 <HAL_GPIO_Init+0x354>)
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005886:	4b28      	ldr	r3, [pc, #160]	; (8005928 <HAL_GPIO_Init+0x354>)
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	43db      	mvns	r3, r3
 8005890:	69ba      	ldr	r2, [r7, #24]
 8005892:	4013      	ands	r3, r2
 8005894:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d003      	beq.n	80058aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80058a2:	69ba      	ldr	r2, [r7, #24]
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80058aa:	4a1f      	ldr	r2, [pc, #124]	; (8005928 <HAL_GPIO_Init+0x354>)
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80058b0:	4b1d      	ldr	r3, [pc, #116]	; (8005928 <HAL_GPIO_Init+0x354>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	43db      	mvns	r3, r3
 80058ba:	69ba      	ldr	r2, [r7, #24]
 80058bc:	4013      	ands	r3, r2
 80058be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d003      	beq.n	80058d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80058cc:	69ba      	ldr	r2, [r7, #24]
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80058d4:	4a14      	ldr	r2, [pc, #80]	; (8005928 <HAL_GPIO_Init+0x354>)
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	3301      	adds	r3, #1
 80058de:	61fb      	str	r3, [r7, #28]
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	2b0f      	cmp	r3, #15
 80058e4:	f67f ae84 	bls.w	80055f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80058e8:	bf00      	nop
 80058ea:	bf00      	nop
 80058ec:	3724      	adds	r7, #36	; 0x24
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	40023800 	.word	0x40023800
 80058fc:	40013800 	.word	0x40013800
 8005900:	40020000 	.word	0x40020000
 8005904:	40020400 	.word	0x40020400
 8005908:	40020800 	.word	0x40020800
 800590c:	40020c00 	.word	0x40020c00
 8005910:	40021000 	.word	0x40021000
 8005914:	40021400 	.word	0x40021400
 8005918:	40021800 	.word	0x40021800
 800591c:	40021c00 	.word	0x40021c00
 8005920:	40022000 	.word	0x40022000
 8005924:	40022400 	.word	0x40022400
 8005928:	40013c00 	.word	0x40013c00

0800592c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	460b      	mov	r3, r1
 8005936:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	691a      	ldr	r2, [r3, #16]
 800593c:	887b      	ldrh	r3, [r7, #2]
 800593e:	4013      	ands	r3, r2
 8005940:	2b00      	cmp	r3, #0
 8005942:	d002      	beq.n	800594a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005944:	2301      	movs	r3, #1
 8005946:	73fb      	strb	r3, [r7, #15]
 8005948:	e001      	b.n	800594e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800594a:	2300      	movs	r3, #0
 800594c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800594e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005950:	4618      	mov	r0, r3
 8005952:	3714      	adds	r7, #20
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	460b      	mov	r3, r1
 8005966:	807b      	strh	r3, [r7, #2]
 8005968:	4613      	mov	r3, r2
 800596a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800596c:	787b      	ldrb	r3, [r7, #1]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d003      	beq.n	800597a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005972:	887a      	ldrh	r2, [r7, #2]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005978:	e003      	b.n	8005982 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800597a:	887b      	ldrh	r3, [r7, #2]
 800597c:	041a      	lsls	r2, r3, #16
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	619a      	str	r2, [r3, #24]
}
 8005982:	bf00      	nop
 8005984:	370c      	adds	r7, #12
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr

0800598e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800598e:	b580      	push	{r7, lr}
 8005990:	b086      	sub	sp, #24
 8005992:	af02      	add	r7, sp, #8
 8005994:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d101      	bne.n	80059a0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e101      	b.n	8005ba4 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d106      	bne.n	80059c0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f7fd fb8c 	bl	80030d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2203      	movs	r2, #3
 80059c4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059ce:	d102      	bne.n	80059d6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4618      	mov	r0, r3
 80059dc:	f003 f962 	bl	8008ca4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6818      	ldr	r0, [r3, #0]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	7c1a      	ldrb	r2, [r3, #16]
 80059e8:	f88d 2000 	strb.w	r2, [sp]
 80059ec:	3304      	adds	r3, #4
 80059ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80059f0:	f003 f8f4 	bl	8008bdc <USB_CoreInit>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d005      	beq.n	8005a06 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2202      	movs	r2, #2
 80059fe:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e0ce      	b.n	8005ba4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2100      	movs	r1, #0
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f003 f95a 	bl	8008cc6 <USB_SetCurrentMode>
 8005a12:	4603      	mov	r3, r0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d005      	beq.n	8005a24 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2202      	movs	r2, #2
 8005a1c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e0bf      	b.n	8005ba4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a24:	2300      	movs	r3, #0
 8005a26:	73fb      	strb	r3, [r7, #15]
 8005a28:	e04a      	b.n	8005ac0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005a2a:	7bfa      	ldrb	r2, [r7, #15]
 8005a2c:	6879      	ldr	r1, [r7, #4]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	00db      	lsls	r3, r3, #3
 8005a32:	4413      	add	r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	440b      	add	r3, r1
 8005a38:	3315      	adds	r3, #21
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005a3e:	7bfa      	ldrb	r2, [r7, #15]
 8005a40:	6879      	ldr	r1, [r7, #4]
 8005a42:	4613      	mov	r3, r2
 8005a44:	00db      	lsls	r3, r3, #3
 8005a46:	4413      	add	r3, r2
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	440b      	add	r3, r1
 8005a4c:	3314      	adds	r3, #20
 8005a4e:	7bfa      	ldrb	r2, [r7, #15]
 8005a50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005a52:	7bfa      	ldrb	r2, [r7, #15]
 8005a54:	7bfb      	ldrb	r3, [r7, #15]
 8005a56:	b298      	uxth	r0, r3
 8005a58:	6879      	ldr	r1, [r7, #4]
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	00db      	lsls	r3, r3, #3
 8005a5e:	4413      	add	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	440b      	add	r3, r1
 8005a64:	332e      	adds	r3, #46	; 0x2e
 8005a66:	4602      	mov	r2, r0
 8005a68:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005a6a:	7bfa      	ldrb	r2, [r7, #15]
 8005a6c:	6879      	ldr	r1, [r7, #4]
 8005a6e:	4613      	mov	r3, r2
 8005a70:	00db      	lsls	r3, r3, #3
 8005a72:	4413      	add	r3, r2
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	440b      	add	r3, r1
 8005a78:	3318      	adds	r3, #24
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005a7e:	7bfa      	ldrb	r2, [r7, #15]
 8005a80:	6879      	ldr	r1, [r7, #4]
 8005a82:	4613      	mov	r3, r2
 8005a84:	00db      	lsls	r3, r3, #3
 8005a86:	4413      	add	r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	440b      	add	r3, r1
 8005a8c:	331c      	adds	r3, #28
 8005a8e:	2200      	movs	r2, #0
 8005a90:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005a92:	7bfa      	ldrb	r2, [r7, #15]
 8005a94:	6879      	ldr	r1, [r7, #4]
 8005a96:	4613      	mov	r3, r2
 8005a98:	00db      	lsls	r3, r3, #3
 8005a9a:	4413      	add	r3, r2
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	440b      	add	r3, r1
 8005aa0:	3320      	adds	r3, #32
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005aa6:	7bfa      	ldrb	r2, [r7, #15]
 8005aa8:	6879      	ldr	r1, [r7, #4]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	00db      	lsls	r3, r3, #3
 8005aae:	4413      	add	r3, r2
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	440b      	add	r3, r1
 8005ab4:	3324      	adds	r3, #36	; 0x24
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005aba:	7bfb      	ldrb	r3, [r7, #15]
 8005abc:	3301      	adds	r3, #1
 8005abe:	73fb      	strb	r3, [r7, #15]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	791b      	ldrb	r3, [r3, #4]
 8005ac4:	7bfa      	ldrb	r2, [r7, #15]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d3af      	bcc.n	8005a2a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005aca:	2300      	movs	r3, #0
 8005acc:	73fb      	strb	r3, [r7, #15]
 8005ace:	e044      	b.n	8005b5a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005ad0:	7bfa      	ldrb	r2, [r7, #15]
 8005ad2:	6879      	ldr	r1, [r7, #4]
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	00db      	lsls	r3, r3, #3
 8005ad8:	4413      	add	r3, r2
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	440b      	add	r3, r1
 8005ade:	f203 2355 	addw	r3, r3, #597	; 0x255
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005ae6:	7bfa      	ldrb	r2, [r7, #15]
 8005ae8:	6879      	ldr	r1, [r7, #4]
 8005aea:	4613      	mov	r3, r2
 8005aec:	00db      	lsls	r3, r3, #3
 8005aee:	4413      	add	r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	440b      	add	r3, r1
 8005af4:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8005af8:	7bfa      	ldrb	r2, [r7, #15]
 8005afa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005afc:	7bfa      	ldrb	r2, [r7, #15]
 8005afe:	6879      	ldr	r1, [r7, #4]
 8005b00:	4613      	mov	r3, r2
 8005b02:	00db      	lsls	r3, r3, #3
 8005b04:	4413      	add	r3, r2
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	440b      	add	r3, r1
 8005b0a:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8005b0e:	2200      	movs	r2, #0
 8005b10:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005b12:	7bfa      	ldrb	r2, [r7, #15]
 8005b14:	6879      	ldr	r1, [r7, #4]
 8005b16:	4613      	mov	r3, r2
 8005b18:	00db      	lsls	r3, r3, #3
 8005b1a:	4413      	add	r3, r2
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	440b      	add	r3, r1
 8005b20:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8005b24:	2200      	movs	r2, #0
 8005b26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005b28:	7bfa      	ldrb	r2, [r7, #15]
 8005b2a:	6879      	ldr	r1, [r7, #4]
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	00db      	lsls	r3, r3, #3
 8005b30:	4413      	add	r3, r2
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	440b      	add	r3, r1
 8005b36:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005b3e:	7bfa      	ldrb	r2, [r7, #15]
 8005b40:	6879      	ldr	r1, [r7, #4]
 8005b42:	4613      	mov	r3, r2
 8005b44:	00db      	lsls	r3, r3, #3
 8005b46:	4413      	add	r3, r2
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	440b      	add	r3, r1
 8005b4c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8005b50:	2200      	movs	r2, #0
 8005b52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b54:	7bfb      	ldrb	r3, [r7, #15]
 8005b56:	3301      	adds	r3, #1
 8005b58:	73fb      	strb	r3, [r7, #15]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	791b      	ldrb	r3, [r3, #4]
 8005b5e:	7bfa      	ldrb	r2, [r7, #15]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d3b5      	bcc.n	8005ad0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6818      	ldr	r0, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	7c1a      	ldrb	r2, [r3, #16]
 8005b6c:	f88d 2000 	strb.w	r2, [sp]
 8005b70:	3304      	adds	r3, #4
 8005b72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b74:	f003 f8f4 	bl	8008d60 <USB_DevInit>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d005      	beq.n	8005b8a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2202      	movs	r2, #2
 8005b82:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e00c      	b.n	8005ba4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f003 fabc 	bl	800911a <USB_DevDisconnect>

  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3710      	adds	r7, #16
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b086      	sub	sp, #24
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d101      	bne.n	8005bbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e267      	b.n	800608e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0301 	and.w	r3, r3, #1
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d075      	beq.n	8005cb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005bca:	4b88      	ldr	r3, [pc, #544]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f003 030c 	and.w	r3, r3, #12
 8005bd2:	2b04      	cmp	r3, #4
 8005bd4:	d00c      	beq.n	8005bf0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bd6:	4b85      	ldr	r3, [pc, #532]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005bde:	2b08      	cmp	r3, #8
 8005be0:	d112      	bne.n	8005c08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005be2:	4b82      	ldr	r3, [pc, #520]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bee:	d10b      	bne.n	8005c08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bf0:	4b7e      	ldr	r3, [pc, #504]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d05b      	beq.n	8005cb4 <HAL_RCC_OscConfig+0x108>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d157      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e242      	b.n	800608e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c10:	d106      	bne.n	8005c20 <HAL_RCC_OscConfig+0x74>
 8005c12:	4b76      	ldr	r3, [pc, #472]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a75      	ldr	r2, [pc, #468]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c1c:	6013      	str	r3, [r2, #0]
 8005c1e:	e01d      	b.n	8005c5c <HAL_RCC_OscConfig+0xb0>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c28:	d10c      	bne.n	8005c44 <HAL_RCC_OscConfig+0x98>
 8005c2a:	4b70      	ldr	r3, [pc, #448]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a6f      	ldr	r2, [pc, #444]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005c30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c34:	6013      	str	r3, [r2, #0]
 8005c36:	4b6d      	ldr	r3, [pc, #436]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a6c      	ldr	r2, [pc, #432]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c40:	6013      	str	r3, [r2, #0]
 8005c42:	e00b      	b.n	8005c5c <HAL_RCC_OscConfig+0xb0>
 8005c44:	4b69      	ldr	r3, [pc, #420]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a68      	ldr	r2, [pc, #416]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c4e:	6013      	str	r3, [r2, #0]
 8005c50:	4b66      	ldr	r3, [pc, #408]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a65      	ldr	r2, [pc, #404]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d013      	beq.n	8005c8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c64:	f7fd ff0e 	bl	8003a84 <HAL_GetTick>
 8005c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c6a:	e008      	b.n	8005c7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c6c:	f7fd ff0a 	bl	8003a84 <HAL_GetTick>
 8005c70:	4602      	mov	r2, r0
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	2b64      	cmp	r3, #100	; 0x64
 8005c78:	d901      	bls.n	8005c7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e207      	b.n	800608e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c7e:	4b5b      	ldr	r3, [pc, #364]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d0f0      	beq.n	8005c6c <HAL_RCC_OscConfig+0xc0>
 8005c8a:	e014      	b.n	8005cb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c8c:	f7fd fefa 	bl	8003a84 <HAL_GetTick>
 8005c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c92:	e008      	b.n	8005ca6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c94:	f7fd fef6 	bl	8003a84 <HAL_GetTick>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	2b64      	cmp	r3, #100	; 0x64
 8005ca0:	d901      	bls.n	8005ca6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e1f3      	b.n	800608e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ca6:	4b51      	ldr	r3, [pc, #324]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d1f0      	bne.n	8005c94 <HAL_RCC_OscConfig+0xe8>
 8005cb2:	e000      	b.n	8005cb6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0302 	and.w	r3, r3, #2
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d063      	beq.n	8005d8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005cc2:	4b4a      	ldr	r3, [pc, #296]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	f003 030c 	and.w	r3, r3, #12
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00b      	beq.n	8005ce6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cce:	4b47      	ldr	r3, [pc, #284]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005cd6:	2b08      	cmp	r3, #8
 8005cd8:	d11c      	bne.n	8005d14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cda:	4b44      	ldr	r3, [pc, #272]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d116      	bne.n	8005d14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ce6:	4b41      	ldr	r3, [pc, #260]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0302 	and.w	r3, r3, #2
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d005      	beq.n	8005cfe <HAL_RCC_OscConfig+0x152>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d001      	beq.n	8005cfe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e1c7      	b.n	800608e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cfe:	4b3b      	ldr	r3, [pc, #236]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	00db      	lsls	r3, r3, #3
 8005d0c:	4937      	ldr	r1, [pc, #220]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d12:	e03a      	b.n	8005d8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d020      	beq.n	8005d5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d1c:	4b34      	ldr	r3, [pc, #208]	; (8005df0 <HAL_RCC_OscConfig+0x244>)
 8005d1e:	2201      	movs	r2, #1
 8005d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d22:	f7fd feaf 	bl	8003a84 <HAL_GetTick>
 8005d26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d28:	e008      	b.n	8005d3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d2a:	f7fd feab 	bl	8003a84 <HAL_GetTick>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	d901      	bls.n	8005d3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e1a8      	b.n	800608e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d3c:	4b2b      	ldr	r3, [pc, #172]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0302 	and.w	r3, r3, #2
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d0f0      	beq.n	8005d2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d48:	4b28      	ldr	r3, [pc, #160]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	00db      	lsls	r3, r3, #3
 8005d56:	4925      	ldr	r1, [pc, #148]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	600b      	str	r3, [r1, #0]
 8005d5c:	e015      	b.n	8005d8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d5e:	4b24      	ldr	r3, [pc, #144]	; (8005df0 <HAL_RCC_OscConfig+0x244>)
 8005d60:	2200      	movs	r2, #0
 8005d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d64:	f7fd fe8e 	bl	8003a84 <HAL_GetTick>
 8005d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d6a:	e008      	b.n	8005d7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d6c:	f7fd fe8a 	bl	8003a84 <HAL_GetTick>
 8005d70:	4602      	mov	r2, r0
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d901      	bls.n	8005d7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005d7a:	2303      	movs	r3, #3
 8005d7c:	e187      	b.n	800608e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d7e:	4b1b      	ldr	r3, [pc, #108]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0302 	and.w	r3, r3, #2
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1f0      	bne.n	8005d6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0308 	and.w	r3, r3, #8
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d036      	beq.n	8005e04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d016      	beq.n	8005dcc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d9e:	4b15      	ldr	r3, [pc, #84]	; (8005df4 <HAL_RCC_OscConfig+0x248>)
 8005da0:	2201      	movs	r2, #1
 8005da2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005da4:	f7fd fe6e 	bl	8003a84 <HAL_GetTick>
 8005da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005daa:	e008      	b.n	8005dbe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005dac:	f7fd fe6a 	bl	8003a84 <HAL_GetTick>
 8005db0:	4602      	mov	r2, r0
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	d901      	bls.n	8005dbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005dba:	2303      	movs	r3, #3
 8005dbc:	e167      	b.n	800608e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dbe:	4b0b      	ldr	r3, [pc, #44]	; (8005dec <HAL_RCC_OscConfig+0x240>)
 8005dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dc2:	f003 0302 	and.w	r3, r3, #2
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d0f0      	beq.n	8005dac <HAL_RCC_OscConfig+0x200>
 8005dca:	e01b      	b.n	8005e04 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005dcc:	4b09      	ldr	r3, [pc, #36]	; (8005df4 <HAL_RCC_OscConfig+0x248>)
 8005dce:	2200      	movs	r2, #0
 8005dd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dd2:	f7fd fe57 	bl	8003a84 <HAL_GetTick>
 8005dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005dd8:	e00e      	b.n	8005df8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005dda:	f7fd fe53 	bl	8003a84 <HAL_GetTick>
 8005dde:	4602      	mov	r2, r0
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	d907      	bls.n	8005df8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	e150      	b.n	800608e <HAL_RCC_OscConfig+0x4e2>
 8005dec:	40023800 	.word	0x40023800
 8005df0:	42470000 	.word	0x42470000
 8005df4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005df8:	4b88      	ldr	r3, [pc, #544]	; (800601c <HAL_RCC_OscConfig+0x470>)
 8005dfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dfc:	f003 0302 	and.w	r3, r3, #2
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d1ea      	bne.n	8005dda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 0304 	and.w	r3, r3, #4
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	f000 8097 	beq.w	8005f40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e12:	2300      	movs	r3, #0
 8005e14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e16:	4b81      	ldr	r3, [pc, #516]	; (800601c <HAL_RCC_OscConfig+0x470>)
 8005e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d10f      	bne.n	8005e42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e22:	2300      	movs	r3, #0
 8005e24:	60bb      	str	r3, [r7, #8]
 8005e26:	4b7d      	ldr	r3, [pc, #500]	; (800601c <HAL_RCC_OscConfig+0x470>)
 8005e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2a:	4a7c      	ldr	r2, [pc, #496]	; (800601c <HAL_RCC_OscConfig+0x470>)
 8005e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e30:	6413      	str	r3, [r2, #64]	; 0x40
 8005e32:	4b7a      	ldr	r3, [pc, #488]	; (800601c <HAL_RCC_OscConfig+0x470>)
 8005e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e3a:	60bb      	str	r3, [r7, #8]
 8005e3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e42:	4b77      	ldr	r3, [pc, #476]	; (8006020 <HAL_RCC_OscConfig+0x474>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d118      	bne.n	8005e80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e4e:	4b74      	ldr	r3, [pc, #464]	; (8006020 <HAL_RCC_OscConfig+0x474>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a73      	ldr	r2, [pc, #460]	; (8006020 <HAL_RCC_OscConfig+0x474>)
 8005e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e5a:	f7fd fe13 	bl	8003a84 <HAL_GetTick>
 8005e5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e60:	e008      	b.n	8005e74 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e62:	f7fd fe0f 	bl	8003a84 <HAL_GetTick>
 8005e66:	4602      	mov	r2, r0
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d901      	bls.n	8005e74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e10c      	b.n	800608e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e74:	4b6a      	ldr	r3, [pc, #424]	; (8006020 <HAL_RCC_OscConfig+0x474>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d0f0      	beq.n	8005e62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d106      	bne.n	8005e96 <HAL_RCC_OscConfig+0x2ea>
 8005e88:	4b64      	ldr	r3, [pc, #400]	; (800601c <HAL_RCC_OscConfig+0x470>)
 8005e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e8c:	4a63      	ldr	r2, [pc, #396]	; (800601c <HAL_RCC_OscConfig+0x470>)
 8005e8e:	f043 0301 	orr.w	r3, r3, #1
 8005e92:	6713      	str	r3, [r2, #112]	; 0x70
 8005e94:	e01c      	b.n	8005ed0 <HAL_RCC_OscConfig+0x324>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	2b05      	cmp	r3, #5
 8005e9c:	d10c      	bne.n	8005eb8 <HAL_RCC_OscConfig+0x30c>
 8005e9e:	4b5f      	ldr	r3, [pc, #380]	; (800601c <HAL_RCC_OscConfig+0x470>)
 8005ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ea2:	4a5e      	ldr	r2, [pc, #376]	; (800601c <HAL_RCC_OscConfig+0x470>)
 8005ea4:	f043 0304 	orr.w	r3, r3, #4
 8005ea8:	6713      	str	r3, [r2, #112]	; 0x70
 8005eaa:	4b5c      	ldr	r3, [pc, #368]	; (800601c <HAL_RCC_OscConfig+0x470>)
 8005eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eae:	4a5b      	ldr	r2, [pc, #364]	; (800601c <HAL_RCC_OscConfig+0x470>)
 8005eb0:	f043 0301 	orr.w	r3, r3, #1
 8005eb4:	6713      	str	r3, [r2, #112]	; 0x70
 8005eb6:	e00b      	b.n	8005ed0 <HAL_RCC_OscConfig+0x324>
 8005eb8:	4b58      	ldr	r3, [pc, #352]	; (800601c <HAL_RCC_OscConfig+0x470>)
 8005eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ebc:	4a57      	ldr	r2, [pc, #348]	; (800601c <HAL_RCC_OscConfig+0x470>)
 8005ebe:	f023 0301 	bic.w	r3, r3, #1
 8005ec2:	6713      	str	r3, [r2, #112]	; 0x70
 8005ec4:	4b55      	ldr	r3, [pc, #340]	; (800601c <HAL_RCC_OscConfig+0x470>)
 8005ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ec8:	4a54      	ldr	r2, [pc, #336]	; (800601c <HAL_RCC_OscConfig+0x470>)
 8005eca:	f023 0304 	bic.w	r3, r3, #4
 8005ece:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d015      	beq.n	8005f04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ed8:	f7fd fdd4 	bl	8003a84 <HAL_GetTick>
 8005edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ede:	e00a      	b.n	8005ef6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ee0:	f7fd fdd0 	bl	8003a84 <HAL_GetTick>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d901      	bls.n	8005ef6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e0cb      	b.n	800608e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ef6:	4b49      	ldr	r3, [pc, #292]	; (800601c <HAL_RCC_OscConfig+0x470>)
 8005ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005efa:	f003 0302 	and.w	r3, r3, #2
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d0ee      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x334>
 8005f02:	e014      	b.n	8005f2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f04:	f7fd fdbe 	bl	8003a84 <HAL_GetTick>
 8005f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f0a:	e00a      	b.n	8005f22 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f0c:	f7fd fdba 	bl	8003a84 <HAL_GetTick>
 8005f10:	4602      	mov	r2, r0
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d901      	bls.n	8005f22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e0b5      	b.n	800608e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f22:	4b3e      	ldr	r3, [pc, #248]	; (800601c <HAL_RCC_OscConfig+0x470>)
 8005f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f26:	f003 0302 	and.w	r3, r3, #2
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1ee      	bne.n	8005f0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f2e:	7dfb      	ldrb	r3, [r7, #23]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d105      	bne.n	8005f40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f34:	4b39      	ldr	r3, [pc, #228]	; (800601c <HAL_RCC_OscConfig+0x470>)
 8005f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f38:	4a38      	ldr	r2, [pc, #224]	; (800601c <HAL_RCC_OscConfig+0x470>)
 8005f3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f3e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	699b      	ldr	r3, [r3, #24]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f000 80a1 	beq.w	800608c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f4a:	4b34      	ldr	r3, [pc, #208]	; (800601c <HAL_RCC_OscConfig+0x470>)
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	f003 030c 	and.w	r3, r3, #12
 8005f52:	2b08      	cmp	r3, #8
 8005f54:	d05c      	beq.n	8006010 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	699b      	ldr	r3, [r3, #24]
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d141      	bne.n	8005fe2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f5e:	4b31      	ldr	r3, [pc, #196]	; (8006024 <HAL_RCC_OscConfig+0x478>)
 8005f60:	2200      	movs	r2, #0
 8005f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f64:	f7fd fd8e 	bl	8003a84 <HAL_GetTick>
 8005f68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f6a:	e008      	b.n	8005f7e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f6c:	f7fd fd8a 	bl	8003a84 <HAL_GetTick>
 8005f70:	4602      	mov	r2, r0
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d901      	bls.n	8005f7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e087      	b.n	800608e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f7e:	4b27      	ldr	r3, [pc, #156]	; (800601c <HAL_RCC_OscConfig+0x470>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1f0      	bne.n	8005f6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	69da      	ldr	r2, [r3, #28]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a1b      	ldr	r3, [r3, #32]
 8005f92:	431a      	orrs	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f98:	019b      	lsls	r3, r3, #6
 8005f9a:	431a      	orrs	r2, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa0:	085b      	lsrs	r3, r3, #1
 8005fa2:	3b01      	subs	r3, #1
 8005fa4:	041b      	lsls	r3, r3, #16
 8005fa6:	431a      	orrs	r2, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fac:	061b      	lsls	r3, r3, #24
 8005fae:	491b      	ldr	r1, [pc, #108]	; (800601c <HAL_RCC_OscConfig+0x470>)
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fb4:	4b1b      	ldr	r3, [pc, #108]	; (8006024 <HAL_RCC_OscConfig+0x478>)
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fba:	f7fd fd63 	bl	8003a84 <HAL_GetTick>
 8005fbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fc0:	e008      	b.n	8005fd4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fc2:	f7fd fd5f 	bl	8003a84 <HAL_GetTick>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d901      	bls.n	8005fd4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	e05c      	b.n	800608e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fd4:	4b11      	ldr	r3, [pc, #68]	; (800601c <HAL_RCC_OscConfig+0x470>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d0f0      	beq.n	8005fc2 <HAL_RCC_OscConfig+0x416>
 8005fe0:	e054      	b.n	800608c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fe2:	4b10      	ldr	r3, [pc, #64]	; (8006024 <HAL_RCC_OscConfig+0x478>)
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fe8:	f7fd fd4c 	bl	8003a84 <HAL_GetTick>
 8005fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fee:	e008      	b.n	8006002 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ff0:	f7fd fd48 	bl	8003a84 <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d901      	bls.n	8006002 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e045      	b.n	800608e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006002:	4b06      	ldr	r3, [pc, #24]	; (800601c <HAL_RCC_OscConfig+0x470>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1f0      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x444>
 800600e:	e03d      	b.n	800608c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	699b      	ldr	r3, [r3, #24]
 8006014:	2b01      	cmp	r3, #1
 8006016:	d107      	bne.n	8006028 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e038      	b.n	800608e <HAL_RCC_OscConfig+0x4e2>
 800601c:	40023800 	.word	0x40023800
 8006020:	40007000 	.word	0x40007000
 8006024:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006028:	4b1b      	ldr	r3, [pc, #108]	; (8006098 <HAL_RCC_OscConfig+0x4ec>)
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d028      	beq.n	8006088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006040:	429a      	cmp	r2, r3
 8006042:	d121      	bne.n	8006088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800604e:	429a      	cmp	r2, r3
 8006050:	d11a      	bne.n	8006088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006058:	4013      	ands	r3, r2
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800605e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006060:	4293      	cmp	r3, r2
 8006062:	d111      	bne.n	8006088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800606e:	085b      	lsrs	r3, r3, #1
 8006070:	3b01      	subs	r3, #1
 8006072:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006074:	429a      	cmp	r2, r3
 8006076:	d107      	bne.n	8006088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006082:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006084:	429a      	cmp	r2, r3
 8006086:	d001      	beq.n	800608c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e000      	b.n	800608e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3718      	adds	r7, #24
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	40023800 	.word	0x40023800

0800609c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d101      	bne.n	80060b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	e0cc      	b.n	800624a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80060b0:	4b68      	ldr	r3, [pc, #416]	; (8006254 <HAL_RCC_ClockConfig+0x1b8>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 030f 	and.w	r3, r3, #15
 80060b8:	683a      	ldr	r2, [r7, #0]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d90c      	bls.n	80060d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060be:	4b65      	ldr	r3, [pc, #404]	; (8006254 <HAL_RCC_ClockConfig+0x1b8>)
 80060c0:	683a      	ldr	r2, [r7, #0]
 80060c2:	b2d2      	uxtb	r2, r2
 80060c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060c6:	4b63      	ldr	r3, [pc, #396]	; (8006254 <HAL_RCC_ClockConfig+0x1b8>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 030f 	and.w	r3, r3, #15
 80060ce:	683a      	ldr	r2, [r7, #0]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d001      	beq.n	80060d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e0b8      	b.n	800624a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 0302 	and.w	r3, r3, #2
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d020      	beq.n	8006126 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 0304 	and.w	r3, r3, #4
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d005      	beq.n	80060fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80060f0:	4b59      	ldr	r3, [pc, #356]	; (8006258 <HAL_RCC_ClockConfig+0x1bc>)
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	4a58      	ldr	r2, [pc, #352]	; (8006258 <HAL_RCC_ClockConfig+0x1bc>)
 80060f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80060fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0308 	and.w	r3, r3, #8
 8006104:	2b00      	cmp	r3, #0
 8006106:	d005      	beq.n	8006114 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006108:	4b53      	ldr	r3, [pc, #332]	; (8006258 <HAL_RCC_ClockConfig+0x1bc>)
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	4a52      	ldr	r2, [pc, #328]	; (8006258 <HAL_RCC_ClockConfig+0x1bc>)
 800610e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006112:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006114:	4b50      	ldr	r3, [pc, #320]	; (8006258 <HAL_RCC_ClockConfig+0x1bc>)
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	494d      	ldr	r1, [pc, #308]	; (8006258 <HAL_RCC_ClockConfig+0x1bc>)
 8006122:	4313      	orrs	r3, r2
 8006124:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 0301 	and.w	r3, r3, #1
 800612e:	2b00      	cmp	r3, #0
 8006130:	d044      	beq.n	80061bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	2b01      	cmp	r3, #1
 8006138:	d107      	bne.n	800614a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800613a:	4b47      	ldr	r3, [pc, #284]	; (8006258 <HAL_RCC_ClockConfig+0x1bc>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006142:	2b00      	cmp	r3, #0
 8006144:	d119      	bne.n	800617a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e07f      	b.n	800624a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	2b02      	cmp	r3, #2
 8006150:	d003      	beq.n	800615a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006156:	2b03      	cmp	r3, #3
 8006158:	d107      	bne.n	800616a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800615a:	4b3f      	ldr	r3, [pc, #252]	; (8006258 <HAL_RCC_ClockConfig+0x1bc>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006162:	2b00      	cmp	r3, #0
 8006164:	d109      	bne.n	800617a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e06f      	b.n	800624a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800616a:	4b3b      	ldr	r3, [pc, #236]	; (8006258 <HAL_RCC_ClockConfig+0x1bc>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 0302 	and.w	r3, r3, #2
 8006172:	2b00      	cmp	r3, #0
 8006174:	d101      	bne.n	800617a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e067      	b.n	800624a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800617a:	4b37      	ldr	r3, [pc, #220]	; (8006258 <HAL_RCC_ClockConfig+0x1bc>)
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	f023 0203 	bic.w	r2, r3, #3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	4934      	ldr	r1, [pc, #208]	; (8006258 <HAL_RCC_ClockConfig+0x1bc>)
 8006188:	4313      	orrs	r3, r2
 800618a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800618c:	f7fd fc7a 	bl	8003a84 <HAL_GetTick>
 8006190:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006192:	e00a      	b.n	80061aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006194:	f7fd fc76 	bl	8003a84 <HAL_GetTick>
 8006198:	4602      	mov	r2, r0
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	f241 3288 	movw	r2, #5000	; 0x1388
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d901      	bls.n	80061aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e04f      	b.n	800624a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061aa:	4b2b      	ldr	r3, [pc, #172]	; (8006258 <HAL_RCC_ClockConfig+0x1bc>)
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	f003 020c 	and.w	r2, r3, #12
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d1eb      	bne.n	8006194 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80061bc:	4b25      	ldr	r3, [pc, #148]	; (8006254 <HAL_RCC_ClockConfig+0x1b8>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 030f 	and.w	r3, r3, #15
 80061c4:	683a      	ldr	r2, [r7, #0]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d20c      	bcs.n	80061e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061ca:	4b22      	ldr	r3, [pc, #136]	; (8006254 <HAL_RCC_ClockConfig+0x1b8>)
 80061cc:	683a      	ldr	r2, [r7, #0]
 80061ce:	b2d2      	uxtb	r2, r2
 80061d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061d2:	4b20      	ldr	r3, [pc, #128]	; (8006254 <HAL_RCC_ClockConfig+0x1b8>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 030f 	and.w	r3, r3, #15
 80061da:	683a      	ldr	r2, [r7, #0]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d001      	beq.n	80061e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e032      	b.n	800624a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0304 	and.w	r3, r3, #4
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d008      	beq.n	8006202 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061f0:	4b19      	ldr	r3, [pc, #100]	; (8006258 <HAL_RCC_ClockConfig+0x1bc>)
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	4916      	ldr	r1, [pc, #88]	; (8006258 <HAL_RCC_ClockConfig+0x1bc>)
 80061fe:	4313      	orrs	r3, r2
 8006200:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 0308 	and.w	r3, r3, #8
 800620a:	2b00      	cmp	r3, #0
 800620c:	d009      	beq.n	8006222 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800620e:	4b12      	ldr	r3, [pc, #72]	; (8006258 <HAL_RCC_ClockConfig+0x1bc>)
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	00db      	lsls	r3, r3, #3
 800621c:	490e      	ldr	r1, [pc, #56]	; (8006258 <HAL_RCC_ClockConfig+0x1bc>)
 800621e:	4313      	orrs	r3, r2
 8006220:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006222:	f000 f821 	bl	8006268 <HAL_RCC_GetSysClockFreq>
 8006226:	4602      	mov	r2, r0
 8006228:	4b0b      	ldr	r3, [pc, #44]	; (8006258 <HAL_RCC_ClockConfig+0x1bc>)
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	091b      	lsrs	r3, r3, #4
 800622e:	f003 030f 	and.w	r3, r3, #15
 8006232:	490a      	ldr	r1, [pc, #40]	; (800625c <HAL_RCC_ClockConfig+0x1c0>)
 8006234:	5ccb      	ldrb	r3, [r1, r3]
 8006236:	fa22 f303 	lsr.w	r3, r2, r3
 800623a:	4a09      	ldr	r2, [pc, #36]	; (8006260 <HAL_RCC_ClockConfig+0x1c4>)
 800623c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800623e:	4b09      	ldr	r3, [pc, #36]	; (8006264 <HAL_RCC_ClockConfig+0x1c8>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4618      	mov	r0, r3
 8006244:	f7fd fbda 	bl	80039fc <HAL_InitTick>

  return HAL_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3710      	adds	r7, #16
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	40023c00 	.word	0x40023c00
 8006258:	40023800 	.word	0x40023800
 800625c:	0800db3c 	.word	0x0800db3c
 8006260:	20000008 	.word	0x20000008
 8006264:	2000000c 	.word	0x2000000c

08006268 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800626c:	b094      	sub	sp, #80	; 0x50
 800626e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006270:	2300      	movs	r3, #0
 8006272:	647b      	str	r3, [r7, #68]	; 0x44
 8006274:	2300      	movs	r3, #0
 8006276:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006278:	2300      	movs	r3, #0
 800627a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800627c:	2300      	movs	r3, #0
 800627e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006280:	4b79      	ldr	r3, [pc, #484]	; (8006468 <HAL_RCC_GetSysClockFreq+0x200>)
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	f003 030c 	and.w	r3, r3, #12
 8006288:	2b08      	cmp	r3, #8
 800628a:	d00d      	beq.n	80062a8 <HAL_RCC_GetSysClockFreq+0x40>
 800628c:	2b08      	cmp	r3, #8
 800628e:	f200 80e1 	bhi.w	8006454 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006292:	2b00      	cmp	r3, #0
 8006294:	d002      	beq.n	800629c <HAL_RCC_GetSysClockFreq+0x34>
 8006296:	2b04      	cmp	r3, #4
 8006298:	d003      	beq.n	80062a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800629a:	e0db      	b.n	8006454 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800629c:	4b73      	ldr	r3, [pc, #460]	; (800646c <HAL_RCC_GetSysClockFreq+0x204>)
 800629e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80062a0:	e0db      	b.n	800645a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80062a2:	4b73      	ldr	r3, [pc, #460]	; (8006470 <HAL_RCC_GetSysClockFreq+0x208>)
 80062a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80062a6:	e0d8      	b.n	800645a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80062a8:	4b6f      	ldr	r3, [pc, #444]	; (8006468 <HAL_RCC_GetSysClockFreq+0x200>)
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062b0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80062b2:	4b6d      	ldr	r3, [pc, #436]	; (8006468 <HAL_RCC_GetSysClockFreq+0x200>)
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d063      	beq.n	8006386 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062be:	4b6a      	ldr	r3, [pc, #424]	; (8006468 <HAL_RCC_GetSysClockFreq+0x200>)
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	099b      	lsrs	r3, r3, #6
 80062c4:	2200      	movs	r2, #0
 80062c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80062c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80062ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062d0:	633b      	str	r3, [r7, #48]	; 0x30
 80062d2:	2300      	movs	r3, #0
 80062d4:	637b      	str	r3, [r7, #52]	; 0x34
 80062d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80062da:	4622      	mov	r2, r4
 80062dc:	462b      	mov	r3, r5
 80062de:	f04f 0000 	mov.w	r0, #0
 80062e2:	f04f 0100 	mov.w	r1, #0
 80062e6:	0159      	lsls	r1, r3, #5
 80062e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80062ec:	0150      	lsls	r0, r2, #5
 80062ee:	4602      	mov	r2, r0
 80062f0:	460b      	mov	r3, r1
 80062f2:	4621      	mov	r1, r4
 80062f4:	1a51      	subs	r1, r2, r1
 80062f6:	6139      	str	r1, [r7, #16]
 80062f8:	4629      	mov	r1, r5
 80062fa:	eb63 0301 	sbc.w	r3, r3, r1
 80062fe:	617b      	str	r3, [r7, #20]
 8006300:	f04f 0200 	mov.w	r2, #0
 8006304:	f04f 0300 	mov.w	r3, #0
 8006308:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800630c:	4659      	mov	r1, fp
 800630e:	018b      	lsls	r3, r1, #6
 8006310:	4651      	mov	r1, sl
 8006312:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006316:	4651      	mov	r1, sl
 8006318:	018a      	lsls	r2, r1, #6
 800631a:	4651      	mov	r1, sl
 800631c:	ebb2 0801 	subs.w	r8, r2, r1
 8006320:	4659      	mov	r1, fp
 8006322:	eb63 0901 	sbc.w	r9, r3, r1
 8006326:	f04f 0200 	mov.w	r2, #0
 800632a:	f04f 0300 	mov.w	r3, #0
 800632e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006332:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006336:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800633a:	4690      	mov	r8, r2
 800633c:	4699      	mov	r9, r3
 800633e:	4623      	mov	r3, r4
 8006340:	eb18 0303 	adds.w	r3, r8, r3
 8006344:	60bb      	str	r3, [r7, #8]
 8006346:	462b      	mov	r3, r5
 8006348:	eb49 0303 	adc.w	r3, r9, r3
 800634c:	60fb      	str	r3, [r7, #12]
 800634e:	f04f 0200 	mov.w	r2, #0
 8006352:	f04f 0300 	mov.w	r3, #0
 8006356:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800635a:	4629      	mov	r1, r5
 800635c:	024b      	lsls	r3, r1, #9
 800635e:	4621      	mov	r1, r4
 8006360:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006364:	4621      	mov	r1, r4
 8006366:	024a      	lsls	r2, r1, #9
 8006368:	4610      	mov	r0, r2
 800636a:	4619      	mov	r1, r3
 800636c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800636e:	2200      	movs	r2, #0
 8006370:	62bb      	str	r3, [r7, #40]	; 0x28
 8006372:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006374:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006378:	f7fa fc96 	bl	8000ca8 <__aeabi_uldivmod>
 800637c:	4602      	mov	r2, r0
 800637e:	460b      	mov	r3, r1
 8006380:	4613      	mov	r3, r2
 8006382:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006384:	e058      	b.n	8006438 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006386:	4b38      	ldr	r3, [pc, #224]	; (8006468 <HAL_RCC_GetSysClockFreq+0x200>)
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	099b      	lsrs	r3, r3, #6
 800638c:	2200      	movs	r2, #0
 800638e:	4618      	mov	r0, r3
 8006390:	4611      	mov	r1, r2
 8006392:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006396:	623b      	str	r3, [r7, #32]
 8006398:	2300      	movs	r3, #0
 800639a:	627b      	str	r3, [r7, #36]	; 0x24
 800639c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80063a0:	4642      	mov	r2, r8
 80063a2:	464b      	mov	r3, r9
 80063a4:	f04f 0000 	mov.w	r0, #0
 80063a8:	f04f 0100 	mov.w	r1, #0
 80063ac:	0159      	lsls	r1, r3, #5
 80063ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063b2:	0150      	lsls	r0, r2, #5
 80063b4:	4602      	mov	r2, r0
 80063b6:	460b      	mov	r3, r1
 80063b8:	4641      	mov	r1, r8
 80063ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80063be:	4649      	mov	r1, r9
 80063c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80063c4:	f04f 0200 	mov.w	r2, #0
 80063c8:	f04f 0300 	mov.w	r3, #0
 80063cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80063d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80063d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80063d8:	ebb2 040a 	subs.w	r4, r2, sl
 80063dc:	eb63 050b 	sbc.w	r5, r3, fp
 80063e0:	f04f 0200 	mov.w	r2, #0
 80063e4:	f04f 0300 	mov.w	r3, #0
 80063e8:	00eb      	lsls	r3, r5, #3
 80063ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063ee:	00e2      	lsls	r2, r4, #3
 80063f0:	4614      	mov	r4, r2
 80063f2:	461d      	mov	r5, r3
 80063f4:	4643      	mov	r3, r8
 80063f6:	18e3      	adds	r3, r4, r3
 80063f8:	603b      	str	r3, [r7, #0]
 80063fa:	464b      	mov	r3, r9
 80063fc:	eb45 0303 	adc.w	r3, r5, r3
 8006400:	607b      	str	r3, [r7, #4]
 8006402:	f04f 0200 	mov.w	r2, #0
 8006406:	f04f 0300 	mov.w	r3, #0
 800640a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800640e:	4629      	mov	r1, r5
 8006410:	028b      	lsls	r3, r1, #10
 8006412:	4621      	mov	r1, r4
 8006414:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006418:	4621      	mov	r1, r4
 800641a:	028a      	lsls	r2, r1, #10
 800641c:	4610      	mov	r0, r2
 800641e:	4619      	mov	r1, r3
 8006420:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006422:	2200      	movs	r2, #0
 8006424:	61bb      	str	r3, [r7, #24]
 8006426:	61fa      	str	r2, [r7, #28]
 8006428:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800642c:	f7fa fc3c 	bl	8000ca8 <__aeabi_uldivmod>
 8006430:	4602      	mov	r2, r0
 8006432:	460b      	mov	r3, r1
 8006434:	4613      	mov	r3, r2
 8006436:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006438:	4b0b      	ldr	r3, [pc, #44]	; (8006468 <HAL_RCC_GetSysClockFreq+0x200>)
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	0c1b      	lsrs	r3, r3, #16
 800643e:	f003 0303 	and.w	r3, r3, #3
 8006442:	3301      	adds	r3, #1
 8006444:	005b      	lsls	r3, r3, #1
 8006446:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006448:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800644a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800644c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006450:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006452:	e002      	b.n	800645a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006454:	4b05      	ldr	r3, [pc, #20]	; (800646c <HAL_RCC_GetSysClockFreq+0x204>)
 8006456:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006458:	bf00      	nop
    }
  }
  return sysclockfreq;
 800645a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800645c:	4618      	mov	r0, r3
 800645e:	3750      	adds	r7, #80	; 0x50
 8006460:	46bd      	mov	sp, r7
 8006462:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006466:	bf00      	nop
 8006468:	40023800 	.word	0x40023800
 800646c:	00f42400 	.word	0x00f42400
 8006470:	007a1200 	.word	0x007a1200

08006474 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006474:	b480      	push	{r7}
 8006476:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006478:	4b03      	ldr	r3, [pc, #12]	; (8006488 <HAL_RCC_GetHCLKFreq+0x14>)
 800647a:	681b      	ldr	r3, [r3, #0]
}
 800647c:	4618      	mov	r0, r3
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr
 8006486:	bf00      	nop
 8006488:	20000008 	.word	0x20000008

0800648c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006490:	f7ff fff0 	bl	8006474 <HAL_RCC_GetHCLKFreq>
 8006494:	4602      	mov	r2, r0
 8006496:	4b05      	ldr	r3, [pc, #20]	; (80064ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	0a9b      	lsrs	r3, r3, #10
 800649c:	f003 0307 	and.w	r3, r3, #7
 80064a0:	4903      	ldr	r1, [pc, #12]	; (80064b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80064a2:	5ccb      	ldrb	r3, [r1, r3]
 80064a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	40023800 	.word	0x40023800
 80064b0:	0800db4c 	.word	0x0800db4c

080064b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80064b8:	f7ff ffdc 	bl	8006474 <HAL_RCC_GetHCLKFreq>
 80064bc:	4602      	mov	r2, r0
 80064be:	4b05      	ldr	r3, [pc, #20]	; (80064d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	0b5b      	lsrs	r3, r3, #13
 80064c4:	f003 0307 	and.w	r3, r3, #7
 80064c8:	4903      	ldr	r1, [pc, #12]	; (80064d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80064ca:	5ccb      	ldrb	r3, [r1, r3]
 80064cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	40023800 	.word	0x40023800
 80064d8:	0800db4c 	.word	0x0800db4c

080064dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d101      	bne.n	80064ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e041      	b.n	8006572 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d106      	bne.n	8006508 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f7fc fb46 	bl	8002b94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2202      	movs	r2, #2
 800650c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	3304      	adds	r3, #4
 8006518:	4619      	mov	r1, r3
 800651a:	4610      	mov	r0, r2
 800651c:	f000 ff0a 	bl	8007334 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3708      	adds	r7, #8
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
	...

0800657c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800657c:	b480      	push	{r7}
 800657e:	b085      	sub	sp, #20
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800658a:	b2db      	uxtb	r3, r3
 800658c:	2b01      	cmp	r3, #1
 800658e:	d001      	beq.n	8006594 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	e046      	b.n	8006622 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2202      	movs	r2, #2
 8006598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a23      	ldr	r2, [pc, #140]	; (8006630 <HAL_TIM_Base_Start+0xb4>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d022      	beq.n	80065ec <HAL_TIM_Base_Start+0x70>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ae:	d01d      	beq.n	80065ec <HAL_TIM_Base_Start+0x70>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a1f      	ldr	r2, [pc, #124]	; (8006634 <HAL_TIM_Base_Start+0xb8>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d018      	beq.n	80065ec <HAL_TIM_Base_Start+0x70>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a1e      	ldr	r2, [pc, #120]	; (8006638 <HAL_TIM_Base_Start+0xbc>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d013      	beq.n	80065ec <HAL_TIM_Base_Start+0x70>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a1c      	ldr	r2, [pc, #112]	; (800663c <HAL_TIM_Base_Start+0xc0>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d00e      	beq.n	80065ec <HAL_TIM_Base_Start+0x70>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a1b      	ldr	r2, [pc, #108]	; (8006640 <HAL_TIM_Base_Start+0xc4>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d009      	beq.n	80065ec <HAL_TIM_Base_Start+0x70>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a19      	ldr	r2, [pc, #100]	; (8006644 <HAL_TIM_Base_Start+0xc8>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d004      	beq.n	80065ec <HAL_TIM_Base_Start+0x70>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a18      	ldr	r2, [pc, #96]	; (8006648 <HAL_TIM_Base_Start+0xcc>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d111      	bne.n	8006610 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	f003 0307 	and.w	r3, r3, #7
 80065f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2b06      	cmp	r3, #6
 80065fc:	d010      	beq.n	8006620 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f042 0201 	orr.w	r2, r2, #1
 800660c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800660e:	e007      	b.n	8006620 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f042 0201 	orr.w	r2, r2, #1
 800661e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	3714      	adds	r7, #20
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop
 8006630:	40010000 	.word	0x40010000
 8006634:	40000400 	.word	0x40000400
 8006638:	40000800 	.word	0x40000800
 800663c:	40000c00 	.word	0x40000c00
 8006640:	40010400 	.word	0x40010400
 8006644:	40014000 	.word	0x40014000
 8006648:	40001800 	.word	0x40001800

0800664c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800665a:	b2db      	uxtb	r3, r3
 800665c:	2b01      	cmp	r3, #1
 800665e:	d001      	beq.n	8006664 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	e04e      	b.n	8006702 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2202      	movs	r2, #2
 8006668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68da      	ldr	r2, [r3, #12]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f042 0201 	orr.w	r2, r2, #1
 800667a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a23      	ldr	r2, [pc, #140]	; (8006710 <HAL_TIM_Base_Start_IT+0xc4>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d022      	beq.n	80066cc <HAL_TIM_Base_Start_IT+0x80>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800668e:	d01d      	beq.n	80066cc <HAL_TIM_Base_Start_IT+0x80>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a1f      	ldr	r2, [pc, #124]	; (8006714 <HAL_TIM_Base_Start_IT+0xc8>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d018      	beq.n	80066cc <HAL_TIM_Base_Start_IT+0x80>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a1e      	ldr	r2, [pc, #120]	; (8006718 <HAL_TIM_Base_Start_IT+0xcc>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d013      	beq.n	80066cc <HAL_TIM_Base_Start_IT+0x80>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a1c      	ldr	r2, [pc, #112]	; (800671c <HAL_TIM_Base_Start_IT+0xd0>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d00e      	beq.n	80066cc <HAL_TIM_Base_Start_IT+0x80>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a1b      	ldr	r2, [pc, #108]	; (8006720 <HAL_TIM_Base_Start_IT+0xd4>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d009      	beq.n	80066cc <HAL_TIM_Base_Start_IT+0x80>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a19      	ldr	r2, [pc, #100]	; (8006724 <HAL_TIM_Base_Start_IT+0xd8>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d004      	beq.n	80066cc <HAL_TIM_Base_Start_IT+0x80>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a18      	ldr	r2, [pc, #96]	; (8006728 <HAL_TIM_Base_Start_IT+0xdc>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d111      	bne.n	80066f0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	f003 0307 	and.w	r3, r3, #7
 80066d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2b06      	cmp	r3, #6
 80066dc:	d010      	beq.n	8006700 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f042 0201 	orr.w	r2, r2, #1
 80066ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066ee:	e007      	b.n	8006700 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f042 0201 	orr.w	r2, r2, #1
 80066fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	3714      	adds	r7, #20
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	40010000 	.word	0x40010000
 8006714:	40000400 	.word	0x40000400
 8006718:	40000800 	.word	0x40000800
 800671c:	40000c00 	.word	0x40000c00
 8006720:	40010400 	.word	0x40010400
 8006724:	40014000 	.word	0x40014000
 8006728:	40001800 	.word	0x40001800

0800672c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b082      	sub	sp, #8
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d101      	bne.n	800673e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e041      	b.n	80067c2 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006744:	b2db      	uxtb	r3, r3
 8006746:	2b00      	cmp	r3, #0
 8006748:	d106      	bne.n	8006758 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 f839 	bl	80067ca <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2202      	movs	r2, #2
 800675c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	3304      	adds	r3, #4
 8006768:	4619      	mov	r1, r3
 800676a:	4610      	mov	r0, r2
 800676c:	f000 fde2 	bl	8007334 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3708      	adds	r7, #8
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80067ca:	b480      	push	{r7}
 80067cc:	b083      	sub	sp, #12
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80067d2:	bf00      	nop
 80067d4:	370c      	adds	r7, #12
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr

080067de <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80067de:	b580      	push	{r7, lr}
 80067e0:	b082      	sub	sp, #8
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d101      	bne.n	80067f0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	e041      	b.n	8006874 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d106      	bne.n	800680a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 f839 	bl	800687c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2202      	movs	r2, #2
 800680e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	3304      	adds	r3, #4
 800681a:	4619      	mov	r1, r3
 800681c:	4610      	mov	r0, r2
 800681e:	f000 fd89 	bl	8007334 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2201      	movs	r2, #1
 8006826:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2201      	movs	r2, #1
 800682e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2201      	movs	r2, #1
 8006836:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2201      	movs	r2, #1
 800683e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2201      	movs	r2, #1
 8006846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2201      	movs	r2, #1
 8006856:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2201      	movs	r2, #1
 800685e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2201      	movs	r2, #1
 8006866:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2201      	movs	r2, #1
 800686e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3708      	adds	r7, #8
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006884:	bf00      	nop
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800689a:	2300      	movs	r3, #0
 800689c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d109      	bne.n	80068b8 <HAL_TIM_PWM_Start_IT+0x28>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	bf14      	ite	ne
 80068b0:	2301      	movne	r3, #1
 80068b2:	2300      	moveq	r3, #0
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	e022      	b.n	80068fe <HAL_TIM_PWM_Start_IT+0x6e>
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	2b04      	cmp	r3, #4
 80068bc:	d109      	bne.n	80068d2 <HAL_TIM_PWM_Start_IT+0x42>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	bf14      	ite	ne
 80068ca:	2301      	movne	r3, #1
 80068cc:	2300      	moveq	r3, #0
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	e015      	b.n	80068fe <HAL_TIM_PWM_Start_IT+0x6e>
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	2b08      	cmp	r3, #8
 80068d6:	d109      	bne.n	80068ec <HAL_TIM_PWM_Start_IT+0x5c>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	bf14      	ite	ne
 80068e4:	2301      	movne	r3, #1
 80068e6:	2300      	moveq	r3, #0
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	e008      	b.n	80068fe <HAL_TIM_PWM_Start_IT+0x6e>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	bf14      	ite	ne
 80068f8:	2301      	movne	r3, #1
 80068fa:	2300      	moveq	r3, #0
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d001      	beq.n	8006906 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	e0c7      	b.n	8006a96 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d104      	bne.n	8006916 <HAL_TIM_PWM_Start_IT+0x86>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2202      	movs	r2, #2
 8006910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006914:	e013      	b.n	800693e <HAL_TIM_PWM_Start_IT+0xae>
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	2b04      	cmp	r3, #4
 800691a:	d104      	bne.n	8006926 <HAL_TIM_PWM_Start_IT+0x96>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2202      	movs	r2, #2
 8006920:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006924:	e00b      	b.n	800693e <HAL_TIM_PWM_Start_IT+0xae>
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	2b08      	cmp	r3, #8
 800692a:	d104      	bne.n	8006936 <HAL_TIM_PWM_Start_IT+0xa6>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2202      	movs	r2, #2
 8006930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006934:	e003      	b.n	800693e <HAL_TIM_PWM_Start_IT+0xae>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2202      	movs	r2, #2
 800693a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	2b0c      	cmp	r3, #12
 8006942:	d841      	bhi.n	80069c8 <HAL_TIM_PWM_Start_IT+0x138>
 8006944:	a201      	add	r2, pc, #4	; (adr r2, 800694c <HAL_TIM_PWM_Start_IT+0xbc>)
 8006946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800694a:	bf00      	nop
 800694c:	08006981 	.word	0x08006981
 8006950:	080069c9 	.word	0x080069c9
 8006954:	080069c9 	.word	0x080069c9
 8006958:	080069c9 	.word	0x080069c9
 800695c:	08006993 	.word	0x08006993
 8006960:	080069c9 	.word	0x080069c9
 8006964:	080069c9 	.word	0x080069c9
 8006968:	080069c9 	.word	0x080069c9
 800696c:	080069a5 	.word	0x080069a5
 8006970:	080069c9 	.word	0x080069c9
 8006974:	080069c9 	.word	0x080069c9
 8006978:	080069c9 	.word	0x080069c9
 800697c:	080069b7 	.word	0x080069b7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	68da      	ldr	r2, [r3, #12]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f042 0202 	orr.w	r2, r2, #2
 800698e:	60da      	str	r2, [r3, #12]
      break;
 8006990:	e01d      	b.n	80069ce <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68da      	ldr	r2, [r3, #12]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f042 0204 	orr.w	r2, r2, #4
 80069a0:	60da      	str	r2, [r3, #12]
      break;
 80069a2:	e014      	b.n	80069ce <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	68da      	ldr	r2, [r3, #12]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f042 0208 	orr.w	r2, r2, #8
 80069b2:	60da      	str	r2, [r3, #12]
      break;
 80069b4:	e00b      	b.n	80069ce <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68da      	ldr	r2, [r3, #12]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f042 0210 	orr.w	r2, r2, #16
 80069c4:	60da      	str	r2, [r3, #12]
      break;
 80069c6:	e002      	b.n	80069ce <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	73fb      	strb	r3, [r7, #15]
      break;
 80069cc:	bf00      	nop
  }

  if (status == HAL_OK)
 80069ce:	7bfb      	ldrb	r3, [r7, #15]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d15f      	bne.n	8006a94 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2201      	movs	r2, #1
 80069da:	6839      	ldr	r1, [r7, #0]
 80069dc:	4618      	mov	r0, r3
 80069de:	f000 ff9f 	bl	8007920 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a2e      	ldr	r2, [pc, #184]	; (8006aa0 <HAL_TIM_PWM_Start_IT+0x210>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d004      	beq.n	80069f6 <HAL_TIM_PWM_Start_IT+0x166>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a2c      	ldr	r2, [pc, #176]	; (8006aa4 <HAL_TIM_PWM_Start_IT+0x214>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d101      	bne.n	80069fa <HAL_TIM_PWM_Start_IT+0x16a>
 80069f6:	2301      	movs	r3, #1
 80069f8:	e000      	b.n	80069fc <HAL_TIM_PWM_Start_IT+0x16c>
 80069fa:	2300      	movs	r3, #0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d007      	beq.n	8006a10 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a0e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a22      	ldr	r2, [pc, #136]	; (8006aa0 <HAL_TIM_PWM_Start_IT+0x210>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d022      	beq.n	8006a60 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a22:	d01d      	beq.n	8006a60 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a1f      	ldr	r2, [pc, #124]	; (8006aa8 <HAL_TIM_PWM_Start_IT+0x218>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d018      	beq.n	8006a60 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a1e      	ldr	r2, [pc, #120]	; (8006aac <HAL_TIM_PWM_Start_IT+0x21c>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d013      	beq.n	8006a60 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a1c      	ldr	r2, [pc, #112]	; (8006ab0 <HAL_TIM_PWM_Start_IT+0x220>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d00e      	beq.n	8006a60 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a17      	ldr	r2, [pc, #92]	; (8006aa4 <HAL_TIM_PWM_Start_IT+0x214>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d009      	beq.n	8006a60 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a18      	ldr	r2, [pc, #96]	; (8006ab4 <HAL_TIM_PWM_Start_IT+0x224>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d004      	beq.n	8006a60 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a17      	ldr	r2, [pc, #92]	; (8006ab8 <HAL_TIM_PWM_Start_IT+0x228>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d111      	bne.n	8006a84 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	f003 0307 	and.w	r3, r3, #7
 8006a6a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	2b06      	cmp	r3, #6
 8006a70:	d010      	beq.n	8006a94 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f042 0201 	orr.w	r2, r2, #1
 8006a80:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a82:	e007      	b.n	8006a94 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f042 0201 	orr.w	r2, r2, #1
 8006a92:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3710      	adds	r7, #16
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	40010000 	.word	0x40010000
 8006aa4:	40010400 	.word	0x40010400
 8006aa8:	40000400 	.word	0x40000400
 8006aac:	40000800 	.word	0x40000800
 8006ab0:	40000c00 	.word	0x40000c00
 8006ab4:	40014000 	.word	0x40014000
 8006ab8:	40001800 	.word	0x40001800

08006abc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b086      	sub	sp, #24
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d101      	bne.n	8006ad0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	e097      	b.n	8006c00 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d106      	bne.n	8006aea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f7fc f913 	bl	8002d10 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2202      	movs	r2, #2
 8006aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	6812      	ldr	r2, [r2, #0]
 8006afc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b00:	f023 0307 	bic.w	r3, r3, #7
 8006b04:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	3304      	adds	r3, #4
 8006b0e:	4619      	mov	r1, r3
 8006b10:	4610      	mov	r0, r2
 8006b12:	f000 fc0f 	bl	8007334 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	699b      	ldr	r3, [r3, #24]
 8006b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	6a1b      	ldr	r3, [r3, #32]
 8006b2c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	697a      	ldr	r2, [r7, #20]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b3e:	f023 0303 	bic.w	r3, r3, #3
 8006b42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	689a      	ldr	r2, [r3, #8]
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	699b      	ldr	r3, [r3, #24]
 8006b4c:	021b      	lsls	r3, r3, #8
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	693a      	ldr	r2, [r7, #16]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006b5c:	f023 030c 	bic.w	r3, r3, #12
 8006b60:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	68da      	ldr	r2, [r3, #12]
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	69db      	ldr	r3, [r3, #28]
 8006b76:	021b      	lsls	r3, r3, #8
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	693a      	ldr	r2, [r7, #16]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	011a      	lsls	r2, r3, #4
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	6a1b      	ldr	r3, [r3, #32]
 8006b8a:	031b      	lsls	r3, r3, #12
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	693a      	ldr	r2, [r7, #16]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006b9a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006ba2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	685a      	ldr	r2, [r3, #4]
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	695b      	ldr	r3, [r3, #20]
 8006bac:	011b      	lsls	r3, r3, #4
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	697a      	ldr	r2, [r7, #20]
 8006bbc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	693a      	ldr	r2, [r7, #16]
 8006bc4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2201      	movs	r2, #1
 8006be2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2201      	movs	r2, #1
 8006bea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3718      	adds	r7, #24
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c18:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006c20:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006c28:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006c30:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d110      	bne.n	8006c5a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c38:	7bfb      	ldrb	r3, [r7, #15]
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d102      	bne.n	8006c44 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c3e:	7b7b      	ldrb	r3, [r7, #13]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d001      	beq.n	8006c48 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e069      	b.n	8006d1c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2202      	movs	r2, #2
 8006c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c58:	e031      	b.n	8006cbe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	2b04      	cmp	r3, #4
 8006c5e:	d110      	bne.n	8006c82 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c60:	7bbb      	ldrb	r3, [r7, #14]
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d102      	bne.n	8006c6c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c66:	7b3b      	ldrb	r3, [r7, #12]
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d001      	beq.n	8006c70 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	e055      	b.n	8006d1c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2202      	movs	r2, #2
 8006c74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c80:	e01d      	b.n	8006cbe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c82:	7bfb      	ldrb	r3, [r7, #15]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d108      	bne.n	8006c9a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c88:	7bbb      	ldrb	r3, [r7, #14]
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d105      	bne.n	8006c9a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c8e:	7b7b      	ldrb	r3, [r7, #13]
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d102      	bne.n	8006c9a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c94:	7b3b      	ldrb	r3, [r7, #12]
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d001      	beq.n	8006c9e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e03e      	b.n	8006d1c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2202      	movs	r2, #2
 8006ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2202      	movs	r2, #2
 8006caa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2202      	movs	r2, #2
 8006cb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2202      	movs	r2, #2
 8006cba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d003      	beq.n	8006ccc <HAL_TIM_Encoder_Start+0xc4>
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	2b04      	cmp	r3, #4
 8006cc8:	d008      	beq.n	8006cdc <HAL_TIM_Encoder_Start+0xd4>
 8006cca:	e00f      	b.n	8006cec <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	2100      	movs	r1, #0
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f000 fe23 	bl	8007920 <TIM_CCxChannelCmd>
      break;
 8006cda:	e016      	b.n	8006d0a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	2104      	movs	r1, #4
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f000 fe1b 	bl	8007920 <TIM_CCxChannelCmd>
      break;
 8006cea:	e00e      	b.n	8006d0a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f000 fe13 	bl	8007920 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	2104      	movs	r1, #4
 8006d02:	4618      	mov	r0, r3
 8006d04:	f000 fe0c 	bl	8007920 <TIM_CCxChannelCmd>
      break;
 8006d08:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f042 0201 	orr.w	r2, r2, #1
 8006d18:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	f003 0302 	and.w	r3, r3, #2
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d020      	beq.n	8006d88 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f003 0302 	and.w	r3, r3, #2
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d01b      	beq.n	8006d88 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f06f 0202 	mvn.w	r2, #2
 8006d58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	699b      	ldr	r3, [r3, #24]
 8006d66:	f003 0303 	and.w	r3, r3, #3
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d003      	beq.n	8006d76 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 fac1 	bl	80072f6 <HAL_TIM_IC_CaptureCallback>
 8006d74:	e005      	b.n	8006d82 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 fab3 	bl	80072e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 fac4 	bl	800730a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	f003 0304 	and.w	r3, r3, #4
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d020      	beq.n	8006dd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f003 0304 	and.w	r3, r3, #4
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d01b      	beq.n	8006dd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f06f 0204 	mvn.w	r2, #4
 8006da4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2202      	movs	r2, #2
 8006daa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	699b      	ldr	r3, [r3, #24]
 8006db2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d003      	beq.n	8006dc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 fa9b 	bl	80072f6 <HAL_TIM_IC_CaptureCallback>
 8006dc0:	e005      	b.n	8006dce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 fa8d 	bl	80072e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 fa9e 	bl	800730a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	f003 0308 	and.w	r3, r3, #8
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d020      	beq.n	8006e20 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f003 0308 	and.w	r3, r3, #8
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d01b      	beq.n	8006e20 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f06f 0208 	mvn.w	r2, #8
 8006df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2204      	movs	r2, #4
 8006df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	69db      	ldr	r3, [r3, #28]
 8006dfe:	f003 0303 	and.w	r3, r3, #3
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d003      	beq.n	8006e0e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 fa75 	bl	80072f6 <HAL_TIM_IC_CaptureCallback>
 8006e0c:	e005      	b.n	8006e1a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 fa67 	bl	80072e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 fa78 	bl	800730a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	f003 0310 	and.w	r3, r3, #16
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d020      	beq.n	8006e6c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f003 0310 	and.w	r3, r3, #16
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d01b      	beq.n	8006e6c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f06f 0210 	mvn.w	r2, #16
 8006e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2208      	movs	r2, #8
 8006e42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	69db      	ldr	r3, [r3, #28]
 8006e4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d003      	beq.n	8006e5a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 fa4f 	bl	80072f6 <HAL_TIM_IC_CaptureCallback>
 8006e58:	e005      	b.n	8006e66 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 fa41 	bl	80072e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 fa52 	bl	800730a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	f003 0301 	and.w	r3, r3, #1
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00c      	beq.n	8006e90 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f003 0301 	and.w	r3, r3, #1
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d007      	beq.n	8006e90 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f06f 0201 	mvn.w	r2, #1
 8006e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 fa1f 	bl	80072ce <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00c      	beq.n	8006eb4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d007      	beq.n	8006eb4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 fe34 	bl	8007b1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00c      	beq.n	8006ed8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d007      	beq.n	8006ed8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 fa23 	bl	800731e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	f003 0320 	and.w	r3, r3, #32
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00c      	beq.n	8006efc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f003 0320 	and.w	r3, r3, #32
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d007      	beq.n	8006efc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f06f 0220 	mvn.w	r2, #32
 8006ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 fe06 	bl	8007b08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006efc:	bf00      	nop
 8006efe:	3710      	adds	r7, #16
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b086      	sub	sp, #24
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f10:	2300      	movs	r3, #0
 8006f12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d101      	bne.n	8006f22 <HAL_TIM_OC_ConfigChannel+0x1e>
 8006f1e:	2302      	movs	r3, #2
 8006f20:	e048      	b.n	8006fb4 <HAL_TIM_OC_ConfigChannel+0xb0>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2201      	movs	r2, #1
 8006f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2b0c      	cmp	r3, #12
 8006f2e:	d839      	bhi.n	8006fa4 <HAL_TIM_OC_ConfigChannel+0xa0>
 8006f30:	a201      	add	r2, pc, #4	; (adr r2, 8006f38 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f36:	bf00      	nop
 8006f38:	08006f6d 	.word	0x08006f6d
 8006f3c:	08006fa5 	.word	0x08006fa5
 8006f40:	08006fa5 	.word	0x08006fa5
 8006f44:	08006fa5 	.word	0x08006fa5
 8006f48:	08006f7b 	.word	0x08006f7b
 8006f4c:	08006fa5 	.word	0x08006fa5
 8006f50:	08006fa5 	.word	0x08006fa5
 8006f54:	08006fa5 	.word	0x08006fa5
 8006f58:	08006f89 	.word	0x08006f89
 8006f5c:	08006fa5 	.word	0x08006fa5
 8006f60:	08006fa5 	.word	0x08006fa5
 8006f64:	08006fa5 	.word	0x08006fa5
 8006f68:	08006f97 	.word	0x08006f97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68b9      	ldr	r1, [r7, #8]
 8006f72:	4618      	mov	r0, r3
 8006f74:	f000 fa8a 	bl	800748c <TIM_OC1_SetConfig>
      break;
 8006f78:	e017      	b.n	8006faa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68b9      	ldr	r1, [r7, #8]
 8006f80:	4618      	mov	r0, r3
 8006f82:	f000 faf3 	bl	800756c <TIM_OC2_SetConfig>
      break;
 8006f86:	e010      	b.n	8006faa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	68b9      	ldr	r1, [r7, #8]
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f000 fb62 	bl	8007658 <TIM_OC3_SetConfig>
      break;
 8006f94:	e009      	b.n	8006faa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68b9      	ldr	r1, [r7, #8]
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f000 fbcf 	bl	8007740 <TIM_OC4_SetConfig>
      break;
 8006fa2:	e002      	b.n	8006faa <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	75fb      	strb	r3, [r7, #23]
      break;
 8006fa8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3718      	adds	r7, #24
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b086      	sub	sp, #24
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d101      	bne.n	8006fda <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006fd6:	2302      	movs	r3, #2
 8006fd8:	e0ae      	b.n	8007138 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2b0c      	cmp	r3, #12
 8006fe6:	f200 809f 	bhi.w	8007128 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006fea:	a201      	add	r2, pc, #4	; (adr r2, 8006ff0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff0:	08007025 	.word	0x08007025
 8006ff4:	08007129 	.word	0x08007129
 8006ff8:	08007129 	.word	0x08007129
 8006ffc:	08007129 	.word	0x08007129
 8007000:	08007065 	.word	0x08007065
 8007004:	08007129 	.word	0x08007129
 8007008:	08007129 	.word	0x08007129
 800700c:	08007129 	.word	0x08007129
 8007010:	080070a7 	.word	0x080070a7
 8007014:	08007129 	.word	0x08007129
 8007018:	08007129 	.word	0x08007129
 800701c:	08007129 	.word	0x08007129
 8007020:	080070e7 	.word	0x080070e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	68b9      	ldr	r1, [r7, #8]
 800702a:	4618      	mov	r0, r3
 800702c:	f000 fa2e 	bl	800748c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	699a      	ldr	r2, [r3, #24]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f042 0208 	orr.w	r2, r2, #8
 800703e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	699a      	ldr	r2, [r3, #24]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f022 0204 	bic.w	r2, r2, #4
 800704e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	6999      	ldr	r1, [r3, #24]
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	691a      	ldr	r2, [r3, #16]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	430a      	orrs	r2, r1
 8007060:	619a      	str	r2, [r3, #24]
      break;
 8007062:	e064      	b.n	800712e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	68b9      	ldr	r1, [r7, #8]
 800706a:	4618      	mov	r0, r3
 800706c:	f000 fa7e 	bl	800756c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	699a      	ldr	r2, [r3, #24]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800707e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	699a      	ldr	r2, [r3, #24]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800708e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	6999      	ldr	r1, [r3, #24]
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	021a      	lsls	r2, r3, #8
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	430a      	orrs	r2, r1
 80070a2:	619a      	str	r2, [r3, #24]
      break;
 80070a4:	e043      	b.n	800712e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	68b9      	ldr	r1, [r7, #8]
 80070ac:	4618      	mov	r0, r3
 80070ae:	f000 fad3 	bl	8007658 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	69da      	ldr	r2, [r3, #28]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f042 0208 	orr.w	r2, r2, #8
 80070c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	69da      	ldr	r2, [r3, #28]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f022 0204 	bic.w	r2, r2, #4
 80070d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	69d9      	ldr	r1, [r3, #28]
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	691a      	ldr	r2, [r3, #16]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	430a      	orrs	r2, r1
 80070e2:	61da      	str	r2, [r3, #28]
      break;
 80070e4:	e023      	b.n	800712e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	68b9      	ldr	r1, [r7, #8]
 80070ec:	4618      	mov	r0, r3
 80070ee:	f000 fb27 	bl	8007740 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	69da      	ldr	r2, [r3, #28]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007100:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	69da      	ldr	r2, [r3, #28]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007110:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	69d9      	ldr	r1, [r3, #28]
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	691b      	ldr	r3, [r3, #16]
 800711c:	021a      	lsls	r2, r3, #8
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	430a      	orrs	r2, r1
 8007124:	61da      	str	r2, [r3, #28]
      break;
 8007126:	e002      	b.n	800712e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	75fb      	strb	r3, [r7, #23]
      break;
 800712c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2200      	movs	r2, #0
 8007132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007136:	7dfb      	ldrb	r3, [r7, #23]
}
 8007138:	4618      	mov	r0, r3
 800713a:	3718      	adds	r7, #24
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800714a:	2300      	movs	r3, #0
 800714c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007154:	2b01      	cmp	r3, #1
 8007156:	d101      	bne.n	800715c <HAL_TIM_ConfigClockSource+0x1c>
 8007158:	2302      	movs	r3, #2
 800715a:	e0b4      	b.n	80072c6 <HAL_TIM_ConfigClockSource+0x186>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2202      	movs	r2, #2
 8007168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800717a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007182:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68ba      	ldr	r2, [r7, #8]
 800718a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007194:	d03e      	beq.n	8007214 <HAL_TIM_ConfigClockSource+0xd4>
 8007196:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800719a:	f200 8087 	bhi.w	80072ac <HAL_TIM_ConfigClockSource+0x16c>
 800719e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071a2:	f000 8086 	beq.w	80072b2 <HAL_TIM_ConfigClockSource+0x172>
 80071a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071aa:	d87f      	bhi.n	80072ac <HAL_TIM_ConfigClockSource+0x16c>
 80071ac:	2b70      	cmp	r3, #112	; 0x70
 80071ae:	d01a      	beq.n	80071e6 <HAL_TIM_ConfigClockSource+0xa6>
 80071b0:	2b70      	cmp	r3, #112	; 0x70
 80071b2:	d87b      	bhi.n	80072ac <HAL_TIM_ConfigClockSource+0x16c>
 80071b4:	2b60      	cmp	r3, #96	; 0x60
 80071b6:	d050      	beq.n	800725a <HAL_TIM_ConfigClockSource+0x11a>
 80071b8:	2b60      	cmp	r3, #96	; 0x60
 80071ba:	d877      	bhi.n	80072ac <HAL_TIM_ConfigClockSource+0x16c>
 80071bc:	2b50      	cmp	r3, #80	; 0x50
 80071be:	d03c      	beq.n	800723a <HAL_TIM_ConfigClockSource+0xfa>
 80071c0:	2b50      	cmp	r3, #80	; 0x50
 80071c2:	d873      	bhi.n	80072ac <HAL_TIM_ConfigClockSource+0x16c>
 80071c4:	2b40      	cmp	r3, #64	; 0x40
 80071c6:	d058      	beq.n	800727a <HAL_TIM_ConfigClockSource+0x13a>
 80071c8:	2b40      	cmp	r3, #64	; 0x40
 80071ca:	d86f      	bhi.n	80072ac <HAL_TIM_ConfigClockSource+0x16c>
 80071cc:	2b30      	cmp	r3, #48	; 0x30
 80071ce:	d064      	beq.n	800729a <HAL_TIM_ConfigClockSource+0x15a>
 80071d0:	2b30      	cmp	r3, #48	; 0x30
 80071d2:	d86b      	bhi.n	80072ac <HAL_TIM_ConfigClockSource+0x16c>
 80071d4:	2b20      	cmp	r3, #32
 80071d6:	d060      	beq.n	800729a <HAL_TIM_ConfigClockSource+0x15a>
 80071d8:	2b20      	cmp	r3, #32
 80071da:	d867      	bhi.n	80072ac <HAL_TIM_ConfigClockSource+0x16c>
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d05c      	beq.n	800729a <HAL_TIM_ConfigClockSource+0x15a>
 80071e0:	2b10      	cmp	r3, #16
 80071e2:	d05a      	beq.n	800729a <HAL_TIM_ConfigClockSource+0x15a>
 80071e4:	e062      	b.n	80072ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80071f6:	f000 fb73 	bl	80078e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007208:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	68ba      	ldr	r2, [r7, #8]
 8007210:	609a      	str	r2, [r3, #8]
      break;
 8007212:	e04f      	b.n	80072b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007224:	f000 fb5c 	bl	80078e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	689a      	ldr	r2, [r3, #8]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007236:	609a      	str	r2, [r3, #8]
      break;
 8007238:	e03c      	b.n	80072b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007246:	461a      	mov	r2, r3
 8007248:	f000 fad0 	bl	80077ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2150      	movs	r1, #80	; 0x50
 8007252:	4618      	mov	r0, r3
 8007254:	f000 fb29 	bl	80078aa <TIM_ITRx_SetConfig>
      break;
 8007258:	e02c      	b.n	80072b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007266:	461a      	mov	r2, r3
 8007268:	f000 faef 	bl	800784a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2160      	movs	r1, #96	; 0x60
 8007272:	4618      	mov	r0, r3
 8007274:	f000 fb19 	bl	80078aa <TIM_ITRx_SetConfig>
      break;
 8007278:	e01c      	b.n	80072b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007286:	461a      	mov	r2, r3
 8007288:	f000 fab0 	bl	80077ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2140      	movs	r1, #64	; 0x40
 8007292:	4618      	mov	r0, r3
 8007294:	f000 fb09 	bl	80078aa <TIM_ITRx_SetConfig>
      break;
 8007298:	e00c      	b.n	80072b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4619      	mov	r1, r3
 80072a4:	4610      	mov	r0, r2
 80072a6:	f000 fb00 	bl	80078aa <TIM_ITRx_SetConfig>
      break;
 80072aa:	e003      	b.n	80072b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	73fb      	strb	r3, [r7, #15]
      break;
 80072b0:	e000      	b.n	80072b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80072b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80072c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3710      	adds	r7, #16
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}

080072ce <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80072ce:	b480      	push	{r7}
 80072d0:	b083      	sub	sp, #12
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80072d6:	bf00      	nop
 80072d8:	370c      	adds	r7, #12
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr

080072e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80072e2:	b480      	push	{r7}
 80072e4:	b083      	sub	sp, #12
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80072ea:	bf00      	nop
 80072ec:	370c      	adds	r7, #12
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr

080072f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80072f6:	b480      	push	{r7}
 80072f8:	b083      	sub	sp, #12
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80072fe:	bf00      	nop
 8007300:	370c      	adds	r7, #12
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr

0800730a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800730a:	b480      	push	{r7}
 800730c:	b083      	sub	sp, #12
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007312:	bf00      	nop
 8007314:	370c      	adds	r7, #12
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr

0800731e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800731e:	b480      	push	{r7}
 8007320:	b083      	sub	sp, #12
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007326:	bf00      	nop
 8007328:	370c      	adds	r7, #12
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr
	...

08007334 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007334:	b480      	push	{r7}
 8007336:	b085      	sub	sp, #20
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	4a46      	ldr	r2, [pc, #280]	; (8007460 <TIM_Base_SetConfig+0x12c>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d013      	beq.n	8007374 <TIM_Base_SetConfig+0x40>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007352:	d00f      	beq.n	8007374 <TIM_Base_SetConfig+0x40>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	4a43      	ldr	r2, [pc, #268]	; (8007464 <TIM_Base_SetConfig+0x130>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d00b      	beq.n	8007374 <TIM_Base_SetConfig+0x40>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	4a42      	ldr	r2, [pc, #264]	; (8007468 <TIM_Base_SetConfig+0x134>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d007      	beq.n	8007374 <TIM_Base_SetConfig+0x40>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	4a41      	ldr	r2, [pc, #260]	; (800746c <TIM_Base_SetConfig+0x138>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d003      	beq.n	8007374 <TIM_Base_SetConfig+0x40>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	4a40      	ldr	r2, [pc, #256]	; (8007470 <TIM_Base_SetConfig+0x13c>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d108      	bne.n	8007386 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800737a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	4313      	orrs	r3, r2
 8007384:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4a35      	ldr	r2, [pc, #212]	; (8007460 <TIM_Base_SetConfig+0x12c>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d02b      	beq.n	80073e6 <TIM_Base_SetConfig+0xb2>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007394:	d027      	beq.n	80073e6 <TIM_Base_SetConfig+0xb2>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	4a32      	ldr	r2, [pc, #200]	; (8007464 <TIM_Base_SetConfig+0x130>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d023      	beq.n	80073e6 <TIM_Base_SetConfig+0xb2>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	4a31      	ldr	r2, [pc, #196]	; (8007468 <TIM_Base_SetConfig+0x134>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d01f      	beq.n	80073e6 <TIM_Base_SetConfig+0xb2>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	4a30      	ldr	r2, [pc, #192]	; (800746c <TIM_Base_SetConfig+0x138>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d01b      	beq.n	80073e6 <TIM_Base_SetConfig+0xb2>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4a2f      	ldr	r2, [pc, #188]	; (8007470 <TIM_Base_SetConfig+0x13c>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d017      	beq.n	80073e6 <TIM_Base_SetConfig+0xb2>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4a2e      	ldr	r2, [pc, #184]	; (8007474 <TIM_Base_SetConfig+0x140>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d013      	beq.n	80073e6 <TIM_Base_SetConfig+0xb2>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4a2d      	ldr	r2, [pc, #180]	; (8007478 <TIM_Base_SetConfig+0x144>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d00f      	beq.n	80073e6 <TIM_Base_SetConfig+0xb2>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4a2c      	ldr	r2, [pc, #176]	; (800747c <TIM_Base_SetConfig+0x148>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d00b      	beq.n	80073e6 <TIM_Base_SetConfig+0xb2>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4a2b      	ldr	r2, [pc, #172]	; (8007480 <TIM_Base_SetConfig+0x14c>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d007      	beq.n	80073e6 <TIM_Base_SetConfig+0xb2>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	4a2a      	ldr	r2, [pc, #168]	; (8007484 <TIM_Base_SetConfig+0x150>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d003      	beq.n	80073e6 <TIM_Base_SetConfig+0xb2>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4a29      	ldr	r2, [pc, #164]	; (8007488 <TIM_Base_SetConfig+0x154>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d108      	bne.n	80073f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	4313      	orrs	r3, r2
 80073f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	695b      	ldr	r3, [r3, #20]
 8007402:	4313      	orrs	r3, r2
 8007404:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	68fa      	ldr	r2, [r7, #12]
 800740a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	689a      	ldr	r2, [r3, #8]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	4a10      	ldr	r2, [pc, #64]	; (8007460 <TIM_Base_SetConfig+0x12c>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d003      	beq.n	800742c <TIM_Base_SetConfig+0xf8>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	4a12      	ldr	r2, [pc, #72]	; (8007470 <TIM_Base_SetConfig+0x13c>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d103      	bne.n	8007434 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	691a      	ldr	r2, [r3, #16]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2201      	movs	r2, #1
 8007438:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	f003 0301 	and.w	r3, r3, #1
 8007442:	2b01      	cmp	r3, #1
 8007444:	d105      	bne.n	8007452 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	f023 0201 	bic.w	r2, r3, #1
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	611a      	str	r2, [r3, #16]
  }
}
 8007452:	bf00      	nop
 8007454:	3714      	adds	r7, #20
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr
 800745e:	bf00      	nop
 8007460:	40010000 	.word	0x40010000
 8007464:	40000400 	.word	0x40000400
 8007468:	40000800 	.word	0x40000800
 800746c:	40000c00 	.word	0x40000c00
 8007470:	40010400 	.word	0x40010400
 8007474:	40014000 	.word	0x40014000
 8007478:	40014400 	.word	0x40014400
 800747c:	40014800 	.word	0x40014800
 8007480:	40001800 	.word	0x40001800
 8007484:	40001c00 	.word	0x40001c00
 8007488:	40002000 	.word	0x40002000

0800748c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800748c:	b480      	push	{r7}
 800748e:	b087      	sub	sp, #28
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6a1b      	ldr	r3, [r3, #32]
 800749a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6a1b      	ldr	r3, [r3, #32]
 80074a0:	f023 0201 	bic.w	r2, r3, #1
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	699b      	ldr	r3, [r3, #24]
 80074b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f023 0303 	bic.w	r3, r3, #3
 80074c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	68fa      	ldr	r2, [r7, #12]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	f023 0302 	bic.w	r3, r3, #2
 80074d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	697a      	ldr	r2, [r7, #20]
 80074dc:	4313      	orrs	r3, r2
 80074de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	4a20      	ldr	r2, [pc, #128]	; (8007564 <TIM_OC1_SetConfig+0xd8>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d003      	beq.n	80074f0 <TIM_OC1_SetConfig+0x64>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	4a1f      	ldr	r2, [pc, #124]	; (8007568 <TIM_OC1_SetConfig+0xdc>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d10c      	bne.n	800750a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	f023 0308 	bic.w	r3, r3, #8
 80074f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	697a      	ldr	r2, [r7, #20]
 80074fe:	4313      	orrs	r3, r2
 8007500:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	f023 0304 	bic.w	r3, r3, #4
 8007508:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4a15      	ldr	r2, [pc, #84]	; (8007564 <TIM_OC1_SetConfig+0xd8>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d003      	beq.n	800751a <TIM_OC1_SetConfig+0x8e>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	4a14      	ldr	r2, [pc, #80]	; (8007568 <TIM_OC1_SetConfig+0xdc>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d111      	bne.n	800753e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007520:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007528:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	695b      	ldr	r3, [r3, #20]
 800752e:	693a      	ldr	r2, [r7, #16]
 8007530:	4313      	orrs	r3, r2
 8007532:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	699b      	ldr	r3, [r3, #24]
 8007538:	693a      	ldr	r2, [r7, #16]
 800753a:	4313      	orrs	r3, r2
 800753c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	693a      	ldr	r2, [r7, #16]
 8007542:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	68fa      	ldr	r2, [r7, #12]
 8007548:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	685a      	ldr	r2, [r3, #4]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	697a      	ldr	r2, [r7, #20]
 8007556:	621a      	str	r2, [r3, #32]
}
 8007558:	bf00      	nop
 800755a:	371c      	adds	r7, #28
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr
 8007564:	40010000 	.word	0x40010000
 8007568:	40010400 	.word	0x40010400

0800756c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800756c:	b480      	push	{r7}
 800756e:	b087      	sub	sp, #28
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6a1b      	ldr	r3, [r3, #32]
 800757a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6a1b      	ldr	r3, [r3, #32]
 8007580:	f023 0210 	bic.w	r2, r3, #16
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	699b      	ldr	r3, [r3, #24]
 8007592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800759a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	021b      	lsls	r3, r3, #8
 80075aa:	68fa      	ldr	r2, [r7, #12]
 80075ac:	4313      	orrs	r3, r2
 80075ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	f023 0320 	bic.w	r3, r3, #32
 80075b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	011b      	lsls	r3, r3, #4
 80075be:	697a      	ldr	r2, [r7, #20]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	4a22      	ldr	r2, [pc, #136]	; (8007650 <TIM_OC2_SetConfig+0xe4>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d003      	beq.n	80075d4 <TIM_OC2_SetConfig+0x68>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	4a21      	ldr	r2, [pc, #132]	; (8007654 <TIM_OC2_SetConfig+0xe8>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d10d      	bne.n	80075f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	011b      	lsls	r3, r3, #4
 80075e2:	697a      	ldr	r2, [r7, #20]
 80075e4:	4313      	orrs	r3, r2
 80075e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	4a17      	ldr	r2, [pc, #92]	; (8007650 <TIM_OC2_SetConfig+0xe4>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d003      	beq.n	8007600 <TIM_OC2_SetConfig+0x94>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	4a16      	ldr	r2, [pc, #88]	; (8007654 <TIM_OC2_SetConfig+0xe8>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d113      	bne.n	8007628 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007606:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800760e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	695b      	ldr	r3, [r3, #20]
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	693a      	ldr	r2, [r7, #16]
 8007618:	4313      	orrs	r3, r2
 800761a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	699b      	ldr	r3, [r3, #24]
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	693a      	ldr	r2, [r7, #16]
 8007624:	4313      	orrs	r3, r2
 8007626:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	693a      	ldr	r2, [r7, #16]
 800762c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	68fa      	ldr	r2, [r7, #12]
 8007632:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	685a      	ldr	r2, [r3, #4]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	697a      	ldr	r2, [r7, #20]
 8007640:	621a      	str	r2, [r3, #32]
}
 8007642:	bf00      	nop
 8007644:	371c      	adds	r7, #28
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr
 800764e:	bf00      	nop
 8007650:	40010000 	.word	0x40010000
 8007654:	40010400 	.word	0x40010400

08007658 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007658:	b480      	push	{r7}
 800765a:	b087      	sub	sp, #28
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6a1b      	ldr	r3, [r3, #32]
 8007666:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6a1b      	ldr	r3, [r3, #32]
 800766c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	69db      	ldr	r3, [r3, #28]
 800767e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f023 0303 	bic.w	r3, r3, #3
 800768e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	68fa      	ldr	r2, [r7, #12]
 8007696:	4313      	orrs	r3, r2
 8007698:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80076a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	021b      	lsls	r3, r3, #8
 80076a8:	697a      	ldr	r2, [r7, #20]
 80076aa:	4313      	orrs	r3, r2
 80076ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4a21      	ldr	r2, [pc, #132]	; (8007738 <TIM_OC3_SetConfig+0xe0>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d003      	beq.n	80076be <TIM_OC3_SetConfig+0x66>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4a20      	ldr	r2, [pc, #128]	; (800773c <TIM_OC3_SetConfig+0xe4>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d10d      	bne.n	80076da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80076c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	021b      	lsls	r3, r3, #8
 80076cc:	697a      	ldr	r2, [r7, #20]
 80076ce:	4313      	orrs	r3, r2
 80076d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80076d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4a16      	ldr	r2, [pc, #88]	; (8007738 <TIM_OC3_SetConfig+0xe0>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d003      	beq.n	80076ea <TIM_OC3_SetConfig+0x92>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4a15      	ldr	r2, [pc, #84]	; (800773c <TIM_OC3_SetConfig+0xe4>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d113      	bne.n	8007712 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80076f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	695b      	ldr	r3, [r3, #20]
 80076fe:	011b      	lsls	r3, r3, #4
 8007700:	693a      	ldr	r2, [r7, #16]
 8007702:	4313      	orrs	r3, r2
 8007704:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	699b      	ldr	r3, [r3, #24]
 800770a:	011b      	lsls	r3, r3, #4
 800770c:	693a      	ldr	r2, [r7, #16]
 800770e:	4313      	orrs	r3, r2
 8007710:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	693a      	ldr	r2, [r7, #16]
 8007716:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	68fa      	ldr	r2, [r7, #12]
 800771c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	685a      	ldr	r2, [r3, #4]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	697a      	ldr	r2, [r7, #20]
 800772a:	621a      	str	r2, [r3, #32]
}
 800772c:	bf00      	nop
 800772e:	371c      	adds	r7, #28
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr
 8007738:	40010000 	.word	0x40010000
 800773c:	40010400 	.word	0x40010400

08007740 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007740:	b480      	push	{r7}
 8007742:	b087      	sub	sp, #28
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a1b      	ldr	r3, [r3, #32]
 800774e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6a1b      	ldr	r3, [r3, #32]
 8007754:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	69db      	ldr	r3, [r3, #28]
 8007766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800776e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007776:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	021b      	lsls	r3, r3, #8
 800777e:	68fa      	ldr	r2, [r7, #12]
 8007780:	4313      	orrs	r3, r2
 8007782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800778a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	031b      	lsls	r3, r3, #12
 8007792:	693a      	ldr	r2, [r7, #16]
 8007794:	4313      	orrs	r3, r2
 8007796:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	4a12      	ldr	r2, [pc, #72]	; (80077e4 <TIM_OC4_SetConfig+0xa4>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d003      	beq.n	80077a8 <TIM_OC4_SetConfig+0x68>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	4a11      	ldr	r2, [pc, #68]	; (80077e8 <TIM_OC4_SetConfig+0xa8>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d109      	bne.n	80077bc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	695b      	ldr	r3, [r3, #20]
 80077b4:	019b      	lsls	r3, r3, #6
 80077b6:	697a      	ldr	r2, [r7, #20]
 80077b8:	4313      	orrs	r3, r2
 80077ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	697a      	ldr	r2, [r7, #20]
 80077c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	68fa      	ldr	r2, [r7, #12]
 80077c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	685a      	ldr	r2, [r3, #4]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	693a      	ldr	r2, [r7, #16]
 80077d4:	621a      	str	r2, [r3, #32]
}
 80077d6:	bf00      	nop
 80077d8:	371c      	adds	r7, #28
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop
 80077e4:	40010000 	.word	0x40010000
 80077e8:	40010400 	.word	0x40010400

080077ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b087      	sub	sp, #28
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6a1b      	ldr	r3, [r3, #32]
 80077fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	6a1b      	ldr	r3, [r3, #32]
 8007802:	f023 0201 	bic.w	r2, r3, #1
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	699b      	ldr	r3, [r3, #24]
 800780e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007816:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	011b      	lsls	r3, r3, #4
 800781c:	693a      	ldr	r2, [r7, #16]
 800781e:	4313      	orrs	r3, r2
 8007820:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	f023 030a 	bic.w	r3, r3, #10
 8007828:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800782a:	697a      	ldr	r2, [r7, #20]
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	4313      	orrs	r3, r2
 8007830:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	693a      	ldr	r2, [r7, #16]
 8007836:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	697a      	ldr	r2, [r7, #20]
 800783c:	621a      	str	r2, [r3, #32]
}
 800783e:	bf00      	nop
 8007840:	371c      	adds	r7, #28
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr

0800784a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800784a:	b480      	push	{r7}
 800784c:	b087      	sub	sp, #28
 800784e:	af00      	add	r7, sp, #0
 8007850:	60f8      	str	r0, [r7, #12]
 8007852:	60b9      	str	r1, [r7, #8]
 8007854:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	6a1b      	ldr	r3, [r3, #32]
 800785a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6a1b      	ldr	r3, [r3, #32]
 8007860:	f023 0210 	bic.w	r2, r3, #16
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	699b      	ldr	r3, [r3, #24]
 800786c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007874:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	031b      	lsls	r3, r3, #12
 800787a:	693a      	ldr	r2, [r7, #16]
 800787c:	4313      	orrs	r3, r2
 800787e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007886:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	011b      	lsls	r3, r3, #4
 800788c:	697a      	ldr	r2, [r7, #20]
 800788e:	4313      	orrs	r3, r2
 8007890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	693a      	ldr	r2, [r7, #16]
 8007896:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	697a      	ldr	r2, [r7, #20]
 800789c:	621a      	str	r2, [r3, #32]
}
 800789e:	bf00      	nop
 80078a0:	371c      	adds	r7, #28
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr

080078aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80078aa:	b480      	push	{r7}
 80078ac:	b085      	sub	sp, #20
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
 80078b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80078c2:	683a      	ldr	r2, [r7, #0]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	f043 0307 	orr.w	r3, r3, #7
 80078cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	68fa      	ldr	r2, [r7, #12]
 80078d2:	609a      	str	r2, [r3, #8]
}
 80078d4:	bf00      	nop
 80078d6:	3714      	adds	r7, #20
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b087      	sub	sp, #28
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	607a      	str	r2, [r7, #4]
 80078ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	021a      	lsls	r2, r3, #8
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	431a      	orrs	r2, r3
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	4313      	orrs	r3, r2
 8007908:	697a      	ldr	r2, [r7, #20]
 800790a:	4313      	orrs	r3, r2
 800790c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	697a      	ldr	r2, [r7, #20]
 8007912:	609a      	str	r2, [r3, #8]
}
 8007914:	bf00      	nop
 8007916:	371c      	adds	r7, #28
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr

08007920 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007920:	b480      	push	{r7}
 8007922:	b087      	sub	sp, #28
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	f003 031f 	and.w	r3, r3, #31
 8007932:	2201      	movs	r2, #1
 8007934:	fa02 f303 	lsl.w	r3, r2, r3
 8007938:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	6a1a      	ldr	r2, [r3, #32]
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	43db      	mvns	r3, r3
 8007942:	401a      	ands	r2, r3
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6a1a      	ldr	r2, [r3, #32]
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	f003 031f 	and.w	r3, r3, #31
 8007952:	6879      	ldr	r1, [r7, #4]
 8007954:	fa01 f303 	lsl.w	r3, r1, r3
 8007958:	431a      	orrs	r2, r3
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	621a      	str	r2, [r3, #32]
}
 800795e:	bf00      	nop
 8007960:	371c      	adds	r7, #28
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr
	...

0800796c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800796c:	b480      	push	{r7}
 800796e:	b085      	sub	sp, #20
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800797c:	2b01      	cmp	r3, #1
 800797e:	d101      	bne.n	8007984 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007980:	2302      	movs	r3, #2
 8007982:	e05a      	b.n	8007a3a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2202      	movs	r2, #2
 8007990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	4313      	orrs	r3, r2
 80079b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	68fa      	ldr	r2, [r7, #12]
 80079bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a21      	ldr	r2, [pc, #132]	; (8007a48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d022      	beq.n	8007a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079d0:	d01d      	beq.n	8007a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a1d      	ldr	r2, [pc, #116]	; (8007a4c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d018      	beq.n	8007a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a1b      	ldr	r2, [pc, #108]	; (8007a50 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d013      	beq.n	8007a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a1a      	ldr	r2, [pc, #104]	; (8007a54 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d00e      	beq.n	8007a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a18      	ldr	r2, [pc, #96]	; (8007a58 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d009      	beq.n	8007a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a17      	ldr	r2, [pc, #92]	; (8007a5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d004      	beq.n	8007a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a15      	ldr	r2, [pc, #84]	; (8007a60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d10c      	bne.n	8007a28 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	68ba      	ldr	r2, [r7, #8]
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	68ba      	ldr	r2, [r7, #8]
 8007a26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a38:	2300      	movs	r3, #0
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3714      	adds	r7, #20
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr
 8007a46:	bf00      	nop
 8007a48:	40010000 	.word	0x40010000
 8007a4c:	40000400 	.word	0x40000400
 8007a50:	40000800 	.word	0x40000800
 8007a54:	40000c00 	.word	0x40000c00
 8007a58:	40010400 	.word	0x40010400
 8007a5c:	40014000 	.word	0x40014000
 8007a60:	40001800 	.word	0x40001800

08007a64 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b085      	sub	sp, #20
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d101      	bne.n	8007a80 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007a7c:	2302      	movs	r3, #2
 8007a7e:	e03d      	b.n	8007afc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2201      	movs	r2, #1
 8007a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	68db      	ldr	r3, [r3, #12]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	4313      	orrs	r3, r2
 8007acc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	695b      	ldr	r3, [r3, #20]
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	69db      	ldr	r3, [r3, #28]
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	68fa      	ldr	r2, [r7, #12]
 8007af0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2200      	movs	r2, #0
 8007af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007afa:	2300      	movs	r3, #0
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3714      	adds	r7, #20
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b10:	bf00      	nop
 8007b12:	370c      	adds	r7, #12
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b24:	bf00      	nop
 8007b26:	370c      	adds	r7, #12
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d101      	bne.n	8007b42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	e042      	b.n	8007bc8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d106      	bne.n	8007b5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f7fb fa2e 	bl	8002fb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2224      	movs	r2, #36	; 0x24
 8007b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	68da      	ldr	r2, [r3, #12]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 fdbd 	bl	80086f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	691a      	ldr	r2, [r3, #16]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	695a      	ldr	r2, [r3, #20]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	68da      	ldr	r2, [r3, #12]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ba8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2220      	movs	r2, #32
 8007bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2220      	movs	r2, #32
 8007bbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007bc6:	2300      	movs	r3, #0
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3708      	adds	r7, #8
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b08a      	sub	sp, #40	; 0x28
 8007bd4:	af02      	add	r7, sp, #8
 8007bd6:	60f8      	str	r0, [r7, #12]
 8007bd8:	60b9      	str	r1, [r7, #8]
 8007bda:	603b      	str	r3, [r7, #0]
 8007bdc:	4613      	mov	r3, r2
 8007bde:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007be0:	2300      	movs	r3, #0
 8007be2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	2b20      	cmp	r3, #32
 8007bee:	d175      	bne.n	8007cdc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d002      	beq.n	8007bfc <HAL_UART_Transmit+0x2c>
 8007bf6:	88fb      	ldrh	r3, [r7, #6]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d101      	bne.n	8007c00 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e06e      	b.n	8007cde <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2200      	movs	r2, #0
 8007c04:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2221      	movs	r2, #33	; 0x21
 8007c0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007c0e:	f7fb ff39 	bl	8003a84 <HAL_GetTick>
 8007c12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	88fa      	ldrh	r2, [r7, #6]
 8007c18:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	88fa      	ldrh	r2, [r7, #6]
 8007c1e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c28:	d108      	bne.n	8007c3c <HAL_UART_Transmit+0x6c>
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	691b      	ldr	r3, [r3, #16]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d104      	bne.n	8007c3c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007c32:	2300      	movs	r3, #0
 8007c34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	61bb      	str	r3, [r7, #24]
 8007c3a:	e003      	b.n	8007c44 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c40:	2300      	movs	r3, #0
 8007c42:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007c44:	e02e      	b.n	8007ca4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	9300      	str	r3, [sp, #0]
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	2180      	movs	r1, #128	; 0x80
 8007c50:	68f8      	ldr	r0, [r7, #12]
 8007c52:	f000 fb1f 	bl	8008294 <UART_WaitOnFlagUntilTimeout>
 8007c56:	4603      	mov	r3, r0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d005      	beq.n	8007c68 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2220      	movs	r2, #32
 8007c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8007c64:	2303      	movs	r3, #3
 8007c66:	e03a      	b.n	8007cde <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d10b      	bne.n	8007c86 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	881b      	ldrh	r3, [r3, #0]
 8007c72:	461a      	mov	r2, r3
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007c7e:	69bb      	ldr	r3, [r7, #24]
 8007c80:	3302      	adds	r3, #2
 8007c82:	61bb      	str	r3, [r7, #24]
 8007c84:	e007      	b.n	8007c96 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007c86:	69fb      	ldr	r3, [r7, #28]
 8007c88:	781a      	ldrb	r2, [r3, #0]
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007c90:	69fb      	ldr	r3, [r7, #28]
 8007c92:	3301      	adds	r3, #1
 8007c94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	3b01      	subs	r3, #1
 8007c9e:	b29a      	uxth	r2, r3
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d1cb      	bne.n	8007c46 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	9300      	str	r3, [sp, #0]
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	2140      	movs	r1, #64	; 0x40
 8007cb8:	68f8      	ldr	r0, [r7, #12]
 8007cba:	f000 faeb 	bl	8008294 <UART_WaitOnFlagUntilTimeout>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d005      	beq.n	8007cd0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2220      	movs	r2, #32
 8007cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8007ccc:	2303      	movs	r3, #3
 8007cce:	e006      	b.n	8007cde <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2220      	movs	r2, #32
 8007cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	e000      	b.n	8007cde <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007cdc:	2302      	movs	r3, #2
  }
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3720      	adds	r7, #32
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}

08007ce6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ce6:	b580      	push	{r7, lr}
 8007ce8:	b084      	sub	sp, #16
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	60f8      	str	r0, [r7, #12]
 8007cee:	60b9      	str	r1, [r7, #8]
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	2b20      	cmp	r3, #32
 8007cfe:	d112      	bne.n	8007d26 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d002      	beq.n	8007d0c <HAL_UART_Receive_IT+0x26>
 8007d06:	88fb      	ldrh	r3, [r7, #6]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d101      	bne.n	8007d10 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e00b      	b.n	8007d28 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2200      	movs	r2, #0
 8007d14:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007d16:	88fb      	ldrh	r3, [r7, #6]
 8007d18:	461a      	mov	r2, r3
 8007d1a:	68b9      	ldr	r1, [r7, #8]
 8007d1c:	68f8      	ldr	r0, [r7, #12]
 8007d1e:	f000 fb12 	bl	8008346 <UART_Start_Receive_IT>
 8007d22:	4603      	mov	r3, r0
 8007d24:	e000      	b.n	8007d28 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007d26:	2302      	movs	r3, #2
  }
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3710      	adds	r7, #16
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b0ba      	sub	sp, #232	; 0xe8
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	695b      	ldr	r3, [r3, #20]
 8007d52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007d56:	2300      	movs	r3, #0
 8007d58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d66:	f003 030f 	and.w	r3, r3, #15
 8007d6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007d6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d10f      	bne.n	8007d96 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d7a:	f003 0320 	and.w	r3, r3, #32
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d009      	beq.n	8007d96 <HAL_UART_IRQHandler+0x66>
 8007d82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d86:	f003 0320 	and.w	r3, r3, #32
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d003      	beq.n	8007d96 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 fbf2 	bl	8008578 <UART_Receive_IT>
      return;
 8007d94:	e25b      	b.n	800824e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007d96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	f000 80de 	beq.w	8007f5c <HAL_UART_IRQHandler+0x22c>
 8007da0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007da4:	f003 0301 	and.w	r3, r3, #1
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d106      	bne.n	8007dba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007dac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007db0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	f000 80d1 	beq.w	8007f5c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dbe:	f003 0301 	and.w	r3, r3, #1
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d00b      	beq.n	8007dde <HAL_UART_IRQHandler+0xae>
 8007dc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d005      	beq.n	8007dde <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dd6:	f043 0201 	orr.w	r2, r3, #1
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007de2:	f003 0304 	and.w	r3, r3, #4
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d00b      	beq.n	8007e02 <HAL_UART_IRQHandler+0xd2>
 8007dea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007dee:	f003 0301 	and.w	r3, r3, #1
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d005      	beq.n	8007e02 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dfa:	f043 0202 	orr.w	r2, r3, #2
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e06:	f003 0302 	and.w	r3, r3, #2
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d00b      	beq.n	8007e26 <HAL_UART_IRQHandler+0xf6>
 8007e0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e12:	f003 0301 	and.w	r3, r3, #1
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d005      	beq.n	8007e26 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e1e:	f043 0204 	orr.w	r2, r3, #4
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e2a:	f003 0308 	and.w	r3, r3, #8
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d011      	beq.n	8007e56 <HAL_UART_IRQHandler+0x126>
 8007e32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e36:	f003 0320 	and.w	r3, r3, #32
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d105      	bne.n	8007e4a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007e3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e42:	f003 0301 	and.w	r3, r3, #1
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d005      	beq.n	8007e56 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e4e:	f043 0208 	orr.w	r2, r3, #8
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	f000 81f2 	beq.w	8008244 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e64:	f003 0320 	and.w	r3, r3, #32
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d008      	beq.n	8007e7e <HAL_UART_IRQHandler+0x14e>
 8007e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e70:	f003 0320 	and.w	r3, r3, #32
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d002      	beq.n	8007e7e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 fb7d 	bl	8008578 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	695b      	ldr	r3, [r3, #20]
 8007e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e88:	2b40      	cmp	r3, #64	; 0x40
 8007e8a:	bf0c      	ite	eq
 8007e8c:	2301      	moveq	r3, #1
 8007e8e:	2300      	movne	r3, #0
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e9a:	f003 0308 	and.w	r3, r3, #8
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d103      	bne.n	8007eaa <HAL_UART_IRQHandler+0x17a>
 8007ea2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d04f      	beq.n	8007f4a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 fa85 	bl	80083ba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	695b      	ldr	r3, [r3, #20]
 8007eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eba:	2b40      	cmp	r3, #64	; 0x40
 8007ebc:	d141      	bne.n	8007f42 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	3314      	adds	r3, #20
 8007ec4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ecc:	e853 3f00 	ldrex	r3, [r3]
 8007ed0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007ed4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ed8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007edc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	3314      	adds	r3, #20
 8007ee6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007eea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007eee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007ef6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007efa:	e841 2300 	strex	r3, r2, [r1]
 8007efe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007f02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d1d9      	bne.n	8007ebe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d013      	beq.n	8007f3a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f16:	4a7e      	ldr	r2, [pc, #504]	; (8008110 <HAL_UART_IRQHandler+0x3e0>)
 8007f18:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f7fc fda4 	bl	8004a6c <HAL_DMA_Abort_IT>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d016      	beq.n	8007f58 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f30:	687a      	ldr	r2, [r7, #4]
 8007f32:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007f34:	4610      	mov	r0, r2
 8007f36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f38:	e00e      	b.n	8007f58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 f994 	bl	8008268 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f40:	e00a      	b.n	8007f58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 f990 	bl	8008268 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f48:	e006      	b.n	8007f58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 f98c 	bl	8008268 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8007f56:	e175      	b.n	8008244 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f58:	bf00      	nop
    return;
 8007f5a:	e173      	b.n	8008244 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	f040 814f 	bne.w	8008204 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f6a:	f003 0310 	and.w	r3, r3, #16
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	f000 8148 	beq.w	8008204 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007f74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f78:	f003 0310 	and.w	r3, r3, #16
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	f000 8141 	beq.w	8008204 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007f82:	2300      	movs	r3, #0
 8007f84:	60bb      	str	r3, [r7, #8]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	60bb      	str	r3, [r7, #8]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	60bb      	str	r3, [r7, #8]
 8007f96:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	695b      	ldr	r3, [r3, #20]
 8007f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fa2:	2b40      	cmp	r3, #64	; 0x40
 8007fa4:	f040 80b6 	bne.w	8008114 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007fb4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	f000 8145 	beq.w	8008248 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007fc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	f080 813e 	bcs.w	8008248 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007fd2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fd8:	69db      	ldr	r3, [r3, #28]
 8007fda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fde:	f000 8088 	beq.w	80080f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	330c      	adds	r3, #12
 8007fe8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ff0:	e853 3f00 	ldrex	r3, [r3]
 8007ff4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007ff8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ffc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008000:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	330c      	adds	r3, #12
 800800a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800800e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008012:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008016:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800801a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800801e:	e841 2300 	strex	r3, r2, [r1]
 8008022:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008026:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800802a:	2b00      	cmp	r3, #0
 800802c:	d1d9      	bne.n	8007fe2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	3314      	adds	r3, #20
 8008034:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008036:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008038:	e853 3f00 	ldrex	r3, [r3]
 800803c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800803e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008040:	f023 0301 	bic.w	r3, r3, #1
 8008044:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	3314      	adds	r3, #20
 800804e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008052:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008056:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008058:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800805a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800805e:	e841 2300 	strex	r3, r2, [r1]
 8008062:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008064:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008066:	2b00      	cmp	r3, #0
 8008068:	d1e1      	bne.n	800802e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	3314      	adds	r3, #20
 8008070:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008072:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008074:	e853 3f00 	ldrex	r3, [r3]
 8008078:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800807a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800807c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008080:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	3314      	adds	r3, #20
 800808a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800808e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008090:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008092:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008094:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008096:	e841 2300 	strex	r3, r2, [r1]
 800809a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800809c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d1e3      	bne.n	800806a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2220      	movs	r2, #32
 80080a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	330c      	adds	r3, #12
 80080b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080ba:	e853 3f00 	ldrex	r3, [r3]
 80080be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80080c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080c2:	f023 0310 	bic.w	r3, r3, #16
 80080c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	330c      	adds	r3, #12
 80080d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80080d4:	65ba      	str	r2, [r7, #88]	; 0x58
 80080d6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80080da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80080dc:	e841 2300 	strex	r3, r2, [r1]
 80080e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80080e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d1e3      	bne.n	80080b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080ec:	4618      	mov	r0, r3
 80080ee:	f7fc fc4d 	bl	800498c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2202      	movs	r2, #2
 80080f6:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008100:	b29b      	uxth	r3, r3
 8008102:	1ad3      	subs	r3, r2, r3
 8008104:	b29b      	uxth	r3, r3
 8008106:	4619      	mov	r1, r3
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 f8b7 	bl	800827c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800810e:	e09b      	b.n	8008248 <HAL_UART_IRQHandler+0x518>
 8008110:	08008481 	.word	0x08008481
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800811c:	b29b      	uxth	r3, r3
 800811e:	1ad3      	subs	r3, r2, r3
 8008120:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008128:	b29b      	uxth	r3, r3
 800812a:	2b00      	cmp	r3, #0
 800812c:	f000 808e 	beq.w	800824c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008130:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008134:	2b00      	cmp	r3, #0
 8008136:	f000 8089 	beq.w	800824c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	330c      	adds	r3, #12
 8008140:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008144:	e853 3f00 	ldrex	r3, [r3]
 8008148:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800814a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800814c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008150:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	330c      	adds	r3, #12
 800815a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800815e:	647a      	str	r2, [r7, #68]	; 0x44
 8008160:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008162:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008164:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008166:	e841 2300 	strex	r3, r2, [r1]
 800816a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800816c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800816e:	2b00      	cmp	r3, #0
 8008170:	d1e3      	bne.n	800813a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	3314      	adds	r3, #20
 8008178:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800817a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817c:	e853 3f00 	ldrex	r3, [r3]
 8008180:	623b      	str	r3, [r7, #32]
   return(result);
 8008182:	6a3b      	ldr	r3, [r7, #32]
 8008184:	f023 0301 	bic.w	r3, r3, #1
 8008188:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	3314      	adds	r3, #20
 8008192:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008196:	633a      	str	r2, [r7, #48]	; 0x30
 8008198:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800819a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800819c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800819e:	e841 2300 	strex	r3, r2, [r1]
 80081a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80081a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d1e3      	bne.n	8008172 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2220      	movs	r2, #32
 80081ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	330c      	adds	r3, #12
 80081be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	e853 3f00 	ldrex	r3, [r3]
 80081c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f023 0310 	bic.w	r3, r3, #16
 80081ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	330c      	adds	r3, #12
 80081d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80081dc:	61fa      	str	r2, [r7, #28]
 80081de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e0:	69b9      	ldr	r1, [r7, #24]
 80081e2:	69fa      	ldr	r2, [r7, #28]
 80081e4:	e841 2300 	strex	r3, r2, [r1]
 80081e8:	617b      	str	r3, [r7, #20]
   return(result);
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d1e3      	bne.n	80081b8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2202      	movs	r2, #2
 80081f4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80081f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80081fa:	4619      	mov	r1, r3
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 f83d 	bl	800827c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008202:	e023      	b.n	800824c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800820c:	2b00      	cmp	r3, #0
 800820e:	d009      	beq.n	8008224 <HAL_UART_IRQHandler+0x4f4>
 8008210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008218:	2b00      	cmp	r3, #0
 800821a:	d003      	beq.n	8008224 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 f943 	bl	80084a8 <UART_Transmit_IT>
    return;
 8008222:	e014      	b.n	800824e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800822c:	2b00      	cmp	r3, #0
 800822e:	d00e      	beq.n	800824e <HAL_UART_IRQHandler+0x51e>
 8008230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008238:	2b00      	cmp	r3, #0
 800823a:	d008      	beq.n	800824e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 f983 	bl	8008548 <UART_EndTransmit_IT>
    return;
 8008242:	e004      	b.n	800824e <HAL_UART_IRQHandler+0x51e>
    return;
 8008244:	bf00      	nop
 8008246:	e002      	b.n	800824e <HAL_UART_IRQHandler+0x51e>
      return;
 8008248:	bf00      	nop
 800824a:	e000      	b.n	800824e <HAL_UART_IRQHandler+0x51e>
      return;
 800824c:	bf00      	nop
  }
}
 800824e:	37e8      	adds	r7, #232	; 0xe8
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008254:	b480      	push	{r7}
 8008256:	b083      	sub	sp, #12
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800825c:	bf00      	nop
 800825e:	370c      	adds	r7, #12
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr

08008268 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008268:	b480      	push	{r7}
 800826a:	b083      	sub	sp, #12
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008270:	bf00      	nop
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr

0800827c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800827c:	b480      	push	{r7}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	460b      	mov	r3, r1
 8008286:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008288:	bf00      	nop
 800828a:	370c      	adds	r7, #12
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr

08008294 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b086      	sub	sp, #24
 8008298:	af00      	add	r7, sp, #0
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	603b      	str	r3, [r7, #0]
 80082a0:	4613      	mov	r3, r2
 80082a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082a4:	e03b      	b.n	800831e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082a6:	6a3b      	ldr	r3, [r7, #32]
 80082a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ac:	d037      	beq.n	800831e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082ae:	f7fb fbe9 	bl	8003a84 <HAL_GetTick>
 80082b2:	4602      	mov	r2, r0
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	1ad3      	subs	r3, r2, r3
 80082b8:	6a3a      	ldr	r2, [r7, #32]
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d302      	bcc.n	80082c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80082be:	6a3b      	ldr	r3, [r7, #32]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d101      	bne.n	80082c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80082c4:	2303      	movs	r3, #3
 80082c6:	e03a      	b.n	800833e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	68db      	ldr	r3, [r3, #12]
 80082ce:	f003 0304 	and.w	r3, r3, #4
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d023      	beq.n	800831e <UART_WaitOnFlagUntilTimeout+0x8a>
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	2b80      	cmp	r3, #128	; 0x80
 80082da:	d020      	beq.n	800831e <UART_WaitOnFlagUntilTimeout+0x8a>
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	2b40      	cmp	r3, #64	; 0x40
 80082e0:	d01d      	beq.n	800831e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f003 0308 	and.w	r3, r3, #8
 80082ec:	2b08      	cmp	r3, #8
 80082ee:	d116      	bne.n	800831e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80082f0:	2300      	movs	r3, #0
 80082f2:	617b      	str	r3, [r7, #20]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	617b      	str	r3, [r7, #20]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	617b      	str	r3, [r7, #20]
 8008304:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008306:	68f8      	ldr	r0, [r7, #12]
 8008308:	f000 f857 	bl	80083ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2208      	movs	r2, #8
 8008310:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2200      	movs	r2, #0
 8008316:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	e00f      	b.n	800833e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	4013      	ands	r3, r2
 8008328:	68ba      	ldr	r2, [r7, #8]
 800832a:	429a      	cmp	r2, r3
 800832c:	bf0c      	ite	eq
 800832e:	2301      	moveq	r3, #1
 8008330:	2300      	movne	r3, #0
 8008332:	b2db      	uxtb	r3, r3
 8008334:	461a      	mov	r2, r3
 8008336:	79fb      	ldrb	r3, [r7, #7]
 8008338:	429a      	cmp	r2, r3
 800833a:	d0b4      	beq.n	80082a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3718      	adds	r7, #24
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008346:	b480      	push	{r7}
 8008348:	b085      	sub	sp, #20
 800834a:	af00      	add	r7, sp, #0
 800834c:	60f8      	str	r0, [r7, #12]
 800834e:	60b9      	str	r1, [r7, #8]
 8008350:	4613      	mov	r3, r2
 8008352:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	68ba      	ldr	r2, [r7, #8]
 8008358:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	88fa      	ldrh	r2, [r7, #6]
 800835e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	88fa      	ldrh	r2, [r7, #6]
 8008364:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2200      	movs	r2, #0
 800836a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2222      	movs	r2, #34	; 0x22
 8008370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	691b      	ldr	r3, [r3, #16]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d007      	beq.n	800838c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	68da      	ldr	r2, [r3, #12]
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800838a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	695a      	ldr	r2, [r3, #20]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f042 0201 	orr.w	r2, r2, #1
 800839a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	68da      	ldr	r2, [r3, #12]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f042 0220 	orr.w	r2, r2, #32
 80083aa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80083ac:	2300      	movs	r3, #0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3714      	adds	r7, #20
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr

080083ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80083ba:	b480      	push	{r7}
 80083bc:	b095      	sub	sp, #84	; 0x54
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	330c      	adds	r3, #12
 80083c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083cc:	e853 3f00 	ldrex	r3, [r3]
 80083d0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80083d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80083d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	330c      	adds	r3, #12
 80083e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80083e2:	643a      	str	r2, [r7, #64]	; 0x40
 80083e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80083e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80083ea:	e841 2300 	strex	r3, r2, [r1]
 80083ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80083f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d1e5      	bne.n	80083c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	3314      	adds	r3, #20
 80083fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083fe:	6a3b      	ldr	r3, [r7, #32]
 8008400:	e853 3f00 	ldrex	r3, [r3]
 8008404:	61fb      	str	r3, [r7, #28]
   return(result);
 8008406:	69fb      	ldr	r3, [r7, #28]
 8008408:	f023 0301 	bic.w	r3, r3, #1
 800840c:	64bb      	str	r3, [r7, #72]	; 0x48
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	3314      	adds	r3, #20
 8008414:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008416:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008418:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800841a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800841c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800841e:	e841 2300 	strex	r3, r2, [r1]
 8008422:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008426:	2b00      	cmp	r3, #0
 8008428:	d1e5      	bne.n	80083f6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800842e:	2b01      	cmp	r3, #1
 8008430:	d119      	bne.n	8008466 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	330c      	adds	r3, #12
 8008438:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	e853 3f00 	ldrex	r3, [r3]
 8008440:	60bb      	str	r3, [r7, #8]
   return(result);
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	f023 0310 	bic.w	r3, r3, #16
 8008448:	647b      	str	r3, [r7, #68]	; 0x44
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	330c      	adds	r3, #12
 8008450:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008452:	61ba      	str	r2, [r7, #24]
 8008454:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008456:	6979      	ldr	r1, [r7, #20]
 8008458:	69ba      	ldr	r2, [r7, #24]
 800845a:	e841 2300 	strex	r3, r2, [r1]
 800845e:	613b      	str	r3, [r7, #16]
   return(result);
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d1e5      	bne.n	8008432 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2220      	movs	r2, #32
 800846a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2200      	movs	r2, #0
 8008472:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008474:	bf00      	nop
 8008476:	3754      	adds	r7, #84	; 0x54
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr

08008480 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b084      	sub	sp, #16
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800848c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2200      	movs	r2, #0
 8008492:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2200      	movs	r2, #0
 8008498:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800849a:	68f8      	ldr	r0, [r7, #12]
 800849c:	f7ff fee4 	bl	8008268 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084a0:	bf00      	nop
 80084a2:	3710      	adds	r7, #16
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b085      	sub	sp, #20
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	2b21      	cmp	r3, #33	; 0x21
 80084ba:	d13e      	bne.n	800853a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084c4:	d114      	bne.n	80084f0 <UART_Transmit_IT+0x48>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	691b      	ldr	r3, [r3, #16]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d110      	bne.n	80084f0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6a1b      	ldr	r3, [r3, #32]
 80084d2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	881b      	ldrh	r3, [r3, #0]
 80084d8:	461a      	mov	r2, r3
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80084e2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6a1b      	ldr	r3, [r3, #32]
 80084e8:	1c9a      	adds	r2, r3, #2
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	621a      	str	r2, [r3, #32]
 80084ee:	e008      	b.n	8008502 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6a1b      	ldr	r3, [r3, #32]
 80084f4:	1c59      	adds	r1, r3, #1
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	6211      	str	r1, [r2, #32]
 80084fa:	781a      	ldrb	r2, [r3, #0]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008506:	b29b      	uxth	r3, r3
 8008508:	3b01      	subs	r3, #1
 800850a:	b29b      	uxth	r3, r3
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	4619      	mov	r1, r3
 8008510:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008512:	2b00      	cmp	r3, #0
 8008514:	d10f      	bne.n	8008536 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	68da      	ldr	r2, [r3, #12]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008524:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	68da      	ldr	r2, [r3, #12]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008534:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008536:	2300      	movs	r3, #0
 8008538:	e000      	b.n	800853c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800853a:	2302      	movs	r3, #2
  }
}
 800853c:	4618      	mov	r0, r3
 800853e:	3714      	adds	r7, #20
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr

08008548 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	68da      	ldr	r2, [r3, #12]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800855e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2220      	movs	r2, #32
 8008564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f7ff fe73 	bl	8008254 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800856e:	2300      	movs	r3, #0
}
 8008570:	4618      	mov	r0, r3
 8008572:	3708      	adds	r7, #8
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b08c      	sub	sp, #48	; 0x30
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008586:	b2db      	uxtb	r3, r3
 8008588:	2b22      	cmp	r3, #34	; 0x22
 800858a:	f040 80ae 	bne.w	80086ea <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	689b      	ldr	r3, [r3, #8]
 8008592:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008596:	d117      	bne.n	80085c8 <UART_Receive_IT+0x50>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	691b      	ldr	r3, [r3, #16]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d113      	bne.n	80085c8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80085a0:	2300      	movs	r3, #0
 80085a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085b6:	b29a      	uxth	r2, r3
 80085b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085c0:	1c9a      	adds	r2, r3, #2
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	629a      	str	r2, [r3, #40]	; 0x28
 80085c6:	e026      	b.n	8008616 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80085ce:	2300      	movs	r3, #0
 80085d0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	689b      	ldr	r3, [r3, #8]
 80085d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085da:	d007      	beq.n	80085ec <UART_Receive_IT+0x74>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d10a      	bne.n	80085fa <UART_Receive_IT+0x82>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	691b      	ldr	r3, [r3, #16]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d106      	bne.n	80085fa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	b2da      	uxtb	r2, r3
 80085f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f6:	701a      	strb	r2, [r3, #0]
 80085f8:	e008      	b.n	800860c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	b2db      	uxtb	r3, r3
 8008602:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008606:	b2da      	uxtb	r2, r3
 8008608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800860a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008610:	1c5a      	adds	r2, r3, #1
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800861a:	b29b      	uxth	r3, r3
 800861c:	3b01      	subs	r3, #1
 800861e:	b29b      	uxth	r3, r3
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	4619      	mov	r1, r3
 8008624:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008626:	2b00      	cmp	r3, #0
 8008628:	d15d      	bne.n	80086e6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	68da      	ldr	r2, [r3, #12]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f022 0220 	bic.w	r2, r2, #32
 8008638:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	68da      	ldr	r2, [r3, #12]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008648:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	695a      	ldr	r2, [r3, #20]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f022 0201 	bic.w	r2, r2, #1
 8008658:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2220      	movs	r2, #32
 800865e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2200      	movs	r2, #0
 8008666:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800866c:	2b01      	cmp	r3, #1
 800866e:	d135      	bne.n	80086dc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2200      	movs	r2, #0
 8008674:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	330c      	adds	r3, #12
 800867c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	e853 3f00 	ldrex	r3, [r3]
 8008684:	613b      	str	r3, [r7, #16]
   return(result);
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	f023 0310 	bic.w	r3, r3, #16
 800868c:	627b      	str	r3, [r7, #36]	; 0x24
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	330c      	adds	r3, #12
 8008694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008696:	623a      	str	r2, [r7, #32]
 8008698:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800869a:	69f9      	ldr	r1, [r7, #28]
 800869c:	6a3a      	ldr	r2, [r7, #32]
 800869e:	e841 2300 	strex	r3, r2, [r1]
 80086a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80086a4:	69bb      	ldr	r3, [r7, #24]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d1e5      	bne.n	8008676 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f003 0310 	and.w	r3, r3, #16
 80086b4:	2b10      	cmp	r3, #16
 80086b6:	d10a      	bne.n	80086ce <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80086b8:	2300      	movs	r3, #0
 80086ba:	60fb      	str	r3, [r7, #12]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	60fb      	str	r3, [r7, #12]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	60fb      	str	r3, [r7, #12]
 80086cc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80086d2:	4619      	mov	r1, r3
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f7ff fdd1 	bl	800827c <HAL_UARTEx_RxEventCallback>
 80086da:	e002      	b.n	80086e2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f7f8 fcc3 	bl	8001068 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80086e2:	2300      	movs	r3, #0
 80086e4:	e002      	b.n	80086ec <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80086e6:	2300      	movs	r3, #0
 80086e8:	e000      	b.n	80086ec <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80086ea:	2302      	movs	r3, #2
  }
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3730      	adds	r7, #48	; 0x30
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086f8:	b0c0      	sub	sp, #256	; 0x100
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	691b      	ldr	r3, [r3, #16]
 8008708:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800870c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008710:	68d9      	ldr	r1, [r3, #12]
 8008712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008716:	681a      	ldr	r2, [r3, #0]
 8008718:	ea40 0301 	orr.w	r3, r0, r1
 800871c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800871e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008722:	689a      	ldr	r2, [r3, #8]
 8008724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008728:	691b      	ldr	r3, [r3, #16]
 800872a:	431a      	orrs	r2, r3
 800872c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008730:	695b      	ldr	r3, [r3, #20]
 8008732:	431a      	orrs	r2, r3
 8008734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008738:	69db      	ldr	r3, [r3, #28]
 800873a:	4313      	orrs	r3, r2
 800873c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	68db      	ldr	r3, [r3, #12]
 8008748:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800874c:	f021 010c 	bic.w	r1, r1, #12
 8008750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800875a:	430b      	orrs	r3, r1
 800875c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800875e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	695b      	ldr	r3, [r3, #20]
 8008766:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800876a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800876e:	6999      	ldr	r1, [r3, #24]
 8008770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	ea40 0301 	orr.w	r3, r0, r1
 800877a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800877c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	4b8f      	ldr	r3, [pc, #572]	; (80089c0 <UART_SetConfig+0x2cc>)
 8008784:	429a      	cmp	r2, r3
 8008786:	d005      	beq.n	8008794 <UART_SetConfig+0xa0>
 8008788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	4b8d      	ldr	r3, [pc, #564]	; (80089c4 <UART_SetConfig+0x2d0>)
 8008790:	429a      	cmp	r2, r3
 8008792:	d104      	bne.n	800879e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008794:	f7fd fe8e 	bl	80064b4 <HAL_RCC_GetPCLK2Freq>
 8008798:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800879c:	e003      	b.n	80087a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800879e:	f7fd fe75 	bl	800648c <HAL_RCC_GetPCLK1Freq>
 80087a2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80087a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087aa:	69db      	ldr	r3, [r3, #28]
 80087ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087b0:	f040 810c 	bne.w	80089cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80087b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087b8:	2200      	movs	r2, #0
 80087ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80087be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80087c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80087c6:	4622      	mov	r2, r4
 80087c8:	462b      	mov	r3, r5
 80087ca:	1891      	adds	r1, r2, r2
 80087cc:	65b9      	str	r1, [r7, #88]	; 0x58
 80087ce:	415b      	adcs	r3, r3
 80087d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80087d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80087d6:	4621      	mov	r1, r4
 80087d8:	eb12 0801 	adds.w	r8, r2, r1
 80087dc:	4629      	mov	r1, r5
 80087de:	eb43 0901 	adc.w	r9, r3, r1
 80087e2:	f04f 0200 	mov.w	r2, #0
 80087e6:	f04f 0300 	mov.w	r3, #0
 80087ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80087ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80087f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80087f6:	4690      	mov	r8, r2
 80087f8:	4699      	mov	r9, r3
 80087fa:	4623      	mov	r3, r4
 80087fc:	eb18 0303 	adds.w	r3, r8, r3
 8008800:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008804:	462b      	mov	r3, r5
 8008806:	eb49 0303 	adc.w	r3, r9, r3
 800880a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800880e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	2200      	movs	r2, #0
 8008816:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800881a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800881e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008822:	460b      	mov	r3, r1
 8008824:	18db      	adds	r3, r3, r3
 8008826:	653b      	str	r3, [r7, #80]	; 0x50
 8008828:	4613      	mov	r3, r2
 800882a:	eb42 0303 	adc.w	r3, r2, r3
 800882e:	657b      	str	r3, [r7, #84]	; 0x54
 8008830:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008834:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008838:	f7f8 fa36 	bl	8000ca8 <__aeabi_uldivmod>
 800883c:	4602      	mov	r2, r0
 800883e:	460b      	mov	r3, r1
 8008840:	4b61      	ldr	r3, [pc, #388]	; (80089c8 <UART_SetConfig+0x2d4>)
 8008842:	fba3 2302 	umull	r2, r3, r3, r2
 8008846:	095b      	lsrs	r3, r3, #5
 8008848:	011c      	lsls	r4, r3, #4
 800884a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800884e:	2200      	movs	r2, #0
 8008850:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008854:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008858:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800885c:	4642      	mov	r2, r8
 800885e:	464b      	mov	r3, r9
 8008860:	1891      	adds	r1, r2, r2
 8008862:	64b9      	str	r1, [r7, #72]	; 0x48
 8008864:	415b      	adcs	r3, r3
 8008866:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008868:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800886c:	4641      	mov	r1, r8
 800886e:	eb12 0a01 	adds.w	sl, r2, r1
 8008872:	4649      	mov	r1, r9
 8008874:	eb43 0b01 	adc.w	fp, r3, r1
 8008878:	f04f 0200 	mov.w	r2, #0
 800887c:	f04f 0300 	mov.w	r3, #0
 8008880:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008884:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008888:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800888c:	4692      	mov	sl, r2
 800888e:	469b      	mov	fp, r3
 8008890:	4643      	mov	r3, r8
 8008892:	eb1a 0303 	adds.w	r3, sl, r3
 8008896:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800889a:	464b      	mov	r3, r9
 800889c:	eb4b 0303 	adc.w	r3, fp, r3
 80088a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80088a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	2200      	movs	r2, #0
 80088ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80088b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80088b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80088b8:	460b      	mov	r3, r1
 80088ba:	18db      	adds	r3, r3, r3
 80088bc:	643b      	str	r3, [r7, #64]	; 0x40
 80088be:	4613      	mov	r3, r2
 80088c0:	eb42 0303 	adc.w	r3, r2, r3
 80088c4:	647b      	str	r3, [r7, #68]	; 0x44
 80088c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80088ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80088ce:	f7f8 f9eb 	bl	8000ca8 <__aeabi_uldivmod>
 80088d2:	4602      	mov	r2, r0
 80088d4:	460b      	mov	r3, r1
 80088d6:	4611      	mov	r1, r2
 80088d8:	4b3b      	ldr	r3, [pc, #236]	; (80089c8 <UART_SetConfig+0x2d4>)
 80088da:	fba3 2301 	umull	r2, r3, r3, r1
 80088de:	095b      	lsrs	r3, r3, #5
 80088e0:	2264      	movs	r2, #100	; 0x64
 80088e2:	fb02 f303 	mul.w	r3, r2, r3
 80088e6:	1acb      	subs	r3, r1, r3
 80088e8:	00db      	lsls	r3, r3, #3
 80088ea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80088ee:	4b36      	ldr	r3, [pc, #216]	; (80089c8 <UART_SetConfig+0x2d4>)
 80088f0:	fba3 2302 	umull	r2, r3, r3, r2
 80088f4:	095b      	lsrs	r3, r3, #5
 80088f6:	005b      	lsls	r3, r3, #1
 80088f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80088fc:	441c      	add	r4, r3
 80088fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008902:	2200      	movs	r2, #0
 8008904:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008908:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800890c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008910:	4642      	mov	r2, r8
 8008912:	464b      	mov	r3, r9
 8008914:	1891      	adds	r1, r2, r2
 8008916:	63b9      	str	r1, [r7, #56]	; 0x38
 8008918:	415b      	adcs	r3, r3
 800891a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800891c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008920:	4641      	mov	r1, r8
 8008922:	1851      	adds	r1, r2, r1
 8008924:	6339      	str	r1, [r7, #48]	; 0x30
 8008926:	4649      	mov	r1, r9
 8008928:	414b      	adcs	r3, r1
 800892a:	637b      	str	r3, [r7, #52]	; 0x34
 800892c:	f04f 0200 	mov.w	r2, #0
 8008930:	f04f 0300 	mov.w	r3, #0
 8008934:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008938:	4659      	mov	r1, fp
 800893a:	00cb      	lsls	r3, r1, #3
 800893c:	4651      	mov	r1, sl
 800893e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008942:	4651      	mov	r1, sl
 8008944:	00ca      	lsls	r2, r1, #3
 8008946:	4610      	mov	r0, r2
 8008948:	4619      	mov	r1, r3
 800894a:	4603      	mov	r3, r0
 800894c:	4642      	mov	r2, r8
 800894e:	189b      	adds	r3, r3, r2
 8008950:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008954:	464b      	mov	r3, r9
 8008956:	460a      	mov	r2, r1
 8008958:	eb42 0303 	adc.w	r3, r2, r3
 800895c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800896c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008970:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008974:	460b      	mov	r3, r1
 8008976:	18db      	adds	r3, r3, r3
 8008978:	62bb      	str	r3, [r7, #40]	; 0x28
 800897a:	4613      	mov	r3, r2
 800897c:	eb42 0303 	adc.w	r3, r2, r3
 8008980:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008982:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008986:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800898a:	f7f8 f98d 	bl	8000ca8 <__aeabi_uldivmod>
 800898e:	4602      	mov	r2, r0
 8008990:	460b      	mov	r3, r1
 8008992:	4b0d      	ldr	r3, [pc, #52]	; (80089c8 <UART_SetConfig+0x2d4>)
 8008994:	fba3 1302 	umull	r1, r3, r3, r2
 8008998:	095b      	lsrs	r3, r3, #5
 800899a:	2164      	movs	r1, #100	; 0x64
 800899c:	fb01 f303 	mul.w	r3, r1, r3
 80089a0:	1ad3      	subs	r3, r2, r3
 80089a2:	00db      	lsls	r3, r3, #3
 80089a4:	3332      	adds	r3, #50	; 0x32
 80089a6:	4a08      	ldr	r2, [pc, #32]	; (80089c8 <UART_SetConfig+0x2d4>)
 80089a8:	fba2 2303 	umull	r2, r3, r2, r3
 80089ac:	095b      	lsrs	r3, r3, #5
 80089ae:	f003 0207 	and.w	r2, r3, #7
 80089b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4422      	add	r2, r4
 80089ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80089bc:	e106      	b.n	8008bcc <UART_SetConfig+0x4d8>
 80089be:	bf00      	nop
 80089c0:	40011000 	.word	0x40011000
 80089c4:	40011400 	.word	0x40011400
 80089c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80089cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089d0:	2200      	movs	r2, #0
 80089d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80089d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80089da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80089de:	4642      	mov	r2, r8
 80089e0:	464b      	mov	r3, r9
 80089e2:	1891      	adds	r1, r2, r2
 80089e4:	6239      	str	r1, [r7, #32]
 80089e6:	415b      	adcs	r3, r3
 80089e8:	627b      	str	r3, [r7, #36]	; 0x24
 80089ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80089ee:	4641      	mov	r1, r8
 80089f0:	1854      	adds	r4, r2, r1
 80089f2:	4649      	mov	r1, r9
 80089f4:	eb43 0501 	adc.w	r5, r3, r1
 80089f8:	f04f 0200 	mov.w	r2, #0
 80089fc:	f04f 0300 	mov.w	r3, #0
 8008a00:	00eb      	lsls	r3, r5, #3
 8008a02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008a06:	00e2      	lsls	r2, r4, #3
 8008a08:	4614      	mov	r4, r2
 8008a0a:	461d      	mov	r5, r3
 8008a0c:	4643      	mov	r3, r8
 8008a0e:	18e3      	adds	r3, r4, r3
 8008a10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008a14:	464b      	mov	r3, r9
 8008a16:	eb45 0303 	adc.w	r3, r5, r3
 8008a1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	2200      	movs	r2, #0
 8008a26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008a2a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008a2e:	f04f 0200 	mov.w	r2, #0
 8008a32:	f04f 0300 	mov.w	r3, #0
 8008a36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008a3a:	4629      	mov	r1, r5
 8008a3c:	008b      	lsls	r3, r1, #2
 8008a3e:	4621      	mov	r1, r4
 8008a40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008a44:	4621      	mov	r1, r4
 8008a46:	008a      	lsls	r2, r1, #2
 8008a48:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008a4c:	f7f8 f92c 	bl	8000ca8 <__aeabi_uldivmod>
 8008a50:	4602      	mov	r2, r0
 8008a52:	460b      	mov	r3, r1
 8008a54:	4b60      	ldr	r3, [pc, #384]	; (8008bd8 <UART_SetConfig+0x4e4>)
 8008a56:	fba3 2302 	umull	r2, r3, r3, r2
 8008a5a:	095b      	lsrs	r3, r3, #5
 8008a5c:	011c      	lsls	r4, r3, #4
 8008a5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a62:	2200      	movs	r2, #0
 8008a64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008a68:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008a6c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008a70:	4642      	mov	r2, r8
 8008a72:	464b      	mov	r3, r9
 8008a74:	1891      	adds	r1, r2, r2
 8008a76:	61b9      	str	r1, [r7, #24]
 8008a78:	415b      	adcs	r3, r3
 8008a7a:	61fb      	str	r3, [r7, #28]
 8008a7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008a80:	4641      	mov	r1, r8
 8008a82:	1851      	adds	r1, r2, r1
 8008a84:	6139      	str	r1, [r7, #16]
 8008a86:	4649      	mov	r1, r9
 8008a88:	414b      	adcs	r3, r1
 8008a8a:	617b      	str	r3, [r7, #20]
 8008a8c:	f04f 0200 	mov.w	r2, #0
 8008a90:	f04f 0300 	mov.w	r3, #0
 8008a94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008a98:	4659      	mov	r1, fp
 8008a9a:	00cb      	lsls	r3, r1, #3
 8008a9c:	4651      	mov	r1, sl
 8008a9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008aa2:	4651      	mov	r1, sl
 8008aa4:	00ca      	lsls	r2, r1, #3
 8008aa6:	4610      	mov	r0, r2
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	4603      	mov	r3, r0
 8008aac:	4642      	mov	r2, r8
 8008aae:	189b      	adds	r3, r3, r2
 8008ab0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008ab4:	464b      	mov	r3, r9
 8008ab6:	460a      	mov	r2, r1
 8008ab8:	eb42 0303 	adc.w	r3, r2, r3
 8008abc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	67bb      	str	r3, [r7, #120]	; 0x78
 8008aca:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008acc:	f04f 0200 	mov.w	r2, #0
 8008ad0:	f04f 0300 	mov.w	r3, #0
 8008ad4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008ad8:	4649      	mov	r1, r9
 8008ada:	008b      	lsls	r3, r1, #2
 8008adc:	4641      	mov	r1, r8
 8008ade:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ae2:	4641      	mov	r1, r8
 8008ae4:	008a      	lsls	r2, r1, #2
 8008ae6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008aea:	f7f8 f8dd 	bl	8000ca8 <__aeabi_uldivmod>
 8008aee:	4602      	mov	r2, r0
 8008af0:	460b      	mov	r3, r1
 8008af2:	4611      	mov	r1, r2
 8008af4:	4b38      	ldr	r3, [pc, #224]	; (8008bd8 <UART_SetConfig+0x4e4>)
 8008af6:	fba3 2301 	umull	r2, r3, r3, r1
 8008afa:	095b      	lsrs	r3, r3, #5
 8008afc:	2264      	movs	r2, #100	; 0x64
 8008afe:	fb02 f303 	mul.w	r3, r2, r3
 8008b02:	1acb      	subs	r3, r1, r3
 8008b04:	011b      	lsls	r3, r3, #4
 8008b06:	3332      	adds	r3, #50	; 0x32
 8008b08:	4a33      	ldr	r2, [pc, #204]	; (8008bd8 <UART_SetConfig+0x4e4>)
 8008b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b0e:	095b      	lsrs	r3, r3, #5
 8008b10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b14:	441c      	add	r4, r3
 8008b16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	673b      	str	r3, [r7, #112]	; 0x70
 8008b1e:	677a      	str	r2, [r7, #116]	; 0x74
 8008b20:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008b24:	4642      	mov	r2, r8
 8008b26:	464b      	mov	r3, r9
 8008b28:	1891      	adds	r1, r2, r2
 8008b2a:	60b9      	str	r1, [r7, #8]
 8008b2c:	415b      	adcs	r3, r3
 8008b2e:	60fb      	str	r3, [r7, #12]
 8008b30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008b34:	4641      	mov	r1, r8
 8008b36:	1851      	adds	r1, r2, r1
 8008b38:	6039      	str	r1, [r7, #0]
 8008b3a:	4649      	mov	r1, r9
 8008b3c:	414b      	adcs	r3, r1
 8008b3e:	607b      	str	r3, [r7, #4]
 8008b40:	f04f 0200 	mov.w	r2, #0
 8008b44:	f04f 0300 	mov.w	r3, #0
 8008b48:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008b4c:	4659      	mov	r1, fp
 8008b4e:	00cb      	lsls	r3, r1, #3
 8008b50:	4651      	mov	r1, sl
 8008b52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b56:	4651      	mov	r1, sl
 8008b58:	00ca      	lsls	r2, r1, #3
 8008b5a:	4610      	mov	r0, r2
 8008b5c:	4619      	mov	r1, r3
 8008b5e:	4603      	mov	r3, r0
 8008b60:	4642      	mov	r2, r8
 8008b62:	189b      	adds	r3, r3, r2
 8008b64:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b66:	464b      	mov	r3, r9
 8008b68:	460a      	mov	r2, r1
 8008b6a:	eb42 0303 	adc.w	r3, r2, r3
 8008b6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	2200      	movs	r2, #0
 8008b78:	663b      	str	r3, [r7, #96]	; 0x60
 8008b7a:	667a      	str	r2, [r7, #100]	; 0x64
 8008b7c:	f04f 0200 	mov.w	r2, #0
 8008b80:	f04f 0300 	mov.w	r3, #0
 8008b84:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008b88:	4649      	mov	r1, r9
 8008b8a:	008b      	lsls	r3, r1, #2
 8008b8c:	4641      	mov	r1, r8
 8008b8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b92:	4641      	mov	r1, r8
 8008b94:	008a      	lsls	r2, r1, #2
 8008b96:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008b9a:	f7f8 f885 	bl	8000ca8 <__aeabi_uldivmod>
 8008b9e:	4602      	mov	r2, r0
 8008ba0:	460b      	mov	r3, r1
 8008ba2:	4b0d      	ldr	r3, [pc, #52]	; (8008bd8 <UART_SetConfig+0x4e4>)
 8008ba4:	fba3 1302 	umull	r1, r3, r3, r2
 8008ba8:	095b      	lsrs	r3, r3, #5
 8008baa:	2164      	movs	r1, #100	; 0x64
 8008bac:	fb01 f303 	mul.w	r3, r1, r3
 8008bb0:	1ad3      	subs	r3, r2, r3
 8008bb2:	011b      	lsls	r3, r3, #4
 8008bb4:	3332      	adds	r3, #50	; 0x32
 8008bb6:	4a08      	ldr	r2, [pc, #32]	; (8008bd8 <UART_SetConfig+0x4e4>)
 8008bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8008bbc:	095b      	lsrs	r3, r3, #5
 8008bbe:	f003 020f 	and.w	r2, r3, #15
 8008bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4422      	add	r2, r4
 8008bca:	609a      	str	r2, [r3, #8]
}
 8008bcc:	bf00      	nop
 8008bce:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008bd8:	51eb851f 	.word	0x51eb851f

08008bdc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008bdc:	b084      	sub	sp, #16
 8008bde:	b580      	push	{r7, lr}
 8008be0:	b084      	sub	sp, #16
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	6078      	str	r0, [r7, #4]
 8008be6:	f107 001c 	add.w	r0, r7, #28
 8008bea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008bee:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	d123      	bne.n	8008c3e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bfa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	68db      	ldr	r3, [r3, #12]
 8008c06:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008c0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	68db      	ldr	r3, [r3, #12]
 8008c16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008c1e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	d105      	bne.n	8008c32 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	68db      	ldr	r3, [r3, #12]
 8008c2a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 faa0 	bl	8009178 <USB_CoreReset>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	73fb      	strb	r3, [r7, #15]
 8008c3c:	e01b      	b.n	8008c76 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	68db      	ldr	r3, [r3, #12]
 8008c42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 fa94 	bl	8009178 <USB_CoreReset>
 8008c50:	4603      	mov	r3, r0
 8008c52:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008c54:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d106      	bne.n	8008c6a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c60:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	639a      	str	r2, [r3, #56]	; 0x38
 8008c68:	e005      	b.n	8008c76 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c6e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008c76:	7fbb      	ldrb	r3, [r7, #30]
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d10b      	bne.n	8008c94 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	f043 0206 	orr.w	r2, r3, #6
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	f043 0220 	orr.w	r2, r3, #32
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3710      	adds	r7, #16
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ca0:	b004      	add	sp, #16
 8008ca2:	4770      	bx	lr

08008ca4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b083      	sub	sp, #12
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	f023 0201 	bic.w	r2, r3, #1
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008cb8:	2300      	movs	r3, #0
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	370c      	adds	r7, #12
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc4:	4770      	bx	lr

08008cc6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008cc6:	b580      	push	{r7, lr}
 8008cc8:	b084      	sub	sp, #16
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	6078      	str	r0, [r7, #4]
 8008cce:	460b      	mov	r3, r1
 8008cd0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	68db      	ldr	r3, [r3, #12]
 8008cda:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008ce2:	78fb      	ldrb	r3, [r7, #3]
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	d115      	bne.n	8008d14 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	68db      	ldr	r3, [r3, #12]
 8008cec:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008cf4:	200a      	movs	r0, #10
 8008cf6:	f7fa fed1 	bl	8003a9c <HAL_Delay>
      ms += 10U;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	330a      	adds	r3, #10
 8008cfe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f000 fa2b 	bl	800915c <USB_GetMode>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d01e      	beq.n	8008d4a <USB_SetCurrentMode+0x84>
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2bc7      	cmp	r3, #199	; 0xc7
 8008d10:	d9f0      	bls.n	8008cf4 <USB_SetCurrentMode+0x2e>
 8008d12:	e01a      	b.n	8008d4a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008d14:	78fb      	ldrb	r3, [r7, #3]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d115      	bne.n	8008d46 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	68db      	ldr	r3, [r3, #12]
 8008d1e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008d26:	200a      	movs	r0, #10
 8008d28:	f7fa feb8 	bl	8003a9c <HAL_Delay>
      ms += 10U;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	330a      	adds	r3, #10
 8008d30:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 fa12 	bl	800915c <USB_GetMode>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d005      	beq.n	8008d4a <USB_SetCurrentMode+0x84>
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2bc7      	cmp	r3, #199	; 0xc7
 8008d42:	d9f0      	bls.n	8008d26 <USB_SetCurrentMode+0x60>
 8008d44:	e001      	b.n	8008d4a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008d46:	2301      	movs	r3, #1
 8008d48:	e005      	b.n	8008d56 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2bc8      	cmp	r3, #200	; 0xc8
 8008d4e:	d101      	bne.n	8008d54 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008d50:	2301      	movs	r3, #1
 8008d52:	e000      	b.n	8008d56 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008d54:	2300      	movs	r3, #0
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3710      	adds	r7, #16
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
	...

08008d60 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008d60:	b084      	sub	sp, #16
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b086      	sub	sp, #24
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
 8008d6a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008d6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008d72:	2300      	movs	r3, #0
 8008d74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	613b      	str	r3, [r7, #16]
 8008d7e:	e009      	b.n	8008d94 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	3340      	adds	r3, #64	; 0x40
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	4413      	add	r3, r2
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	3301      	adds	r3, #1
 8008d92:	613b      	str	r3, [r7, #16]
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	2b0e      	cmp	r3, #14
 8008d98:	d9f2      	bls.n	8008d80 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008d9a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d11c      	bne.n	8008ddc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	68fa      	ldr	r2, [r7, #12]
 8008dac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008db0:	f043 0302 	orr.w	r3, r3, #2
 8008db4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dd2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	639a      	str	r2, [r3, #56]	; 0x38
 8008dda:	e00b      	b.n	8008df4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008de0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dec:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008e00:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d10d      	bne.n	8008e24 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008e08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d104      	bne.n	8008e1a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008e10:	2100      	movs	r1, #0
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 f968 	bl	80090e8 <USB_SetDevSpeed>
 8008e18:	e008      	b.n	8008e2c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008e1a:	2101      	movs	r1, #1
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f000 f963 	bl	80090e8 <USB_SetDevSpeed>
 8008e22:	e003      	b.n	8008e2c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008e24:	2103      	movs	r1, #3
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 f95e 	bl	80090e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008e2c:	2110      	movs	r1, #16
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 f8fa 	bl	8009028 <USB_FlushTxFifo>
 8008e34:	4603      	mov	r3, r0
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d001      	beq.n	8008e3e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 f924 	bl	800908c <USB_FlushRxFifo>
 8008e44:	4603      	mov	r3, r0
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d001      	beq.n	8008e4e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e54:	461a      	mov	r2, r3
 8008e56:	2300      	movs	r3, #0
 8008e58:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e60:	461a      	mov	r2, r3
 8008e62:	2300      	movs	r3, #0
 8008e64:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	2300      	movs	r3, #0
 8008e70:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e72:	2300      	movs	r3, #0
 8008e74:	613b      	str	r3, [r7, #16]
 8008e76:	e043      	b.n	8008f00 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	015a      	lsls	r2, r3, #5
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	4413      	add	r3, r2
 8008e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e8e:	d118      	bne.n	8008ec2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d10a      	bne.n	8008eac <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	015a      	lsls	r2, r3, #5
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	4413      	add	r3, r2
 8008e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008ea8:	6013      	str	r3, [r2, #0]
 8008eaa:	e013      	b.n	8008ed4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	015a      	lsls	r2, r3, #5
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	4413      	add	r3, r2
 8008eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eb8:	461a      	mov	r2, r3
 8008eba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008ebe:	6013      	str	r3, [r2, #0]
 8008ec0:	e008      	b.n	8008ed4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	015a      	lsls	r2, r3, #5
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	4413      	add	r3, r2
 8008eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ece:	461a      	mov	r2, r3
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	015a      	lsls	r2, r3, #5
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	4413      	add	r3, r2
 8008edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	015a      	lsls	r2, r3, #5
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	4413      	add	r3, r2
 8008eee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008ef8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	3301      	adds	r3, #1
 8008efe:	613b      	str	r3, [r7, #16]
 8008f00:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008f04:	461a      	mov	r2, r3
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d3b5      	bcc.n	8008e78 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	613b      	str	r3, [r7, #16]
 8008f10:	e043      	b.n	8008f9a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	015a      	lsls	r2, r3, #5
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	4413      	add	r3, r2
 8008f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f28:	d118      	bne.n	8008f5c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d10a      	bne.n	8008f46 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	015a      	lsls	r2, r3, #5
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	4413      	add	r3, r2
 8008f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008f42:	6013      	str	r3, [r2, #0]
 8008f44:	e013      	b.n	8008f6e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	015a      	lsls	r2, r3, #5
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	4413      	add	r3, r2
 8008f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f52:	461a      	mov	r2, r3
 8008f54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008f58:	6013      	str	r3, [r2, #0]
 8008f5a:	e008      	b.n	8008f6e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	015a      	lsls	r2, r3, #5
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	4413      	add	r3, r2
 8008f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f68:	461a      	mov	r2, r3
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	015a      	lsls	r2, r3, #5
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	4413      	add	r3, r2
 8008f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f7a:	461a      	mov	r2, r3
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	015a      	lsls	r2, r3, #5
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	4413      	add	r3, r2
 8008f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008f92:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	3301      	adds	r3, #1
 8008f98:	613b      	str	r3, [r7, #16]
 8008f9a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d3b5      	bcc.n	8008f12 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fac:	691b      	ldr	r3, [r3, #16]
 8008fae:	68fa      	ldr	r2, [r7, #12]
 8008fb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fb8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008fc6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008fc8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d105      	bne.n	8008fdc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	699b      	ldr	r3, [r3, #24]
 8008fd4:	f043 0210 	orr.w	r2, r3, #16
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	699a      	ldr	r2, [r3, #24]
 8008fe0:	4b10      	ldr	r3, [pc, #64]	; (8009024 <USB_DevInit+0x2c4>)
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008fe8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d005      	beq.n	8008ffc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	699b      	ldr	r3, [r3, #24]
 8008ff4:	f043 0208 	orr.w	r2, r3, #8
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008ffc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009000:	2b01      	cmp	r3, #1
 8009002:	d107      	bne.n	8009014 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	699b      	ldr	r3, [r3, #24]
 8009008:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800900c:	f043 0304 	orr.w	r3, r3, #4
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009014:	7dfb      	ldrb	r3, [r7, #23]
}
 8009016:	4618      	mov	r0, r3
 8009018:	3718      	adds	r7, #24
 800901a:	46bd      	mov	sp, r7
 800901c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009020:	b004      	add	sp, #16
 8009022:	4770      	bx	lr
 8009024:	803c3800 	.word	0x803c3800

08009028 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009028:	b480      	push	{r7}
 800902a:	b085      	sub	sp, #20
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009032:	2300      	movs	r3, #0
 8009034:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	3301      	adds	r3, #1
 800903a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009042:	d901      	bls.n	8009048 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009044:	2303      	movs	r3, #3
 8009046:	e01b      	b.n	8009080 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	691b      	ldr	r3, [r3, #16]
 800904c:	2b00      	cmp	r3, #0
 800904e:	daf2      	bge.n	8009036 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009050:	2300      	movs	r3, #0
 8009052:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	019b      	lsls	r3, r3, #6
 8009058:	f043 0220 	orr.w	r2, r3, #32
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	3301      	adds	r3, #1
 8009064:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800906c:	d901      	bls.n	8009072 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800906e:	2303      	movs	r3, #3
 8009070:	e006      	b.n	8009080 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	691b      	ldr	r3, [r3, #16]
 8009076:	f003 0320 	and.w	r3, r3, #32
 800907a:	2b20      	cmp	r3, #32
 800907c:	d0f0      	beq.n	8009060 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800907e:	2300      	movs	r3, #0
}
 8009080:	4618      	mov	r0, r3
 8009082:	3714      	adds	r7, #20
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr

0800908c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800908c:	b480      	push	{r7}
 800908e:	b085      	sub	sp, #20
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009094:	2300      	movs	r3, #0
 8009096:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	3301      	adds	r3, #1
 800909c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80090a4:	d901      	bls.n	80090aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80090a6:	2303      	movs	r3, #3
 80090a8:	e018      	b.n	80090dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	691b      	ldr	r3, [r3, #16]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	daf2      	bge.n	8009098 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80090b2:	2300      	movs	r3, #0
 80090b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2210      	movs	r2, #16
 80090ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	3301      	adds	r3, #1
 80090c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80090c8:	d901      	bls.n	80090ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80090ca:	2303      	movs	r3, #3
 80090cc:	e006      	b.n	80090dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	691b      	ldr	r3, [r3, #16]
 80090d2:	f003 0310 	and.w	r3, r3, #16
 80090d6:	2b10      	cmp	r3, #16
 80090d8:	d0f0      	beq.n	80090bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80090da:	2300      	movs	r3, #0
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3714      	adds	r7, #20
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr

080090e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b085      	sub	sp, #20
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	460b      	mov	r3, r1
 80090f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	78fb      	ldrb	r3, [r7, #3]
 8009102:	68f9      	ldr	r1, [r7, #12]
 8009104:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009108:	4313      	orrs	r3, r2
 800910a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800910c:	2300      	movs	r3, #0
}
 800910e:	4618      	mov	r0, r3
 8009110:	3714      	adds	r7, #20
 8009112:	46bd      	mov	sp, r7
 8009114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009118:	4770      	bx	lr

0800911a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800911a:	b480      	push	{r7}
 800911c:	b085      	sub	sp, #20
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	68fa      	ldr	r2, [r7, #12]
 8009130:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009134:	f023 0303 	bic.w	r3, r3, #3
 8009138:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	68fa      	ldr	r2, [r7, #12]
 8009144:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009148:	f043 0302 	orr.w	r3, r3, #2
 800914c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800914e:	2300      	movs	r3, #0
}
 8009150:	4618      	mov	r0, r3
 8009152:	3714      	adds	r7, #20
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr

0800915c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800915c:	b480      	push	{r7}
 800915e:	b083      	sub	sp, #12
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	695b      	ldr	r3, [r3, #20]
 8009168:	f003 0301 	and.w	r3, r3, #1
}
 800916c:	4618      	mov	r0, r3
 800916e:	370c      	adds	r7, #12
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr

08009178 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009178:	b480      	push	{r7}
 800917a:	b085      	sub	sp, #20
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009180:	2300      	movs	r3, #0
 8009182:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	3301      	adds	r3, #1
 8009188:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009190:	d901      	bls.n	8009196 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009192:	2303      	movs	r3, #3
 8009194:	e01b      	b.n	80091ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	691b      	ldr	r3, [r3, #16]
 800919a:	2b00      	cmp	r3, #0
 800919c:	daf2      	bge.n	8009184 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800919e:	2300      	movs	r3, #0
 80091a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	691b      	ldr	r3, [r3, #16]
 80091a6:	f043 0201 	orr.w	r2, r3, #1
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	3301      	adds	r3, #1
 80091b2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80091ba:	d901      	bls.n	80091c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80091bc:	2303      	movs	r3, #3
 80091be:	e006      	b.n	80091ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	691b      	ldr	r3, [r3, #16]
 80091c4:	f003 0301 	and.w	r3, r3, #1
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d0f0      	beq.n	80091ae <USB_CoreReset+0x36>

  return HAL_OK;
 80091cc:	2300      	movs	r3, #0
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3714      	adds	r7, #20
 80091d2:	46bd      	mov	sp, r7
 80091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d8:	4770      	bx	lr

080091da <__cvt>:
 80091da:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091de:	ec55 4b10 	vmov	r4, r5, d0
 80091e2:	2d00      	cmp	r5, #0
 80091e4:	460e      	mov	r6, r1
 80091e6:	4619      	mov	r1, r3
 80091e8:	462b      	mov	r3, r5
 80091ea:	bfbb      	ittet	lt
 80091ec:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80091f0:	461d      	movlt	r5, r3
 80091f2:	2300      	movge	r3, #0
 80091f4:	232d      	movlt	r3, #45	; 0x2d
 80091f6:	700b      	strb	r3, [r1, #0]
 80091f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091fa:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80091fe:	4691      	mov	r9, r2
 8009200:	f023 0820 	bic.w	r8, r3, #32
 8009204:	bfbc      	itt	lt
 8009206:	4622      	movlt	r2, r4
 8009208:	4614      	movlt	r4, r2
 800920a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800920e:	d005      	beq.n	800921c <__cvt+0x42>
 8009210:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009214:	d100      	bne.n	8009218 <__cvt+0x3e>
 8009216:	3601      	adds	r6, #1
 8009218:	2102      	movs	r1, #2
 800921a:	e000      	b.n	800921e <__cvt+0x44>
 800921c:	2103      	movs	r1, #3
 800921e:	ab03      	add	r3, sp, #12
 8009220:	9301      	str	r3, [sp, #4]
 8009222:	ab02      	add	r3, sp, #8
 8009224:	9300      	str	r3, [sp, #0]
 8009226:	ec45 4b10 	vmov	d0, r4, r5
 800922a:	4653      	mov	r3, sl
 800922c:	4632      	mov	r2, r6
 800922e:	f001 f93f 	bl	800a4b0 <_dtoa_r>
 8009232:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009236:	4607      	mov	r7, r0
 8009238:	d102      	bne.n	8009240 <__cvt+0x66>
 800923a:	f019 0f01 	tst.w	r9, #1
 800923e:	d022      	beq.n	8009286 <__cvt+0xac>
 8009240:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009244:	eb07 0906 	add.w	r9, r7, r6
 8009248:	d110      	bne.n	800926c <__cvt+0x92>
 800924a:	783b      	ldrb	r3, [r7, #0]
 800924c:	2b30      	cmp	r3, #48	; 0x30
 800924e:	d10a      	bne.n	8009266 <__cvt+0x8c>
 8009250:	2200      	movs	r2, #0
 8009252:	2300      	movs	r3, #0
 8009254:	4620      	mov	r0, r4
 8009256:	4629      	mov	r1, r5
 8009258:	f7f7 fc46 	bl	8000ae8 <__aeabi_dcmpeq>
 800925c:	b918      	cbnz	r0, 8009266 <__cvt+0x8c>
 800925e:	f1c6 0601 	rsb	r6, r6, #1
 8009262:	f8ca 6000 	str.w	r6, [sl]
 8009266:	f8da 3000 	ldr.w	r3, [sl]
 800926a:	4499      	add	r9, r3
 800926c:	2200      	movs	r2, #0
 800926e:	2300      	movs	r3, #0
 8009270:	4620      	mov	r0, r4
 8009272:	4629      	mov	r1, r5
 8009274:	f7f7 fc38 	bl	8000ae8 <__aeabi_dcmpeq>
 8009278:	b108      	cbz	r0, 800927e <__cvt+0xa4>
 800927a:	f8cd 900c 	str.w	r9, [sp, #12]
 800927e:	2230      	movs	r2, #48	; 0x30
 8009280:	9b03      	ldr	r3, [sp, #12]
 8009282:	454b      	cmp	r3, r9
 8009284:	d307      	bcc.n	8009296 <__cvt+0xbc>
 8009286:	9b03      	ldr	r3, [sp, #12]
 8009288:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800928a:	1bdb      	subs	r3, r3, r7
 800928c:	4638      	mov	r0, r7
 800928e:	6013      	str	r3, [r2, #0]
 8009290:	b004      	add	sp, #16
 8009292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009296:	1c59      	adds	r1, r3, #1
 8009298:	9103      	str	r1, [sp, #12]
 800929a:	701a      	strb	r2, [r3, #0]
 800929c:	e7f0      	b.n	8009280 <__cvt+0xa6>

0800929e <__exponent>:
 800929e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092a0:	4603      	mov	r3, r0
 80092a2:	2900      	cmp	r1, #0
 80092a4:	bfb8      	it	lt
 80092a6:	4249      	neglt	r1, r1
 80092a8:	f803 2b02 	strb.w	r2, [r3], #2
 80092ac:	bfb4      	ite	lt
 80092ae:	222d      	movlt	r2, #45	; 0x2d
 80092b0:	222b      	movge	r2, #43	; 0x2b
 80092b2:	2909      	cmp	r1, #9
 80092b4:	7042      	strb	r2, [r0, #1]
 80092b6:	dd2a      	ble.n	800930e <__exponent+0x70>
 80092b8:	f10d 0207 	add.w	r2, sp, #7
 80092bc:	4617      	mov	r7, r2
 80092be:	260a      	movs	r6, #10
 80092c0:	4694      	mov	ip, r2
 80092c2:	fb91 f5f6 	sdiv	r5, r1, r6
 80092c6:	fb06 1415 	mls	r4, r6, r5, r1
 80092ca:	3430      	adds	r4, #48	; 0x30
 80092cc:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80092d0:	460c      	mov	r4, r1
 80092d2:	2c63      	cmp	r4, #99	; 0x63
 80092d4:	f102 32ff 	add.w	r2, r2, #4294967295
 80092d8:	4629      	mov	r1, r5
 80092da:	dcf1      	bgt.n	80092c0 <__exponent+0x22>
 80092dc:	3130      	adds	r1, #48	; 0x30
 80092de:	f1ac 0402 	sub.w	r4, ip, #2
 80092e2:	f802 1c01 	strb.w	r1, [r2, #-1]
 80092e6:	1c41      	adds	r1, r0, #1
 80092e8:	4622      	mov	r2, r4
 80092ea:	42ba      	cmp	r2, r7
 80092ec:	d30a      	bcc.n	8009304 <__exponent+0x66>
 80092ee:	f10d 0209 	add.w	r2, sp, #9
 80092f2:	eba2 020c 	sub.w	r2, r2, ip
 80092f6:	42bc      	cmp	r4, r7
 80092f8:	bf88      	it	hi
 80092fa:	2200      	movhi	r2, #0
 80092fc:	4413      	add	r3, r2
 80092fe:	1a18      	subs	r0, r3, r0
 8009300:	b003      	add	sp, #12
 8009302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009304:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009308:	f801 5f01 	strb.w	r5, [r1, #1]!
 800930c:	e7ed      	b.n	80092ea <__exponent+0x4c>
 800930e:	2330      	movs	r3, #48	; 0x30
 8009310:	3130      	adds	r1, #48	; 0x30
 8009312:	7083      	strb	r3, [r0, #2]
 8009314:	70c1      	strb	r1, [r0, #3]
 8009316:	1d03      	adds	r3, r0, #4
 8009318:	e7f1      	b.n	80092fe <__exponent+0x60>
	...

0800931c <_printf_float>:
 800931c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009320:	ed2d 8b02 	vpush	{d8}
 8009324:	b08d      	sub	sp, #52	; 0x34
 8009326:	460c      	mov	r4, r1
 8009328:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800932c:	4616      	mov	r6, r2
 800932e:	461f      	mov	r7, r3
 8009330:	4605      	mov	r5, r0
 8009332:	f000 ffb7 	bl	800a2a4 <_localeconv_r>
 8009336:	f8d0 a000 	ldr.w	sl, [r0]
 800933a:	4650      	mov	r0, sl
 800933c:	f7f6 ffa8 	bl	8000290 <strlen>
 8009340:	2300      	movs	r3, #0
 8009342:	930a      	str	r3, [sp, #40]	; 0x28
 8009344:	6823      	ldr	r3, [r4, #0]
 8009346:	9305      	str	r3, [sp, #20]
 8009348:	f8d8 3000 	ldr.w	r3, [r8]
 800934c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009350:	3307      	adds	r3, #7
 8009352:	f023 0307 	bic.w	r3, r3, #7
 8009356:	f103 0208 	add.w	r2, r3, #8
 800935a:	f8c8 2000 	str.w	r2, [r8]
 800935e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009362:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009366:	9307      	str	r3, [sp, #28]
 8009368:	f8cd 8018 	str.w	r8, [sp, #24]
 800936c:	ee08 0a10 	vmov	s16, r0
 8009370:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009374:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009378:	4b9e      	ldr	r3, [pc, #632]	; (80095f4 <_printf_float+0x2d8>)
 800937a:	f04f 32ff 	mov.w	r2, #4294967295
 800937e:	f7f7 fbe5 	bl	8000b4c <__aeabi_dcmpun>
 8009382:	bb88      	cbnz	r0, 80093e8 <_printf_float+0xcc>
 8009384:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009388:	4b9a      	ldr	r3, [pc, #616]	; (80095f4 <_printf_float+0x2d8>)
 800938a:	f04f 32ff 	mov.w	r2, #4294967295
 800938e:	f7f7 fbbf 	bl	8000b10 <__aeabi_dcmple>
 8009392:	bb48      	cbnz	r0, 80093e8 <_printf_float+0xcc>
 8009394:	2200      	movs	r2, #0
 8009396:	2300      	movs	r3, #0
 8009398:	4640      	mov	r0, r8
 800939a:	4649      	mov	r1, r9
 800939c:	f7f7 fbae 	bl	8000afc <__aeabi_dcmplt>
 80093a0:	b110      	cbz	r0, 80093a8 <_printf_float+0x8c>
 80093a2:	232d      	movs	r3, #45	; 0x2d
 80093a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093a8:	4a93      	ldr	r2, [pc, #588]	; (80095f8 <_printf_float+0x2dc>)
 80093aa:	4b94      	ldr	r3, [pc, #592]	; (80095fc <_printf_float+0x2e0>)
 80093ac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80093b0:	bf94      	ite	ls
 80093b2:	4690      	movls	r8, r2
 80093b4:	4698      	movhi	r8, r3
 80093b6:	2303      	movs	r3, #3
 80093b8:	6123      	str	r3, [r4, #16]
 80093ba:	9b05      	ldr	r3, [sp, #20]
 80093bc:	f023 0304 	bic.w	r3, r3, #4
 80093c0:	6023      	str	r3, [r4, #0]
 80093c2:	f04f 0900 	mov.w	r9, #0
 80093c6:	9700      	str	r7, [sp, #0]
 80093c8:	4633      	mov	r3, r6
 80093ca:	aa0b      	add	r2, sp, #44	; 0x2c
 80093cc:	4621      	mov	r1, r4
 80093ce:	4628      	mov	r0, r5
 80093d0:	f000 f9da 	bl	8009788 <_printf_common>
 80093d4:	3001      	adds	r0, #1
 80093d6:	f040 8090 	bne.w	80094fa <_printf_float+0x1de>
 80093da:	f04f 30ff 	mov.w	r0, #4294967295
 80093de:	b00d      	add	sp, #52	; 0x34
 80093e0:	ecbd 8b02 	vpop	{d8}
 80093e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093e8:	4642      	mov	r2, r8
 80093ea:	464b      	mov	r3, r9
 80093ec:	4640      	mov	r0, r8
 80093ee:	4649      	mov	r1, r9
 80093f0:	f7f7 fbac 	bl	8000b4c <__aeabi_dcmpun>
 80093f4:	b140      	cbz	r0, 8009408 <_printf_float+0xec>
 80093f6:	464b      	mov	r3, r9
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	bfbc      	itt	lt
 80093fc:	232d      	movlt	r3, #45	; 0x2d
 80093fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009402:	4a7f      	ldr	r2, [pc, #508]	; (8009600 <_printf_float+0x2e4>)
 8009404:	4b7f      	ldr	r3, [pc, #508]	; (8009604 <_printf_float+0x2e8>)
 8009406:	e7d1      	b.n	80093ac <_printf_float+0x90>
 8009408:	6863      	ldr	r3, [r4, #4]
 800940a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800940e:	9206      	str	r2, [sp, #24]
 8009410:	1c5a      	adds	r2, r3, #1
 8009412:	d13f      	bne.n	8009494 <_printf_float+0x178>
 8009414:	2306      	movs	r3, #6
 8009416:	6063      	str	r3, [r4, #4]
 8009418:	9b05      	ldr	r3, [sp, #20]
 800941a:	6861      	ldr	r1, [r4, #4]
 800941c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009420:	2300      	movs	r3, #0
 8009422:	9303      	str	r3, [sp, #12]
 8009424:	ab0a      	add	r3, sp, #40	; 0x28
 8009426:	e9cd b301 	strd	fp, r3, [sp, #4]
 800942a:	ab09      	add	r3, sp, #36	; 0x24
 800942c:	ec49 8b10 	vmov	d0, r8, r9
 8009430:	9300      	str	r3, [sp, #0]
 8009432:	6022      	str	r2, [r4, #0]
 8009434:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009438:	4628      	mov	r0, r5
 800943a:	f7ff fece 	bl	80091da <__cvt>
 800943e:	9b06      	ldr	r3, [sp, #24]
 8009440:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009442:	2b47      	cmp	r3, #71	; 0x47
 8009444:	4680      	mov	r8, r0
 8009446:	d108      	bne.n	800945a <_printf_float+0x13e>
 8009448:	1cc8      	adds	r0, r1, #3
 800944a:	db02      	blt.n	8009452 <_printf_float+0x136>
 800944c:	6863      	ldr	r3, [r4, #4]
 800944e:	4299      	cmp	r1, r3
 8009450:	dd41      	ble.n	80094d6 <_printf_float+0x1ba>
 8009452:	f1ab 0302 	sub.w	r3, fp, #2
 8009456:	fa5f fb83 	uxtb.w	fp, r3
 800945a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800945e:	d820      	bhi.n	80094a2 <_printf_float+0x186>
 8009460:	3901      	subs	r1, #1
 8009462:	465a      	mov	r2, fp
 8009464:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009468:	9109      	str	r1, [sp, #36]	; 0x24
 800946a:	f7ff ff18 	bl	800929e <__exponent>
 800946e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009470:	1813      	adds	r3, r2, r0
 8009472:	2a01      	cmp	r2, #1
 8009474:	4681      	mov	r9, r0
 8009476:	6123      	str	r3, [r4, #16]
 8009478:	dc02      	bgt.n	8009480 <_printf_float+0x164>
 800947a:	6822      	ldr	r2, [r4, #0]
 800947c:	07d2      	lsls	r2, r2, #31
 800947e:	d501      	bpl.n	8009484 <_printf_float+0x168>
 8009480:	3301      	adds	r3, #1
 8009482:	6123      	str	r3, [r4, #16]
 8009484:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009488:	2b00      	cmp	r3, #0
 800948a:	d09c      	beq.n	80093c6 <_printf_float+0xaa>
 800948c:	232d      	movs	r3, #45	; 0x2d
 800948e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009492:	e798      	b.n	80093c6 <_printf_float+0xaa>
 8009494:	9a06      	ldr	r2, [sp, #24]
 8009496:	2a47      	cmp	r2, #71	; 0x47
 8009498:	d1be      	bne.n	8009418 <_printf_float+0xfc>
 800949a:	2b00      	cmp	r3, #0
 800949c:	d1bc      	bne.n	8009418 <_printf_float+0xfc>
 800949e:	2301      	movs	r3, #1
 80094a0:	e7b9      	b.n	8009416 <_printf_float+0xfa>
 80094a2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80094a6:	d118      	bne.n	80094da <_printf_float+0x1be>
 80094a8:	2900      	cmp	r1, #0
 80094aa:	6863      	ldr	r3, [r4, #4]
 80094ac:	dd0b      	ble.n	80094c6 <_printf_float+0x1aa>
 80094ae:	6121      	str	r1, [r4, #16]
 80094b0:	b913      	cbnz	r3, 80094b8 <_printf_float+0x19c>
 80094b2:	6822      	ldr	r2, [r4, #0]
 80094b4:	07d0      	lsls	r0, r2, #31
 80094b6:	d502      	bpl.n	80094be <_printf_float+0x1a2>
 80094b8:	3301      	adds	r3, #1
 80094ba:	440b      	add	r3, r1
 80094bc:	6123      	str	r3, [r4, #16]
 80094be:	65a1      	str	r1, [r4, #88]	; 0x58
 80094c0:	f04f 0900 	mov.w	r9, #0
 80094c4:	e7de      	b.n	8009484 <_printf_float+0x168>
 80094c6:	b913      	cbnz	r3, 80094ce <_printf_float+0x1b2>
 80094c8:	6822      	ldr	r2, [r4, #0]
 80094ca:	07d2      	lsls	r2, r2, #31
 80094cc:	d501      	bpl.n	80094d2 <_printf_float+0x1b6>
 80094ce:	3302      	adds	r3, #2
 80094d0:	e7f4      	b.n	80094bc <_printf_float+0x1a0>
 80094d2:	2301      	movs	r3, #1
 80094d4:	e7f2      	b.n	80094bc <_printf_float+0x1a0>
 80094d6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80094da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094dc:	4299      	cmp	r1, r3
 80094de:	db05      	blt.n	80094ec <_printf_float+0x1d0>
 80094e0:	6823      	ldr	r3, [r4, #0]
 80094e2:	6121      	str	r1, [r4, #16]
 80094e4:	07d8      	lsls	r0, r3, #31
 80094e6:	d5ea      	bpl.n	80094be <_printf_float+0x1a2>
 80094e8:	1c4b      	adds	r3, r1, #1
 80094ea:	e7e7      	b.n	80094bc <_printf_float+0x1a0>
 80094ec:	2900      	cmp	r1, #0
 80094ee:	bfd4      	ite	le
 80094f0:	f1c1 0202 	rsble	r2, r1, #2
 80094f4:	2201      	movgt	r2, #1
 80094f6:	4413      	add	r3, r2
 80094f8:	e7e0      	b.n	80094bc <_printf_float+0x1a0>
 80094fa:	6823      	ldr	r3, [r4, #0]
 80094fc:	055a      	lsls	r2, r3, #21
 80094fe:	d407      	bmi.n	8009510 <_printf_float+0x1f4>
 8009500:	6923      	ldr	r3, [r4, #16]
 8009502:	4642      	mov	r2, r8
 8009504:	4631      	mov	r1, r6
 8009506:	4628      	mov	r0, r5
 8009508:	47b8      	blx	r7
 800950a:	3001      	adds	r0, #1
 800950c:	d12c      	bne.n	8009568 <_printf_float+0x24c>
 800950e:	e764      	b.n	80093da <_printf_float+0xbe>
 8009510:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009514:	f240 80e0 	bls.w	80096d8 <_printf_float+0x3bc>
 8009518:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800951c:	2200      	movs	r2, #0
 800951e:	2300      	movs	r3, #0
 8009520:	f7f7 fae2 	bl	8000ae8 <__aeabi_dcmpeq>
 8009524:	2800      	cmp	r0, #0
 8009526:	d034      	beq.n	8009592 <_printf_float+0x276>
 8009528:	4a37      	ldr	r2, [pc, #220]	; (8009608 <_printf_float+0x2ec>)
 800952a:	2301      	movs	r3, #1
 800952c:	4631      	mov	r1, r6
 800952e:	4628      	mov	r0, r5
 8009530:	47b8      	blx	r7
 8009532:	3001      	adds	r0, #1
 8009534:	f43f af51 	beq.w	80093da <_printf_float+0xbe>
 8009538:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800953c:	429a      	cmp	r2, r3
 800953e:	db02      	blt.n	8009546 <_printf_float+0x22a>
 8009540:	6823      	ldr	r3, [r4, #0]
 8009542:	07d8      	lsls	r0, r3, #31
 8009544:	d510      	bpl.n	8009568 <_printf_float+0x24c>
 8009546:	ee18 3a10 	vmov	r3, s16
 800954a:	4652      	mov	r2, sl
 800954c:	4631      	mov	r1, r6
 800954e:	4628      	mov	r0, r5
 8009550:	47b8      	blx	r7
 8009552:	3001      	adds	r0, #1
 8009554:	f43f af41 	beq.w	80093da <_printf_float+0xbe>
 8009558:	f04f 0800 	mov.w	r8, #0
 800955c:	f104 091a 	add.w	r9, r4, #26
 8009560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009562:	3b01      	subs	r3, #1
 8009564:	4543      	cmp	r3, r8
 8009566:	dc09      	bgt.n	800957c <_printf_float+0x260>
 8009568:	6823      	ldr	r3, [r4, #0]
 800956a:	079b      	lsls	r3, r3, #30
 800956c:	f100 8107 	bmi.w	800977e <_printf_float+0x462>
 8009570:	68e0      	ldr	r0, [r4, #12]
 8009572:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009574:	4298      	cmp	r0, r3
 8009576:	bfb8      	it	lt
 8009578:	4618      	movlt	r0, r3
 800957a:	e730      	b.n	80093de <_printf_float+0xc2>
 800957c:	2301      	movs	r3, #1
 800957e:	464a      	mov	r2, r9
 8009580:	4631      	mov	r1, r6
 8009582:	4628      	mov	r0, r5
 8009584:	47b8      	blx	r7
 8009586:	3001      	adds	r0, #1
 8009588:	f43f af27 	beq.w	80093da <_printf_float+0xbe>
 800958c:	f108 0801 	add.w	r8, r8, #1
 8009590:	e7e6      	b.n	8009560 <_printf_float+0x244>
 8009592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009594:	2b00      	cmp	r3, #0
 8009596:	dc39      	bgt.n	800960c <_printf_float+0x2f0>
 8009598:	4a1b      	ldr	r2, [pc, #108]	; (8009608 <_printf_float+0x2ec>)
 800959a:	2301      	movs	r3, #1
 800959c:	4631      	mov	r1, r6
 800959e:	4628      	mov	r0, r5
 80095a0:	47b8      	blx	r7
 80095a2:	3001      	adds	r0, #1
 80095a4:	f43f af19 	beq.w	80093da <_printf_float+0xbe>
 80095a8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80095ac:	4313      	orrs	r3, r2
 80095ae:	d102      	bne.n	80095b6 <_printf_float+0x29a>
 80095b0:	6823      	ldr	r3, [r4, #0]
 80095b2:	07d9      	lsls	r1, r3, #31
 80095b4:	d5d8      	bpl.n	8009568 <_printf_float+0x24c>
 80095b6:	ee18 3a10 	vmov	r3, s16
 80095ba:	4652      	mov	r2, sl
 80095bc:	4631      	mov	r1, r6
 80095be:	4628      	mov	r0, r5
 80095c0:	47b8      	blx	r7
 80095c2:	3001      	adds	r0, #1
 80095c4:	f43f af09 	beq.w	80093da <_printf_float+0xbe>
 80095c8:	f04f 0900 	mov.w	r9, #0
 80095cc:	f104 0a1a 	add.w	sl, r4, #26
 80095d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095d2:	425b      	negs	r3, r3
 80095d4:	454b      	cmp	r3, r9
 80095d6:	dc01      	bgt.n	80095dc <_printf_float+0x2c0>
 80095d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095da:	e792      	b.n	8009502 <_printf_float+0x1e6>
 80095dc:	2301      	movs	r3, #1
 80095de:	4652      	mov	r2, sl
 80095e0:	4631      	mov	r1, r6
 80095e2:	4628      	mov	r0, r5
 80095e4:	47b8      	blx	r7
 80095e6:	3001      	adds	r0, #1
 80095e8:	f43f aef7 	beq.w	80093da <_printf_float+0xbe>
 80095ec:	f109 0901 	add.w	r9, r9, #1
 80095f0:	e7ee      	b.n	80095d0 <_printf_float+0x2b4>
 80095f2:	bf00      	nop
 80095f4:	7fefffff 	.word	0x7fefffff
 80095f8:	0800db5c 	.word	0x0800db5c
 80095fc:	0800db60 	.word	0x0800db60
 8009600:	0800db64 	.word	0x0800db64
 8009604:	0800db68 	.word	0x0800db68
 8009608:	0800db6c 	.word	0x0800db6c
 800960c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800960e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009610:	429a      	cmp	r2, r3
 8009612:	bfa8      	it	ge
 8009614:	461a      	movge	r2, r3
 8009616:	2a00      	cmp	r2, #0
 8009618:	4691      	mov	r9, r2
 800961a:	dc37      	bgt.n	800968c <_printf_float+0x370>
 800961c:	f04f 0b00 	mov.w	fp, #0
 8009620:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009624:	f104 021a 	add.w	r2, r4, #26
 8009628:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800962a:	9305      	str	r3, [sp, #20]
 800962c:	eba3 0309 	sub.w	r3, r3, r9
 8009630:	455b      	cmp	r3, fp
 8009632:	dc33      	bgt.n	800969c <_printf_float+0x380>
 8009634:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009638:	429a      	cmp	r2, r3
 800963a:	db3b      	blt.n	80096b4 <_printf_float+0x398>
 800963c:	6823      	ldr	r3, [r4, #0]
 800963e:	07da      	lsls	r2, r3, #31
 8009640:	d438      	bmi.n	80096b4 <_printf_float+0x398>
 8009642:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009646:	eba2 0903 	sub.w	r9, r2, r3
 800964a:	9b05      	ldr	r3, [sp, #20]
 800964c:	1ad2      	subs	r2, r2, r3
 800964e:	4591      	cmp	r9, r2
 8009650:	bfa8      	it	ge
 8009652:	4691      	movge	r9, r2
 8009654:	f1b9 0f00 	cmp.w	r9, #0
 8009658:	dc35      	bgt.n	80096c6 <_printf_float+0x3aa>
 800965a:	f04f 0800 	mov.w	r8, #0
 800965e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009662:	f104 0a1a 	add.w	sl, r4, #26
 8009666:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800966a:	1a9b      	subs	r3, r3, r2
 800966c:	eba3 0309 	sub.w	r3, r3, r9
 8009670:	4543      	cmp	r3, r8
 8009672:	f77f af79 	ble.w	8009568 <_printf_float+0x24c>
 8009676:	2301      	movs	r3, #1
 8009678:	4652      	mov	r2, sl
 800967a:	4631      	mov	r1, r6
 800967c:	4628      	mov	r0, r5
 800967e:	47b8      	blx	r7
 8009680:	3001      	adds	r0, #1
 8009682:	f43f aeaa 	beq.w	80093da <_printf_float+0xbe>
 8009686:	f108 0801 	add.w	r8, r8, #1
 800968a:	e7ec      	b.n	8009666 <_printf_float+0x34a>
 800968c:	4613      	mov	r3, r2
 800968e:	4631      	mov	r1, r6
 8009690:	4642      	mov	r2, r8
 8009692:	4628      	mov	r0, r5
 8009694:	47b8      	blx	r7
 8009696:	3001      	adds	r0, #1
 8009698:	d1c0      	bne.n	800961c <_printf_float+0x300>
 800969a:	e69e      	b.n	80093da <_printf_float+0xbe>
 800969c:	2301      	movs	r3, #1
 800969e:	4631      	mov	r1, r6
 80096a0:	4628      	mov	r0, r5
 80096a2:	9205      	str	r2, [sp, #20]
 80096a4:	47b8      	blx	r7
 80096a6:	3001      	adds	r0, #1
 80096a8:	f43f ae97 	beq.w	80093da <_printf_float+0xbe>
 80096ac:	9a05      	ldr	r2, [sp, #20]
 80096ae:	f10b 0b01 	add.w	fp, fp, #1
 80096b2:	e7b9      	b.n	8009628 <_printf_float+0x30c>
 80096b4:	ee18 3a10 	vmov	r3, s16
 80096b8:	4652      	mov	r2, sl
 80096ba:	4631      	mov	r1, r6
 80096bc:	4628      	mov	r0, r5
 80096be:	47b8      	blx	r7
 80096c0:	3001      	adds	r0, #1
 80096c2:	d1be      	bne.n	8009642 <_printf_float+0x326>
 80096c4:	e689      	b.n	80093da <_printf_float+0xbe>
 80096c6:	9a05      	ldr	r2, [sp, #20]
 80096c8:	464b      	mov	r3, r9
 80096ca:	4442      	add	r2, r8
 80096cc:	4631      	mov	r1, r6
 80096ce:	4628      	mov	r0, r5
 80096d0:	47b8      	blx	r7
 80096d2:	3001      	adds	r0, #1
 80096d4:	d1c1      	bne.n	800965a <_printf_float+0x33e>
 80096d6:	e680      	b.n	80093da <_printf_float+0xbe>
 80096d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096da:	2a01      	cmp	r2, #1
 80096dc:	dc01      	bgt.n	80096e2 <_printf_float+0x3c6>
 80096de:	07db      	lsls	r3, r3, #31
 80096e0:	d53a      	bpl.n	8009758 <_printf_float+0x43c>
 80096e2:	2301      	movs	r3, #1
 80096e4:	4642      	mov	r2, r8
 80096e6:	4631      	mov	r1, r6
 80096e8:	4628      	mov	r0, r5
 80096ea:	47b8      	blx	r7
 80096ec:	3001      	adds	r0, #1
 80096ee:	f43f ae74 	beq.w	80093da <_printf_float+0xbe>
 80096f2:	ee18 3a10 	vmov	r3, s16
 80096f6:	4652      	mov	r2, sl
 80096f8:	4631      	mov	r1, r6
 80096fa:	4628      	mov	r0, r5
 80096fc:	47b8      	blx	r7
 80096fe:	3001      	adds	r0, #1
 8009700:	f43f ae6b 	beq.w	80093da <_printf_float+0xbe>
 8009704:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009708:	2200      	movs	r2, #0
 800970a:	2300      	movs	r3, #0
 800970c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009710:	f7f7 f9ea 	bl	8000ae8 <__aeabi_dcmpeq>
 8009714:	b9d8      	cbnz	r0, 800974e <_printf_float+0x432>
 8009716:	f10a 33ff 	add.w	r3, sl, #4294967295
 800971a:	f108 0201 	add.w	r2, r8, #1
 800971e:	4631      	mov	r1, r6
 8009720:	4628      	mov	r0, r5
 8009722:	47b8      	blx	r7
 8009724:	3001      	adds	r0, #1
 8009726:	d10e      	bne.n	8009746 <_printf_float+0x42a>
 8009728:	e657      	b.n	80093da <_printf_float+0xbe>
 800972a:	2301      	movs	r3, #1
 800972c:	4652      	mov	r2, sl
 800972e:	4631      	mov	r1, r6
 8009730:	4628      	mov	r0, r5
 8009732:	47b8      	blx	r7
 8009734:	3001      	adds	r0, #1
 8009736:	f43f ae50 	beq.w	80093da <_printf_float+0xbe>
 800973a:	f108 0801 	add.w	r8, r8, #1
 800973e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009740:	3b01      	subs	r3, #1
 8009742:	4543      	cmp	r3, r8
 8009744:	dcf1      	bgt.n	800972a <_printf_float+0x40e>
 8009746:	464b      	mov	r3, r9
 8009748:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800974c:	e6da      	b.n	8009504 <_printf_float+0x1e8>
 800974e:	f04f 0800 	mov.w	r8, #0
 8009752:	f104 0a1a 	add.w	sl, r4, #26
 8009756:	e7f2      	b.n	800973e <_printf_float+0x422>
 8009758:	2301      	movs	r3, #1
 800975a:	4642      	mov	r2, r8
 800975c:	e7df      	b.n	800971e <_printf_float+0x402>
 800975e:	2301      	movs	r3, #1
 8009760:	464a      	mov	r2, r9
 8009762:	4631      	mov	r1, r6
 8009764:	4628      	mov	r0, r5
 8009766:	47b8      	blx	r7
 8009768:	3001      	adds	r0, #1
 800976a:	f43f ae36 	beq.w	80093da <_printf_float+0xbe>
 800976e:	f108 0801 	add.w	r8, r8, #1
 8009772:	68e3      	ldr	r3, [r4, #12]
 8009774:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009776:	1a5b      	subs	r3, r3, r1
 8009778:	4543      	cmp	r3, r8
 800977a:	dcf0      	bgt.n	800975e <_printf_float+0x442>
 800977c:	e6f8      	b.n	8009570 <_printf_float+0x254>
 800977e:	f04f 0800 	mov.w	r8, #0
 8009782:	f104 0919 	add.w	r9, r4, #25
 8009786:	e7f4      	b.n	8009772 <_printf_float+0x456>

08009788 <_printf_common>:
 8009788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800978c:	4616      	mov	r6, r2
 800978e:	4699      	mov	r9, r3
 8009790:	688a      	ldr	r2, [r1, #8]
 8009792:	690b      	ldr	r3, [r1, #16]
 8009794:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009798:	4293      	cmp	r3, r2
 800979a:	bfb8      	it	lt
 800979c:	4613      	movlt	r3, r2
 800979e:	6033      	str	r3, [r6, #0]
 80097a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80097a4:	4607      	mov	r7, r0
 80097a6:	460c      	mov	r4, r1
 80097a8:	b10a      	cbz	r2, 80097ae <_printf_common+0x26>
 80097aa:	3301      	adds	r3, #1
 80097ac:	6033      	str	r3, [r6, #0]
 80097ae:	6823      	ldr	r3, [r4, #0]
 80097b0:	0699      	lsls	r1, r3, #26
 80097b2:	bf42      	ittt	mi
 80097b4:	6833      	ldrmi	r3, [r6, #0]
 80097b6:	3302      	addmi	r3, #2
 80097b8:	6033      	strmi	r3, [r6, #0]
 80097ba:	6825      	ldr	r5, [r4, #0]
 80097bc:	f015 0506 	ands.w	r5, r5, #6
 80097c0:	d106      	bne.n	80097d0 <_printf_common+0x48>
 80097c2:	f104 0a19 	add.w	sl, r4, #25
 80097c6:	68e3      	ldr	r3, [r4, #12]
 80097c8:	6832      	ldr	r2, [r6, #0]
 80097ca:	1a9b      	subs	r3, r3, r2
 80097cc:	42ab      	cmp	r3, r5
 80097ce:	dc26      	bgt.n	800981e <_printf_common+0x96>
 80097d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80097d4:	1e13      	subs	r3, r2, #0
 80097d6:	6822      	ldr	r2, [r4, #0]
 80097d8:	bf18      	it	ne
 80097da:	2301      	movne	r3, #1
 80097dc:	0692      	lsls	r2, r2, #26
 80097de:	d42b      	bmi.n	8009838 <_printf_common+0xb0>
 80097e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80097e4:	4649      	mov	r1, r9
 80097e6:	4638      	mov	r0, r7
 80097e8:	47c0      	blx	r8
 80097ea:	3001      	adds	r0, #1
 80097ec:	d01e      	beq.n	800982c <_printf_common+0xa4>
 80097ee:	6823      	ldr	r3, [r4, #0]
 80097f0:	6922      	ldr	r2, [r4, #16]
 80097f2:	f003 0306 	and.w	r3, r3, #6
 80097f6:	2b04      	cmp	r3, #4
 80097f8:	bf02      	ittt	eq
 80097fa:	68e5      	ldreq	r5, [r4, #12]
 80097fc:	6833      	ldreq	r3, [r6, #0]
 80097fe:	1aed      	subeq	r5, r5, r3
 8009800:	68a3      	ldr	r3, [r4, #8]
 8009802:	bf0c      	ite	eq
 8009804:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009808:	2500      	movne	r5, #0
 800980a:	4293      	cmp	r3, r2
 800980c:	bfc4      	itt	gt
 800980e:	1a9b      	subgt	r3, r3, r2
 8009810:	18ed      	addgt	r5, r5, r3
 8009812:	2600      	movs	r6, #0
 8009814:	341a      	adds	r4, #26
 8009816:	42b5      	cmp	r5, r6
 8009818:	d11a      	bne.n	8009850 <_printf_common+0xc8>
 800981a:	2000      	movs	r0, #0
 800981c:	e008      	b.n	8009830 <_printf_common+0xa8>
 800981e:	2301      	movs	r3, #1
 8009820:	4652      	mov	r2, sl
 8009822:	4649      	mov	r1, r9
 8009824:	4638      	mov	r0, r7
 8009826:	47c0      	blx	r8
 8009828:	3001      	adds	r0, #1
 800982a:	d103      	bne.n	8009834 <_printf_common+0xac>
 800982c:	f04f 30ff 	mov.w	r0, #4294967295
 8009830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009834:	3501      	adds	r5, #1
 8009836:	e7c6      	b.n	80097c6 <_printf_common+0x3e>
 8009838:	18e1      	adds	r1, r4, r3
 800983a:	1c5a      	adds	r2, r3, #1
 800983c:	2030      	movs	r0, #48	; 0x30
 800983e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009842:	4422      	add	r2, r4
 8009844:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009848:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800984c:	3302      	adds	r3, #2
 800984e:	e7c7      	b.n	80097e0 <_printf_common+0x58>
 8009850:	2301      	movs	r3, #1
 8009852:	4622      	mov	r2, r4
 8009854:	4649      	mov	r1, r9
 8009856:	4638      	mov	r0, r7
 8009858:	47c0      	blx	r8
 800985a:	3001      	adds	r0, #1
 800985c:	d0e6      	beq.n	800982c <_printf_common+0xa4>
 800985e:	3601      	adds	r6, #1
 8009860:	e7d9      	b.n	8009816 <_printf_common+0x8e>
	...

08009864 <_printf_i>:
 8009864:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009868:	7e0f      	ldrb	r7, [r1, #24]
 800986a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800986c:	2f78      	cmp	r7, #120	; 0x78
 800986e:	4691      	mov	r9, r2
 8009870:	4680      	mov	r8, r0
 8009872:	460c      	mov	r4, r1
 8009874:	469a      	mov	sl, r3
 8009876:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800987a:	d807      	bhi.n	800988c <_printf_i+0x28>
 800987c:	2f62      	cmp	r7, #98	; 0x62
 800987e:	d80a      	bhi.n	8009896 <_printf_i+0x32>
 8009880:	2f00      	cmp	r7, #0
 8009882:	f000 80d4 	beq.w	8009a2e <_printf_i+0x1ca>
 8009886:	2f58      	cmp	r7, #88	; 0x58
 8009888:	f000 80c0 	beq.w	8009a0c <_printf_i+0x1a8>
 800988c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009890:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009894:	e03a      	b.n	800990c <_printf_i+0xa8>
 8009896:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800989a:	2b15      	cmp	r3, #21
 800989c:	d8f6      	bhi.n	800988c <_printf_i+0x28>
 800989e:	a101      	add	r1, pc, #4	; (adr r1, 80098a4 <_printf_i+0x40>)
 80098a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80098a4:	080098fd 	.word	0x080098fd
 80098a8:	08009911 	.word	0x08009911
 80098ac:	0800988d 	.word	0x0800988d
 80098b0:	0800988d 	.word	0x0800988d
 80098b4:	0800988d 	.word	0x0800988d
 80098b8:	0800988d 	.word	0x0800988d
 80098bc:	08009911 	.word	0x08009911
 80098c0:	0800988d 	.word	0x0800988d
 80098c4:	0800988d 	.word	0x0800988d
 80098c8:	0800988d 	.word	0x0800988d
 80098cc:	0800988d 	.word	0x0800988d
 80098d0:	08009a15 	.word	0x08009a15
 80098d4:	0800993d 	.word	0x0800993d
 80098d8:	080099cf 	.word	0x080099cf
 80098dc:	0800988d 	.word	0x0800988d
 80098e0:	0800988d 	.word	0x0800988d
 80098e4:	08009a37 	.word	0x08009a37
 80098e8:	0800988d 	.word	0x0800988d
 80098ec:	0800993d 	.word	0x0800993d
 80098f0:	0800988d 	.word	0x0800988d
 80098f4:	0800988d 	.word	0x0800988d
 80098f8:	080099d7 	.word	0x080099d7
 80098fc:	682b      	ldr	r3, [r5, #0]
 80098fe:	1d1a      	adds	r2, r3, #4
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	602a      	str	r2, [r5, #0]
 8009904:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009908:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800990c:	2301      	movs	r3, #1
 800990e:	e09f      	b.n	8009a50 <_printf_i+0x1ec>
 8009910:	6820      	ldr	r0, [r4, #0]
 8009912:	682b      	ldr	r3, [r5, #0]
 8009914:	0607      	lsls	r7, r0, #24
 8009916:	f103 0104 	add.w	r1, r3, #4
 800991a:	6029      	str	r1, [r5, #0]
 800991c:	d501      	bpl.n	8009922 <_printf_i+0xbe>
 800991e:	681e      	ldr	r6, [r3, #0]
 8009920:	e003      	b.n	800992a <_printf_i+0xc6>
 8009922:	0646      	lsls	r6, r0, #25
 8009924:	d5fb      	bpl.n	800991e <_printf_i+0xba>
 8009926:	f9b3 6000 	ldrsh.w	r6, [r3]
 800992a:	2e00      	cmp	r6, #0
 800992c:	da03      	bge.n	8009936 <_printf_i+0xd2>
 800992e:	232d      	movs	r3, #45	; 0x2d
 8009930:	4276      	negs	r6, r6
 8009932:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009936:	485a      	ldr	r0, [pc, #360]	; (8009aa0 <_printf_i+0x23c>)
 8009938:	230a      	movs	r3, #10
 800993a:	e012      	b.n	8009962 <_printf_i+0xfe>
 800993c:	682b      	ldr	r3, [r5, #0]
 800993e:	6820      	ldr	r0, [r4, #0]
 8009940:	1d19      	adds	r1, r3, #4
 8009942:	6029      	str	r1, [r5, #0]
 8009944:	0605      	lsls	r5, r0, #24
 8009946:	d501      	bpl.n	800994c <_printf_i+0xe8>
 8009948:	681e      	ldr	r6, [r3, #0]
 800994a:	e002      	b.n	8009952 <_printf_i+0xee>
 800994c:	0641      	lsls	r1, r0, #25
 800994e:	d5fb      	bpl.n	8009948 <_printf_i+0xe4>
 8009950:	881e      	ldrh	r6, [r3, #0]
 8009952:	4853      	ldr	r0, [pc, #332]	; (8009aa0 <_printf_i+0x23c>)
 8009954:	2f6f      	cmp	r7, #111	; 0x6f
 8009956:	bf0c      	ite	eq
 8009958:	2308      	moveq	r3, #8
 800995a:	230a      	movne	r3, #10
 800995c:	2100      	movs	r1, #0
 800995e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009962:	6865      	ldr	r5, [r4, #4]
 8009964:	60a5      	str	r5, [r4, #8]
 8009966:	2d00      	cmp	r5, #0
 8009968:	bfa2      	ittt	ge
 800996a:	6821      	ldrge	r1, [r4, #0]
 800996c:	f021 0104 	bicge.w	r1, r1, #4
 8009970:	6021      	strge	r1, [r4, #0]
 8009972:	b90e      	cbnz	r6, 8009978 <_printf_i+0x114>
 8009974:	2d00      	cmp	r5, #0
 8009976:	d04b      	beq.n	8009a10 <_printf_i+0x1ac>
 8009978:	4615      	mov	r5, r2
 800997a:	fbb6 f1f3 	udiv	r1, r6, r3
 800997e:	fb03 6711 	mls	r7, r3, r1, r6
 8009982:	5dc7      	ldrb	r7, [r0, r7]
 8009984:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009988:	4637      	mov	r7, r6
 800998a:	42bb      	cmp	r3, r7
 800998c:	460e      	mov	r6, r1
 800998e:	d9f4      	bls.n	800997a <_printf_i+0x116>
 8009990:	2b08      	cmp	r3, #8
 8009992:	d10b      	bne.n	80099ac <_printf_i+0x148>
 8009994:	6823      	ldr	r3, [r4, #0]
 8009996:	07de      	lsls	r6, r3, #31
 8009998:	d508      	bpl.n	80099ac <_printf_i+0x148>
 800999a:	6923      	ldr	r3, [r4, #16]
 800999c:	6861      	ldr	r1, [r4, #4]
 800999e:	4299      	cmp	r1, r3
 80099a0:	bfde      	ittt	le
 80099a2:	2330      	movle	r3, #48	; 0x30
 80099a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80099a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80099ac:	1b52      	subs	r2, r2, r5
 80099ae:	6122      	str	r2, [r4, #16]
 80099b0:	f8cd a000 	str.w	sl, [sp]
 80099b4:	464b      	mov	r3, r9
 80099b6:	aa03      	add	r2, sp, #12
 80099b8:	4621      	mov	r1, r4
 80099ba:	4640      	mov	r0, r8
 80099bc:	f7ff fee4 	bl	8009788 <_printf_common>
 80099c0:	3001      	adds	r0, #1
 80099c2:	d14a      	bne.n	8009a5a <_printf_i+0x1f6>
 80099c4:	f04f 30ff 	mov.w	r0, #4294967295
 80099c8:	b004      	add	sp, #16
 80099ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099ce:	6823      	ldr	r3, [r4, #0]
 80099d0:	f043 0320 	orr.w	r3, r3, #32
 80099d4:	6023      	str	r3, [r4, #0]
 80099d6:	4833      	ldr	r0, [pc, #204]	; (8009aa4 <_printf_i+0x240>)
 80099d8:	2778      	movs	r7, #120	; 0x78
 80099da:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80099de:	6823      	ldr	r3, [r4, #0]
 80099e0:	6829      	ldr	r1, [r5, #0]
 80099e2:	061f      	lsls	r7, r3, #24
 80099e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80099e8:	d402      	bmi.n	80099f0 <_printf_i+0x18c>
 80099ea:	065f      	lsls	r7, r3, #25
 80099ec:	bf48      	it	mi
 80099ee:	b2b6      	uxthmi	r6, r6
 80099f0:	07df      	lsls	r7, r3, #31
 80099f2:	bf48      	it	mi
 80099f4:	f043 0320 	orrmi.w	r3, r3, #32
 80099f8:	6029      	str	r1, [r5, #0]
 80099fa:	bf48      	it	mi
 80099fc:	6023      	strmi	r3, [r4, #0]
 80099fe:	b91e      	cbnz	r6, 8009a08 <_printf_i+0x1a4>
 8009a00:	6823      	ldr	r3, [r4, #0]
 8009a02:	f023 0320 	bic.w	r3, r3, #32
 8009a06:	6023      	str	r3, [r4, #0]
 8009a08:	2310      	movs	r3, #16
 8009a0a:	e7a7      	b.n	800995c <_printf_i+0xf8>
 8009a0c:	4824      	ldr	r0, [pc, #144]	; (8009aa0 <_printf_i+0x23c>)
 8009a0e:	e7e4      	b.n	80099da <_printf_i+0x176>
 8009a10:	4615      	mov	r5, r2
 8009a12:	e7bd      	b.n	8009990 <_printf_i+0x12c>
 8009a14:	682b      	ldr	r3, [r5, #0]
 8009a16:	6826      	ldr	r6, [r4, #0]
 8009a18:	6961      	ldr	r1, [r4, #20]
 8009a1a:	1d18      	adds	r0, r3, #4
 8009a1c:	6028      	str	r0, [r5, #0]
 8009a1e:	0635      	lsls	r5, r6, #24
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	d501      	bpl.n	8009a28 <_printf_i+0x1c4>
 8009a24:	6019      	str	r1, [r3, #0]
 8009a26:	e002      	b.n	8009a2e <_printf_i+0x1ca>
 8009a28:	0670      	lsls	r0, r6, #25
 8009a2a:	d5fb      	bpl.n	8009a24 <_printf_i+0x1c0>
 8009a2c:	8019      	strh	r1, [r3, #0]
 8009a2e:	2300      	movs	r3, #0
 8009a30:	6123      	str	r3, [r4, #16]
 8009a32:	4615      	mov	r5, r2
 8009a34:	e7bc      	b.n	80099b0 <_printf_i+0x14c>
 8009a36:	682b      	ldr	r3, [r5, #0]
 8009a38:	1d1a      	adds	r2, r3, #4
 8009a3a:	602a      	str	r2, [r5, #0]
 8009a3c:	681d      	ldr	r5, [r3, #0]
 8009a3e:	6862      	ldr	r2, [r4, #4]
 8009a40:	2100      	movs	r1, #0
 8009a42:	4628      	mov	r0, r5
 8009a44:	f7f6 fbd4 	bl	80001f0 <memchr>
 8009a48:	b108      	cbz	r0, 8009a4e <_printf_i+0x1ea>
 8009a4a:	1b40      	subs	r0, r0, r5
 8009a4c:	6060      	str	r0, [r4, #4]
 8009a4e:	6863      	ldr	r3, [r4, #4]
 8009a50:	6123      	str	r3, [r4, #16]
 8009a52:	2300      	movs	r3, #0
 8009a54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a58:	e7aa      	b.n	80099b0 <_printf_i+0x14c>
 8009a5a:	6923      	ldr	r3, [r4, #16]
 8009a5c:	462a      	mov	r2, r5
 8009a5e:	4649      	mov	r1, r9
 8009a60:	4640      	mov	r0, r8
 8009a62:	47d0      	blx	sl
 8009a64:	3001      	adds	r0, #1
 8009a66:	d0ad      	beq.n	80099c4 <_printf_i+0x160>
 8009a68:	6823      	ldr	r3, [r4, #0]
 8009a6a:	079b      	lsls	r3, r3, #30
 8009a6c:	d413      	bmi.n	8009a96 <_printf_i+0x232>
 8009a6e:	68e0      	ldr	r0, [r4, #12]
 8009a70:	9b03      	ldr	r3, [sp, #12]
 8009a72:	4298      	cmp	r0, r3
 8009a74:	bfb8      	it	lt
 8009a76:	4618      	movlt	r0, r3
 8009a78:	e7a6      	b.n	80099c8 <_printf_i+0x164>
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	4632      	mov	r2, r6
 8009a7e:	4649      	mov	r1, r9
 8009a80:	4640      	mov	r0, r8
 8009a82:	47d0      	blx	sl
 8009a84:	3001      	adds	r0, #1
 8009a86:	d09d      	beq.n	80099c4 <_printf_i+0x160>
 8009a88:	3501      	adds	r5, #1
 8009a8a:	68e3      	ldr	r3, [r4, #12]
 8009a8c:	9903      	ldr	r1, [sp, #12]
 8009a8e:	1a5b      	subs	r3, r3, r1
 8009a90:	42ab      	cmp	r3, r5
 8009a92:	dcf2      	bgt.n	8009a7a <_printf_i+0x216>
 8009a94:	e7eb      	b.n	8009a6e <_printf_i+0x20a>
 8009a96:	2500      	movs	r5, #0
 8009a98:	f104 0619 	add.w	r6, r4, #25
 8009a9c:	e7f5      	b.n	8009a8a <_printf_i+0x226>
 8009a9e:	bf00      	nop
 8009aa0:	0800db6e 	.word	0x0800db6e
 8009aa4:	0800db7f 	.word	0x0800db7f

08009aa8 <_scanf_float>:
 8009aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aac:	b087      	sub	sp, #28
 8009aae:	4617      	mov	r7, r2
 8009ab0:	9303      	str	r3, [sp, #12]
 8009ab2:	688b      	ldr	r3, [r1, #8]
 8009ab4:	1e5a      	subs	r2, r3, #1
 8009ab6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009aba:	bf83      	ittte	hi
 8009abc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009ac0:	195b      	addhi	r3, r3, r5
 8009ac2:	9302      	strhi	r3, [sp, #8]
 8009ac4:	2300      	movls	r3, #0
 8009ac6:	bf86      	itte	hi
 8009ac8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009acc:	608b      	strhi	r3, [r1, #8]
 8009ace:	9302      	strls	r3, [sp, #8]
 8009ad0:	680b      	ldr	r3, [r1, #0]
 8009ad2:	468b      	mov	fp, r1
 8009ad4:	2500      	movs	r5, #0
 8009ad6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009ada:	f84b 3b1c 	str.w	r3, [fp], #28
 8009ade:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009ae2:	4680      	mov	r8, r0
 8009ae4:	460c      	mov	r4, r1
 8009ae6:	465e      	mov	r6, fp
 8009ae8:	46aa      	mov	sl, r5
 8009aea:	46a9      	mov	r9, r5
 8009aec:	9501      	str	r5, [sp, #4]
 8009aee:	68a2      	ldr	r2, [r4, #8]
 8009af0:	b152      	cbz	r2, 8009b08 <_scanf_float+0x60>
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	781b      	ldrb	r3, [r3, #0]
 8009af6:	2b4e      	cmp	r3, #78	; 0x4e
 8009af8:	d864      	bhi.n	8009bc4 <_scanf_float+0x11c>
 8009afa:	2b40      	cmp	r3, #64	; 0x40
 8009afc:	d83c      	bhi.n	8009b78 <_scanf_float+0xd0>
 8009afe:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009b02:	b2c8      	uxtb	r0, r1
 8009b04:	280e      	cmp	r0, #14
 8009b06:	d93a      	bls.n	8009b7e <_scanf_float+0xd6>
 8009b08:	f1b9 0f00 	cmp.w	r9, #0
 8009b0c:	d003      	beq.n	8009b16 <_scanf_float+0x6e>
 8009b0e:	6823      	ldr	r3, [r4, #0]
 8009b10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b14:	6023      	str	r3, [r4, #0]
 8009b16:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009b1a:	f1ba 0f01 	cmp.w	sl, #1
 8009b1e:	f200 8113 	bhi.w	8009d48 <_scanf_float+0x2a0>
 8009b22:	455e      	cmp	r6, fp
 8009b24:	f200 8105 	bhi.w	8009d32 <_scanf_float+0x28a>
 8009b28:	2501      	movs	r5, #1
 8009b2a:	4628      	mov	r0, r5
 8009b2c:	b007      	add	sp, #28
 8009b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b32:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009b36:	2a0d      	cmp	r2, #13
 8009b38:	d8e6      	bhi.n	8009b08 <_scanf_float+0x60>
 8009b3a:	a101      	add	r1, pc, #4	; (adr r1, 8009b40 <_scanf_float+0x98>)
 8009b3c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009b40:	08009c7f 	.word	0x08009c7f
 8009b44:	08009b09 	.word	0x08009b09
 8009b48:	08009b09 	.word	0x08009b09
 8009b4c:	08009b09 	.word	0x08009b09
 8009b50:	08009cdf 	.word	0x08009cdf
 8009b54:	08009cb7 	.word	0x08009cb7
 8009b58:	08009b09 	.word	0x08009b09
 8009b5c:	08009b09 	.word	0x08009b09
 8009b60:	08009c8d 	.word	0x08009c8d
 8009b64:	08009b09 	.word	0x08009b09
 8009b68:	08009b09 	.word	0x08009b09
 8009b6c:	08009b09 	.word	0x08009b09
 8009b70:	08009b09 	.word	0x08009b09
 8009b74:	08009c45 	.word	0x08009c45
 8009b78:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009b7c:	e7db      	b.n	8009b36 <_scanf_float+0x8e>
 8009b7e:	290e      	cmp	r1, #14
 8009b80:	d8c2      	bhi.n	8009b08 <_scanf_float+0x60>
 8009b82:	a001      	add	r0, pc, #4	; (adr r0, 8009b88 <_scanf_float+0xe0>)
 8009b84:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009b88:	08009c37 	.word	0x08009c37
 8009b8c:	08009b09 	.word	0x08009b09
 8009b90:	08009c37 	.word	0x08009c37
 8009b94:	08009ccb 	.word	0x08009ccb
 8009b98:	08009b09 	.word	0x08009b09
 8009b9c:	08009be5 	.word	0x08009be5
 8009ba0:	08009c21 	.word	0x08009c21
 8009ba4:	08009c21 	.word	0x08009c21
 8009ba8:	08009c21 	.word	0x08009c21
 8009bac:	08009c21 	.word	0x08009c21
 8009bb0:	08009c21 	.word	0x08009c21
 8009bb4:	08009c21 	.word	0x08009c21
 8009bb8:	08009c21 	.word	0x08009c21
 8009bbc:	08009c21 	.word	0x08009c21
 8009bc0:	08009c21 	.word	0x08009c21
 8009bc4:	2b6e      	cmp	r3, #110	; 0x6e
 8009bc6:	d809      	bhi.n	8009bdc <_scanf_float+0x134>
 8009bc8:	2b60      	cmp	r3, #96	; 0x60
 8009bca:	d8b2      	bhi.n	8009b32 <_scanf_float+0x8a>
 8009bcc:	2b54      	cmp	r3, #84	; 0x54
 8009bce:	d077      	beq.n	8009cc0 <_scanf_float+0x218>
 8009bd0:	2b59      	cmp	r3, #89	; 0x59
 8009bd2:	d199      	bne.n	8009b08 <_scanf_float+0x60>
 8009bd4:	2d07      	cmp	r5, #7
 8009bd6:	d197      	bne.n	8009b08 <_scanf_float+0x60>
 8009bd8:	2508      	movs	r5, #8
 8009bda:	e029      	b.n	8009c30 <_scanf_float+0x188>
 8009bdc:	2b74      	cmp	r3, #116	; 0x74
 8009bde:	d06f      	beq.n	8009cc0 <_scanf_float+0x218>
 8009be0:	2b79      	cmp	r3, #121	; 0x79
 8009be2:	e7f6      	b.n	8009bd2 <_scanf_float+0x12a>
 8009be4:	6821      	ldr	r1, [r4, #0]
 8009be6:	05c8      	lsls	r0, r1, #23
 8009be8:	d51a      	bpl.n	8009c20 <_scanf_float+0x178>
 8009bea:	9b02      	ldr	r3, [sp, #8]
 8009bec:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009bf0:	6021      	str	r1, [r4, #0]
 8009bf2:	f109 0901 	add.w	r9, r9, #1
 8009bf6:	b11b      	cbz	r3, 8009c00 <_scanf_float+0x158>
 8009bf8:	3b01      	subs	r3, #1
 8009bfa:	3201      	adds	r2, #1
 8009bfc:	9302      	str	r3, [sp, #8]
 8009bfe:	60a2      	str	r2, [r4, #8]
 8009c00:	68a3      	ldr	r3, [r4, #8]
 8009c02:	3b01      	subs	r3, #1
 8009c04:	60a3      	str	r3, [r4, #8]
 8009c06:	6923      	ldr	r3, [r4, #16]
 8009c08:	3301      	adds	r3, #1
 8009c0a:	6123      	str	r3, [r4, #16]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	3b01      	subs	r3, #1
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	607b      	str	r3, [r7, #4]
 8009c14:	f340 8084 	ble.w	8009d20 <_scanf_float+0x278>
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	3301      	adds	r3, #1
 8009c1c:	603b      	str	r3, [r7, #0]
 8009c1e:	e766      	b.n	8009aee <_scanf_float+0x46>
 8009c20:	eb1a 0f05 	cmn.w	sl, r5
 8009c24:	f47f af70 	bne.w	8009b08 <_scanf_float+0x60>
 8009c28:	6822      	ldr	r2, [r4, #0]
 8009c2a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009c2e:	6022      	str	r2, [r4, #0]
 8009c30:	f806 3b01 	strb.w	r3, [r6], #1
 8009c34:	e7e4      	b.n	8009c00 <_scanf_float+0x158>
 8009c36:	6822      	ldr	r2, [r4, #0]
 8009c38:	0610      	lsls	r0, r2, #24
 8009c3a:	f57f af65 	bpl.w	8009b08 <_scanf_float+0x60>
 8009c3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c42:	e7f4      	b.n	8009c2e <_scanf_float+0x186>
 8009c44:	f1ba 0f00 	cmp.w	sl, #0
 8009c48:	d10e      	bne.n	8009c68 <_scanf_float+0x1c0>
 8009c4a:	f1b9 0f00 	cmp.w	r9, #0
 8009c4e:	d10e      	bne.n	8009c6e <_scanf_float+0x1c6>
 8009c50:	6822      	ldr	r2, [r4, #0]
 8009c52:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009c56:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009c5a:	d108      	bne.n	8009c6e <_scanf_float+0x1c6>
 8009c5c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009c60:	6022      	str	r2, [r4, #0]
 8009c62:	f04f 0a01 	mov.w	sl, #1
 8009c66:	e7e3      	b.n	8009c30 <_scanf_float+0x188>
 8009c68:	f1ba 0f02 	cmp.w	sl, #2
 8009c6c:	d055      	beq.n	8009d1a <_scanf_float+0x272>
 8009c6e:	2d01      	cmp	r5, #1
 8009c70:	d002      	beq.n	8009c78 <_scanf_float+0x1d0>
 8009c72:	2d04      	cmp	r5, #4
 8009c74:	f47f af48 	bne.w	8009b08 <_scanf_float+0x60>
 8009c78:	3501      	adds	r5, #1
 8009c7a:	b2ed      	uxtb	r5, r5
 8009c7c:	e7d8      	b.n	8009c30 <_scanf_float+0x188>
 8009c7e:	f1ba 0f01 	cmp.w	sl, #1
 8009c82:	f47f af41 	bne.w	8009b08 <_scanf_float+0x60>
 8009c86:	f04f 0a02 	mov.w	sl, #2
 8009c8a:	e7d1      	b.n	8009c30 <_scanf_float+0x188>
 8009c8c:	b97d      	cbnz	r5, 8009cae <_scanf_float+0x206>
 8009c8e:	f1b9 0f00 	cmp.w	r9, #0
 8009c92:	f47f af3c 	bne.w	8009b0e <_scanf_float+0x66>
 8009c96:	6822      	ldr	r2, [r4, #0]
 8009c98:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009c9c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009ca0:	f47f af39 	bne.w	8009b16 <_scanf_float+0x6e>
 8009ca4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009ca8:	6022      	str	r2, [r4, #0]
 8009caa:	2501      	movs	r5, #1
 8009cac:	e7c0      	b.n	8009c30 <_scanf_float+0x188>
 8009cae:	2d03      	cmp	r5, #3
 8009cb0:	d0e2      	beq.n	8009c78 <_scanf_float+0x1d0>
 8009cb2:	2d05      	cmp	r5, #5
 8009cb4:	e7de      	b.n	8009c74 <_scanf_float+0x1cc>
 8009cb6:	2d02      	cmp	r5, #2
 8009cb8:	f47f af26 	bne.w	8009b08 <_scanf_float+0x60>
 8009cbc:	2503      	movs	r5, #3
 8009cbe:	e7b7      	b.n	8009c30 <_scanf_float+0x188>
 8009cc0:	2d06      	cmp	r5, #6
 8009cc2:	f47f af21 	bne.w	8009b08 <_scanf_float+0x60>
 8009cc6:	2507      	movs	r5, #7
 8009cc8:	e7b2      	b.n	8009c30 <_scanf_float+0x188>
 8009cca:	6822      	ldr	r2, [r4, #0]
 8009ccc:	0591      	lsls	r1, r2, #22
 8009cce:	f57f af1b 	bpl.w	8009b08 <_scanf_float+0x60>
 8009cd2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009cd6:	6022      	str	r2, [r4, #0]
 8009cd8:	f8cd 9004 	str.w	r9, [sp, #4]
 8009cdc:	e7a8      	b.n	8009c30 <_scanf_float+0x188>
 8009cde:	6822      	ldr	r2, [r4, #0]
 8009ce0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009ce4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009ce8:	d006      	beq.n	8009cf8 <_scanf_float+0x250>
 8009cea:	0550      	lsls	r0, r2, #21
 8009cec:	f57f af0c 	bpl.w	8009b08 <_scanf_float+0x60>
 8009cf0:	f1b9 0f00 	cmp.w	r9, #0
 8009cf4:	f43f af0f 	beq.w	8009b16 <_scanf_float+0x6e>
 8009cf8:	0591      	lsls	r1, r2, #22
 8009cfa:	bf58      	it	pl
 8009cfc:	9901      	ldrpl	r1, [sp, #4]
 8009cfe:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009d02:	bf58      	it	pl
 8009d04:	eba9 0101 	subpl.w	r1, r9, r1
 8009d08:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009d0c:	bf58      	it	pl
 8009d0e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009d12:	6022      	str	r2, [r4, #0]
 8009d14:	f04f 0900 	mov.w	r9, #0
 8009d18:	e78a      	b.n	8009c30 <_scanf_float+0x188>
 8009d1a:	f04f 0a03 	mov.w	sl, #3
 8009d1e:	e787      	b.n	8009c30 <_scanf_float+0x188>
 8009d20:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009d24:	4639      	mov	r1, r7
 8009d26:	4640      	mov	r0, r8
 8009d28:	4798      	blx	r3
 8009d2a:	2800      	cmp	r0, #0
 8009d2c:	f43f aedf 	beq.w	8009aee <_scanf_float+0x46>
 8009d30:	e6ea      	b.n	8009b08 <_scanf_float+0x60>
 8009d32:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009d36:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009d3a:	463a      	mov	r2, r7
 8009d3c:	4640      	mov	r0, r8
 8009d3e:	4798      	blx	r3
 8009d40:	6923      	ldr	r3, [r4, #16]
 8009d42:	3b01      	subs	r3, #1
 8009d44:	6123      	str	r3, [r4, #16]
 8009d46:	e6ec      	b.n	8009b22 <_scanf_float+0x7a>
 8009d48:	1e6b      	subs	r3, r5, #1
 8009d4a:	2b06      	cmp	r3, #6
 8009d4c:	d825      	bhi.n	8009d9a <_scanf_float+0x2f2>
 8009d4e:	2d02      	cmp	r5, #2
 8009d50:	d836      	bhi.n	8009dc0 <_scanf_float+0x318>
 8009d52:	455e      	cmp	r6, fp
 8009d54:	f67f aee8 	bls.w	8009b28 <_scanf_float+0x80>
 8009d58:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009d5c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009d60:	463a      	mov	r2, r7
 8009d62:	4640      	mov	r0, r8
 8009d64:	4798      	blx	r3
 8009d66:	6923      	ldr	r3, [r4, #16]
 8009d68:	3b01      	subs	r3, #1
 8009d6a:	6123      	str	r3, [r4, #16]
 8009d6c:	e7f1      	b.n	8009d52 <_scanf_float+0x2aa>
 8009d6e:	9802      	ldr	r0, [sp, #8]
 8009d70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009d74:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009d78:	9002      	str	r0, [sp, #8]
 8009d7a:	463a      	mov	r2, r7
 8009d7c:	4640      	mov	r0, r8
 8009d7e:	4798      	blx	r3
 8009d80:	6923      	ldr	r3, [r4, #16]
 8009d82:	3b01      	subs	r3, #1
 8009d84:	6123      	str	r3, [r4, #16]
 8009d86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d8a:	fa5f fa8a 	uxtb.w	sl, sl
 8009d8e:	f1ba 0f02 	cmp.w	sl, #2
 8009d92:	d1ec      	bne.n	8009d6e <_scanf_float+0x2c6>
 8009d94:	3d03      	subs	r5, #3
 8009d96:	b2ed      	uxtb	r5, r5
 8009d98:	1b76      	subs	r6, r6, r5
 8009d9a:	6823      	ldr	r3, [r4, #0]
 8009d9c:	05da      	lsls	r2, r3, #23
 8009d9e:	d52f      	bpl.n	8009e00 <_scanf_float+0x358>
 8009da0:	055b      	lsls	r3, r3, #21
 8009da2:	d510      	bpl.n	8009dc6 <_scanf_float+0x31e>
 8009da4:	455e      	cmp	r6, fp
 8009da6:	f67f aebf 	bls.w	8009b28 <_scanf_float+0x80>
 8009daa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009dae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009db2:	463a      	mov	r2, r7
 8009db4:	4640      	mov	r0, r8
 8009db6:	4798      	blx	r3
 8009db8:	6923      	ldr	r3, [r4, #16]
 8009dba:	3b01      	subs	r3, #1
 8009dbc:	6123      	str	r3, [r4, #16]
 8009dbe:	e7f1      	b.n	8009da4 <_scanf_float+0x2fc>
 8009dc0:	46aa      	mov	sl, r5
 8009dc2:	9602      	str	r6, [sp, #8]
 8009dc4:	e7df      	b.n	8009d86 <_scanf_float+0x2de>
 8009dc6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009dca:	6923      	ldr	r3, [r4, #16]
 8009dcc:	2965      	cmp	r1, #101	; 0x65
 8009dce:	f103 33ff 	add.w	r3, r3, #4294967295
 8009dd2:	f106 35ff 	add.w	r5, r6, #4294967295
 8009dd6:	6123      	str	r3, [r4, #16]
 8009dd8:	d00c      	beq.n	8009df4 <_scanf_float+0x34c>
 8009dda:	2945      	cmp	r1, #69	; 0x45
 8009ddc:	d00a      	beq.n	8009df4 <_scanf_float+0x34c>
 8009dde:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009de2:	463a      	mov	r2, r7
 8009de4:	4640      	mov	r0, r8
 8009de6:	4798      	blx	r3
 8009de8:	6923      	ldr	r3, [r4, #16]
 8009dea:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009dee:	3b01      	subs	r3, #1
 8009df0:	1eb5      	subs	r5, r6, #2
 8009df2:	6123      	str	r3, [r4, #16]
 8009df4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009df8:	463a      	mov	r2, r7
 8009dfa:	4640      	mov	r0, r8
 8009dfc:	4798      	blx	r3
 8009dfe:	462e      	mov	r6, r5
 8009e00:	6825      	ldr	r5, [r4, #0]
 8009e02:	f015 0510 	ands.w	r5, r5, #16
 8009e06:	d158      	bne.n	8009eba <_scanf_float+0x412>
 8009e08:	7035      	strb	r5, [r6, #0]
 8009e0a:	6823      	ldr	r3, [r4, #0]
 8009e0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009e10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e14:	d11c      	bne.n	8009e50 <_scanf_float+0x3a8>
 8009e16:	9b01      	ldr	r3, [sp, #4]
 8009e18:	454b      	cmp	r3, r9
 8009e1a:	eba3 0209 	sub.w	r2, r3, r9
 8009e1e:	d124      	bne.n	8009e6a <_scanf_float+0x3c2>
 8009e20:	2200      	movs	r2, #0
 8009e22:	4659      	mov	r1, fp
 8009e24:	4640      	mov	r0, r8
 8009e26:	f002 fcef 	bl	800c808 <_strtod_r>
 8009e2a:	9b03      	ldr	r3, [sp, #12]
 8009e2c:	6821      	ldr	r1, [r4, #0]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f011 0f02 	tst.w	r1, #2
 8009e34:	ec57 6b10 	vmov	r6, r7, d0
 8009e38:	f103 0204 	add.w	r2, r3, #4
 8009e3c:	d020      	beq.n	8009e80 <_scanf_float+0x3d8>
 8009e3e:	9903      	ldr	r1, [sp, #12]
 8009e40:	600a      	str	r2, [r1, #0]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	e9c3 6700 	strd	r6, r7, [r3]
 8009e48:	68e3      	ldr	r3, [r4, #12]
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	60e3      	str	r3, [r4, #12]
 8009e4e:	e66c      	b.n	8009b2a <_scanf_float+0x82>
 8009e50:	9b04      	ldr	r3, [sp, #16]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d0e4      	beq.n	8009e20 <_scanf_float+0x378>
 8009e56:	9905      	ldr	r1, [sp, #20]
 8009e58:	230a      	movs	r3, #10
 8009e5a:	462a      	mov	r2, r5
 8009e5c:	3101      	adds	r1, #1
 8009e5e:	4640      	mov	r0, r8
 8009e60:	f002 fd5a 	bl	800c918 <_strtol_r>
 8009e64:	9b04      	ldr	r3, [sp, #16]
 8009e66:	9e05      	ldr	r6, [sp, #20]
 8009e68:	1ac2      	subs	r2, r0, r3
 8009e6a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009e6e:	429e      	cmp	r6, r3
 8009e70:	bf28      	it	cs
 8009e72:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009e76:	4912      	ldr	r1, [pc, #72]	; (8009ec0 <_scanf_float+0x418>)
 8009e78:	4630      	mov	r0, r6
 8009e7a:	f000 f9a7 	bl	800a1cc <siprintf>
 8009e7e:	e7cf      	b.n	8009e20 <_scanf_float+0x378>
 8009e80:	f011 0f04 	tst.w	r1, #4
 8009e84:	9903      	ldr	r1, [sp, #12]
 8009e86:	600a      	str	r2, [r1, #0]
 8009e88:	d1db      	bne.n	8009e42 <_scanf_float+0x39a>
 8009e8a:	f8d3 8000 	ldr.w	r8, [r3]
 8009e8e:	ee10 2a10 	vmov	r2, s0
 8009e92:	ee10 0a10 	vmov	r0, s0
 8009e96:	463b      	mov	r3, r7
 8009e98:	4639      	mov	r1, r7
 8009e9a:	f7f6 fe57 	bl	8000b4c <__aeabi_dcmpun>
 8009e9e:	b128      	cbz	r0, 8009eac <_scanf_float+0x404>
 8009ea0:	4808      	ldr	r0, [pc, #32]	; (8009ec4 <_scanf_float+0x41c>)
 8009ea2:	f000 fa77 	bl	800a394 <nanf>
 8009ea6:	ed88 0a00 	vstr	s0, [r8]
 8009eaa:	e7cd      	b.n	8009e48 <_scanf_float+0x3a0>
 8009eac:	4630      	mov	r0, r6
 8009eae:	4639      	mov	r1, r7
 8009eb0:	f7f6 feaa 	bl	8000c08 <__aeabi_d2f>
 8009eb4:	f8c8 0000 	str.w	r0, [r8]
 8009eb8:	e7c6      	b.n	8009e48 <_scanf_float+0x3a0>
 8009eba:	2500      	movs	r5, #0
 8009ebc:	e635      	b.n	8009b2a <_scanf_float+0x82>
 8009ebe:	bf00      	nop
 8009ec0:	0800db90 	.word	0x0800db90
 8009ec4:	0800df25 	.word	0x0800df25

08009ec8 <std>:
 8009ec8:	2300      	movs	r3, #0
 8009eca:	b510      	push	{r4, lr}
 8009ecc:	4604      	mov	r4, r0
 8009ece:	e9c0 3300 	strd	r3, r3, [r0]
 8009ed2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009ed6:	6083      	str	r3, [r0, #8]
 8009ed8:	8181      	strh	r1, [r0, #12]
 8009eda:	6643      	str	r3, [r0, #100]	; 0x64
 8009edc:	81c2      	strh	r2, [r0, #14]
 8009ede:	6183      	str	r3, [r0, #24]
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	2208      	movs	r2, #8
 8009ee4:	305c      	adds	r0, #92	; 0x5c
 8009ee6:	f000 f9d4 	bl	800a292 <memset>
 8009eea:	4b0d      	ldr	r3, [pc, #52]	; (8009f20 <std+0x58>)
 8009eec:	6263      	str	r3, [r4, #36]	; 0x24
 8009eee:	4b0d      	ldr	r3, [pc, #52]	; (8009f24 <std+0x5c>)
 8009ef0:	62a3      	str	r3, [r4, #40]	; 0x28
 8009ef2:	4b0d      	ldr	r3, [pc, #52]	; (8009f28 <std+0x60>)
 8009ef4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ef6:	4b0d      	ldr	r3, [pc, #52]	; (8009f2c <std+0x64>)
 8009ef8:	6323      	str	r3, [r4, #48]	; 0x30
 8009efa:	4b0d      	ldr	r3, [pc, #52]	; (8009f30 <std+0x68>)
 8009efc:	6224      	str	r4, [r4, #32]
 8009efe:	429c      	cmp	r4, r3
 8009f00:	d006      	beq.n	8009f10 <std+0x48>
 8009f02:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009f06:	4294      	cmp	r4, r2
 8009f08:	d002      	beq.n	8009f10 <std+0x48>
 8009f0a:	33d0      	adds	r3, #208	; 0xd0
 8009f0c:	429c      	cmp	r4, r3
 8009f0e:	d105      	bne.n	8009f1c <std+0x54>
 8009f10:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f18:	f000 ba38 	b.w	800a38c <__retarget_lock_init_recursive>
 8009f1c:	bd10      	pop	{r4, pc}
 8009f1e:	bf00      	nop
 8009f20:	0800a20d 	.word	0x0800a20d
 8009f24:	0800a22f 	.word	0x0800a22f
 8009f28:	0800a267 	.word	0x0800a267
 8009f2c:	0800a28b 	.word	0x0800a28b
 8009f30:	20000ecc 	.word	0x20000ecc

08009f34 <stdio_exit_handler>:
 8009f34:	4a02      	ldr	r2, [pc, #8]	; (8009f40 <stdio_exit_handler+0xc>)
 8009f36:	4903      	ldr	r1, [pc, #12]	; (8009f44 <stdio_exit_handler+0x10>)
 8009f38:	4803      	ldr	r0, [pc, #12]	; (8009f48 <stdio_exit_handler+0x14>)
 8009f3a:	f000 b869 	b.w	800a010 <_fwalk_sglue>
 8009f3e:	bf00      	nop
 8009f40:	20000014 	.word	0x20000014
 8009f44:	0800cf61 	.word	0x0800cf61
 8009f48:	20000020 	.word	0x20000020

08009f4c <cleanup_stdio>:
 8009f4c:	6841      	ldr	r1, [r0, #4]
 8009f4e:	4b0c      	ldr	r3, [pc, #48]	; (8009f80 <cleanup_stdio+0x34>)
 8009f50:	4299      	cmp	r1, r3
 8009f52:	b510      	push	{r4, lr}
 8009f54:	4604      	mov	r4, r0
 8009f56:	d001      	beq.n	8009f5c <cleanup_stdio+0x10>
 8009f58:	f003 f802 	bl	800cf60 <_fflush_r>
 8009f5c:	68a1      	ldr	r1, [r4, #8]
 8009f5e:	4b09      	ldr	r3, [pc, #36]	; (8009f84 <cleanup_stdio+0x38>)
 8009f60:	4299      	cmp	r1, r3
 8009f62:	d002      	beq.n	8009f6a <cleanup_stdio+0x1e>
 8009f64:	4620      	mov	r0, r4
 8009f66:	f002 fffb 	bl	800cf60 <_fflush_r>
 8009f6a:	68e1      	ldr	r1, [r4, #12]
 8009f6c:	4b06      	ldr	r3, [pc, #24]	; (8009f88 <cleanup_stdio+0x3c>)
 8009f6e:	4299      	cmp	r1, r3
 8009f70:	d004      	beq.n	8009f7c <cleanup_stdio+0x30>
 8009f72:	4620      	mov	r0, r4
 8009f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f78:	f002 bff2 	b.w	800cf60 <_fflush_r>
 8009f7c:	bd10      	pop	{r4, pc}
 8009f7e:	bf00      	nop
 8009f80:	20000ecc 	.word	0x20000ecc
 8009f84:	20000f34 	.word	0x20000f34
 8009f88:	20000f9c 	.word	0x20000f9c

08009f8c <global_stdio_init.part.0>:
 8009f8c:	b510      	push	{r4, lr}
 8009f8e:	4b0b      	ldr	r3, [pc, #44]	; (8009fbc <global_stdio_init.part.0+0x30>)
 8009f90:	4c0b      	ldr	r4, [pc, #44]	; (8009fc0 <global_stdio_init.part.0+0x34>)
 8009f92:	4a0c      	ldr	r2, [pc, #48]	; (8009fc4 <global_stdio_init.part.0+0x38>)
 8009f94:	601a      	str	r2, [r3, #0]
 8009f96:	4620      	mov	r0, r4
 8009f98:	2200      	movs	r2, #0
 8009f9a:	2104      	movs	r1, #4
 8009f9c:	f7ff ff94 	bl	8009ec8 <std>
 8009fa0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009fa4:	2201      	movs	r2, #1
 8009fa6:	2109      	movs	r1, #9
 8009fa8:	f7ff ff8e 	bl	8009ec8 <std>
 8009fac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009fb0:	2202      	movs	r2, #2
 8009fb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009fb6:	2112      	movs	r1, #18
 8009fb8:	f7ff bf86 	b.w	8009ec8 <std>
 8009fbc:	20001004 	.word	0x20001004
 8009fc0:	20000ecc 	.word	0x20000ecc
 8009fc4:	08009f35 	.word	0x08009f35

08009fc8 <__sfp_lock_acquire>:
 8009fc8:	4801      	ldr	r0, [pc, #4]	; (8009fd0 <__sfp_lock_acquire+0x8>)
 8009fca:	f000 b9e0 	b.w	800a38e <__retarget_lock_acquire_recursive>
 8009fce:	bf00      	nop
 8009fd0:	2000100d 	.word	0x2000100d

08009fd4 <__sfp_lock_release>:
 8009fd4:	4801      	ldr	r0, [pc, #4]	; (8009fdc <__sfp_lock_release+0x8>)
 8009fd6:	f000 b9db 	b.w	800a390 <__retarget_lock_release_recursive>
 8009fda:	bf00      	nop
 8009fdc:	2000100d 	.word	0x2000100d

08009fe0 <__sinit>:
 8009fe0:	b510      	push	{r4, lr}
 8009fe2:	4604      	mov	r4, r0
 8009fe4:	f7ff fff0 	bl	8009fc8 <__sfp_lock_acquire>
 8009fe8:	6a23      	ldr	r3, [r4, #32]
 8009fea:	b11b      	cbz	r3, 8009ff4 <__sinit+0x14>
 8009fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ff0:	f7ff bff0 	b.w	8009fd4 <__sfp_lock_release>
 8009ff4:	4b04      	ldr	r3, [pc, #16]	; (800a008 <__sinit+0x28>)
 8009ff6:	6223      	str	r3, [r4, #32]
 8009ff8:	4b04      	ldr	r3, [pc, #16]	; (800a00c <__sinit+0x2c>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d1f5      	bne.n	8009fec <__sinit+0xc>
 800a000:	f7ff ffc4 	bl	8009f8c <global_stdio_init.part.0>
 800a004:	e7f2      	b.n	8009fec <__sinit+0xc>
 800a006:	bf00      	nop
 800a008:	08009f4d 	.word	0x08009f4d
 800a00c:	20001004 	.word	0x20001004

0800a010 <_fwalk_sglue>:
 800a010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a014:	4607      	mov	r7, r0
 800a016:	4688      	mov	r8, r1
 800a018:	4614      	mov	r4, r2
 800a01a:	2600      	movs	r6, #0
 800a01c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a020:	f1b9 0901 	subs.w	r9, r9, #1
 800a024:	d505      	bpl.n	800a032 <_fwalk_sglue+0x22>
 800a026:	6824      	ldr	r4, [r4, #0]
 800a028:	2c00      	cmp	r4, #0
 800a02a:	d1f7      	bne.n	800a01c <_fwalk_sglue+0xc>
 800a02c:	4630      	mov	r0, r6
 800a02e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a032:	89ab      	ldrh	r3, [r5, #12]
 800a034:	2b01      	cmp	r3, #1
 800a036:	d907      	bls.n	800a048 <_fwalk_sglue+0x38>
 800a038:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a03c:	3301      	adds	r3, #1
 800a03e:	d003      	beq.n	800a048 <_fwalk_sglue+0x38>
 800a040:	4629      	mov	r1, r5
 800a042:	4638      	mov	r0, r7
 800a044:	47c0      	blx	r8
 800a046:	4306      	orrs	r6, r0
 800a048:	3568      	adds	r5, #104	; 0x68
 800a04a:	e7e9      	b.n	800a020 <_fwalk_sglue+0x10>

0800a04c <iprintf>:
 800a04c:	b40f      	push	{r0, r1, r2, r3}
 800a04e:	b507      	push	{r0, r1, r2, lr}
 800a050:	4906      	ldr	r1, [pc, #24]	; (800a06c <iprintf+0x20>)
 800a052:	ab04      	add	r3, sp, #16
 800a054:	6808      	ldr	r0, [r1, #0]
 800a056:	f853 2b04 	ldr.w	r2, [r3], #4
 800a05a:	6881      	ldr	r1, [r0, #8]
 800a05c:	9301      	str	r3, [sp, #4]
 800a05e:	f002 fddf 	bl	800cc20 <_vfiprintf_r>
 800a062:	b003      	add	sp, #12
 800a064:	f85d eb04 	ldr.w	lr, [sp], #4
 800a068:	b004      	add	sp, #16
 800a06a:	4770      	bx	lr
 800a06c:	2000006c 	.word	0x2000006c

0800a070 <setvbuf>:
 800a070:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a074:	461d      	mov	r5, r3
 800a076:	4b54      	ldr	r3, [pc, #336]	; (800a1c8 <setvbuf+0x158>)
 800a078:	681f      	ldr	r7, [r3, #0]
 800a07a:	4604      	mov	r4, r0
 800a07c:	460e      	mov	r6, r1
 800a07e:	4690      	mov	r8, r2
 800a080:	b127      	cbz	r7, 800a08c <setvbuf+0x1c>
 800a082:	6a3b      	ldr	r3, [r7, #32]
 800a084:	b913      	cbnz	r3, 800a08c <setvbuf+0x1c>
 800a086:	4638      	mov	r0, r7
 800a088:	f7ff ffaa 	bl	8009fe0 <__sinit>
 800a08c:	f1b8 0f02 	cmp.w	r8, #2
 800a090:	d006      	beq.n	800a0a0 <setvbuf+0x30>
 800a092:	f1b8 0f01 	cmp.w	r8, #1
 800a096:	f200 8094 	bhi.w	800a1c2 <setvbuf+0x152>
 800a09a:	2d00      	cmp	r5, #0
 800a09c:	f2c0 8091 	blt.w	800a1c2 <setvbuf+0x152>
 800a0a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a0a2:	07da      	lsls	r2, r3, #31
 800a0a4:	d405      	bmi.n	800a0b2 <setvbuf+0x42>
 800a0a6:	89a3      	ldrh	r3, [r4, #12]
 800a0a8:	059b      	lsls	r3, r3, #22
 800a0aa:	d402      	bmi.n	800a0b2 <setvbuf+0x42>
 800a0ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0ae:	f000 f96e 	bl	800a38e <__retarget_lock_acquire_recursive>
 800a0b2:	4621      	mov	r1, r4
 800a0b4:	4638      	mov	r0, r7
 800a0b6:	f002 ff53 	bl	800cf60 <_fflush_r>
 800a0ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0bc:	b141      	cbz	r1, 800a0d0 <setvbuf+0x60>
 800a0be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0c2:	4299      	cmp	r1, r3
 800a0c4:	d002      	beq.n	800a0cc <setvbuf+0x5c>
 800a0c6:	4638      	mov	r0, r7
 800a0c8:	f000 ffe4 	bl	800b094 <_free_r>
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	6363      	str	r3, [r4, #52]	; 0x34
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	61a3      	str	r3, [r4, #24]
 800a0d4:	6063      	str	r3, [r4, #4]
 800a0d6:	89a3      	ldrh	r3, [r4, #12]
 800a0d8:	0618      	lsls	r0, r3, #24
 800a0da:	d503      	bpl.n	800a0e4 <setvbuf+0x74>
 800a0dc:	6921      	ldr	r1, [r4, #16]
 800a0de:	4638      	mov	r0, r7
 800a0e0:	f000 ffd8 	bl	800b094 <_free_r>
 800a0e4:	89a3      	ldrh	r3, [r4, #12]
 800a0e6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800a0ea:	f023 0303 	bic.w	r3, r3, #3
 800a0ee:	f1b8 0f02 	cmp.w	r8, #2
 800a0f2:	81a3      	strh	r3, [r4, #12]
 800a0f4:	d05f      	beq.n	800a1b6 <setvbuf+0x146>
 800a0f6:	ab01      	add	r3, sp, #4
 800a0f8:	466a      	mov	r2, sp
 800a0fa:	4621      	mov	r1, r4
 800a0fc:	4638      	mov	r0, r7
 800a0fe:	f002 ff57 	bl	800cfb0 <__swhatbuf_r>
 800a102:	89a3      	ldrh	r3, [r4, #12]
 800a104:	4318      	orrs	r0, r3
 800a106:	81a0      	strh	r0, [r4, #12]
 800a108:	bb2d      	cbnz	r5, 800a156 <setvbuf+0xe6>
 800a10a:	9d00      	ldr	r5, [sp, #0]
 800a10c:	4628      	mov	r0, r5
 800a10e:	f001 f80d 	bl	800b12c <malloc>
 800a112:	4606      	mov	r6, r0
 800a114:	2800      	cmp	r0, #0
 800a116:	d150      	bne.n	800a1ba <setvbuf+0x14a>
 800a118:	f8dd 9000 	ldr.w	r9, [sp]
 800a11c:	45a9      	cmp	r9, r5
 800a11e:	d13e      	bne.n	800a19e <setvbuf+0x12e>
 800a120:	f04f 35ff 	mov.w	r5, #4294967295
 800a124:	2200      	movs	r2, #0
 800a126:	60a2      	str	r2, [r4, #8]
 800a128:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800a12c:	6022      	str	r2, [r4, #0]
 800a12e:	6122      	str	r2, [r4, #16]
 800a130:	2201      	movs	r2, #1
 800a132:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a136:	6162      	str	r2, [r4, #20]
 800a138:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a13a:	f043 0302 	orr.w	r3, r3, #2
 800a13e:	07d1      	lsls	r1, r2, #31
 800a140:	81a3      	strh	r3, [r4, #12]
 800a142:	d404      	bmi.n	800a14e <setvbuf+0xde>
 800a144:	059b      	lsls	r3, r3, #22
 800a146:	d402      	bmi.n	800a14e <setvbuf+0xde>
 800a148:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a14a:	f000 f921 	bl	800a390 <__retarget_lock_release_recursive>
 800a14e:	4628      	mov	r0, r5
 800a150:	b003      	add	sp, #12
 800a152:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a156:	2e00      	cmp	r6, #0
 800a158:	d0d8      	beq.n	800a10c <setvbuf+0x9c>
 800a15a:	6a3b      	ldr	r3, [r7, #32]
 800a15c:	b913      	cbnz	r3, 800a164 <setvbuf+0xf4>
 800a15e:	4638      	mov	r0, r7
 800a160:	f7ff ff3e 	bl	8009fe0 <__sinit>
 800a164:	f1b8 0f01 	cmp.w	r8, #1
 800a168:	bf08      	it	eq
 800a16a:	89a3      	ldrheq	r3, [r4, #12]
 800a16c:	6026      	str	r6, [r4, #0]
 800a16e:	bf04      	itt	eq
 800a170:	f043 0301 	orreq.w	r3, r3, #1
 800a174:	81a3      	strheq	r3, [r4, #12]
 800a176:	89a3      	ldrh	r3, [r4, #12]
 800a178:	f013 0208 	ands.w	r2, r3, #8
 800a17c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800a180:	d01d      	beq.n	800a1be <setvbuf+0x14e>
 800a182:	07da      	lsls	r2, r3, #31
 800a184:	bf41      	itttt	mi
 800a186:	2200      	movmi	r2, #0
 800a188:	426d      	negmi	r5, r5
 800a18a:	60a2      	strmi	r2, [r4, #8]
 800a18c:	61a5      	strmi	r5, [r4, #24]
 800a18e:	bf58      	it	pl
 800a190:	60a5      	strpl	r5, [r4, #8]
 800a192:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800a194:	f015 0501 	ands.w	r5, r5, #1
 800a198:	d0d4      	beq.n	800a144 <setvbuf+0xd4>
 800a19a:	2500      	movs	r5, #0
 800a19c:	e7d7      	b.n	800a14e <setvbuf+0xde>
 800a19e:	4648      	mov	r0, r9
 800a1a0:	f000 ffc4 	bl	800b12c <malloc>
 800a1a4:	4606      	mov	r6, r0
 800a1a6:	2800      	cmp	r0, #0
 800a1a8:	d0ba      	beq.n	800a120 <setvbuf+0xb0>
 800a1aa:	89a3      	ldrh	r3, [r4, #12]
 800a1ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1b0:	81a3      	strh	r3, [r4, #12]
 800a1b2:	464d      	mov	r5, r9
 800a1b4:	e7d1      	b.n	800a15a <setvbuf+0xea>
 800a1b6:	2500      	movs	r5, #0
 800a1b8:	e7b4      	b.n	800a124 <setvbuf+0xb4>
 800a1ba:	46a9      	mov	r9, r5
 800a1bc:	e7f5      	b.n	800a1aa <setvbuf+0x13a>
 800a1be:	60a2      	str	r2, [r4, #8]
 800a1c0:	e7e7      	b.n	800a192 <setvbuf+0x122>
 800a1c2:	f04f 35ff 	mov.w	r5, #4294967295
 800a1c6:	e7c2      	b.n	800a14e <setvbuf+0xde>
 800a1c8:	2000006c 	.word	0x2000006c

0800a1cc <siprintf>:
 800a1cc:	b40e      	push	{r1, r2, r3}
 800a1ce:	b500      	push	{lr}
 800a1d0:	b09c      	sub	sp, #112	; 0x70
 800a1d2:	ab1d      	add	r3, sp, #116	; 0x74
 800a1d4:	9002      	str	r0, [sp, #8]
 800a1d6:	9006      	str	r0, [sp, #24]
 800a1d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a1dc:	4809      	ldr	r0, [pc, #36]	; (800a204 <siprintf+0x38>)
 800a1de:	9107      	str	r1, [sp, #28]
 800a1e0:	9104      	str	r1, [sp, #16]
 800a1e2:	4909      	ldr	r1, [pc, #36]	; (800a208 <siprintf+0x3c>)
 800a1e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1e8:	9105      	str	r1, [sp, #20]
 800a1ea:	6800      	ldr	r0, [r0, #0]
 800a1ec:	9301      	str	r3, [sp, #4]
 800a1ee:	a902      	add	r1, sp, #8
 800a1f0:	f002 fbee 	bl	800c9d0 <_svfiprintf_r>
 800a1f4:	9b02      	ldr	r3, [sp, #8]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	701a      	strb	r2, [r3, #0]
 800a1fa:	b01c      	add	sp, #112	; 0x70
 800a1fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a200:	b003      	add	sp, #12
 800a202:	4770      	bx	lr
 800a204:	2000006c 	.word	0x2000006c
 800a208:	ffff0208 	.word	0xffff0208

0800a20c <__sread>:
 800a20c:	b510      	push	{r4, lr}
 800a20e:	460c      	mov	r4, r1
 800a210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a214:	f000 f86c 	bl	800a2f0 <_read_r>
 800a218:	2800      	cmp	r0, #0
 800a21a:	bfab      	itete	ge
 800a21c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a21e:	89a3      	ldrhlt	r3, [r4, #12]
 800a220:	181b      	addge	r3, r3, r0
 800a222:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a226:	bfac      	ite	ge
 800a228:	6563      	strge	r3, [r4, #84]	; 0x54
 800a22a:	81a3      	strhlt	r3, [r4, #12]
 800a22c:	bd10      	pop	{r4, pc}

0800a22e <__swrite>:
 800a22e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a232:	461f      	mov	r7, r3
 800a234:	898b      	ldrh	r3, [r1, #12]
 800a236:	05db      	lsls	r3, r3, #23
 800a238:	4605      	mov	r5, r0
 800a23a:	460c      	mov	r4, r1
 800a23c:	4616      	mov	r6, r2
 800a23e:	d505      	bpl.n	800a24c <__swrite+0x1e>
 800a240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a244:	2302      	movs	r3, #2
 800a246:	2200      	movs	r2, #0
 800a248:	f000 f840 	bl	800a2cc <_lseek_r>
 800a24c:	89a3      	ldrh	r3, [r4, #12]
 800a24e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a252:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a256:	81a3      	strh	r3, [r4, #12]
 800a258:	4632      	mov	r2, r6
 800a25a:	463b      	mov	r3, r7
 800a25c:	4628      	mov	r0, r5
 800a25e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a262:	f000 b857 	b.w	800a314 <_write_r>

0800a266 <__sseek>:
 800a266:	b510      	push	{r4, lr}
 800a268:	460c      	mov	r4, r1
 800a26a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a26e:	f000 f82d 	bl	800a2cc <_lseek_r>
 800a272:	1c43      	adds	r3, r0, #1
 800a274:	89a3      	ldrh	r3, [r4, #12]
 800a276:	bf15      	itete	ne
 800a278:	6560      	strne	r0, [r4, #84]	; 0x54
 800a27a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a27e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a282:	81a3      	strheq	r3, [r4, #12]
 800a284:	bf18      	it	ne
 800a286:	81a3      	strhne	r3, [r4, #12]
 800a288:	bd10      	pop	{r4, pc}

0800a28a <__sclose>:
 800a28a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a28e:	f000 b80d 	b.w	800a2ac <_close_r>

0800a292 <memset>:
 800a292:	4402      	add	r2, r0
 800a294:	4603      	mov	r3, r0
 800a296:	4293      	cmp	r3, r2
 800a298:	d100      	bne.n	800a29c <memset+0xa>
 800a29a:	4770      	bx	lr
 800a29c:	f803 1b01 	strb.w	r1, [r3], #1
 800a2a0:	e7f9      	b.n	800a296 <memset+0x4>
	...

0800a2a4 <_localeconv_r>:
 800a2a4:	4800      	ldr	r0, [pc, #0]	; (800a2a8 <_localeconv_r+0x4>)
 800a2a6:	4770      	bx	lr
 800a2a8:	20000160 	.word	0x20000160

0800a2ac <_close_r>:
 800a2ac:	b538      	push	{r3, r4, r5, lr}
 800a2ae:	4d06      	ldr	r5, [pc, #24]	; (800a2c8 <_close_r+0x1c>)
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	4604      	mov	r4, r0
 800a2b4:	4608      	mov	r0, r1
 800a2b6:	602b      	str	r3, [r5, #0]
 800a2b8:	f7f9 fad7 	bl	800386a <_close>
 800a2bc:	1c43      	adds	r3, r0, #1
 800a2be:	d102      	bne.n	800a2c6 <_close_r+0x1a>
 800a2c0:	682b      	ldr	r3, [r5, #0]
 800a2c2:	b103      	cbz	r3, 800a2c6 <_close_r+0x1a>
 800a2c4:	6023      	str	r3, [r4, #0]
 800a2c6:	bd38      	pop	{r3, r4, r5, pc}
 800a2c8:	20001008 	.word	0x20001008

0800a2cc <_lseek_r>:
 800a2cc:	b538      	push	{r3, r4, r5, lr}
 800a2ce:	4d07      	ldr	r5, [pc, #28]	; (800a2ec <_lseek_r+0x20>)
 800a2d0:	4604      	mov	r4, r0
 800a2d2:	4608      	mov	r0, r1
 800a2d4:	4611      	mov	r1, r2
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	602a      	str	r2, [r5, #0]
 800a2da:	461a      	mov	r2, r3
 800a2dc:	f7f9 faec 	bl	80038b8 <_lseek>
 800a2e0:	1c43      	adds	r3, r0, #1
 800a2e2:	d102      	bne.n	800a2ea <_lseek_r+0x1e>
 800a2e4:	682b      	ldr	r3, [r5, #0]
 800a2e6:	b103      	cbz	r3, 800a2ea <_lseek_r+0x1e>
 800a2e8:	6023      	str	r3, [r4, #0]
 800a2ea:	bd38      	pop	{r3, r4, r5, pc}
 800a2ec:	20001008 	.word	0x20001008

0800a2f0 <_read_r>:
 800a2f0:	b538      	push	{r3, r4, r5, lr}
 800a2f2:	4d07      	ldr	r5, [pc, #28]	; (800a310 <_read_r+0x20>)
 800a2f4:	4604      	mov	r4, r0
 800a2f6:	4608      	mov	r0, r1
 800a2f8:	4611      	mov	r1, r2
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	602a      	str	r2, [r5, #0]
 800a2fe:	461a      	mov	r2, r3
 800a300:	f7f9 fa96 	bl	8003830 <_read>
 800a304:	1c43      	adds	r3, r0, #1
 800a306:	d102      	bne.n	800a30e <_read_r+0x1e>
 800a308:	682b      	ldr	r3, [r5, #0]
 800a30a:	b103      	cbz	r3, 800a30e <_read_r+0x1e>
 800a30c:	6023      	str	r3, [r4, #0]
 800a30e:	bd38      	pop	{r3, r4, r5, pc}
 800a310:	20001008 	.word	0x20001008

0800a314 <_write_r>:
 800a314:	b538      	push	{r3, r4, r5, lr}
 800a316:	4d07      	ldr	r5, [pc, #28]	; (800a334 <_write_r+0x20>)
 800a318:	4604      	mov	r4, r0
 800a31a:	4608      	mov	r0, r1
 800a31c:	4611      	mov	r1, r2
 800a31e:	2200      	movs	r2, #0
 800a320:	602a      	str	r2, [r5, #0]
 800a322:	461a      	mov	r2, r3
 800a324:	f7f6 fe74 	bl	8001010 <_write>
 800a328:	1c43      	adds	r3, r0, #1
 800a32a:	d102      	bne.n	800a332 <_write_r+0x1e>
 800a32c:	682b      	ldr	r3, [r5, #0]
 800a32e:	b103      	cbz	r3, 800a332 <_write_r+0x1e>
 800a330:	6023      	str	r3, [r4, #0]
 800a332:	bd38      	pop	{r3, r4, r5, pc}
 800a334:	20001008 	.word	0x20001008

0800a338 <__errno>:
 800a338:	4b01      	ldr	r3, [pc, #4]	; (800a340 <__errno+0x8>)
 800a33a:	6818      	ldr	r0, [r3, #0]
 800a33c:	4770      	bx	lr
 800a33e:	bf00      	nop
 800a340:	2000006c 	.word	0x2000006c

0800a344 <__libc_init_array>:
 800a344:	b570      	push	{r4, r5, r6, lr}
 800a346:	4d0d      	ldr	r5, [pc, #52]	; (800a37c <__libc_init_array+0x38>)
 800a348:	4c0d      	ldr	r4, [pc, #52]	; (800a380 <__libc_init_array+0x3c>)
 800a34a:	1b64      	subs	r4, r4, r5
 800a34c:	10a4      	asrs	r4, r4, #2
 800a34e:	2600      	movs	r6, #0
 800a350:	42a6      	cmp	r6, r4
 800a352:	d109      	bne.n	800a368 <__libc_init_array+0x24>
 800a354:	4d0b      	ldr	r5, [pc, #44]	; (800a384 <__libc_init_array+0x40>)
 800a356:	4c0c      	ldr	r4, [pc, #48]	; (800a388 <__libc_init_array+0x44>)
 800a358:	f003 fbd6 	bl	800db08 <_init>
 800a35c:	1b64      	subs	r4, r4, r5
 800a35e:	10a4      	asrs	r4, r4, #2
 800a360:	2600      	movs	r6, #0
 800a362:	42a6      	cmp	r6, r4
 800a364:	d105      	bne.n	800a372 <__libc_init_array+0x2e>
 800a366:	bd70      	pop	{r4, r5, r6, pc}
 800a368:	f855 3b04 	ldr.w	r3, [r5], #4
 800a36c:	4798      	blx	r3
 800a36e:	3601      	adds	r6, #1
 800a370:	e7ee      	b.n	800a350 <__libc_init_array+0xc>
 800a372:	f855 3b04 	ldr.w	r3, [r5], #4
 800a376:	4798      	blx	r3
 800a378:	3601      	adds	r6, #1
 800a37a:	e7f2      	b.n	800a362 <__libc_init_array+0x1e>
 800a37c:	0800df90 	.word	0x0800df90
 800a380:	0800df90 	.word	0x0800df90
 800a384:	0800df90 	.word	0x0800df90
 800a388:	0800df94 	.word	0x0800df94

0800a38c <__retarget_lock_init_recursive>:
 800a38c:	4770      	bx	lr

0800a38e <__retarget_lock_acquire_recursive>:
 800a38e:	4770      	bx	lr

0800a390 <__retarget_lock_release_recursive>:
 800a390:	4770      	bx	lr
	...

0800a394 <nanf>:
 800a394:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a39c <nanf+0x8>
 800a398:	4770      	bx	lr
 800a39a:	bf00      	nop
 800a39c:	7fc00000 	.word	0x7fc00000

0800a3a0 <quorem>:
 800a3a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3a4:	6903      	ldr	r3, [r0, #16]
 800a3a6:	690c      	ldr	r4, [r1, #16]
 800a3a8:	42a3      	cmp	r3, r4
 800a3aa:	4607      	mov	r7, r0
 800a3ac:	db7e      	blt.n	800a4ac <quorem+0x10c>
 800a3ae:	3c01      	subs	r4, #1
 800a3b0:	f101 0814 	add.w	r8, r1, #20
 800a3b4:	f100 0514 	add.w	r5, r0, #20
 800a3b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a3bc:	9301      	str	r3, [sp, #4]
 800a3be:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a3c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a3c6:	3301      	adds	r3, #1
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a3ce:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a3d2:	fbb2 f6f3 	udiv	r6, r2, r3
 800a3d6:	d331      	bcc.n	800a43c <quorem+0x9c>
 800a3d8:	f04f 0e00 	mov.w	lr, #0
 800a3dc:	4640      	mov	r0, r8
 800a3de:	46ac      	mov	ip, r5
 800a3e0:	46f2      	mov	sl, lr
 800a3e2:	f850 2b04 	ldr.w	r2, [r0], #4
 800a3e6:	b293      	uxth	r3, r2
 800a3e8:	fb06 e303 	mla	r3, r6, r3, lr
 800a3ec:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a3f0:	0c1a      	lsrs	r2, r3, #16
 800a3f2:	b29b      	uxth	r3, r3
 800a3f4:	ebaa 0303 	sub.w	r3, sl, r3
 800a3f8:	f8dc a000 	ldr.w	sl, [ip]
 800a3fc:	fa13 f38a 	uxtah	r3, r3, sl
 800a400:	fb06 220e 	mla	r2, r6, lr, r2
 800a404:	9300      	str	r3, [sp, #0]
 800a406:	9b00      	ldr	r3, [sp, #0]
 800a408:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a40c:	b292      	uxth	r2, r2
 800a40e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a412:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a416:	f8bd 3000 	ldrh.w	r3, [sp]
 800a41a:	4581      	cmp	r9, r0
 800a41c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a420:	f84c 3b04 	str.w	r3, [ip], #4
 800a424:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a428:	d2db      	bcs.n	800a3e2 <quorem+0x42>
 800a42a:	f855 300b 	ldr.w	r3, [r5, fp]
 800a42e:	b92b      	cbnz	r3, 800a43c <quorem+0x9c>
 800a430:	9b01      	ldr	r3, [sp, #4]
 800a432:	3b04      	subs	r3, #4
 800a434:	429d      	cmp	r5, r3
 800a436:	461a      	mov	r2, r3
 800a438:	d32c      	bcc.n	800a494 <quorem+0xf4>
 800a43a:	613c      	str	r4, [r7, #16]
 800a43c:	4638      	mov	r0, r7
 800a43e:	f001 f9ef 	bl	800b820 <__mcmp>
 800a442:	2800      	cmp	r0, #0
 800a444:	db22      	blt.n	800a48c <quorem+0xec>
 800a446:	3601      	adds	r6, #1
 800a448:	4629      	mov	r1, r5
 800a44a:	2000      	movs	r0, #0
 800a44c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a450:	f8d1 c000 	ldr.w	ip, [r1]
 800a454:	b293      	uxth	r3, r2
 800a456:	1ac3      	subs	r3, r0, r3
 800a458:	0c12      	lsrs	r2, r2, #16
 800a45a:	fa13 f38c 	uxtah	r3, r3, ip
 800a45e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a462:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a466:	b29b      	uxth	r3, r3
 800a468:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a46c:	45c1      	cmp	r9, r8
 800a46e:	f841 3b04 	str.w	r3, [r1], #4
 800a472:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a476:	d2e9      	bcs.n	800a44c <quorem+0xac>
 800a478:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a47c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a480:	b922      	cbnz	r2, 800a48c <quorem+0xec>
 800a482:	3b04      	subs	r3, #4
 800a484:	429d      	cmp	r5, r3
 800a486:	461a      	mov	r2, r3
 800a488:	d30a      	bcc.n	800a4a0 <quorem+0x100>
 800a48a:	613c      	str	r4, [r7, #16]
 800a48c:	4630      	mov	r0, r6
 800a48e:	b003      	add	sp, #12
 800a490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a494:	6812      	ldr	r2, [r2, #0]
 800a496:	3b04      	subs	r3, #4
 800a498:	2a00      	cmp	r2, #0
 800a49a:	d1ce      	bne.n	800a43a <quorem+0x9a>
 800a49c:	3c01      	subs	r4, #1
 800a49e:	e7c9      	b.n	800a434 <quorem+0x94>
 800a4a0:	6812      	ldr	r2, [r2, #0]
 800a4a2:	3b04      	subs	r3, #4
 800a4a4:	2a00      	cmp	r2, #0
 800a4a6:	d1f0      	bne.n	800a48a <quorem+0xea>
 800a4a8:	3c01      	subs	r4, #1
 800a4aa:	e7eb      	b.n	800a484 <quorem+0xe4>
 800a4ac:	2000      	movs	r0, #0
 800a4ae:	e7ee      	b.n	800a48e <quorem+0xee>

0800a4b0 <_dtoa_r>:
 800a4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4b4:	ed2d 8b04 	vpush	{d8-d9}
 800a4b8:	69c5      	ldr	r5, [r0, #28]
 800a4ba:	b093      	sub	sp, #76	; 0x4c
 800a4bc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a4c0:	ec57 6b10 	vmov	r6, r7, d0
 800a4c4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a4c8:	9107      	str	r1, [sp, #28]
 800a4ca:	4604      	mov	r4, r0
 800a4cc:	920a      	str	r2, [sp, #40]	; 0x28
 800a4ce:	930d      	str	r3, [sp, #52]	; 0x34
 800a4d0:	b975      	cbnz	r5, 800a4f0 <_dtoa_r+0x40>
 800a4d2:	2010      	movs	r0, #16
 800a4d4:	f000 fe2a 	bl	800b12c <malloc>
 800a4d8:	4602      	mov	r2, r0
 800a4da:	61e0      	str	r0, [r4, #28]
 800a4dc:	b920      	cbnz	r0, 800a4e8 <_dtoa_r+0x38>
 800a4de:	4bae      	ldr	r3, [pc, #696]	; (800a798 <_dtoa_r+0x2e8>)
 800a4e0:	21ef      	movs	r1, #239	; 0xef
 800a4e2:	48ae      	ldr	r0, [pc, #696]	; (800a79c <_dtoa_r+0x2ec>)
 800a4e4:	f002 fed0 	bl	800d288 <__assert_func>
 800a4e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a4ec:	6005      	str	r5, [r0, #0]
 800a4ee:	60c5      	str	r5, [r0, #12]
 800a4f0:	69e3      	ldr	r3, [r4, #28]
 800a4f2:	6819      	ldr	r1, [r3, #0]
 800a4f4:	b151      	cbz	r1, 800a50c <_dtoa_r+0x5c>
 800a4f6:	685a      	ldr	r2, [r3, #4]
 800a4f8:	604a      	str	r2, [r1, #4]
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	4093      	lsls	r3, r2
 800a4fe:	608b      	str	r3, [r1, #8]
 800a500:	4620      	mov	r0, r4
 800a502:	f000 ff07 	bl	800b314 <_Bfree>
 800a506:	69e3      	ldr	r3, [r4, #28]
 800a508:	2200      	movs	r2, #0
 800a50a:	601a      	str	r2, [r3, #0]
 800a50c:	1e3b      	subs	r3, r7, #0
 800a50e:	bfbb      	ittet	lt
 800a510:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a514:	9303      	strlt	r3, [sp, #12]
 800a516:	2300      	movge	r3, #0
 800a518:	2201      	movlt	r2, #1
 800a51a:	bfac      	ite	ge
 800a51c:	f8c8 3000 	strge.w	r3, [r8]
 800a520:	f8c8 2000 	strlt.w	r2, [r8]
 800a524:	4b9e      	ldr	r3, [pc, #632]	; (800a7a0 <_dtoa_r+0x2f0>)
 800a526:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a52a:	ea33 0308 	bics.w	r3, r3, r8
 800a52e:	d11b      	bne.n	800a568 <_dtoa_r+0xb8>
 800a530:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a532:	f242 730f 	movw	r3, #9999	; 0x270f
 800a536:	6013      	str	r3, [r2, #0]
 800a538:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a53c:	4333      	orrs	r3, r6
 800a53e:	f000 8593 	beq.w	800b068 <_dtoa_r+0xbb8>
 800a542:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a544:	b963      	cbnz	r3, 800a560 <_dtoa_r+0xb0>
 800a546:	4b97      	ldr	r3, [pc, #604]	; (800a7a4 <_dtoa_r+0x2f4>)
 800a548:	e027      	b.n	800a59a <_dtoa_r+0xea>
 800a54a:	4b97      	ldr	r3, [pc, #604]	; (800a7a8 <_dtoa_r+0x2f8>)
 800a54c:	9300      	str	r3, [sp, #0]
 800a54e:	3308      	adds	r3, #8
 800a550:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a552:	6013      	str	r3, [r2, #0]
 800a554:	9800      	ldr	r0, [sp, #0]
 800a556:	b013      	add	sp, #76	; 0x4c
 800a558:	ecbd 8b04 	vpop	{d8-d9}
 800a55c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a560:	4b90      	ldr	r3, [pc, #576]	; (800a7a4 <_dtoa_r+0x2f4>)
 800a562:	9300      	str	r3, [sp, #0]
 800a564:	3303      	adds	r3, #3
 800a566:	e7f3      	b.n	800a550 <_dtoa_r+0xa0>
 800a568:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a56c:	2200      	movs	r2, #0
 800a56e:	ec51 0b17 	vmov	r0, r1, d7
 800a572:	eeb0 8a47 	vmov.f32	s16, s14
 800a576:	eef0 8a67 	vmov.f32	s17, s15
 800a57a:	2300      	movs	r3, #0
 800a57c:	f7f6 fab4 	bl	8000ae8 <__aeabi_dcmpeq>
 800a580:	4681      	mov	r9, r0
 800a582:	b160      	cbz	r0, 800a59e <_dtoa_r+0xee>
 800a584:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a586:	2301      	movs	r3, #1
 800a588:	6013      	str	r3, [r2, #0]
 800a58a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	f000 8568 	beq.w	800b062 <_dtoa_r+0xbb2>
 800a592:	4b86      	ldr	r3, [pc, #536]	; (800a7ac <_dtoa_r+0x2fc>)
 800a594:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a596:	6013      	str	r3, [r2, #0]
 800a598:	3b01      	subs	r3, #1
 800a59a:	9300      	str	r3, [sp, #0]
 800a59c:	e7da      	b.n	800a554 <_dtoa_r+0xa4>
 800a59e:	aa10      	add	r2, sp, #64	; 0x40
 800a5a0:	a911      	add	r1, sp, #68	; 0x44
 800a5a2:	4620      	mov	r0, r4
 800a5a4:	eeb0 0a48 	vmov.f32	s0, s16
 800a5a8:	eef0 0a68 	vmov.f32	s1, s17
 800a5ac:	f001 fa4e 	bl	800ba4c <__d2b>
 800a5b0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a5b4:	4682      	mov	sl, r0
 800a5b6:	2d00      	cmp	r5, #0
 800a5b8:	d07f      	beq.n	800a6ba <_dtoa_r+0x20a>
 800a5ba:	ee18 3a90 	vmov	r3, s17
 800a5be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5c2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a5c6:	ec51 0b18 	vmov	r0, r1, d8
 800a5ca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a5ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a5d2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a5d6:	4619      	mov	r1, r3
 800a5d8:	2200      	movs	r2, #0
 800a5da:	4b75      	ldr	r3, [pc, #468]	; (800a7b0 <_dtoa_r+0x300>)
 800a5dc:	f7f5 fe64 	bl	80002a8 <__aeabi_dsub>
 800a5e0:	a367      	add	r3, pc, #412	; (adr r3, 800a780 <_dtoa_r+0x2d0>)
 800a5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e6:	f7f6 f817 	bl	8000618 <__aeabi_dmul>
 800a5ea:	a367      	add	r3, pc, #412	; (adr r3, 800a788 <_dtoa_r+0x2d8>)
 800a5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f0:	f7f5 fe5c 	bl	80002ac <__adddf3>
 800a5f4:	4606      	mov	r6, r0
 800a5f6:	4628      	mov	r0, r5
 800a5f8:	460f      	mov	r7, r1
 800a5fa:	f7f5 ffa3 	bl	8000544 <__aeabi_i2d>
 800a5fe:	a364      	add	r3, pc, #400	; (adr r3, 800a790 <_dtoa_r+0x2e0>)
 800a600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a604:	f7f6 f808 	bl	8000618 <__aeabi_dmul>
 800a608:	4602      	mov	r2, r0
 800a60a:	460b      	mov	r3, r1
 800a60c:	4630      	mov	r0, r6
 800a60e:	4639      	mov	r1, r7
 800a610:	f7f5 fe4c 	bl	80002ac <__adddf3>
 800a614:	4606      	mov	r6, r0
 800a616:	460f      	mov	r7, r1
 800a618:	f7f6 faae 	bl	8000b78 <__aeabi_d2iz>
 800a61c:	2200      	movs	r2, #0
 800a61e:	4683      	mov	fp, r0
 800a620:	2300      	movs	r3, #0
 800a622:	4630      	mov	r0, r6
 800a624:	4639      	mov	r1, r7
 800a626:	f7f6 fa69 	bl	8000afc <__aeabi_dcmplt>
 800a62a:	b148      	cbz	r0, 800a640 <_dtoa_r+0x190>
 800a62c:	4658      	mov	r0, fp
 800a62e:	f7f5 ff89 	bl	8000544 <__aeabi_i2d>
 800a632:	4632      	mov	r2, r6
 800a634:	463b      	mov	r3, r7
 800a636:	f7f6 fa57 	bl	8000ae8 <__aeabi_dcmpeq>
 800a63a:	b908      	cbnz	r0, 800a640 <_dtoa_r+0x190>
 800a63c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a640:	f1bb 0f16 	cmp.w	fp, #22
 800a644:	d857      	bhi.n	800a6f6 <_dtoa_r+0x246>
 800a646:	4b5b      	ldr	r3, [pc, #364]	; (800a7b4 <_dtoa_r+0x304>)
 800a648:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a650:	ec51 0b18 	vmov	r0, r1, d8
 800a654:	f7f6 fa52 	bl	8000afc <__aeabi_dcmplt>
 800a658:	2800      	cmp	r0, #0
 800a65a:	d04e      	beq.n	800a6fa <_dtoa_r+0x24a>
 800a65c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a660:	2300      	movs	r3, #0
 800a662:	930c      	str	r3, [sp, #48]	; 0x30
 800a664:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a666:	1b5b      	subs	r3, r3, r5
 800a668:	1e5a      	subs	r2, r3, #1
 800a66a:	bf45      	ittet	mi
 800a66c:	f1c3 0301 	rsbmi	r3, r3, #1
 800a670:	9305      	strmi	r3, [sp, #20]
 800a672:	2300      	movpl	r3, #0
 800a674:	2300      	movmi	r3, #0
 800a676:	9206      	str	r2, [sp, #24]
 800a678:	bf54      	ite	pl
 800a67a:	9305      	strpl	r3, [sp, #20]
 800a67c:	9306      	strmi	r3, [sp, #24]
 800a67e:	f1bb 0f00 	cmp.w	fp, #0
 800a682:	db3c      	blt.n	800a6fe <_dtoa_r+0x24e>
 800a684:	9b06      	ldr	r3, [sp, #24]
 800a686:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a68a:	445b      	add	r3, fp
 800a68c:	9306      	str	r3, [sp, #24]
 800a68e:	2300      	movs	r3, #0
 800a690:	9308      	str	r3, [sp, #32]
 800a692:	9b07      	ldr	r3, [sp, #28]
 800a694:	2b09      	cmp	r3, #9
 800a696:	d868      	bhi.n	800a76a <_dtoa_r+0x2ba>
 800a698:	2b05      	cmp	r3, #5
 800a69a:	bfc4      	itt	gt
 800a69c:	3b04      	subgt	r3, #4
 800a69e:	9307      	strgt	r3, [sp, #28]
 800a6a0:	9b07      	ldr	r3, [sp, #28]
 800a6a2:	f1a3 0302 	sub.w	r3, r3, #2
 800a6a6:	bfcc      	ite	gt
 800a6a8:	2500      	movgt	r5, #0
 800a6aa:	2501      	movle	r5, #1
 800a6ac:	2b03      	cmp	r3, #3
 800a6ae:	f200 8085 	bhi.w	800a7bc <_dtoa_r+0x30c>
 800a6b2:	e8df f003 	tbb	[pc, r3]
 800a6b6:	3b2e      	.short	0x3b2e
 800a6b8:	5839      	.short	0x5839
 800a6ba:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a6be:	441d      	add	r5, r3
 800a6c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a6c4:	2b20      	cmp	r3, #32
 800a6c6:	bfc1      	itttt	gt
 800a6c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a6cc:	fa08 f803 	lslgt.w	r8, r8, r3
 800a6d0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a6d4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a6d8:	bfd6      	itet	le
 800a6da:	f1c3 0320 	rsble	r3, r3, #32
 800a6de:	ea48 0003 	orrgt.w	r0, r8, r3
 800a6e2:	fa06 f003 	lslle.w	r0, r6, r3
 800a6e6:	f7f5 ff1d 	bl	8000524 <__aeabi_ui2d>
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a6f0:	3d01      	subs	r5, #1
 800a6f2:	920e      	str	r2, [sp, #56]	; 0x38
 800a6f4:	e76f      	b.n	800a5d6 <_dtoa_r+0x126>
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	e7b3      	b.n	800a662 <_dtoa_r+0x1b2>
 800a6fa:	900c      	str	r0, [sp, #48]	; 0x30
 800a6fc:	e7b2      	b.n	800a664 <_dtoa_r+0x1b4>
 800a6fe:	9b05      	ldr	r3, [sp, #20]
 800a700:	eba3 030b 	sub.w	r3, r3, fp
 800a704:	9305      	str	r3, [sp, #20]
 800a706:	f1cb 0300 	rsb	r3, fp, #0
 800a70a:	9308      	str	r3, [sp, #32]
 800a70c:	2300      	movs	r3, #0
 800a70e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a710:	e7bf      	b.n	800a692 <_dtoa_r+0x1e2>
 800a712:	2300      	movs	r3, #0
 800a714:	9309      	str	r3, [sp, #36]	; 0x24
 800a716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a718:	2b00      	cmp	r3, #0
 800a71a:	dc52      	bgt.n	800a7c2 <_dtoa_r+0x312>
 800a71c:	2301      	movs	r3, #1
 800a71e:	9301      	str	r3, [sp, #4]
 800a720:	9304      	str	r3, [sp, #16]
 800a722:	461a      	mov	r2, r3
 800a724:	920a      	str	r2, [sp, #40]	; 0x28
 800a726:	e00b      	b.n	800a740 <_dtoa_r+0x290>
 800a728:	2301      	movs	r3, #1
 800a72a:	e7f3      	b.n	800a714 <_dtoa_r+0x264>
 800a72c:	2300      	movs	r3, #0
 800a72e:	9309      	str	r3, [sp, #36]	; 0x24
 800a730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a732:	445b      	add	r3, fp
 800a734:	9301      	str	r3, [sp, #4]
 800a736:	3301      	adds	r3, #1
 800a738:	2b01      	cmp	r3, #1
 800a73a:	9304      	str	r3, [sp, #16]
 800a73c:	bfb8      	it	lt
 800a73e:	2301      	movlt	r3, #1
 800a740:	69e0      	ldr	r0, [r4, #28]
 800a742:	2100      	movs	r1, #0
 800a744:	2204      	movs	r2, #4
 800a746:	f102 0614 	add.w	r6, r2, #20
 800a74a:	429e      	cmp	r6, r3
 800a74c:	d93d      	bls.n	800a7ca <_dtoa_r+0x31a>
 800a74e:	6041      	str	r1, [r0, #4]
 800a750:	4620      	mov	r0, r4
 800a752:	f000 fd9f 	bl	800b294 <_Balloc>
 800a756:	9000      	str	r0, [sp, #0]
 800a758:	2800      	cmp	r0, #0
 800a75a:	d139      	bne.n	800a7d0 <_dtoa_r+0x320>
 800a75c:	4b16      	ldr	r3, [pc, #88]	; (800a7b8 <_dtoa_r+0x308>)
 800a75e:	4602      	mov	r2, r0
 800a760:	f240 11af 	movw	r1, #431	; 0x1af
 800a764:	e6bd      	b.n	800a4e2 <_dtoa_r+0x32>
 800a766:	2301      	movs	r3, #1
 800a768:	e7e1      	b.n	800a72e <_dtoa_r+0x27e>
 800a76a:	2501      	movs	r5, #1
 800a76c:	2300      	movs	r3, #0
 800a76e:	9307      	str	r3, [sp, #28]
 800a770:	9509      	str	r5, [sp, #36]	; 0x24
 800a772:	f04f 33ff 	mov.w	r3, #4294967295
 800a776:	9301      	str	r3, [sp, #4]
 800a778:	9304      	str	r3, [sp, #16]
 800a77a:	2200      	movs	r2, #0
 800a77c:	2312      	movs	r3, #18
 800a77e:	e7d1      	b.n	800a724 <_dtoa_r+0x274>
 800a780:	636f4361 	.word	0x636f4361
 800a784:	3fd287a7 	.word	0x3fd287a7
 800a788:	8b60c8b3 	.word	0x8b60c8b3
 800a78c:	3fc68a28 	.word	0x3fc68a28
 800a790:	509f79fb 	.word	0x509f79fb
 800a794:	3fd34413 	.word	0x3fd34413
 800a798:	0800dba2 	.word	0x0800dba2
 800a79c:	0800dbb9 	.word	0x0800dbb9
 800a7a0:	7ff00000 	.word	0x7ff00000
 800a7a4:	0800db9e 	.word	0x0800db9e
 800a7a8:	0800db95 	.word	0x0800db95
 800a7ac:	0800db6d 	.word	0x0800db6d
 800a7b0:	3ff80000 	.word	0x3ff80000
 800a7b4:	0800dca8 	.word	0x0800dca8
 800a7b8:	0800dc11 	.word	0x0800dc11
 800a7bc:	2301      	movs	r3, #1
 800a7be:	9309      	str	r3, [sp, #36]	; 0x24
 800a7c0:	e7d7      	b.n	800a772 <_dtoa_r+0x2c2>
 800a7c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7c4:	9301      	str	r3, [sp, #4]
 800a7c6:	9304      	str	r3, [sp, #16]
 800a7c8:	e7ba      	b.n	800a740 <_dtoa_r+0x290>
 800a7ca:	3101      	adds	r1, #1
 800a7cc:	0052      	lsls	r2, r2, #1
 800a7ce:	e7ba      	b.n	800a746 <_dtoa_r+0x296>
 800a7d0:	69e3      	ldr	r3, [r4, #28]
 800a7d2:	9a00      	ldr	r2, [sp, #0]
 800a7d4:	601a      	str	r2, [r3, #0]
 800a7d6:	9b04      	ldr	r3, [sp, #16]
 800a7d8:	2b0e      	cmp	r3, #14
 800a7da:	f200 80a8 	bhi.w	800a92e <_dtoa_r+0x47e>
 800a7de:	2d00      	cmp	r5, #0
 800a7e0:	f000 80a5 	beq.w	800a92e <_dtoa_r+0x47e>
 800a7e4:	f1bb 0f00 	cmp.w	fp, #0
 800a7e8:	dd38      	ble.n	800a85c <_dtoa_r+0x3ac>
 800a7ea:	4bc0      	ldr	r3, [pc, #768]	; (800aaec <_dtoa_r+0x63c>)
 800a7ec:	f00b 020f 	and.w	r2, fp, #15
 800a7f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7f4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a7f8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a7fc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a800:	d019      	beq.n	800a836 <_dtoa_r+0x386>
 800a802:	4bbb      	ldr	r3, [pc, #748]	; (800aaf0 <_dtoa_r+0x640>)
 800a804:	ec51 0b18 	vmov	r0, r1, d8
 800a808:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a80c:	f7f6 f82e 	bl	800086c <__aeabi_ddiv>
 800a810:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a814:	f008 080f 	and.w	r8, r8, #15
 800a818:	2503      	movs	r5, #3
 800a81a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800aaf0 <_dtoa_r+0x640>
 800a81e:	f1b8 0f00 	cmp.w	r8, #0
 800a822:	d10a      	bne.n	800a83a <_dtoa_r+0x38a>
 800a824:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a828:	4632      	mov	r2, r6
 800a82a:	463b      	mov	r3, r7
 800a82c:	f7f6 f81e 	bl	800086c <__aeabi_ddiv>
 800a830:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a834:	e02b      	b.n	800a88e <_dtoa_r+0x3de>
 800a836:	2502      	movs	r5, #2
 800a838:	e7ef      	b.n	800a81a <_dtoa_r+0x36a>
 800a83a:	f018 0f01 	tst.w	r8, #1
 800a83e:	d008      	beq.n	800a852 <_dtoa_r+0x3a2>
 800a840:	4630      	mov	r0, r6
 800a842:	4639      	mov	r1, r7
 800a844:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a848:	f7f5 fee6 	bl	8000618 <__aeabi_dmul>
 800a84c:	3501      	adds	r5, #1
 800a84e:	4606      	mov	r6, r0
 800a850:	460f      	mov	r7, r1
 800a852:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a856:	f109 0908 	add.w	r9, r9, #8
 800a85a:	e7e0      	b.n	800a81e <_dtoa_r+0x36e>
 800a85c:	f000 809f 	beq.w	800a99e <_dtoa_r+0x4ee>
 800a860:	f1cb 0600 	rsb	r6, fp, #0
 800a864:	4ba1      	ldr	r3, [pc, #644]	; (800aaec <_dtoa_r+0x63c>)
 800a866:	4fa2      	ldr	r7, [pc, #648]	; (800aaf0 <_dtoa_r+0x640>)
 800a868:	f006 020f 	and.w	r2, r6, #15
 800a86c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a874:	ec51 0b18 	vmov	r0, r1, d8
 800a878:	f7f5 fece 	bl	8000618 <__aeabi_dmul>
 800a87c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a880:	1136      	asrs	r6, r6, #4
 800a882:	2300      	movs	r3, #0
 800a884:	2502      	movs	r5, #2
 800a886:	2e00      	cmp	r6, #0
 800a888:	d17e      	bne.n	800a988 <_dtoa_r+0x4d8>
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d1d0      	bne.n	800a830 <_dtoa_r+0x380>
 800a88e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a890:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a894:	2b00      	cmp	r3, #0
 800a896:	f000 8084 	beq.w	800a9a2 <_dtoa_r+0x4f2>
 800a89a:	4b96      	ldr	r3, [pc, #600]	; (800aaf4 <_dtoa_r+0x644>)
 800a89c:	2200      	movs	r2, #0
 800a89e:	4640      	mov	r0, r8
 800a8a0:	4649      	mov	r1, r9
 800a8a2:	f7f6 f92b 	bl	8000afc <__aeabi_dcmplt>
 800a8a6:	2800      	cmp	r0, #0
 800a8a8:	d07b      	beq.n	800a9a2 <_dtoa_r+0x4f2>
 800a8aa:	9b04      	ldr	r3, [sp, #16]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d078      	beq.n	800a9a2 <_dtoa_r+0x4f2>
 800a8b0:	9b01      	ldr	r3, [sp, #4]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	dd39      	ble.n	800a92a <_dtoa_r+0x47a>
 800a8b6:	4b90      	ldr	r3, [pc, #576]	; (800aaf8 <_dtoa_r+0x648>)
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	4640      	mov	r0, r8
 800a8bc:	4649      	mov	r1, r9
 800a8be:	f7f5 feab 	bl	8000618 <__aeabi_dmul>
 800a8c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8c6:	9e01      	ldr	r6, [sp, #4]
 800a8c8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a8cc:	3501      	adds	r5, #1
 800a8ce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a8d2:	4628      	mov	r0, r5
 800a8d4:	f7f5 fe36 	bl	8000544 <__aeabi_i2d>
 800a8d8:	4642      	mov	r2, r8
 800a8da:	464b      	mov	r3, r9
 800a8dc:	f7f5 fe9c 	bl	8000618 <__aeabi_dmul>
 800a8e0:	4b86      	ldr	r3, [pc, #536]	; (800aafc <_dtoa_r+0x64c>)
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	f7f5 fce2 	bl	80002ac <__adddf3>
 800a8e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a8ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8f0:	9303      	str	r3, [sp, #12]
 800a8f2:	2e00      	cmp	r6, #0
 800a8f4:	d158      	bne.n	800a9a8 <_dtoa_r+0x4f8>
 800a8f6:	4b82      	ldr	r3, [pc, #520]	; (800ab00 <_dtoa_r+0x650>)
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	4640      	mov	r0, r8
 800a8fc:	4649      	mov	r1, r9
 800a8fe:	f7f5 fcd3 	bl	80002a8 <__aeabi_dsub>
 800a902:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a906:	4680      	mov	r8, r0
 800a908:	4689      	mov	r9, r1
 800a90a:	f7f6 f915 	bl	8000b38 <__aeabi_dcmpgt>
 800a90e:	2800      	cmp	r0, #0
 800a910:	f040 8296 	bne.w	800ae40 <_dtoa_r+0x990>
 800a914:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a918:	4640      	mov	r0, r8
 800a91a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a91e:	4649      	mov	r1, r9
 800a920:	f7f6 f8ec 	bl	8000afc <__aeabi_dcmplt>
 800a924:	2800      	cmp	r0, #0
 800a926:	f040 8289 	bne.w	800ae3c <_dtoa_r+0x98c>
 800a92a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a92e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a930:	2b00      	cmp	r3, #0
 800a932:	f2c0 814e 	blt.w	800abd2 <_dtoa_r+0x722>
 800a936:	f1bb 0f0e 	cmp.w	fp, #14
 800a93a:	f300 814a 	bgt.w	800abd2 <_dtoa_r+0x722>
 800a93e:	4b6b      	ldr	r3, [pc, #428]	; (800aaec <_dtoa_r+0x63c>)
 800a940:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a944:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a948:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	f280 80dc 	bge.w	800ab08 <_dtoa_r+0x658>
 800a950:	9b04      	ldr	r3, [sp, #16]
 800a952:	2b00      	cmp	r3, #0
 800a954:	f300 80d8 	bgt.w	800ab08 <_dtoa_r+0x658>
 800a958:	f040 826f 	bne.w	800ae3a <_dtoa_r+0x98a>
 800a95c:	4b68      	ldr	r3, [pc, #416]	; (800ab00 <_dtoa_r+0x650>)
 800a95e:	2200      	movs	r2, #0
 800a960:	4640      	mov	r0, r8
 800a962:	4649      	mov	r1, r9
 800a964:	f7f5 fe58 	bl	8000618 <__aeabi_dmul>
 800a968:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a96c:	f7f6 f8da 	bl	8000b24 <__aeabi_dcmpge>
 800a970:	9e04      	ldr	r6, [sp, #16]
 800a972:	4637      	mov	r7, r6
 800a974:	2800      	cmp	r0, #0
 800a976:	f040 8245 	bne.w	800ae04 <_dtoa_r+0x954>
 800a97a:	9d00      	ldr	r5, [sp, #0]
 800a97c:	2331      	movs	r3, #49	; 0x31
 800a97e:	f805 3b01 	strb.w	r3, [r5], #1
 800a982:	f10b 0b01 	add.w	fp, fp, #1
 800a986:	e241      	b.n	800ae0c <_dtoa_r+0x95c>
 800a988:	07f2      	lsls	r2, r6, #31
 800a98a:	d505      	bpl.n	800a998 <_dtoa_r+0x4e8>
 800a98c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a990:	f7f5 fe42 	bl	8000618 <__aeabi_dmul>
 800a994:	3501      	adds	r5, #1
 800a996:	2301      	movs	r3, #1
 800a998:	1076      	asrs	r6, r6, #1
 800a99a:	3708      	adds	r7, #8
 800a99c:	e773      	b.n	800a886 <_dtoa_r+0x3d6>
 800a99e:	2502      	movs	r5, #2
 800a9a0:	e775      	b.n	800a88e <_dtoa_r+0x3de>
 800a9a2:	9e04      	ldr	r6, [sp, #16]
 800a9a4:	465f      	mov	r7, fp
 800a9a6:	e792      	b.n	800a8ce <_dtoa_r+0x41e>
 800a9a8:	9900      	ldr	r1, [sp, #0]
 800a9aa:	4b50      	ldr	r3, [pc, #320]	; (800aaec <_dtoa_r+0x63c>)
 800a9ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a9b0:	4431      	add	r1, r6
 800a9b2:	9102      	str	r1, [sp, #8]
 800a9b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a9b6:	eeb0 9a47 	vmov.f32	s18, s14
 800a9ba:	eef0 9a67 	vmov.f32	s19, s15
 800a9be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a9c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a9c6:	2900      	cmp	r1, #0
 800a9c8:	d044      	beq.n	800aa54 <_dtoa_r+0x5a4>
 800a9ca:	494e      	ldr	r1, [pc, #312]	; (800ab04 <_dtoa_r+0x654>)
 800a9cc:	2000      	movs	r0, #0
 800a9ce:	f7f5 ff4d 	bl	800086c <__aeabi_ddiv>
 800a9d2:	ec53 2b19 	vmov	r2, r3, d9
 800a9d6:	f7f5 fc67 	bl	80002a8 <__aeabi_dsub>
 800a9da:	9d00      	ldr	r5, [sp, #0]
 800a9dc:	ec41 0b19 	vmov	d9, r0, r1
 800a9e0:	4649      	mov	r1, r9
 800a9e2:	4640      	mov	r0, r8
 800a9e4:	f7f6 f8c8 	bl	8000b78 <__aeabi_d2iz>
 800a9e8:	4606      	mov	r6, r0
 800a9ea:	f7f5 fdab 	bl	8000544 <__aeabi_i2d>
 800a9ee:	4602      	mov	r2, r0
 800a9f0:	460b      	mov	r3, r1
 800a9f2:	4640      	mov	r0, r8
 800a9f4:	4649      	mov	r1, r9
 800a9f6:	f7f5 fc57 	bl	80002a8 <__aeabi_dsub>
 800a9fa:	3630      	adds	r6, #48	; 0x30
 800a9fc:	f805 6b01 	strb.w	r6, [r5], #1
 800aa00:	ec53 2b19 	vmov	r2, r3, d9
 800aa04:	4680      	mov	r8, r0
 800aa06:	4689      	mov	r9, r1
 800aa08:	f7f6 f878 	bl	8000afc <__aeabi_dcmplt>
 800aa0c:	2800      	cmp	r0, #0
 800aa0e:	d164      	bne.n	800aada <_dtoa_r+0x62a>
 800aa10:	4642      	mov	r2, r8
 800aa12:	464b      	mov	r3, r9
 800aa14:	4937      	ldr	r1, [pc, #220]	; (800aaf4 <_dtoa_r+0x644>)
 800aa16:	2000      	movs	r0, #0
 800aa18:	f7f5 fc46 	bl	80002a8 <__aeabi_dsub>
 800aa1c:	ec53 2b19 	vmov	r2, r3, d9
 800aa20:	f7f6 f86c 	bl	8000afc <__aeabi_dcmplt>
 800aa24:	2800      	cmp	r0, #0
 800aa26:	f040 80b6 	bne.w	800ab96 <_dtoa_r+0x6e6>
 800aa2a:	9b02      	ldr	r3, [sp, #8]
 800aa2c:	429d      	cmp	r5, r3
 800aa2e:	f43f af7c 	beq.w	800a92a <_dtoa_r+0x47a>
 800aa32:	4b31      	ldr	r3, [pc, #196]	; (800aaf8 <_dtoa_r+0x648>)
 800aa34:	ec51 0b19 	vmov	r0, r1, d9
 800aa38:	2200      	movs	r2, #0
 800aa3a:	f7f5 fded 	bl	8000618 <__aeabi_dmul>
 800aa3e:	4b2e      	ldr	r3, [pc, #184]	; (800aaf8 <_dtoa_r+0x648>)
 800aa40:	ec41 0b19 	vmov	d9, r0, r1
 800aa44:	2200      	movs	r2, #0
 800aa46:	4640      	mov	r0, r8
 800aa48:	4649      	mov	r1, r9
 800aa4a:	f7f5 fde5 	bl	8000618 <__aeabi_dmul>
 800aa4e:	4680      	mov	r8, r0
 800aa50:	4689      	mov	r9, r1
 800aa52:	e7c5      	b.n	800a9e0 <_dtoa_r+0x530>
 800aa54:	ec51 0b17 	vmov	r0, r1, d7
 800aa58:	f7f5 fdde 	bl	8000618 <__aeabi_dmul>
 800aa5c:	9b02      	ldr	r3, [sp, #8]
 800aa5e:	9d00      	ldr	r5, [sp, #0]
 800aa60:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa62:	ec41 0b19 	vmov	d9, r0, r1
 800aa66:	4649      	mov	r1, r9
 800aa68:	4640      	mov	r0, r8
 800aa6a:	f7f6 f885 	bl	8000b78 <__aeabi_d2iz>
 800aa6e:	4606      	mov	r6, r0
 800aa70:	f7f5 fd68 	bl	8000544 <__aeabi_i2d>
 800aa74:	3630      	adds	r6, #48	; 0x30
 800aa76:	4602      	mov	r2, r0
 800aa78:	460b      	mov	r3, r1
 800aa7a:	4640      	mov	r0, r8
 800aa7c:	4649      	mov	r1, r9
 800aa7e:	f7f5 fc13 	bl	80002a8 <__aeabi_dsub>
 800aa82:	f805 6b01 	strb.w	r6, [r5], #1
 800aa86:	9b02      	ldr	r3, [sp, #8]
 800aa88:	429d      	cmp	r5, r3
 800aa8a:	4680      	mov	r8, r0
 800aa8c:	4689      	mov	r9, r1
 800aa8e:	f04f 0200 	mov.w	r2, #0
 800aa92:	d124      	bne.n	800aade <_dtoa_r+0x62e>
 800aa94:	4b1b      	ldr	r3, [pc, #108]	; (800ab04 <_dtoa_r+0x654>)
 800aa96:	ec51 0b19 	vmov	r0, r1, d9
 800aa9a:	f7f5 fc07 	bl	80002ac <__adddf3>
 800aa9e:	4602      	mov	r2, r0
 800aaa0:	460b      	mov	r3, r1
 800aaa2:	4640      	mov	r0, r8
 800aaa4:	4649      	mov	r1, r9
 800aaa6:	f7f6 f847 	bl	8000b38 <__aeabi_dcmpgt>
 800aaaa:	2800      	cmp	r0, #0
 800aaac:	d173      	bne.n	800ab96 <_dtoa_r+0x6e6>
 800aaae:	ec53 2b19 	vmov	r2, r3, d9
 800aab2:	4914      	ldr	r1, [pc, #80]	; (800ab04 <_dtoa_r+0x654>)
 800aab4:	2000      	movs	r0, #0
 800aab6:	f7f5 fbf7 	bl	80002a8 <__aeabi_dsub>
 800aaba:	4602      	mov	r2, r0
 800aabc:	460b      	mov	r3, r1
 800aabe:	4640      	mov	r0, r8
 800aac0:	4649      	mov	r1, r9
 800aac2:	f7f6 f81b 	bl	8000afc <__aeabi_dcmplt>
 800aac6:	2800      	cmp	r0, #0
 800aac8:	f43f af2f 	beq.w	800a92a <_dtoa_r+0x47a>
 800aacc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800aace:	1e6b      	subs	r3, r5, #1
 800aad0:	930f      	str	r3, [sp, #60]	; 0x3c
 800aad2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aad6:	2b30      	cmp	r3, #48	; 0x30
 800aad8:	d0f8      	beq.n	800aacc <_dtoa_r+0x61c>
 800aada:	46bb      	mov	fp, r7
 800aadc:	e04a      	b.n	800ab74 <_dtoa_r+0x6c4>
 800aade:	4b06      	ldr	r3, [pc, #24]	; (800aaf8 <_dtoa_r+0x648>)
 800aae0:	f7f5 fd9a 	bl	8000618 <__aeabi_dmul>
 800aae4:	4680      	mov	r8, r0
 800aae6:	4689      	mov	r9, r1
 800aae8:	e7bd      	b.n	800aa66 <_dtoa_r+0x5b6>
 800aaea:	bf00      	nop
 800aaec:	0800dca8 	.word	0x0800dca8
 800aaf0:	0800dc80 	.word	0x0800dc80
 800aaf4:	3ff00000 	.word	0x3ff00000
 800aaf8:	40240000 	.word	0x40240000
 800aafc:	401c0000 	.word	0x401c0000
 800ab00:	40140000 	.word	0x40140000
 800ab04:	3fe00000 	.word	0x3fe00000
 800ab08:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ab0c:	9d00      	ldr	r5, [sp, #0]
 800ab0e:	4642      	mov	r2, r8
 800ab10:	464b      	mov	r3, r9
 800ab12:	4630      	mov	r0, r6
 800ab14:	4639      	mov	r1, r7
 800ab16:	f7f5 fea9 	bl	800086c <__aeabi_ddiv>
 800ab1a:	f7f6 f82d 	bl	8000b78 <__aeabi_d2iz>
 800ab1e:	9001      	str	r0, [sp, #4]
 800ab20:	f7f5 fd10 	bl	8000544 <__aeabi_i2d>
 800ab24:	4642      	mov	r2, r8
 800ab26:	464b      	mov	r3, r9
 800ab28:	f7f5 fd76 	bl	8000618 <__aeabi_dmul>
 800ab2c:	4602      	mov	r2, r0
 800ab2e:	460b      	mov	r3, r1
 800ab30:	4630      	mov	r0, r6
 800ab32:	4639      	mov	r1, r7
 800ab34:	f7f5 fbb8 	bl	80002a8 <__aeabi_dsub>
 800ab38:	9e01      	ldr	r6, [sp, #4]
 800ab3a:	9f04      	ldr	r7, [sp, #16]
 800ab3c:	3630      	adds	r6, #48	; 0x30
 800ab3e:	f805 6b01 	strb.w	r6, [r5], #1
 800ab42:	9e00      	ldr	r6, [sp, #0]
 800ab44:	1bae      	subs	r6, r5, r6
 800ab46:	42b7      	cmp	r7, r6
 800ab48:	4602      	mov	r2, r0
 800ab4a:	460b      	mov	r3, r1
 800ab4c:	d134      	bne.n	800abb8 <_dtoa_r+0x708>
 800ab4e:	f7f5 fbad 	bl	80002ac <__adddf3>
 800ab52:	4642      	mov	r2, r8
 800ab54:	464b      	mov	r3, r9
 800ab56:	4606      	mov	r6, r0
 800ab58:	460f      	mov	r7, r1
 800ab5a:	f7f5 ffed 	bl	8000b38 <__aeabi_dcmpgt>
 800ab5e:	b9c8      	cbnz	r0, 800ab94 <_dtoa_r+0x6e4>
 800ab60:	4642      	mov	r2, r8
 800ab62:	464b      	mov	r3, r9
 800ab64:	4630      	mov	r0, r6
 800ab66:	4639      	mov	r1, r7
 800ab68:	f7f5 ffbe 	bl	8000ae8 <__aeabi_dcmpeq>
 800ab6c:	b110      	cbz	r0, 800ab74 <_dtoa_r+0x6c4>
 800ab6e:	9b01      	ldr	r3, [sp, #4]
 800ab70:	07db      	lsls	r3, r3, #31
 800ab72:	d40f      	bmi.n	800ab94 <_dtoa_r+0x6e4>
 800ab74:	4651      	mov	r1, sl
 800ab76:	4620      	mov	r0, r4
 800ab78:	f000 fbcc 	bl	800b314 <_Bfree>
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ab80:	702b      	strb	r3, [r5, #0]
 800ab82:	f10b 0301 	add.w	r3, fp, #1
 800ab86:	6013      	str	r3, [r2, #0]
 800ab88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	f43f ace2 	beq.w	800a554 <_dtoa_r+0xa4>
 800ab90:	601d      	str	r5, [r3, #0]
 800ab92:	e4df      	b.n	800a554 <_dtoa_r+0xa4>
 800ab94:	465f      	mov	r7, fp
 800ab96:	462b      	mov	r3, r5
 800ab98:	461d      	mov	r5, r3
 800ab9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab9e:	2a39      	cmp	r2, #57	; 0x39
 800aba0:	d106      	bne.n	800abb0 <_dtoa_r+0x700>
 800aba2:	9a00      	ldr	r2, [sp, #0]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d1f7      	bne.n	800ab98 <_dtoa_r+0x6e8>
 800aba8:	9900      	ldr	r1, [sp, #0]
 800abaa:	2230      	movs	r2, #48	; 0x30
 800abac:	3701      	adds	r7, #1
 800abae:	700a      	strb	r2, [r1, #0]
 800abb0:	781a      	ldrb	r2, [r3, #0]
 800abb2:	3201      	adds	r2, #1
 800abb4:	701a      	strb	r2, [r3, #0]
 800abb6:	e790      	b.n	800aada <_dtoa_r+0x62a>
 800abb8:	4ba3      	ldr	r3, [pc, #652]	; (800ae48 <_dtoa_r+0x998>)
 800abba:	2200      	movs	r2, #0
 800abbc:	f7f5 fd2c 	bl	8000618 <__aeabi_dmul>
 800abc0:	2200      	movs	r2, #0
 800abc2:	2300      	movs	r3, #0
 800abc4:	4606      	mov	r6, r0
 800abc6:	460f      	mov	r7, r1
 800abc8:	f7f5 ff8e 	bl	8000ae8 <__aeabi_dcmpeq>
 800abcc:	2800      	cmp	r0, #0
 800abce:	d09e      	beq.n	800ab0e <_dtoa_r+0x65e>
 800abd0:	e7d0      	b.n	800ab74 <_dtoa_r+0x6c4>
 800abd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abd4:	2a00      	cmp	r2, #0
 800abd6:	f000 80ca 	beq.w	800ad6e <_dtoa_r+0x8be>
 800abda:	9a07      	ldr	r2, [sp, #28]
 800abdc:	2a01      	cmp	r2, #1
 800abde:	f300 80ad 	bgt.w	800ad3c <_dtoa_r+0x88c>
 800abe2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800abe4:	2a00      	cmp	r2, #0
 800abe6:	f000 80a5 	beq.w	800ad34 <_dtoa_r+0x884>
 800abea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800abee:	9e08      	ldr	r6, [sp, #32]
 800abf0:	9d05      	ldr	r5, [sp, #20]
 800abf2:	9a05      	ldr	r2, [sp, #20]
 800abf4:	441a      	add	r2, r3
 800abf6:	9205      	str	r2, [sp, #20]
 800abf8:	9a06      	ldr	r2, [sp, #24]
 800abfa:	2101      	movs	r1, #1
 800abfc:	441a      	add	r2, r3
 800abfe:	4620      	mov	r0, r4
 800ac00:	9206      	str	r2, [sp, #24]
 800ac02:	f000 fc87 	bl	800b514 <__i2b>
 800ac06:	4607      	mov	r7, r0
 800ac08:	b165      	cbz	r5, 800ac24 <_dtoa_r+0x774>
 800ac0a:	9b06      	ldr	r3, [sp, #24]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	dd09      	ble.n	800ac24 <_dtoa_r+0x774>
 800ac10:	42ab      	cmp	r3, r5
 800ac12:	9a05      	ldr	r2, [sp, #20]
 800ac14:	bfa8      	it	ge
 800ac16:	462b      	movge	r3, r5
 800ac18:	1ad2      	subs	r2, r2, r3
 800ac1a:	9205      	str	r2, [sp, #20]
 800ac1c:	9a06      	ldr	r2, [sp, #24]
 800ac1e:	1aed      	subs	r5, r5, r3
 800ac20:	1ad3      	subs	r3, r2, r3
 800ac22:	9306      	str	r3, [sp, #24]
 800ac24:	9b08      	ldr	r3, [sp, #32]
 800ac26:	b1f3      	cbz	r3, 800ac66 <_dtoa_r+0x7b6>
 800ac28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	f000 80a3 	beq.w	800ad76 <_dtoa_r+0x8c6>
 800ac30:	2e00      	cmp	r6, #0
 800ac32:	dd10      	ble.n	800ac56 <_dtoa_r+0x7a6>
 800ac34:	4639      	mov	r1, r7
 800ac36:	4632      	mov	r2, r6
 800ac38:	4620      	mov	r0, r4
 800ac3a:	f000 fd2b 	bl	800b694 <__pow5mult>
 800ac3e:	4652      	mov	r2, sl
 800ac40:	4601      	mov	r1, r0
 800ac42:	4607      	mov	r7, r0
 800ac44:	4620      	mov	r0, r4
 800ac46:	f000 fc7b 	bl	800b540 <__multiply>
 800ac4a:	4651      	mov	r1, sl
 800ac4c:	4680      	mov	r8, r0
 800ac4e:	4620      	mov	r0, r4
 800ac50:	f000 fb60 	bl	800b314 <_Bfree>
 800ac54:	46c2      	mov	sl, r8
 800ac56:	9b08      	ldr	r3, [sp, #32]
 800ac58:	1b9a      	subs	r2, r3, r6
 800ac5a:	d004      	beq.n	800ac66 <_dtoa_r+0x7b6>
 800ac5c:	4651      	mov	r1, sl
 800ac5e:	4620      	mov	r0, r4
 800ac60:	f000 fd18 	bl	800b694 <__pow5mult>
 800ac64:	4682      	mov	sl, r0
 800ac66:	2101      	movs	r1, #1
 800ac68:	4620      	mov	r0, r4
 800ac6a:	f000 fc53 	bl	800b514 <__i2b>
 800ac6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	4606      	mov	r6, r0
 800ac74:	f340 8081 	ble.w	800ad7a <_dtoa_r+0x8ca>
 800ac78:	461a      	mov	r2, r3
 800ac7a:	4601      	mov	r1, r0
 800ac7c:	4620      	mov	r0, r4
 800ac7e:	f000 fd09 	bl	800b694 <__pow5mult>
 800ac82:	9b07      	ldr	r3, [sp, #28]
 800ac84:	2b01      	cmp	r3, #1
 800ac86:	4606      	mov	r6, r0
 800ac88:	dd7a      	ble.n	800ad80 <_dtoa_r+0x8d0>
 800ac8a:	f04f 0800 	mov.w	r8, #0
 800ac8e:	6933      	ldr	r3, [r6, #16]
 800ac90:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ac94:	6918      	ldr	r0, [r3, #16]
 800ac96:	f000 fbef 	bl	800b478 <__hi0bits>
 800ac9a:	f1c0 0020 	rsb	r0, r0, #32
 800ac9e:	9b06      	ldr	r3, [sp, #24]
 800aca0:	4418      	add	r0, r3
 800aca2:	f010 001f 	ands.w	r0, r0, #31
 800aca6:	f000 8094 	beq.w	800add2 <_dtoa_r+0x922>
 800acaa:	f1c0 0320 	rsb	r3, r0, #32
 800acae:	2b04      	cmp	r3, #4
 800acb0:	f340 8085 	ble.w	800adbe <_dtoa_r+0x90e>
 800acb4:	9b05      	ldr	r3, [sp, #20]
 800acb6:	f1c0 001c 	rsb	r0, r0, #28
 800acba:	4403      	add	r3, r0
 800acbc:	9305      	str	r3, [sp, #20]
 800acbe:	9b06      	ldr	r3, [sp, #24]
 800acc0:	4403      	add	r3, r0
 800acc2:	4405      	add	r5, r0
 800acc4:	9306      	str	r3, [sp, #24]
 800acc6:	9b05      	ldr	r3, [sp, #20]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	dd05      	ble.n	800acd8 <_dtoa_r+0x828>
 800accc:	4651      	mov	r1, sl
 800acce:	461a      	mov	r2, r3
 800acd0:	4620      	mov	r0, r4
 800acd2:	f000 fd39 	bl	800b748 <__lshift>
 800acd6:	4682      	mov	sl, r0
 800acd8:	9b06      	ldr	r3, [sp, #24]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	dd05      	ble.n	800acea <_dtoa_r+0x83a>
 800acde:	4631      	mov	r1, r6
 800ace0:	461a      	mov	r2, r3
 800ace2:	4620      	mov	r0, r4
 800ace4:	f000 fd30 	bl	800b748 <__lshift>
 800ace8:	4606      	mov	r6, r0
 800acea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800acec:	2b00      	cmp	r3, #0
 800acee:	d072      	beq.n	800add6 <_dtoa_r+0x926>
 800acf0:	4631      	mov	r1, r6
 800acf2:	4650      	mov	r0, sl
 800acf4:	f000 fd94 	bl	800b820 <__mcmp>
 800acf8:	2800      	cmp	r0, #0
 800acfa:	da6c      	bge.n	800add6 <_dtoa_r+0x926>
 800acfc:	2300      	movs	r3, #0
 800acfe:	4651      	mov	r1, sl
 800ad00:	220a      	movs	r2, #10
 800ad02:	4620      	mov	r0, r4
 800ad04:	f000 fb28 	bl	800b358 <__multadd>
 800ad08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad0a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ad0e:	4682      	mov	sl, r0
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	f000 81b0 	beq.w	800b076 <_dtoa_r+0xbc6>
 800ad16:	2300      	movs	r3, #0
 800ad18:	4639      	mov	r1, r7
 800ad1a:	220a      	movs	r2, #10
 800ad1c:	4620      	mov	r0, r4
 800ad1e:	f000 fb1b 	bl	800b358 <__multadd>
 800ad22:	9b01      	ldr	r3, [sp, #4]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	4607      	mov	r7, r0
 800ad28:	f300 8096 	bgt.w	800ae58 <_dtoa_r+0x9a8>
 800ad2c:	9b07      	ldr	r3, [sp, #28]
 800ad2e:	2b02      	cmp	r3, #2
 800ad30:	dc59      	bgt.n	800ade6 <_dtoa_r+0x936>
 800ad32:	e091      	b.n	800ae58 <_dtoa_r+0x9a8>
 800ad34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ad36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ad3a:	e758      	b.n	800abee <_dtoa_r+0x73e>
 800ad3c:	9b04      	ldr	r3, [sp, #16]
 800ad3e:	1e5e      	subs	r6, r3, #1
 800ad40:	9b08      	ldr	r3, [sp, #32]
 800ad42:	42b3      	cmp	r3, r6
 800ad44:	bfbf      	itttt	lt
 800ad46:	9b08      	ldrlt	r3, [sp, #32]
 800ad48:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800ad4a:	9608      	strlt	r6, [sp, #32]
 800ad4c:	1af3      	sublt	r3, r6, r3
 800ad4e:	bfb4      	ite	lt
 800ad50:	18d2      	addlt	r2, r2, r3
 800ad52:	1b9e      	subge	r6, r3, r6
 800ad54:	9b04      	ldr	r3, [sp, #16]
 800ad56:	bfbc      	itt	lt
 800ad58:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800ad5a:	2600      	movlt	r6, #0
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	bfb7      	itett	lt
 800ad60:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800ad64:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800ad68:	1a9d      	sublt	r5, r3, r2
 800ad6a:	2300      	movlt	r3, #0
 800ad6c:	e741      	b.n	800abf2 <_dtoa_r+0x742>
 800ad6e:	9e08      	ldr	r6, [sp, #32]
 800ad70:	9d05      	ldr	r5, [sp, #20]
 800ad72:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ad74:	e748      	b.n	800ac08 <_dtoa_r+0x758>
 800ad76:	9a08      	ldr	r2, [sp, #32]
 800ad78:	e770      	b.n	800ac5c <_dtoa_r+0x7ac>
 800ad7a:	9b07      	ldr	r3, [sp, #28]
 800ad7c:	2b01      	cmp	r3, #1
 800ad7e:	dc19      	bgt.n	800adb4 <_dtoa_r+0x904>
 800ad80:	9b02      	ldr	r3, [sp, #8]
 800ad82:	b9bb      	cbnz	r3, 800adb4 <_dtoa_r+0x904>
 800ad84:	9b03      	ldr	r3, [sp, #12]
 800ad86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad8a:	b99b      	cbnz	r3, 800adb4 <_dtoa_r+0x904>
 800ad8c:	9b03      	ldr	r3, [sp, #12]
 800ad8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ad92:	0d1b      	lsrs	r3, r3, #20
 800ad94:	051b      	lsls	r3, r3, #20
 800ad96:	b183      	cbz	r3, 800adba <_dtoa_r+0x90a>
 800ad98:	9b05      	ldr	r3, [sp, #20]
 800ad9a:	3301      	adds	r3, #1
 800ad9c:	9305      	str	r3, [sp, #20]
 800ad9e:	9b06      	ldr	r3, [sp, #24]
 800ada0:	3301      	adds	r3, #1
 800ada2:	9306      	str	r3, [sp, #24]
 800ada4:	f04f 0801 	mov.w	r8, #1
 800ada8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800adaa:	2b00      	cmp	r3, #0
 800adac:	f47f af6f 	bne.w	800ac8e <_dtoa_r+0x7de>
 800adb0:	2001      	movs	r0, #1
 800adb2:	e774      	b.n	800ac9e <_dtoa_r+0x7ee>
 800adb4:	f04f 0800 	mov.w	r8, #0
 800adb8:	e7f6      	b.n	800ada8 <_dtoa_r+0x8f8>
 800adba:	4698      	mov	r8, r3
 800adbc:	e7f4      	b.n	800ada8 <_dtoa_r+0x8f8>
 800adbe:	d082      	beq.n	800acc6 <_dtoa_r+0x816>
 800adc0:	9a05      	ldr	r2, [sp, #20]
 800adc2:	331c      	adds	r3, #28
 800adc4:	441a      	add	r2, r3
 800adc6:	9205      	str	r2, [sp, #20]
 800adc8:	9a06      	ldr	r2, [sp, #24]
 800adca:	441a      	add	r2, r3
 800adcc:	441d      	add	r5, r3
 800adce:	9206      	str	r2, [sp, #24]
 800add0:	e779      	b.n	800acc6 <_dtoa_r+0x816>
 800add2:	4603      	mov	r3, r0
 800add4:	e7f4      	b.n	800adc0 <_dtoa_r+0x910>
 800add6:	9b04      	ldr	r3, [sp, #16]
 800add8:	2b00      	cmp	r3, #0
 800adda:	dc37      	bgt.n	800ae4c <_dtoa_r+0x99c>
 800addc:	9b07      	ldr	r3, [sp, #28]
 800adde:	2b02      	cmp	r3, #2
 800ade0:	dd34      	ble.n	800ae4c <_dtoa_r+0x99c>
 800ade2:	9b04      	ldr	r3, [sp, #16]
 800ade4:	9301      	str	r3, [sp, #4]
 800ade6:	9b01      	ldr	r3, [sp, #4]
 800ade8:	b963      	cbnz	r3, 800ae04 <_dtoa_r+0x954>
 800adea:	4631      	mov	r1, r6
 800adec:	2205      	movs	r2, #5
 800adee:	4620      	mov	r0, r4
 800adf0:	f000 fab2 	bl	800b358 <__multadd>
 800adf4:	4601      	mov	r1, r0
 800adf6:	4606      	mov	r6, r0
 800adf8:	4650      	mov	r0, sl
 800adfa:	f000 fd11 	bl	800b820 <__mcmp>
 800adfe:	2800      	cmp	r0, #0
 800ae00:	f73f adbb 	bgt.w	800a97a <_dtoa_r+0x4ca>
 800ae04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae06:	9d00      	ldr	r5, [sp, #0]
 800ae08:	ea6f 0b03 	mvn.w	fp, r3
 800ae0c:	f04f 0800 	mov.w	r8, #0
 800ae10:	4631      	mov	r1, r6
 800ae12:	4620      	mov	r0, r4
 800ae14:	f000 fa7e 	bl	800b314 <_Bfree>
 800ae18:	2f00      	cmp	r7, #0
 800ae1a:	f43f aeab 	beq.w	800ab74 <_dtoa_r+0x6c4>
 800ae1e:	f1b8 0f00 	cmp.w	r8, #0
 800ae22:	d005      	beq.n	800ae30 <_dtoa_r+0x980>
 800ae24:	45b8      	cmp	r8, r7
 800ae26:	d003      	beq.n	800ae30 <_dtoa_r+0x980>
 800ae28:	4641      	mov	r1, r8
 800ae2a:	4620      	mov	r0, r4
 800ae2c:	f000 fa72 	bl	800b314 <_Bfree>
 800ae30:	4639      	mov	r1, r7
 800ae32:	4620      	mov	r0, r4
 800ae34:	f000 fa6e 	bl	800b314 <_Bfree>
 800ae38:	e69c      	b.n	800ab74 <_dtoa_r+0x6c4>
 800ae3a:	2600      	movs	r6, #0
 800ae3c:	4637      	mov	r7, r6
 800ae3e:	e7e1      	b.n	800ae04 <_dtoa_r+0x954>
 800ae40:	46bb      	mov	fp, r7
 800ae42:	4637      	mov	r7, r6
 800ae44:	e599      	b.n	800a97a <_dtoa_r+0x4ca>
 800ae46:	bf00      	nop
 800ae48:	40240000 	.word	0x40240000
 800ae4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	f000 80c8 	beq.w	800afe4 <_dtoa_r+0xb34>
 800ae54:	9b04      	ldr	r3, [sp, #16]
 800ae56:	9301      	str	r3, [sp, #4]
 800ae58:	2d00      	cmp	r5, #0
 800ae5a:	dd05      	ble.n	800ae68 <_dtoa_r+0x9b8>
 800ae5c:	4639      	mov	r1, r7
 800ae5e:	462a      	mov	r2, r5
 800ae60:	4620      	mov	r0, r4
 800ae62:	f000 fc71 	bl	800b748 <__lshift>
 800ae66:	4607      	mov	r7, r0
 800ae68:	f1b8 0f00 	cmp.w	r8, #0
 800ae6c:	d05b      	beq.n	800af26 <_dtoa_r+0xa76>
 800ae6e:	6879      	ldr	r1, [r7, #4]
 800ae70:	4620      	mov	r0, r4
 800ae72:	f000 fa0f 	bl	800b294 <_Balloc>
 800ae76:	4605      	mov	r5, r0
 800ae78:	b928      	cbnz	r0, 800ae86 <_dtoa_r+0x9d6>
 800ae7a:	4b83      	ldr	r3, [pc, #524]	; (800b088 <_dtoa_r+0xbd8>)
 800ae7c:	4602      	mov	r2, r0
 800ae7e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ae82:	f7ff bb2e 	b.w	800a4e2 <_dtoa_r+0x32>
 800ae86:	693a      	ldr	r2, [r7, #16]
 800ae88:	3202      	adds	r2, #2
 800ae8a:	0092      	lsls	r2, r2, #2
 800ae8c:	f107 010c 	add.w	r1, r7, #12
 800ae90:	300c      	adds	r0, #12
 800ae92:	f002 f9e3 	bl	800d25c <memcpy>
 800ae96:	2201      	movs	r2, #1
 800ae98:	4629      	mov	r1, r5
 800ae9a:	4620      	mov	r0, r4
 800ae9c:	f000 fc54 	bl	800b748 <__lshift>
 800aea0:	9b00      	ldr	r3, [sp, #0]
 800aea2:	3301      	adds	r3, #1
 800aea4:	9304      	str	r3, [sp, #16]
 800aea6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aeaa:	4413      	add	r3, r2
 800aeac:	9308      	str	r3, [sp, #32]
 800aeae:	9b02      	ldr	r3, [sp, #8]
 800aeb0:	f003 0301 	and.w	r3, r3, #1
 800aeb4:	46b8      	mov	r8, r7
 800aeb6:	9306      	str	r3, [sp, #24]
 800aeb8:	4607      	mov	r7, r0
 800aeba:	9b04      	ldr	r3, [sp, #16]
 800aebc:	4631      	mov	r1, r6
 800aebe:	3b01      	subs	r3, #1
 800aec0:	4650      	mov	r0, sl
 800aec2:	9301      	str	r3, [sp, #4]
 800aec4:	f7ff fa6c 	bl	800a3a0 <quorem>
 800aec8:	4641      	mov	r1, r8
 800aeca:	9002      	str	r0, [sp, #8]
 800aecc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800aed0:	4650      	mov	r0, sl
 800aed2:	f000 fca5 	bl	800b820 <__mcmp>
 800aed6:	463a      	mov	r2, r7
 800aed8:	9005      	str	r0, [sp, #20]
 800aeda:	4631      	mov	r1, r6
 800aedc:	4620      	mov	r0, r4
 800aede:	f000 fcbb 	bl	800b858 <__mdiff>
 800aee2:	68c2      	ldr	r2, [r0, #12]
 800aee4:	4605      	mov	r5, r0
 800aee6:	bb02      	cbnz	r2, 800af2a <_dtoa_r+0xa7a>
 800aee8:	4601      	mov	r1, r0
 800aeea:	4650      	mov	r0, sl
 800aeec:	f000 fc98 	bl	800b820 <__mcmp>
 800aef0:	4602      	mov	r2, r0
 800aef2:	4629      	mov	r1, r5
 800aef4:	4620      	mov	r0, r4
 800aef6:	9209      	str	r2, [sp, #36]	; 0x24
 800aef8:	f000 fa0c 	bl	800b314 <_Bfree>
 800aefc:	9b07      	ldr	r3, [sp, #28]
 800aefe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af00:	9d04      	ldr	r5, [sp, #16]
 800af02:	ea43 0102 	orr.w	r1, r3, r2
 800af06:	9b06      	ldr	r3, [sp, #24]
 800af08:	4319      	orrs	r1, r3
 800af0a:	d110      	bne.n	800af2e <_dtoa_r+0xa7e>
 800af0c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800af10:	d029      	beq.n	800af66 <_dtoa_r+0xab6>
 800af12:	9b05      	ldr	r3, [sp, #20]
 800af14:	2b00      	cmp	r3, #0
 800af16:	dd02      	ble.n	800af1e <_dtoa_r+0xa6e>
 800af18:	9b02      	ldr	r3, [sp, #8]
 800af1a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800af1e:	9b01      	ldr	r3, [sp, #4]
 800af20:	f883 9000 	strb.w	r9, [r3]
 800af24:	e774      	b.n	800ae10 <_dtoa_r+0x960>
 800af26:	4638      	mov	r0, r7
 800af28:	e7ba      	b.n	800aea0 <_dtoa_r+0x9f0>
 800af2a:	2201      	movs	r2, #1
 800af2c:	e7e1      	b.n	800aef2 <_dtoa_r+0xa42>
 800af2e:	9b05      	ldr	r3, [sp, #20]
 800af30:	2b00      	cmp	r3, #0
 800af32:	db04      	blt.n	800af3e <_dtoa_r+0xa8e>
 800af34:	9907      	ldr	r1, [sp, #28]
 800af36:	430b      	orrs	r3, r1
 800af38:	9906      	ldr	r1, [sp, #24]
 800af3a:	430b      	orrs	r3, r1
 800af3c:	d120      	bne.n	800af80 <_dtoa_r+0xad0>
 800af3e:	2a00      	cmp	r2, #0
 800af40:	dded      	ble.n	800af1e <_dtoa_r+0xa6e>
 800af42:	4651      	mov	r1, sl
 800af44:	2201      	movs	r2, #1
 800af46:	4620      	mov	r0, r4
 800af48:	f000 fbfe 	bl	800b748 <__lshift>
 800af4c:	4631      	mov	r1, r6
 800af4e:	4682      	mov	sl, r0
 800af50:	f000 fc66 	bl	800b820 <__mcmp>
 800af54:	2800      	cmp	r0, #0
 800af56:	dc03      	bgt.n	800af60 <_dtoa_r+0xab0>
 800af58:	d1e1      	bne.n	800af1e <_dtoa_r+0xa6e>
 800af5a:	f019 0f01 	tst.w	r9, #1
 800af5e:	d0de      	beq.n	800af1e <_dtoa_r+0xa6e>
 800af60:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800af64:	d1d8      	bne.n	800af18 <_dtoa_r+0xa68>
 800af66:	9a01      	ldr	r2, [sp, #4]
 800af68:	2339      	movs	r3, #57	; 0x39
 800af6a:	7013      	strb	r3, [r2, #0]
 800af6c:	462b      	mov	r3, r5
 800af6e:	461d      	mov	r5, r3
 800af70:	3b01      	subs	r3, #1
 800af72:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800af76:	2a39      	cmp	r2, #57	; 0x39
 800af78:	d06c      	beq.n	800b054 <_dtoa_r+0xba4>
 800af7a:	3201      	adds	r2, #1
 800af7c:	701a      	strb	r2, [r3, #0]
 800af7e:	e747      	b.n	800ae10 <_dtoa_r+0x960>
 800af80:	2a00      	cmp	r2, #0
 800af82:	dd07      	ble.n	800af94 <_dtoa_r+0xae4>
 800af84:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800af88:	d0ed      	beq.n	800af66 <_dtoa_r+0xab6>
 800af8a:	9a01      	ldr	r2, [sp, #4]
 800af8c:	f109 0301 	add.w	r3, r9, #1
 800af90:	7013      	strb	r3, [r2, #0]
 800af92:	e73d      	b.n	800ae10 <_dtoa_r+0x960>
 800af94:	9b04      	ldr	r3, [sp, #16]
 800af96:	9a08      	ldr	r2, [sp, #32]
 800af98:	f803 9c01 	strb.w	r9, [r3, #-1]
 800af9c:	4293      	cmp	r3, r2
 800af9e:	d043      	beq.n	800b028 <_dtoa_r+0xb78>
 800afa0:	4651      	mov	r1, sl
 800afa2:	2300      	movs	r3, #0
 800afa4:	220a      	movs	r2, #10
 800afa6:	4620      	mov	r0, r4
 800afa8:	f000 f9d6 	bl	800b358 <__multadd>
 800afac:	45b8      	cmp	r8, r7
 800afae:	4682      	mov	sl, r0
 800afb0:	f04f 0300 	mov.w	r3, #0
 800afb4:	f04f 020a 	mov.w	r2, #10
 800afb8:	4641      	mov	r1, r8
 800afba:	4620      	mov	r0, r4
 800afbc:	d107      	bne.n	800afce <_dtoa_r+0xb1e>
 800afbe:	f000 f9cb 	bl	800b358 <__multadd>
 800afc2:	4680      	mov	r8, r0
 800afc4:	4607      	mov	r7, r0
 800afc6:	9b04      	ldr	r3, [sp, #16]
 800afc8:	3301      	adds	r3, #1
 800afca:	9304      	str	r3, [sp, #16]
 800afcc:	e775      	b.n	800aeba <_dtoa_r+0xa0a>
 800afce:	f000 f9c3 	bl	800b358 <__multadd>
 800afd2:	4639      	mov	r1, r7
 800afd4:	4680      	mov	r8, r0
 800afd6:	2300      	movs	r3, #0
 800afd8:	220a      	movs	r2, #10
 800afda:	4620      	mov	r0, r4
 800afdc:	f000 f9bc 	bl	800b358 <__multadd>
 800afe0:	4607      	mov	r7, r0
 800afe2:	e7f0      	b.n	800afc6 <_dtoa_r+0xb16>
 800afe4:	9b04      	ldr	r3, [sp, #16]
 800afe6:	9301      	str	r3, [sp, #4]
 800afe8:	9d00      	ldr	r5, [sp, #0]
 800afea:	4631      	mov	r1, r6
 800afec:	4650      	mov	r0, sl
 800afee:	f7ff f9d7 	bl	800a3a0 <quorem>
 800aff2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800aff6:	9b00      	ldr	r3, [sp, #0]
 800aff8:	f805 9b01 	strb.w	r9, [r5], #1
 800affc:	1aea      	subs	r2, r5, r3
 800affe:	9b01      	ldr	r3, [sp, #4]
 800b000:	4293      	cmp	r3, r2
 800b002:	dd07      	ble.n	800b014 <_dtoa_r+0xb64>
 800b004:	4651      	mov	r1, sl
 800b006:	2300      	movs	r3, #0
 800b008:	220a      	movs	r2, #10
 800b00a:	4620      	mov	r0, r4
 800b00c:	f000 f9a4 	bl	800b358 <__multadd>
 800b010:	4682      	mov	sl, r0
 800b012:	e7ea      	b.n	800afea <_dtoa_r+0xb3a>
 800b014:	9b01      	ldr	r3, [sp, #4]
 800b016:	2b00      	cmp	r3, #0
 800b018:	bfc8      	it	gt
 800b01a:	461d      	movgt	r5, r3
 800b01c:	9b00      	ldr	r3, [sp, #0]
 800b01e:	bfd8      	it	le
 800b020:	2501      	movle	r5, #1
 800b022:	441d      	add	r5, r3
 800b024:	f04f 0800 	mov.w	r8, #0
 800b028:	4651      	mov	r1, sl
 800b02a:	2201      	movs	r2, #1
 800b02c:	4620      	mov	r0, r4
 800b02e:	f000 fb8b 	bl	800b748 <__lshift>
 800b032:	4631      	mov	r1, r6
 800b034:	4682      	mov	sl, r0
 800b036:	f000 fbf3 	bl	800b820 <__mcmp>
 800b03a:	2800      	cmp	r0, #0
 800b03c:	dc96      	bgt.n	800af6c <_dtoa_r+0xabc>
 800b03e:	d102      	bne.n	800b046 <_dtoa_r+0xb96>
 800b040:	f019 0f01 	tst.w	r9, #1
 800b044:	d192      	bne.n	800af6c <_dtoa_r+0xabc>
 800b046:	462b      	mov	r3, r5
 800b048:	461d      	mov	r5, r3
 800b04a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b04e:	2a30      	cmp	r2, #48	; 0x30
 800b050:	d0fa      	beq.n	800b048 <_dtoa_r+0xb98>
 800b052:	e6dd      	b.n	800ae10 <_dtoa_r+0x960>
 800b054:	9a00      	ldr	r2, [sp, #0]
 800b056:	429a      	cmp	r2, r3
 800b058:	d189      	bne.n	800af6e <_dtoa_r+0xabe>
 800b05a:	f10b 0b01 	add.w	fp, fp, #1
 800b05e:	2331      	movs	r3, #49	; 0x31
 800b060:	e796      	b.n	800af90 <_dtoa_r+0xae0>
 800b062:	4b0a      	ldr	r3, [pc, #40]	; (800b08c <_dtoa_r+0xbdc>)
 800b064:	f7ff ba99 	b.w	800a59a <_dtoa_r+0xea>
 800b068:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	f47f aa6d 	bne.w	800a54a <_dtoa_r+0x9a>
 800b070:	4b07      	ldr	r3, [pc, #28]	; (800b090 <_dtoa_r+0xbe0>)
 800b072:	f7ff ba92 	b.w	800a59a <_dtoa_r+0xea>
 800b076:	9b01      	ldr	r3, [sp, #4]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	dcb5      	bgt.n	800afe8 <_dtoa_r+0xb38>
 800b07c:	9b07      	ldr	r3, [sp, #28]
 800b07e:	2b02      	cmp	r3, #2
 800b080:	f73f aeb1 	bgt.w	800ade6 <_dtoa_r+0x936>
 800b084:	e7b0      	b.n	800afe8 <_dtoa_r+0xb38>
 800b086:	bf00      	nop
 800b088:	0800dc11 	.word	0x0800dc11
 800b08c:	0800db6c 	.word	0x0800db6c
 800b090:	0800db95 	.word	0x0800db95

0800b094 <_free_r>:
 800b094:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b096:	2900      	cmp	r1, #0
 800b098:	d044      	beq.n	800b124 <_free_r+0x90>
 800b09a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b09e:	9001      	str	r0, [sp, #4]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	f1a1 0404 	sub.w	r4, r1, #4
 800b0a6:	bfb8      	it	lt
 800b0a8:	18e4      	addlt	r4, r4, r3
 800b0aa:	f000 f8e7 	bl	800b27c <__malloc_lock>
 800b0ae:	4a1e      	ldr	r2, [pc, #120]	; (800b128 <_free_r+0x94>)
 800b0b0:	9801      	ldr	r0, [sp, #4]
 800b0b2:	6813      	ldr	r3, [r2, #0]
 800b0b4:	b933      	cbnz	r3, 800b0c4 <_free_r+0x30>
 800b0b6:	6063      	str	r3, [r4, #4]
 800b0b8:	6014      	str	r4, [r2, #0]
 800b0ba:	b003      	add	sp, #12
 800b0bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b0c0:	f000 b8e2 	b.w	800b288 <__malloc_unlock>
 800b0c4:	42a3      	cmp	r3, r4
 800b0c6:	d908      	bls.n	800b0da <_free_r+0x46>
 800b0c8:	6825      	ldr	r5, [r4, #0]
 800b0ca:	1961      	adds	r1, r4, r5
 800b0cc:	428b      	cmp	r3, r1
 800b0ce:	bf01      	itttt	eq
 800b0d0:	6819      	ldreq	r1, [r3, #0]
 800b0d2:	685b      	ldreq	r3, [r3, #4]
 800b0d4:	1949      	addeq	r1, r1, r5
 800b0d6:	6021      	streq	r1, [r4, #0]
 800b0d8:	e7ed      	b.n	800b0b6 <_free_r+0x22>
 800b0da:	461a      	mov	r2, r3
 800b0dc:	685b      	ldr	r3, [r3, #4]
 800b0de:	b10b      	cbz	r3, 800b0e4 <_free_r+0x50>
 800b0e0:	42a3      	cmp	r3, r4
 800b0e2:	d9fa      	bls.n	800b0da <_free_r+0x46>
 800b0e4:	6811      	ldr	r1, [r2, #0]
 800b0e6:	1855      	adds	r5, r2, r1
 800b0e8:	42a5      	cmp	r5, r4
 800b0ea:	d10b      	bne.n	800b104 <_free_r+0x70>
 800b0ec:	6824      	ldr	r4, [r4, #0]
 800b0ee:	4421      	add	r1, r4
 800b0f0:	1854      	adds	r4, r2, r1
 800b0f2:	42a3      	cmp	r3, r4
 800b0f4:	6011      	str	r1, [r2, #0]
 800b0f6:	d1e0      	bne.n	800b0ba <_free_r+0x26>
 800b0f8:	681c      	ldr	r4, [r3, #0]
 800b0fa:	685b      	ldr	r3, [r3, #4]
 800b0fc:	6053      	str	r3, [r2, #4]
 800b0fe:	440c      	add	r4, r1
 800b100:	6014      	str	r4, [r2, #0]
 800b102:	e7da      	b.n	800b0ba <_free_r+0x26>
 800b104:	d902      	bls.n	800b10c <_free_r+0x78>
 800b106:	230c      	movs	r3, #12
 800b108:	6003      	str	r3, [r0, #0]
 800b10a:	e7d6      	b.n	800b0ba <_free_r+0x26>
 800b10c:	6825      	ldr	r5, [r4, #0]
 800b10e:	1961      	adds	r1, r4, r5
 800b110:	428b      	cmp	r3, r1
 800b112:	bf04      	itt	eq
 800b114:	6819      	ldreq	r1, [r3, #0]
 800b116:	685b      	ldreq	r3, [r3, #4]
 800b118:	6063      	str	r3, [r4, #4]
 800b11a:	bf04      	itt	eq
 800b11c:	1949      	addeq	r1, r1, r5
 800b11e:	6021      	streq	r1, [r4, #0]
 800b120:	6054      	str	r4, [r2, #4]
 800b122:	e7ca      	b.n	800b0ba <_free_r+0x26>
 800b124:	b003      	add	sp, #12
 800b126:	bd30      	pop	{r4, r5, pc}
 800b128:	20001010 	.word	0x20001010

0800b12c <malloc>:
 800b12c:	4b02      	ldr	r3, [pc, #8]	; (800b138 <malloc+0xc>)
 800b12e:	4601      	mov	r1, r0
 800b130:	6818      	ldr	r0, [r3, #0]
 800b132:	f000 b823 	b.w	800b17c <_malloc_r>
 800b136:	bf00      	nop
 800b138:	2000006c 	.word	0x2000006c

0800b13c <sbrk_aligned>:
 800b13c:	b570      	push	{r4, r5, r6, lr}
 800b13e:	4e0e      	ldr	r6, [pc, #56]	; (800b178 <sbrk_aligned+0x3c>)
 800b140:	460c      	mov	r4, r1
 800b142:	6831      	ldr	r1, [r6, #0]
 800b144:	4605      	mov	r5, r0
 800b146:	b911      	cbnz	r1, 800b14e <sbrk_aligned+0x12>
 800b148:	f002 f878 	bl	800d23c <_sbrk_r>
 800b14c:	6030      	str	r0, [r6, #0]
 800b14e:	4621      	mov	r1, r4
 800b150:	4628      	mov	r0, r5
 800b152:	f002 f873 	bl	800d23c <_sbrk_r>
 800b156:	1c43      	adds	r3, r0, #1
 800b158:	d00a      	beq.n	800b170 <sbrk_aligned+0x34>
 800b15a:	1cc4      	adds	r4, r0, #3
 800b15c:	f024 0403 	bic.w	r4, r4, #3
 800b160:	42a0      	cmp	r0, r4
 800b162:	d007      	beq.n	800b174 <sbrk_aligned+0x38>
 800b164:	1a21      	subs	r1, r4, r0
 800b166:	4628      	mov	r0, r5
 800b168:	f002 f868 	bl	800d23c <_sbrk_r>
 800b16c:	3001      	adds	r0, #1
 800b16e:	d101      	bne.n	800b174 <sbrk_aligned+0x38>
 800b170:	f04f 34ff 	mov.w	r4, #4294967295
 800b174:	4620      	mov	r0, r4
 800b176:	bd70      	pop	{r4, r5, r6, pc}
 800b178:	20001014 	.word	0x20001014

0800b17c <_malloc_r>:
 800b17c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b180:	1ccd      	adds	r5, r1, #3
 800b182:	f025 0503 	bic.w	r5, r5, #3
 800b186:	3508      	adds	r5, #8
 800b188:	2d0c      	cmp	r5, #12
 800b18a:	bf38      	it	cc
 800b18c:	250c      	movcc	r5, #12
 800b18e:	2d00      	cmp	r5, #0
 800b190:	4607      	mov	r7, r0
 800b192:	db01      	blt.n	800b198 <_malloc_r+0x1c>
 800b194:	42a9      	cmp	r1, r5
 800b196:	d905      	bls.n	800b1a4 <_malloc_r+0x28>
 800b198:	230c      	movs	r3, #12
 800b19a:	603b      	str	r3, [r7, #0]
 800b19c:	2600      	movs	r6, #0
 800b19e:	4630      	mov	r0, r6
 800b1a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b278 <_malloc_r+0xfc>
 800b1a8:	f000 f868 	bl	800b27c <__malloc_lock>
 800b1ac:	f8d8 3000 	ldr.w	r3, [r8]
 800b1b0:	461c      	mov	r4, r3
 800b1b2:	bb5c      	cbnz	r4, 800b20c <_malloc_r+0x90>
 800b1b4:	4629      	mov	r1, r5
 800b1b6:	4638      	mov	r0, r7
 800b1b8:	f7ff ffc0 	bl	800b13c <sbrk_aligned>
 800b1bc:	1c43      	adds	r3, r0, #1
 800b1be:	4604      	mov	r4, r0
 800b1c0:	d155      	bne.n	800b26e <_malloc_r+0xf2>
 800b1c2:	f8d8 4000 	ldr.w	r4, [r8]
 800b1c6:	4626      	mov	r6, r4
 800b1c8:	2e00      	cmp	r6, #0
 800b1ca:	d145      	bne.n	800b258 <_malloc_r+0xdc>
 800b1cc:	2c00      	cmp	r4, #0
 800b1ce:	d048      	beq.n	800b262 <_malloc_r+0xe6>
 800b1d0:	6823      	ldr	r3, [r4, #0]
 800b1d2:	4631      	mov	r1, r6
 800b1d4:	4638      	mov	r0, r7
 800b1d6:	eb04 0903 	add.w	r9, r4, r3
 800b1da:	f002 f82f 	bl	800d23c <_sbrk_r>
 800b1de:	4581      	cmp	r9, r0
 800b1e0:	d13f      	bne.n	800b262 <_malloc_r+0xe6>
 800b1e2:	6821      	ldr	r1, [r4, #0]
 800b1e4:	1a6d      	subs	r5, r5, r1
 800b1e6:	4629      	mov	r1, r5
 800b1e8:	4638      	mov	r0, r7
 800b1ea:	f7ff ffa7 	bl	800b13c <sbrk_aligned>
 800b1ee:	3001      	adds	r0, #1
 800b1f0:	d037      	beq.n	800b262 <_malloc_r+0xe6>
 800b1f2:	6823      	ldr	r3, [r4, #0]
 800b1f4:	442b      	add	r3, r5
 800b1f6:	6023      	str	r3, [r4, #0]
 800b1f8:	f8d8 3000 	ldr.w	r3, [r8]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d038      	beq.n	800b272 <_malloc_r+0xf6>
 800b200:	685a      	ldr	r2, [r3, #4]
 800b202:	42a2      	cmp	r2, r4
 800b204:	d12b      	bne.n	800b25e <_malloc_r+0xe2>
 800b206:	2200      	movs	r2, #0
 800b208:	605a      	str	r2, [r3, #4]
 800b20a:	e00f      	b.n	800b22c <_malloc_r+0xb0>
 800b20c:	6822      	ldr	r2, [r4, #0]
 800b20e:	1b52      	subs	r2, r2, r5
 800b210:	d41f      	bmi.n	800b252 <_malloc_r+0xd6>
 800b212:	2a0b      	cmp	r2, #11
 800b214:	d917      	bls.n	800b246 <_malloc_r+0xca>
 800b216:	1961      	adds	r1, r4, r5
 800b218:	42a3      	cmp	r3, r4
 800b21a:	6025      	str	r5, [r4, #0]
 800b21c:	bf18      	it	ne
 800b21e:	6059      	strne	r1, [r3, #4]
 800b220:	6863      	ldr	r3, [r4, #4]
 800b222:	bf08      	it	eq
 800b224:	f8c8 1000 	streq.w	r1, [r8]
 800b228:	5162      	str	r2, [r4, r5]
 800b22a:	604b      	str	r3, [r1, #4]
 800b22c:	4638      	mov	r0, r7
 800b22e:	f104 060b 	add.w	r6, r4, #11
 800b232:	f000 f829 	bl	800b288 <__malloc_unlock>
 800b236:	f026 0607 	bic.w	r6, r6, #7
 800b23a:	1d23      	adds	r3, r4, #4
 800b23c:	1af2      	subs	r2, r6, r3
 800b23e:	d0ae      	beq.n	800b19e <_malloc_r+0x22>
 800b240:	1b9b      	subs	r3, r3, r6
 800b242:	50a3      	str	r3, [r4, r2]
 800b244:	e7ab      	b.n	800b19e <_malloc_r+0x22>
 800b246:	42a3      	cmp	r3, r4
 800b248:	6862      	ldr	r2, [r4, #4]
 800b24a:	d1dd      	bne.n	800b208 <_malloc_r+0x8c>
 800b24c:	f8c8 2000 	str.w	r2, [r8]
 800b250:	e7ec      	b.n	800b22c <_malloc_r+0xb0>
 800b252:	4623      	mov	r3, r4
 800b254:	6864      	ldr	r4, [r4, #4]
 800b256:	e7ac      	b.n	800b1b2 <_malloc_r+0x36>
 800b258:	4634      	mov	r4, r6
 800b25a:	6876      	ldr	r6, [r6, #4]
 800b25c:	e7b4      	b.n	800b1c8 <_malloc_r+0x4c>
 800b25e:	4613      	mov	r3, r2
 800b260:	e7cc      	b.n	800b1fc <_malloc_r+0x80>
 800b262:	230c      	movs	r3, #12
 800b264:	603b      	str	r3, [r7, #0]
 800b266:	4638      	mov	r0, r7
 800b268:	f000 f80e 	bl	800b288 <__malloc_unlock>
 800b26c:	e797      	b.n	800b19e <_malloc_r+0x22>
 800b26e:	6025      	str	r5, [r4, #0]
 800b270:	e7dc      	b.n	800b22c <_malloc_r+0xb0>
 800b272:	605b      	str	r3, [r3, #4]
 800b274:	deff      	udf	#255	; 0xff
 800b276:	bf00      	nop
 800b278:	20001010 	.word	0x20001010

0800b27c <__malloc_lock>:
 800b27c:	4801      	ldr	r0, [pc, #4]	; (800b284 <__malloc_lock+0x8>)
 800b27e:	f7ff b886 	b.w	800a38e <__retarget_lock_acquire_recursive>
 800b282:	bf00      	nop
 800b284:	2000100c 	.word	0x2000100c

0800b288 <__malloc_unlock>:
 800b288:	4801      	ldr	r0, [pc, #4]	; (800b290 <__malloc_unlock+0x8>)
 800b28a:	f7ff b881 	b.w	800a390 <__retarget_lock_release_recursive>
 800b28e:	bf00      	nop
 800b290:	2000100c 	.word	0x2000100c

0800b294 <_Balloc>:
 800b294:	b570      	push	{r4, r5, r6, lr}
 800b296:	69c6      	ldr	r6, [r0, #28]
 800b298:	4604      	mov	r4, r0
 800b29a:	460d      	mov	r5, r1
 800b29c:	b976      	cbnz	r6, 800b2bc <_Balloc+0x28>
 800b29e:	2010      	movs	r0, #16
 800b2a0:	f7ff ff44 	bl	800b12c <malloc>
 800b2a4:	4602      	mov	r2, r0
 800b2a6:	61e0      	str	r0, [r4, #28]
 800b2a8:	b920      	cbnz	r0, 800b2b4 <_Balloc+0x20>
 800b2aa:	4b18      	ldr	r3, [pc, #96]	; (800b30c <_Balloc+0x78>)
 800b2ac:	4818      	ldr	r0, [pc, #96]	; (800b310 <_Balloc+0x7c>)
 800b2ae:	216b      	movs	r1, #107	; 0x6b
 800b2b0:	f001 ffea 	bl	800d288 <__assert_func>
 800b2b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b2b8:	6006      	str	r6, [r0, #0]
 800b2ba:	60c6      	str	r6, [r0, #12]
 800b2bc:	69e6      	ldr	r6, [r4, #28]
 800b2be:	68f3      	ldr	r3, [r6, #12]
 800b2c0:	b183      	cbz	r3, 800b2e4 <_Balloc+0x50>
 800b2c2:	69e3      	ldr	r3, [r4, #28]
 800b2c4:	68db      	ldr	r3, [r3, #12]
 800b2c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b2ca:	b9b8      	cbnz	r0, 800b2fc <_Balloc+0x68>
 800b2cc:	2101      	movs	r1, #1
 800b2ce:	fa01 f605 	lsl.w	r6, r1, r5
 800b2d2:	1d72      	adds	r2, r6, #5
 800b2d4:	0092      	lsls	r2, r2, #2
 800b2d6:	4620      	mov	r0, r4
 800b2d8:	f001 fff4 	bl	800d2c4 <_calloc_r>
 800b2dc:	b160      	cbz	r0, 800b2f8 <_Balloc+0x64>
 800b2de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b2e2:	e00e      	b.n	800b302 <_Balloc+0x6e>
 800b2e4:	2221      	movs	r2, #33	; 0x21
 800b2e6:	2104      	movs	r1, #4
 800b2e8:	4620      	mov	r0, r4
 800b2ea:	f001 ffeb 	bl	800d2c4 <_calloc_r>
 800b2ee:	69e3      	ldr	r3, [r4, #28]
 800b2f0:	60f0      	str	r0, [r6, #12]
 800b2f2:	68db      	ldr	r3, [r3, #12]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d1e4      	bne.n	800b2c2 <_Balloc+0x2e>
 800b2f8:	2000      	movs	r0, #0
 800b2fa:	bd70      	pop	{r4, r5, r6, pc}
 800b2fc:	6802      	ldr	r2, [r0, #0]
 800b2fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b302:	2300      	movs	r3, #0
 800b304:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b308:	e7f7      	b.n	800b2fa <_Balloc+0x66>
 800b30a:	bf00      	nop
 800b30c:	0800dba2 	.word	0x0800dba2
 800b310:	0800dc22 	.word	0x0800dc22

0800b314 <_Bfree>:
 800b314:	b570      	push	{r4, r5, r6, lr}
 800b316:	69c6      	ldr	r6, [r0, #28]
 800b318:	4605      	mov	r5, r0
 800b31a:	460c      	mov	r4, r1
 800b31c:	b976      	cbnz	r6, 800b33c <_Bfree+0x28>
 800b31e:	2010      	movs	r0, #16
 800b320:	f7ff ff04 	bl	800b12c <malloc>
 800b324:	4602      	mov	r2, r0
 800b326:	61e8      	str	r0, [r5, #28]
 800b328:	b920      	cbnz	r0, 800b334 <_Bfree+0x20>
 800b32a:	4b09      	ldr	r3, [pc, #36]	; (800b350 <_Bfree+0x3c>)
 800b32c:	4809      	ldr	r0, [pc, #36]	; (800b354 <_Bfree+0x40>)
 800b32e:	218f      	movs	r1, #143	; 0x8f
 800b330:	f001 ffaa 	bl	800d288 <__assert_func>
 800b334:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b338:	6006      	str	r6, [r0, #0]
 800b33a:	60c6      	str	r6, [r0, #12]
 800b33c:	b13c      	cbz	r4, 800b34e <_Bfree+0x3a>
 800b33e:	69eb      	ldr	r3, [r5, #28]
 800b340:	6862      	ldr	r2, [r4, #4]
 800b342:	68db      	ldr	r3, [r3, #12]
 800b344:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b348:	6021      	str	r1, [r4, #0]
 800b34a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b34e:	bd70      	pop	{r4, r5, r6, pc}
 800b350:	0800dba2 	.word	0x0800dba2
 800b354:	0800dc22 	.word	0x0800dc22

0800b358 <__multadd>:
 800b358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b35c:	690d      	ldr	r5, [r1, #16]
 800b35e:	4607      	mov	r7, r0
 800b360:	460c      	mov	r4, r1
 800b362:	461e      	mov	r6, r3
 800b364:	f101 0c14 	add.w	ip, r1, #20
 800b368:	2000      	movs	r0, #0
 800b36a:	f8dc 3000 	ldr.w	r3, [ip]
 800b36e:	b299      	uxth	r1, r3
 800b370:	fb02 6101 	mla	r1, r2, r1, r6
 800b374:	0c1e      	lsrs	r6, r3, #16
 800b376:	0c0b      	lsrs	r3, r1, #16
 800b378:	fb02 3306 	mla	r3, r2, r6, r3
 800b37c:	b289      	uxth	r1, r1
 800b37e:	3001      	adds	r0, #1
 800b380:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b384:	4285      	cmp	r5, r0
 800b386:	f84c 1b04 	str.w	r1, [ip], #4
 800b38a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b38e:	dcec      	bgt.n	800b36a <__multadd+0x12>
 800b390:	b30e      	cbz	r6, 800b3d6 <__multadd+0x7e>
 800b392:	68a3      	ldr	r3, [r4, #8]
 800b394:	42ab      	cmp	r3, r5
 800b396:	dc19      	bgt.n	800b3cc <__multadd+0x74>
 800b398:	6861      	ldr	r1, [r4, #4]
 800b39a:	4638      	mov	r0, r7
 800b39c:	3101      	adds	r1, #1
 800b39e:	f7ff ff79 	bl	800b294 <_Balloc>
 800b3a2:	4680      	mov	r8, r0
 800b3a4:	b928      	cbnz	r0, 800b3b2 <__multadd+0x5a>
 800b3a6:	4602      	mov	r2, r0
 800b3a8:	4b0c      	ldr	r3, [pc, #48]	; (800b3dc <__multadd+0x84>)
 800b3aa:	480d      	ldr	r0, [pc, #52]	; (800b3e0 <__multadd+0x88>)
 800b3ac:	21ba      	movs	r1, #186	; 0xba
 800b3ae:	f001 ff6b 	bl	800d288 <__assert_func>
 800b3b2:	6922      	ldr	r2, [r4, #16]
 800b3b4:	3202      	adds	r2, #2
 800b3b6:	f104 010c 	add.w	r1, r4, #12
 800b3ba:	0092      	lsls	r2, r2, #2
 800b3bc:	300c      	adds	r0, #12
 800b3be:	f001 ff4d 	bl	800d25c <memcpy>
 800b3c2:	4621      	mov	r1, r4
 800b3c4:	4638      	mov	r0, r7
 800b3c6:	f7ff ffa5 	bl	800b314 <_Bfree>
 800b3ca:	4644      	mov	r4, r8
 800b3cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b3d0:	3501      	adds	r5, #1
 800b3d2:	615e      	str	r6, [r3, #20]
 800b3d4:	6125      	str	r5, [r4, #16]
 800b3d6:	4620      	mov	r0, r4
 800b3d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3dc:	0800dc11 	.word	0x0800dc11
 800b3e0:	0800dc22 	.word	0x0800dc22

0800b3e4 <__s2b>:
 800b3e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3e8:	460c      	mov	r4, r1
 800b3ea:	4615      	mov	r5, r2
 800b3ec:	461f      	mov	r7, r3
 800b3ee:	2209      	movs	r2, #9
 800b3f0:	3308      	adds	r3, #8
 800b3f2:	4606      	mov	r6, r0
 800b3f4:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3f8:	2100      	movs	r1, #0
 800b3fa:	2201      	movs	r2, #1
 800b3fc:	429a      	cmp	r2, r3
 800b3fe:	db09      	blt.n	800b414 <__s2b+0x30>
 800b400:	4630      	mov	r0, r6
 800b402:	f7ff ff47 	bl	800b294 <_Balloc>
 800b406:	b940      	cbnz	r0, 800b41a <__s2b+0x36>
 800b408:	4602      	mov	r2, r0
 800b40a:	4b19      	ldr	r3, [pc, #100]	; (800b470 <__s2b+0x8c>)
 800b40c:	4819      	ldr	r0, [pc, #100]	; (800b474 <__s2b+0x90>)
 800b40e:	21d3      	movs	r1, #211	; 0xd3
 800b410:	f001 ff3a 	bl	800d288 <__assert_func>
 800b414:	0052      	lsls	r2, r2, #1
 800b416:	3101      	adds	r1, #1
 800b418:	e7f0      	b.n	800b3fc <__s2b+0x18>
 800b41a:	9b08      	ldr	r3, [sp, #32]
 800b41c:	6143      	str	r3, [r0, #20]
 800b41e:	2d09      	cmp	r5, #9
 800b420:	f04f 0301 	mov.w	r3, #1
 800b424:	6103      	str	r3, [r0, #16]
 800b426:	dd16      	ble.n	800b456 <__s2b+0x72>
 800b428:	f104 0909 	add.w	r9, r4, #9
 800b42c:	46c8      	mov	r8, r9
 800b42e:	442c      	add	r4, r5
 800b430:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b434:	4601      	mov	r1, r0
 800b436:	3b30      	subs	r3, #48	; 0x30
 800b438:	220a      	movs	r2, #10
 800b43a:	4630      	mov	r0, r6
 800b43c:	f7ff ff8c 	bl	800b358 <__multadd>
 800b440:	45a0      	cmp	r8, r4
 800b442:	d1f5      	bne.n	800b430 <__s2b+0x4c>
 800b444:	f1a5 0408 	sub.w	r4, r5, #8
 800b448:	444c      	add	r4, r9
 800b44a:	1b2d      	subs	r5, r5, r4
 800b44c:	1963      	adds	r3, r4, r5
 800b44e:	42bb      	cmp	r3, r7
 800b450:	db04      	blt.n	800b45c <__s2b+0x78>
 800b452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b456:	340a      	adds	r4, #10
 800b458:	2509      	movs	r5, #9
 800b45a:	e7f6      	b.n	800b44a <__s2b+0x66>
 800b45c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b460:	4601      	mov	r1, r0
 800b462:	3b30      	subs	r3, #48	; 0x30
 800b464:	220a      	movs	r2, #10
 800b466:	4630      	mov	r0, r6
 800b468:	f7ff ff76 	bl	800b358 <__multadd>
 800b46c:	e7ee      	b.n	800b44c <__s2b+0x68>
 800b46e:	bf00      	nop
 800b470:	0800dc11 	.word	0x0800dc11
 800b474:	0800dc22 	.word	0x0800dc22

0800b478 <__hi0bits>:
 800b478:	0c03      	lsrs	r3, r0, #16
 800b47a:	041b      	lsls	r3, r3, #16
 800b47c:	b9d3      	cbnz	r3, 800b4b4 <__hi0bits+0x3c>
 800b47e:	0400      	lsls	r0, r0, #16
 800b480:	2310      	movs	r3, #16
 800b482:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b486:	bf04      	itt	eq
 800b488:	0200      	lsleq	r0, r0, #8
 800b48a:	3308      	addeq	r3, #8
 800b48c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b490:	bf04      	itt	eq
 800b492:	0100      	lsleq	r0, r0, #4
 800b494:	3304      	addeq	r3, #4
 800b496:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b49a:	bf04      	itt	eq
 800b49c:	0080      	lsleq	r0, r0, #2
 800b49e:	3302      	addeq	r3, #2
 800b4a0:	2800      	cmp	r0, #0
 800b4a2:	db05      	blt.n	800b4b0 <__hi0bits+0x38>
 800b4a4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b4a8:	f103 0301 	add.w	r3, r3, #1
 800b4ac:	bf08      	it	eq
 800b4ae:	2320      	moveq	r3, #32
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	4770      	bx	lr
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	e7e4      	b.n	800b482 <__hi0bits+0xa>

0800b4b8 <__lo0bits>:
 800b4b8:	6803      	ldr	r3, [r0, #0]
 800b4ba:	f013 0207 	ands.w	r2, r3, #7
 800b4be:	d00c      	beq.n	800b4da <__lo0bits+0x22>
 800b4c0:	07d9      	lsls	r1, r3, #31
 800b4c2:	d422      	bmi.n	800b50a <__lo0bits+0x52>
 800b4c4:	079a      	lsls	r2, r3, #30
 800b4c6:	bf49      	itett	mi
 800b4c8:	085b      	lsrmi	r3, r3, #1
 800b4ca:	089b      	lsrpl	r3, r3, #2
 800b4cc:	6003      	strmi	r3, [r0, #0]
 800b4ce:	2201      	movmi	r2, #1
 800b4d0:	bf5c      	itt	pl
 800b4d2:	6003      	strpl	r3, [r0, #0]
 800b4d4:	2202      	movpl	r2, #2
 800b4d6:	4610      	mov	r0, r2
 800b4d8:	4770      	bx	lr
 800b4da:	b299      	uxth	r1, r3
 800b4dc:	b909      	cbnz	r1, 800b4e2 <__lo0bits+0x2a>
 800b4de:	0c1b      	lsrs	r3, r3, #16
 800b4e0:	2210      	movs	r2, #16
 800b4e2:	b2d9      	uxtb	r1, r3
 800b4e4:	b909      	cbnz	r1, 800b4ea <__lo0bits+0x32>
 800b4e6:	3208      	adds	r2, #8
 800b4e8:	0a1b      	lsrs	r3, r3, #8
 800b4ea:	0719      	lsls	r1, r3, #28
 800b4ec:	bf04      	itt	eq
 800b4ee:	091b      	lsreq	r3, r3, #4
 800b4f0:	3204      	addeq	r2, #4
 800b4f2:	0799      	lsls	r1, r3, #30
 800b4f4:	bf04      	itt	eq
 800b4f6:	089b      	lsreq	r3, r3, #2
 800b4f8:	3202      	addeq	r2, #2
 800b4fa:	07d9      	lsls	r1, r3, #31
 800b4fc:	d403      	bmi.n	800b506 <__lo0bits+0x4e>
 800b4fe:	085b      	lsrs	r3, r3, #1
 800b500:	f102 0201 	add.w	r2, r2, #1
 800b504:	d003      	beq.n	800b50e <__lo0bits+0x56>
 800b506:	6003      	str	r3, [r0, #0]
 800b508:	e7e5      	b.n	800b4d6 <__lo0bits+0x1e>
 800b50a:	2200      	movs	r2, #0
 800b50c:	e7e3      	b.n	800b4d6 <__lo0bits+0x1e>
 800b50e:	2220      	movs	r2, #32
 800b510:	e7e1      	b.n	800b4d6 <__lo0bits+0x1e>
	...

0800b514 <__i2b>:
 800b514:	b510      	push	{r4, lr}
 800b516:	460c      	mov	r4, r1
 800b518:	2101      	movs	r1, #1
 800b51a:	f7ff febb 	bl	800b294 <_Balloc>
 800b51e:	4602      	mov	r2, r0
 800b520:	b928      	cbnz	r0, 800b52e <__i2b+0x1a>
 800b522:	4b05      	ldr	r3, [pc, #20]	; (800b538 <__i2b+0x24>)
 800b524:	4805      	ldr	r0, [pc, #20]	; (800b53c <__i2b+0x28>)
 800b526:	f240 1145 	movw	r1, #325	; 0x145
 800b52a:	f001 fead 	bl	800d288 <__assert_func>
 800b52e:	2301      	movs	r3, #1
 800b530:	6144      	str	r4, [r0, #20]
 800b532:	6103      	str	r3, [r0, #16]
 800b534:	bd10      	pop	{r4, pc}
 800b536:	bf00      	nop
 800b538:	0800dc11 	.word	0x0800dc11
 800b53c:	0800dc22 	.word	0x0800dc22

0800b540 <__multiply>:
 800b540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b544:	4691      	mov	r9, r2
 800b546:	690a      	ldr	r2, [r1, #16]
 800b548:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b54c:	429a      	cmp	r2, r3
 800b54e:	bfb8      	it	lt
 800b550:	460b      	movlt	r3, r1
 800b552:	460c      	mov	r4, r1
 800b554:	bfbc      	itt	lt
 800b556:	464c      	movlt	r4, r9
 800b558:	4699      	movlt	r9, r3
 800b55a:	6927      	ldr	r7, [r4, #16]
 800b55c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b560:	68a3      	ldr	r3, [r4, #8]
 800b562:	6861      	ldr	r1, [r4, #4]
 800b564:	eb07 060a 	add.w	r6, r7, sl
 800b568:	42b3      	cmp	r3, r6
 800b56a:	b085      	sub	sp, #20
 800b56c:	bfb8      	it	lt
 800b56e:	3101      	addlt	r1, #1
 800b570:	f7ff fe90 	bl	800b294 <_Balloc>
 800b574:	b930      	cbnz	r0, 800b584 <__multiply+0x44>
 800b576:	4602      	mov	r2, r0
 800b578:	4b44      	ldr	r3, [pc, #272]	; (800b68c <__multiply+0x14c>)
 800b57a:	4845      	ldr	r0, [pc, #276]	; (800b690 <__multiply+0x150>)
 800b57c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b580:	f001 fe82 	bl	800d288 <__assert_func>
 800b584:	f100 0514 	add.w	r5, r0, #20
 800b588:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b58c:	462b      	mov	r3, r5
 800b58e:	2200      	movs	r2, #0
 800b590:	4543      	cmp	r3, r8
 800b592:	d321      	bcc.n	800b5d8 <__multiply+0x98>
 800b594:	f104 0314 	add.w	r3, r4, #20
 800b598:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b59c:	f109 0314 	add.w	r3, r9, #20
 800b5a0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b5a4:	9202      	str	r2, [sp, #8]
 800b5a6:	1b3a      	subs	r2, r7, r4
 800b5a8:	3a15      	subs	r2, #21
 800b5aa:	f022 0203 	bic.w	r2, r2, #3
 800b5ae:	3204      	adds	r2, #4
 800b5b0:	f104 0115 	add.w	r1, r4, #21
 800b5b4:	428f      	cmp	r7, r1
 800b5b6:	bf38      	it	cc
 800b5b8:	2204      	movcc	r2, #4
 800b5ba:	9201      	str	r2, [sp, #4]
 800b5bc:	9a02      	ldr	r2, [sp, #8]
 800b5be:	9303      	str	r3, [sp, #12]
 800b5c0:	429a      	cmp	r2, r3
 800b5c2:	d80c      	bhi.n	800b5de <__multiply+0x9e>
 800b5c4:	2e00      	cmp	r6, #0
 800b5c6:	dd03      	ble.n	800b5d0 <__multiply+0x90>
 800b5c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d05b      	beq.n	800b688 <__multiply+0x148>
 800b5d0:	6106      	str	r6, [r0, #16]
 800b5d2:	b005      	add	sp, #20
 800b5d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5d8:	f843 2b04 	str.w	r2, [r3], #4
 800b5dc:	e7d8      	b.n	800b590 <__multiply+0x50>
 800b5de:	f8b3 a000 	ldrh.w	sl, [r3]
 800b5e2:	f1ba 0f00 	cmp.w	sl, #0
 800b5e6:	d024      	beq.n	800b632 <__multiply+0xf2>
 800b5e8:	f104 0e14 	add.w	lr, r4, #20
 800b5ec:	46a9      	mov	r9, r5
 800b5ee:	f04f 0c00 	mov.w	ip, #0
 800b5f2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b5f6:	f8d9 1000 	ldr.w	r1, [r9]
 800b5fa:	fa1f fb82 	uxth.w	fp, r2
 800b5fe:	b289      	uxth	r1, r1
 800b600:	fb0a 110b 	mla	r1, sl, fp, r1
 800b604:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b608:	f8d9 2000 	ldr.w	r2, [r9]
 800b60c:	4461      	add	r1, ip
 800b60e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b612:	fb0a c20b 	mla	r2, sl, fp, ip
 800b616:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b61a:	b289      	uxth	r1, r1
 800b61c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b620:	4577      	cmp	r7, lr
 800b622:	f849 1b04 	str.w	r1, [r9], #4
 800b626:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b62a:	d8e2      	bhi.n	800b5f2 <__multiply+0xb2>
 800b62c:	9a01      	ldr	r2, [sp, #4]
 800b62e:	f845 c002 	str.w	ip, [r5, r2]
 800b632:	9a03      	ldr	r2, [sp, #12]
 800b634:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b638:	3304      	adds	r3, #4
 800b63a:	f1b9 0f00 	cmp.w	r9, #0
 800b63e:	d021      	beq.n	800b684 <__multiply+0x144>
 800b640:	6829      	ldr	r1, [r5, #0]
 800b642:	f104 0c14 	add.w	ip, r4, #20
 800b646:	46ae      	mov	lr, r5
 800b648:	f04f 0a00 	mov.w	sl, #0
 800b64c:	f8bc b000 	ldrh.w	fp, [ip]
 800b650:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b654:	fb09 220b 	mla	r2, r9, fp, r2
 800b658:	4452      	add	r2, sl
 800b65a:	b289      	uxth	r1, r1
 800b65c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b660:	f84e 1b04 	str.w	r1, [lr], #4
 800b664:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b668:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b66c:	f8be 1000 	ldrh.w	r1, [lr]
 800b670:	fb09 110a 	mla	r1, r9, sl, r1
 800b674:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b678:	4567      	cmp	r7, ip
 800b67a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b67e:	d8e5      	bhi.n	800b64c <__multiply+0x10c>
 800b680:	9a01      	ldr	r2, [sp, #4]
 800b682:	50a9      	str	r1, [r5, r2]
 800b684:	3504      	adds	r5, #4
 800b686:	e799      	b.n	800b5bc <__multiply+0x7c>
 800b688:	3e01      	subs	r6, #1
 800b68a:	e79b      	b.n	800b5c4 <__multiply+0x84>
 800b68c:	0800dc11 	.word	0x0800dc11
 800b690:	0800dc22 	.word	0x0800dc22

0800b694 <__pow5mult>:
 800b694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b698:	4615      	mov	r5, r2
 800b69a:	f012 0203 	ands.w	r2, r2, #3
 800b69e:	4606      	mov	r6, r0
 800b6a0:	460f      	mov	r7, r1
 800b6a2:	d007      	beq.n	800b6b4 <__pow5mult+0x20>
 800b6a4:	4c25      	ldr	r4, [pc, #148]	; (800b73c <__pow5mult+0xa8>)
 800b6a6:	3a01      	subs	r2, #1
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b6ae:	f7ff fe53 	bl	800b358 <__multadd>
 800b6b2:	4607      	mov	r7, r0
 800b6b4:	10ad      	asrs	r5, r5, #2
 800b6b6:	d03d      	beq.n	800b734 <__pow5mult+0xa0>
 800b6b8:	69f4      	ldr	r4, [r6, #28]
 800b6ba:	b97c      	cbnz	r4, 800b6dc <__pow5mult+0x48>
 800b6bc:	2010      	movs	r0, #16
 800b6be:	f7ff fd35 	bl	800b12c <malloc>
 800b6c2:	4602      	mov	r2, r0
 800b6c4:	61f0      	str	r0, [r6, #28]
 800b6c6:	b928      	cbnz	r0, 800b6d4 <__pow5mult+0x40>
 800b6c8:	4b1d      	ldr	r3, [pc, #116]	; (800b740 <__pow5mult+0xac>)
 800b6ca:	481e      	ldr	r0, [pc, #120]	; (800b744 <__pow5mult+0xb0>)
 800b6cc:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b6d0:	f001 fdda 	bl	800d288 <__assert_func>
 800b6d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b6d8:	6004      	str	r4, [r0, #0]
 800b6da:	60c4      	str	r4, [r0, #12]
 800b6dc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b6e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b6e4:	b94c      	cbnz	r4, 800b6fa <__pow5mult+0x66>
 800b6e6:	f240 2171 	movw	r1, #625	; 0x271
 800b6ea:	4630      	mov	r0, r6
 800b6ec:	f7ff ff12 	bl	800b514 <__i2b>
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	f8c8 0008 	str.w	r0, [r8, #8]
 800b6f6:	4604      	mov	r4, r0
 800b6f8:	6003      	str	r3, [r0, #0]
 800b6fa:	f04f 0900 	mov.w	r9, #0
 800b6fe:	07eb      	lsls	r3, r5, #31
 800b700:	d50a      	bpl.n	800b718 <__pow5mult+0x84>
 800b702:	4639      	mov	r1, r7
 800b704:	4622      	mov	r2, r4
 800b706:	4630      	mov	r0, r6
 800b708:	f7ff ff1a 	bl	800b540 <__multiply>
 800b70c:	4639      	mov	r1, r7
 800b70e:	4680      	mov	r8, r0
 800b710:	4630      	mov	r0, r6
 800b712:	f7ff fdff 	bl	800b314 <_Bfree>
 800b716:	4647      	mov	r7, r8
 800b718:	106d      	asrs	r5, r5, #1
 800b71a:	d00b      	beq.n	800b734 <__pow5mult+0xa0>
 800b71c:	6820      	ldr	r0, [r4, #0]
 800b71e:	b938      	cbnz	r0, 800b730 <__pow5mult+0x9c>
 800b720:	4622      	mov	r2, r4
 800b722:	4621      	mov	r1, r4
 800b724:	4630      	mov	r0, r6
 800b726:	f7ff ff0b 	bl	800b540 <__multiply>
 800b72a:	6020      	str	r0, [r4, #0]
 800b72c:	f8c0 9000 	str.w	r9, [r0]
 800b730:	4604      	mov	r4, r0
 800b732:	e7e4      	b.n	800b6fe <__pow5mult+0x6a>
 800b734:	4638      	mov	r0, r7
 800b736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b73a:	bf00      	nop
 800b73c:	0800dd70 	.word	0x0800dd70
 800b740:	0800dba2 	.word	0x0800dba2
 800b744:	0800dc22 	.word	0x0800dc22

0800b748 <__lshift>:
 800b748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b74c:	460c      	mov	r4, r1
 800b74e:	6849      	ldr	r1, [r1, #4]
 800b750:	6923      	ldr	r3, [r4, #16]
 800b752:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b756:	68a3      	ldr	r3, [r4, #8]
 800b758:	4607      	mov	r7, r0
 800b75a:	4691      	mov	r9, r2
 800b75c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b760:	f108 0601 	add.w	r6, r8, #1
 800b764:	42b3      	cmp	r3, r6
 800b766:	db0b      	blt.n	800b780 <__lshift+0x38>
 800b768:	4638      	mov	r0, r7
 800b76a:	f7ff fd93 	bl	800b294 <_Balloc>
 800b76e:	4605      	mov	r5, r0
 800b770:	b948      	cbnz	r0, 800b786 <__lshift+0x3e>
 800b772:	4602      	mov	r2, r0
 800b774:	4b28      	ldr	r3, [pc, #160]	; (800b818 <__lshift+0xd0>)
 800b776:	4829      	ldr	r0, [pc, #164]	; (800b81c <__lshift+0xd4>)
 800b778:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b77c:	f001 fd84 	bl	800d288 <__assert_func>
 800b780:	3101      	adds	r1, #1
 800b782:	005b      	lsls	r3, r3, #1
 800b784:	e7ee      	b.n	800b764 <__lshift+0x1c>
 800b786:	2300      	movs	r3, #0
 800b788:	f100 0114 	add.w	r1, r0, #20
 800b78c:	f100 0210 	add.w	r2, r0, #16
 800b790:	4618      	mov	r0, r3
 800b792:	4553      	cmp	r3, sl
 800b794:	db33      	blt.n	800b7fe <__lshift+0xb6>
 800b796:	6920      	ldr	r0, [r4, #16]
 800b798:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b79c:	f104 0314 	add.w	r3, r4, #20
 800b7a0:	f019 091f 	ands.w	r9, r9, #31
 800b7a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b7a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b7ac:	d02b      	beq.n	800b806 <__lshift+0xbe>
 800b7ae:	f1c9 0e20 	rsb	lr, r9, #32
 800b7b2:	468a      	mov	sl, r1
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	6818      	ldr	r0, [r3, #0]
 800b7b8:	fa00 f009 	lsl.w	r0, r0, r9
 800b7bc:	4310      	orrs	r0, r2
 800b7be:	f84a 0b04 	str.w	r0, [sl], #4
 800b7c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7c6:	459c      	cmp	ip, r3
 800b7c8:	fa22 f20e 	lsr.w	r2, r2, lr
 800b7cc:	d8f3      	bhi.n	800b7b6 <__lshift+0x6e>
 800b7ce:	ebac 0304 	sub.w	r3, ip, r4
 800b7d2:	3b15      	subs	r3, #21
 800b7d4:	f023 0303 	bic.w	r3, r3, #3
 800b7d8:	3304      	adds	r3, #4
 800b7da:	f104 0015 	add.w	r0, r4, #21
 800b7de:	4584      	cmp	ip, r0
 800b7e0:	bf38      	it	cc
 800b7e2:	2304      	movcc	r3, #4
 800b7e4:	50ca      	str	r2, [r1, r3]
 800b7e6:	b10a      	cbz	r2, 800b7ec <__lshift+0xa4>
 800b7e8:	f108 0602 	add.w	r6, r8, #2
 800b7ec:	3e01      	subs	r6, #1
 800b7ee:	4638      	mov	r0, r7
 800b7f0:	612e      	str	r6, [r5, #16]
 800b7f2:	4621      	mov	r1, r4
 800b7f4:	f7ff fd8e 	bl	800b314 <_Bfree>
 800b7f8:	4628      	mov	r0, r5
 800b7fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7fe:	f842 0f04 	str.w	r0, [r2, #4]!
 800b802:	3301      	adds	r3, #1
 800b804:	e7c5      	b.n	800b792 <__lshift+0x4a>
 800b806:	3904      	subs	r1, #4
 800b808:	f853 2b04 	ldr.w	r2, [r3], #4
 800b80c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b810:	459c      	cmp	ip, r3
 800b812:	d8f9      	bhi.n	800b808 <__lshift+0xc0>
 800b814:	e7ea      	b.n	800b7ec <__lshift+0xa4>
 800b816:	bf00      	nop
 800b818:	0800dc11 	.word	0x0800dc11
 800b81c:	0800dc22 	.word	0x0800dc22

0800b820 <__mcmp>:
 800b820:	b530      	push	{r4, r5, lr}
 800b822:	6902      	ldr	r2, [r0, #16]
 800b824:	690c      	ldr	r4, [r1, #16]
 800b826:	1b12      	subs	r2, r2, r4
 800b828:	d10e      	bne.n	800b848 <__mcmp+0x28>
 800b82a:	f100 0314 	add.w	r3, r0, #20
 800b82e:	3114      	adds	r1, #20
 800b830:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b834:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b838:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b83c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b840:	42a5      	cmp	r5, r4
 800b842:	d003      	beq.n	800b84c <__mcmp+0x2c>
 800b844:	d305      	bcc.n	800b852 <__mcmp+0x32>
 800b846:	2201      	movs	r2, #1
 800b848:	4610      	mov	r0, r2
 800b84a:	bd30      	pop	{r4, r5, pc}
 800b84c:	4283      	cmp	r3, r0
 800b84e:	d3f3      	bcc.n	800b838 <__mcmp+0x18>
 800b850:	e7fa      	b.n	800b848 <__mcmp+0x28>
 800b852:	f04f 32ff 	mov.w	r2, #4294967295
 800b856:	e7f7      	b.n	800b848 <__mcmp+0x28>

0800b858 <__mdiff>:
 800b858:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b85c:	460c      	mov	r4, r1
 800b85e:	4606      	mov	r6, r0
 800b860:	4611      	mov	r1, r2
 800b862:	4620      	mov	r0, r4
 800b864:	4690      	mov	r8, r2
 800b866:	f7ff ffdb 	bl	800b820 <__mcmp>
 800b86a:	1e05      	subs	r5, r0, #0
 800b86c:	d110      	bne.n	800b890 <__mdiff+0x38>
 800b86e:	4629      	mov	r1, r5
 800b870:	4630      	mov	r0, r6
 800b872:	f7ff fd0f 	bl	800b294 <_Balloc>
 800b876:	b930      	cbnz	r0, 800b886 <__mdiff+0x2e>
 800b878:	4b3a      	ldr	r3, [pc, #232]	; (800b964 <__mdiff+0x10c>)
 800b87a:	4602      	mov	r2, r0
 800b87c:	f240 2137 	movw	r1, #567	; 0x237
 800b880:	4839      	ldr	r0, [pc, #228]	; (800b968 <__mdiff+0x110>)
 800b882:	f001 fd01 	bl	800d288 <__assert_func>
 800b886:	2301      	movs	r3, #1
 800b888:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b88c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b890:	bfa4      	itt	ge
 800b892:	4643      	movge	r3, r8
 800b894:	46a0      	movge	r8, r4
 800b896:	4630      	mov	r0, r6
 800b898:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b89c:	bfa6      	itte	ge
 800b89e:	461c      	movge	r4, r3
 800b8a0:	2500      	movge	r5, #0
 800b8a2:	2501      	movlt	r5, #1
 800b8a4:	f7ff fcf6 	bl	800b294 <_Balloc>
 800b8a8:	b920      	cbnz	r0, 800b8b4 <__mdiff+0x5c>
 800b8aa:	4b2e      	ldr	r3, [pc, #184]	; (800b964 <__mdiff+0x10c>)
 800b8ac:	4602      	mov	r2, r0
 800b8ae:	f240 2145 	movw	r1, #581	; 0x245
 800b8b2:	e7e5      	b.n	800b880 <__mdiff+0x28>
 800b8b4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b8b8:	6926      	ldr	r6, [r4, #16]
 800b8ba:	60c5      	str	r5, [r0, #12]
 800b8bc:	f104 0914 	add.w	r9, r4, #20
 800b8c0:	f108 0514 	add.w	r5, r8, #20
 800b8c4:	f100 0e14 	add.w	lr, r0, #20
 800b8c8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b8cc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b8d0:	f108 0210 	add.w	r2, r8, #16
 800b8d4:	46f2      	mov	sl, lr
 800b8d6:	2100      	movs	r1, #0
 800b8d8:	f859 3b04 	ldr.w	r3, [r9], #4
 800b8dc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b8e0:	fa11 f88b 	uxtah	r8, r1, fp
 800b8e4:	b299      	uxth	r1, r3
 800b8e6:	0c1b      	lsrs	r3, r3, #16
 800b8e8:	eba8 0801 	sub.w	r8, r8, r1
 800b8ec:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b8f0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b8f4:	fa1f f888 	uxth.w	r8, r8
 800b8f8:	1419      	asrs	r1, r3, #16
 800b8fa:	454e      	cmp	r6, r9
 800b8fc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b900:	f84a 3b04 	str.w	r3, [sl], #4
 800b904:	d8e8      	bhi.n	800b8d8 <__mdiff+0x80>
 800b906:	1b33      	subs	r3, r6, r4
 800b908:	3b15      	subs	r3, #21
 800b90a:	f023 0303 	bic.w	r3, r3, #3
 800b90e:	3304      	adds	r3, #4
 800b910:	3415      	adds	r4, #21
 800b912:	42a6      	cmp	r6, r4
 800b914:	bf38      	it	cc
 800b916:	2304      	movcc	r3, #4
 800b918:	441d      	add	r5, r3
 800b91a:	4473      	add	r3, lr
 800b91c:	469e      	mov	lr, r3
 800b91e:	462e      	mov	r6, r5
 800b920:	4566      	cmp	r6, ip
 800b922:	d30e      	bcc.n	800b942 <__mdiff+0xea>
 800b924:	f10c 0203 	add.w	r2, ip, #3
 800b928:	1b52      	subs	r2, r2, r5
 800b92a:	f022 0203 	bic.w	r2, r2, #3
 800b92e:	3d03      	subs	r5, #3
 800b930:	45ac      	cmp	ip, r5
 800b932:	bf38      	it	cc
 800b934:	2200      	movcc	r2, #0
 800b936:	4413      	add	r3, r2
 800b938:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b93c:	b17a      	cbz	r2, 800b95e <__mdiff+0x106>
 800b93e:	6107      	str	r7, [r0, #16]
 800b940:	e7a4      	b.n	800b88c <__mdiff+0x34>
 800b942:	f856 8b04 	ldr.w	r8, [r6], #4
 800b946:	fa11 f288 	uxtah	r2, r1, r8
 800b94a:	1414      	asrs	r4, r2, #16
 800b94c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b950:	b292      	uxth	r2, r2
 800b952:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b956:	f84e 2b04 	str.w	r2, [lr], #4
 800b95a:	1421      	asrs	r1, r4, #16
 800b95c:	e7e0      	b.n	800b920 <__mdiff+0xc8>
 800b95e:	3f01      	subs	r7, #1
 800b960:	e7ea      	b.n	800b938 <__mdiff+0xe0>
 800b962:	bf00      	nop
 800b964:	0800dc11 	.word	0x0800dc11
 800b968:	0800dc22 	.word	0x0800dc22

0800b96c <__ulp>:
 800b96c:	b082      	sub	sp, #8
 800b96e:	ed8d 0b00 	vstr	d0, [sp]
 800b972:	9a01      	ldr	r2, [sp, #4]
 800b974:	4b0f      	ldr	r3, [pc, #60]	; (800b9b4 <__ulp+0x48>)
 800b976:	4013      	ands	r3, r2
 800b978:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	dc08      	bgt.n	800b992 <__ulp+0x26>
 800b980:	425b      	negs	r3, r3
 800b982:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b986:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b98a:	da04      	bge.n	800b996 <__ulp+0x2a>
 800b98c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b990:	4113      	asrs	r3, r2
 800b992:	2200      	movs	r2, #0
 800b994:	e008      	b.n	800b9a8 <__ulp+0x3c>
 800b996:	f1a2 0314 	sub.w	r3, r2, #20
 800b99a:	2b1e      	cmp	r3, #30
 800b99c:	bfda      	itte	le
 800b99e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b9a2:	40da      	lsrle	r2, r3
 800b9a4:	2201      	movgt	r2, #1
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	4619      	mov	r1, r3
 800b9aa:	4610      	mov	r0, r2
 800b9ac:	ec41 0b10 	vmov	d0, r0, r1
 800b9b0:	b002      	add	sp, #8
 800b9b2:	4770      	bx	lr
 800b9b4:	7ff00000 	.word	0x7ff00000

0800b9b8 <__b2d>:
 800b9b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9bc:	6906      	ldr	r6, [r0, #16]
 800b9be:	f100 0814 	add.w	r8, r0, #20
 800b9c2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b9c6:	1f37      	subs	r7, r6, #4
 800b9c8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b9cc:	4610      	mov	r0, r2
 800b9ce:	f7ff fd53 	bl	800b478 <__hi0bits>
 800b9d2:	f1c0 0320 	rsb	r3, r0, #32
 800b9d6:	280a      	cmp	r0, #10
 800b9d8:	600b      	str	r3, [r1, #0]
 800b9da:	491b      	ldr	r1, [pc, #108]	; (800ba48 <__b2d+0x90>)
 800b9dc:	dc15      	bgt.n	800ba0a <__b2d+0x52>
 800b9de:	f1c0 0c0b 	rsb	ip, r0, #11
 800b9e2:	fa22 f30c 	lsr.w	r3, r2, ip
 800b9e6:	45b8      	cmp	r8, r7
 800b9e8:	ea43 0501 	orr.w	r5, r3, r1
 800b9ec:	bf34      	ite	cc
 800b9ee:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b9f2:	2300      	movcs	r3, #0
 800b9f4:	3015      	adds	r0, #21
 800b9f6:	fa02 f000 	lsl.w	r0, r2, r0
 800b9fa:	fa23 f30c 	lsr.w	r3, r3, ip
 800b9fe:	4303      	orrs	r3, r0
 800ba00:	461c      	mov	r4, r3
 800ba02:	ec45 4b10 	vmov	d0, r4, r5
 800ba06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba0a:	45b8      	cmp	r8, r7
 800ba0c:	bf3a      	itte	cc
 800ba0e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ba12:	f1a6 0708 	subcc.w	r7, r6, #8
 800ba16:	2300      	movcs	r3, #0
 800ba18:	380b      	subs	r0, #11
 800ba1a:	d012      	beq.n	800ba42 <__b2d+0x8a>
 800ba1c:	f1c0 0120 	rsb	r1, r0, #32
 800ba20:	fa23 f401 	lsr.w	r4, r3, r1
 800ba24:	4082      	lsls	r2, r0
 800ba26:	4322      	orrs	r2, r4
 800ba28:	4547      	cmp	r7, r8
 800ba2a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800ba2e:	bf8c      	ite	hi
 800ba30:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ba34:	2200      	movls	r2, #0
 800ba36:	4083      	lsls	r3, r0
 800ba38:	40ca      	lsrs	r2, r1
 800ba3a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ba3e:	4313      	orrs	r3, r2
 800ba40:	e7de      	b.n	800ba00 <__b2d+0x48>
 800ba42:	ea42 0501 	orr.w	r5, r2, r1
 800ba46:	e7db      	b.n	800ba00 <__b2d+0x48>
 800ba48:	3ff00000 	.word	0x3ff00000

0800ba4c <__d2b>:
 800ba4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ba50:	460f      	mov	r7, r1
 800ba52:	2101      	movs	r1, #1
 800ba54:	ec59 8b10 	vmov	r8, r9, d0
 800ba58:	4616      	mov	r6, r2
 800ba5a:	f7ff fc1b 	bl	800b294 <_Balloc>
 800ba5e:	4604      	mov	r4, r0
 800ba60:	b930      	cbnz	r0, 800ba70 <__d2b+0x24>
 800ba62:	4602      	mov	r2, r0
 800ba64:	4b24      	ldr	r3, [pc, #144]	; (800baf8 <__d2b+0xac>)
 800ba66:	4825      	ldr	r0, [pc, #148]	; (800bafc <__d2b+0xb0>)
 800ba68:	f240 310f 	movw	r1, #783	; 0x30f
 800ba6c:	f001 fc0c 	bl	800d288 <__assert_func>
 800ba70:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ba74:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ba78:	bb2d      	cbnz	r5, 800bac6 <__d2b+0x7a>
 800ba7a:	9301      	str	r3, [sp, #4]
 800ba7c:	f1b8 0300 	subs.w	r3, r8, #0
 800ba80:	d026      	beq.n	800bad0 <__d2b+0x84>
 800ba82:	4668      	mov	r0, sp
 800ba84:	9300      	str	r3, [sp, #0]
 800ba86:	f7ff fd17 	bl	800b4b8 <__lo0bits>
 800ba8a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ba8e:	b1e8      	cbz	r0, 800bacc <__d2b+0x80>
 800ba90:	f1c0 0320 	rsb	r3, r0, #32
 800ba94:	fa02 f303 	lsl.w	r3, r2, r3
 800ba98:	430b      	orrs	r3, r1
 800ba9a:	40c2      	lsrs	r2, r0
 800ba9c:	6163      	str	r3, [r4, #20]
 800ba9e:	9201      	str	r2, [sp, #4]
 800baa0:	9b01      	ldr	r3, [sp, #4]
 800baa2:	61a3      	str	r3, [r4, #24]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	bf14      	ite	ne
 800baa8:	2202      	movne	r2, #2
 800baaa:	2201      	moveq	r2, #1
 800baac:	6122      	str	r2, [r4, #16]
 800baae:	b1bd      	cbz	r5, 800bae0 <__d2b+0x94>
 800bab0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bab4:	4405      	add	r5, r0
 800bab6:	603d      	str	r5, [r7, #0]
 800bab8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800babc:	6030      	str	r0, [r6, #0]
 800babe:	4620      	mov	r0, r4
 800bac0:	b003      	add	sp, #12
 800bac2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bac6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800baca:	e7d6      	b.n	800ba7a <__d2b+0x2e>
 800bacc:	6161      	str	r1, [r4, #20]
 800bace:	e7e7      	b.n	800baa0 <__d2b+0x54>
 800bad0:	a801      	add	r0, sp, #4
 800bad2:	f7ff fcf1 	bl	800b4b8 <__lo0bits>
 800bad6:	9b01      	ldr	r3, [sp, #4]
 800bad8:	6163      	str	r3, [r4, #20]
 800bada:	3020      	adds	r0, #32
 800badc:	2201      	movs	r2, #1
 800bade:	e7e5      	b.n	800baac <__d2b+0x60>
 800bae0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bae4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bae8:	6038      	str	r0, [r7, #0]
 800baea:	6918      	ldr	r0, [r3, #16]
 800baec:	f7ff fcc4 	bl	800b478 <__hi0bits>
 800baf0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800baf4:	e7e2      	b.n	800babc <__d2b+0x70>
 800baf6:	bf00      	nop
 800baf8:	0800dc11 	.word	0x0800dc11
 800bafc:	0800dc22 	.word	0x0800dc22

0800bb00 <__ratio>:
 800bb00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb04:	4688      	mov	r8, r1
 800bb06:	4669      	mov	r1, sp
 800bb08:	4681      	mov	r9, r0
 800bb0a:	f7ff ff55 	bl	800b9b8 <__b2d>
 800bb0e:	a901      	add	r1, sp, #4
 800bb10:	4640      	mov	r0, r8
 800bb12:	ec55 4b10 	vmov	r4, r5, d0
 800bb16:	f7ff ff4f 	bl	800b9b8 <__b2d>
 800bb1a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bb1e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bb22:	eba3 0c02 	sub.w	ip, r3, r2
 800bb26:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bb2a:	1a9b      	subs	r3, r3, r2
 800bb2c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bb30:	ec51 0b10 	vmov	r0, r1, d0
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	bfd6      	itet	le
 800bb38:	460a      	movle	r2, r1
 800bb3a:	462a      	movgt	r2, r5
 800bb3c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bb40:	468b      	mov	fp, r1
 800bb42:	462f      	mov	r7, r5
 800bb44:	bfd4      	ite	le
 800bb46:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800bb4a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bb4e:	4620      	mov	r0, r4
 800bb50:	ee10 2a10 	vmov	r2, s0
 800bb54:	465b      	mov	r3, fp
 800bb56:	4639      	mov	r1, r7
 800bb58:	f7f4 fe88 	bl	800086c <__aeabi_ddiv>
 800bb5c:	ec41 0b10 	vmov	d0, r0, r1
 800bb60:	b003      	add	sp, #12
 800bb62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bb66 <__copybits>:
 800bb66:	3901      	subs	r1, #1
 800bb68:	b570      	push	{r4, r5, r6, lr}
 800bb6a:	1149      	asrs	r1, r1, #5
 800bb6c:	6914      	ldr	r4, [r2, #16]
 800bb6e:	3101      	adds	r1, #1
 800bb70:	f102 0314 	add.w	r3, r2, #20
 800bb74:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bb78:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bb7c:	1f05      	subs	r5, r0, #4
 800bb7e:	42a3      	cmp	r3, r4
 800bb80:	d30c      	bcc.n	800bb9c <__copybits+0x36>
 800bb82:	1aa3      	subs	r3, r4, r2
 800bb84:	3b11      	subs	r3, #17
 800bb86:	f023 0303 	bic.w	r3, r3, #3
 800bb8a:	3211      	adds	r2, #17
 800bb8c:	42a2      	cmp	r2, r4
 800bb8e:	bf88      	it	hi
 800bb90:	2300      	movhi	r3, #0
 800bb92:	4418      	add	r0, r3
 800bb94:	2300      	movs	r3, #0
 800bb96:	4288      	cmp	r0, r1
 800bb98:	d305      	bcc.n	800bba6 <__copybits+0x40>
 800bb9a:	bd70      	pop	{r4, r5, r6, pc}
 800bb9c:	f853 6b04 	ldr.w	r6, [r3], #4
 800bba0:	f845 6f04 	str.w	r6, [r5, #4]!
 800bba4:	e7eb      	b.n	800bb7e <__copybits+0x18>
 800bba6:	f840 3b04 	str.w	r3, [r0], #4
 800bbaa:	e7f4      	b.n	800bb96 <__copybits+0x30>

0800bbac <__any_on>:
 800bbac:	f100 0214 	add.w	r2, r0, #20
 800bbb0:	6900      	ldr	r0, [r0, #16]
 800bbb2:	114b      	asrs	r3, r1, #5
 800bbb4:	4298      	cmp	r0, r3
 800bbb6:	b510      	push	{r4, lr}
 800bbb8:	db11      	blt.n	800bbde <__any_on+0x32>
 800bbba:	dd0a      	ble.n	800bbd2 <__any_on+0x26>
 800bbbc:	f011 011f 	ands.w	r1, r1, #31
 800bbc0:	d007      	beq.n	800bbd2 <__any_on+0x26>
 800bbc2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bbc6:	fa24 f001 	lsr.w	r0, r4, r1
 800bbca:	fa00 f101 	lsl.w	r1, r0, r1
 800bbce:	428c      	cmp	r4, r1
 800bbd0:	d10b      	bne.n	800bbea <__any_on+0x3e>
 800bbd2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bbd6:	4293      	cmp	r3, r2
 800bbd8:	d803      	bhi.n	800bbe2 <__any_on+0x36>
 800bbda:	2000      	movs	r0, #0
 800bbdc:	bd10      	pop	{r4, pc}
 800bbde:	4603      	mov	r3, r0
 800bbe0:	e7f7      	b.n	800bbd2 <__any_on+0x26>
 800bbe2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bbe6:	2900      	cmp	r1, #0
 800bbe8:	d0f5      	beq.n	800bbd6 <__any_on+0x2a>
 800bbea:	2001      	movs	r0, #1
 800bbec:	e7f6      	b.n	800bbdc <__any_on+0x30>

0800bbee <sulp>:
 800bbee:	b570      	push	{r4, r5, r6, lr}
 800bbf0:	4604      	mov	r4, r0
 800bbf2:	460d      	mov	r5, r1
 800bbf4:	ec45 4b10 	vmov	d0, r4, r5
 800bbf8:	4616      	mov	r6, r2
 800bbfa:	f7ff feb7 	bl	800b96c <__ulp>
 800bbfe:	ec51 0b10 	vmov	r0, r1, d0
 800bc02:	b17e      	cbz	r6, 800bc24 <sulp+0x36>
 800bc04:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bc08:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	dd09      	ble.n	800bc24 <sulp+0x36>
 800bc10:	051b      	lsls	r3, r3, #20
 800bc12:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800bc16:	2400      	movs	r4, #0
 800bc18:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800bc1c:	4622      	mov	r2, r4
 800bc1e:	462b      	mov	r3, r5
 800bc20:	f7f4 fcfa 	bl	8000618 <__aeabi_dmul>
 800bc24:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bc28 <_strtod_l>:
 800bc28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc2c:	ed2d 8b02 	vpush	{d8}
 800bc30:	b09b      	sub	sp, #108	; 0x6c
 800bc32:	4604      	mov	r4, r0
 800bc34:	9213      	str	r2, [sp, #76]	; 0x4c
 800bc36:	2200      	movs	r2, #0
 800bc38:	9216      	str	r2, [sp, #88]	; 0x58
 800bc3a:	460d      	mov	r5, r1
 800bc3c:	f04f 0800 	mov.w	r8, #0
 800bc40:	f04f 0900 	mov.w	r9, #0
 800bc44:	460a      	mov	r2, r1
 800bc46:	9215      	str	r2, [sp, #84]	; 0x54
 800bc48:	7811      	ldrb	r1, [r2, #0]
 800bc4a:	292b      	cmp	r1, #43	; 0x2b
 800bc4c:	d04c      	beq.n	800bce8 <_strtod_l+0xc0>
 800bc4e:	d83a      	bhi.n	800bcc6 <_strtod_l+0x9e>
 800bc50:	290d      	cmp	r1, #13
 800bc52:	d834      	bhi.n	800bcbe <_strtod_l+0x96>
 800bc54:	2908      	cmp	r1, #8
 800bc56:	d834      	bhi.n	800bcc2 <_strtod_l+0x9a>
 800bc58:	2900      	cmp	r1, #0
 800bc5a:	d03d      	beq.n	800bcd8 <_strtod_l+0xb0>
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	920a      	str	r2, [sp, #40]	; 0x28
 800bc60:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800bc62:	7832      	ldrb	r2, [r6, #0]
 800bc64:	2a30      	cmp	r2, #48	; 0x30
 800bc66:	f040 80b4 	bne.w	800bdd2 <_strtod_l+0x1aa>
 800bc6a:	7872      	ldrb	r2, [r6, #1]
 800bc6c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800bc70:	2a58      	cmp	r2, #88	; 0x58
 800bc72:	d170      	bne.n	800bd56 <_strtod_l+0x12e>
 800bc74:	9302      	str	r3, [sp, #8]
 800bc76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc78:	9301      	str	r3, [sp, #4]
 800bc7a:	ab16      	add	r3, sp, #88	; 0x58
 800bc7c:	9300      	str	r3, [sp, #0]
 800bc7e:	4a8e      	ldr	r2, [pc, #568]	; (800beb8 <_strtod_l+0x290>)
 800bc80:	ab17      	add	r3, sp, #92	; 0x5c
 800bc82:	a915      	add	r1, sp, #84	; 0x54
 800bc84:	4620      	mov	r0, r4
 800bc86:	f001 fb9b 	bl	800d3c0 <__gethex>
 800bc8a:	f010 070f 	ands.w	r7, r0, #15
 800bc8e:	4605      	mov	r5, r0
 800bc90:	d005      	beq.n	800bc9e <_strtod_l+0x76>
 800bc92:	2f06      	cmp	r7, #6
 800bc94:	d12a      	bne.n	800bcec <_strtod_l+0xc4>
 800bc96:	3601      	adds	r6, #1
 800bc98:	2300      	movs	r3, #0
 800bc9a:	9615      	str	r6, [sp, #84]	; 0x54
 800bc9c:	930a      	str	r3, [sp, #40]	; 0x28
 800bc9e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	f040 857f 	bne.w	800c7a4 <_strtod_l+0xb7c>
 800bca6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bca8:	b1db      	cbz	r3, 800bce2 <_strtod_l+0xba>
 800bcaa:	4642      	mov	r2, r8
 800bcac:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bcb0:	ec43 2b10 	vmov	d0, r2, r3
 800bcb4:	b01b      	add	sp, #108	; 0x6c
 800bcb6:	ecbd 8b02 	vpop	{d8}
 800bcba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcbe:	2920      	cmp	r1, #32
 800bcc0:	d1cc      	bne.n	800bc5c <_strtod_l+0x34>
 800bcc2:	3201      	adds	r2, #1
 800bcc4:	e7bf      	b.n	800bc46 <_strtod_l+0x1e>
 800bcc6:	292d      	cmp	r1, #45	; 0x2d
 800bcc8:	d1c8      	bne.n	800bc5c <_strtod_l+0x34>
 800bcca:	2101      	movs	r1, #1
 800bccc:	910a      	str	r1, [sp, #40]	; 0x28
 800bcce:	1c51      	adds	r1, r2, #1
 800bcd0:	9115      	str	r1, [sp, #84]	; 0x54
 800bcd2:	7852      	ldrb	r2, [r2, #1]
 800bcd4:	2a00      	cmp	r2, #0
 800bcd6:	d1c3      	bne.n	800bc60 <_strtod_l+0x38>
 800bcd8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bcda:	9515      	str	r5, [sp, #84]	; 0x54
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	f040 855f 	bne.w	800c7a0 <_strtod_l+0xb78>
 800bce2:	4642      	mov	r2, r8
 800bce4:	464b      	mov	r3, r9
 800bce6:	e7e3      	b.n	800bcb0 <_strtod_l+0x88>
 800bce8:	2100      	movs	r1, #0
 800bcea:	e7ef      	b.n	800bccc <_strtod_l+0xa4>
 800bcec:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bcee:	b13a      	cbz	r2, 800bd00 <_strtod_l+0xd8>
 800bcf0:	2135      	movs	r1, #53	; 0x35
 800bcf2:	a818      	add	r0, sp, #96	; 0x60
 800bcf4:	f7ff ff37 	bl	800bb66 <__copybits>
 800bcf8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bcfa:	4620      	mov	r0, r4
 800bcfc:	f7ff fb0a 	bl	800b314 <_Bfree>
 800bd00:	3f01      	subs	r7, #1
 800bd02:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bd04:	2f04      	cmp	r7, #4
 800bd06:	d806      	bhi.n	800bd16 <_strtod_l+0xee>
 800bd08:	e8df f007 	tbb	[pc, r7]
 800bd0c:	201d0314 	.word	0x201d0314
 800bd10:	14          	.byte	0x14
 800bd11:	00          	.byte	0x00
 800bd12:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800bd16:	05e9      	lsls	r1, r5, #23
 800bd18:	bf48      	it	mi
 800bd1a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800bd1e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bd22:	0d1b      	lsrs	r3, r3, #20
 800bd24:	051b      	lsls	r3, r3, #20
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d1b9      	bne.n	800bc9e <_strtod_l+0x76>
 800bd2a:	f7fe fb05 	bl	800a338 <__errno>
 800bd2e:	2322      	movs	r3, #34	; 0x22
 800bd30:	6003      	str	r3, [r0, #0]
 800bd32:	e7b4      	b.n	800bc9e <_strtod_l+0x76>
 800bd34:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800bd38:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800bd3c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bd40:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800bd44:	e7e7      	b.n	800bd16 <_strtod_l+0xee>
 800bd46:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800bec0 <_strtod_l+0x298>
 800bd4a:	e7e4      	b.n	800bd16 <_strtod_l+0xee>
 800bd4c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800bd50:	f04f 38ff 	mov.w	r8, #4294967295
 800bd54:	e7df      	b.n	800bd16 <_strtod_l+0xee>
 800bd56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bd58:	1c5a      	adds	r2, r3, #1
 800bd5a:	9215      	str	r2, [sp, #84]	; 0x54
 800bd5c:	785b      	ldrb	r3, [r3, #1]
 800bd5e:	2b30      	cmp	r3, #48	; 0x30
 800bd60:	d0f9      	beq.n	800bd56 <_strtod_l+0x12e>
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d09b      	beq.n	800bc9e <_strtod_l+0x76>
 800bd66:	2301      	movs	r3, #1
 800bd68:	f04f 0a00 	mov.w	sl, #0
 800bd6c:	9304      	str	r3, [sp, #16]
 800bd6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bd70:	930b      	str	r3, [sp, #44]	; 0x2c
 800bd72:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800bd76:	46d3      	mov	fp, sl
 800bd78:	220a      	movs	r2, #10
 800bd7a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800bd7c:	7806      	ldrb	r6, [r0, #0]
 800bd7e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800bd82:	b2d9      	uxtb	r1, r3
 800bd84:	2909      	cmp	r1, #9
 800bd86:	d926      	bls.n	800bdd6 <_strtod_l+0x1ae>
 800bd88:	494c      	ldr	r1, [pc, #304]	; (800bebc <_strtod_l+0x294>)
 800bd8a:	2201      	movs	r2, #1
 800bd8c:	f001 fa22 	bl	800d1d4 <strncmp>
 800bd90:	2800      	cmp	r0, #0
 800bd92:	d030      	beq.n	800bdf6 <_strtod_l+0x1ce>
 800bd94:	2000      	movs	r0, #0
 800bd96:	4632      	mov	r2, r6
 800bd98:	9005      	str	r0, [sp, #20]
 800bd9a:	465e      	mov	r6, fp
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	2a65      	cmp	r2, #101	; 0x65
 800bda0:	d001      	beq.n	800bda6 <_strtod_l+0x17e>
 800bda2:	2a45      	cmp	r2, #69	; 0x45
 800bda4:	d113      	bne.n	800bdce <_strtod_l+0x1a6>
 800bda6:	b91e      	cbnz	r6, 800bdb0 <_strtod_l+0x188>
 800bda8:	9a04      	ldr	r2, [sp, #16]
 800bdaa:	4302      	orrs	r2, r0
 800bdac:	d094      	beq.n	800bcd8 <_strtod_l+0xb0>
 800bdae:	2600      	movs	r6, #0
 800bdb0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800bdb2:	1c6a      	adds	r2, r5, #1
 800bdb4:	9215      	str	r2, [sp, #84]	; 0x54
 800bdb6:	786a      	ldrb	r2, [r5, #1]
 800bdb8:	2a2b      	cmp	r2, #43	; 0x2b
 800bdba:	d074      	beq.n	800bea6 <_strtod_l+0x27e>
 800bdbc:	2a2d      	cmp	r2, #45	; 0x2d
 800bdbe:	d078      	beq.n	800beb2 <_strtod_l+0x28a>
 800bdc0:	f04f 0c00 	mov.w	ip, #0
 800bdc4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800bdc8:	2909      	cmp	r1, #9
 800bdca:	d97f      	bls.n	800becc <_strtod_l+0x2a4>
 800bdcc:	9515      	str	r5, [sp, #84]	; 0x54
 800bdce:	2700      	movs	r7, #0
 800bdd0:	e09e      	b.n	800bf10 <_strtod_l+0x2e8>
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	e7c8      	b.n	800bd68 <_strtod_l+0x140>
 800bdd6:	f1bb 0f08 	cmp.w	fp, #8
 800bdda:	bfd8      	it	le
 800bddc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800bdde:	f100 0001 	add.w	r0, r0, #1
 800bde2:	bfda      	itte	le
 800bde4:	fb02 3301 	mlale	r3, r2, r1, r3
 800bde8:	9309      	strle	r3, [sp, #36]	; 0x24
 800bdea:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800bdee:	f10b 0b01 	add.w	fp, fp, #1
 800bdf2:	9015      	str	r0, [sp, #84]	; 0x54
 800bdf4:	e7c1      	b.n	800bd7a <_strtod_l+0x152>
 800bdf6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bdf8:	1c5a      	adds	r2, r3, #1
 800bdfa:	9215      	str	r2, [sp, #84]	; 0x54
 800bdfc:	785a      	ldrb	r2, [r3, #1]
 800bdfe:	f1bb 0f00 	cmp.w	fp, #0
 800be02:	d037      	beq.n	800be74 <_strtod_l+0x24c>
 800be04:	9005      	str	r0, [sp, #20]
 800be06:	465e      	mov	r6, fp
 800be08:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800be0c:	2b09      	cmp	r3, #9
 800be0e:	d912      	bls.n	800be36 <_strtod_l+0x20e>
 800be10:	2301      	movs	r3, #1
 800be12:	e7c4      	b.n	800bd9e <_strtod_l+0x176>
 800be14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800be16:	1c5a      	adds	r2, r3, #1
 800be18:	9215      	str	r2, [sp, #84]	; 0x54
 800be1a:	785a      	ldrb	r2, [r3, #1]
 800be1c:	3001      	adds	r0, #1
 800be1e:	2a30      	cmp	r2, #48	; 0x30
 800be20:	d0f8      	beq.n	800be14 <_strtod_l+0x1ec>
 800be22:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800be26:	2b08      	cmp	r3, #8
 800be28:	f200 84c1 	bhi.w	800c7ae <_strtod_l+0xb86>
 800be2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800be2e:	9005      	str	r0, [sp, #20]
 800be30:	2000      	movs	r0, #0
 800be32:	930b      	str	r3, [sp, #44]	; 0x2c
 800be34:	4606      	mov	r6, r0
 800be36:	3a30      	subs	r2, #48	; 0x30
 800be38:	f100 0301 	add.w	r3, r0, #1
 800be3c:	d014      	beq.n	800be68 <_strtod_l+0x240>
 800be3e:	9905      	ldr	r1, [sp, #20]
 800be40:	4419      	add	r1, r3
 800be42:	9105      	str	r1, [sp, #20]
 800be44:	4633      	mov	r3, r6
 800be46:	eb00 0c06 	add.w	ip, r0, r6
 800be4a:	210a      	movs	r1, #10
 800be4c:	4563      	cmp	r3, ip
 800be4e:	d113      	bne.n	800be78 <_strtod_l+0x250>
 800be50:	1833      	adds	r3, r6, r0
 800be52:	2b08      	cmp	r3, #8
 800be54:	f106 0601 	add.w	r6, r6, #1
 800be58:	4406      	add	r6, r0
 800be5a:	dc1a      	bgt.n	800be92 <_strtod_l+0x26a>
 800be5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800be5e:	230a      	movs	r3, #10
 800be60:	fb03 2301 	mla	r3, r3, r1, r2
 800be64:	9309      	str	r3, [sp, #36]	; 0x24
 800be66:	2300      	movs	r3, #0
 800be68:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800be6a:	1c51      	adds	r1, r2, #1
 800be6c:	9115      	str	r1, [sp, #84]	; 0x54
 800be6e:	7852      	ldrb	r2, [r2, #1]
 800be70:	4618      	mov	r0, r3
 800be72:	e7c9      	b.n	800be08 <_strtod_l+0x1e0>
 800be74:	4658      	mov	r0, fp
 800be76:	e7d2      	b.n	800be1e <_strtod_l+0x1f6>
 800be78:	2b08      	cmp	r3, #8
 800be7a:	f103 0301 	add.w	r3, r3, #1
 800be7e:	dc03      	bgt.n	800be88 <_strtod_l+0x260>
 800be80:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800be82:	434f      	muls	r7, r1
 800be84:	9709      	str	r7, [sp, #36]	; 0x24
 800be86:	e7e1      	b.n	800be4c <_strtod_l+0x224>
 800be88:	2b10      	cmp	r3, #16
 800be8a:	bfd8      	it	le
 800be8c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800be90:	e7dc      	b.n	800be4c <_strtod_l+0x224>
 800be92:	2e10      	cmp	r6, #16
 800be94:	bfdc      	itt	le
 800be96:	230a      	movle	r3, #10
 800be98:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800be9c:	e7e3      	b.n	800be66 <_strtod_l+0x23e>
 800be9e:	2300      	movs	r3, #0
 800bea0:	9305      	str	r3, [sp, #20]
 800bea2:	2301      	movs	r3, #1
 800bea4:	e780      	b.n	800bda8 <_strtod_l+0x180>
 800bea6:	f04f 0c00 	mov.w	ip, #0
 800beaa:	1caa      	adds	r2, r5, #2
 800beac:	9215      	str	r2, [sp, #84]	; 0x54
 800beae:	78aa      	ldrb	r2, [r5, #2]
 800beb0:	e788      	b.n	800bdc4 <_strtod_l+0x19c>
 800beb2:	f04f 0c01 	mov.w	ip, #1
 800beb6:	e7f8      	b.n	800beaa <_strtod_l+0x282>
 800beb8:	0800dd80 	.word	0x0800dd80
 800bebc:	0800dd7c 	.word	0x0800dd7c
 800bec0:	7ff00000 	.word	0x7ff00000
 800bec4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bec6:	1c51      	adds	r1, r2, #1
 800bec8:	9115      	str	r1, [sp, #84]	; 0x54
 800beca:	7852      	ldrb	r2, [r2, #1]
 800becc:	2a30      	cmp	r2, #48	; 0x30
 800bece:	d0f9      	beq.n	800bec4 <_strtod_l+0x29c>
 800bed0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800bed4:	2908      	cmp	r1, #8
 800bed6:	f63f af7a 	bhi.w	800bdce <_strtod_l+0x1a6>
 800beda:	3a30      	subs	r2, #48	; 0x30
 800bedc:	9208      	str	r2, [sp, #32]
 800bede:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bee0:	920c      	str	r2, [sp, #48]	; 0x30
 800bee2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bee4:	1c57      	adds	r7, r2, #1
 800bee6:	9715      	str	r7, [sp, #84]	; 0x54
 800bee8:	7852      	ldrb	r2, [r2, #1]
 800beea:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800beee:	f1be 0f09 	cmp.w	lr, #9
 800bef2:	d938      	bls.n	800bf66 <_strtod_l+0x33e>
 800bef4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bef6:	1a7f      	subs	r7, r7, r1
 800bef8:	2f08      	cmp	r7, #8
 800befa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800befe:	dc03      	bgt.n	800bf08 <_strtod_l+0x2e0>
 800bf00:	9908      	ldr	r1, [sp, #32]
 800bf02:	428f      	cmp	r7, r1
 800bf04:	bfa8      	it	ge
 800bf06:	460f      	movge	r7, r1
 800bf08:	f1bc 0f00 	cmp.w	ip, #0
 800bf0c:	d000      	beq.n	800bf10 <_strtod_l+0x2e8>
 800bf0e:	427f      	negs	r7, r7
 800bf10:	2e00      	cmp	r6, #0
 800bf12:	d14f      	bne.n	800bfb4 <_strtod_l+0x38c>
 800bf14:	9904      	ldr	r1, [sp, #16]
 800bf16:	4301      	orrs	r1, r0
 800bf18:	f47f aec1 	bne.w	800bc9e <_strtod_l+0x76>
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	f47f aedb 	bne.w	800bcd8 <_strtod_l+0xb0>
 800bf22:	2a69      	cmp	r2, #105	; 0x69
 800bf24:	d029      	beq.n	800bf7a <_strtod_l+0x352>
 800bf26:	dc26      	bgt.n	800bf76 <_strtod_l+0x34e>
 800bf28:	2a49      	cmp	r2, #73	; 0x49
 800bf2a:	d026      	beq.n	800bf7a <_strtod_l+0x352>
 800bf2c:	2a4e      	cmp	r2, #78	; 0x4e
 800bf2e:	f47f aed3 	bne.w	800bcd8 <_strtod_l+0xb0>
 800bf32:	499b      	ldr	r1, [pc, #620]	; (800c1a0 <_strtod_l+0x578>)
 800bf34:	a815      	add	r0, sp, #84	; 0x54
 800bf36:	f001 fc83 	bl	800d840 <__match>
 800bf3a:	2800      	cmp	r0, #0
 800bf3c:	f43f aecc 	beq.w	800bcd8 <_strtod_l+0xb0>
 800bf40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bf42:	781b      	ldrb	r3, [r3, #0]
 800bf44:	2b28      	cmp	r3, #40	; 0x28
 800bf46:	d12f      	bne.n	800bfa8 <_strtod_l+0x380>
 800bf48:	4996      	ldr	r1, [pc, #600]	; (800c1a4 <_strtod_l+0x57c>)
 800bf4a:	aa18      	add	r2, sp, #96	; 0x60
 800bf4c:	a815      	add	r0, sp, #84	; 0x54
 800bf4e:	f001 fc8b 	bl	800d868 <__hexnan>
 800bf52:	2805      	cmp	r0, #5
 800bf54:	d128      	bne.n	800bfa8 <_strtod_l+0x380>
 800bf56:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bf58:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bf5c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800bf60:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800bf64:	e69b      	b.n	800bc9e <_strtod_l+0x76>
 800bf66:	9f08      	ldr	r7, [sp, #32]
 800bf68:	210a      	movs	r1, #10
 800bf6a:	fb01 2107 	mla	r1, r1, r7, r2
 800bf6e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800bf72:	9208      	str	r2, [sp, #32]
 800bf74:	e7b5      	b.n	800bee2 <_strtod_l+0x2ba>
 800bf76:	2a6e      	cmp	r2, #110	; 0x6e
 800bf78:	e7d9      	b.n	800bf2e <_strtod_l+0x306>
 800bf7a:	498b      	ldr	r1, [pc, #556]	; (800c1a8 <_strtod_l+0x580>)
 800bf7c:	a815      	add	r0, sp, #84	; 0x54
 800bf7e:	f001 fc5f 	bl	800d840 <__match>
 800bf82:	2800      	cmp	r0, #0
 800bf84:	f43f aea8 	beq.w	800bcd8 <_strtod_l+0xb0>
 800bf88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bf8a:	4988      	ldr	r1, [pc, #544]	; (800c1ac <_strtod_l+0x584>)
 800bf8c:	3b01      	subs	r3, #1
 800bf8e:	a815      	add	r0, sp, #84	; 0x54
 800bf90:	9315      	str	r3, [sp, #84]	; 0x54
 800bf92:	f001 fc55 	bl	800d840 <__match>
 800bf96:	b910      	cbnz	r0, 800bf9e <_strtod_l+0x376>
 800bf98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bf9a:	3301      	adds	r3, #1
 800bf9c:	9315      	str	r3, [sp, #84]	; 0x54
 800bf9e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800c1bc <_strtod_l+0x594>
 800bfa2:	f04f 0800 	mov.w	r8, #0
 800bfa6:	e67a      	b.n	800bc9e <_strtod_l+0x76>
 800bfa8:	4881      	ldr	r0, [pc, #516]	; (800c1b0 <_strtod_l+0x588>)
 800bfaa:	f001 f965 	bl	800d278 <nan>
 800bfae:	ec59 8b10 	vmov	r8, r9, d0
 800bfb2:	e674      	b.n	800bc9e <_strtod_l+0x76>
 800bfb4:	9b05      	ldr	r3, [sp, #20]
 800bfb6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bfb8:	1afb      	subs	r3, r7, r3
 800bfba:	f1bb 0f00 	cmp.w	fp, #0
 800bfbe:	bf08      	it	eq
 800bfc0:	46b3      	moveq	fp, r6
 800bfc2:	2e10      	cmp	r6, #16
 800bfc4:	9308      	str	r3, [sp, #32]
 800bfc6:	4635      	mov	r5, r6
 800bfc8:	bfa8      	it	ge
 800bfca:	2510      	movge	r5, #16
 800bfcc:	f7f4 faaa 	bl	8000524 <__aeabi_ui2d>
 800bfd0:	2e09      	cmp	r6, #9
 800bfd2:	4680      	mov	r8, r0
 800bfd4:	4689      	mov	r9, r1
 800bfd6:	dd13      	ble.n	800c000 <_strtod_l+0x3d8>
 800bfd8:	4b76      	ldr	r3, [pc, #472]	; (800c1b4 <_strtod_l+0x58c>)
 800bfda:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800bfde:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800bfe2:	f7f4 fb19 	bl	8000618 <__aeabi_dmul>
 800bfe6:	4680      	mov	r8, r0
 800bfe8:	4650      	mov	r0, sl
 800bfea:	4689      	mov	r9, r1
 800bfec:	f7f4 fa9a 	bl	8000524 <__aeabi_ui2d>
 800bff0:	4602      	mov	r2, r0
 800bff2:	460b      	mov	r3, r1
 800bff4:	4640      	mov	r0, r8
 800bff6:	4649      	mov	r1, r9
 800bff8:	f7f4 f958 	bl	80002ac <__adddf3>
 800bffc:	4680      	mov	r8, r0
 800bffe:	4689      	mov	r9, r1
 800c000:	2e0f      	cmp	r6, #15
 800c002:	dc38      	bgt.n	800c076 <_strtod_l+0x44e>
 800c004:	9b08      	ldr	r3, [sp, #32]
 800c006:	2b00      	cmp	r3, #0
 800c008:	f43f ae49 	beq.w	800bc9e <_strtod_l+0x76>
 800c00c:	dd24      	ble.n	800c058 <_strtod_l+0x430>
 800c00e:	2b16      	cmp	r3, #22
 800c010:	dc0b      	bgt.n	800c02a <_strtod_l+0x402>
 800c012:	4968      	ldr	r1, [pc, #416]	; (800c1b4 <_strtod_l+0x58c>)
 800c014:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c018:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c01c:	4642      	mov	r2, r8
 800c01e:	464b      	mov	r3, r9
 800c020:	f7f4 fafa 	bl	8000618 <__aeabi_dmul>
 800c024:	4680      	mov	r8, r0
 800c026:	4689      	mov	r9, r1
 800c028:	e639      	b.n	800bc9e <_strtod_l+0x76>
 800c02a:	9a08      	ldr	r2, [sp, #32]
 800c02c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800c030:	4293      	cmp	r3, r2
 800c032:	db20      	blt.n	800c076 <_strtod_l+0x44e>
 800c034:	4c5f      	ldr	r4, [pc, #380]	; (800c1b4 <_strtod_l+0x58c>)
 800c036:	f1c6 060f 	rsb	r6, r6, #15
 800c03a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800c03e:	4642      	mov	r2, r8
 800c040:	464b      	mov	r3, r9
 800c042:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c046:	f7f4 fae7 	bl	8000618 <__aeabi_dmul>
 800c04a:	9b08      	ldr	r3, [sp, #32]
 800c04c:	1b9e      	subs	r6, r3, r6
 800c04e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800c052:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c056:	e7e3      	b.n	800c020 <_strtod_l+0x3f8>
 800c058:	9b08      	ldr	r3, [sp, #32]
 800c05a:	3316      	adds	r3, #22
 800c05c:	db0b      	blt.n	800c076 <_strtod_l+0x44e>
 800c05e:	9b05      	ldr	r3, [sp, #20]
 800c060:	1bdf      	subs	r7, r3, r7
 800c062:	4b54      	ldr	r3, [pc, #336]	; (800c1b4 <_strtod_l+0x58c>)
 800c064:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c068:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c06c:	4640      	mov	r0, r8
 800c06e:	4649      	mov	r1, r9
 800c070:	f7f4 fbfc 	bl	800086c <__aeabi_ddiv>
 800c074:	e7d6      	b.n	800c024 <_strtod_l+0x3fc>
 800c076:	9b08      	ldr	r3, [sp, #32]
 800c078:	1b75      	subs	r5, r6, r5
 800c07a:	441d      	add	r5, r3
 800c07c:	2d00      	cmp	r5, #0
 800c07e:	dd70      	ble.n	800c162 <_strtod_l+0x53a>
 800c080:	f015 030f 	ands.w	r3, r5, #15
 800c084:	d00a      	beq.n	800c09c <_strtod_l+0x474>
 800c086:	494b      	ldr	r1, [pc, #300]	; (800c1b4 <_strtod_l+0x58c>)
 800c088:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c08c:	4642      	mov	r2, r8
 800c08e:	464b      	mov	r3, r9
 800c090:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c094:	f7f4 fac0 	bl	8000618 <__aeabi_dmul>
 800c098:	4680      	mov	r8, r0
 800c09a:	4689      	mov	r9, r1
 800c09c:	f035 050f 	bics.w	r5, r5, #15
 800c0a0:	d04d      	beq.n	800c13e <_strtod_l+0x516>
 800c0a2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800c0a6:	dd22      	ble.n	800c0ee <_strtod_l+0x4c6>
 800c0a8:	2500      	movs	r5, #0
 800c0aa:	46ab      	mov	fp, r5
 800c0ac:	9509      	str	r5, [sp, #36]	; 0x24
 800c0ae:	9505      	str	r5, [sp, #20]
 800c0b0:	2322      	movs	r3, #34	; 0x22
 800c0b2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800c1bc <_strtod_l+0x594>
 800c0b6:	6023      	str	r3, [r4, #0]
 800c0b8:	f04f 0800 	mov.w	r8, #0
 800c0bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	f43f aded 	beq.w	800bc9e <_strtod_l+0x76>
 800c0c4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c0c6:	4620      	mov	r0, r4
 800c0c8:	f7ff f924 	bl	800b314 <_Bfree>
 800c0cc:	9905      	ldr	r1, [sp, #20]
 800c0ce:	4620      	mov	r0, r4
 800c0d0:	f7ff f920 	bl	800b314 <_Bfree>
 800c0d4:	4659      	mov	r1, fp
 800c0d6:	4620      	mov	r0, r4
 800c0d8:	f7ff f91c 	bl	800b314 <_Bfree>
 800c0dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c0de:	4620      	mov	r0, r4
 800c0e0:	f7ff f918 	bl	800b314 <_Bfree>
 800c0e4:	4629      	mov	r1, r5
 800c0e6:	4620      	mov	r0, r4
 800c0e8:	f7ff f914 	bl	800b314 <_Bfree>
 800c0ec:	e5d7      	b.n	800bc9e <_strtod_l+0x76>
 800c0ee:	4b32      	ldr	r3, [pc, #200]	; (800c1b8 <_strtod_l+0x590>)
 800c0f0:	9304      	str	r3, [sp, #16]
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	112d      	asrs	r5, r5, #4
 800c0f6:	4640      	mov	r0, r8
 800c0f8:	4649      	mov	r1, r9
 800c0fa:	469a      	mov	sl, r3
 800c0fc:	2d01      	cmp	r5, #1
 800c0fe:	dc21      	bgt.n	800c144 <_strtod_l+0x51c>
 800c100:	b10b      	cbz	r3, 800c106 <_strtod_l+0x4de>
 800c102:	4680      	mov	r8, r0
 800c104:	4689      	mov	r9, r1
 800c106:	492c      	ldr	r1, [pc, #176]	; (800c1b8 <_strtod_l+0x590>)
 800c108:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800c10c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c110:	4642      	mov	r2, r8
 800c112:	464b      	mov	r3, r9
 800c114:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c118:	f7f4 fa7e 	bl	8000618 <__aeabi_dmul>
 800c11c:	4b27      	ldr	r3, [pc, #156]	; (800c1bc <_strtod_l+0x594>)
 800c11e:	460a      	mov	r2, r1
 800c120:	400b      	ands	r3, r1
 800c122:	4927      	ldr	r1, [pc, #156]	; (800c1c0 <_strtod_l+0x598>)
 800c124:	428b      	cmp	r3, r1
 800c126:	4680      	mov	r8, r0
 800c128:	d8be      	bhi.n	800c0a8 <_strtod_l+0x480>
 800c12a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c12e:	428b      	cmp	r3, r1
 800c130:	bf86      	itte	hi
 800c132:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800c1c4 <_strtod_l+0x59c>
 800c136:	f04f 38ff 	movhi.w	r8, #4294967295
 800c13a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800c13e:	2300      	movs	r3, #0
 800c140:	9304      	str	r3, [sp, #16]
 800c142:	e07b      	b.n	800c23c <_strtod_l+0x614>
 800c144:	07ea      	lsls	r2, r5, #31
 800c146:	d505      	bpl.n	800c154 <_strtod_l+0x52c>
 800c148:	9b04      	ldr	r3, [sp, #16]
 800c14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c14e:	f7f4 fa63 	bl	8000618 <__aeabi_dmul>
 800c152:	2301      	movs	r3, #1
 800c154:	9a04      	ldr	r2, [sp, #16]
 800c156:	3208      	adds	r2, #8
 800c158:	f10a 0a01 	add.w	sl, sl, #1
 800c15c:	106d      	asrs	r5, r5, #1
 800c15e:	9204      	str	r2, [sp, #16]
 800c160:	e7cc      	b.n	800c0fc <_strtod_l+0x4d4>
 800c162:	d0ec      	beq.n	800c13e <_strtod_l+0x516>
 800c164:	426d      	negs	r5, r5
 800c166:	f015 020f 	ands.w	r2, r5, #15
 800c16a:	d00a      	beq.n	800c182 <_strtod_l+0x55a>
 800c16c:	4b11      	ldr	r3, [pc, #68]	; (800c1b4 <_strtod_l+0x58c>)
 800c16e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c172:	4640      	mov	r0, r8
 800c174:	4649      	mov	r1, r9
 800c176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c17a:	f7f4 fb77 	bl	800086c <__aeabi_ddiv>
 800c17e:	4680      	mov	r8, r0
 800c180:	4689      	mov	r9, r1
 800c182:	112d      	asrs	r5, r5, #4
 800c184:	d0db      	beq.n	800c13e <_strtod_l+0x516>
 800c186:	2d1f      	cmp	r5, #31
 800c188:	dd1e      	ble.n	800c1c8 <_strtod_l+0x5a0>
 800c18a:	2500      	movs	r5, #0
 800c18c:	46ab      	mov	fp, r5
 800c18e:	9509      	str	r5, [sp, #36]	; 0x24
 800c190:	9505      	str	r5, [sp, #20]
 800c192:	2322      	movs	r3, #34	; 0x22
 800c194:	f04f 0800 	mov.w	r8, #0
 800c198:	f04f 0900 	mov.w	r9, #0
 800c19c:	6023      	str	r3, [r4, #0]
 800c19e:	e78d      	b.n	800c0bc <_strtod_l+0x494>
 800c1a0:	0800db69 	.word	0x0800db69
 800c1a4:	0800dd94 	.word	0x0800dd94
 800c1a8:	0800db61 	.word	0x0800db61
 800c1ac:	0800db98 	.word	0x0800db98
 800c1b0:	0800df25 	.word	0x0800df25
 800c1b4:	0800dca8 	.word	0x0800dca8
 800c1b8:	0800dc80 	.word	0x0800dc80
 800c1bc:	7ff00000 	.word	0x7ff00000
 800c1c0:	7ca00000 	.word	0x7ca00000
 800c1c4:	7fefffff 	.word	0x7fefffff
 800c1c8:	f015 0310 	ands.w	r3, r5, #16
 800c1cc:	bf18      	it	ne
 800c1ce:	236a      	movne	r3, #106	; 0x6a
 800c1d0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800c574 <_strtod_l+0x94c>
 800c1d4:	9304      	str	r3, [sp, #16]
 800c1d6:	4640      	mov	r0, r8
 800c1d8:	4649      	mov	r1, r9
 800c1da:	2300      	movs	r3, #0
 800c1dc:	07ea      	lsls	r2, r5, #31
 800c1de:	d504      	bpl.n	800c1ea <_strtod_l+0x5c2>
 800c1e0:	e9da 2300 	ldrd	r2, r3, [sl]
 800c1e4:	f7f4 fa18 	bl	8000618 <__aeabi_dmul>
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	106d      	asrs	r5, r5, #1
 800c1ec:	f10a 0a08 	add.w	sl, sl, #8
 800c1f0:	d1f4      	bne.n	800c1dc <_strtod_l+0x5b4>
 800c1f2:	b10b      	cbz	r3, 800c1f8 <_strtod_l+0x5d0>
 800c1f4:	4680      	mov	r8, r0
 800c1f6:	4689      	mov	r9, r1
 800c1f8:	9b04      	ldr	r3, [sp, #16]
 800c1fa:	b1bb      	cbz	r3, 800c22c <_strtod_l+0x604>
 800c1fc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800c200:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c204:	2b00      	cmp	r3, #0
 800c206:	4649      	mov	r1, r9
 800c208:	dd10      	ble.n	800c22c <_strtod_l+0x604>
 800c20a:	2b1f      	cmp	r3, #31
 800c20c:	f340 811e 	ble.w	800c44c <_strtod_l+0x824>
 800c210:	2b34      	cmp	r3, #52	; 0x34
 800c212:	bfde      	ittt	le
 800c214:	f04f 33ff 	movle.w	r3, #4294967295
 800c218:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c21c:	4093      	lslle	r3, r2
 800c21e:	f04f 0800 	mov.w	r8, #0
 800c222:	bfcc      	ite	gt
 800c224:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800c228:	ea03 0901 	andle.w	r9, r3, r1
 800c22c:	2200      	movs	r2, #0
 800c22e:	2300      	movs	r3, #0
 800c230:	4640      	mov	r0, r8
 800c232:	4649      	mov	r1, r9
 800c234:	f7f4 fc58 	bl	8000ae8 <__aeabi_dcmpeq>
 800c238:	2800      	cmp	r0, #0
 800c23a:	d1a6      	bne.n	800c18a <_strtod_l+0x562>
 800c23c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c23e:	9300      	str	r3, [sp, #0]
 800c240:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c242:	4633      	mov	r3, r6
 800c244:	465a      	mov	r2, fp
 800c246:	4620      	mov	r0, r4
 800c248:	f7ff f8cc 	bl	800b3e4 <__s2b>
 800c24c:	9009      	str	r0, [sp, #36]	; 0x24
 800c24e:	2800      	cmp	r0, #0
 800c250:	f43f af2a 	beq.w	800c0a8 <_strtod_l+0x480>
 800c254:	9a08      	ldr	r2, [sp, #32]
 800c256:	9b05      	ldr	r3, [sp, #20]
 800c258:	2a00      	cmp	r2, #0
 800c25a:	eba3 0307 	sub.w	r3, r3, r7
 800c25e:	bfa8      	it	ge
 800c260:	2300      	movge	r3, #0
 800c262:	930c      	str	r3, [sp, #48]	; 0x30
 800c264:	2500      	movs	r5, #0
 800c266:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c26a:	9312      	str	r3, [sp, #72]	; 0x48
 800c26c:	46ab      	mov	fp, r5
 800c26e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c270:	4620      	mov	r0, r4
 800c272:	6859      	ldr	r1, [r3, #4]
 800c274:	f7ff f80e 	bl	800b294 <_Balloc>
 800c278:	9005      	str	r0, [sp, #20]
 800c27a:	2800      	cmp	r0, #0
 800c27c:	f43f af18 	beq.w	800c0b0 <_strtod_l+0x488>
 800c280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c282:	691a      	ldr	r2, [r3, #16]
 800c284:	3202      	adds	r2, #2
 800c286:	f103 010c 	add.w	r1, r3, #12
 800c28a:	0092      	lsls	r2, r2, #2
 800c28c:	300c      	adds	r0, #12
 800c28e:	f000 ffe5 	bl	800d25c <memcpy>
 800c292:	ec49 8b10 	vmov	d0, r8, r9
 800c296:	aa18      	add	r2, sp, #96	; 0x60
 800c298:	a917      	add	r1, sp, #92	; 0x5c
 800c29a:	4620      	mov	r0, r4
 800c29c:	f7ff fbd6 	bl	800ba4c <__d2b>
 800c2a0:	ec49 8b18 	vmov	d8, r8, r9
 800c2a4:	9016      	str	r0, [sp, #88]	; 0x58
 800c2a6:	2800      	cmp	r0, #0
 800c2a8:	f43f af02 	beq.w	800c0b0 <_strtod_l+0x488>
 800c2ac:	2101      	movs	r1, #1
 800c2ae:	4620      	mov	r0, r4
 800c2b0:	f7ff f930 	bl	800b514 <__i2b>
 800c2b4:	4683      	mov	fp, r0
 800c2b6:	2800      	cmp	r0, #0
 800c2b8:	f43f aefa 	beq.w	800c0b0 <_strtod_l+0x488>
 800c2bc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c2be:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c2c0:	2e00      	cmp	r6, #0
 800c2c2:	bfab      	itete	ge
 800c2c4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800c2c6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800c2c8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c2ca:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800c2ce:	bfac      	ite	ge
 800c2d0:	eb06 0a03 	addge.w	sl, r6, r3
 800c2d4:	1b9f      	sublt	r7, r3, r6
 800c2d6:	9b04      	ldr	r3, [sp, #16]
 800c2d8:	1af6      	subs	r6, r6, r3
 800c2da:	4416      	add	r6, r2
 800c2dc:	4ba0      	ldr	r3, [pc, #640]	; (800c560 <_strtod_l+0x938>)
 800c2de:	3e01      	subs	r6, #1
 800c2e0:	429e      	cmp	r6, r3
 800c2e2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c2e6:	f280 80c4 	bge.w	800c472 <_strtod_l+0x84a>
 800c2ea:	1b9b      	subs	r3, r3, r6
 800c2ec:	2b1f      	cmp	r3, #31
 800c2ee:	eba2 0203 	sub.w	r2, r2, r3
 800c2f2:	f04f 0101 	mov.w	r1, #1
 800c2f6:	f300 80b0 	bgt.w	800c45a <_strtod_l+0x832>
 800c2fa:	fa01 f303 	lsl.w	r3, r1, r3
 800c2fe:	930e      	str	r3, [sp, #56]	; 0x38
 800c300:	2300      	movs	r3, #0
 800c302:	930d      	str	r3, [sp, #52]	; 0x34
 800c304:	eb0a 0602 	add.w	r6, sl, r2
 800c308:	9b04      	ldr	r3, [sp, #16]
 800c30a:	45b2      	cmp	sl, r6
 800c30c:	4417      	add	r7, r2
 800c30e:	441f      	add	r7, r3
 800c310:	4653      	mov	r3, sl
 800c312:	bfa8      	it	ge
 800c314:	4633      	movge	r3, r6
 800c316:	42bb      	cmp	r3, r7
 800c318:	bfa8      	it	ge
 800c31a:	463b      	movge	r3, r7
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	bfc2      	ittt	gt
 800c320:	1af6      	subgt	r6, r6, r3
 800c322:	1aff      	subgt	r7, r7, r3
 800c324:	ebaa 0a03 	subgt.w	sl, sl, r3
 800c328:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	dd17      	ble.n	800c35e <_strtod_l+0x736>
 800c32e:	4659      	mov	r1, fp
 800c330:	461a      	mov	r2, r3
 800c332:	4620      	mov	r0, r4
 800c334:	f7ff f9ae 	bl	800b694 <__pow5mult>
 800c338:	4683      	mov	fp, r0
 800c33a:	2800      	cmp	r0, #0
 800c33c:	f43f aeb8 	beq.w	800c0b0 <_strtod_l+0x488>
 800c340:	4601      	mov	r1, r0
 800c342:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c344:	4620      	mov	r0, r4
 800c346:	f7ff f8fb 	bl	800b540 <__multiply>
 800c34a:	900b      	str	r0, [sp, #44]	; 0x2c
 800c34c:	2800      	cmp	r0, #0
 800c34e:	f43f aeaf 	beq.w	800c0b0 <_strtod_l+0x488>
 800c352:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c354:	4620      	mov	r0, r4
 800c356:	f7fe ffdd 	bl	800b314 <_Bfree>
 800c35a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c35c:	9316      	str	r3, [sp, #88]	; 0x58
 800c35e:	2e00      	cmp	r6, #0
 800c360:	f300 808c 	bgt.w	800c47c <_strtod_l+0x854>
 800c364:	9b08      	ldr	r3, [sp, #32]
 800c366:	2b00      	cmp	r3, #0
 800c368:	dd08      	ble.n	800c37c <_strtod_l+0x754>
 800c36a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c36c:	9905      	ldr	r1, [sp, #20]
 800c36e:	4620      	mov	r0, r4
 800c370:	f7ff f990 	bl	800b694 <__pow5mult>
 800c374:	9005      	str	r0, [sp, #20]
 800c376:	2800      	cmp	r0, #0
 800c378:	f43f ae9a 	beq.w	800c0b0 <_strtod_l+0x488>
 800c37c:	2f00      	cmp	r7, #0
 800c37e:	dd08      	ble.n	800c392 <_strtod_l+0x76a>
 800c380:	9905      	ldr	r1, [sp, #20]
 800c382:	463a      	mov	r2, r7
 800c384:	4620      	mov	r0, r4
 800c386:	f7ff f9df 	bl	800b748 <__lshift>
 800c38a:	9005      	str	r0, [sp, #20]
 800c38c:	2800      	cmp	r0, #0
 800c38e:	f43f ae8f 	beq.w	800c0b0 <_strtod_l+0x488>
 800c392:	f1ba 0f00 	cmp.w	sl, #0
 800c396:	dd08      	ble.n	800c3aa <_strtod_l+0x782>
 800c398:	4659      	mov	r1, fp
 800c39a:	4652      	mov	r2, sl
 800c39c:	4620      	mov	r0, r4
 800c39e:	f7ff f9d3 	bl	800b748 <__lshift>
 800c3a2:	4683      	mov	fp, r0
 800c3a4:	2800      	cmp	r0, #0
 800c3a6:	f43f ae83 	beq.w	800c0b0 <_strtod_l+0x488>
 800c3aa:	9a05      	ldr	r2, [sp, #20]
 800c3ac:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c3ae:	4620      	mov	r0, r4
 800c3b0:	f7ff fa52 	bl	800b858 <__mdiff>
 800c3b4:	4605      	mov	r5, r0
 800c3b6:	2800      	cmp	r0, #0
 800c3b8:	f43f ae7a 	beq.w	800c0b0 <_strtod_l+0x488>
 800c3bc:	68c3      	ldr	r3, [r0, #12]
 800c3be:	930b      	str	r3, [sp, #44]	; 0x2c
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	60c3      	str	r3, [r0, #12]
 800c3c4:	4659      	mov	r1, fp
 800c3c6:	f7ff fa2b 	bl	800b820 <__mcmp>
 800c3ca:	2800      	cmp	r0, #0
 800c3cc:	da60      	bge.n	800c490 <_strtod_l+0x868>
 800c3ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3d0:	ea53 0308 	orrs.w	r3, r3, r8
 800c3d4:	f040 8084 	bne.w	800c4e0 <_strtod_l+0x8b8>
 800c3d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d17f      	bne.n	800c4e0 <_strtod_l+0x8b8>
 800c3e0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c3e4:	0d1b      	lsrs	r3, r3, #20
 800c3e6:	051b      	lsls	r3, r3, #20
 800c3e8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c3ec:	d978      	bls.n	800c4e0 <_strtod_l+0x8b8>
 800c3ee:	696b      	ldr	r3, [r5, #20]
 800c3f0:	b913      	cbnz	r3, 800c3f8 <_strtod_l+0x7d0>
 800c3f2:	692b      	ldr	r3, [r5, #16]
 800c3f4:	2b01      	cmp	r3, #1
 800c3f6:	dd73      	ble.n	800c4e0 <_strtod_l+0x8b8>
 800c3f8:	4629      	mov	r1, r5
 800c3fa:	2201      	movs	r2, #1
 800c3fc:	4620      	mov	r0, r4
 800c3fe:	f7ff f9a3 	bl	800b748 <__lshift>
 800c402:	4659      	mov	r1, fp
 800c404:	4605      	mov	r5, r0
 800c406:	f7ff fa0b 	bl	800b820 <__mcmp>
 800c40a:	2800      	cmp	r0, #0
 800c40c:	dd68      	ble.n	800c4e0 <_strtod_l+0x8b8>
 800c40e:	9904      	ldr	r1, [sp, #16]
 800c410:	4a54      	ldr	r2, [pc, #336]	; (800c564 <_strtod_l+0x93c>)
 800c412:	464b      	mov	r3, r9
 800c414:	2900      	cmp	r1, #0
 800c416:	f000 8084 	beq.w	800c522 <_strtod_l+0x8fa>
 800c41a:	ea02 0109 	and.w	r1, r2, r9
 800c41e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c422:	dc7e      	bgt.n	800c522 <_strtod_l+0x8fa>
 800c424:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c428:	f77f aeb3 	ble.w	800c192 <_strtod_l+0x56a>
 800c42c:	4b4e      	ldr	r3, [pc, #312]	; (800c568 <_strtod_l+0x940>)
 800c42e:	4640      	mov	r0, r8
 800c430:	4649      	mov	r1, r9
 800c432:	2200      	movs	r2, #0
 800c434:	f7f4 f8f0 	bl	8000618 <__aeabi_dmul>
 800c438:	4b4a      	ldr	r3, [pc, #296]	; (800c564 <_strtod_l+0x93c>)
 800c43a:	400b      	ands	r3, r1
 800c43c:	4680      	mov	r8, r0
 800c43e:	4689      	mov	r9, r1
 800c440:	2b00      	cmp	r3, #0
 800c442:	f47f ae3f 	bne.w	800c0c4 <_strtod_l+0x49c>
 800c446:	2322      	movs	r3, #34	; 0x22
 800c448:	6023      	str	r3, [r4, #0]
 800c44a:	e63b      	b.n	800c0c4 <_strtod_l+0x49c>
 800c44c:	f04f 32ff 	mov.w	r2, #4294967295
 800c450:	fa02 f303 	lsl.w	r3, r2, r3
 800c454:	ea03 0808 	and.w	r8, r3, r8
 800c458:	e6e8      	b.n	800c22c <_strtod_l+0x604>
 800c45a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800c45e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800c462:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800c466:	36e2      	adds	r6, #226	; 0xe2
 800c468:	fa01 f306 	lsl.w	r3, r1, r6
 800c46c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800c470:	e748      	b.n	800c304 <_strtod_l+0x6dc>
 800c472:	2100      	movs	r1, #0
 800c474:	2301      	movs	r3, #1
 800c476:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800c47a:	e743      	b.n	800c304 <_strtod_l+0x6dc>
 800c47c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c47e:	4632      	mov	r2, r6
 800c480:	4620      	mov	r0, r4
 800c482:	f7ff f961 	bl	800b748 <__lshift>
 800c486:	9016      	str	r0, [sp, #88]	; 0x58
 800c488:	2800      	cmp	r0, #0
 800c48a:	f47f af6b 	bne.w	800c364 <_strtod_l+0x73c>
 800c48e:	e60f      	b.n	800c0b0 <_strtod_l+0x488>
 800c490:	46ca      	mov	sl, r9
 800c492:	d171      	bne.n	800c578 <_strtod_l+0x950>
 800c494:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c496:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c49a:	b352      	cbz	r2, 800c4f2 <_strtod_l+0x8ca>
 800c49c:	4a33      	ldr	r2, [pc, #204]	; (800c56c <_strtod_l+0x944>)
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	d12a      	bne.n	800c4f8 <_strtod_l+0x8d0>
 800c4a2:	9b04      	ldr	r3, [sp, #16]
 800c4a4:	4641      	mov	r1, r8
 800c4a6:	b1fb      	cbz	r3, 800c4e8 <_strtod_l+0x8c0>
 800c4a8:	4b2e      	ldr	r3, [pc, #184]	; (800c564 <_strtod_l+0x93c>)
 800c4aa:	ea09 0303 	and.w	r3, r9, r3
 800c4ae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c4b2:	f04f 32ff 	mov.w	r2, #4294967295
 800c4b6:	d81a      	bhi.n	800c4ee <_strtod_l+0x8c6>
 800c4b8:	0d1b      	lsrs	r3, r3, #20
 800c4ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c4be:	fa02 f303 	lsl.w	r3, r2, r3
 800c4c2:	4299      	cmp	r1, r3
 800c4c4:	d118      	bne.n	800c4f8 <_strtod_l+0x8d0>
 800c4c6:	4b2a      	ldr	r3, [pc, #168]	; (800c570 <_strtod_l+0x948>)
 800c4c8:	459a      	cmp	sl, r3
 800c4ca:	d102      	bne.n	800c4d2 <_strtod_l+0x8aa>
 800c4cc:	3101      	adds	r1, #1
 800c4ce:	f43f adef 	beq.w	800c0b0 <_strtod_l+0x488>
 800c4d2:	4b24      	ldr	r3, [pc, #144]	; (800c564 <_strtod_l+0x93c>)
 800c4d4:	ea0a 0303 	and.w	r3, sl, r3
 800c4d8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800c4dc:	f04f 0800 	mov.w	r8, #0
 800c4e0:	9b04      	ldr	r3, [sp, #16]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d1a2      	bne.n	800c42c <_strtod_l+0x804>
 800c4e6:	e5ed      	b.n	800c0c4 <_strtod_l+0x49c>
 800c4e8:	f04f 33ff 	mov.w	r3, #4294967295
 800c4ec:	e7e9      	b.n	800c4c2 <_strtod_l+0x89a>
 800c4ee:	4613      	mov	r3, r2
 800c4f0:	e7e7      	b.n	800c4c2 <_strtod_l+0x89a>
 800c4f2:	ea53 0308 	orrs.w	r3, r3, r8
 800c4f6:	d08a      	beq.n	800c40e <_strtod_l+0x7e6>
 800c4f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c4fa:	b1e3      	cbz	r3, 800c536 <_strtod_l+0x90e>
 800c4fc:	ea13 0f0a 	tst.w	r3, sl
 800c500:	d0ee      	beq.n	800c4e0 <_strtod_l+0x8b8>
 800c502:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c504:	9a04      	ldr	r2, [sp, #16]
 800c506:	4640      	mov	r0, r8
 800c508:	4649      	mov	r1, r9
 800c50a:	b1c3      	cbz	r3, 800c53e <_strtod_l+0x916>
 800c50c:	f7ff fb6f 	bl	800bbee <sulp>
 800c510:	4602      	mov	r2, r0
 800c512:	460b      	mov	r3, r1
 800c514:	ec51 0b18 	vmov	r0, r1, d8
 800c518:	f7f3 fec8 	bl	80002ac <__adddf3>
 800c51c:	4680      	mov	r8, r0
 800c51e:	4689      	mov	r9, r1
 800c520:	e7de      	b.n	800c4e0 <_strtod_l+0x8b8>
 800c522:	4013      	ands	r3, r2
 800c524:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c528:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800c52c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800c530:	f04f 38ff 	mov.w	r8, #4294967295
 800c534:	e7d4      	b.n	800c4e0 <_strtod_l+0x8b8>
 800c536:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c538:	ea13 0f08 	tst.w	r3, r8
 800c53c:	e7e0      	b.n	800c500 <_strtod_l+0x8d8>
 800c53e:	f7ff fb56 	bl	800bbee <sulp>
 800c542:	4602      	mov	r2, r0
 800c544:	460b      	mov	r3, r1
 800c546:	ec51 0b18 	vmov	r0, r1, d8
 800c54a:	f7f3 fead 	bl	80002a8 <__aeabi_dsub>
 800c54e:	2200      	movs	r2, #0
 800c550:	2300      	movs	r3, #0
 800c552:	4680      	mov	r8, r0
 800c554:	4689      	mov	r9, r1
 800c556:	f7f4 fac7 	bl	8000ae8 <__aeabi_dcmpeq>
 800c55a:	2800      	cmp	r0, #0
 800c55c:	d0c0      	beq.n	800c4e0 <_strtod_l+0x8b8>
 800c55e:	e618      	b.n	800c192 <_strtod_l+0x56a>
 800c560:	fffffc02 	.word	0xfffffc02
 800c564:	7ff00000 	.word	0x7ff00000
 800c568:	39500000 	.word	0x39500000
 800c56c:	000fffff 	.word	0x000fffff
 800c570:	7fefffff 	.word	0x7fefffff
 800c574:	0800dda8 	.word	0x0800dda8
 800c578:	4659      	mov	r1, fp
 800c57a:	4628      	mov	r0, r5
 800c57c:	f7ff fac0 	bl	800bb00 <__ratio>
 800c580:	ec57 6b10 	vmov	r6, r7, d0
 800c584:	ee10 0a10 	vmov	r0, s0
 800c588:	2200      	movs	r2, #0
 800c58a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c58e:	4639      	mov	r1, r7
 800c590:	f7f4 fabe 	bl	8000b10 <__aeabi_dcmple>
 800c594:	2800      	cmp	r0, #0
 800c596:	d071      	beq.n	800c67c <_strtod_l+0xa54>
 800c598:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d17c      	bne.n	800c698 <_strtod_l+0xa70>
 800c59e:	f1b8 0f00 	cmp.w	r8, #0
 800c5a2:	d15a      	bne.n	800c65a <_strtod_l+0xa32>
 800c5a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d15d      	bne.n	800c668 <_strtod_l+0xa40>
 800c5ac:	4b90      	ldr	r3, [pc, #576]	; (800c7f0 <_strtod_l+0xbc8>)
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	4630      	mov	r0, r6
 800c5b2:	4639      	mov	r1, r7
 800c5b4:	f7f4 faa2 	bl	8000afc <__aeabi_dcmplt>
 800c5b8:	2800      	cmp	r0, #0
 800c5ba:	d15c      	bne.n	800c676 <_strtod_l+0xa4e>
 800c5bc:	4630      	mov	r0, r6
 800c5be:	4639      	mov	r1, r7
 800c5c0:	4b8c      	ldr	r3, [pc, #560]	; (800c7f4 <_strtod_l+0xbcc>)
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	f7f4 f828 	bl	8000618 <__aeabi_dmul>
 800c5c8:	4606      	mov	r6, r0
 800c5ca:	460f      	mov	r7, r1
 800c5cc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800c5d0:	9606      	str	r6, [sp, #24]
 800c5d2:	9307      	str	r3, [sp, #28]
 800c5d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c5d8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c5dc:	4b86      	ldr	r3, [pc, #536]	; (800c7f8 <_strtod_l+0xbd0>)
 800c5de:	ea0a 0303 	and.w	r3, sl, r3
 800c5e2:	930d      	str	r3, [sp, #52]	; 0x34
 800c5e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c5e6:	4b85      	ldr	r3, [pc, #532]	; (800c7fc <_strtod_l+0xbd4>)
 800c5e8:	429a      	cmp	r2, r3
 800c5ea:	f040 8090 	bne.w	800c70e <_strtod_l+0xae6>
 800c5ee:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800c5f2:	ec49 8b10 	vmov	d0, r8, r9
 800c5f6:	f7ff f9b9 	bl	800b96c <__ulp>
 800c5fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c5fe:	ec51 0b10 	vmov	r0, r1, d0
 800c602:	f7f4 f809 	bl	8000618 <__aeabi_dmul>
 800c606:	4642      	mov	r2, r8
 800c608:	464b      	mov	r3, r9
 800c60a:	f7f3 fe4f 	bl	80002ac <__adddf3>
 800c60e:	460b      	mov	r3, r1
 800c610:	4979      	ldr	r1, [pc, #484]	; (800c7f8 <_strtod_l+0xbd0>)
 800c612:	4a7b      	ldr	r2, [pc, #492]	; (800c800 <_strtod_l+0xbd8>)
 800c614:	4019      	ands	r1, r3
 800c616:	4291      	cmp	r1, r2
 800c618:	4680      	mov	r8, r0
 800c61a:	d944      	bls.n	800c6a6 <_strtod_l+0xa7e>
 800c61c:	ee18 2a90 	vmov	r2, s17
 800c620:	4b78      	ldr	r3, [pc, #480]	; (800c804 <_strtod_l+0xbdc>)
 800c622:	429a      	cmp	r2, r3
 800c624:	d104      	bne.n	800c630 <_strtod_l+0xa08>
 800c626:	ee18 3a10 	vmov	r3, s16
 800c62a:	3301      	adds	r3, #1
 800c62c:	f43f ad40 	beq.w	800c0b0 <_strtod_l+0x488>
 800c630:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800c804 <_strtod_l+0xbdc>
 800c634:	f04f 38ff 	mov.w	r8, #4294967295
 800c638:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c63a:	4620      	mov	r0, r4
 800c63c:	f7fe fe6a 	bl	800b314 <_Bfree>
 800c640:	9905      	ldr	r1, [sp, #20]
 800c642:	4620      	mov	r0, r4
 800c644:	f7fe fe66 	bl	800b314 <_Bfree>
 800c648:	4659      	mov	r1, fp
 800c64a:	4620      	mov	r0, r4
 800c64c:	f7fe fe62 	bl	800b314 <_Bfree>
 800c650:	4629      	mov	r1, r5
 800c652:	4620      	mov	r0, r4
 800c654:	f7fe fe5e 	bl	800b314 <_Bfree>
 800c658:	e609      	b.n	800c26e <_strtod_l+0x646>
 800c65a:	f1b8 0f01 	cmp.w	r8, #1
 800c65e:	d103      	bne.n	800c668 <_strtod_l+0xa40>
 800c660:	f1b9 0f00 	cmp.w	r9, #0
 800c664:	f43f ad95 	beq.w	800c192 <_strtod_l+0x56a>
 800c668:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800c7c0 <_strtod_l+0xb98>
 800c66c:	4f60      	ldr	r7, [pc, #384]	; (800c7f0 <_strtod_l+0xbc8>)
 800c66e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c672:	2600      	movs	r6, #0
 800c674:	e7ae      	b.n	800c5d4 <_strtod_l+0x9ac>
 800c676:	4f5f      	ldr	r7, [pc, #380]	; (800c7f4 <_strtod_l+0xbcc>)
 800c678:	2600      	movs	r6, #0
 800c67a:	e7a7      	b.n	800c5cc <_strtod_l+0x9a4>
 800c67c:	4b5d      	ldr	r3, [pc, #372]	; (800c7f4 <_strtod_l+0xbcc>)
 800c67e:	4630      	mov	r0, r6
 800c680:	4639      	mov	r1, r7
 800c682:	2200      	movs	r2, #0
 800c684:	f7f3 ffc8 	bl	8000618 <__aeabi_dmul>
 800c688:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c68a:	4606      	mov	r6, r0
 800c68c:	460f      	mov	r7, r1
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d09c      	beq.n	800c5cc <_strtod_l+0x9a4>
 800c692:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c696:	e79d      	b.n	800c5d4 <_strtod_l+0x9ac>
 800c698:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800c7c8 <_strtod_l+0xba0>
 800c69c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c6a0:	ec57 6b17 	vmov	r6, r7, d7
 800c6a4:	e796      	b.n	800c5d4 <_strtod_l+0x9ac>
 800c6a6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800c6aa:	9b04      	ldr	r3, [sp, #16]
 800c6ac:	46ca      	mov	sl, r9
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d1c2      	bne.n	800c638 <_strtod_l+0xa10>
 800c6b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c6b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c6b8:	0d1b      	lsrs	r3, r3, #20
 800c6ba:	051b      	lsls	r3, r3, #20
 800c6bc:	429a      	cmp	r2, r3
 800c6be:	d1bb      	bne.n	800c638 <_strtod_l+0xa10>
 800c6c0:	4630      	mov	r0, r6
 800c6c2:	4639      	mov	r1, r7
 800c6c4:	f7f4 fb08 	bl	8000cd8 <__aeabi_d2lz>
 800c6c8:	f7f3 ff78 	bl	80005bc <__aeabi_l2d>
 800c6cc:	4602      	mov	r2, r0
 800c6ce:	460b      	mov	r3, r1
 800c6d0:	4630      	mov	r0, r6
 800c6d2:	4639      	mov	r1, r7
 800c6d4:	f7f3 fde8 	bl	80002a8 <__aeabi_dsub>
 800c6d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c6da:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c6de:	ea43 0308 	orr.w	r3, r3, r8
 800c6e2:	4313      	orrs	r3, r2
 800c6e4:	4606      	mov	r6, r0
 800c6e6:	460f      	mov	r7, r1
 800c6e8:	d054      	beq.n	800c794 <_strtod_l+0xb6c>
 800c6ea:	a339      	add	r3, pc, #228	; (adr r3, 800c7d0 <_strtod_l+0xba8>)
 800c6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f0:	f7f4 fa04 	bl	8000afc <__aeabi_dcmplt>
 800c6f4:	2800      	cmp	r0, #0
 800c6f6:	f47f ace5 	bne.w	800c0c4 <_strtod_l+0x49c>
 800c6fa:	a337      	add	r3, pc, #220	; (adr r3, 800c7d8 <_strtod_l+0xbb0>)
 800c6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c700:	4630      	mov	r0, r6
 800c702:	4639      	mov	r1, r7
 800c704:	f7f4 fa18 	bl	8000b38 <__aeabi_dcmpgt>
 800c708:	2800      	cmp	r0, #0
 800c70a:	d095      	beq.n	800c638 <_strtod_l+0xa10>
 800c70c:	e4da      	b.n	800c0c4 <_strtod_l+0x49c>
 800c70e:	9b04      	ldr	r3, [sp, #16]
 800c710:	b333      	cbz	r3, 800c760 <_strtod_l+0xb38>
 800c712:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c714:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c718:	d822      	bhi.n	800c760 <_strtod_l+0xb38>
 800c71a:	a331      	add	r3, pc, #196	; (adr r3, 800c7e0 <_strtod_l+0xbb8>)
 800c71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c720:	4630      	mov	r0, r6
 800c722:	4639      	mov	r1, r7
 800c724:	f7f4 f9f4 	bl	8000b10 <__aeabi_dcmple>
 800c728:	b1a0      	cbz	r0, 800c754 <_strtod_l+0xb2c>
 800c72a:	4639      	mov	r1, r7
 800c72c:	4630      	mov	r0, r6
 800c72e:	f7f4 fa4b 	bl	8000bc8 <__aeabi_d2uiz>
 800c732:	2801      	cmp	r0, #1
 800c734:	bf38      	it	cc
 800c736:	2001      	movcc	r0, #1
 800c738:	f7f3 fef4 	bl	8000524 <__aeabi_ui2d>
 800c73c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c73e:	4606      	mov	r6, r0
 800c740:	460f      	mov	r7, r1
 800c742:	bb23      	cbnz	r3, 800c78e <_strtod_l+0xb66>
 800c744:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c748:	9010      	str	r0, [sp, #64]	; 0x40
 800c74a:	9311      	str	r3, [sp, #68]	; 0x44
 800c74c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c750:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c754:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c756:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c758:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c75c:	1a9b      	subs	r3, r3, r2
 800c75e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c760:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c764:	eeb0 0a48 	vmov.f32	s0, s16
 800c768:	eef0 0a68 	vmov.f32	s1, s17
 800c76c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800c770:	f7ff f8fc 	bl	800b96c <__ulp>
 800c774:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c778:	ec53 2b10 	vmov	r2, r3, d0
 800c77c:	f7f3 ff4c 	bl	8000618 <__aeabi_dmul>
 800c780:	ec53 2b18 	vmov	r2, r3, d8
 800c784:	f7f3 fd92 	bl	80002ac <__adddf3>
 800c788:	4680      	mov	r8, r0
 800c78a:	4689      	mov	r9, r1
 800c78c:	e78d      	b.n	800c6aa <_strtod_l+0xa82>
 800c78e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800c792:	e7db      	b.n	800c74c <_strtod_l+0xb24>
 800c794:	a314      	add	r3, pc, #80	; (adr r3, 800c7e8 <_strtod_l+0xbc0>)
 800c796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c79a:	f7f4 f9af 	bl	8000afc <__aeabi_dcmplt>
 800c79e:	e7b3      	b.n	800c708 <_strtod_l+0xae0>
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	930a      	str	r3, [sp, #40]	; 0x28
 800c7a4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c7a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c7a8:	6013      	str	r3, [r2, #0]
 800c7aa:	f7ff ba7c 	b.w	800bca6 <_strtod_l+0x7e>
 800c7ae:	2a65      	cmp	r2, #101	; 0x65
 800c7b0:	f43f ab75 	beq.w	800be9e <_strtod_l+0x276>
 800c7b4:	2a45      	cmp	r2, #69	; 0x45
 800c7b6:	f43f ab72 	beq.w	800be9e <_strtod_l+0x276>
 800c7ba:	2301      	movs	r3, #1
 800c7bc:	f7ff bbaa 	b.w	800bf14 <_strtod_l+0x2ec>
 800c7c0:	00000000 	.word	0x00000000
 800c7c4:	bff00000 	.word	0xbff00000
 800c7c8:	00000000 	.word	0x00000000
 800c7cc:	3ff00000 	.word	0x3ff00000
 800c7d0:	94a03595 	.word	0x94a03595
 800c7d4:	3fdfffff 	.word	0x3fdfffff
 800c7d8:	35afe535 	.word	0x35afe535
 800c7dc:	3fe00000 	.word	0x3fe00000
 800c7e0:	ffc00000 	.word	0xffc00000
 800c7e4:	41dfffff 	.word	0x41dfffff
 800c7e8:	94a03595 	.word	0x94a03595
 800c7ec:	3fcfffff 	.word	0x3fcfffff
 800c7f0:	3ff00000 	.word	0x3ff00000
 800c7f4:	3fe00000 	.word	0x3fe00000
 800c7f8:	7ff00000 	.word	0x7ff00000
 800c7fc:	7fe00000 	.word	0x7fe00000
 800c800:	7c9fffff 	.word	0x7c9fffff
 800c804:	7fefffff 	.word	0x7fefffff

0800c808 <_strtod_r>:
 800c808:	4b01      	ldr	r3, [pc, #4]	; (800c810 <_strtod_r+0x8>)
 800c80a:	f7ff ba0d 	b.w	800bc28 <_strtod_l>
 800c80e:	bf00      	nop
 800c810:	20000070 	.word	0x20000070

0800c814 <_strtol_l.constprop.0>:
 800c814:	2b01      	cmp	r3, #1
 800c816:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c81a:	d001      	beq.n	800c820 <_strtol_l.constprop.0+0xc>
 800c81c:	2b24      	cmp	r3, #36	; 0x24
 800c81e:	d906      	bls.n	800c82e <_strtol_l.constprop.0+0x1a>
 800c820:	f7fd fd8a 	bl	800a338 <__errno>
 800c824:	2316      	movs	r3, #22
 800c826:	6003      	str	r3, [r0, #0]
 800c828:	2000      	movs	r0, #0
 800c82a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c82e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c914 <_strtol_l.constprop.0+0x100>
 800c832:	460d      	mov	r5, r1
 800c834:	462e      	mov	r6, r5
 800c836:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c83a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800c83e:	f017 0708 	ands.w	r7, r7, #8
 800c842:	d1f7      	bne.n	800c834 <_strtol_l.constprop.0+0x20>
 800c844:	2c2d      	cmp	r4, #45	; 0x2d
 800c846:	d132      	bne.n	800c8ae <_strtol_l.constprop.0+0x9a>
 800c848:	782c      	ldrb	r4, [r5, #0]
 800c84a:	2701      	movs	r7, #1
 800c84c:	1cb5      	adds	r5, r6, #2
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d05b      	beq.n	800c90a <_strtol_l.constprop.0+0xf6>
 800c852:	2b10      	cmp	r3, #16
 800c854:	d109      	bne.n	800c86a <_strtol_l.constprop.0+0x56>
 800c856:	2c30      	cmp	r4, #48	; 0x30
 800c858:	d107      	bne.n	800c86a <_strtol_l.constprop.0+0x56>
 800c85a:	782c      	ldrb	r4, [r5, #0]
 800c85c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c860:	2c58      	cmp	r4, #88	; 0x58
 800c862:	d14d      	bne.n	800c900 <_strtol_l.constprop.0+0xec>
 800c864:	786c      	ldrb	r4, [r5, #1]
 800c866:	2310      	movs	r3, #16
 800c868:	3502      	adds	r5, #2
 800c86a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c86e:	f108 38ff 	add.w	r8, r8, #4294967295
 800c872:	f04f 0e00 	mov.w	lr, #0
 800c876:	fbb8 f9f3 	udiv	r9, r8, r3
 800c87a:	4676      	mov	r6, lr
 800c87c:	fb03 8a19 	mls	sl, r3, r9, r8
 800c880:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c884:	f1bc 0f09 	cmp.w	ip, #9
 800c888:	d816      	bhi.n	800c8b8 <_strtol_l.constprop.0+0xa4>
 800c88a:	4664      	mov	r4, ip
 800c88c:	42a3      	cmp	r3, r4
 800c88e:	dd24      	ble.n	800c8da <_strtol_l.constprop.0+0xc6>
 800c890:	f1be 3fff 	cmp.w	lr, #4294967295
 800c894:	d008      	beq.n	800c8a8 <_strtol_l.constprop.0+0x94>
 800c896:	45b1      	cmp	r9, r6
 800c898:	d31c      	bcc.n	800c8d4 <_strtol_l.constprop.0+0xc0>
 800c89a:	d101      	bne.n	800c8a0 <_strtol_l.constprop.0+0x8c>
 800c89c:	45a2      	cmp	sl, r4
 800c89e:	db19      	blt.n	800c8d4 <_strtol_l.constprop.0+0xc0>
 800c8a0:	fb06 4603 	mla	r6, r6, r3, r4
 800c8a4:	f04f 0e01 	mov.w	lr, #1
 800c8a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c8ac:	e7e8      	b.n	800c880 <_strtol_l.constprop.0+0x6c>
 800c8ae:	2c2b      	cmp	r4, #43	; 0x2b
 800c8b0:	bf04      	itt	eq
 800c8b2:	782c      	ldrbeq	r4, [r5, #0]
 800c8b4:	1cb5      	addeq	r5, r6, #2
 800c8b6:	e7ca      	b.n	800c84e <_strtol_l.constprop.0+0x3a>
 800c8b8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c8bc:	f1bc 0f19 	cmp.w	ip, #25
 800c8c0:	d801      	bhi.n	800c8c6 <_strtol_l.constprop.0+0xb2>
 800c8c2:	3c37      	subs	r4, #55	; 0x37
 800c8c4:	e7e2      	b.n	800c88c <_strtol_l.constprop.0+0x78>
 800c8c6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c8ca:	f1bc 0f19 	cmp.w	ip, #25
 800c8ce:	d804      	bhi.n	800c8da <_strtol_l.constprop.0+0xc6>
 800c8d0:	3c57      	subs	r4, #87	; 0x57
 800c8d2:	e7db      	b.n	800c88c <_strtol_l.constprop.0+0x78>
 800c8d4:	f04f 3eff 	mov.w	lr, #4294967295
 800c8d8:	e7e6      	b.n	800c8a8 <_strtol_l.constprop.0+0x94>
 800c8da:	f1be 3fff 	cmp.w	lr, #4294967295
 800c8de:	d105      	bne.n	800c8ec <_strtol_l.constprop.0+0xd8>
 800c8e0:	2322      	movs	r3, #34	; 0x22
 800c8e2:	6003      	str	r3, [r0, #0]
 800c8e4:	4646      	mov	r6, r8
 800c8e6:	b942      	cbnz	r2, 800c8fa <_strtol_l.constprop.0+0xe6>
 800c8e8:	4630      	mov	r0, r6
 800c8ea:	e79e      	b.n	800c82a <_strtol_l.constprop.0+0x16>
 800c8ec:	b107      	cbz	r7, 800c8f0 <_strtol_l.constprop.0+0xdc>
 800c8ee:	4276      	negs	r6, r6
 800c8f0:	2a00      	cmp	r2, #0
 800c8f2:	d0f9      	beq.n	800c8e8 <_strtol_l.constprop.0+0xd4>
 800c8f4:	f1be 0f00 	cmp.w	lr, #0
 800c8f8:	d000      	beq.n	800c8fc <_strtol_l.constprop.0+0xe8>
 800c8fa:	1e69      	subs	r1, r5, #1
 800c8fc:	6011      	str	r1, [r2, #0]
 800c8fe:	e7f3      	b.n	800c8e8 <_strtol_l.constprop.0+0xd4>
 800c900:	2430      	movs	r4, #48	; 0x30
 800c902:	2b00      	cmp	r3, #0
 800c904:	d1b1      	bne.n	800c86a <_strtol_l.constprop.0+0x56>
 800c906:	2308      	movs	r3, #8
 800c908:	e7af      	b.n	800c86a <_strtol_l.constprop.0+0x56>
 800c90a:	2c30      	cmp	r4, #48	; 0x30
 800c90c:	d0a5      	beq.n	800c85a <_strtol_l.constprop.0+0x46>
 800c90e:	230a      	movs	r3, #10
 800c910:	e7ab      	b.n	800c86a <_strtol_l.constprop.0+0x56>
 800c912:	bf00      	nop
 800c914:	0800ddd1 	.word	0x0800ddd1

0800c918 <_strtol_r>:
 800c918:	f7ff bf7c 	b.w	800c814 <_strtol_l.constprop.0>

0800c91c <__ssputs_r>:
 800c91c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c920:	688e      	ldr	r6, [r1, #8]
 800c922:	461f      	mov	r7, r3
 800c924:	42be      	cmp	r6, r7
 800c926:	680b      	ldr	r3, [r1, #0]
 800c928:	4682      	mov	sl, r0
 800c92a:	460c      	mov	r4, r1
 800c92c:	4690      	mov	r8, r2
 800c92e:	d82c      	bhi.n	800c98a <__ssputs_r+0x6e>
 800c930:	898a      	ldrh	r2, [r1, #12]
 800c932:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c936:	d026      	beq.n	800c986 <__ssputs_r+0x6a>
 800c938:	6965      	ldr	r5, [r4, #20]
 800c93a:	6909      	ldr	r1, [r1, #16]
 800c93c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c940:	eba3 0901 	sub.w	r9, r3, r1
 800c944:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c948:	1c7b      	adds	r3, r7, #1
 800c94a:	444b      	add	r3, r9
 800c94c:	106d      	asrs	r5, r5, #1
 800c94e:	429d      	cmp	r5, r3
 800c950:	bf38      	it	cc
 800c952:	461d      	movcc	r5, r3
 800c954:	0553      	lsls	r3, r2, #21
 800c956:	d527      	bpl.n	800c9a8 <__ssputs_r+0x8c>
 800c958:	4629      	mov	r1, r5
 800c95a:	f7fe fc0f 	bl	800b17c <_malloc_r>
 800c95e:	4606      	mov	r6, r0
 800c960:	b360      	cbz	r0, 800c9bc <__ssputs_r+0xa0>
 800c962:	6921      	ldr	r1, [r4, #16]
 800c964:	464a      	mov	r2, r9
 800c966:	f000 fc79 	bl	800d25c <memcpy>
 800c96a:	89a3      	ldrh	r3, [r4, #12]
 800c96c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c974:	81a3      	strh	r3, [r4, #12]
 800c976:	6126      	str	r6, [r4, #16]
 800c978:	6165      	str	r5, [r4, #20]
 800c97a:	444e      	add	r6, r9
 800c97c:	eba5 0509 	sub.w	r5, r5, r9
 800c980:	6026      	str	r6, [r4, #0]
 800c982:	60a5      	str	r5, [r4, #8]
 800c984:	463e      	mov	r6, r7
 800c986:	42be      	cmp	r6, r7
 800c988:	d900      	bls.n	800c98c <__ssputs_r+0x70>
 800c98a:	463e      	mov	r6, r7
 800c98c:	6820      	ldr	r0, [r4, #0]
 800c98e:	4632      	mov	r2, r6
 800c990:	4641      	mov	r1, r8
 800c992:	f000 fc05 	bl	800d1a0 <memmove>
 800c996:	68a3      	ldr	r3, [r4, #8]
 800c998:	1b9b      	subs	r3, r3, r6
 800c99a:	60a3      	str	r3, [r4, #8]
 800c99c:	6823      	ldr	r3, [r4, #0]
 800c99e:	4433      	add	r3, r6
 800c9a0:	6023      	str	r3, [r4, #0]
 800c9a2:	2000      	movs	r0, #0
 800c9a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9a8:	462a      	mov	r2, r5
 800c9aa:	f001 f80a 	bl	800d9c2 <_realloc_r>
 800c9ae:	4606      	mov	r6, r0
 800c9b0:	2800      	cmp	r0, #0
 800c9b2:	d1e0      	bne.n	800c976 <__ssputs_r+0x5a>
 800c9b4:	6921      	ldr	r1, [r4, #16]
 800c9b6:	4650      	mov	r0, sl
 800c9b8:	f7fe fb6c 	bl	800b094 <_free_r>
 800c9bc:	230c      	movs	r3, #12
 800c9be:	f8ca 3000 	str.w	r3, [sl]
 800c9c2:	89a3      	ldrh	r3, [r4, #12]
 800c9c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9c8:	81a3      	strh	r3, [r4, #12]
 800c9ca:	f04f 30ff 	mov.w	r0, #4294967295
 800c9ce:	e7e9      	b.n	800c9a4 <__ssputs_r+0x88>

0800c9d0 <_svfiprintf_r>:
 800c9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9d4:	4698      	mov	r8, r3
 800c9d6:	898b      	ldrh	r3, [r1, #12]
 800c9d8:	061b      	lsls	r3, r3, #24
 800c9da:	b09d      	sub	sp, #116	; 0x74
 800c9dc:	4607      	mov	r7, r0
 800c9de:	460d      	mov	r5, r1
 800c9e0:	4614      	mov	r4, r2
 800c9e2:	d50e      	bpl.n	800ca02 <_svfiprintf_r+0x32>
 800c9e4:	690b      	ldr	r3, [r1, #16]
 800c9e6:	b963      	cbnz	r3, 800ca02 <_svfiprintf_r+0x32>
 800c9e8:	2140      	movs	r1, #64	; 0x40
 800c9ea:	f7fe fbc7 	bl	800b17c <_malloc_r>
 800c9ee:	6028      	str	r0, [r5, #0]
 800c9f0:	6128      	str	r0, [r5, #16]
 800c9f2:	b920      	cbnz	r0, 800c9fe <_svfiprintf_r+0x2e>
 800c9f4:	230c      	movs	r3, #12
 800c9f6:	603b      	str	r3, [r7, #0]
 800c9f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c9fc:	e0d0      	b.n	800cba0 <_svfiprintf_r+0x1d0>
 800c9fe:	2340      	movs	r3, #64	; 0x40
 800ca00:	616b      	str	r3, [r5, #20]
 800ca02:	2300      	movs	r3, #0
 800ca04:	9309      	str	r3, [sp, #36]	; 0x24
 800ca06:	2320      	movs	r3, #32
 800ca08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ca0c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca10:	2330      	movs	r3, #48	; 0x30
 800ca12:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cbb8 <_svfiprintf_r+0x1e8>
 800ca16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ca1a:	f04f 0901 	mov.w	r9, #1
 800ca1e:	4623      	mov	r3, r4
 800ca20:	469a      	mov	sl, r3
 800ca22:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca26:	b10a      	cbz	r2, 800ca2c <_svfiprintf_r+0x5c>
 800ca28:	2a25      	cmp	r2, #37	; 0x25
 800ca2a:	d1f9      	bne.n	800ca20 <_svfiprintf_r+0x50>
 800ca2c:	ebba 0b04 	subs.w	fp, sl, r4
 800ca30:	d00b      	beq.n	800ca4a <_svfiprintf_r+0x7a>
 800ca32:	465b      	mov	r3, fp
 800ca34:	4622      	mov	r2, r4
 800ca36:	4629      	mov	r1, r5
 800ca38:	4638      	mov	r0, r7
 800ca3a:	f7ff ff6f 	bl	800c91c <__ssputs_r>
 800ca3e:	3001      	adds	r0, #1
 800ca40:	f000 80a9 	beq.w	800cb96 <_svfiprintf_r+0x1c6>
 800ca44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca46:	445a      	add	r2, fp
 800ca48:	9209      	str	r2, [sp, #36]	; 0x24
 800ca4a:	f89a 3000 	ldrb.w	r3, [sl]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	f000 80a1 	beq.w	800cb96 <_svfiprintf_r+0x1c6>
 800ca54:	2300      	movs	r3, #0
 800ca56:	f04f 32ff 	mov.w	r2, #4294967295
 800ca5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca5e:	f10a 0a01 	add.w	sl, sl, #1
 800ca62:	9304      	str	r3, [sp, #16]
 800ca64:	9307      	str	r3, [sp, #28]
 800ca66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ca6a:	931a      	str	r3, [sp, #104]	; 0x68
 800ca6c:	4654      	mov	r4, sl
 800ca6e:	2205      	movs	r2, #5
 800ca70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca74:	4850      	ldr	r0, [pc, #320]	; (800cbb8 <_svfiprintf_r+0x1e8>)
 800ca76:	f7f3 fbbb 	bl	80001f0 <memchr>
 800ca7a:	9a04      	ldr	r2, [sp, #16]
 800ca7c:	b9d8      	cbnz	r0, 800cab6 <_svfiprintf_r+0xe6>
 800ca7e:	06d0      	lsls	r0, r2, #27
 800ca80:	bf44      	itt	mi
 800ca82:	2320      	movmi	r3, #32
 800ca84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca88:	0711      	lsls	r1, r2, #28
 800ca8a:	bf44      	itt	mi
 800ca8c:	232b      	movmi	r3, #43	; 0x2b
 800ca8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca92:	f89a 3000 	ldrb.w	r3, [sl]
 800ca96:	2b2a      	cmp	r3, #42	; 0x2a
 800ca98:	d015      	beq.n	800cac6 <_svfiprintf_r+0xf6>
 800ca9a:	9a07      	ldr	r2, [sp, #28]
 800ca9c:	4654      	mov	r4, sl
 800ca9e:	2000      	movs	r0, #0
 800caa0:	f04f 0c0a 	mov.w	ip, #10
 800caa4:	4621      	mov	r1, r4
 800caa6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800caaa:	3b30      	subs	r3, #48	; 0x30
 800caac:	2b09      	cmp	r3, #9
 800caae:	d94d      	bls.n	800cb4c <_svfiprintf_r+0x17c>
 800cab0:	b1b0      	cbz	r0, 800cae0 <_svfiprintf_r+0x110>
 800cab2:	9207      	str	r2, [sp, #28]
 800cab4:	e014      	b.n	800cae0 <_svfiprintf_r+0x110>
 800cab6:	eba0 0308 	sub.w	r3, r0, r8
 800caba:	fa09 f303 	lsl.w	r3, r9, r3
 800cabe:	4313      	orrs	r3, r2
 800cac0:	9304      	str	r3, [sp, #16]
 800cac2:	46a2      	mov	sl, r4
 800cac4:	e7d2      	b.n	800ca6c <_svfiprintf_r+0x9c>
 800cac6:	9b03      	ldr	r3, [sp, #12]
 800cac8:	1d19      	adds	r1, r3, #4
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	9103      	str	r1, [sp, #12]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	bfbb      	ittet	lt
 800cad2:	425b      	neglt	r3, r3
 800cad4:	f042 0202 	orrlt.w	r2, r2, #2
 800cad8:	9307      	strge	r3, [sp, #28]
 800cada:	9307      	strlt	r3, [sp, #28]
 800cadc:	bfb8      	it	lt
 800cade:	9204      	strlt	r2, [sp, #16]
 800cae0:	7823      	ldrb	r3, [r4, #0]
 800cae2:	2b2e      	cmp	r3, #46	; 0x2e
 800cae4:	d10c      	bne.n	800cb00 <_svfiprintf_r+0x130>
 800cae6:	7863      	ldrb	r3, [r4, #1]
 800cae8:	2b2a      	cmp	r3, #42	; 0x2a
 800caea:	d134      	bne.n	800cb56 <_svfiprintf_r+0x186>
 800caec:	9b03      	ldr	r3, [sp, #12]
 800caee:	1d1a      	adds	r2, r3, #4
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	9203      	str	r2, [sp, #12]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	bfb8      	it	lt
 800caf8:	f04f 33ff 	movlt.w	r3, #4294967295
 800cafc:	3402      	adds	r4, #2
 800cafe:	9305      	str	r3, [sp, #20]
 800cb00:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800cbc8 <_svfiprintf_r+0x1f8>
 800cb04:	7821      	ldrb	r1, [r4, #0]
 800cb06:	2203      	movs	r2, #3
 800cb08:	4650      	mov	r0, sl
 800cb0a:	f7f3 fb71 	bl	80001f0 <memchr>
 800cb0e:	b138      	cbz	r0, 800cb20 <_svfiprintf_r+0x150>
 800cb10:	9b04      	ldr	r3, [sp, #16]
 800cb12:	eba0 000a 	sub.w	r0, r0, sl
 800cb16:	2240      	movs	r2, #64	; 0x40
 800cb18:	4082      	lsls	r2, r0
 800cb1a:	4313      	orrs	r3, r2
 800cb1c:	3401      	adds	r4, #1
 800cb1e:	9304      	str	r3, [sp, #16]
 800cb20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb24:	4825      	ldr	r0, [pc, #148]	; (800cbbc <_svfiprintf_r+0x1ec>)
 800cb26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cb2a:	2206      	movs	r2, #6
 800cb2c:	f7f3 fb60 	bl	80001f0 <memchr>
 800cb30:	2800      	cmp	r0, #0
 800cb32:	d038      	beq.n	800cba6 <_svfiprintf_r+0x1d6>
 800cb34:	4b22      	ldr	r3, [pc, #136]	; (800cbc0 <_svfiprintf_r+0x1f0>)
 800cb36:	bb1b      	cbnz	r3, 800cb80 <_svfiprintf_r+0x1b0>
 800cb38:	9b03      	ldr	r3, [sp, #12]
 800cb3a:	3307      	adds	r3, #7
 800cb3c:	f023 0307 	bic.w	r3, r3, #7
 800cb40:	3308      	adds	r3, #8
 800cb42:	9303      	str	r3, [sp, #12]
 800cb44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb46:	4433      	add	r3, r6
 800cb48:	9309      	str	r3, [sp, #36]	; 0x24
 800cb4a:	e768      	b.n	800ca1e <_svfiprintf_r+0x4e>
 800cb4c:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb50:	460c      	mov	r4, r1
 800cb52:	2001      	movs	r0, #1
 800cb54:	e7a6      	b.n	800caa4 <_svfiprintf_r+0xd4>
 800cb56:	2300      	movs	r3, #0
 800cb58:	3401      	adds	r4, #1
 800cb5a:	9305      	str	r3, [sp, #20]
 800cb5c:	4619      	mov	r1, r3
 800cb5e:	f04f 0c0a 	mov.w	ip, #10
 800cb62:	4620      	mov	r0, r4
 800cb64:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb68:	3a30      	subs	r2, #48	; 0x30
 800cb6a:	2a09      	cmp	r2, #9
 800cb6c:	d903      	bls.n	800cb76 <_svfiprintf_r+0x1a6>
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d0c6      	beq.n	800cb00 <_svfiprintf_r+0x130>
 800cb72:	9105      	str	r1, [sp, #20]
 800cb74:	e7c4      	b.n	800cb00 <_svfiprintf_r+0x130>
 800cb76:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb7a:	4604      	mov	r4, r0
 800cb7c:	2301      	movs	r3, #1
 800cb7e:	e7f0      	b.n	800cb62 <_svfiprintf_r+0x192>
 800cb80:	ab03      	add	r3, sp, #12
 800cb82:	9300      	str	r3, [sp, #0]
 800cb84:	462a      	mov	r2, r5
 800cb86:	4b0f      	ldr	r3, [pc, #60]	; (800cbc4 <_svfiprintf_r+0x1f4>)
 800cb88:	a904      	add	r1, sp, #16
 800cb8a:	4638      	mov	r0, r7
 800cb8c:	f7fc fbc6 	bl	800931c <_printf_float>
 800cb90:	1c42      	adds	r2, r0, #1
 800cb92:	4606      	mov	r6, r0
 800cb94:	d1d6      	bne.n	800cb44 <_svfiprintf_r+0x174>
 800cb96:	89ab      	ldrh	r3, [r5, #12]
 800cb98:	065b      	lsls	r3, r3, #25
 800cb9a:	f53f af2d 	bmi.w	800c9f8 <_svfiprintf_r+0x28>
 800cb9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cba0:	b01d      	add	sp, #116	; 0x74
 800cba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cba6:	ab03      	add	r3, sp, #12
 800cba8:	9300      	str	r3, [sp, #0]
 800cbaa:	462a      	mov	r2, r5
 800cbac:	4b05      	ldr	r3, [pc, #20]	; (800cbc4 <_svfiprintf_r+0x1f4>)
 800cbae:	a904      	add	r1, sp, #16
 800cbb0:	4638      	mov	r0, r7
 800cbb2:	f7fc fe57 	bl	8009864 <_printf_i>
 800cbb6:	e7eb      	b.n	800cb90 <_svfiprintf_r+0x1c0>
 800cbb8:	0800ded1 	.word	0x0800ded1
 800cbbc:	0800dedb 	.word	0x0800dedb
 800cbc0:	0800931d 	.word	0x0800931d
 800cbc4:	0800c91d 	.word	0x0800c91d
 800cbc8:	0800ded7 	.word	0x0800ded7

0800cbcc <__sfputc_r>:
 800cbcc:	6893      	ldr	r3, [r2, #8]
 800cbce:	3b01      	subs	r3, #1
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	b410      	push	{r4}
 800cbd4:	6093      	str	r3, [r2, #8]
 800cbd6:	da08      	bge.n	800cbea <__sfputc_r+0x1e>
 800cbd8:	6994      	ldr	r4, [r2, #24]
 800cbda:	42a3      	cmp	r3, r4
 800cbdc:	db01      	blt.n	800cbe2 <__sfputc_r+0x16>
 800cbde:	290a      	cmp	r1, #10
 800cbe0:	d103      	bne.n	800cbea <__sfputc_r+0x1e>
 800cbe2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cbe6:	f000 ba45 	b.w	800d074 <__swbuf_r>
 800cbea:	6813      	ldr	r3, [r2, #0]
 800cbec:	1c58      	adds	r0, r3, #1
 800cbee:	6010      	str	r0, [r2, #0]
 800cbf0:	7019      	strb	r1, [r3, #0]
 800cbf2:	4608      	mov	r0, r1
 800cbf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cbf8:	4770      	bx	lr

0800cbfa <__sfputs_r>:
 800cbfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbfc:	4606      	mov	r6, r0
 800cbfe:	460f      	mov	r7, r1
 800cc00:	4614      	mov	r4, r2
 800cc02:	18d5      	adds	r5, r2, r3
 800cc04:	42ac      	cmp	r4, r5
 800cc06:	d101      	bne.n	800cc0c <__sfputs_r+0x12>
 800cc08:	2000      	movs	r0, #0
 800cc0a:	e007      	b.n	800cc1c <__sfputs_r+0x22>
 800cc0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc10:	463a      	mov	r2, r7
 800cc12:	4630      	mov	r0, r6
 800cc14:	f7ff ffda 	bl	800cbcc <__sfputc_r>
 800cc18:	1c43      	adds	r3, r0, #1
 800cc1a:	d1f3      	bne.n	800cc04 <__sfputs_r+0xa>
 800cc1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cc20 <_vfiprintf_r>:
 800cc20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc24:	460d      	mov	r5, r1
 800cc26:	b09d      	sub	sp, #116	; 0x74
 800cc28:	4614      	mov	r4, r2
 800cc2a:	4698      	mov	r8, r3
 800cc2c:	4606      	mov	r6, r0
 800cc2e:	b118      	cbz	r0, 800cc38 <_vfiprintf_r+0x18>
 800cc30:	6a03      	ldr	r3, [r0, #32]
 800cc32:	b90b      	cbnz	r3, 800cc38 <_vfiprintf_r+0x18>
 800cc34:	f7fd f9d4 	bl	8009fe0 <__sinit>
 800cc38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc3a:	07d9      	lsls	r1, r3, #31
 800cc3c:	d405      	bmi.n	800cc4a <_vfiprintf_r+0x2a>
 800cc3e:	89ab      	ldrh	r3, [r5, #12]
 800cc40:	059a      	lsls	r2, r3, #22
 800cc42:	d402      	bmi.n	800cc4a <_vfiprintf_r+0x2a>
 800cc44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc46:	f7fd fba2 	bl	800a38e <__retarget_lock_acquire_recursive>
 800cc4a:	89ab      	ldrh	r3, [r5, #12]
 800cc4c:	071b      	lsls	r3, r3, #28
 800cc4e:	d501      	bpl.n	800cc54 <_vfiprintf_r+0x34>
 800cc50:	692b      	ldr	r3, [r5, #16]
 800cc52:	b99b      	cbnz	r3, 800cc7c <_vfiprintf_r+0x5c>
 800cc54:	4629      	mov	r1, r5
 800cc56:	4630      	mov	r0, r6
 800cc58:	f000 fa4a 	bl	800d0f0 <__swsetup_r>
 800cc5c:	b170      	cbz	r0, 800cc7c <_vfiprintf_r+0x5c>
 800cc5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc60:	07dc      	lsls	r4, r3, #31
 800cc62:	d504      	bpl.n	800cc6e <_vfiprintf_r+0x4e>
 800cc64:	f04f 30ff 	mov.w	r0, #4294967295
 800cc68:	b01d      	add	sp, #116	; 0x74
 800cc6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc6e:	89ab      	ldrh	r3, [r5, #12]
 800cc70:	0598      	lsls	r0, r3, #22
 800cc72:	d4f7      	bmi.n	800cc64 <_vfiprintf_r+0x44>
 800cc74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc76:	f7fd fb8b 	bl	800a390 <__retarget_lock_release_recursive>
 800cc7a:	e7f3      	b.n	800cc64 <_vfiprintf_r+0x44>
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	9309      	str	r3, [sp, #36]	; 0x24
 800cc80:	2320      	movs	r3, #32
 800cc82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cc86:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc8a:	2330      	movs	r3, #48	; 0x30
 800cc8c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ce40 <_vfiprintf_r+0x220>
 800cc90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cc94:	f04f 0901 	mov.w	r9, #1
 800cc98:	4623      	mov	r3, r4
 800cc9a:	469a      	mov	sl, r3
 800cc9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cca0:	b10a      	cbz	r2, 800cca6 <_vfiprintf_r+0x86>
 800cca2:	2a25      	cmp	r2, #37	; 0x25
 800cca4:	d1f9      	bne.n	800cc9a <_vfiprintf_r+0x7a>
 800cca6:	ebba 0b04 	subs.w	fp, sl, r4
 800ccaa:	d00b      	beq.n	800ccc4 <_vfiprintf_r+0xa4>
 800ccac:	465b      	mov	r3, fp
 800ccae:	4622      	mov	r2, r4
 800ccb0:	4629      	mov	r1, r5
 800ccb2:	4630      	mov	r0, r6
 800ccb4:	f7ff ffa1 	bl	800cbfa <__sfputs_r>
 800ccb8:	3001      	adds	r0, #1
 800ccba:	f000 80a9 	beq.w	800ce10 <_vfiprintf_r+0x1f0>
 800ccbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ccc0:	445a      	add	r2, fp
 800ccc2:	9209      	str	r2, [sp, #36]	; 0x24
 800ccc4:	f89a 3000 	ldrb.w	r3, [sl]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	f000 80a1 	beq.w	800ce10 <_vfiprintf_r+0x1f0>
 800ccce:	2300      	movs	r3, #0
 800ccd0:	f04f 32ff 	mov.w	r2, #4294967295
 800ccd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ccd8:	f10a 0a01 	add.w	sl, sl, #1
 800ccdc:	9304      	str	r3, [sp, #16]
 800ccde:	9307      	str	r3, [sp, #28]
 800cce0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cce4:	931a      	str	r3, [sp, #104]	; 0x68
 800cce6:	4654      	mov	r4, sl
 800cce8:	2205      	movs	r2, #5
 800ccea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccee:	4854      	ldr	r0, [pc, #336]	; (800ce40 <_vfiprintf_r+0x220>)
 800ccf0:	f7f3 fa7e 	bl	80001f0 <memchr>
 800ccf4:	9a04      	ldr	r2, [sp, #16]
 800ccf6:	b9d8      	cbnz	r0, 800cd30 <_vfiprintf_r+0x110>
 800ccf8:	06d1      	lsls	r1, r2, #27
 800ccfa:	bf44      	itt	mi
 800ccfc:	2320      	movmi	r3, #32
 800ccfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd02:	0713      	lsls	r3, r2, #28
 800cd04:	bf44      	itt	mi
 800cd06:	232b      	movmi	r3, #43	; 0x2b
 800cd08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd0c:	f89a 3000 	ldrb.w	r3, [sl]
 800cd10:	2b2a      	cmp	r3, #42	; 0x2a
 800cd12:	d015      	beq.n	800cd40 <_vfiprintf_r+0x120>
 800cd14:	9a07      	ldr	r2, [sp, #28]
 800cd16:	4654      	mov	r4, sl
 800cd18:	2000      	movs	r0, #0
 800cd1a:	f04f 0c0a 	mov.w	ip, #10
 800cd1e:	4621      	mov	r1, r4
 800cd20:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd24:	3b30      	subs	r3, #48	; 0x30
 800cd26:	2b09      	cmp	r3, #9
 800cd28:	d94d      	bls.n	800cdc6 <_vfiprintf_r+0x1a6>
 800cd2a:	b1b0      	cbz	r0, 800cd5a <_vfiprintf_r+0x13a>
 800cd2c:	9207      	str	r2, [sp, #28]
 800cd2e:	e014      	b.n	800cd5a <_vfiprintf_r+0x13a>
 800cd30:	eba0 0308 	sub.w	r3, r0, r8
 800cd34:	fa09 f303 	lsl.w	r3, r9, r3
 800cd38:	4313      	orrs	r3, r2
 800cd3a:	9304      	str	r3, [sp, #16]
 800cd3c:	46a2      	mov	sl, r4
 800cd3e:	e7d2      	b.n	800cce6 <_vfiprintf_r+0xc6>
 800cd40:	9b03      	ldr	r3, [sp, #12]
 800cd42:	1d19      	adds	r1, r3, #4
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	9103      	str	r1, [sp, #12]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	bfbb      	ittet	lt
 800cd4c:	425b      	neglt	r3, r3
 800cd4e:	f042 0202 	orrlt.w	r2, r2, #2
 800cd52:	9307      	strge	r3, [sp, #28]
 800cd54:	9307      	strlt	r3, [sp, #28]
 800cd56:	bfb8      	it	lt
 800cd58:	9204      	strlt	r2, [sp, #16]
 800cd5a:	7823      	ldrb	r3, [r4, #0]
 800cd5c:	2b2e      	cmp	r3, #46	; 0x2e
 800cd5e:	d10c      	bne.n	800cd7a <_vfiprintf_r+0x15a>
 800cd60:	7863      	ldrb	r3, [r4, #1]
 800cd62:	2b2a      	cmp	r3, #42	; 0x2a
 800cd64:	d134      	bne.n	800cdd0 <_vfiprintf_r+0x1b0>
 800cd66:	9b03      	ldr	r3, [sp, #12]
 800cd68:	1d1a      	adds	r2, r3, #4
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	9203      	str	r2, [sp, #12]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	bfb8      	it	lt
 800cd72:	f04f 33ff 	movlt.w	r3, #4294967295
 800cd76:	3402      	adds	r4, #2
 800cd78:	9305      	str	r3, [sp, #20]
 800cd7a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ce50 <_vfiprintf_r+0x230>
 800cd7e:	7821      	ldrb	r1, [r4, #0]
 800cd80:	2203      	movs	r2, #3
 800cd82:	4650      	mov	r0, sl
 800cd84:	f7f3 fa34 	bl	80001f0 <memchr>
 800cd88:	b138      	cbz	r0, 800cd9a <_vfiprintf_r+0x17a>
 800cd8a:	9b04      	ldr	r3, [sp, #16]
 800cd8c:	eba0 000a 	sub.w	r0, r0, sl
 800cd90:	2240      	movs	r2, #64	; 0x40
 800cd92:	4082      	lsls	r2, r0
 800cd94:	4313      	orrs	r3, r2
 800cd96:	3401      	adds	r4, #1
 800cd98:	9304      	str	r3, [sp, #16]
 800cd9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd9e:	4829      	ldr	r0, [pc, #164]	; (800ce44 <_vfiprintf_r+0x224>)
 800cda0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cda4:	2206      	movs	r2, #6
 800cda6:	f7f3 fa23 	bl	80001f0 <memchr>
 800cdaa:	2800      	cmp	r0, #0
 800cdac:	d03f      	beq.n	800ce2e <_vfiprintf_r+0x20e>
 800cdae:	4b26      	ldr	r3, [pc, #152]	; (800ce48 <_vfiprintf_r+0x228>)
 800cdb0:	bb1b      	cbnz	r3, 800cdfa <_vfiprintf_r+0x1da>
 800cdb2:	9b03      	ldr	r3, [sp, #12]
 800cdb4:	3307      	adds	r3, #7
 800cdb6:	f023 0307 	bic.w	r3, r3, #7
 800cdba:	3308      	adds	r3, #8
 800cdbc:	9303      	str	r3, [sp, #12]
 800cdbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdc0:	443b      	add	r3, r7
 800cdc2:	9309      	str	r3, [sp, #36]	; 0x24
 800cdc4:	e768      	b.n	800cc98 <_vfiprintf_r+0x78>
 800cdc6:	fb0c 3202 	mla	r2, ip, r2, r3
 800cdca:	460c      	mov	r4, r1
 800cdcc:	2001      	movs	r0, #1
 800cdce:	e7a6      	b.n	800cd1e <_vfiprintf_r+0xfe>
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	3401      	adds	r4, #1
 800cdd4:	9305      	str	r3, [sp, #20]
 800cdd6:	4619      	mov	r1, r3
 800cdd8:	f04f 0c0a 	mov.w	ip, #10
 800cddc:	4620      	mov	r0, r4
 800cdde:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cde2:	3a30      	subs	r2, #48	; 0x30
 800cde4:	2a09      	cmp	r2, #9
 800cde6:	d903      	bls.n	800cdf0 <_vfiprintf_r+0x1d0>
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d0c6      	beq.n	800cd7a <_vfiprintf_r+0x15a>
 800cdec:	9105      	str	r1, [sp, #20]
 800cdee:	e7c4      	b.n	800cd7a <_vfiprintf_r+0x15a>
 800cdf0:	fb0c 2101 	mla	r1, ip, r1, r2
 800cdf4:	4604      	mov	r4, r0
 800cdf6:	2301      	movs	r3, #1
 800cdf8:	e7f0      	b.n	800cddc <_vfiprintf_r+0x1bc>
 800cdfa:	ab03      	add	r3, sp, #12
 800cdfc:	9300      	str	r3, [sp, #0]
 800cdfe:	462a      	mov	r2, r5
 800ce00:	4b12      	ldr	r3, [pc, #72]	; (800ce4c <_vfiprintf_r+0x22c>)
 800ce02:	a904      	add	r1, sp, #16
 800ce04:	4630      	mov	r0, r6
 800ce06:	f7fc fa89 	bl	800931c <_printf_float>
 800ce0a:	4607      	mov	r7, r0
 800ce0c:	1c78      	adds	r0, r7, #1
 800ce0e:	d1d6      	bne.n	800cdbe <_vfiprintf_r+0x19e>
 800ce10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce12:	07d9      	lsls	r1, r3, #31
 800ce14:	d405      	bmi.n	800ce22 <_vfiprintf_r+0x202>
 800ce16:	89ab      	ldrh	r3, [r5, #12]
 800ce18:	059a      	lsls	r2, r3, #22
 800ce1a:	d402      	bmi.n	800ce22 <_vfiprintf_r+0x202>
 800ce1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce1e:	f7fd fab7 	bl	800a390 <__retarget_lock_release_recursive>
 800ce22:	89ab      	ldrh	r3, [r5, #12]
 800ce24:	065b      	lsls	r3, r3, #25
 800ce26:	f53f af1d 	bmi.w	800cc64 <_vfiprintf_r+0x44>
 800ce2a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce2c:	e71c      	b.n	800cc68 <_vfiprintf_r+0x48>
 800ce2e:	ab03      	add	r3, sp, #12
 800ce30:	9300      	str	r3, [sp, #0]
 800ce32:	462a      	mov	r2, r5
 800ce34:	4b05      	ldr	r3, [pc, #20]	; (800ce4c <_vfiprintf_r+0x22c>)
 800ce36:	a904      	add	r1, sp, #16
 800ce38:	4630      	mov	r0, r6
 800ce3a:	f7fc fd13 	bl	8009864 <_printf_i>
 800ce3e:	e7e4      	b.n	800ce0a <_vfiprintf_r+0x1ea>
 800ce40:	0800ded1 	.word	0x0800ded1
 800ce44:	0800dedb 	.word	0x0800dedb
 800ce48:	0800931d 	.word	0x0800931d
 800ce4c:	0800cbfb 	.word	0x0800cbfb
 800ce50:	0800ded7 	.word	0x0800ded7

0800ce54 <__sflush_r>:
 800ce54:	898a      	ldrh	r2, [r1, #12]
 800ce56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce5a:	4605      	mov	r5, r0
 800ce5c:	0710      	lsls	r0, r2, #28
 800ce5e:	460c      	mov	r4, r1
 800ce60:	d458      	bmi.n	800cf14 <__sflush_r+0xc0>
 800ce62:	684b      	ldr	r3, [r1, #4]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	dc05      	bgt.n	800ce74 <__sflush_r+0x20>
 800ce68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	dc02      	bgt.n	800ce74 <__sflush_r+0x20>
 800ce6e:	2000      	movs	r0, #0
 800ce70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce76:	2e00      	cmp	r6, #0
 800ce78:	d0f9      	beq.n	800ce6e <__sflush_r+0x1a>
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ce80:	682f      	ldr	r7, [r5, #0]
 800ce82:	6a21      	ldr	r1, [r4, #32]
 800ce84:	602b      	str	r3, [r5, #0]
 800ce86:	d032      	beq.n	800ceee <__sflush_r+0x9a>
 800ce88:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ce8a:	89a3      	ldrh	r3, [r4, #12]
 800ce8c:	075a      	lsls	r2, r3, #29
 800ce8e:	d505      	bpl.n	800ce9c <__sflush_r+0x48>
 800ce90:	6863      	ldr	r3, [r4, #4]
 800ce92:	1ac0      	subs	r0, r0, r3
 800ce94:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce96:	b10b      	cbz	r3, 800ce9c <__sflush_r+0x48>
 800ce98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ce9a:	1ac0      	subs	r0, r0, r3
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	4602      	mov	r2, r0
 800cea0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cea2:	6a21      	ldr	r1, [r4, #32]
 800cea4:	4628      	mov	r0, r5
 800cea6:	47b0      	blx	r6
 800cea8:	1c43      	adds	r3, r0, #1
 800ceaa:	89a3      	ldrh	r3, [r4, #12]
 800ceac:	d106      	bne.n	800cebc <__sflush_r+0x68>
 800ceae:	6829      	ldr	r1, [r5, #0]
 800ceb0:	291d      	cmp	r1, #29
 800ceb2:	d82b      	bhi.n	800cf0c <__sflush_r+0xb8>
 800ceb4:	4a29      	ldr	r2, [pc, #164]	; (800cf5c <__sflush_r+0x108>)
 800ceb6:	410a      	asrs	r2, r1
 800ceb8:	07d6      	lsls	r6, r2, #31
 800ceba:	d427      	bmi.n	800cf0c <__sflush_r+0xb8>
 800cebc:	2200      	movs	r2, #0
 800cebe:	6062      	str	r2, [r4, #4]
 800cec0:	04d9      	lsls	r1, r3, #19
 800cec2:	6922      	ldr	r2, [r4, #16]
 800cec4:	6022      	str	r2, [r4, #0]
 800cec6:	d504      	bpl.n	800ced2 <__sflush_r+0x7e>
 800cec8:	1c42      	adds	r2, r0, #1
 800ceca:	d101      	bne.n	800ced0 <__sflush_r+0x7c>
 800cecc:	682b      	ldr	r3, [r5, #0]
 800cece:	b903      	cbnz	r3, 800ced2 <__sflush_r+0x7e>
 800ced0:	6560      	str	r0, [r4, #84]	; 0x54
 800ced2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ced4:	602f      	str	r7, [r5, #0]
 800ced6:	2900      	cmp	r1, #0
 800ced8:	d0c9      	beq.n	800ce6e <__sflush_r+0x1a>
 800ceda:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cede:	4299      	cmp	r1, r3
 800cee0:	d002      	beq.n	800cee8 <__sflush_r+0x94>
 800cee2:	4628      	mov	r0, r5
 800cee4:	f7fe f8d6 	bl	800b094 <_free_r>
 800cee8:	2000      	movs	r0, #0
 800ceea:	6360      	str	r0, [r4, #52]	; 0x34
 800ceec:	e7c0      	b.n	800ce70 <__sflush_r+0x1c>
 800ceee:	2301      	movs	r3, #1
 800cef0:	4628      	mov	r0, r5
 800cef2:	47b0      	blx	r6
 800cef4:	1c41      	adds	r1, r0, #1
 800cef6:	d1c8      	bne.n	800ce8a <__sflush_r+0x36>
 800cef8:	682b      	ldr	r3, [r5, #0]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d0c5      	beq.n	800ce8a <__sflush_r+0x36>
 800cefe:	2b1d      	cmp	r3, #29
 800cf00:	d001      	beq.n	800cf06 <__sflush_r+0xb2>
 800cf02:	2b16      	cmp	r3, #22
 800cf04:	d101      	bne.n	800cf0a <__sflush_r+0xb6>
 800cf06:	602f      	str	r7, [r5, #0]
 800cf08:	e7b1      	b.n	800ce6e <__sflush_r+0x1a>
 800cf0a:	89a3      	ldrh	r3, [r4, #12]
 800cf0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf10:	81a3      	strh	r3, [r4, #12]
 800cf12:	e7ad      	b.n	800ce70 <__sflush_r+0x1c>
 800cf14:	690f      	ldr	r7, [r1, #16]
 800cf16:	2f00      	cmp	r7, #0
 800cf18:	d0a9      	beq.n	800ce6e <__sflush_r+0x1a>
 800cf1a:	0793      	lsls	r3, r2, #30
 800cf1c:	680e      	ldr	r6, [r1, #0]
 800cf1e:	bf08      	it	eq
 800cf20:	694b      	ldreq	r3, [r1, #20]
 800cf22:	600f      	str	r7, [r1, #0]
 800cf24:	bf18      	it	ne
 800cf26:	2300      	movne	r3, #0
 800cf28:	eba6 0807 	sub.w	r8, r6, r7
 800cf2c:	608b      	str	r3, [r1, #8]
 800cf2e:	f1b8 0f00 	cmp.w	r8, #0
 800cf32:	dd9c      	ble.n	800ce6e <__sflush_r+0x1a>
 800cf34:	6a21      	ldr	r1, [r4, #32]
 800cf36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cf38:	4643      	mov	r3, r8
 800cf3a:	463a      	mov	r2, r7
 800cf3c:	4628      	mov	r0, r5
 800cf3e:	47b0      	blx	r6
 800cf40:	2800      	cmp	r0, #0
 800cf42:	dc06      	bgt.n	800cf52 <__sflush_r+0xfe>
 800cf44:	89a3      	ldrh	r3, [r4, #12]
 800cf46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf4a:	81a3      	strh	r3, [r4, #12]
 800cf4c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf50:	e78e      	b.n	800ce70 <__sflush_r+0x1c>
 800cf52:	4407      	add	r7, r0
 800cf54:	eba8 0800 	sub.w	r8, r8, r0
 800cf58:	e7e9      	b.n	800cf2e <__sflush_r+0xda>
 800cf5a:	bf00      	nop
 800cf5c:	dfbffffe 	.word	0xdfbffffe

0800cf60 <_fflush_r>:
 800cf60:	b538      	push	{r3, r4, r5, lr}
 800cf62:	690b      	ldr	r3, [r1, #16]
 800cf64:	4605      	mov	r5, r0
 800cf66:	460c      	mov	r4, r1
 800cf68:	b913      	cbnz	r3, 800cf70 <_fflush_r+0x10>
 800cf6a:	2500      	movs	r5, #0
 800cf6c:	4628      	mov	r0, r5
 800cf6e:	bd38      	pop	{r3, r4, r5, pc}
 800cf70:	b118      	cbz	r0, 800cf7a <_fflush_r+0x1a>
 800cf72:	6a03      	ldr	r3, [r0, #32]
 800cf74:	b90b      	cbnz	r3, 800cf7a <_fflush_r+0x1a>
 800cf76:	f7fd f833 	bl	8009fe0 <__sinit>
 800cf7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d0f3      	beq.n	800cf6a <_fflush_r+0xa>
 800cf82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cf84:	07d0      	lsls	r0, r2, #31
 800cf86:	d404      	bmi.n	800cf92 <_fflush_r+0x32>
 800cf88:	0599      	lsls	r1, r3, #22
 800cf8a:	d402      	bmi.n	800cf92 <_fflush_r+0x32>
 800cf8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf8e:	f7fd f9fe 	bl	800a38e <__retarget_lock_acquire_recursive>
 800cf92:	4628      	mov	r0, r5
 800cf94:	4621      	mov	r1, r4
 800cf96:	f7ff ff5d 	bl	800ce54 <__sflush_r>
 800cf9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf9c:	07da      	lsls	r2, r3, #31
 800cf9e:	4605      	mov	r5, r0
 800cfa0:	d4e4      	bmi.n	800cf6c <_fflush_r+0xc>
 800cfa2:	89a3      	ldrh	r3, [r4, #12]
 800cfa4:	059b      	lsls	r3, r3, #22
 800cfa6:	d4e1      	bmi.n	800cf6c <_fflush_r+0xc>
 800cfa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cfaa:	f7fd f9f1 	bl	800a390 <__retarget_lock_release_recursive>
 800cfae:	e7dd      	b.n	800cf6c <_fflush_r+0xc>

0800cfb0 <__swhatbuf_r>:
 800cfb0:	b570      	push	{r4, r5, r6, lr}
 800cfb2:	460c      	mov	r4, r1
 800cfb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfb8:	2900      	cmp	r1, #0
 800cfba:	b096      	sub	sp, #88	; 0x58
 800cfbc:	4615      	mov	r5, r2
 800cfbe:	461e      	mov	r6, r3
 800cfc0:	da0d      	bge.n	800cfde <__swhatbuf_r+0x2e>
 800cfc2:	89a3      	ldrh	r3, [r4, #12]
 800cfc4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cfc8:	f04f 0100 	mov.w	r1, #0
 800cfcc:	bf0c      	ite	eq
 800cfce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800cfd2:	2340      	movne	r3, #64	; 0x40
 800cfd4:	2000      	movs	r0, #0
 800cfd6:	6031      	str	r1, [r6, #0]
 800cfd8:	602b      	str	r3, [r5, #0]
 800cfda:	b016      	add	sp, #88	; 0x58
 800cfdc:	bd70      	pop	{r4, r5, r6, pc}
 800cfde:	466a      	mov	r2, sp
 800cfe0:	f000 f90a 	bl	800d1f8 <_fstat_r>
 800cfe4:	2800      	cmp	r0, #0
 800cfe6:	dbec      	blt.n	800cfc2 <__swhatbuf_r+0x12>
 800cfe8:	9901      	ldr	r1, [sp, #4]
 800cfea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800cfee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800cff2:	4259      	negs	r1, r3
 800cff4:	4159      	adcs	r1, r3
 800cff6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cffa:	e7eb      	b.n	800cfd4 <__swhatbuf_r+0x24>

0800cffc <__smakebuf_r>:
 800cffc:	898b      	ldrh	r3, [r1, #12]
 800cffe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d000:	079d      	lsls	r5, r3, #30
 800d002:	4606      	mov	r6, r0
 800d004:	460c      	mov	r4, r1
 800d006:	d507      	bpl.n	800d018 <__smakebuf_r+0x1c>
 800d008:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d00c:	6023      	str	r3, [r4, #0]
 800d00e:	6123      	str	r3, [r4, #16]
 800d010:	2301      	movs	r3, #1
 800d012:	6163      	str	r3, [r4, #20]
 800d014:	b002      	add	sp, #8
 800d016:	bd70      	pop	{r4, r5, r6, pc}
 800d018:	ab01      	add	r3, sp, #4
 800d01a:	466a      	mov	r2, sp
 800d01c:	f7ff ffc8 	bl	800cfb0 <__swhatbuf_r>
 800d020:	9900      	ldr	r1, [sp, #0]
 800d022:	4605      	mov	r5, r0
 800d024:	4630      	mov	r0, r6
 800d026:	f7fe f8a9 	bl	800b17c <_malloc_r>
 800d02a:	b948      	cbnz	r0, 800d040 <__smakebuf_r+0x44>
 800d02c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d030:	059a      	lsls	r2, r3, #22
 800d032:	d4ef      	bmi.n	800d014 <__smakebuf_r+0x18>
 800d034:	f023 0303 	bic.w	r3, r3, #3
 800d038:	f043 0302 	orr.w	r3, r3, #2
 800d03c:	81a3      	strh	r3, [r4, #12]
 800d03e:	e7e3      	b.n	800d008 <__smakebuf_r+0xc>
 800d040:	89a3      	ldrh	r3, [r4, #12]
 800d042:	6020      	str	r0, [r4, #0]
 800d044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d048:	81a3      	strh	r3, [r4, #12]
 800d04a:	9b00      	ldr	r3, [sp, #0]
 800d04c:	6163      	str	r3, [r4, #20]
 800d04e:	9b01      	ldr	r3, [sp, #4]
 800d050:	6120      	str	r0, [r4, #16]
 800d052:	b15b      	cbz	r3, 800d06c <__smakebuf_r+0x70>
 800d054:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d058:	4630      	mov	r0, r6
 800d05a:	f000 f8df 	bl	800d21c <_isatty_r>
 800d05e:	b128      	cbz	r0, 800d06c <__smakebuf_r+0x70>
 800d060:	89a3      	ldrh	r3, [r4, #12]
 800d062:	f023 0303 	bic.w	r3, r3, #3
 800d066:	f043 0301 	orr.w	r3, r3, #1
 800d06a:	81a3      	strh	r3, [r4, #12]
 800d06c:	89a3      	ldrh	r3, [r4, #12]
 800d06e:	431d      	orrs	r5, r3
 800d070:	81a5      	strh	r5, [r4, #12]
 800d072:	e7cf      	b.n	800d014 <__smakebuf_r+0x18>

0800d074 <__swbuf_r>:
 800d074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d076:	460e      	mov	r6, r1
 800d078:	4614      	mov	r4, r2
 800d07a:	4605      	mov	r5, r0
 800d07c:	b118      	cbz	r0, 800d086 <__swbuf_r+0x12>
 800d07e:	6a03      	ldr	r3, [r0, #32]
 800d080:	b90b      	cbnz	r3, 800d086 <__swbuf_r+0x12>
 800d082:	f7fc ffad 	bl	8009fe0 <__sinit>
 800d086:	69a3      	ldr	r3, [r4, #24]
 800d088:	60a3      	str	r3, [r4, #8]
 800d08a:	89a3      	ldrh	r3, [r4, #12]
 800d08c:	071a      	lsls	r2, r3, #28
 800d08e:	d525      	bpl.n	800d0dc <__swbuf_r+0x68>
 800d090:	6923      	ldr	r3, [r4, #16]
 800d092:	b31b      	cbz	r3, 800d0dc <__swbuf_r+0x68>
 800d094:	6823      	ldr	r3, [r4, #0]
 800d096:	6922      	ldr	r2, [r4, #16]
 800d098:	1a98      	subs	r0, r3, r2
 800d09a:	6963      	ldr	r3, [r4, #20]
 800d09c:	b2f6      	uxtb	r6, r6
 800d09e:	4283      	cmp	r3, r0
 800d0a0:	4637      	mov	r7, r6
 800d0a2:	dc04      	bgt.n	800d0ae <__swbuf_r+0x3a>
 800d0a4:	4621      	mov	r1, r4
 800d0a6:	4628      	mov	r0, r5
 800d0a8:	f7ff ff5a 	bl	800cf60 <_fflush_r>
 800d0ac:	b9e0      	cbnz	r0, 800d0e8 <__swbuf_r+0x74>
 800d0ae:	68a3      	ldr	r3, [r4, #8]
 800d0b0:	3b01      	subs	r3, #1
 800d0b2:	60a3      	str	r3, [r4, #8]
 800d0b4:	6823      	ldr	r3, [r4, #0]
 800d0b6:	1c5a      	adds	r2, r3, #1
 800d0b8:	6022      	str	r2, [r4, #0]
 800d0ba:	701e      	strb	r6, [r3, #0]
 800d0bc:	6962      	ldr	r2, [r4, #20]
 800d0be:	1c43      	adds	r3, r0, #1
 800d0c0:	429a      	cmp	r2, r3
 800d0c2:	d004      	beq.n	800d0ce <__swbuf_r+0x5a>
 800d0c4:	89a3      	ldrh	r3, [r4, #12]
 800d0c6:	07db      	lsls	r3, r3, #31
 800d0c8:	d506      	bpl.n	800d0d8 <__swbuf_r+0x64>
 800d0ca:	2e0a      	cmp	r6, #10
 800d0cc:	d104      	bne.n	800d0d8 <__swbuf_r+0x64>
 800d0ce:	4621      	mov	r1, r4
 800d0d0:	4628      	mov	r0, r5
 800d0d2:	f7ff ff45 	bl	800cf60 <_fflush_r>
 800d0d6:	b938      	cbnz	r0, 800d0e8 <__swbuf_r+0x74>
 800d0d8:	4638      	mov	r0, r7
 800d0da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0dc:	4621      	mov	r1, r4
 800d0de:	4628      	mov	r0, r5
 800d0e0:	f000 f806 	bl	800d0f0 <__swsetup_r>
 800d0e4:	2800      	cmp	r0, #0
 800d0e6:	d0d5      	beq.n	800d094 <__swbuf_r+0x20>
 800d0e8:	f04f 37ff 	mov.w	r7, #4294967295
 800d0ec:	e7f4      	b.n	800d0d8 <__swbuf_r+0x64>
	...

0800d0f0 <__swsetup_r>:
 800d0f0:	b538      	push	{r3, r4, r5, lr}
 800d0f2:	4b2a      	ldr	r3, [pc, #168]	; (800d19c <__swsetup_r+0xac>)
 800d0f4:	4605      	mov	r5, r0
 800d0f6:	6818      	ldr	r0, [r3, #0]
 800d0f8:	460c      	mov	r4, r1
 800d0fa:	b118      	cbz	r0, 800d104 <__swsetup_r+0x14>
 800d0fc:	6a03      	ldr	r3, [r0, #32]
 800d0fe:	b90b      	cbnz	r3, 800d104 <__swsetup_r+0x14>
 800d100:	f7fc ff6e 	bl	8009fe0 <__sinit>
 800d104:	89a3      	ldrh	r3, [r4, #12]
 800d106:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d10a:	0718      	lsls	r0, r3, #28
 800d10c:	d422      	bmi.n	800d154 <__swsetup_r+0x64>
 800d10e:	06d9      	lsls	r1, r3, #27
 800d110:	d407      	bmi.n	800d122 <__swsetup_r+0x32>
 800d112:	2309      	movs	r3, #9
 800d114:	602b      	str	r3, [r5, #0]
 800d116:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d11a:	81a3      	strh	r3, [r4, #12]
 800d11c:	f04f 30ff 	mov.w	r0, #4294967295
 800d120:	e034      	b.n	800d18c <__swsetup_r+0x9c>
 800d122:	0758      	lsls	r0, r3, #29
 800d124:	d512      	bpl.n	800d14c <__swsetup_r+0x5c>
 800d126:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d128:	b141      	cbz	r1, 800d13c <__swsetup_r+0x4c>
 800d12a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d12e:	4299      	cmp	r1, r3
 800d130:	d002      	beq.n	800d138 <__swsetup_r+0x48>
 800d132:	4628      	mov	r0, r5
 800d134:	f7fd ffae 	bl	800b094 <_free_r>
 800d138:	2300      	movs	r3, #0
 800d13a:	6363      	str	r3, [r4, #52]	; 0x34
 800d13c:	89a3      	ldrh	r3, [r4, #12]
 800d13e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d142:	81a3      	strh	r3, [r4, #12]
 800d144:	2300      	movs	r3, #0
 800d146:	6063      	str	r3, [r4, #4]
 800d148:	6923      	ldr	r3, [r4, #16]
 800d14a:	6023      	str	r3, [r4, #0]
 800d14c:	89a3      	ldrh	r3, [r4, #12]
 800d14e:	f043 0308 	orr.w	r3, r3, #8
 800d152:	81a3      	strh	r3, [r4, #12]
 800d154:	6923      	ldr	r3, [r4, #16]
 800d156:	b94b      	cbnz	r3, 800d16c <__swsetup_r+0x7c>
 800d158:	89a3      	ldrh	r3, [r4, #12]
 800d15a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d15e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d162:	d003      	beq.n	800d16c <__swsetup_r+0x7c>
 800d164:	4621      	mov	r1, r4
 800d166:	4628      	mov	r0, r5
 800d168:	f7ff ff48 	bl	800cffc <__smakebuf_r>
 800d16c:	89a0      	ldrh	r0, [r4, #12]
 800d16e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d172:	f010 0301 	ands.w	r3, r0, #1
 800d176:	d00a      	beq.n	800d18e <__swsetup_r+0x9e>
 800d178:	2300      	movs	r3, #0
 800d17a:	60a3      	str	r3, [r4, #8]
 800d17c:	6963      	ldr	r3, [r4, #20]
 800d17e:	425b      	negs	r3, r3
 800d180:	61a3      	str	r3, [r4, #24]
 800d182:	6923      	ldr	r3, [r4, #16]
 800d184:	b943      	cbnz	r3, 800d198 <__swsetup_r+0xa8>
 800d186:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d18a:	d1c4      	bne.n	800d116 <__swsetup_r+0x26>
 800d18c:	bd38      	pop	{r3, r4, r5, pc}
 800d18e:	0781      	lsls	r1, r0, #30
 800d190:	bf58      	it	pl
 800d192:	6963      	ldrpl	r3, [r4, #20]
 800d194:	60a3      	str	r3, [r4, #8]
 800d196:	e7f4      	b.n	800d182 <__swsetup_r+0x92>
 800d198:	2000      	movs	r0, #0
 800d19a:	e7f7      	b.n	800d18c <__swsetup_r+0x9c>
 800d19c:	2000006c 	.word	0x2000006c

0800d1a0 <memmove>:
 800d1a0:	4288      	cmp	r0, r1
 800d1a2:	b510      	push	{r4, lr}
 800d1a4:	eb01 0402 	add.w	r4, r1, r2
 800d1a8:	d902      	bls.n	800d1b0 <memmove+0x10>
 800d1aa:	4284      	cmp	r4, r0
 800d1ac:	4623      	mov	r3, r4
 800d1ae:	d807      	bhi.n	800d1c0 <memmove+0x20>
 800d1b0:	1e43      	subs	r3, r0, #1
 800d1b2:	42a1      	cmp	r1, r4
 800d1b4:	d008      	beq.n	800d1c8 <memmove+0x28>
 800d1b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d1ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d1be:	e7f8      	b.n	800d1b2 <memmove+0x12>
 800d1c0:	4402      	add	r2, r0
 800d1c2:	4601      	mov	r1, r0
 800d1c4:	428a      	cmp	r2, r1
 800d1c6:	d100      	bne.n	800d1ca <memmove+0x2a>
 800d1c8:	bd10      	pop	{r4, pc}
 800d1ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d1ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d1d2:	e7f7      	b.n	800d1c4 <memmove+0x24>

0800d1d4 <strncmp>:
 800d1d4:	b510      	push	{r4, lr}
 800d1d6:	b16a      	cbz	r2, 800d1f4 <strncmp+0x20>
 800d1d8:	3901      	subs	r1, #1
 800d1da:	1884      	adds	r4, r0, r2
 800d1dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1e0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d1e4:	429a      	cmp	r2, r3
 800d1e6:	d103      	bne.n	800d1f0 <strncmp+0x1c>
 800d1e8:	42a0      	cmp	r0, r4
 800d1ea:	d001      	beq.n	800d1f0 <strncmp+0x1c>
 800d1ec:	2a00      	cmp	r2, #0
 800d1ee:	d1f5      	bne.n	800d1dc <strncmp+0x8>
 800d1f0:	1ad0      	subs	r0, r2, r3
 800d1f2:	bd10      	pop	{r4, pc}
 800d1f4:	4610      	mov	r0, r2
 800d1f6:	e7fc      	b.n	800d1f2 <strncmp+0x1e>

0800d1f8 <_fstat_r>:
 800d1f8:	b538      	push	{r3, r4, r5, lr}
 800d1fa:	4d07      	ldr	r5, [pc, #28]	; (800d218 <_fstat_r+0x20>)
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	4604      	mov	r4, r0
 800d200:	4608      	mov	r0, r1
 800d202:	4611      	mov	r1, r2
 800d204:	602b      	str	r3, [r5, #0]
 800d206:	f7f6 fb3c 	bl	8003882 <_fstat>
 800d20a:	1c43      	adds	r3, r0, #1
 800d20c:	d102      	bne.n	800d214 <_fstat_r+0x1c>
 800d20e:	682b      	ldr	r3, [r5, #0]
 800d210:	b103      	cbz	r3, 800d214 <_fstat_r+0x1c>
 800d212:	6023      	str	r3, [r4, #0]
 800d214:	bd38      	pop	{r3, r4, r5, pc}
 800d216:	bf00      	nop
 800d218:	20001008 	.word	0x20001008

0800d21c <_isatty_r>:
 800d21c:	b538      	push	{r3, r4, r5, lr}
 800d21e:	4d06      	ldr	r5, [pc, #24]	; (800d238 <_isatty_r+0x1c>)
 800d220:	2300      	movs	r3, #0
 800d222:	4604      	mov	r4, r0
 800d224:	4608      	mov	r0, r1
 800d226:	602b      	str	r3, [r5, #0]
 800d228:	f7f6 fb3b 	bl	80038a2 <_isatty>
 800d22c:	1c43      	adds	r3, r0, #1
 800d22e:	d102      	bne.n	800d236 <_isatty_r+0x1a>
 800d230:	682b      	ldr	r3, [r5, #0]
 800d232:	b103      	cbz	r3, 800d236 <_isatty_r+0x1a>
 800d234:	6023      	str	r3, [r4, #0]
 800d236:	bd38      	pop	{r3, r4, r5, pc}
 800d238:	20001008 	.word	0x20001008

0800d23c <_sbrk_r>:
 800d23c:	b538      	push	{r3, r4, r5, lr}
 800d23e:	4d06      	ldr	r5, [pc, #24]	; (800d258 <_sbrk_r+0x1c>)
 800d240:	2300      	movs	r3, #0
 800d242:	4604      	mov	r4, r0
 800d244:	4608      	mov	r0, r1
 800d246:	602b      	str	r3, [r5, #0]
 800d248:	f7f6 fb44 	bl	80038d4 <_sbrk>
 800d24c:	1c43      	adds	r3, r0, #1
 800d24e:	d102      	bne.n	800d256 <_sbrk_r+0x1a>
 800d250:	682b      	ldr	r3, [r5, #0]
 800d252:	b103      	cbz	r3, 800d256 <_sbrk_r+0x1a>
 800d254:	6023      	str	r3, [r4, #0]
 800d256:	bd38      	pop	{r3, r4, r5, pc}
 800d258:	20001008 	.word	0x20001008

0800d25c <memcpy>:
 800d25c:	440a      	add	r2, r1
 800d25e:	4291      	cmp	r1, r2
 800d260:	f100 33ff 	add.w	r3, r0, #4294967295
 800d264:	d100      	bne.n	800d268 <memcpy+0xc>
 800d266:	4770      	bx	lr
 800d268:	b510      	push	{r4, lr}
 800d26a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d26e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d272:	4291      	cmp	r1, r2
 800d274:	d1f9      	bne.n	800d26a <memcpy+0xe>
 800d276:	bd10      	pop	{r4, pc}

0800d278 <nan>:
 800d278:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d280 <nan+0x8>
 800d27c:	4770      	bx	lr
 800d27e:	bf00      	nop
 800d280:	00000000 	.word	0x00000000
 800d284:	7ff80000 	.word	0x7ff80000

0800d288 <__assert_func>:
 800d288:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d28a:	4614      	mov	r4, r2
 800d28c:	461a      	mov	r2, r3
 800d28e:	4b09      	ldr	r3, [pc, #36]	; (800d2b4 <__assert_func+0x2c>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	4605      	mov	r5, r0
 800d294:	68d8      	ldr	r0, [r3, #12]
 800d296:	b14c      	cbz	r4, 800d2ac <__assert_func+0x24>
 800d298:	4b07      	ldr	r3, [pc, #28]	; (800d2b8 <__assert_func+0x30>)
 800d29a:	9100      	str	r1, [sp, #0]
 800d29c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d2a0:	4906      	ldr	r1, [pc, #24]	; (800d2bc <__assert_func+0x34>)
 800d2a2:	462b      	mov	r3, r5
 800d2a4:	f000 fbca 	bl	800da3c <fiprintf>
 800d2a8:	f000 fbda 	bl	800da60 <abort>
 800d2ac:	4b04      	ldr	r3, [pc, #16]	; (800d2c0 <__assert_func+0x38>)
 800d2ae:	461c      	mov	r4, r3
 800d2b0:	e7f3      	b.n	800d29a <__assert_func+0x12>
 800d2b2:	bf00      	nop
 800d2b4:	2000006c 	.word	0x2000006c
 800d2b8:	0800deea 	.word	0x0800deea
 800d2bc:	0800def7 	.word	0x0800def7
 800d2c0:	0800df25 	.word	0x0800df25

0800d2c4 <_calloc_r>:
 800d2c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d2c6:	fba1 2402 	umull	r2, r4, r1, r2
 800d2ca:	b94c      	cbnz	r4, 800d2e0 <_calloc_r+0x1c>
 800d2cc:	4611      	mov	r1, r2
 800d2ce:	9201      	str	r2, [sp, #4]
 800d2d0:	f7fd ff54 	bl	800b17c <_malloc_r>
 800d2d4:	9a01      	ldr	r2, [sp, #4]
 800d2d6:	4605      	mov	r5, r0
 800d2d8:	b930      	cbnz	r0, 800d2e8 <_calloc_r+0x24>
 800d2da:	4628      	mov	r0, r5
 800d2dc:	b003      	add	sp, #12
 800d2de:	bd30      	pop	{r4, r5, pc}
 800d2e0:	220c      	movs	r2, #12
 800d2e2:	6002      	str	r2, [r0, #0]
 800d2e4:	2500      	movs	r5, #0
 800d2e6:	e7f8      	b.n	800d2da <_calloc_r+0x16>
 800d2e8:	4621      	mov	r1, r4
 800d2ea:	f7fc ffd2 	bl	800a292 <memset>
 800d2ee:	e7f4      	b.n	800d2da <_calloc_r+0x16>

0800d2f0 <rshift>:
 800d2f0:	6903      	ldr	r3, [r0, #16]
 800d2f2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d2f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d2fa:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d2fe:	f100 0414 	add.w	r4, r0, #20
 800d302:	dd45      	ble.n	800d390 <rshift+0xa0>
 800d304:	f011 011f 	ands.w	r1, r1, #31
 800d308:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d30c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d310:	d10c      	bne.n	800d32c <rshift+0x3c>
 800d312:	f100 0710 	add.w	r7, r0, #16
 800d316:	4629      	mov	r1, r5
 800d318:	42b1      	cmp	r1, r6
 800d31a:	d334      	bcc.n	800d386 <rshift+0x96>
 800d31c:	1a9b      	subs	r3, r3, r2
 800d31e:	009b      	lsls	r3, r3, #2
 800d320:	1eea      	subs	r2, r5, #3
 800d322:	4296      	cmp	r6, r2
 800d324:	bf38      	it	cc
 800d326:	2300      	movcc	r3, #0
 800d328:	4423      	add	r3, r4
 800d32a:	e015      	b.n	800d358 <rshift+0x68>
 800d32c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d330:	f1c1 0820 	rsb	r8, r1, #32
 800d334:	40cf      	lsrs	r7, r1
 800d336:	f105 0e04 	add.w	lr, r5, #4
 800d33a:	46a1      	mov	r9, r4
 800d33c:	4576      	cmp	r6, lr
 800d33e:	46f4      	mov	ip, lr
 800d340:	d815      	bhi.n	800d36e <rshift+0x7e>
 800d342:	1a9a      	subs	r2, r3, r2
 800d344:	0092      	lsls	r2, r2, #2
 800d346:	3a04      	subs	r2, #4
 800d348:	3501      	adds	r5, #1
 800d34a:	42ae      	cmp	r6, r5
 800d34c:	bf38      	it	cc
 800d34e:	2200      	movcc	r2, #0
 800d350:	18a3      	adds	r3, r4, r2
 800d352:	50a7      	str	r7, [r4, r2]
 800d354:	b107      	cbz	r7, 800d358 <rshift+0x68>
 800d356:	3304      	adds	r3, #4
 800d358:	1b1a      	subs	r2, r3, r4
 800d35a:	42a3      	cmp	r3, r4
 800d35c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d360:	bf08      	it	eq
 800d362:	2300      	moveq	r3, #0
 800d364:	6102      	str	r2, [r0, #16]
 800d366:	bf08      	it	eq
 800d368:	6143      	streq	r3, [r0, #20]
 800d36a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d36e:	f8dc c000 	ldr.w	ip, [ip]
 800d372:	fa0c fc08 	lsl.w	ip, ip, r8
 800d376:	ea4c 0707 	orr.w	r7, ip, r7
 800d37a:	f849 7b04 	str.w	r7, [r9], #4
 800d37e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d382:	40cf      	lsrs	r7, r1
 800d384:	e7da      	b.n	800d33c <rshift+0x4c>
 800d386:	f851 cb04 	ldr.w	ip, [r1], #4
 800d38a:	f847 cf04 	str.w	ip, [r7, #4]!
 800d38e:	e7c3      	b.n	800d318 <rshift+0x28>
 800d390:	4623      	mov	r3, r4
 800d392:	e7e1      	b.n	800d358 <rshift+0x68>

0800d394 <__hexdig_fun>:
 800d394:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d398:	2b09      	cmp	r3, #9
 800d39a:	d802      	bhi.n	800d3a2 <__hexdig_fun+0xe>
 800d39c:	3820      	subs	r0, #32
 800d39e:	b2c0      	uxtb	r0, r0
 800d3a0:	4770      	bx	lr
 800d3a2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d3a6:	2b05      	cmp	r3, #5
 800d3a8:	d801      	bhi.n	800d3ae <__hexdig_fun+0x1a>
 800d3aa:	3847      	subs	r0, #71	; 0x47
 800d3ac:	e7f7      	b.n	800d39e <__hexdig_fun+0xa>
 800d3ae:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d3b2:	2b05      	cmp	r3, #5
 800d3b4:	d801      	bhi.n	800d3ba <__hexdig_fun+0x26>
 800d3b6:	3827      	subs	r0, #39	; 0x27
 800d3b8:	e7f1      	b.n	800d39e <__hexdig_fun+0xa>
 800d3ba:	2000      	movs	r0, #0
 800d3bc:	4770      	bx	lr
	...

0800d3c0 <__gethex>:
 800d3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3c4:	4617      	mov	r7, r2
 800d3c6:	680a      	ldr	r2, [r1, #0]
 800d3c8:	b085      	sub	sp, #20
 800d3ca:	f102 0b02 	add.w	fp, r2, #2
 800d3ce:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d3d2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d3d6:	4681      	mov	r9, r0
 800d3d8:	468a      	mov	sl, r1
 800d3da:	9302      	str	r3, [sp, #8]
 800d3dc:	32fe      	adds	r2, #254	; 0xfe
 800d3de:	eb02 030b 	add.w	r3, r2, fp
 800d3e2:	46d8      	mov	r8, fp
 800d3e4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800d3e8:	9301      	str	r3, [sp, #4]
 800d3ea:	2830      	cmp	r0, #48	; 0x30
 800d3ec:	d0f7      	beq.n	800d3de <__gethex+0x1e>
 800d3ee:	f7ff ffd1 	bl	800d394 <__hexdig_fun>
 800d3f2:	4604      	mov	r4, r0
 800d3f4:	2800      	cmp	r0, #0
 800d3f6:	d138      	bne.n	800d46a <__gethex+0xaa>
 800d3f8:	49a7      	ldr	r1, [pc, #668]	; (800d698 <__gethex+0x2d8>)
 800d3fa:	2201      	movs	r2, #1
 800d3fc:	4640      	mov	r0, r8
 800d3fe:	f7ff fee9 	bl	800d1d4 <strncmp>
 800d402:	4606      	mov	r6, r0
 800d404:	2800      	cmp	r0, #0
 800d406:	d169      	bne.n	800d4dc <__gethex+0x11c>
 800d408:	f898 0001 	ldrb.w	r0, [r8, #1]
 800d40c:	465d      	mov	r5, fp
 800d40e:	f7ff ffc1 	bl	800d394 <__hexdig_fun>
 800d412:	2800      	cmp	r0, #0
 800d414:	d064      	beq.n	800d4e0 <__gethex+0x120>
 800d416:	465a      	mov	r2, fp
 800d418:	7810      	ldrb	r0, [r2, #0]
 800d41a:	2830      	cmp	r0, #48	; 0x30
 800d41c:	4690      	mov	r8, r2
 800d41e:	f102 0201 	add.w	r2, r2, #1
 800d422:	d0f9      	beq.n	800d418 <__gethex+0x58>
 800d424:	f7ff ffb6 	bl	800d394 <__hexdig_fun>
 800d428:	2301      	movs	r3, #1
 800d42a:	fab0 f480 	clz	r4, r0
 800d42e:	0964      	lsrs	r4, r4, #5
 800d430:	465e      	mov	r6, fp
 800d432:	9301      	str	r3, [sp, #4]
 800d434:	4642      	mov	r2, r8
 800d436:	4615      	mov	r5, r2
 800d438:	3201      	adds	r2, #1
 800d43a:	7828      	ldrb	r0, [r5, #0]
 800d43c:	f7ff ffaa 	bl	800d394 <__hexdig_fun>
 800d440:	2800      	cmp	r0, #0
 800d442:	d1f8      	bne.n	800d436 <__gethex+0x76>
 800d444:	4994      	ldr	r1, [pc, #592]	; (800d698 <__gethex+0x2d8>)
 800d446:	2201      	movs	r2, #1
 800d448:	4628      	mov	r0, r5
 800d44a:	f7ff fec3 	bl	800d1d4 <strncmp>
 800d44e:	b978      	cbnz	r0, 800d470 <__gethex+0xb0>
 800d450:	b946      	cbnz	r6, 800d464 <__gethex+0xa4>
 800d452:	1c6e      	adds	r6, r5, #1
 800d454:	4632      	mov	r2, r6
 800d456:	4615      	mov	r5, r2
 800d458:	3201      	adds	r2, #1
 800d45a:	7828      	ldrb	r0, [r5, #0]
 800d45c:	f7ff ff9a 	bl	800d394 <__hexdig_fun>
 800d460:	2800      	cmp	r0, #0
 800d462:	d1f8      	bne.n	800d456 <__gethex+0x96>
 800d464:	1b73      	subs	r3, r6, r5
 800d466:	009e      	lsls	r6, r3, #2
 800d468:	e004      	b.n	800d474 <__gethex+0xb4>
 800d46a:	2400      	movs	r4, #0
 800d46c:	4626      	mov	r6, r4
 800d46e:	e7e1      	b.n	800d434 <__gethex+0x74>
 800d470:	2e00      	cmp	r6, #0
 800d472:	d1f7      	bne.n	800d464 <__gethex+0xa4>
 800d474:	782b      	ldrb	r3, [r5, #0]
 800d476:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d47a:	2b50      	cmp	r3, #80	; 0x50
 800d47c:	d13d      	bne.n	800d4fa <__gethex+0x13a>
 800d47e:	786b      	ldrb	r3, [r5, #1]
 800d480:	2b2b      	cmp	r3, #43	; 0x2b
 800d482:	d02f      	beq.n	800d4e4 <__gethex+0x124>
 800d484:	2b2d      	cmp	r3, #45	; 0x2d
 800d486:	d031      	beq.n	800d4ec <__gethex+0x12c>
 800d488:	1c69      	adds	r1, r5, #1
 800d48a:	f04f 0b00 	mov.w	fp, #0
 800d48e:	7808      	ldrb	r0, [r1, #0]
 800d490:	f7ff ff80 	bl	800d394 <__hexdig_fun>
 800d494:	1e42      	subs	r2, r0, #1
 800d496:	b2d2      	uxtb	r2, r2
 800d498:	2a18      	cmp	r2, #24
 800d49a:	d82e      	bhi.n	800d4fa <__gethex+0x13a>
 800d49c:	f1a0 0210 	sub.w	r2, r0, #16
 800d4a0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d4a4:	f7ff ff76 	bl	800d394 <__hexdig_fun>
 800d4a8:	f100 3cff 	add.w	ip, r0, #4294967295
 800d4ac:	fa5f fc8c 	uxtb.w	ip, ip
 800d4b0:	f1bc 0f18 	cmp.w	ip, #24
 800d4b4:	d91d      	bls.n	800d4f2 <__gethex+0x132>
 800d4b6:	f1bb 0f00 	cmp.w	fp, #0
 800d4ba:	d000      	beq.n	800d4be <__gethex+0xfe>
 800d4bc:	4252      	negs	r2, r2
 800d4be:	4416      	add	r6, r2
 800d4c0:	f8ca 1000 	str.w	r1, [sl]
 800d4c4:	b1dc      	cbz	r4, 800d4fe <__gethex+0x13e>
 800d4c6:	9b01      	ldr	r3, [sp, #4]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	bf14      	ite	ne
 800d4cc:	f04f 0800 	movne.w	r8, #0
 800d4d0:	f04f 0806 	moveq.w	r8, #6
 800d4d4:	4640      	mov	r0, r8
 800d4d6:	b005      	add	sp, #20
 800d4d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4dc:	4645      	mov	r5, r8
 800d4de:	4626      	mov	r6, r4
 800d4e0:	2401      	movs	r4, #1
 800d4e2:	e7c7      	b.n	800d474 <__gethex+0xb4>
 800d4e4:	f04f 0b00 	mov.w	fp, #0
 800d4e8:	1ca9      	adds	r1, r5, #2
 800d4ea:	e7d0      	b.n	800d48e <__gethex+0xce>
 800d4ec:	f04f 0b01 	mov.w	fp, #1
 800d4f0:	e7fa      	b.n	800d4e8 <__gethex+0x128>
 800d4f2:	230a      	movs	r3, #10
 800d4f4:	fb03 0002 	mla	r0, r3, r2, r0
 800d4f8:	e7d0      	b.n	800d49c <__gethex+0xdc>
 800d4fa:	4629      	mov	r1, r5
 800d4fc:	e7e0      	b.n	800d4c0 <__gethex+0x100>
 800d4fe:	eba5 0308 	sub.w	r3, r5, r8
 800d502:	3b01      	subs	r3, #1
 800d504:	4621      	mov	r1, r4
 800d506:	2b07      	cmp	r3, #7
 800d508:	dc0a      	bgt.n	800d520 <__gethex+0x160>
 800d50a:	4648      	mov	r0, r9
 800d50c:	f7fd fec2 	bl	800b294 <_Balloc>
 800d510:	4604      	mov	r4, r0
 800d512:	b940      	cbnz	r0, 800d526 <__gethex+0x166>
 800d514:	4b61      	ldr	r3, [pc, #388]	; (800d69c <__gethex+0x2dc>)
 800d516:	4602      	mov	r2, r0
 800d518:	21e4      	movs	r1, #228	; 0xe4
 800d51a:	4861      	ldr	r0, [pc, #388]	; (800d6a0 <__gethex+0x2e0>)
 800d51c:	f7ff feb4 	bl	800d288 <__assert_func>
 800d520:	3101      	adds	r1, #1
 800d522:	105b      	asrs	r3, r3, #1
 800d524:	e7ef      	b.n	800d506 <__gethex+0x146>
 800d526:	f100 0a14 	add.w	sl, r0, #20
 800d52a:	2300      	movs	r3, #0
 800d52c:	495a      	ldr	r1, [pc, #360]	; (800d698 <__gethex+0x2d8>)
 800d52e:	f8cd a004 	str.w	sl, [sp, #4]
 800d532:	469b      	mov	fp, r3
 800d534:	45a8      	cmp	r8, r5
 800d536:	d342      	bcc.n	800d5be <__gethex+0x1fe>
 800d538:	9801      	ldr	r0, [sp, #4]
 800d53a:	f840 bb04 	str.w	fp, [r0], #4
 800d53e:	eba0 000a 	sub.w	r0, r0, sl
 800d542:	1080      	asrs	r0, r0, #2
 800d544:	6120      	str	r0, [r4, #16]
 800d546:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800d54a:	4658      	mov	r0, fp
 800d54c:	f7fd ff94 	bl	800b478 <__hi0bits>
 800d550:	683d      	ldr	r5, [r7, #0]
 800d552:	eba8 0000 	sub.w	r0, r8, r0
 800d556:	42a8      	cmp	r0, r5
 800d558:	dd59      	ble.n	800d60e <__gethex+0x24e>
 800d55a:	eba0 0805 	sub.w	r8, r0, r5
 800d55e:	4641      	mov	r1, r8
 800d560:	4620      	mov	r0, r4
 800d562:	f7fe fb23 	bl	800bbac <__any_on>
 800d566:	4683      	mov	fp, r0
 800d568:	b1b8      	cbz	r0, 800d59a <__gethex+0x1da>
 800d56a:	f108 33ff 	add.w	r3, r8, #4294967295
 800d56e:	1159      	asrs	r1, r3, #5
 800d570:	f003 021f 	and.w	r2, r3, #31
 800d574:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d578:	f04f 0b01 	mov.w	fp, #1
 800d57c:	fa0b f202 	lsl.w	r2, fp, r2
 800d580:	420a      	tst	r2, r1
 800d582:	d00a      	beq.n	800d59a <__gethex+0x1da>
 800d584:	455b      	cmp	r3, fp
 800d586:	dd06      	ble.n	800d596 <__gethex+0x1d6>
 800d588:	f1a8 0102 	sub.w	r1, r8, #2
 800d58c:	4620      	mov	r0, r4
 800d58e:	f7fe fb0d 	bl	800bbac <__any_on>
 800d592:	2800      	cmp	r0, #0
 800d594:	d138      	bne.n	800d608 <__gethex+0x248>
 800d596:	f04f 0b02 	mov.w	fp, #2
 800d59a:	4641      	mov	r1, r8
 800d59c:	4620      	mov	r0, r4
 800d59e:	f7ff fea7 	bl	800d2f0 <rshift>
 800d5a2:	4446      	add	r6, r8
 800d5a4:	68bb      	ldr	r3, [r7, #8]
 800d5a6:	42b3      	cmp	r3, r6
 800d5a8:	da41      	bge.n	800d62e <__gethex+0x26e>
 800d5aa:	4621      	mov	r1, r4
 800d5ac:	4648      	mov	r0, r9
 800d5ae:	f7fd feb1 	bl	800b314 <_Bfree>
 800d5b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	6013      	str	r3, [r2, #0]
 800d5b8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800d5bc:	e78a      	b.n	800d4d4 <__gethex+0x114>
 800d5be:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800d5c2:	2a2e      	cmp	r2, #46	; 0x2e
 800d5c4:	d014      	beq.n	800d5f0 <__gethex+0x230>
 800d5c6:	2b20      	cmp	r3, #32
 800d5c8:	d106      	bne.n	800d5d8 <__gethex+0x218>
 800d5ca:	9b01      	ldr	r3, [sp, #4]
 800d5cc:	f843 bb04 	str.w	fp, [r3], #4
 800d5d0:	f04f 0b00 	mov.w	fp, #0
 800d5d4:	9301      	str	r3, [sp, #4]
 800d5d6:	465b      	mov	r3, fp
 800d5d8:	7828      	ldrb	r0, [r5, #0]
 800d5da:	9303      	str	r3, [sp, #12]
 800d5dc:	f7ff feda 	bl	800d394 <__hexdig_fun>
 800d5e0:	9b03      	ldr	r3, [sp, #12]
 800d5e2:	f000 000f 	and.w	r0, r0, #15
 800d5e6:	4098      	lsls	r0, r3
 800d5e8:	ea4b 0b00 	orr.w	fp, fp, r0
 800d5ec:	3304      	adds	r3, #4
 800d5ee:	e7a1      	b.n	800d534 <__gethex+0x174>
 800d5f0:	45a8      	cmp	r8, r5
 800d5f2:	d8e8      	bhi.n	800d5c6 <__gethex+0x206>
 800d5f4:	2201      	movs	r2, #1
 800d5f6:	4628      	mov	r0, r5
 800d5f8:	9303      	str	r3, [sp, #12]
 800d5fa:	f7ff fdeb 	bl	800d1d4 <strncmp>
 800d5fe:	4926      	ldr	r1, [pc, #152]	; (800d698 <__gethex+0x2d8>)
 800d600:	9b03      	ldr	r3, [sp, #12]
 800d602:	2800      	cmp	r0, #0
 800d604:	d1df      	bne.n	800d5c6 <__gethex+0x206>
 800d606:	e795      	b.n	800d534 <__gethex+0x174>
 800d608:	f04f 0b03 	mov.w	fp, #3
 800d60c:	e7c5      	b.n	800d59a <__gethex+0x1da>
 800d60e:	da0b      	bge.n	800d628 <__gethex+0x268>
 800d610:	eba5 0800 	sub.w	r8, r5, r0
 800d614:	4621      	mov	r1, r4
 800d616:	4642      	mov	r2, r8
 800d618:	4648      	mov	r0, r9
 800d61a:	f7fe f895 	bl	800b748 <__lshift>
 800d61e:	eba6 0608 	sub.w	r6, r6, r8
 800d622:	4604      	mov	r4, r0
 800d624:	f100 0a14 	add.w	sl, r0, #20
 800d628:	f04f 0b00 	mov.w	fp, #0
 800d62c:	e7ba      	b.n	800d5a4 <__gethex+0x1e4>
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	42b3      	cmp	r3, r6
 800d632:	dd73      	ble.n	800d71c <__gethex+0x35c>
 800d634:	1b9e      	subs	r6, r3, r6
 800d636:	42b5      	cmp	r5, r6
 800d638:	dc34      	bgt.n	800d6a4 <__gethex+0x2e4>
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	2b02      	cmp	r3, #2
 800d63e:	d023      	beq.n	800d688 <__gethex+0x2c8>
 800d640:	2b03      	cmp	r3, #3
 800d642:	d025      	beq.n	800d690 <__gethex+0x2d0>
 800d644:	2b01      	cmp	r3, #1
 800d646:	d115      	bne.n	800d674 <__gethex+0x2b4>
 800d648:	42b5      	cmp	r5, r6
 800d64a:	d113      	bne.n	800d674 <__gethex+0x2b4>
 800d64c:	2d01      	cmp	r5, #1
 800d64e:	d10b      	bne.n	800d668 <__gethex+0x2a8>
 800d650:	9a02      	ldr	r2, [sp, #8]
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	6013      	str	r3, [r2, #0]
 800d656:	2301      	movs	r3, #1
 800d658:	6123      	str	r3, [r4, #16]
 800d65a:	f8ca 3000 	str.w	r3, [sl]
 800d65e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d660:	f04f 0862 	mov.w	r8, #98	; 0x62
 800d664:	601c      	str	r4, [r3, #0]
 800d666:	e735      	b.n	800d4d4 <__gethex+0x114>
 800d668:	1e69      	subs	r1, r5, #1
 800d66a:	4620      	mov	r0, r4
 800d66c:	f7fe fa9e 	bl	800bbac <__any_on>
 800d670:	2800      	cmp	r0, #0
 800d672:	d1ed      	bne.n	800d650 <__gethex+0x290>
 800d674:	4621      	mov	r1, r4
 800d676:	4648      	mov	r0, r9
 800d678:	f7fd fe4c 	bl	800b314 <_Bfree>
 800d67c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d67e:	2300      	movs	r3, #0
 800d680:	6013      	str	r3, [r2, #0]
 800d682:	f04f 0850 	mov.w	r8, #80	; 0x50
 800d686:	e725      	b.n	800d4d4 <__gethex+0x114>
 800d688:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d1f2      	bne.n	800d674 <__gethex+0x2b4>
 800d68e:	e7df      	b.n	800d650 <__gethex+0x290>
 800d690:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d692:	2b00      	cmp	r3, #0
 800d694:	d1dc      	bne.n	800d650 <__gethex+0x290>
 800d696:	e7ed      	b.n	800d674 <__gethex+0x2b4>
 800d698:	0800dd7c 	.word	0x0800dd7c
 800d69c:	0800dc11 	.word	0x0800dc11
 800d6a0:	0800df26 	.word	0x0800df26
 800d6a4:	f106 38ff 	add.w	r8, r6, #4294967295
 800d6a8:	f1bb 0f00 	cmp.w	fp, #0
 800d6ac:	d133      	bne.n	800d716 <__gethex+0x356>
 800d6ae:	f1b8 0f00 	cmp.w	r8, #0
 800d6b2:	d004      	beq.n	800d6be <__gethex+0x2fe>
 800d6b4:	4641      	mov	r1, r8
 800d6b6:	4620      	mov	r0, r4
 800d6b8:	f7fe fa78 	bl	800bbac <__any_on>
 800d6bc:	4683      	mov	fp, r0
 800d6be:	ea4f 1268 	mov.w	r2, r8, asr #5
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d6c8:	f008 081f 	and.w	r8, r8, #31
 800d6cc:	fa03 f308 	lsl.w	r3, r3, r8
 800d6d0:	4213      	tst	r3, r2
 800d6d2:	4631      	mov	r1, r6
 800d6d4:	4620      	mov	r0, r4
 800d6d6:	bf18      	it	ne
 800d6d8:	f04b 0b02 	orrne.w	fp, fp, #2
 800d6dc:	1bad      	subs	r5, r5, r6
 800d6de:	f7ff fe07 	bl	800d2f0 <rshift>
 800d6e2:	687e      	ldr	r6, [r7, #4]
 800d6e4:	f04f 0802 	mov.w	r8, #2
 800d6e8:	f1bb 0f00 	cmp.w	fp, #0
 800d6ec:	d04a      	beq.n	800d784 <__gethex+0x3c4>
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	2b02      	cmp	r3, #2
 800d6f2:	d016      	beq.n	800d722 <__gethex+0x362>
 800d6f4:	2b03      	cmp	r3, #3
 800d6f6:	d018      	beq.n	800d72a <__gethex+0x36a>
 800d6f8:	2b01      	cmp	r3, #1
 800d6fa:	d109      	bne.n	800d710 <__gethex+0x350>
 800d6fc:	f01b 0f02 	tst.w	fp, #2
 800d700:	d006      	beq.n	800d710 <__gethex+0x350>
 800d702:	f8da 3000 	ldr.w	r3, [sl]
 800d706:	ea4b 0b03 	orr.w	fp, fp, r3
 800d70a:	f01b 0f01 	tst.w	fp, #1
 800d70e:	d10f      	bne.n	800d730 <__gethex+0x370>
 800d710:	f048 0810 	orr.w	r8, r8, #16
 800d714:	e036      	b.n	800d784 <__gethex+0x3c4>
 800d716:	f04f 0b01 	mov.w	fp, #1
 800d71a:	e7d0      	b.n	800d6be <__gethex+0x2fe>
 800d71c:	f04f 0801 	mov.w	r8, #1
 800d720:	e7e2      	b.n	800d6e8 <__gethex+0x328>
 800d722:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d724:	f1c3 0301 	rsb	r3, r3, #1
 800d728:	930f      	str	r3, [sp, #60]	; 0x3c
 800d72a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d0ef      	beq.n	800d710 <__gethex+0x350>
 800d730:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d734:	f104 0214 	add.w	r2, r4, #20
 800d738:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d73c:	9301      	str	r3, [sp, #4]
 800d73e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800d742:	2300      	movs	r3, #0
 800d744:	4694      	mov	ip, r2
 800d746:	f852 1b04 	ldr.w	r1, [r2], #4
 800d74a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800d74e:	d01e      	beq.n	800d78e <__gethex+0x3ce>
 800d750:	3101      	adds	r1, #1
 800d752:	f8cc 1000 	str.w	r1, [ip]
 800d756:	f1b8 0f02 	cmp.w	r8, #2
 800d75a:	f104 0214 	add.w	r2, r4, #20
 800d75e:	d13d      	bne.n	800d7dc <__gethex+0x41c>
 800d760:	683b      	ldr	r3, [r7, #0]
 800d762:	3b01      	subs	r3, #1
 800d764:	42ab      	cmp	r3, r5
 800d766:	d10b      	bne.n	800d780 <__gethex+0x3c0>
 800d768:	1169      	asrs	r1, r5, #5
 800d76a:	2301      	movs	r3, #1
 800d76c:	f005 051f 	and.w	r5, r5, #31
 800d770:	fa03 f505 	lsl.w	r5, r3, r5
 800d774:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d778:	421d      	tst	r5, r3
 800d77a:	bf18      	it	ne
 800d77c:	f04f 0801 	movne.w	r8, #1
 800d780:	f048 0820 	orr.w	r8, r8, #32
 800d784:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d786:	601c      	str	r4, [r3, #0]
 800d788:	9b02      	ldr	r3, [sp, #8]
 800d78a:	601e      	str	r6, [r3, #0]
 800d78c:	e6a2      	b.n	800d4d4 <__gethex+0x114>
 800d78e:	4290      	cmp	r0, r2
 800d790:	f842 3c04 	str.w	r3, [r2, #-4]
 800d794:	d8d6      	bhi.n	800d744 <__gethex+0x384>
 800d796:	68a2      	ldr	r2, [r4, #8]
 800d798:	4593      	cmp	fp, r2
 800d79a:	db17      	blt.n	800d7cc <__gethex+0x40c>
 800d79c:	6861      	ldr	r1, [r4, #4]
 800d79e:	4648      	mov	r0, r9
 800d7a0:	3101      	adds	r1, #1
 800d7a2:	f7fd fd77 	bl	800b294 <_Balloc>
 800d7a6:	4682      	mov	sl, r0
 800d7a8:	b918      	cbnz	r0, 800d7b2 <__gethex+0x3f2>
 800d7aa:	4b1b      	ldr	r3, [pc, #108]	; (800d818 <__gethex+0x458>)
 800d7ac:	4602      	mov	r2, r0
 800d7ae:	2184      	movs	r1, #132	; 0x84
 800d7b0:	e6b3      	b.n	800d51a <__gethex+0x15a>
 800d7b2:	6922      	ldr	r2, [r4, #16]
 800d7b4:	3202      	adds	r2, #2
 800d7b6:	f104 010c 	add.w	r1, r4, #12
 800d7ba:	0092      	lsls	r2, r2, #2
 800d7bc:	300c      	adds	r0, #12
 800d7be:	f7ff fd4d 	bl	800d25c <memcpy>
 800d7c2:	4621      	mov	r1, r4
 800d7c4:	4648      	mov	r0, r9
 800d7c6:	f7fd fda5 	bl	800b314 <_Bfree>
 800d7ca:	4654      	mov	r4, sl
 800d7cc:	6922      	ldr	r2, [r4, #16]
 800d7ce:	1c51      	adds	r1, r2, #1
 800d7d0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d7d4:	6121      	str	r1, [r4, #16]
 800d7d6:	2101      	movs	r1, #1
 800d7d8:	6151      	str	r1, [r2, #20]
 800d7da:	e7bc      	b.n	800d756 <__gethex+0x396>
 800d7dc:	6921      	ldr	r1, [r4, #16]
 800d7de:	4559      	cmp	r1, fp
 800d7e0:	dd0b      	ble.n	800d7fa <__gethex+0x43a>
 800d7e2:	2101      	movs	r1, #1
 800d7e4:	4620      	mov	r0, r4
 800d7e6:	f7ff fd83 	bl	800d2f0 <rshift>
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	3601      	adds	r6, #1
 800d7ee:	42b3      	cmp	r3, r6
 800d7f0:	f6ff aedb 	blt.w	800d5aa <__gethex+0x1ea>
 800d7f4:	f04f 0801 	mov.w	r8, #1
 800d7f8:	e7c2      	b.n	800d780 <__gethex+0x3c0>
 800d7fa:	f015 051f 	ands.w	r5, r5, #31
 800d7fe:	d0f9      	beq.n	800d7f4 <__gethex+0x434>
 800d800:	9b01      	ldr	r3, [sp, #4]
 800d802:	441a      	add	r2, r3
 800d804:	f1c5 0520 	rsb	r5, r5, #32
 800d808:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800d80c:	f7fd fe34 	bl	800b478 <__hi0bits>
 800d810:	42a8      	cmp	r0, r5
 800d812:	dbe6      	blt.n	800d7e2 <__gethex+0x422>
 800d814:	e7ee      	b.n	800d7f4 <__gethex+0x434>
 800d816:	bf00      	nop
 800d818:	0800dc11 	.word	0x0800dc11

0800d81c <L_shift>:
 800d81c:	f1c2 0208 	rsb	r2, r2, #8
 800d820:	0092      	lsls	r2, r2, #2
 800d822:	b570      	push	{r4, r5, r6, lr}
 800d824:	f1c2 0620 	rsb	r6, r2, #32
 800d828:	6843      	ldr	r3, [r0, #4]
 800d82a:	6804      	ldr	r4, [r0, #0]
 800d82c:	fa03 f506 	lsl.w	r5, r3, r6
 800d830:	432c      	orrs	r4, r5
 800d832:	40d3      	lsrs	r3, r2
 800d834:	6004      	str	r4, [r0, #0]
 800d836:	f840 3f04 	str.w	r3, [r0, #4]!
 800d83a:	4288      	cmp	r0, r1
 800d83c:	d3f4      	bcc.n	800d828 <L_shift+0xc>
 800d83e:	bd70      	pop	{r4, r5, r6, pc}

0800d840 <__match>:
 800d840:	b530      	push	{r4, r5, lr}
 800d842:	6803      	ldr	r3, [r0, #0]
 800d844:	3301      	adds	r3, #1
 800d846:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d84a:	b914      	cbnz	r4, 800d852 <__match+0x12>
 800d84c:	6003      	str	r3, [r0, #0]
 800d84e:	2001      	movs	r0, #1
 800d850:	bd30      	pop	{r4, r5, pc}
 800d852:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d856:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d85a:	2d19      	cmp	r5, #25
 800d85c:	bf98      	it	ls
 800d85e:	3220      	addls	r2, #32
 800d860:	42a2      	cmp	r2, r4
 800d862:	d0f0      	beq.n	800d846 <__match+0x6>
 800d864:	2000      	movs	r0, #0
 800d866:	e7f3      	b.n	800d850 <__match+0x10>

0800d868 <__hexnan>:
 800d868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d86c:	680b      	ldr	r3, [r1, #0]
 800d86e:	6801      	ldr	r1, [r0, #0]
 800d870:	115e      	asrs	r6, r3, #5
 800d872:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d876:	f013 031f 	ands.w	r3, r3, #31
 800d87a:	b087      	sub	sp, #28
 800d87c:	bf18      	it	ne
 800d87e:	3604      	addne	r6, #4
 800d880:	2500      	movs	r5, #0
 800d882:	1f37      	subs	r7, r6, #4
 800d884:	4682      	mov	sl, r0
 800d886:	4690      	mov	r8, r2
 800d888:	9301      	str	r3, [sp, #4]
 800d88a:	f846 5c04 	str.w	r5, [r6, #-4]
 800d88e:	46b9      	mov	r9, r7
 800d890:	463c      	mov	r4, r7
 800d892:	9502      	str	r5, [sp, #8]
 800d894:	46ab      	mov	fp, r5
 800d896:	784a      	ldrb	r2, [r1, #1]
 800d898:	1c4b      	adds	r3, r1, #1
 800d89a:	9303      	str	r3, [sp, #12]
 800d89c:	b342      	cbz	r2, 800d8f0 <__hexnan+0x88>
 800d89e:	4610      	mov	r0, r2
 800d8a0:	9105      	str	r1, [sp, #20]
 800d8a2:	9204      	str	r2, [sp, #16]
 800d8a4:	f7ff fd76 	bl	800d394 <__hexdig_fun>
 800d8a8:	2800      	cmp	r0, #0
 800d8aa:	d14f      	bne.n	800d94c <__hexnan+0xe4>
 800d8ac:	9a04      	ldr	r2, [sp, #16]
 800d8ae:	9905      	ldr	r1, [sp, #20]
 800d8b0:	2a20      	cmp	r2, #32
 800d8b2:	d818      	bhi.n	800d8e6 <__hexnan+0x7e>
 800d8b4:	9b02      	ldr	r3, [sp, #8]
 800d8b6:	459b      	cmp	fp, r3
 800d8b8:	dd13      	ble.n	800d8e2 <__hexnan+0x7a>
 800d8ba:	454c      	cmp	r4, r9
 800d8bc:	d206      	bcs.n	800d8cc <__hexnan+0x64>
 800d8be:	2d07      	cmp	r5, #7
 800d8c0:	dc04      	bgt.n	800d8cc <__hexnan+0x64>
 800d8c2:	462a      	mov	r2, r5
 800d8c4:	4649      	mov	r1, r9
 800d8c6:	4620      	mov	r0, r4
 800d8c8:	f7ff ffa8 	bl	800d81c <L_shift>
 800d8cc:	4544      	cmp	r4, r8
 800d8ce:	d950      	bls.n	800d972 <__hexnan+0x10a>
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	f1a4 0904 	sub.w	r9, r4, #4
 800d8d6:	f844 3c04 	str.w	r3, [r4, #-4]
 800d8da:	f8cd b008 	str.w	fp, [sp, #8]
 800d8de:	464c      	mov	r4, r9
 800d8e0:	461d      	mov	r5, r3
 800d8e2:	9903      	ldr	r1, [sp, #12]
 800d8e4:	e7d7      	b.n	800d896 <__hexnan+0x2e>
 800d8e6:	2a29      	cmp	r2, #41	; 0x29
 800d8e8:	d155      	bne.n	800d996 <__hexnan+0x12e>
 800d8ea:	3102      	adds	r1, #2
 800d8ec:	f8ca 1000 	str.w	r1, [sl]
 800d8f0:	f1bb 0f00 	cmp.w	fp, #0
 800d8f4:	d04f      	beq.n	800d996 <__hexnan+0x12e>
 800d8f6:	454c      	cmp	r4, r9
 800d8f8:	d206      	bcs.n	800d908 <__hexnan+0xa0>
 800d8fa:	2d07      	cmp	r5, #7
 800d8fc:	dc04      	bgt.n	800d908 <__hexnan+0xa0>
 800d8fe:	462a      	mov	r2, r5
 800d900:	4649      	mov	r1, r9
 800d902:	4620      	mov	r0, r4
 800d904:	f7ff ff8a 	bl	800d81c <L_shift>
 800d908:	4544      	cmp	r4, r8
 800d90a:	d934      	bls.n	800d976 <__hexnan+0x10e>
 800d90c:	f1a8 0204 	sub.w	r2, r8, #4
 800d910:	4623      	mov	r3, r4
 800d912:	f853 1b04 	ldr.w	r1, [r3], #4
 800d916:	f842 1f04 	str.w	r1, [r2, #4]!
 800d91a:	429f      	cmp	r7, r3
 800d91c:	d2f9      	bcs.n	800d912 <__hexnan+0xaa>
 800d91e:	1b3b      	subs	r3, r7, r4
 800d920:	f023 0303 	bic.w	r3, r3, #3
 800d924:	3304      	adds	r3, #4
 800d926:	3e03      	subs	r6, #3
 800d928:	3401      	adds	r4, #1
 800d92a:	42a6      	cmp	r6, r4
 800d92c:	bf38      	it	cc
 800d92e:	2304      	movcc	r3, #4
 800d930:	4443      	add	r3, r8
 800d932:	2200      	movs	r2, #0
 800d934:	f843 2b04 	str.w	r2, [r3], #4
 800d938:	429f      	cmp	r7, r3
 800d93a:	d2fb      	bcs.n	800d934 <__hexnan+0xcc>
 800d93c:	683b      	ldr	r3, [r7, #0]
 800d93e:	b91b      	cbnz	r3, 800d948 <__hexnan+0xe0>
 800d940:	4547      	cmp	r7, r8
 800d942:	d126      	bne.n	800d992 <__hexnan+0x12a>
 800d944:	2301      	movs	r3, #1
 800d946:	603b      	str	r3, [r7, #0]
 800d948:	2005      	movs	r0, #5
 800d94a:	e025      	b.n	800d998 <__hexnan+0x130>
 800d94c:	3501      	adds	r5, #1
 800d94e:	2d08      	cmp	r5, #8
 800d950:	f10b 0b01 	add.w	fp, fp, #1
 800d954:	dd06      	ble.n	800d964 <__hexnan+0xfc>
 800d956:	4544      	cmp	r4, r8
 800d958:	d9c3      	bls.n	800d8e2 <__hexnan+0x7a>
 800d95a:	2300      	movs	r3, #0
 800d95c:	f844 3c04 	str.w	r3, [r4, #-4]
 800d960:	2501      	movs	r5, #1
 800d962:	3c04      	subs	r4, #4
 800d964:	6822      	ldr	r2, [r4, #0]
 800d966:	f000 000f 	and.w	r0, r0, #15
 800d96a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d96e:	6020      	str	r0, [r4, #0]
 800d970:	e7b7      	b.n	800d8e2 <__hexnan+0x7a>
 800d972:	2508      	movs	r5, #8
 800d974:	e7b5      	b.n	800d8e2 <__hexnan+0x7a>
 800d976:	9b01      	ldr	r3, [sp, #4]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d0df      	beq.n	800d93c <__hexnan+0xd4>
 800d97c:	f1c3 0320 	rsb	r3, r3, #32
 800d980:	f04f 32ff 	mov.w	r2, #4294967295
 800d984:	40da      	lsrs	r2, r3
 800d986:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d98a:	4013      	ands	r3, r2
 800d98c:	f846 3c04 	str.w	r3, [r6, #-4]
 800d990:	e7d4      	b.n	800d93c <__hexnan+0xd4>
 800d992:	3f04      	subs	r7, #4
 800d994:	e7d2      	b.n	800d93c <__hexnan+0xd4>
 800d996:	2004      	movs	r0, #4
 800d998:	b007      	add	sp, #28
 800d99a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d99e <__ascii_mbtowc>:
 800d99e:	b082      	sub	sp, #8
 800d9a0:	b901      	cbnz	r1, 800d9a4 <__ascii_mbtowc+0x6>
 800d9a2:	a901      	add	r1, sp, #4
 800d9a4:	b142      	cbz	r2, 800d9b8 <__ascii_mbtowc+0x1a>
 800d9a6:	b14b      	cbz	r3, 800d9bc <__ascii_mbtowc+0x1e>
 800d9a8:	7813      	ldrb	r3, [r2, #0]
 800d9aa:	600b      	str	r3, [r1, #0]
 800d9ac:	7812      	ldrb	r2, [r2, #0]
 800d9ae:	1e10      	subs	r0, r2, #0
 800d9b0:	bf18      	it	ne
 800d9b2:	2001      	movne	r0, #1
 800d9b4:	b002      	add	sp, #8
 800d9b6:	4770      	bx	lr
 800d9b8:	4610      	mov	r0, r2
 800d9ba:	e7fb      	b.n	800d9b4 <__ascii_mbtowc+0x16>
 800d9bc:	f06f 0001 	mvn.w	r0, #1
 800d9c0:	e7f8      	b.n	800d9b4 <__ascii_mbtowc+0x16>

0800d9c2 <_realloc_r>:
 800d9c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9c6:	4680      	mov	r8, r0
 800d9c8:	4614      	mov	r4, r2
 800d9ca:	460e      	mov	r6, r1
 800d9cc:	b921      	cbnz	r1, 800d9d8 <_realloc_r+0x16>
 800d9ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9d2:	4611      	mov	r1, r2
 800d9d4:	f7fd bbd2 	b.w	800b17c <_malloc_r>
 800d9d8:	b92a      	cbnz	r2, 800d9e6 <_realloc_r+0x24>
 800d9da:	f7fd fb5b 	bl	800b094 <_free_r>
 800d9de:	4625      	mov	r5, r4
 800d9e0:	4628      	mov	r0, r5
 800d9e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9e6:	f000 f842 	bl	800da6e <_malloc_usable_size_r>
 800d9ea:	4284      	cmp	r4, r0
 800d9ec:	4607      	mov	r7, r0
 800d9ee:	d802      	bhi.n	800d9f6 <_realloc_r+0x34>
 800d9f0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d9f4:	d812      	bhi.n	800da1c <_realloc_r+0x5a>
 800d9f6:	4621      	mov	r1, r4
 800d9f8:	4640      	mov	r0, r8
 800d9fa:	f7fd fbbf 	bl	800b17c <_malloc_r>
 800d9fe:	4605      	mov	r5, r0
 800da00:	2800      	cmp	r0, #0
 800da02:	d0ed      	beq.n	800d9e0 <_realloc_r+0x1e>
 800da04:	42bc      	cmp	r4, r7
 800da06:	4622      	mov	r2, r4
 800da08:	4631      	mov	r1, r6
 800da0a:	bf28      	it	cs
 800da0c:	463a      	movcs	r2, r7
 800da0e:	f7ff fc25 	bl	800d25c <memcpy>
 800da12:	4631      	mov	r1, r6
 800da14:	4640      	mov	r0, r8
 800da16:	f7fd fb3d 	bl	800b094 <_free_r>
 800da1a:	e7e1      	b.n	800d9e0 <_realloc_r+0x1e>
 800da1c:	4635      	mov	r5, r6
 800da1e:	e7df      	b.n	800d9e0 <_realloc_r+0x1e>

0800da20 <__ascii_wctomb>:
 800da20:	b149      	cbz	r1, 800da36 <__ascii_wctomb+0x16>
 800da22:	2aff      	cmp	r2, #255	; 0xff
 800da24:	bf85      	ittet	hi
 800da26:	238a      	movhi	r3, #138	; 0x8a
 800da28:	6003      	strhi	r3, [r0, #0]
 800da2a:	700a      	strbls	r2, [r1, #0]
 800da2c:	f04f 30ff 	movhi.w	r0, #4294967295
 800da30:	bf98      	it	ls
 800da32:	2001      	movls	r0, #1
 800da34:	4770      	bx	lr
 800da36:	4608      	mov	r0, r1
 800da38:	4770      	bx	lr
	...

0800da3c <fiprintf>:
 800da3c:	b40e      	push	{r1, r2, r3}
 800da3e:	b503      	push	{r0, r1, lr}
 800da40:	4601      	mov	r1, r0
 800da42:	ab03      	add	r3, sp, #12
 800da44:	4805      	ldr	r0, [pc, #20]	; (800da5c <fiprintf+0x20>)
 800da46:	f853 2b04 	ldr.w	r2, [r3], #4
 800da4a:	6800      	ldr	r0, [r0, #0]
 800da4c:	9301      	str	r3, [sp, #4]
 800da4e:	f7ff f8e7 	bl	800cc20 <_vfiprintf_r>
 800da52:	b002      	add	sp, #8
 800da54:	f85d eb04 	ldr.w	lr, [sp], #4
 800da58:	b003      	add	sp, #12
 800da5a:	4770      	bx	lr
 800da5c:	2000006c 	.word	0x2000006c

0800da60 <abort>:
 800da60:	b508      	push	{r3, lr}
 800da62:	2006      	movs	r0, #6
 800da64:	f000 f834 	bl	800dad0 <raise>
 800da68:	2001      	movs	r0, #1
 800da6a:	f7f5 fed7 	bl	800381c <_exit>

0800da6e <_malloc_usable_size_r>:
 800da6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da72:	1f18      	subs	r0, r3, #4
 800da74:	2b00      	cmp	r3, #0
 800da76:	bfbc      	itt	lt
 800da78:	580b      	ldrlt	r3, [r1, r0]
 800da7a:	18c0      	addlt	r0, r0, r3
 800da7c:	4770      	bx	lr

0800da7e <_raise_r>:
 800da7e:	291f      	cmp	r1, #31
 800da80:	b538      	push	{r3, r4, r5, lr}
 800da82:	4604      	mov	r4, r0
 800da84:	460d      	mov	r5, r1
 800da86:	d904      	bls.n	800da92 <_raise_r+0x14>
 800da88:	2316      	movs	r3, #22
 800da8a:	6003      	str	r3, [r0, #0]
 800da8c:	f04f 30ff 	mov.w	r0, #4294967295
 800da90:	bd38      	pop	{r3, r4, r5, pc}
 800da92:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800da94:	b112      	cbz	r2, 800da9c <_raise_r+0x1e>
 800da96:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800da9a:	b94b      	cbnz	r3, 800dab0 <_raise_r+0x32>
 800da9c:	4620      	mov	r0, r4
 800da9e:	f000 f831 	bl	800db04 <_getpid_r>
 800daa2:	462a      	mov	r2, r5
 800daa4:	4601      	mov	r1, r0
 800daa6:	4620      	mov	r0, r4
 800daa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800daac:	f000 b818 	b.w	800dae0 <_kill_r>
 800dab0:	2b01      	cmp	r3, #1
 800dab2:	d00a      	beq.n	800daca <_raise_r+0x4c>
 800dab4:	1c59      	adds	r1, r3, #1
 800dab6:	d103      	bne.n	800dac0 <_raise_r+0x42>
 800dab8:	2316      	movs	r3, #22
 800daba:	6003      	str	r3, [r0, #0]
 800dabc:	2001      	movs	r0, #1
 800dabe:	e7e7      	b.n	800da90 <_raise_r+0x12>
 800dac0:	2400      	movs	r4, #0
 800dac2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dac6:	4628      	mov	r0, r5
 800dac8:	4798      	blx	r3
 800daca:	2000      	movs	r0, #0
 800dacc:	e7e0      	b.n	800da90 <_raise_r+0x12>
	...

0800dad0 <raise>:
 800dad0:	4b02      	ldr	r3, [pc, #8]	; (800dadc <raise+0xc>)
 800dad2:	4601      	mov	r1, r0
 800dad4:	6818      	ldr	r0, [r3, #0]
 800dad6:	f7ff bfd2 	b.w	800da7e <_raise_r>
 800dada:	bf00      	nop
 800dadc:	2000006c 	.word	0x2000006c

0800dae0 <_kill_r>:
 800dae0:	b538      	push	{r3, r4, r5, lr}
 800dae2:	4d07      	ldr	r5, [pc, #28]	; (800db00 <_kill_r+0x20>)
 800dae4:	2300      	movs	r3, #0
 800dae6:	4604      	mov	r4, r0
 800dae8:	4608      	mov	r0, r1
 800daea:	4611      	mov	r1, r2
 800daec:	602b      	str	r3, [r5, #0]
 800daee:	f7f5 fe85 	bl	80037fc <_kill>
 800daf2:	1c43      	adds	r3, r0, #1
 800daf4:	d102      	bne.n	800dafc <_kill_r+0x1c>
 800daf6:	682b      	ldr	r3, [r5, #0]
 800daf8:	b103      	cbz	r3, 800dafc <_kill_r+0x1c>
 800dafa:	6023      	str	r3, [r4, #0]
 800dafc:	bd38      	pop	{r3, r4, r5, pc}
 800dafe:	bf00      	nop
 800db00:	20001008 	.word	0x20001008

0800db04 <_getpid_r>:
 800db04:	f7f5 be72 	b.w	80037ec <_getpid>

0800db08 <_init>:
 800db08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db0a:	bf00      	nop
 800db0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db0e:	bc08      	pop	{r3}
 800db10:	469e      	mov	lr, r3
 800db12:	4770      	bx	lr

0800db14 <_fini>:
 800db14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db16:	bf00      	nop
 800db18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db1a:	bc08      	pop	{r3}
 800db1c:	469e      	mov	lr, r3
 800db1e:	4770      	bx	lr
