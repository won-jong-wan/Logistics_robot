
1_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bafc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  0800bcb0  0800bcb0  0001bcb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c064  0800c064  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c064  0800c064  0001c064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c06c  0800c06c  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c06c  0800c06c  0001c06c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c070  0800c070  0001c070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800c074  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d8  2**0
                  CONTENTS
 10 .bss          00000e28  200001d8  200001d8  000201d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20001000  20001000  000201d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 14 .debug_info   00019fe0  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000306f  00000000  00000000  0003a22b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001488  00000000  00000000  0003d2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001350  00000000  00000000  0003e728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00028480  00000000  00000000  0003fa78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00018f0e  00000000  00000000  00067ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f263d  00000000  00000000  00080e06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006988  00000000  00000000  00173444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800bc94 	.word	0x0800bc94

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	0800bc94 	.word	0x0800bc94

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b970 	b.w	8000fa0 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	460d      	mov	r5, r1
 8000ce0:	4604      	mov	r4, r0
 8000ce2:	460f      	mov	r7, r1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d14a      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce8:	428a      	cmp	r2, r1
 8000cea:	4694      	mov	ip, r2
 8000cec:	d965      	bls.n	8000dba <__udivmoddi4+0xe2>
 8000cee:	fab2 f382 	clz	r3, r2
 8000cf2:	b143      	cbz	r3, 8000d06 <__udivmoddi4+0x2e>
 8000cf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cf8:	f1c3 0220 	rsb	r2, r3, #32
 8000cfc:	409f      	lsls	r7, r3
 8000cfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000d02:	4317      	orrs	r7, r2
 8000d04:	409c      	lsls	r4, r3
 8000d06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d0a:	fa1f f58c 	uxth.w	r5, ip
 8000d0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d12:	0c22      	lsrs	r2, r4, #16
 8000d14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d1c:	fb01 f005 	mul.w	r0, r1, r5
 8000d20:	4290      	cmp	r0, r2
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x62>
 8000d24:	eb1c 0202 	adds.w	r2, ip, r2
 8000d28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d2c:	f080 811c 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d30:	4290      	cmp	r0, r2
 8000d32:	f240 8119 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d36:	3902      	subs	r1, #2
 8000d38:	4462      	add	r2, ip
 8000d3a:	1a12      	subs	r2, r2, r0
 8000d3c:	b2a4      	uxth	r4, r4
 8000d3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4a:	fb00 f505 	mul.w	r5, r0, r5
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	d90a      	bls.n	8000d68 <__udivmoddi4+0x90>
 8000d52:	eb1c 0404 	adds.w	r4, ip, r4
 8000d56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d5a:	f080 8107 	bcs.w	8000f6c <__udivmoddi4+0x294>
 8000d5e:	42a5      	cmp	r5, r4
 8000d60:	f240 8104 	bls.w	8000f6c <__udivmoddi4+0x294>
 8000d64:	4464      	add	r4, ip
 8000d66:	3802      	subs	r0, #2
 8000d68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d6c:	1b64      	subs	r4, r4, r5
 8000d6e:	2100      	movs	r1, #0
 8000d70:	b11e      	cbz	r6, 8000d7a <__udivmoddi4+0xa2>
 8000d72:	40dc      	lsrs	r4, r3
 8000d74:	2300      	movs	r3, #0
 8000d76:	e9c6 4300 	strd	r4, r3, [r6]
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0xbc>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80ed 	beq.w	8000f62 <__udivmoddi4+0x28a>
 8000d88:	2100      	movs	r1, #0
 8000d8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d8e:	4608      	mov	r0, r1
 8000d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d94:	fab3 f183 	clz	r1, r3
 8000d98:	2900      	cmp	r1, #0
 8000d9a:	d149      	bne.n	8000e30 <__udivmoddi4+0x158>
 8000d9c:	42ab      	cmp	r3, r5
 8000d9e:	d302      	bcc.n	8000da6 <__udivmoddi4+0xce>
 8000da0:	4282      	cmp	r2, r0
 8000da2:	f200 80f8 	bhi.w	8000f96 <__udivmoddi4+0x2be>
 8000da6:	1a84      	subs	r4, r0, r2
 8000da8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dac:	2001      	movs	r0, #1
 8000dae:	4617      	mov	r7, r2
 8000db0:	2e00      	cmp	r6, #0
 8000db2:	d0e2      	beq.n	8000d7a <__udivmoddi4+0xa2>
 8000db4:	e9c6 4700 	strd	r4, r7, [r6]
 8000db8:	e7df      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000dba:	b902      	cbnz	r2, 8000dbe <__udivmoddi4+0xe6>
 8000dbc:	deff      	udf	#255	; 0xff
 8000dbe:	fab2 f382 	clz	r3, r2
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	f040 8090 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dc8:	1a8a      	subs	r2, r1, r2
 8000dca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dce:	fa1f fe8c 	uxth.w	lr, ip
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000ddc:	0c22      	lsrs	r2, r4, #16
 8000dde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000de2:	fb0e f005 	mul.w	r0, lr, r5
 8000de6:	4290      	cmp	r0, r2
 8000de8:	d908      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dea:	eb1c 0202 	adds.w	r2, ip, r2
 8000dee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4290      	cmp	r0, r2
 8000df6:	f200 80cb 	bhi.w	8000f90 <__udivmoddi4+0x2b8>
 8000dfa:	4645      	mov	r5, r8
 8000dfc:	1a12      	subs	r2, r2, r0
 8000dfe:	b2a4      	uxth	r4, r4
 8000e00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e04:	fb07 2210 	mls	r2, r7, r0, r2
 8000e08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e10:	45a6      	cmp	lr, r4
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x14e>
 8000e14:	eb1c 0404 	adds.w	r4, ip, r4
 8000e18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e1c:	d202      	bcs.n	8000e24 <__udivmoddi4+0x14c>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f200 80bb 	bhi.w	8000f9a <__udivmoddi4+0x2c2>
 8000e24:	4610      	mov	r0, r2
 8000e26:	eba4 040e 	sub.w	r4, r4, lr
 8000e2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e2e:	e79f      	b.n	8000d70 <__udivmoddi4+0x98>
 8000e30:	f1c1 0720 	rsb	r7, r1, #32
 8000e34:	408b      	lsls	r3, r1
 8000e36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e42:	fa20 f307 	lsr.w	r3, r0, r7
 8000e46:	40fd      	lsrs	r5, r7
 8000e48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e4c:	4323      	orrs	r3, r4
 8000e4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	fb09 5518 	mls	r5, r9, r8, r5
 8000e5a:	0c1c      	lsrs	r4, r3, #16
 8000e5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e60:	fb08 f50e 	mul.w	r5, r8, lr
 8000e64:	42a5      	cmp	r5, r4
 8000e66:	fa02 f201 	lsl.w	r2, r2, r1
 8000e6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e78:	f080 8088 	bcs.w	8000f8c <__udivmoddi4+0x2b4>
 8000e7c:	42a5      	cmp	r5, r4
 8000e7e:	f240 8085 	bls.w	8000f8c <__udivmoddi4+0x2b4>
 8000e82:	f1a8 0802 	sub.w	r8, r8, #2
 8000e86:	4464      	add	r4, ip
 8000e88:	1b64      	subs	r4, r4, r5
 8000e8a:	b29d      	uxth	r5, r3
 8000e8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e90:	fb09 4413 	mls	r4, r9, r3, r4
 8000e94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ea8:	d26c      	bcs.n	8000f84 <__udivmoddi4+0x2ac>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	d96a      	bls.n	8000f84 <__udivmoddi4+0x2ac>
 8000eae:	3b02      	subs	r3, #2
 8000eb0:	4464      	add	r4, ip
 8000eb2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000eb6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	42ac      	cmp	r4, r5
 8000ec0:	46c8      	mov	r8, r9
 8000ec2:	46ae      	mov	lr, r5
 8000ec4:	d356      	bcc.n	8000f74 <__udivmoddi4+0x29c>
 8000ec6:	d053      	beq.n	8000f70 <__udivmoddi4+0x298>
 8000ec8:	b156      	cbz	r6, 8000ee0 <__udivmoddi4+0x208>
 8000eca:	ebb0 0208 	subs.w	r2, r0, r8
 8000ece:	eb64 040e 	sbc.w	r4, r4, lr
 8000ed2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ed6:	40ca      	lsrs	r2, r1
 8000ed8:	40cc      	lsrs	r4, r1
 8000eda:	4317      	orrs	r7, r2
 8000edc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee8:	f1c3 0120 	rsb	r1, r3, #32
 8000eec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ef0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ef4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ef8:	409d      	lsls	r5, r3
 8000efa:	432a      	orrs	r2, r5
 8000efc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f00:	fa1f fe8c 	uxth.w	lr, ip
 8000f04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f08:	fb07 1510 	mls	r5, r7, r0, r1
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f12:	fb00 f50e 	mul.w	r5, r0, lr
 8000f16:	428d      	cmp	r5, r1
 8000f18:	fa04 f403 	lsl.w	r4, r4, r3
 8000f1c:	d908      	bls.n	8000f30 <__udivmoddi4+0x258>
 8000f1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f26:	d22f      	bcs.n	8000f88 <__udivmoddi4+0x2b0>
 8000f28:	428d      	cmp	r5, r1
 8000f2a:	d92d      	bls.n	8000f88 <__udivmoddi4+0x2b0>
 8000f2c:	3802      	subs	r0, #2
 8000f2e:	4461      	add	r1, ip
 8000f30:	1b49      	subs	r1, r1, r5
 8000f32:	b292      	uxth	r2, r2
 8000f34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f38:	fb07 1115 	mls	r1, r7, r5, r1
 8000f3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f40:	fb05 f10e 	mul.w	r1, r5, lr
 8000f44:	4291      	cmp	r1, r2
 8000f46:	d908      	bls.n	8000f5a <__udivmoddi4+0x282>
 8000f48:	eb1c 0202 	adds.w	r2, ip, r2
 8000f4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f50:	d216      	bcs.n	8000f80 <__udivmoddi4+0x2a8>
 8000f52:	4291      	cmp	r1, r2
 8000f54:	d914      	bls.n	8000f80 <__udivmoddi4+0x2a8>
 8000f56:	3d02      	subs	r5, #2
 8000f58:	4462      	add	r2, ip
 8000f5a:	1a52      	subs	r2, r2, r1
 8000f5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f60:	e738      	b.n	8000dd4 <__udivmoddi4+0xfc>
 8000f62:	4631      	mov	r1, r6
 8000f64:	4630      	mov	r0, r6
 8000f66:	e708      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000f68:	4639      	mov	r1, r7
 8000f6a:	e6e6      	b.n	8000d3a <__udivmoddi4+0x62>
 8000f6c:	4610      	mov	r0, r2
 8000f6e:	e6fb      	b.n	8000d68 <__udivmoddi4+0x90>
 8000f70:	4548      	cmp	r0, r9
 8000f72:	d2a9      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f74:	ebb9 0802 	subs.w	r8, r9, r2
 8000f78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	e7a3      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f80:	4645      	mov	r5, r8
 8000f82:	e7ea      	b.n	8000f5a <__udivmoddi4+0x282>
 8000f84:	462b      	mov	r3, r5
 8000f86:	e794      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f88:	4640      	mov	r0, r8
 8000f8a:	e7d1      	b.n	8000f30 <__udivmoddi4+0x258>
 8000f8c:	46d0      	mov	r8, sl
 8000f8e:	e77b      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f90:	3d02      	subs	r5, #2
 8000f92:	4462      	add	r2, ip
 8000f94:	e732      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f96:	4608      	mov	r0, r1
 8000f98:	e70a      	b.n	8000db0 <__udivmoddi4+0xd8>
 8000f9a:	4464      	add	r4, ip
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	e742      	b.n	8000e26 <__udivmoddi4+0x14e>

08000fa0 <__aeabi_idiv0>:
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <_write>:
{
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
  return ch;
}

int _write(int file, char* p, int len){        //테라텀
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, p, len, 10);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	230a      	movs	r3, #10
 8000fb6:	68b9      	ldr	r1, [r7, #8]
 8000fb8:	4803      	ldr	r0, [pc, #12]	; (8000fc8 <_write+0x24>)
 8000fba:	f006 fccb 	bl	8007954 <HAL_UART_Transmit>
	return len;
 8000fbe:	687b      	ldr	r3, [r7, #4]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000304 	.word	0x20000304

08000fcc <SerialSendChar_WIFI>:
	while((USART3->SR & 1<<7) == RESET);
	USART3->DR = (Ch1 & 0x01FF);	// 전송 (최대 9bit 이므로 0x01FF과 masking)
}

void SerialSendChar_WIFI(uint8_t Ch2) // 1문자 보내기 함수
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
	while((UART4->SR & 1<<7) == RESET);
 8000fd6:	bf00      	nop
 8000fd8:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <SerialSendChar_WIFI+0x2c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d0f9      	beq.n	8000fd8 <SerialSendChar_WIFI+0xc>
	UART4->DR = (Ch2 & 0x01FF);
 8000fe4:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <SerialSendChar_WIFI+0x2c>)
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	6053      	str	r3, [r2, #4]
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	40004c00 	.word	0x40004c00

08000ffc <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	encoder_count=TIM4->CNT;
 8001004:	4ba6      	ldr	r3, [pc, #664]	; (80012a0 <HAL_UART_RxCpltCallback+0x2a4>)
 8001006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001008:	4aa6      	ldr	r2, [pc, #664]	; (80012a4 <HAL_UART_RxCpltCallback+0x2a8>)
 800100a:	6013      	str	r3, [r2, #0]

  if(huart->Instance == USART3)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4aa5      	ldr	r2, [pc, #660]	; (80012a8 <HAL_UART_RxCpltCallback+0x2ac>)
 8001012:	4293      	cmp	r3, r2
 8001014:	f040 816b 	bne.w	80012ee <HAL_UART_RxCpltCallback+0x2f2>
  {

	  HAL_UART_Receive_IT(&huart3, &key_value, 1);
 8001018:	2201      	movs	r2, #1
 800101a:	49a4      	ldr	r1, [pc, #656]	; (80012ac <HAL_UART_RxCpltCallback+0x2b0>)
 800101c:	48a4      	ldr	r0, [pc, #656]	; (80012b0 <HAL_UART_RxCpltCallback+0x2b4>)
 800101e:	f006 fd24 	bl	8007a6a <HAL_UART_Receive_IT>
	  printf("%d,^^ %c \r\n", key_value,key_value);
 8001022:	4ba2      	ldr	r3, [pc, #648]	; (80012ac <HAL_UART_RxCpltCallback+0x2b0>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	4619      	mov	r1, r3
 8001028:	4ba0      	ldr	r3, [pc, #640]	; (80012ac <HAL_UART_RxCpltCallback+0x2b0>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	461a      	mov	r2, r3
 800102e:	48a1      	ldr	r0, [pc, #644]	; (80012b4 <HAL_UART_RxCpltCallback+0x2b8>)
 8001030:	f008 fcbe 	bl	80099b0 <iprintf>

	  switch(key_value)
 8001034:	4b9d      	ldr	r3, [pc, #628]	; (80012ac <HAL_UART_RxCpltCallback+0x2b0>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	3b31      	subs	r3, #49	; 0x31
 800103a:	2b49      	cmp	r3, #73	; 0x49
 800103c:	f200 8157 	bhi.w	80012ee <HAL_UART_RxCpltCallback+0x2f2>
 8001040:	a201      	add	r2, pc, #4	; (adr r2, 8001048 <HAL_UART_RxCpltCallback+0x4c>)
 8001042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001046:	bf00      	nop
 8001048:	080011a5 	.word	0x080011a5
 800104c:	080011b3 	.word	0x080011b3
 8001050:	080011c1 	.word	0x080011c1
 8001054:	080011c9 	.word	0x080011c9
 8001058:	080011d1 	.word	0x080011d1
 800105c:	080011db 	.word	0x080011db
 8001060:	080011e5 	.word	0x080011e5
 8001064:	080012ef 	.word	0x080012ef
 8001068:	080012ef 	.word	0x080012ef
 800106c:	080012ef 	.word	0x080012ef
 8001070:	080012ef 	.word	0x080012ef
 8001074:	080012ef 	.word	0x080012ef
 8001078:	080012ef 	.word	0x080012ef
 800107c:	080012ef 	.word	0x080012ef
 8001080:	080012ef 	.word	0x080012ef
 8001084:	080012ef 	.word	0x080012ef
 8001088:	080012ef 	.word	0x080012ef
 800108c:	080012ef 	.word	0x080012ef
 8001090:	080012ef 	.word	0x080012ef
 8001094:	080012ef 	.word	0x080012ef
 8001098:	080012ef 	.word	0x080012ef
 800109c:	080012ef 	.word	0x080012ef
 80010a0:	080012ef 	.word	0x080012ef
 80010a4:	080012ef 	.word	0x080012ef
 80010a8:	080012ef 	.word	0x080012ef
 80010ac:	080012ef 	.word	0x080012ef
 80010b0:	080012ef 	.word	0x080012ef
 80010b4:	080012ef 	.word	0x080012ef
 80010b8:	080012ef 	.word	0x080012ef
 80010bc:	080012ef 	.word	0x080012ef
 80010c0:	080012ef 	.word	0x080012ef
 80010c4:	080012ef 	.word	0x080012ef
 80010c8:	080012ef 	.word	0x080012ef
 80010cc:	080012ef 	.word	0x080012ef
 80010d0:	080012ef 	.word	0x080012ef
 80010d4:	080012ef 	.word	0x080012ef
 80010d8:	080012ef 	.word	0x080012ef
 80010dc:	080012ef 	.word	0x080012ef
 80010e0:	080012ef 	.word	0x080012ef
 80010e4:	080012ef 	.word	0x080012ef
 80010e8:	080012ef 	.word	0x080012ef
 80010ec:	080012ef 	.word	0x080012ef
 80010f0:	080012ef 	.word	0x080012ef
 80010f4:	080012ef 	.word	0x080012ef
 80010f8:	080012ef 	.word	0x080012ef
 80010fc:	080012ef 	.word	0x080012ef
 8001100:	080012ef 	.word	0x080012ef
 8001104:	080012ef 	.word	0x080012ef
 8001108:	080011ef 	.word	0x080011ef
 800110c:	080012ef 	.word	0x080012ef
 8001110:	080012ef 	.word	0x080012ef
 8001114:	08001207 	.word	0x08001207
 8001118:	080012ef 	.word	0x080012ef
 800111c:	0800120f 	.word	0x0800120f
 8001120:	080012ef 	.word	0x080012ef
 8001124:	080012ef 	.word	0x080012ef
 8001128:	08001253 	.word	0x08001253
 800112c:	080012ef 	.word	0x080012ef
 8001130:	080012ef 	.word	0x080012ef
 8001134:	080012ef 	.word	0x080012ef
 8001138:	080012ef 	.word	0x080012ef
 800113c:	080012ef 	.word	0x080012ef
 8001140:	0800126d 	.word	0x0800126d
 8001144:	08001287 	.word	0x08001287
 8001148:	08001171 	.word	0x08001171
 800114c:	080012ef 	.word	0x080012ef
 8001150:	080011ff 	.word	0x080011ff
 8001154:	080012ef 	.word	0x080012ef
 8001158:	08001233 	.word	0x08001233
 800115c:	080012ef 	.word	0x080012ef
 8001160:	0800118b 	.word	0x0800118b
 8001164:	0800121f 	.word	0x0800121f
 8001168:	080012ef 	.word	0x080012ef
 800116c:	08001217 	.word	0x08001217
	  	{
	  		case 'q':  // forward
	  			GPIOE->ODR |= 1<<0;  // back
 8001170:	4b51      	ldr	r3, [pc, #324]	; (80012b8 <HAL_UART_RxCpltCallback+0x2bc>)
 8001172:	695b      	ldr	r3, [r3, #20]
 8001174:	4a50      	ldr	r2, [pc, #320]	; (80012b8 <HAL_UART_RxCpltCallback+0x2bc>)
 8001176:	f043 0301 	orr.w	r3, r3, #1
 800117a:	6153      	str	r3, [r2, #20]
	  	  	 	GPIOB->ODR |= 1<<0;  //LD1
 800117c:	4b4f      	ldr	r3, [pc, #316]	; (80012bc <HAL_UART_RxCpltCallback+0x2c0>)
 800117e:	695b      	ldr	r3, [r3, #20]
 8001180:	4a4e      	ldr	r2, [pc, #312]	; (80012bc <HAL_UART_RxCpltCallback+0x2c0>)
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	6153      	str	r3, [r2, #20]

	  			break;
 8001188:	e0b1      	b.n	80012ee <HAL_UART_RxCpltCallback+0x2f2>

	  		case 'w':  // back
	  			GPIOE->ODR &= ~1<<0;  // go
 800118a:	4b4b      	ldr	r3, [pc, #300]	; (80012b8 <HAL_UART_RxCpltCallback+0x2bc>)
 800118c:	695b      	ldr	r3, [r3, #20]
 800118e:	4a4a      	ldr	r2, [pc, #296]	; (80012b8 <HAL_UART_RxCpltCallback+0x2bc>)
 8001190:	f023 0301 	bic.w	r3, r3, #1
 8001194:	6153      	str	r3, [r2, #20]
	  		    GPIOB->ODR &= ~1<<0;  //LD1
 8001196:	4b49      	ldr	r3, [pc, #292]	; (80012bc <HAL_UART_RxCpltCallback+0x2c0>)
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	4a48      	ldr	r2, [pc, #288]	; (80012bc <HAL_UART_RxCpltCallback+0x2c0>)
 800119c:	f023 0301 	bic.w	r3, r3, #1
 80011a0:	6153      	str	r3, [r2, #20]

	  			break;
 80011a2:	e0a4      	b.n	80012ee <HAL_UART_RxCpltCallback+0x2f2>

	  		case '1':
	  			GPIOG->ODR |= 1<<0;  //stop
 80011a4:	4b46      	ldr	r3, [pc, #280]	; (80012c0 <HAL_UART_RxCpltCallback+0x2c4>)
 80011a6:	695b      	ldr	r3, [r3, #20]
 80011a8:	4a45      	ldr	r2, [pc, #276]	; (80012c0 <HAL_UART_RxCpltCallback+0x2c4>)
 80011aa:	f043 0301 	orr.w	r3, r3, #1
 80011ae:	6153      	str	r3, [r2, #20]

	  			break;
 80011b0:	e09d      	b.n	80012ee <HAL_UART_RxCpltCallback+0x2f2>

	  		case '2':
	  			  GPIOG->ODR &= ~1<<0;  //start
 80011b2:	4b43      	ldr	r3, [pc, #268]	; (80012c0 <HAL_UART_RxCpltCallback+0x2c4>)
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	4a42      	ldr	r2, [pc, #264]	; (80012c0 <HAL_UART_RxCpltCallback+0x2c4>)
 80011b8:	f023 0301 	bic.w	r3, r3, #1
 80011bc:	6153      	str	r3, [r2, #20]

	  			break;
 80011be:	e096      	b.n	80012ee <HAL_UART_RxCpltCallback+0x2f2>

	  		case '3':
	  			TIM3->CCR1 = 50;
 80011c0:	4b40      	ldr	r3, [pc, #256]	; (80012c4 <HAL_UART_RxCpltCallback+0x2c8>)
 80011c2:	2232      	movs	r2, #50	; 0x32
 80011c4:	635a      	str	r2, [r3, #52]	; 0x34
	  		//	TIM3->CCR2 = 50;

	  			break;
 80011c6:	e092      	b.n	80012ee <HAL_UART_RxCpltCallback+0x2f2>

	  		case '4':
	  			TIM3->CCR1 = 100;
 80011c8:	4b3e      	ldr	r3, [pc, #248]	; (80012c4 <HAL_UART_RxCpltCallback+0x2c8>)
 80011ca:	2264      	movs	r2, #100	; 0x64
 80011cc:	635a      	str	r2, [r3, #52]	; 0x34
	  	  		//	TIM3->CCR2 = 100;

	  			break;
 80011ce:	e08e      	b.n	80012ee <HAL_UART_RxCpltCallback+0x2f2>

	  		case '5':
	  			TIM3->CCR1 = 500;
 80011d0:	4b3c      	ldr	r3, [pc, #240]	; (80012c4 <HAL_UART_RxCpltCallback+0x2c8>)
 80011d2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80011d6:	635a      	str	r2, [r3, #52]	; 0x34
	  	  	  	//	TIM3->CCR2 = 500;

	  			break;
 80011d8:	e089      	b.n	80012ee <HAL_UART_RxCpltCallback+0x2f2>

	  		case '6':
	  			TIM3->CCR1 = 800;
 80011da:	4b3a      	ldr	r3, [pc, #232]	; (80012c4 <HAL_UART_RxCpltCallback+0x2c8>)
 80011dc:	f44f 7248 	mov.w	r2, #800	; 0x320
 80011e0:	635a      	str	r2, [r3, #52]	; 0x34
	  	  	  	//	TIM3->CCR2 = 800;
	  			break;
 80011e2:	e084      	b.n	80012ee <HAL_UART_RxCpltCallback+0x2f2>

	  		case '7':
	  			TIM3->CCR1 = 1000;
 80011e4:	4b37      	ldr	r3, [pc, #220]	; (80012c4 <HAL_UART_RxCpltCallback+0x2c8>)
 80011e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011ea:	635a      	str	r2, [r3, #52]	; 0x34
	  	  	//  		TIM3->CCR2 = 1000;

	  			break;
 80011ec:	e07f      	b.n	80012ee <HAL_UART_RxCpltCallback+0x2f2>

	  		case 'a':
	  			  TIM4->CNT=10000;
 80011ee:	4b2c      	ldr	r3, [pc, #176]	; (80012a0 <HAL_UART_RxCpltCallback+0x2a4>)
 80011f0:	f242 7210 	movw	r2, #10000	; 0x2710
 80011f4:	625a      	str	r2, [r3, #36]	; 0x24

	  		  key_flag=1;
 80011f6:	4b34      	ldr	r3, [pc, #208]	; (80012c8 <HAL_UART_RxCpltCallback+0x2cc>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	701a      	strb	r2, [r3, #0]

	  			break;
 80011fc:	e077      	b.n	80012ee <HAL_UART_RxCpltCallback+0x2f2>

	  		case 's':
	  			 speed_input=(2*M_PI/60)*10;
 80011fe:	4b33      	ldr	r3, [pc, #204]	; (80012cc <HAL_UART_RxCpltCallback+0x2d0>)
 8001200:	4a33      	ldr	r2, [pc, #204]	; (80012d0 <HAL_UART_RxCpltCallback+0x2d4>)
 8001202:	601a      	str	r2, [r3, #0]
	  			break;
 8001204:	e073      	b.n	80012ee <HAL_UART_RxCpltCallback+0x2f2>

	  		case 'd':
	  			 speed_input=(2*M_PI/60)*30;
 8001206:	4b31      	ldr	r3, [pc, #196]	; (80012cc <HAL_UART_RxCpltCallback+0x2d0>)
 8001208:	4a32      	ldr	r2, [pc, #200]	; (80012d4 <HAL_UART_RxCpltCallback+0x2d8>)
 800120a:	601a      	str	r2, [r3, #0]
	  			break;
 800120c:	e06f      	b.n	80012ee <HAL_UART_RxCpltCallback+0x2f2>

	  		case 'f':
	  			 speed_input=(2*M_PI/60)*50;
 800120e:	4b2f      	ldr	r3, [pc, #188]	; (80012cc <HAL_UART_RxCpltCallback+0x2d0>)
 8001210:	4a31      	ldr	r2, [pc, #196]	; (80012d8 <HAL_UART_RxCpltCallback+0x2dc>)
 8001212:	601a      	str	r2, [r3, #0]
	  			break;
 8001214:	e06b      	b.n	80012ee <HAL_UART_RxCpltCallback+0x2f2>

	  		case 'z':

	  			speed_input=10*2*M_PI/60;
 8001216:	4b2d      	ldr	r3, [pc, #180]	; (80012cc <HAL_UART_RxCpltCallback+0x2d0>)
 8001218:	4a2d      	ldr	r2, [pc, #180]	; (80012d0 <HAL_UART_RxCpltCallback+0x2d4>)
 800121a:	601a      	str	r2, [r3, #0]
	  	  	  //[%]

	  	  	//  	TIM3->CCR1 = 1000*duty/100;
	  	  	//  		TIM3->CCR2 = 1000*duty/100;

	  			break;
 800121c:	e067      	b.n	80012ee <HAL_UART_RxCpltCallback+0x2f2>

	  		case 'x':
	  			GPIOB->ODR &= ~1<<0;
 800121e:	4b27      	ldr	r3, [pc, #156]	; (80012bc <HAL_UART_RxCpltCallback+0x2c0>)
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	4a26      	ldr	r2, [pc, #152]	; (80012bc <HAL_UART_RxCpltCallback+0x2c0>)
 8001224:	f023 0301 	bic.w	r3, r3, #1
 8001228:	6153      	str	r3, [r2, #20]


	  	  	  	   speed_input=45*2*M_PI/60;
 800122a:	4b28      	ldr	r3, [pc, #160]	; (80012cc <HAL_UART_RxCpltCallback+0x2d0>)
 800122c:	4a2b      	ldr	r2, [pc, #172]	; (80012dc <HAL_UART_RxCpltCallback+0x2e0>)
 800122e:	601a      	str	r2, [r3, #0]
	  	 //		  duty = 2.0881*pow(x,6) - 36.163*pow(x,5) + 248.4*pow(x,4) - 851.05*pow(x,3) + 1486.5*pow(x,2) - 1164.9*x + 249.29;
	  	  	  		 	  //[%]
	  	  	//	  TIM3->CCR1 = 1000*duty/100;
	  	  	//		  	TIM3->CCR2 = 1000*duty/100;

	  			break;
 8001230:	e05d      	b.n	80012ee <HAL_UART_RxCpltCallback+0x2f2>
	  		case 'u':
	  			if(position_start==0)
 8001232:	4b2b      	ldr	r3, [pc, #172]	; (80012e0 <HAL_UART_RxCpltCallback+0x2e4>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d103      	bne.n	8001242 <HAL_UART_RxCpltCallback+0x246>
	  			{
	  				position_start=1;
 800123a:	4b29      	ldr	r3, [pc, #164]	; (80012e0 <HAL_UART_RxCpltCallback+0x2e4>)
 800123c:	2201      	movs	r2, #1
 800123e:	601a      	str	r2, [r3, #0]
	  			else if(position_start==1)
	  		    {
	  				position_start=0;

	  			}
	  			  			 break;
 8001240:	e054      	b.n	80012ec <HAL_UART_RxCpltCallback+0x2f0>
	  			else if(position_start==1)
 8001242:	4b27      	ldr	r3, [pc, #156]	; (80012e0 <HAL_UART_RxCpltCallback+0x2e4>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d150      	bne.n	80012ec <HAL_UART_RxCpltCallback+0x2f0>
	  				position_start=0;
 800124a:	4b25      	ldr	r3, [pc, #148]	; (80012e0 <HAL_UART_RxCpltCallback+0x2e4>)
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
	  			  			 break;
 8001250:	e04c      	b.n	80012ec <HAL_UART_RxCpltCallback+0x2f0>
	  			case 'i':
	  			      TIM4->CNT=10000;
 8001252:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <HAL_UART_RxCpltCallback+0x2a4>)
 8001254:	f242 7210 	movw	r2, #10000	; 0x2710
 8001258:	625a      	str	r2, [r3, #36]	; 0x24
	  			    input_position=10000+512*1;
 800125a:	4b22      	ldr	r3, [pc, #136]	; (80012e4 <HAL_UART_RxCpltCallback+0x2e8>)
 800125c:	f642 1210 	movw	r2, #10512	; 0x2910
 8001260:	801a      	strh	r2, [r3, #0]
	  			  	  err_sum=0;
 8001262:	4b21      	ldr	r3, [pc, #132]	; (80012e8 <HAL_UART_RxCpltCallback+0x2ec>)
 8001264:	f04f 0200 	mov.w	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
	  			 break;
 800126a:	e040      	b.n	80012ee <HAL_UART_RxCpltCallback+0x2f2>
	  			case 'o':
	  				  TIM4->CNT=10000;
 800126c:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <HAL_UART_RxCpltCallback+0x2a4>)
 800126e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001272:	625a      	str	r2, [r3, #36]	; 0x24
	  				input_position=10000+512*2;
 8001274:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <HAL_UART_RxCpltCallback+0x2e8>)
 8001276:	f642 3210 	movw	r2, #11024	; 0x2b10
 800127a:	801a      	strh	r2, [r3, #0]
	  				  err_sum=0;
 800127c:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <HAL_UART_RxCpltCallback+0x2ec>)
 800127e:	f04f 0200 	mov.w	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
	  			break;
 8001284:	e033      	b.n	80012ee <HAL_UART_RxCpltCallback+0x2f2>
	  			case 'p':
	  				   TIM4->CNT=10000;
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <HAL_UART_RxCpltCallback+0x2a4>)
 8001288:	f242 7210 	movw	r2, #10000	; 0x2710
 800128c:	625a      	str	r2, [r3, #36]	; 0x24
	  				 input_position=10000-512*1;
 800128e:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <HAL_UART_RxCpltCallback+0x2e8>)
 8001290:	f242 5210 	movw	r2, #9488	; 0x2510
 8001294:	801a      	strh	r2, [r3, #0]
	  			 	   err_sum=0;
 8001296:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <HAL_UART_RxCpltCallback+0x2ec>)
 8001298:	f04f 0200 	mov.w	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
	  			 break;
 800129e:	e026      	b.n	80012ee <HAL_UART_RxCpltCallback+0x2f2>
 80012a0:	40000800 	.word	0x40000800
 80012a4:	20000000 	.word	0x20000000
 80012a8:	40004800 	.word	0x40004800
 80012ac:	20000300 	.word	0x20000300
 80012b0:	20000304 	.word	0x20000304
 80012b4:	0800bcb0 	.word	0x0800bcb0
 80012b8:	40021000 	.word	0x40021000
 80012bc:	40020400 	.word	0x40020400
 80012c0:	40021800 	.word	0x40021800
 80012c4:	40000400 	.word	0x40000400
 80012c8:	200001fc 	.word	0x200001fc
 80012cc:	200001f8 	.word	0x200001f8
 80012d0:	3f860a92 	.word	0x3f860a92
 80012d4:	40490fdb 	.word	0x40490fdb
 80012d8:	40a78d36 	.word	0x40a78d36
 80012dc:	4096cbe4 	.word	0x4096cbe4
 80012e0:	200001f4 	.word	0x200001f4
 80012e4:	20000e1a 	.word	0x20000e1a
 80012e8:	20000e20 	.word	0x20000e20
	  			  			 break;
 80012ec:	bf00      	nop




  }
  if(huart->Instance == UART4)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a5b      	ldr	r2, [pc, #364]	; (8001460 <HAL_UART_RxCpltCallback+0x464>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	f040 80ae 	bne.w	8001456 <HAL_UART_RxCpltCallback+0x45a>
    {
	  HAL_UART_Receive_IT(&huart4, &data, 1);
 80012fa:	2201      	movs	r2, #1
 80012fc:	4959      	ldr	r1, [pc, #356]	; (8001464 <HAL_UART_RxCpltCallback+0x468>)
 80012fe:	485a      	ldr	r0, [pc, #360]	; (8001468 <HAL_UART_RxCpltCallback+0x46c>)
 8001300:	f006 fbb3 	bl	8007a6a <HAL_UART_Receive_IT>

	  printf("%d -- %c \r\n", data,data);
 8001304:	4b57      	ldr	r3, [pc, #348]	; (8001464 <HAL_UART_RxCpltCallback+0x468>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	4619      	mov	r1, r3
 800130a:	4b56      	ldr	r3, [pc, #344]	; (8001464 <HAL_UART_RxCpltCallback+0x468>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	461a      	mov	r2, r3
 8001310:	4856      	ldr	r0, [pc, #344]	; (800146c <HAL_UART_RxCpltCallback+0x470>)
 8001312:	f008 fb4d 	bl	80099b0 <iprintf>
		switch(data)
 8001316:	4b53      	ldr	r3, [pc, #332]	; (8001464 <HAL_UART_RxCpltCallback+0x468>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	3b21      	subs	r3, #33	; 0x21
 800131c:	2b20      	cmp	r3, #32
 800131e:	f200 809a 	bhi.w	8001456 <HAL_UART_RxCpltCallback+0x45a>
 8001322:	a201      	add	r2, pc, #4	; (adr r2, 8001328 <HAL_UART_RxCpltCallback+0x32c>)
 8001324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001328:	08001439 	.word	0x08001439
 800132c:	08001457 	.word	0x08001457
 8001330:	08001457 	.word	0x08001457
 8001334:	08001457 	.word	0x08001457
 8001338:	08001457 	.word	0x08001457
 800133c:	08001457 	.word	0x08001457
 8001340:	08001457 	.word	0x08001457
 8001344:	08001457 	.word	0x08001457
 8001348:	08001457 	.word	0x08001457
 800134c:	08001457 	.word	0x08001457
 8001350:	08001457 	.word	0x08001457
 8001354:	08001457 	.word	0x08001457
 8001358:	08001457 	.word	0x08001457
 800135c:	08001457 	.word	0x08001457
 8001360:	08001457 	.word	0x08001457
 8001364:	080013ad 	.word	0x080013ad
 8001368:	080013c7 	.word	0x080013c7
 800136c:	080013e1 	.word	0x080013e1
 8001370:	080013ef 	.word	0x080013ef
 8001374:	080013fd 	.word	0x080013fd
 8001378:	0800140b 	.word	0x0800140b
 800137c:	08001419 	.word	0x08001419
 8001380:	08001427 	.word	0x08001427
 8001384:	08001457 	.word	0x08001457
 8001388:	08001457 	.word	0x08001457
 800138c:	08001457 	.word	0x08001457
 8001390:	08001457 	.word	0x08001457
 8001394:	08001457 	.word	0x08001457
 8001398:	08001457 	.word	0x08001457
 800139c:	08001457 	.word	0x08001457
 80013a0:	08001457 	.word	0x08001457
 80013a4:	08001457 	.word	0x08001457
 80013a8:	0800144f 	.word	0x0800144f
		{
		case '0':
			 GPIOB->ODR |= 1<<0;
 80013ac:	4b30      	ldr	r3, [pc, #192]	; (8001470 <HAL_UART_RxCpltCallback+0x474>)
 80013ae:	695b      	ldr	r3, [r3, #20]
 80013b0:	4a2f      	ldr	r2, [pc, #188]	; (8001470 <HAL_UART_RxCpltCallback+0x474>)
 80013b2:	f043 0301 	orr.w	r3, r3, #1
 80013b6:	6153      	str	r3, [r2, #20]
			GPIOG->ODR &= ~1<<0;// start
 80013b8:	4b2e      	ldr	r3, [pc, #184]	; (8001474 <HAL_UART_RxCpltCallback+0x478>)
 80013ba:	695b      	ldr	r3, [r3, #20]
 80013bc:	4a2d      	ldr	r2, [pc, #180]	; (8001474 <HAL_UART_RxCpltCallback+0x478>)
 80013be:	f023 0301 	bic.w	r3, r3, #1
 80013c2:	6153      	str	r3, [r2, #20]

			break;
 80013c4:	e047      	b.n	8001456 <HAL_UART_RxCpltCallback+0x45a>

		case '1':  //stop
			  GPIOB->ODR &= ~1<<0;
 80013c6:	4b2a      	ldr	r3, [pc, #168]	; (8001470 <HAL_UART_RxCpltCallback+0x474>)
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	4a29      	ldr	r2, [pc, #164]	; (8001470 <HAL_UART_RxCpltCallback+0x474>)
 80013cc:	f023 0301 	bic.w	r3, r3, #1
 80013d0:	6153      	str	r3, [r2, #20]
	          GPIOG->ODR |= 1<<0;
 80013d2:	4b28      	ldr	r3, [pc, #160]	; (8001474 <HAL_UART_RxCpltCallback+0x478>)
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	4a27      	ldr	r2, [pc, #156]	; (8001474 <HAL_UART_RxCpltCallback+0x478>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6153      	str	r3, [r2, #20]
			break;
 80013de:	e03a      	b.n	8001456 <HAL_UART_RxCpltCallback+0x45a>

		case '2':  //dir
			  GPIOE->ODR |= 1<<0;  // back
 80013e0:	4b25      	ldr	r3, [pc, #148]	; (8001478 <HAL_UART_RxCpltCallback+0x47c>)
 80013e2:	695b      	ldr	r3, [r3, #20]
 80013e4:	4a24      	ldr	r2, [pc, #144]	; (8001478 <HAL_UART_RxCpltCallback+0x47c>)
 80013e6:	f043 0301 	orr.w	r3, r3, #1
 80013ea:	6153      	str	r3, [r2, #20]
			break;
 80013ec:	e033      	b.n	8001456 <HAL_UART_RxCpltCallback+0x45a>

		case '3'://dir
			 GPIOE->ODR &= ~1<<0; // go
 80013ee:	4b22      	ldr	r3, [pc, #136]	; (8001478 <HAL_UART_RxCpltCallback+0x47c>)
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	4a21      	ldr	r2, [pc, #132]	; (8001478 <HAL_UART_RxCpltCallback+0x47c>)
 80013f4:	f023 0301 	bic.w	r3, r3, #1
 80013f8:	6153      	str	r3, [r2, #20]
			break;
 80013fa:	e02c      	b.n	8001456 <HAL_UART_RxCpltCallback+0x45a>

		case '4':

		    TIM3->CCR1 = 0;
 80013fc:	4b1f      	ldr	r3, [pc, #124]	; (800147c <HAL_UART_RxCpltCallback+0x480>)
 80013fe:	2200      	movs	r2, #0
 8001400:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 0;
 8001402:	4b1e      	ldr	r3, [pc, #120]	; (800147c <HAL_UART_RxCpltCallback+0x480>)
 8001404:	2200      	movs	r2, #0
 8001406:	639a      	str	r2, [r3, #56]	; 0x38

			break;
 8001408:	e025      	b.n	8001456 <HAL_UART_RxCpltCallback+0x45a>

		case '5':
			TIM3->CCR1 = 50;
 800140a:	4b1c      	ldr	r3, [pc, #112]	; (800147c <HAL_UART_RxCpltCallback+0x480>)
 800140c:	2232      	movs	r2, #50	; 0x32
 800140e:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 50;
 8001410:	4b1a      	ldr	r3, [pc, #104]	; (800147c <HAL_UART_RxCpltCallback+0x480>)
 8001412:	2232      	movs	r2, #50	; 0x32
 8001414:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8001416:	e01e      	b.n	8001456 <HAL_UART_RxCpltCallback+0x45a>

		case '6':
			TIM3->CCR1 = 200;
 8001418:	4b18      	ldr	r3, [pc, #96]	; (800147c <HAL_UART_RxCpltCallback+0x480>)
 800141a:	22c8      	movs	r2, #200	; 0xc8
 800141c:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 200;
 800141e:	4b17      	ldr	r3, [pc, #92]	; (800147c <HAL_UART_RxCpltCallback+0x480>)
 8001420:	22c8      	movs	r2, #200	; 0xc8
 8001422:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8001424:	e017      	b.n	8001456 <HAL_UART_RxCpltCallback+0x45a>

		case '7':
			TIM3->CCR1 = 1000;
 8001426:	4b15      	ldr	r3, [pc, #84]	; (800147c <HAL_UART_RxCpltCallback+0x480>)
 8001428:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800142c:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 1000;
 800142e:	4b13      	ldr	r3, [pc, #76]	; (800147c <HAL_UART_RxCpltCallback+0x480>)
 8001430:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001434:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8001436:	e00e      	b.n	8001456 <HAL_UART_RxCpltCallback+0x45a>

		case '!':
			RX_flag=1;
 8001438:	4b11      	ldr	r3, [pc, #68]	; (8001480 <HAL_UART_RxCpltCallback+0x484>)
 800143a:	2201      	movs	r2, #1
 800143c:	701a      	strb	r2, [r3, #0]
			 TIM2->CNT=0;
 800143e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001442:	2200      	movs	r2, #0
 8001444:	625a      	str	r2, [r3, #36]	; 0x24
			 TIM4->CNT=0;
 8001446:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <HAL_UART_RxCpltCallback+0x488>)
 8001448:	2200      	movs	r2, #0
 800144a:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 800144c:	e003      	b.n	8001456 <HAL_UART_RxCpltCallback+0x45a>
		case 'A':  //Tx

			RX_flag=2;
 800144e:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <HAL_UART_RxCpltCallback+0x484>)
 8001450:	2202      	movs	r2, #2
 8001452:	701a      	strb	r2, [r3, #0]
				break;
 8001454:	bf00      	nop



    }

}
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40004c00 	.word	0x40004c00
 8001464:	2000034c 	.word	0x2000034c
 8001468:	20000350 	.word	0x20000350
 800146c:	0800bcbc 	.word	0x0800bcbc
 8001470:	40020400 	.word	0x40020400
 8001474:	40021800 	.word	0x40021800
 8001478:	40021000 	.word	0x40021000
 800147c:	40000400 	.word	0x40000400
 8001480:	20000398 	.word	0x20000398
 8001484:	40000800 	.word	0x40000800

08001488 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800148c:	f002 f956 	bl	800373c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001490:	f000 f92e 	bl	80016f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001494:	f000 fe1e 	bl	80020d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001498:	f000 fde6 	bl	8002068 <MX_DMA_Init>
  MX_ETH_Init();
 800149c:	f000 fa02 	bl	80018a4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80014a0:	f000 fd8a 	bl	8001fb8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80014a4:	f000 fdb2 	bl	800200c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 80014a8:	f000 faf2 	bl	8001a90 <MX_TIM3_Init>
  MX_TIM14_Init();
 80014ac:	f000 fd22 	bl	8001ef4 <MX_TIM14_Init>
  MX_TIM4_Init();
 80014b0:	f000 fb9e 	bl	8001bf0 <MX_TIM4_Init>
  MX_UART4_Init();
 80014b4:	f000 fd56 	bl	8001f64 <MX_UART4_Init>
  MX_TIM2_Init();
 80014b8:	f000 fa92 	bl	80019e0 <MX_TIM2_Init>
  MX_TIM8_Init();
 80014bc:	f000 fc2a 	bl	8001d14 <MX_TIM8_Init>
  MX_TIM6_Init();
 80014c0:	f000 fbf0 	bl	8001ca4 <MX_TIM6_Init>
  MX_TIM13_Init();
 80014c4:	f000 fcc6 	bl	8001e54 <MX_TIM13_Init>
  MX_TIM1_Init();
 80014c8:	f000 fa3a 	bl	8001940 <MX_TIM1_Init>
  MX_ADC3_Init();
 80014cc:	f000 f97a 	bl	80017c4 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */


  HAL_UART_Receive_IT(&huart3, &key_value, 1);
 80014d0:	2201      	movs	r2, #1
 80014d2:	496e      	ldr	r1, [pc, #440]	; (800168c <main+0x204>)
 80014d4:	486e      	ldr	r0, [pc, #440]	; (8001690 <main+0x208>)
 80014d6:	f006 fac8 	bl	8007a6a <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart4, &data, 1);
 80014da:	2201      	movs	r2, #1
 80014dc:	496d      	ldr	r1, [pc, #436]	; (8001694 <main+0x20c>)
 80014de:	486e      	ldr	r0, [pc, #440]	; (8001698 <main+0x210>)
 80014e0:	f006 fac3 	bl	8007a6a <HAL_UART_Receive_IT>


  HAL_ADC_Start_DMA(&hadc3, (uint32_t*)ADC3_value, 3);
 80014e4:	2203      	movs	r2, #3
 80014e6:	496d      	ldr	r1, [pc, #436]	; (800169c <main+0x214>)
 80014e8:	486d      	ldr	r0, [pc, #436]	; (80016a0 <main+0x218>)
 80014ea:	f002 fb11 	bl	8003b10 <HAL_ADC_Start_DMA>




   HAL_TIM_Base_Start_IT(&htim6);
 80014ee:	486d      	ldr	r0, [pc, #436]	; (80016a4 <main+0x21c>)
 80014f0:	f004 ff6e 	bl	80063d0 <HAL_TIM_Base_Start_IT>


   HAL_TIM_Base_Start(&htim1);
 80014f4:	486c      	ldr	r0, [pc, #432]	; (80016a8 <main+0x220>)
 80014f6:	f004 ff03 	bl	8006300 <HAL_TIM_Base_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(tim6_flag==1)
 80014fa:	4b6c      	ldr	r3, [pc, #432]	; (80016ac <main+0x224>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d105      	bne.n	800150e <main+0x86>
	  {
		  distance_sencor();  //거리?��?��
 8001502:	f001 f845 	bl	8002590 <distance_sencor>

	       tim6_flag=0;
 8001506:	4b69      	ldr	r3, [pc, #420]	; (80016ac <main+0x224>)
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	e087      	b.n	800161e <main+0x196>
	  }
	  else if(tim14_flag==20) //2�? ???���?
 800150e:	4b68      	ldr	r3, [pc, #416]	; (80016b0 <main+0x228>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2b14      	cmp	r3, #20
 8001514:	d176      	bne.n	8001604 <main+0x17c>
	  {
		   // RPM_uint16=RPM*100;
		  RPM_uint16=battery_V*100;
 8001516:	4b67      	ldr	r3, [pc, #412]	; (80016b4 <main+0x22c>)
 8001518:	edd3 7a00 	vldr	s15, [r3]
 800151c:	ed9f 7a66 	vldr	s14, [pc, #408]	; 80016b8 <main+0x230>
 8001520:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001524:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001528:	ee17 3a90 	vmov	r3, s15
 800152c:	b29a      	uxth	r2, r3
 800152e:	4b63      	ldr	r3, [pc, #396]	; (80016bc <main+0x234>)
 8001530:	801a      	strh	r2, [r3, #0]
		    ENC[3]=RPM_uint16 / 1000;		// 10000 ?���???????????????????????????????????????
 8001532:	4b62      	ldr	r3, [pc, #392]	; (80016bc <main+0x234>)
 8001534:	881b      	ldrh	r3, [r3, #0]
 8001536:	4a62      	ldr	r2, [pc, #392]	; (80016c0 <main+0x238>)
 8001538:	fba2 2303 	umull	r2, r3, r2, r3
 800153c:	099b      	lsrs	r3, r3, #6
 800153e:	b29b      	uxth	r3, r3
 8001540:	b2da      	uxtb	r2, r3
 8001542:	4b60      	ldr	r3, [pc, #384]	; (80016c4 <main+0x23c>)
 8001544:	70da      	strb	r2, [r3, #3]
    	    ENC[2]=RPM_uint16 % 1000/100;	// 1000 ?���???????????????????????????????????????
 8001546:	4b5d      	ldr	r3, [pc, #372]	; (80016bc <main+0x234>)
 8001548:	881b      	ldrh	r3, [r3, #0]
 800154a:	4a5d      	ldr	r2, [pc, #372]	; (80016c0 <main+0x238>)
 800154c:	fba2 1203 	umull	r1, r2, r2, r3
 8001550:	0992      	lsrs	r2, r2, #6
 8001552:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001556:	fb01 f202 	mul.w	r2, r1, r2
 800155a:	1a9b      	subs	r3, r3, r2
 800155c:	b29b      	uxth	r3, r3
 800155e:	4a5a      	ldr	r2, [pc, #360]	; (80016c8 <main+0x240>)
 8001560:	fba2 2303 	umull	r2, r3, r2, r3
 8001564:	095b      	lsrs	r3, r3, #5
 8001566:	b29b      	uxth	r3, r3
 8001568:	b2da      	uxtb	r2, r3
 800156a:	4b56      	ldr	r3, [pc, #344]	; (80016c4 <main+0x23c>)
 800156c:	709a      	strb	r2, [r3, #2]
			ENC[1]= RPM_uint16 % 100/10;	// 100 ?���???????????????????????????????????????
 800156e:	4b53      	ldr	r3, [pc, #332]	; (80016bc <main+0x234>)
 8001570:	881b      	ldrh	r3, [r3, #0]
 8001572:	4a55      	ldr	r2, [pc, #340]	; (80016c8 <main+0x240>)
 8001574:	fba2 1203 	umull	r1, r2, r2, r3
 8001578:	0952      	lsrs	r2, r2, #5
 800157a:	2164      	movs	r1, #100	; 0x64
 800157c:	fb01 f202 	mul.w	r2, r1, r2
 8001580:	1a9b      	subs	r3, r3, r2
 8001582:	b29b      	uxth	r3, r3
 8001584:	4a51      	ldr	r2, [pc, #324]	; (80016cc <main+0x244>)
 8001586:	fba2 2303 	umull	r2, r3, r2, r3
 800158a:	08db      	lsrs	r3, r3, #3
 800158c:	b29b      	uxth	r3, r3
 800158e:	b2da      	uxtb	r2, r3
 8001590:	4b4c      	ldr	r3, [pc, #304]	; (80016c4 <main+0x23c>)
 8001592:	705a      	strb	r2, [r3, #1]
		 	ENC[0]=RPM_uint16 % 10/1;		// 10 ?���???????????????????????????????????????
 8001594:	4b49      	ldr	r3, [pc, #292]	; (80016bc <main+0x234>)
 8001596:	881a      	ldrh	r2, [r3, #0]
 8001598:	4b4c      	ldr	r3, [pc, #304]	; (80016cc <main+0x244>)
 800159a:	fba3 1302 	umull	r1, r3, r3, r2
 800159e:	08d9      	lsrs	r1, r3, #3
 80015a0:	460b      	mov	r3, r1
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	440b      	add	r3, r1
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	4b45      	ldr	r3, [pc, #276]	; (80016c4 <main+0x23c>)
 80015b0:	701a      	strb	r2, [r3, #0]

		   	SerialSendChar_WIFI('?');
 80015b2:	203f      	movs	r0, #63	; 0x3f
 80015b4:	f7ff fd0a 	bl	8000fcc <SerialSendChar_WIFI>
		//    SerialSendChar_WIFI(ENC[3]+0x30);
		 //   SerialSendChar_WIFI(ENC[2]+0x30);
		// 	SerialSendChar_WIFI(ENC[1]+0x30);
	      //  SerialSendChar_WIFI(ENC[0]+0x30);

	 sprintf((char *)buffer, "%d \r\n",RPM_uint16);
 80015b8:	4b40      	ldr	r3, [pc, #256]	; (80016bc <main+0x234>)
 80015ba:	881b      	ldrh	r3, [r3, #0]
 80015bc:	461a      	mov	r2, r3
 80015be:	4944      	ldr	r1, [pc, #272]	; (80016d0 <main+0x248>)
 80015c0:	4844      	ldr	r0, [pc, #272]	; (80016d4 <main+0x24c>)
 80015c2:	f008 fa07 	bl	80099d4 <siprintf>
  	HAL_UART_Transmit(&huart3, buffer, strlen((char *)buffer), 100);
 80015c6:	4843      	ldr	r0, [pc, #268]	; (80016d4 <main+0x24c>)
 80015c8:	f7fe fe62 	bl	8000290 <strlen>
 80015cc:	4603      	mov	r3, r0
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	2364      	movs	r3, #100	; 0x64
 80015d2:	4940      	ldr	r1, [pc, #256]	; (80016d4 <main+0x24c>)
 80015d4:	482e      	ldr	r0, [pc, #184]	; (8001690 <main+0x208>)
 80015d6:	f006 f9bd 	bl	8007954 <HAL_UART_Transmit>


		//  	SerialSendChar_PC('\n');
		// 	SerialSendChar_PC('\r');

		 sprintf((char *)buffer, "%d \r\n",RPM_uint16);
 80015da:	4b38      	ldr	r3, [pc, #224]	; (80016bc <main+0x234>)
 80015dc:	881b      	ldrh	r3, [r3, #0]
 80015de:	461a      	mov	r2, r3
 80015e0:	493b      	ldr	r1, [pc, #236]	; (80016d0 <main+0x248>)
 80015e2:	483c      	ldr	r0, [pc, #240]	; (80016d4 <main+0x24c>)
 80015e4:	f008 f9f6 	bl	80099d4 <siprintf>
	 	HAL_UART_Transmit(&huart4, buffer, strlen((char *)buffer), 100);
 80015e8:	483a      	ldr	r0, [pc, #232]	; (80016d4 <main+0x24c>)
 80015ea:	f7fe fe51 	bl	8000290 <strlen>
 80015ee:	4603      	mov	r3, r0
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	2364      	movs	r3, #100	; 0x64
 80015f4:	4937      	ldr	r1, [pc, #220]	; (80016d4 <main+0x24c>)
 80015f6:	4828      	ldr	r0, [pc, #160]	; (8001698 <main+0x210>)
 80015f8:	f006 f9ac 	bl	8007954 <HAL_UART_Transmit>


		 	//  	  HAL_Delay(2000);

		  tim14_flag=0;
 80015fc:	4b2c      	ldr	r3, [pc, #176]	; (80016b0 <main+0x228>)
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	e00c      	b.n	800161e <main+0x196>
	  }
	  else if(tim13_flag==1)
 8001604:	4b34      	ldr	r3, [pc, #208]	; (80016d8 <main+0x250>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d108      	bne.n	800161e <main+0x196>
	  {
		  if(position_start==1)
 800160c:	4b33      	ldr	r3, [pc, #204]	; (80016dc <main+0x254>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d104      	bne.n	800161e <main+0x196>
		  	{
			  position_pid();
 8001614:	f000 fe70 	bl	80022f8 <position_pid>

			  tim13_flag=0;
 8001618:	4b2f      	ldr	r3, [pc, #188]	; (80016d8 <main+0x250>)
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]





	  if(RX_flag==1)
 800161e:	4b30      	ldr	r3, [pc, #192]	; (80016e0 <main+0x258>)
 8001620:	f993 3000 	ldrsb.w	r3, [r3]
 8001624:	2b01      	cmp	r3, #1
 8001626:	f47f af68 	bne.w	80014fa <main+0x72>
	  {
		 // RX_flag=0;
		//  TIM4->CNT=0;
	  	 		TIM3->CCR1 = 1000;
 800162a:	4b2e      	ldr	r3, [pc, #184]	; (80016e4 <main+0x25c>)
 800162c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001630:	635a      	str	r2, [r3, #52]	; 0x34
	  	 		TIM3->CCR2 = 1000;
 8001632:	4b2c      	ldr	r3, [pc, #176]	; (80016e4 <main+0x25c>)
 8001634:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001638:	639a      	str	r2, [r3, #56]	; 0x38
	  	 			if(encoder_count>=1200)
 800163a:	4b2b      	ldr	r3, [pc, #172]	; (80016e8 <main+0x260>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001642:	f4ff af5a 	bcc.w	80014fa <main+0x72>
	  		 		{
	  	 				TIM3->CCR1 = 50;
 8001646:	4b27      	ldr	r3, [pc, #156]	; (80016e4 <main+0x25c>)
 8001648:	2232      	movs	r2, #50	; 0x32
 800164a:	635a      	str	r2, [r3, #52]	; 0x34

	  	 				GPIOG->ODR |= 1<<0;
 800164c:	4b27      	ldr	r3, [pc, #156]	; (80016ec <main+0x264>)
 800164e:	695b      	ldr	r3, [r3, #20]
 8001650:	4a26      	ldr	r2, [pc, #152]	; (80016ec <main+0x264>)
 8001652:	f043 0301 	orr.w	r3, r3, #1
 8001656:	6153      	str	r3, [r2, #20]
	  	 				HAL_Delay(100);
 8001658:	2064      	movs	r0, #100	; 0x64
 800165a:	f002 f8e1 	bl	8003820 <HAL_Delay>
	  	 				GPIOG->ODR &= ~1<<0;
 800165e:	4b23      	ldr	r3, [pc, #140]	; (80016ec <main+0x264>)
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	4a22      	ldr	r2, [pc, #136]	; (80016ec <main+0x264>)
 8001664:	f023 0301 	bic.w	r3, r3, #1
 8001668:	6153      	str	r3, [r2, #20]
	  	 				TIM3->CCR1 = 50;
 800166a:	4b1e      	ldr	r3, [pc, #120]	; (80016e4 <main+0x25c>)
 800166c:	2232      	movs	r2, #50	; 0x32
 800166e:	635a      	str	r2, [r3, #52]	; 0x34
	  	 				if(encoder_count>=512*3)
 8001670:	4b1d      	ldr	r3, [pc, #116]	; (80016e8 <main+0x260>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001678:	f4ff af3f 	bcc.w	80014fa <main+0x72>
	  	 				{
	  	 					TIM3->CCR1 = 0;
 800167c:	4b19      	ldr	r3, [pc, #100]	; (80016e4 <main+0x25c>)
 800167e:	2200      	movs	r2, #0
 8001680:	635a      	str	r2, [r3, #52]	; 0x34
	  	 					RX_flag=0;
 8001682:	4b17      	ldr	r3, [pc, #92]	; (80016e0 <main+0x258>)
 8001684:	2200      	movs	r2, #0
 8001686:	701a      	strb	r2, [r3, #0]
	  if(tim6_flag==1)
 8001688:	e737      	b.n	80014fa <main+0x72>
 800168a:	bf00      	nop
 800168c:	20000300 	.word	0x20000300
 8001690:	20000304 	.word	0x20000304
 8001694:	2000034c 	.word	0x2000034c
 8001698:	20000350 	.word	0x20000350
 800169c:	200003b4 	.word	0x200003b4
 80016a0:	20000538 	.word	0x20000538
 80016a4:	200007b0 	.word	0x200007b0
 80016a8:	20000690 	.word	0x20000690
 80016ac:	20000e80 	.word	0x20000e80
 80016b0:	20000e84 	.word	0x20000e84
 80016b4:	20000e78 	.word	0x20000e78
 80016b8:	42c80000 	.word	0x42c80000
 80016bc:	200003ac 	.word	0x200003ac
 80016c0:	10624dd3 	.word	0x10624dd3
 80016c4:	200003b0 	.word	0x200003b0
 80016c8:	51eb851f 	.word	0x51eb851f
 80016cc:	cccccccd 	.word	0xcccccccd
 80016d0:	0800bcc8 	.word	0x0800bcc8
 80016d4:	20000200 	.word	0x20000200
 80016d8:	20000e88 	.word	0x20000e88
 80016dc:	200001f4 	.word	0x200001f4
 80016e0:	20000398 	.word	0x20000398
 80016e4:	40000400 	.word	0x40000400
 80016e8:	20000000 	.word	0x20000000
 80016ec:	40021800 	.word	0x40021800

080016f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b094      	sub	sp, #80	; 0x50
 80016f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016f6:	f107 0320 	add.w	r3, r7, #32
 80016fa:	2230      	movs	r2, #48	; 0x30
 80016fc:	2100      	movs	r1, #0
 80016fe:	4618      	mov	r0, r3
 8001700:	f008 f9cb 	bl	8009a9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001704:	f107 030c 	add.w	r3, r7, #12
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001714:	2300      	movs	r3, #0
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	4b28      	ldr	r3, [pc, #160]	; (80017bc <SystemClock_Config+0xcc>)
 800171a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171c:	4a27      	ldr	r2, [pc, #156]	; (80017bc <SystemClock_Config+0xcc>)
 800171e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001722:	6413      	str	r3, [r2, #64]	; 0x40
 8001724:	4b25      	ldr	r3, [pc, #148]	; (80017bc <SystemClock_Config+0xcc>)
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001730:	2300      	movs	r3, #0
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	4b22      	ldr	r3, [pc, #136]	; (80017c0 <SystemClock_Config+0xd0>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a21      	ldr	r2, [pc, #132]	; (80017c0 <SystemClock_Config+0xd0>)
 800173a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800173e:	6013      	str	r3, [r2, #0]
 8001740:	4b1f      	ldr	r3, [pc, #124]	; (80017c0 <SystemClock_Config+0xd0>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001748:	607b      	str	r3, [r7, #4]
 800174a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800174c:	2301      	movs	r3, #1
 800174e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001750:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001756:	2302      	movs	r3, #2
 8001758:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800175a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800175e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001760:	2304      	movs	r3, #4
 8001762:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001764:	23a8      	movs	r3, #168	; 0xa8
 8001766:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001768:	2302      	movs	r3, #2
 800176a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800176c:	2307      	movs	r3, #7
 800176e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001770:	f107 0320 	add.w	r3, r7, #32
 8001774:	4618      	mov	r0, r3
 8001776:	f004 f8db 	bl	8005930 <HAL_RCC_OscConfig>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001780:	f000 fdb4 	bl	80022ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001784:	230f      	movs	r3, #15
 8001786:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001788:	2302      	movs	r3, #2
 800178a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001790:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001794:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001796:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800179a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800179c:	f107 030c 	add.w	r3, r7, #12
 80017a0:	2105      	movs	r1, #5
 80017a2:	4618      	mov	r0, r3
 80017a4:	f004 fb3c 	bl	8005e20 <HAL_RCC_ClockConfig>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80017ae:	f000 fd9d 	bl	80022ec <Error_Handler>
  }
}
 80017b2:	bf00      	nop
 80017b4:	3750      	adds	r7, #80	; 0x50
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40023800 	.word	0x40023800
 80017c0:	40007000 	.word	0x40007000

080017c4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017ca:	463b      	mov	r3, r7
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80017d6:	4b31      	ldr	r3, [pc, #196]	; (800189c <MX_ADC3_Init+0xd8>)
 80017d8:	4a31      	ldr	r2, [pc, #196]	; (80018a0 <MX_ADC3_Init+0xdc>)
 80017da:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80017dc:	4b2f      	ldr	r3, [pc, #188]	; (800189c <MX_ADC3_Init+0xd8>)
 80017de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017e2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_10B;
 80017e4:	4b2d      	ldr	r3, [pc, #180]	; (800189c <MX_ADC3_Init+0xd8>)
 80017e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80017ea:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 80017ec:	4b2b      	ldr	r3, [pc, #172]	; (800189c <MX_ADC3_Init+0xd8>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80017f2:	4b2a      	ldr	r3, [pc, #168]	; (800189c <MX_ADC3_Init+0xd8>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80017f8:	4b28      	ldr	r3, [pc, #160]	; (800189c <MX_ADC3_Init+0xd8>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001800:	4b26      	ldr	r3, [pc, #152]	; (800189c <MX_ADC3_Init+0xd8>)
 8001802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001806:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8001808:	4b24      	ldr	r3, [pc, #144]	; (800189c <MX_ADC3_Init+0xd8>)
 800180a:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800180e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001810:	4b22      	ldr	r3, [pc, #136]	; (800189c <MX_ADC3_Init+0xd8>)
 8001812:	2200      	movs	r2, #0
 8001814:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 3;
 8001816:	4b21      	ldr	r3, [pc, #132]	; (800189c <MX_ADC3_Init+0xd8>)
 8001818:	2203      	movs	r2, #3
 800181a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800181c:	4b1f      	ldr	r3, [pc, #124]	; (800189c <MX_ADC3_Init+0xd8>)
 800181e:	2201      	movs	r2, #1
 8001820:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001824:	4b1d      	ldr	r3, [pc, #116]	; (800189c <MX_ADC3_Init+0xd8>)
 8001826:	2201      	movs	r2, #1
 8001828:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800182a:	481c      	ldr	r0, [pc, #112]	; (800189c <MX_ADC3_Init+0xd8>)
 800182c:	f002 f81c 	bl	8003868 <HAL_ADC_Init>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_ADC3_Init+0x76>
  {
    Error_Handler();
 8001836:	f000 fd59 	bl	80022ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800183a:	230c      	movs	r3, #12
 800183c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800183e:	2301      	movs	r3, #1
 8001840:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001842:	2307      	movs	r3, #7
 8001844:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001846:	463b      	mov	r3, r7
 8001848:	4619      	mov	r1, r3
 800184a:	4814      	ldr	r0, [pc, #80]	; (800189c <MX_ADC3_Init+0xd8>)
 800184c:	f002 fa8e 	bl	8003d6c <HAL_ADC_ConfigChannel>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001856:	f000 fd49 	bl	80022ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800185a:	230d      	movs	r3, #13
 800185c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800185e:	2302      	movs	r3, #2
 8001860:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001862:	463b      	mov	r3, r7
 8001864:	4619      	mov	r1, r3
 8001866:	480d      	ldr	r0, [pc, #52]	; (800189c <MX_ADC3_Init+0xd8>)
 8001868:	f002 fa80 	bl	8003d6c <HAL_ADC_ConfigChannel>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8001872:	f000 fd3b 	bl	80022ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001876:	230e      	movs	r3, #14
 8001878:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800187a:	2303      	movs	r3, #3
 800187c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800187e:	463b      	mov	r3, r7
 8001880:	4619      	mov	r1, r3
 8001882:	4806      	ldr	r0, [pc, #24]	; (800189c <MX_ADC3_Init+0xd8>)
 8001884:	f002 fa72 	bl	8003d6c <HAL_ADC_ConfigChannel>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 800188e:	f000 fd2d 	bl	80022ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001892:	bf00      	nop
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000538 	.word	0x20000538
 80018a0:	40012200 	.word	0x40012200

080018a4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80018a8:	4b1f      	ldr	r3, [pc, #124]	; (8001928 <MX_ETH_Init+0x84>)
 80018aa:	4a20      	ldr	r2, [pc, #128]	; (800192c <MX_ETH_Init+0x88>)
 80018ac:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80018ae:	4b20      	ldr	r3, [pc, #128]	; (8001930 <MX_ETH_Init+0x8c>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80018b4:	4b1e      	ldr	r3, [pc, #120]	; (8001930 <MX_ETH_Init+0x8c>)
 80018b6:	2280      	movs	r2, #128	; 0x80
 80018b8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80018ba:	4b1d      	ldr	r3, [pc, #116]	; (8001930 <MX_ETH_Init+0x8c>)
 80018bc:	22e1      	movs	r2, #225	; 0xe1
 80018be:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80018c0:	4b1b      	ldr	r3, [pc, #108]	; (8001930 <MX_ETH_Init+0x8c>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80018c6:	4b1a      	ldr	r3, [pc, #104]	; (8001930 <MX_ETH_Init+0x8c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80018cc:	4b18      	ldr	r3, [pc, #96]	; (8001930 <MX_ETH_Init+0x8c>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80018d2:	4b15      	ldr	r3, [pc, #84]	; (8001928 <MX_ETH_Init+0x84>)
 80018d4:	4a16      	ldr	r2, [pc, #88]	; (8001930 <MX_ETH_Init+0x8c>)
 80018d6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80018d8:	4b13      	ldr	r3, [pc, #76]	; (8001928 <MX_ETH_Init+0x84>)
 80018da:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80018de:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80018e0:	4b11      	ldr	r3, [pc, #68]	; (8001928 <MX_ETH_Init+0x84>)
 80018e2:	4a14      	ldr	r2, [pc, #80]	; (8001934 <MX_ETH_Init+0x90>)
 80018e4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80018e6:	4b10      	ldr	r3, [pc, #64]	; (8001928 <MX_ETH_Init+0x84>)
 80018e8:	4a13      	ldr	r2, [pc, #76]	; (8001938 <MX_ETH_Init+0x94>)
 80018ea:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80018ec:	4b0e      	ldr	r3, [pc, #56]	; (8001928 <MX_ETH_Init+0x84>)
 80018ee:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80018f2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80018f4:	480c      	ldr	r0, [pc, #48]	; (8001928 <MX_ETH_Init+0x84>)
 80018f6:	f003 fa07 	bl	8004d08 <HAL_ETH_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001900:	f000 fcf4 	bl	80022ec <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001904:	2238      	movs	r2, #56	; 0x38
 8001906:	2100      	movs	r1, #0
 8001908:	480c      	ldr	r0, [pc, #48]	; (800193c <MX_ETH_Init+0x98>)
 800190a:	f008 f8c6 	bl	8009a9a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800190e:	4b0b      	ldr	r3, [pc, #44]	; (800193c <MX_ETH_Init+0x98>)
 8001910:	2221      	movs	r2, #33	; 0x21
 8001912:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001914:	4b09      	ldr	r3, [pc, #36]	; (800193c <MX_ETH_Init+0x98>)
 8001916:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800191a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800191c:	4b07      	ldr	r3, [pc, #28]	; (800193c <MX_ETH_Init+0x98>)
 800191e:	2200      	movs	r2, #0
 8001920:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	200005e0 	.word	0x200005e0
 800192c:	40028000 	.word	0x40028000
 8001930:	20000e14 	.word	0x20000e14
 8001934:	20000498 	.word	0x20000498
 8001938:	200003f8 	.word	0x200003f8
 800193c:	200003c0 	.word	0x200003c0

08001940 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001946:	f107 0308 	add.w	r3, r7, #8
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]
 8001950:	609a      	str	r2, [r3, #8]
 8001952:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001954:	463b      	mov	r3, r7
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800195c:	4b1e      	ldr	r3, [pc, #120]	; (80019d8 <MX_TIM1_Init+0x98>)
 800195e:	4a1f      	ldr	r2, [pc, #124]	; (80019dc <MX_TIM1_Init+0x9c>)
 8001960:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001962:	4b1d      	ldr	r3, [pc, #116]	; (80019d8 <MX_TIM1_Init+0x98>)
 8001964:	2253      	movs	r2, #83	; 0x53
 8001966:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001968:	4b1b      	ldr	r3, [pc, #108]	; (80019d8 <MX_TIM1_Init+0x98>)
 800196a:	2200      	movs	r2, #0
 800196c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800196e:	4b1a      	ldr	r3, [pc, #104]	; (80019d8 <MX_TIM1_Init+0x98>)
 8001970:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001974:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001976:	4b18      	ldr	r3, [pc, #96]	; (80019d8 <MX_TIM1_Init+0x98>)
 8001978:	2200      	movs	r2, #0
 800197a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800197c:	4b16      	ldr	r3, [pc, #88]	; (80019d8 <MX_TIM1_Init+0x98>)
 800197e:	2200      	movs	r2, #0
 8001980:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001982:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <MX_TIM1_Init+0x98>)
 8001984:	2200      	movs	r2, #0
 8001986:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001988:	4813      	ldr	r0, [pc, #76]	; (80019d8 <MX_TIM1_Init+0x98>)
 800198a:	f004 fc69 	bl	8006260 <HAL_TIM_Base_Init>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001994:	f000 fcaa 	bl	80022ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001998:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800199c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800199e:	f107 0308 	add.w	r3, r7, #8
 80019a2:	4619      	mov	r1, r3
 80019a4:	480c      	ldr	r0, [pc, #48]	; (80019d8 <MX_TIM1_Init+0x98>)
 80019a6:	f005 fa8d 	bl	8006ec4 <HAL_TIM_ConfigClockSource>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80019b0:	f000 fc9c 	bl	80022ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019b4:	2300      	movs	r3, #0
 80019b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b8:	2300      	movs	r3, #0
 80019ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019bc:	463b      	mov	r3, r7
 80019be:	4619      	mov	r1, r3
 80019c0:	4805      	ldr	r0, [pc, #20]	; (80019d8 <MX_TIM1_Init+0x98>)
 80019c2:	f005 fe95 	bl	80076f0 <HAL_TIMEx_MasterConfigSynchronization>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80019cc:	f000 fc8e 	bl	80022ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80019d0:	bf00      	nop
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20000690 	.word	0x20000690
 80019dc:	40010000 	.word	0x40010000

080019e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08c      	sub	sp, #48	; 0x30
 80019e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019e6:	f107 030c 	add.w	r3, r7, #12
 80019ea:	2224      	movs	r2, #36	; 0x24
 80019ec:	2100      	movs	r1, #0
 80019ee:	4618      	mov	r0, r3
 80019f0:	f008 f853 	bl	8009a9a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f4:	1d3b      	adds	r3, r7, #4
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019fc:	4b23      	ldr	r3, [pc, #140]	; (8001a8c <MX_TIM2_Init+0xac>)
 80019fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 340;
 8001a04:	4b21      	ldr	r3, [pc, #132]	; (8001a8c <MX_TIM2_Init+0xac>)
 8001a06:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8001a0a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a0c:	4b1f      	ldr	r3, [pc, #124]	; (8001a8c <MX_TIM2_Init+0xac>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65000;
 8001a12:	4b1e      	ldr	r3, [pc, #120]	; (8001a8c <MX_TIM2_Init+0xac>)
 8001a14:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001a18:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a1a:	4b1c      	ldr	r3, [pc, #112]	; (8001a8c <MX_TIM2_Init+0xac>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a20:	4b1a      	ldr	r3, [pc, #104]	; (8001a8c <MX_TIM2_Init+0xac>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a26:	2303      	movs	r3, #3
 8001a28:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a32:	2300      	movs	r3, #0
 8001a34:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a42:	2300      	movs	r3, #0
 8001a44:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001a4a:	f107 030c 	add.w	r3, r7, #12
 8001a4e:	4619      	mov	r1, r3
 8001a50:	480e      	ldr	r0, [pc, #56]	; (8001a8c <MX_TIM2_Init+0xac>)
 8001a52:	f004 fef5 	bl	8006840 <HAL_TIM_Encoder_Init>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001a5c:	f000 fc46 	bl	80022ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a60:	2300      	movs	r3, #0
 8001a62:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a64:	2300      	movs	r3, #0
 8001a66:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a68:	1d3b      	adds	r3, r7, #4
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4807      	ldr	r0, [pc, #28]	; (8001a8c <MX_TIM2_Init+0xac>)
 8001a6e:	f005 fe3f 	bl	80076f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001a78:	f000 fc38 	bl	80022ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001a7c:	213c      	movs	r1, #60	; 0x3c
 8001a7e:	4803      	ldr	r0, [pc, #12]	; (8001a8c <MX_TIM2_Init+0xac>)
 8001a80:	f004 ff84 	bl	800698c <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM2_Init 2 */

}
 8001a84:	bf00      	nop
 8001a86:	3730      	adds	r7, #48	; 0x30
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	200006d8 	.word	0x200006d8

08001a90 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08e      	sub	sp, #56	; 0x38
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]
 8001aa0:	609a      	str	r2, [r3, #8]
 8001aa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa4:	f107 0320 	add.w	r3, r7, #32
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aae:	1d3b      	adds	r3, r7, #4
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	60da      	str	r2, [r3, #12]
 8001aba:	611a      	str	r2, [r3, #16]
 8001abc:	615a      	str	r2, [r3, #20]
 8001abe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ac0:	4b48      	ldr	r3, [pc, #288]	; (8001be4 <MX_TIM3_Init+0x154>)
 8001ac2:	4a49      	ldr	r2, [pc, #292]	; (8001be8 <MX_TIM3_Init+0x158>)
 8001ac4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 840-1;
 8001ac6:	4b47      	ldr	r3, [pc, #284]	; (8001be4 <MX_TIM3_Init+0x154>)
 8001ac8:	f240 3247 	movw	r2, #839	; 0x347
 8001acc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ace:	4b45      	ldr	r3, [pc, #276]	; (8001be4 <MX_TIM3_Init+0x154>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001ad4:	4b43      	ldr	r3, [pc, #268]	; (8001be4 <MX_TIM3_Init+0x154>)
 8001ad6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ada:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001adc:	4b41      	ldr	r3, [pc, #260]	; (8001be4 <MX_TIM3_Init+0x154>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ae2:	4b40      	ldr	r3, [pc, #256]	; (8001be4 <MX_TIM3_Init+0x154>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ae8:	483e      	ldr	r0, [pc, #248]	; (8001be4 <MX_TIM3_Init+0x154>)
 8001aea:	f004 fbb9 	bl	8006260 <HAL_TIM_Base_Init>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001af4:	f000 fbfa 	bl	80022ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001af8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001afc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001afe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b02:	4619      	mov	r1, r3
 8001b04:	4837      	ldr	r0, [pc, #220]	; (8001be4 <MX_TIM3_Init+0x154>)
 8001b06:	f005 f9dd 	bl	8006ec4 <HAL_TIM_ConfigClockSource>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001b10:	f000 fbec 	bl	80022ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b14:	4833      	ldr	r0, [pc, #204]	; (8001be4 <MX_TIM3_Init+0x154>)
 8001b16:	f004 fd24 	bl	8006562 <HAL_TIM_PWM_Init>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001b20:	f000 fbe4 	bl	80022ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b24:	2300      	movs	r3, #0
 8001b26:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b2c:	f107 0320 	add.w	r3, r7, #32
 8001b30:	4619      	mov	r1, r3
 8001b32:	482c      	ldr	r0, [pc, #176]	; (8001be4 <MX_TIM3_Init+0x154>)
 8001b34:	f005 fddc 	bl	80076f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001b3e:	f000 fbd5 	bl	80022ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b42:	2360      	movs	r3, #96	; 0x60
 8001b44:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8001b46:	2364      	movs	r3, #100	; 0x64
 8001b48:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b52:	1d3b      	adds	r3, r7, #4
 8001b54:	2200      	movs	r2, #0
 8001b56:	4619      	mov	r1, r3
 8001b58:	4822      	ldr	r0, [pc, #136]	; (8001be4 <MX_TIM3_Init+0x154>)
 8001b5a:	f005 f8f1 	bl	8006d40 <HAL_TIM_PWM_ConfigChannel>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001b64:	f000 fbc2 	bl	80022ec <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 8001b68:	4b1e      	ldr	r3, [pc, #120]	; (8001be4 <MX_TIM3_Init+0x154>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	699a      	ldr	r2, [r3, #24]
 8001b6e:	4b1d      	ldr	r3, [pc, #116]	; (8001be4 <MX_TIM3_Init+0x154>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f022 0208 	bic.w	r2, r2, #8
 8001b76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b78:	1d3b      	adds	r3, r7, #4
 8001b7a:	2204      	movs	r2, #4
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4819      	ldr	r0, [pc, #100]	; (8001be4 <MX_TIM3_Init+0x154>)
 8001b80:	f005 f8de 	bl	8006d40 <HAL_TIM_PWM_ConfigChannel>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_TIM3_Init+0xfe>
  {
    Error_Handler();
 8001b8a:	f000 fbaf 	bl	80022ec <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_2);
 8001b8e:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <MX_TIM3_Init+0x154>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	699a      	ldr	r2, [r3, #24]
 8001b94:	4b13      	ldr	r3, [pc, #76]	; (8001be4 <MX_TIM3_Init+0x154>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b9c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM3_Init 2 */
  TIM3->DIER |= (1<<1);   // CC1IE: Enable the Tim3 CC1 interrupt
 8001b9e:	4b12      	ldr	r3, [pc, #72]	; (8001be8 <MX_TIM3_Init+0x158>)
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	4a11      	ldr	r2, [pc, #68]	; (8001be8 <MX_TIM3_Init+0x158>)
 8001ba4:	f043 0302 	orr.w	r3, r3, #2
 8001ba8:	60d3      	str	r3, [r2, #12]
   NVIC->ISER[0] |= (1<<29); // TIM3_CC
 8001baa:	4b10      	ldr	r3, [pc, #64]	; (8001bec <MX_TIM3_Init+0x15c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a0f      	ldr	r2, [pc, #60]	; (8001bec <MX_TIM3_Init+0x15c>)
 8001bb0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001bb4:	6013      	str	r3, [r2, #0]
   TIM3->CCER	|= (1<<0);	// CC1E=1: OC1(TIM5_CH1) Active(Capture/Compare 1 output enable)
 8001bb6:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <MX_TIM3_Init+0x158>)
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	4a0b      	ldr	r2, [pc, #44]	; (8001be8 <MX_TIM3_Init+0x158>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	6213      	str	r3, [r2, #32]
    					// ?��?��??(40�??????????????????????????????????????????)?�� ?��?�� ?��?��출력
   TIM3->CR1	|= (1<<0);	// CEN: Counter TIM3 enable
 8001bc2:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <MX_TIM3_Init+0x158>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a08      	ldr	r2, [pc, #32]	; (8001be8 <MX_TIM3_Init+0x158>)
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	6013      	str	r3, [r2, #0]

  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8001bce:	2100      	movs	r1, #0
 8001bd0:	4804      	ldr	r0, [pc, #16]	; (8001be4 <MX_TIM3_Init+0x154>)
 8001bd2:	f004 fd1f 	bl	8006614 <HAL_TIM_PWM_Start_IT>

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001bd6:	4803      	ldr	r0, [pc, #12]	; (8001be4 <MX_TIM3_Init+0x154>)
 8001bd8:	f001 f8a0 	bl	8002d1c <HAL_TIM_MspPostInit>

}
 8001bdc:	bf00      	nop
 8001bde:	3738      	adds	r7, #56	; 0x38
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	20000720 	.word	0x20000720
 8001be8:	40000400 	.word	0x40000400
 8001bec:	e000e100 	.word	0xe000e100

08001bf0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08c      	sub	sp, #48	; 0x30
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bf6:	f107 030c 	add.w	r3, r7, #12
 8001bfa:	2224      	movs	r2, #36	; 0x24
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f007 ff4b 	bl	8009a9a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c04:	1d3b      	adds	r3, r7, #4
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c0c:	4b23      	ldr	r3, [pc, #140]	; (8001c9c <MX_TIM4_Init+0xac>)
 8001c0e:	4a24      	ldr	r2, [pc, #144]	; (8001ca0 <MX_TIM4_Init+0xb0>)
 8001c10:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 340;
 8001c12:	4b22      	ldr	r3, [pc, #136]	; (8001c9c <MX_TIM4_Init+0xac>)
 8001c14:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8001c18:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c1a:	4b20      	ldr	r3, [pc, #128]	; (8001c9c <MX_TIM4_Init+0xac>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65000;
 8001c20:	4b1e      	ldr	r3, [pc, #120]	; (8001c9c <MX_TIM4_Init+0xac>)
 8001c22:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001c26:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c28:	4b1c      	ldr	r3, [pc, #112]	; (8001c9c <MX_TIM4_Init+0xac>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c2e:	4b1b      	ldr	r3, [pc, #108]	; (8001c9c <MX_TIM4_Init+0xac>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c34:	2303      	movs	r3, #3
 8001c36:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c40:	2300      	movs	r3, #0
 8001c42:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c50:	2300      	movs	r3, #0
 8001c52:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001c58:	f107 030c 	add.w	r3, r7, #12
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	480f      	ldr	r0, [pc, #60]	; (8001c9c <MX_TIM4_Init+0xac>)
 8001c60:	f004 fdee 	bl	8006840 <HAL_TIM_Encoder_Init>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001c6a:	f000 fb3f 	bl	80022ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c72:	2300      	movs	r3, #0
 8001c74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c76:	1d3b      	adds	r3, r7, #4
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4808      	ldr	r0, [pc, #32]	; (8001c9c <MX_TIM4_Init+0xac>)
 8001c7c:	f005 fd38 	bl	80076f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001c86:	f000 fb31 	bl	80022ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001c8a:	213c      	movs	r1, #60	; 0x3c
 8001c8c:	4803      	ldr	r0, [pc, #12]	; (8001c9c <MX_TIM4_Init+0xac>)
 8001c8e:	f004 fe7d 	bl	800698c <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM4_Init 2 */

}
 8001c92:	bf00      	nop
 8001c94:	3730      	adds	r7, #48	; 0x30
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000768 	.word	0x20000768
 8001ca0:	40000800 	.word	0x40000800

08001ca4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001caa:	463b      	mov	r3, r7
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001cb2:	4b16      	ldr	r3, [pc, #88]	; (8001d0c <MX_TIM6_Init+0x68>)
 8001cb4:	4a16      	ldr	r2, [pc, #88]	; (8001d10 <MX_TIM6_Init+0x6c>)
 8001cb6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 8001cb8:	4b14      	ldr	r3, [pc, #80]	; (8001d0c <MX_TIM6_Init+0x68>)
 8001cba:	2253      	movs	r2, #83	; 0x53
 8001cbc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cbe:	4b13      	ldr	r3, [pc, #76]	; (8001d0c <MX_TIM6_Init+0x68>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8001cc4:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <MX_TIM6_Init+0x68>)
 8001cc6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001cca:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ccc:	4b0f      	ldr	r3, [pc, #60]	; (8001d0c <MX_TIM6_Init+0x68>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001cd2:	480e      	ldr	r0, [pc, #56]	; (8001d0c <MX_TIM6_Init+0x68>)
 8001cd4:	f004 fac4 	bl	8006260 <HAL_TIM_Base_Init>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001cde:	f000 fb05 	bl	80022ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001cea:	463b      	mov	r3, r7
 8001cec:	4619      	mov	r1, r3
 8001cee:	4807      	ldr	r0, [pc, #28]	; (8001d0c <MX_TIM6_Init+0x68>)
 8001cf0:	f005 fcfe 	bl	80076f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001cfa:	f000 faf7 	bl	80022ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8001cfe:	4803      	ldr	r0, [pc, #12]	; (8001d0c <MX_TIM6_Init+0x68>)
 8001d00:	f004 fb66 	bl	80063d0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM6_Init 2 */

}
 8001d04:	bf00      	nop
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	200007b0 	.word	0x200007b0
 8001d10:	40001000 	.word	0x40001000

08001d14 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b096      	sub	sp, #88	; 0x58
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d1a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	605a      	str	r2, [r3, #4]
 8001d24:	609a      	str	r2, [r3, #8]
 8001d26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d28:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	605a      	str	r2, [r3, #4]
 8001d3c:	609a      	str	r2, [r3, #8]
 8001d3e:	60da      	str	r2, [r3, #12]
 8001d40:	611a      	str	r2, [r3, #16]
 8001d42:	615a      	str	r2, [r3, #20]
 8001d44:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d46:	1d3b      	adds	r3, r7, #4
 8001d48:	2220      	movs	r2, #32
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f007 fea4 	bl	8009a9a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001d52:	4b3e      	ldr	r3, [pc, #248]	; (8001e4c <MX_TIM8_Init+0x138>)
 8001d54:	4a3e      	ldr	r2, [pc, #248]	; (8001e50 <MX_TIM8_Init+0x13c>)
 8001d56:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 840-1;
 8001d58:	4b3c      	ldr	r3, [pc, #240]	; (8001e4c <MX_TIM8_Init+0x138>)
 8001d5a:	f240 3247 	movw	r2, #839	; 0x347
 8001d5e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d60:	4b3a      	ldr	r3, [pc, #232]	; (8001e4c <MX_TIM8_Init+0x138>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 50-1;
 8001d66:	4b39      	ldr	r3, [pc, #228]	; (8001e4c <MX_TIM8_Init+0x138>)
 8001d68:	2231      	movs	r2, #49	; 0x31
 8001d6a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d6c:	4b37      	ldr	r3, [pc, #220]	; (8001e4c <MX_TIM8_Init+0x138>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001d72:	4b36      	ldr	r3, [pc, #216]	; (8001e4c <MX_TIM8_Init+0x138>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d78:	4b34      	ldr	r3, [pc, #208]	; (8001e4c <MX_TIM8_Init+0x138>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001d7e:	4833      	ldr	r0, [pc, #204]	; (8001e4c <MX_TIM8_Init+0x138>)
 8001d80:	f004 fa6e 	bl	8006260 <HAL_TIM_Base_Init>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001d8a:	f000 faaf 	bl	80022ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d92:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001d94:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d98:	4619      	mov	r1, r3
 8001d9a:	482c      	ldr	r0, [pc, #176]	; (8001e4c <MX_TIM8_Init+0x138>)
 8001d9c:	f005 f892 	bl	8006ec4 <HAL_TIM_ConfigClockSource>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001da6:	f000 faa1 	bl	80022ec <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8001daa:	4828      	ldr	r0, [pc, #160]	; (8001e4c <MX_TIM8_Init+0x138>)
 8001dac:	f004 fb80 	bl	80064b0 <HAL_TIM_OC_Init>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001db6:	f000 fa99 	bl	80022ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001dba:	2320      	movs	r3, #32
 8001dbc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001dc2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4820      	ldr	r0, [pc, #128]	; (8001e4c <MX_TIM8_Init+0x138>)
 8001dca:	f005 fc91 	bl	80076f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001dd4:	f000 fa8a 	bl	80022ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2000;
 8001ddc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001de0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001de2:	2300      	movs	r3, #0
 8001de4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001de6:	2300      	movs	r3, #0
 8001de8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001dea:	2300      	movs	r3, #0
 8001dec:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001dee:	2300      	movs	r3, #0
 8001df0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001df2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001df6:	220c      	movs	r2, #12
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4814      	ldr	r0, [pc, #80]	; (8001e4c <MX_TIM8_Init+0x138>)
 8001dfc:	f004 ff44 	bl	8006c88 <HAL_TIM_OC_ConfigChannel>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8001e06:	f000 fa71 	bl	80022ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e16:	2300      	movs	r3, #0
 8001e18:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e22:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e24:	2300      	movs	r3, #0
 8001e26:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001e28:	1d3b      	adds	r3, r7, #4
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4807      	ldr	r0, [pc, #28]	; (8001e4c <MX_TIM8_Init+0x138>)
 8001e2e:	f005 fcdb 	bl	80077e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8001e38:	f000 fa58 	bl	80022ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */
  HAL_TIM_Base_Start_IT(&htim8);
 8001e3c:	4803      	ldr	r0, [pc, #12]	; (8001e4c <MX_TIM8_Init+0x138>)
 8001e3e:	f004 fac7 	bl	80063d0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM8_Init 2 */

}
 8001e42:	bf00      	nop
 8001e44:	3758      	adds	r7, #88	; 0x58
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	200007f8 	.word	0x200007f8
 8001e50:	40010400 	.word	0x40010400

08001e54 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b088      	sub	sp, #32
 8001e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e5a:	1d3b      	adds	r3, r7, #4
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	60da      	str	r2, [r3, #12]
 8001e66:	611a      	str	r2, [r3, #16]
 8001e68:	615a      	str	r2, [r3, #20]
 8001e6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001e6c:	4b1f      	ldr	r3, [pc, #124]	; (8001eec <MX_TIM13_Init+0x98>)
 8001e6e:	4a20      	ldr	r2, [pc, #128]	; (8001ef0 <MX_TIM13_Init+0x9c>)
 8001e70:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 84;
 8001e72:	4b1e      	ldr	r3, [pc, #120]	; (8001eec <MX_TIM13_Init+0x98>)
 8001e74:	2254      	movs	r2, #84	; 0x54
 8001e76:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e78:	4b1c      	ldr	r3, [pc, #112]	; (8001eec <MX_TIM13_Init+0x98>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100;
 8001e7e:	4b1b      	ldr	r3, [pc, #108]	; (8001eec <MX_TIM13_Init+0x98>)
 8001e80:	2264      	movs	r2, #100	; 0x64
 8001e82:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e84:	4b19      	ldr	r3, [pc, #100]	; (8001eec <MX_TIM13_Init+0x98>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e8a:	4b18      	ldr	r3, [pc, #96]	; (8001eec <MX_TIM13_Init+0x98>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001e90:	4816      	ldr	r0, [pc, #88]	; (8001eec <MX_TIM13_Init+0x98>)
 8001e92:	f004 f9e5 	bl	8006260 <HAL_TIM_Base_Init>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_TIM13_Init+0x4c>
  {
    Error_Handler();
 8001e9c:	f000 fa26 	bl	80022ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001ea0:	4812      	ldr	r0, [pc, #72]	; (8001eec <MX_TIM13_Init+0x98>)
 8001ea2:	f004 fb5e 	bl	8006562 <HAL_TIM_PWM_Init>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <MX_TIM13_Init+0x5c>
  {
    Error_Handler();
 8001eac:	f000 fa1e 	bl	80022ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001eb0:	2360      	movs	r3, #96	; 0x60
 8001eb2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8001eb4:	2332      	movs	r3, #50	; 0x32
 8001eb6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ec0:	1d3b      	adds	r3, r7, #4
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4809      	ldr	r0, [pc, #36]	; (8001eec <MX_TIM13_Init+0x98>)
 8001ec8:	f004 ff3a 	bl	8006d40 <HAL_TIM_PWM_ConfigChannel>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_TIM13_Init+0x82>
  {
    Error_Handler();
 8001ed2:	f000 fa0b 	bl	80022ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001ed6:	4805      	ldr	r0, [pc, #20]	; (8001eec <MX_TIM13_Init+0x98>)
 8001ed8:	f000 ff20 	bl	8002d1c <HAL_TIM_MspPostInit>
  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001edc:	4803      	ldr	r0, [pc, #12]	; (8001eec <MX_TIM13_Init+0x98>)
 8001ede:	f000 ff1d 	bl	8002d1c <HAL_TIM_MspPostInit>

}
 8001ee2:	bf00      	nop
 8001ee4:	3720      	adds	r7, #32
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000840 	.word	0x20000840
 8001ef0:	40001c00 	.word	0x40001c00

08001ef4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001ef8:	4b17      	ldr	r3, [pc, #92]	; (8001f58 <MX_TIM14_Init+0x64>)
 8001efa:	4a18      	ldr	r2, [pc, #96]	; (8001f5c <MX_TIM14_Init+0x68>)
 8001efc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 840-1;
 8001efe:	4b16      	ldr	r3, [pc, #88]	; (8001f58 <MX_TIM14_Init+0x64>)
 8001f00:	f240 3247 	movw	r2, #839	; 0x347
 8001f04:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f06:	4b14      	ldr	r3, [pc, #80]	; (8001f58 <MX_TIM14_Init+0x64>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 8001f0c:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <MX_TIM14_Init+0x64>)
 8001f0e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001f12:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f14:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <MX_TIM14_Init+0x64>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f1a:	4b0f      	ldr	r3, [pc, #60]	; (8001f58 <MX_TIM14_Init+0x64>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001f20:	480d      	ldr	r0, [pc, #52]	; (8001f58 <MX_TIM14_Init+0x64>)
 8001f22:	f004 f99d 	bl	8006260 <HAL_TIM_Base_Init>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8001f2c:	f000 f9de 	bl	80022ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */
  TIM14->DIER |= (1<<0);   // CC1IE: Enable the Tim14 UG interrupt
 8001f30:	4b0a      	ldr	r3, [pc, #40]	; (8001f5c <MX_TIM14_Init+0x68>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	4a09      	ldr	r2, [pc, #36]	; (8001f5c <MX_TIM14_Init+0x68>)
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	60d3      	str	r3, [r2, #12]
   NVIC->ISER[1] |= (1<<(45-32)); // TIM14_CC
 8001f3c:	4b08      	ldr	r3, [pc, #32]	; (8001f60 <MX_TIM14_Init+0x6c>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	4a07      	ldr	r2, [pc, #28]	; (8001f60 <MX_TIM14_Init+0x6c>)
 8001f42:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f46:	6053      	str	r3, [r2, #4]

   TIM14->CR1	|= (1<<0);	// CEN: Counter TIM14 enable
 8001f48:	4b04      	ldr	r3, [pc, #16]	; (8001f5c <MX_TIM14_Init+0x68>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a03      	ldr	r2, [pc, #12]	; (8001f5c <MX_TIM14_Init+0x68>)
 8001f4e:	f043 0301 	orr.w	r3, r3, #1
 8001f52:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM14_Init 2 */

}
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20000888 	.word	0x20000888
 8001f5c:	40002000 	.word	0x40002000
 8001f60:	e000e100 	.word	0xe000e100

08001f64 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001f68:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <MX_UART4_Init+0x4c>)
 8001f6a:	4a12      	ldr	r2, [pc, #72]	; (8001fb4 <MX_UART4_Init+0x50>)
 8001f6c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001f6e:	4b10      	ldr	r3, [pc, #64]	; (8001fb0 <MX_UART4_Init+0x4c>)
 8001f70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f74:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001f76:	4b0e      	ldr	r3, [pc, #56]	; (8001fb0 <MX_UART4_Init+0x4c>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <MX_UART4_Init+0x4c>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 8001f82:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <MX_UART4_Init+0x4c>)
 8001f84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f88:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001f8a:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <MX_UART4_Init+0x4c>)
 8001f8c:	220c      	movs	r2, #12
 8001f8e:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f90:	4b07      	ldr	r3, [pc, #28]	; (8001fb0 <MX_UART4_Init+0x4c>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f96:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <MX_UART4_Init+0x4c>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001f9c:	4804      	ldr	r0, [pc, #16]	; (8001fb0 <MX_UART4_Init+0x4c>)
 8001f9e:	f005 fc89 	bl	80078b4 <HAL_UART_Init>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_UART4_Init+0x48>
  {
    Error_Handler();
 8001fa8:	f000 f9a0 	bl	80022ec <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001fac:	bf00      	nop
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	20000350 	.word	0x20000350
 8001fb4:	40004c00 	.word	0x40004c00

08001fb8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001fbc:	4b11      	ldr	r3, [pc, #68]	; (8002004 <MX_USART3_UART_Init+0x4c>)
 8001fbe:	4a12      	ldr	r2, [pc, #72]	; (8002008 <MX_USART3_UART_Init+0x50>)
 8001fc0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001fc2:	4b10      	ldr	r3, [pc, #64]	; (8002004 <MX_USART3_UART_Init+0x4c>)
 8001fc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fc8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001fca:	4b0e      	ldr	r3, [pc, #56]	; (8002004 <MX_USART3_UART_Init+0x4c>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fd0:	4b0c      	ldr	r3, [pc, #48]	; (8002004 <MX_USART3_UART_Init+0x4c>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001fd6:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <MX_USART3_UART_Init+0x4c>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fdc:	4b09      	ldr	r3, [pc, #36]	; (8002004 <MX_USART3_UART_Init+0x4c>)
 8001fde:	220c      	movs	r2, #12
 8001fe0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fe2:	4b08      	ldr	r3, [pc, #32]	; (8002004 <MX_USART3_UART_Init+0x4c>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fe8:	4b06      	ldr	r3, [pc, #24]	; (8002004 <MX_USART3_UART_Init+0x4c>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001fee:	4805      	ldr	r0, [pc, #20]	; (8002004 <MX_USART3_UART_Init+0x4c>)
 8001ff0:	f005 fc60 	bl	80078b4 <HAL_UART_Init>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001ffa:	f000 f977 	bl	80022ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20000304 	.word	0x20000304
 8002008:	40004800 	.word	0x40004800

0800200c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002010:	4b14      	ldr	r3, [pc, #80]	; (8002064 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002012:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002016:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8002018:	4b12      	ldr	r3, [pc, #72]	; (8002064 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800201a:	2204      	movs	r2, #4
 800201c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800201e:	4b11      	ldr	r3, [pc, #68]	; (8002064 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002020:	2202      	movs	r2, #2
 8002022:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002024:	4b0f      	ldr	r3, [pc, #60]	; (8002064 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002026:	2200      	movs	r2, #0
 8002028:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800202a:	4b0e      	ldr	r3, [pc, #56]	; (8002064 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800202c:	2202      	movs	r2, #2
 800202e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002030:	4b0c      	ldr	r3, [pc, #48]	; (8002064 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002032:	2201      	movs	r2, #1
 8002034:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002036:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002038:	2200      	movs	r2, #0
 800203a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800203c:	4b09      	ldr	r3, [pc, #36]	; (8002064 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800203e:	2200      	movs	r2, #0
 8002040:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002042:	4b08      	ldr	r3, [pc, #32]	; (8002064 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002044:	2201      	movs	r2, #1
 8002046:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002048:	4b06      	ldr	r3, [pc, #24]	; (8002064 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800204a:	2200      	movs	r2, #0
 800204c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800204e:	4805      	ldr	r0, [pc, #20]	; (8002064 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002050:	f003 fb5f 	bl	8005712 <HAL_PCD_Init>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800205a:	f000 f947 	bl	80022ec <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20000930 	.word	0x20000930

08002068 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	607b      	str	r3, [r7, #4]
 8002072:	4b17      	ldr	r3, [pc, #92]	; (80020d0 <MX_DMA_Init+0x68>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	4a16      	ldr	r2, [pc, #88]	; (80020d0 <MX_DMA_Init+0x68>)
 8002078:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800207c:	6313      	str	r3, [r2, #48]	; 0x30
 800207e:	4b14      	ldr	r3, [pc, #80]	; (80020d0 <MX_DMA_Init+0x68>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002086:	607b      	str	r3, [r7, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	603b      	str	r3, [r7, #0]
 800208e:	4b10      	ldr	r3, [pc, #64]	; (80020d0 <MX_DMA_Init+0x68>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	4a0f      	ldr	r2, [pc, #60]	; (80020d0 <MX_DMA_Init+0x68>)
 8002094:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002098:	6313      	str	r3, [r2, #48]	; 0x30
 800209a:	4b0d      	ldr	r3, [pc, #52]	; (80020d0 <MX_DMA_Init+0x68>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020a2:	603b      	str	r3, [r7, #0]
 80020a4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80020a6:	2200      	movs	r2, #0
 80020a8:	2100      	movs	r1, #0
 80020aa:	2011      	movs	r0, #17
 80020ac:	f002 f9f3 	bl	8004496 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80020b0:	2011      	movs	r0, #17
 80020b2:	f002 fa0c 	bl	80044ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80020b6:	2200      	movs	r2, #0
 80020b8:	2100      	movs	r1, #0
 80020ba:	2039      	movs	r0, #57	; 0x39
 80020bc:	f002 f9eb 	bl	8004496 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80020c0:	2039      	movs	r0, #57	; 0x39
 80020c2:	f002 fa04 	bl	80044ce <HAL_NVIC_EnableIRQ>

}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40023800 	.word	0x40023800

080020d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b08e      	sub	sp, #56	; 0x38
 80020d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	605a      	str	r2, [r3, #4]
 80020e4:	609a      	str	r2, [r3, #8]
 80020e6:	60da      	str	r2, [r3, #12]
 80020e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	623b      	str	r3, [r7, #32]
 80020ee:	4b79      	ldr	r3, [pc, #484]	; (80022d4 <MX_GPIO_Init+0x200>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	4a78      	ldr	r2, [pc, #480]	; (80022d4 <MX_GPIO_Init+0x200>)
 80020f4:	f043 0304 	orr.w	r3, r3, #4
 80020f8:	6313      	str	r3, [r2, #48]	; 0x30
 80020fa:	4b76      	ldr	r3, [pc, #472]	; (80022d4 <MX_GPIO_Init+0x200>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	f003 0304 	and.w	r3, r3, #4
 8002102:	623b      	str	r3, [r7, #32]
 8002104:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	61fb      	str	r3, [r7, #28]
 800210a:	4b72      	ldr	r3, [pc, #456]	; (80022d4 <MX_GPIO_Init+0x200>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	4a71      	ldr	r2, [pc, #452]	; (80022d4 <MX_GPIO_Init+0x200>)
 8002110:	f043 0320 	orr.w	r3, r3, #32
 8002114:	6313      	str	r3, [r2, #48]	; 0x30
 8002116:	4b6f      	ldr	r3, [pc, #444]	; (80022d4 <MX_GPIO_Init+0x200>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	f003 0320 	and.w	r3, r3, #32
 800211e:	61fb      	str	r3, [r7, #28]
 8002120:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	61bb      	str	r3, [r7, #24]
 8002126:	4b6b      	ldr	r3, [pc, #428]	; (80022d4 <MX_GPIO_Init+0x200>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	4a6a      	ldr	r2, [pc, #424]	; (80022d4 <MX_GPIO_Init+0x200>)
 800212c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002130:	6313      	str	r3, [r2, #48]	; 0x30
 8002132:	4b68      	ldr	r3, [pc, #416]	; (80022d4 <MX_GPIO_Init+0x200>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800213a:	61bb      	str	r3, [r7, #24]
 800213c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	617b      	str	r3, [r7, #20]
 8002142:	4b64      	ldr	r3, [pc, #400]	; (80022d4 <MX_GPIO_Init+0x200>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	4a63      	ldr	r2, [pc, #396]	; (80022d4 <MX_GPIO_Init+0x200>)
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	6313      	str	r3, [r2, #48]	; 0x30
 800214e:	4b61      	ldr	r3, [pc, #388]	; (80022d4 <MX_GPIO_Init+0x200>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	617b      	str	r3, [r7, #20]
 8002158:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	613b      	str	r3, [r7, #16]
 800215e:	4b5d      	ldr	r3, [pc, #372]	; (80022d4 <MX_GPIO_Init+0x200>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	4a5c      	ldr	r2, [pc, #368]	; (80022d4 <MX_GPIO_Init+0x200>)
 8002164:	f043 0302 	orr.w	r3, r3, #2
 8002168:	6313      	str	r3, [r2, #48]	; 0x30
 800216a:	4b5a      	ldr	r3, [pc, #360]	; (80022d4 <MX_GPIO_Init+0x200>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	613b      	str	r3, [r7, #16]
 8002174:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	4b56      	ldr	r3, [pc, #344]	; (80022d4 <MX_GPIO_Init+0x200>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	4a55      	ldr	r2, [pc, #340]	; (80022d4 <MX_GPIO_Init+0x200>)
 8002180:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002184:	6313      	str	r3, [r2, #48]	; 0x30
 8002186:	4b53      	ldr	r3, [pc, #332]	; (80022d4 <MX_GPIO_Init+0x200>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	60bb      	str	r3, [r7, #8]
 8002196:	4b4f      	ldr	r3, [pc, #316]	; (80022d4 <MX_GPIO_Init+0x200>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	4a4e      	ldr	r2, [pc, #312]	; (80022d4 <MX_GPIO_Init+0x200>)
 800219c:	f043 0308 	orr.w	r3, r3, #8
 80021a0:	6313      	str	r3, [r2, #48]	; 0x30
 80021a2:	4b4c      	ldr	r3, [pc, #304]	; (80022d4 <MX_GPIO_Init+0x200>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	f003 0308 	and.w	r3, r3, #8
 80021aa:	60bb      	str	r3, [r7, #8]
 80021ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	607b      	str	r3, [r7, #4]
 80021b2:	4b48      	ldr	r3, [pc, #288]	; (80022d4 <MX_GPIO_Init+0x200>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	4a47      	ldr	r2, [pc, #284]	; (80022d4 <MX_GPIO_Init+0x200>)
 80021b8:	f043 0310 	orr.w	r3, r3, #16
 80021bc:	6313      	str	r3, [r2, #48]	; 0x30
 80021be:	4b45      	ldr	r3, [pc, #276]	; (80022d4 <MX_GPIO_Init+0x200>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	f003 0310 	and.w	r3, r3, #16
 80021c6:	607b      	str	r3, [r7, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD3_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 80021ca:	2200      	movs	r2, #0
 80021cc:	f244 0181 	movw	r1, #16513	; 0x4081
 80021d0:	4841      	ldr	r0, [pc, #260]	; (80022d8 <MX_GPIO_Init+0x204>)
 80021d2:	f003 fa85 	bl	80056e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80021d6:	2200      	movs	r2, #0
 80021d8:	2103      	movs	r1, #3
 80021da:	4840      	ldr	r0, [pc, #256]	; (80022dc <MX_GPIO_Init+0x208>)
 80021dc:	f003 fa80 	bl	80056e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 80021e0:	2200      	movs	r2, #0
 80021e2:	2180      	movs	r1, #128	; 0x80
 80021e4:	483e      	ldr	r0, [pc, #248]	; (80022e0 <MX_GPIO_Init+0x20c>)
 80021e6:	f003 fa7b 	bl	80056e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
 80021ea:	2200      	movs	r2, #0
 80021ec:	2101      	movs	r1, #1
 80021ee:	483d      	ldr	r0, [pc, #244]	; (80022e4 <MX_GPIO_Init+0x210>)
 80021f0:	f003 fa76 	bl	80056e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80021f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80021fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002200:	2300      	movs	r3, #0
 8002202:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002204:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002208:	4619      	mov	r1, r3
 800220a:	4837      	ldr	r0, [pc, #220]	; (80022e8 <MX_GPIO_Init+0x214>)
 800220c:	f003 f8a4 	bl	8005358 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 LD3_Pin PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin|GPIO_PIN_7;
 8002210:	f244 0381 	movw	r3, #16513	; 0x4081
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002216:	2301      	movs	r3, #1
 8002218:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221a:	2300      	movs	r3, #0
 800221c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221e:	2300      	movs	r3, #0
 8002220:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002222:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002226:	4619      	mov	r1, r3
 8002228:	482b      	ldr	r0, [pc, #172]	; (80022d8 <MX_GPIO_Init+0x204>)
 800222a:	f003 f895 	bl	8005358 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800222e:	2303      	movs	r3, #3
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002232:	2301      	movs	r3, #1
 8002234:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002236:	2300      	movs	r3, #0
 8002238:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223a:	2300      	movs	r3, #0
 800223c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800223e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002242:	4619      	mov	r1, r3
 8002244:	4825      	ldr	r0, [pc, #148]	; (80022dc <MX_GPIO_Init+0x208>)
 8002246:	f003 f887 	bl	8005358 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800224a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800224e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002250:	2300      	movs	r3, #0
 8002252:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002254:	2300      	movs	r3, #0
 8002256:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002258:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800225c:	4619      	mov	r1, r3
 800225e:	481e      	ldr	r0, [pc, #120]	; (80022d8 <MX_GPIO_Init+0x204>)
 8002260:	f003 f87a 	bl	8005358 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002264:	2380      	movs	r3, #128	; 0x80
 8002266:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002268:	2300      	movs	r3, #0
 800226a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226c:	2300      	movs	r3, #0
 800226e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002270:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002274:	4619      	mov	r1, r3
 8002276:	4819      	ldr	r0, [pc, #100]	; (80022dc <MX_GPIO_Init+0x208>)
 8002278:	f003 f86e 	bl	8005358 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800227c:	2340      	movs	r3, #64	; 0x40
 800227e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002280:	2300      	movs	r3, #0
 8002282:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002284:	2300      	movs	r3, #0
 8002286:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002288:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800228c:	4619      	mov	r1, r3
 800228e:	4814      	ldr	r0, [pc, #80]	; (80022e0 <MX_GPIO_Init+0x20c>)
 8002290:	f003 f862 	bl	8005358 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002294:	2380      	movs	r3, #128	; 0x80
 8002296:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002298:	2301      	movs	r3, #1
 800229a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229c:	2300      	movs	r3, #0
 800229e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a0:	2300      	movs	r3, #0
 80022a2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022a8:	4619      	mov	r1, r3
 80022aa:	480d      	ldr	r0, [pc, #52]	; (80022e0 <MX_GPIO_Init+0x20c>)
 80022ac:	f003 f854 	bl	8005358 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80022b0:	2301      	movs	r3, #1
 80022b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b4:	2301      	movs	r3, #1
 80022b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b8:	2300      	movs	r3, #0
 80022ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022bc:	2300      	movs	r3, #0
 80022be:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022c4:	4619      	mov	r1, r3
 80022c6:	4807      	ldr	r0, [pc, #28]	; (80022e4 <MX_GPIO_Init+0x210>)
 80022c8:	f003 f846 	bl	8005358 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80022cc:	bf00      	nop
 80022ce:	3738      	adds	r7, #56	; 0x38
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40023800 	.word	0x40023800
 80022d8:	40020400 	.word	0x40020400
 80022dc:	40021800 	.word	0x40021800
 80022e0:	40020c00 	.word	0x40020c00
 80022e4:	40021000 	.word	0x40021000
 80022e8:	40020800 	.word	0x40020800

080022ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022f0:	b672      	cpsid	i
}
 80022f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022f4:	e7fe      	b.n	80022f4 <Error_Handler+0x8>
	...

080022f8 <position_pid>:




void position_pid(void)
{
 80022f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80022fc:	af00      	add	r7, sp, #0
	p_kp = 4;
 80022fe:	4b92      	ldr	r3, [pc, #584]	; (8002548 <position_pid+0x250>)
 8002300:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8002304:	601a      	str	r2, [r3, #0]
	p_ki = 2;
 8002306:	4b91      	ldr	r3, [pc, #580]	; (800254c <position_pid+0x254>)
 8002308:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800230c:	601a      	str	r2, [r3, #0]
	p_kd = 0.01;
 800230e:	4b90      	ldr	r3, [pc, #576]	; (8002550 <position_pid+0x258>)
 8002310:	4a90      	ldr	r2, [pc, #576]	; (8002554 <position_pid+0x25c>)
 8002312:	601a      	str	r2, [r3, #0]

	err = input_position - encoder_count;
 8002314:	4b90      	ldr	r3, [pc, #576]	; (8002558 <position_pid+0x260>)
 8002316:	881b      	ldrh	r3, [r3, #0]
 8002318:	461a      	mov	r2, r3
 800231a:	4b90      	ldr	r3, [pc, #576]	; (800255c <position_pid+0x264>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	461a      	mov	r2, r3
 8002322:	4b8f      	ldr	r3, [pc, #572]	; (8002560 <position_pid+0x268>)
 8002324:	601a      	str	r2, [r3, #0]
	P_KP = err * p_kp;
 8002326:	4b8e      	ldr	r3, [pc, #568]	; (8002560 <position_pid+0x268>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	ee07 3a90 	vmov	s15, r3
 800232e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002332:	4b85      	ldr	r3, [pc, #532]	; (8002548 <position_pid+0x250>)
 8002334:	edd3 7a00 	vldr	s15, [r3]
 8002338:	ee67 7a27 	vmul.f32	s15, s14, s15
 800233c:	4b89      	ldr	r3, [pc, #548]	; (8002564 <position_pid+0x26c>)
 800233e:	edc3 7a00 	vstr	s15, [r3]

	err_sum = err_sum + err * 0.0001;
 8002342:	4b89      	ldr	r3, [pc, #548]	; (8002568 <position_pid+0x270>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f7fe f90e 	bl	8000568 <__aeabi_f2d>
 800234c:	4680      	mov	r8, r0
 800234e:	4689      	mov	r9, r1
 8002350:	4b83      	ldr	r3, [pc, #524]	; (8002560 <position_pid+0x268>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f7fe f8f5 	bl	8000544 <__aeabi_i2d>
 800235a:	a379      	add	r3, pc, #484	; (adr r3, 8002540 <position_pid+0x248>)
 800235c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002360:	f7fe f95a 	bl	8000618 <__aeabi_dmul>
 8002364:	4602      	mov	r2, r0
 8002366:	460b      	mov	r3, r1
 8002368:	4640      	mov	r0, r8
 800236a:	4649      	mov	r1, r9
 800236c:	f7fd ff9e 	bl	80002ac <__adddf3>
 8002370:	4602      	mov	r2, r0
 8002372:	460b      	mov	r3, r1
 8002374:	4610      	mov	r0, r2
 8002376:	4619      	mov	r1, r3
 8002378:	f7fe fc46 	bl	8000c08 <__aeabi_d2f>
 800237c:	4603      	mov	r3, r0
 800237e:	4a7a      	ldr	r2, [pc, #488]	; (8002568 <position_pid+0x270>)
 8002380:	6013      	str	r3, [r2, #0]
	if (p_PID == 0)
 8002382:	4b7a      	ldr	r3, [pc, #488]	; (800256c <position_pid+0x274>)
 8002384:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002388:	f04f 0200 	mov.w	r2, #0
 800238c:	f04f 0300 	mov.w	r3, #0
 8002390:	f7fe fbaa 	bl	8000ae8 <__aeabi_dcmpeq>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <position_pid+0xaa>
	{
		err_sum = 0;
 800239a:	4b73      	ldr	r3, [pc, #460]	; (8002568 <position_pid+0x270>)
 800239c:	f04f 0200 	mov.w	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]
	}
	P_KI = err_sum * p_ki;
 80023a2:	4b71      	ldr	r3, [pc, #452]	; (8002568 <position_pid+0x270>)
 80023a4:	ed93 7a00 	vldr	s14, [r3]
 80023a8:	4b68      	ldr	r3, [pc, #416]	; (800254c <position_pid+0x254>)
 80023aa:	edd3 7a00 	vldr	s15, [r3]
 80023ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023b2:	4b6f      	ldr	r3, [pc, #444]	; (8002570 <position_pid+0x278>)
 80023b4:	edc3 7a00 	vstr	s15, [r3]

	err_d = (err - previous_err) / 0.0001;
 80023b8:	4b69      	ldr	r3, [pc, #420]	; (8002560 <position_pid+0x268>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	ee07 3a90 	vmov	s15, r3
 80023c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023c4:	4b6b      	ldr	r3, [pc, #428]	; (8002574 <position_pid+0x27c>)
 80023c6:	edd3 7a00 	vldr	s15, [r3]
 80023ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023ce:	ee17 0a90 	vmov	r0, s15
 80023d2:	f7fe f8c9 	bl	8000568 <__aeabi_f2d>
 80023d6:	a35a      	add	r3, pc, #360	; (adr r3, 8002540 <position_pid+0x248>)
 80023d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023dc:	f7fe fa46 	bl	800086c <__aeabi_ddiv>
 80023e0:	4602      	mov	r2, r0
 80023e2:	460b      	mov	r3, r1
 80023e4:	4964      	ldr	r1, [pc, #400]	; (8002578 <position_pid+0x280>)
 80023e6:	e9c1 2300 	strd	r2, r3, [r1]
	previous_err = err;
 80023ea:	4b5d      	ldr	r3, [pc, #372]	; (8002560 <position_pid+0x268>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	ee07 3a90 	vmov	s15, r3
 80023f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023f6:	4b5f      	ldr	r3, [pc, #380]	; (8002574 <position_pid+0x27c>)
 80023f8:	edc3 7a00 	vstr	s15, [r3]
	P_KD = err_d * p_kd;
 80023fc:	4b54      	ldr	r3, [pc, #336]	; (8002550 <position_pid+0x258>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4618      	mov	r0, r3
 8002402:	f7fe f8b1 	bl	8000568 <__aeabi_f2d>
 8002406:	4b5c      	ldr	r3, [pc, #368]	; (8002578 <position_pid+0x280>)
 8002408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800240c:	f7fe f904 	bl	8000618 <__aeabi_dmul>
 8002410:	4602      	mov	r2, r0
 8002412:	460b      	mov	r3, r1
 8002414:	4959      	ldr	r1, [pc, #356]	; (800257c <position_pid+0x284>)
 8002416:	e9c1 2300 	strd	r2, r3, [r1]

	p_PID = P_KP + P_KI + P_KD;
 800241a:	4b52      	ldr	r3, [pc, #328]	; (8002564 <position_pid+0x26c>)
 800241c:	ed93 7a00 	vldr	s14, [r3]
 8002420:	4b53      	ldr	r3, [pc, #332]	; (8002570 <position_pid+0x278>)
 8002422:	edd3 7a00 	vldr	s15, [r3]
 8002426:	ee77 7a27 	vadd.f32	s15, s14, s15
 800242a:	ee17 0a90 	vmov	r0, s15
 800242e:	f7fe f89b 	bl	8000568 <__aeabi_f2d>
 8002432:	4b52      	ldr	r3, [pc, #328]	; (800257c <position_pid+0x284>)
 8002434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002438:	f7fd ff38 	bl	80002ac <__adddf3>
 800243c:	4602      	mov	r2, r0
 800243e:	460b      	mov	r3, r1
 8002440:	494a      	ldr	r1, [pc, #296]	; (800256c <position_pid+0x274>)
 8002442:	e9c1 2300 	strd	r2, r3, [r1]

	if (p_PID >= 400)
 8002446:	4b49      	ldr	r3, [pc, #292]	; (800256c <position_pid+0x274>)
 8002448:	e9d3 0100 	ldrd	r0, r1, [r3]
 800244c:	f04f 0200 	mov.w	r2, #0
 8002450:	4b4b      	ldr	r3, [pc, #300]	; (8002580 <position_pid+0x288>)
 8002452:	f7fe fb67 	bl	8000b24 <__aeabi_dcmpge>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d006      	beq.n	800246a <position_pid+0x172>
	{
		p_PID = 400;
 800245c:	4943      	ldr	r1, [pc, #268]	; (800256c <position_pid+0x274>)
 800245e:	f04f 0200 	mov.w	r2, #0
 8002462:	4b47      	ldr	r3, [pc, #284]	; (8002580 <position_pid+0x288>)
 8002464:	e9c1 2300 	strd	r2, r3, [r1]
 8002468:	e010      	b.n	800248c <position_pid+0x194>
	}
	else if (p_PID <= -400)
 800246a:	4b40      	ldr	r3, [pc, #256]	; (800256c <position_pid+0x274>)
 800246c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002470:	f04f 0200 	mov.w	r2, #0
 8002474:	4b43      	ldr	r3, [pc, #268]	; (8002584 <position_pid+0x28c>)
 8002476:	f7fe fb4b 	bl	8000b10 <__aeabi_dcmple>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d005      	beq.n	800248c <position_pid+0x194>
	{
		p_PID = -400;
 8002480:	493a      	ldr	r1, [pc, #232]	; (800256c <position_pid+0x274>)
 8002482:	f04f 0200 	mov.w	r2, #0
 8002486:	4b3f      	ldr	r3, [pc, #252]	; (8002584 <position_pid+0x28c>)
 8002488:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if (p_PID > 0)
 800248c:	4b37      	ldr	r3, [pc, #220]	; (800256c <position_pid+0x274>)
 800248e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002492:	f04f 0200 	mov.w	r2, #0
 8002496:	f04f 0300 	mov.w	r3, #0
 800249a:	f7fe fb4d 	bl	8000b38 <__aeabi_dcmpgt>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d010      	beq.n	80024c6 <position_pid+0x1ce>
	{
		GPIOE->ODR &= ~1 << 0; // go
 80024a4:	4b38      	ldr	r3, [pc, #224]	; (8002588 <position_pid+0x290>)
 80024a6:	695b      	ldr	r3, [r3, #20]
 80024a8:	4a37      	ldr	r2, [pc, #220]	; (8002588 <position_pid+0x290>)
 80024aa:	f023 0301 	bic.w	r3, r3, #1
 80024ae:	6153      	str	r3, [r2, #20]
		TIM3->CCR1 = p_PID;
 80024b0:	4b2e      	ldr	r3, [pc, #184]	; (800256c <position_pid+0x274>)
 80024b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b6:	4c35      	ldr	r4, [pc, #212]	; (800258c <position_pid+0x294>)
 80024b8:	4610      	mov	r0, r2
 80024ba:	4619      	mov	r1, r3
 80024bc:	f7fe fb84 	bl	8000bc8 <__aeabi_d2uiz>
 80024c0:	4603      	mov	r3, r0
 80024c2:	6363      	str	r3, [r4, #52]	; 0x34
	}




}
 80024c4:	e036      	b.n	8002534 <position_pid+0x23c>
	else if (p_PID < 0)
 80024c6:	4b29      	ldr	r3, [pc, #164]	; (800256c <position_pid+0x274>)
 80024c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024cc:	f04f 0200 	mov.w	r2, #0
 80024d0:	f04f 0300 	mov.w	r3, #0
 80024d4:	f7fe fb12 	bl	8000afc <__aeabi_dcmplt>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d019      	beq.n	8002512 <position_pid+0x21a>
		GPIOE->ODR |= 1 << 0; // back
 80024de:	4b2a      	ldr	r3, [pc, #168]	; (8002588 <position_pid+0x290>)
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	4a29      	ldr	r2, [pc, #164]	; (8002588 <position_pid+0x290>)
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	6153      	str	r3, [r2, #20]
		p_PID = -p_PID;
 80024ea:	4b20      	ldr	r3, [pc, #128]	; (800256c <position_pid+0x274>)
 80024ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f0:	4614      	mov	r4, r2
 80024f2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80024f6:	4b1d      	ldr	r3, [pc, #116]	; (800256c <position_pid+0x274>)
 80024f8:	e9c3 4500 	strd	r4, r5, [r3]
		TIM3->CCR1 = p_PID;
 80024fc:	4b1b      	ldr	r3, [pc, #108]	; (800256c <position_pid+0x274>)
 80024fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002502:	4c22      	ldr	r4, [pc, #136]	; (800258c <position_pid+0x294>)
 8002504:	4610      	mov	r0, r2
 8002506:	4619      	mov	r1, r3
 8002508:	f7fe fb5e 	bl	8000bc8 <__aeabi_d2uiz>
 800250c:	4603      	mov	r3, r0
 800250e:	6363      	str	r3, [r4, #52]	; 0x34
}
 8002510:	e010      	b.n	8002534 <position_pid+0x23c>
		p_PID = 0;
 8002512:	4916      	ldr	r1, [pc, #88]	; (800256c <position_pid+0x274>)
 8002514:	f04f 0200 	mov.w	r2, #0
 8002518:	f04f 0300 	mov.w	r3, #0
 800251c:	e9c1 2300 	strd	r2, r3, [r1]
		TIM3->CCR1 = p_PID;
 8002520:	4b12      	ldr	r3, [pc, #72]	; (800256c <position_pid+0x274>)
 8002522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002526:	4c19      	ldr	r4, [pc, #100]	; (800258c <position_pid+0x294>)
 8002528:	4610      	mov	r0, r2
 800252a:	4619      	mov	r1, r3
 800252c:	f7fe fb4c 	bl	8000bc8 <__aeabi_d2uiz>
 8002530:	4603      	mov	r3, r0
 8002532:	6363      	str	r3, [r4, #52]	; 0x34
}
 8002534:	bf00      	nop
 8002536:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800253a:	bf00      	nop
 800253c:	f3af 8000 	nop.w
 8002540:	eb1c432d 	.word	0xeb1c432d
 8002544:	3f1a36e2 	.word	0x3f1a36e2
 8002548:	20000e30 	.word	0x20000e30
 800254c:	20000e34 	.word	0x20000e34
 8002550:	20000e38 	.word	0x20000e38
 8002554:	3c23d70a 	.word	0x3c23d70a
 8002558:	20000e1a 	.word	0x20000e1a
 800255c:	20000000 	.word	0x20000000
 8002560:	20000e1c 	.word	0x20000e1c
 8002564:	20000e3c 	.word	0x20000e3c
 8002568:	20000e20 	.word	0x20000e20
 800256c:	20000e28 	.word	0x20000e28
 8002570:	20000e40 	.word	0x20000e40
 8002574:	20000e58 	.word	0x20000e58
 8002578:	20000e50 	.word	0x20000e50
 800257c:	20000e48 	.word	0x20000e48
 8002580:	40790000 	.word	0x40790000
 8002584:	c0790000 	.word	0xc0790000
 8002588:	40021000 	.word	0x40021000
 800258c:	40000400 	.word	0x40000400

08002590 <distance_sencor>:
uint16_t j=0;

extern TIM_HandleTypeDef htim1;

void distance_sencor (void)
{
 8002590:	b598      	push	{r3, r4, r7, lr}
 8002592:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8002594:	2201      	movs	r2, #1
 8002596:	2180      	movs	r1, #128	; 0x80
 8002598:	4849      	ldr	r0, [pc, #292]	; (80026c0 <distance_sencor+0x130>)
 800259a:	f003 f8a1 	bl	80056e0 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800259e:	4b49      	ldr	r3, [pc, #292]	; (80026c4 <distance_sencor+0x134>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2200      	movs	r2, #0
 80025a4:	625a      	str	r2, [r3, #36]	; 0x24
    while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 80025a6:	bf00      	nop
 80025a8:	4b46      	ldr	r3, [pc, #280]	; (80026c4 <distance_sencor+0x134>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ae:	2b09      	cmp	r3, #9
 80025b0:	d9fa      	bls.n	80025a8 <distance_sencor+0x18>
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 80025b2:	2200      	movs	r2, #0
 80025b4:	2180      	movs	r1, #128	; 0x80
 80025b6:	4842      	ldr	r0, [pc, #264]	; (80026c0 <distance_sencor+0x130>)
 80025b8:	f003 f892 	bl	80056e0 <HAL_GPIO_WritePin>

    pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 80025bc:	f001 f924 	bl	8003808 <HAL_GetTick>
 80025c0:	4603      	mov	r3, r0
 80025c2:	4a41      	ldr	r2, [pc, #260]	; (80026c8 <distance_sencor+0x138>)
 80025c4:	6013      	str	r3, [r2, #0]
    // wait for the echo pin to go high
    while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 80025c6:	bf00      	nop
 80025c8:	2140      	movs	r1, #64	; 0x40
 80025ca:	483d      	ldr	r0, [pc, #244]	; (80026c0 <distance_sencor+0x130>)
 80025cc:	f003 f870 	bl	80056b0 <HAL_GPIO_ReadPin>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d108      	bne.n	80025e8 <distance_sencor+0x58>
 80025d6:	4b3c      	ldr	r3, [pc, #240]	; (80026c8 <distance_sencor+0x138>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f103 040a 	add.w	r4, r3, #10
 80025de:	f001 f913 	bl	8003808 <HAL_GetTick>
 80025e2:	4603      	mov	r3, r0
 80025e4:	429c      	cmp	r4, r3
 80025e6:	d8ef      	bhi.n	80025c8 <distance_sencor+0x38>
    Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 80025e8:	4b36      	ldr	r3, [pc, #216]	; (80026c4 <distance_sencor+0x134>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ee:	4a37      	ldr	r2, [pc, #220]	; (80026cc <distance_sencor+0x13c>)
 80025f0:	6013      	str	r3, [r2, #0]

    pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 80025f2:	f001 f909 	bl	8003808 <HAL_GetTick>
 80025f6:	4603      	mov	r3, r0
 80025f8:	4a33      	ldr	r2, [pc, #204]	; (80026c8 <distance_sencor+0x138>)
 80025fa:	6013      	str	r3, [r2, #0]
    // wait for the echo pin to go low
    while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 80025fc:	bf00      	nop
 80025fe:	2140      	movs	r1, #64	; 0x40
 8002600:	482f      	ldr	r0, [pc, #188]	; (80026c0 <distance_sencor+0x130>)
 8002602:	f003 f855 	bl	80056b0 <HAL_GPIO_ReadPin>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d008      	beq.n	800261e <distance_sencor+0x8e>
 800260c:	4b2e      	ldr	r3, [pc, #184]	; (80026c8 <distance_sencor+0x138>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8002614:	f001 f8f8 	bl	8003808 <HAL_GetTick>
 8002618:	4603      	mov	r3, r0
 800261a:	429c      	cmp	r4, r3
 800261c:	d8ef      	bhi.n	80025fe <distance_sencor+0x6e>
    Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 800261e:	4b29      	ldr	r3, [pc, #164]	; (80026c4 <distance_sencor+0x134>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002624:	4a2a      	ldr	r2, [pc, #168]	; (80026d0 <distance_sencor+0x140>)
 8002626:	6013      	str	r3, [r2, #0]

    Distance = (Value2-Value1)* 0.017/2;
 8002628:	4b29      	ldr	r3, [pc, #164]	; (80026d0 <distance_sencor+0x140>)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	4b27      	ldr	r3, [pc, #156]	; (80026cc <distance_sencor+0x13c>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	4618      	mov	r0, r3
 8002634:	f7fd ff76 	bl	8000524 <__aeabi_ui2d>
 8002638:	a31f      	add	r3, pc, #124	; (adr r3, 80026b8 <distance_sencor+0x128>)
 800263a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800263e:	f7fd ffeb 	bl	8000618 <__aeabi_dmul>
 8002642:	4602      	mov	r2, r0
 8002644:	460b      	mov	r3, r1
 8002646:	4610      	mov	r0, r2
 8002648:	4619      	mov	r1, r3
 800264a:	f04f 0200 	mov.w	r2, #0
 800264e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002652:	f7fe f90b 	bl	800086c <__aeabi_ddiv>
 8002656:	4602      	mov	r2, r0
 8002658:	460b      	mov	r3, r1
 800265a:	4610      	mov	r0, r2
 800265c:	4619      	mov	r1, r3
 800265e:	f7fe fad3 	bl	8000c08 <__aeabi_d2f>
 8002662:	4603      	mov	r3, r0
 8002664:	4a1b      	ldr	r2, [pc, #108]	; (80026d4 <distance_sencor+0x144>)
 8002666:	6013      	str	r3, [r2, #0]

    Distance_Sum = Distance + Distance_Sum;
 8002668:	4b1a      	ldr	r3, [pc, #104]	; (80026d4 <distance_sencor+0x144>)
 800266a:	ed93 7a00 	vldr	s14, [r3]
 800266e:	4b1a      	ldr	r3, [pc, #104]	; (80026d8 <distance_sencor+0x148>)
 8002670:	edd3 7a00 	vldr	s15, [r3]
 8002674:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002678:	4b17      	ldr	r3, [pc, #92]	; (80026d8 <distance_sencor+0x148>)
 800267a:	edc3 7a00 	vstr	s15, [r3]
    	  j++;
 800267e:	4b17      	ldr	r3, [pc, #92]	; (80026dc <distance_sencor+0x14c>)
 8002680:	881b      	ldrh	r3, [r3, #0]
 8002682:	3301      	adds	r3, #1
 8002684:	b29a      	uxth	r2, r3
 8002686:	4b15      	ldr	r3, [pc, #84]	; (80026dc <distance_sencor+0x14c>)
 8002688:	801a      	strh	r2, [r3, #0]
    	 	 if(j==200)
 800268a:	4b14      	ldr	r3, [pc, #80]	; (80026dc <distance_sencor+0x14c>)
 800268c:	881b      	ldrh	r3, [r3, #0]
 800268e:	2bc8      	cmp	r3, #200	; 0xc8
 8002690:	d110      	bne.n	80026b4 <distance_sencor+0x124>
    	 	  {
    	 		Distance_Avg = Distance_Sum/201;
 8002692:	4b11      	ldr	r3, [pc, #68]	; (80026d8 <distance_sencor+0x148>)
 8002694:	ed93 7a00 	vldr	s14, [r3]
 8002698:	eddf 6a11 	vldr	s13, [pc, #68]	; 80026e0 <distance_sencor+0x150>
 800269c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026a0:	4b10      	ldr	r3, [pc, #64]	; (80026e4 <distance_sencor+0x154>)
 80026a2:	edc3 7a00 	vstr	s15, [r3]

    	 			  j=0;
 80026a6:	4b0d      	ldr	r3, [pc, #52]	; (80026dc <distance_sencor+0x14c>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	801a      	strh	r2, [r3, #0]
    	 			 Distance_Sum=0;
 80026ac:	4b0a      	ldr	r3, [pc, #40]	; (80026d8 <distance_sencor+0x148>)
 80026ae:	f04f 0200 	mov.w	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]

    //     printf("Distance = %f \r\n",Distance);
	//      sprintf((char *)buffer, "%d \r\n",Distance);
		 //     HAL_UART_Transmit(&huart3, buffer, strlen((char *)buffer), 100);

}
 80026b4:	bf00      	nop
 80026b6:	bd98      	pop	{r3, r4, r7, pc}
 80026b8:	b020c49c 	.word	0xb020c49c
 80026bc:	3f916872 	.word	0x3f916872
 80026c0:	40020c00 	.word	0x40020c00
 80026c4:	20000690 	.word	0x20000690
 80026c8:	20000e5c 	.word	0x20000e5c
 80026cc:	20000e60 	.word	0x20000e60
 80026d0:	20000e64 	.word	0x20000e64
 80026d4:	20000e68 	.word	0x20000e68
 80026d8:	20000e6c 	.word	0x20000e6c
 80026dc:	20000e74 	.word	0x20000e74
 80026e0:	43490000 	.word	0x43490000
 80026e4:	20000e70 	.word	0x20000e70

080026e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ee:	2300      	movs	r3, #0
 80026f0:	607b      	str	r3, [r7, #4]
 80026f2:	4b10      	ldr	r3, [pc, #64]	; (8002734 <HAL_MspInit+0x4c>)
 80026f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f6:	4a0f      	ldr	r2, [pc, #60]	; (8002734 <HAL_MspInit+0x4c>)
 80026f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026fc:	6453      	str	r3, [r2, #68]	; 0x44
 80026fe:	4b0d      	ldr	r3, [pc, #52]	; (8002734 <HAL_MspInit+0x4c>)
 8002700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002706:	607b      	str	r3, [r7, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	603b      	str	r3, [r7, #0]
 800270e:	4b09      	ldr	r3, [pc, #36]	; (8002734 <HAL_MspInit+0x4c>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	4a08      	ldr	r2, [pc, #32]	; (8002734 <HAL_MspInit+0x4c>)
 8002714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002718:	6413      	str	r3, [r2, #64]	; 0x40
 800271a:	4b06      	ldr	r3, [pc, #24]	; (8002734 <HAL_MspInit+0x4c>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002722:	603b      	str	r3, [r7, #0]
 8002724:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	40023800 	.word	0x40023800

08002738 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b08a      	sub	sp, #40	; 0x28
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002740:	f107 0314 	add.w	r3, r7, #20
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	605a      	str	r2, [r3, #4]
 800274a:	609a      	str	r2, [r3, #8]
 800274c:	60da      	str	r2, [r3, #12]
 800274e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a40      	ldr	r2, [pc, #256]	; (8002858 <HAL_ADC_MspInit+0x120>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d17a      	bne.n	8002850 <HAL_ADC_MspInit+0x118>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	4b3f      	ldr	r3, [pc, #252]	; (800285c <HAL_ADC_MspInit+0x124>)
 8002760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002762:	4a3e      	ldr	r2, [pc, #248]	; (800285c <HAL_ADC_MspInit+0x124>)
 8002764:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002768:	6453      	str	r3, [r2, #68]	; 0x44
 800276a:	4b3c      	ldr	r3, [pc, #240]	; (800285c <HAL_ADC_MspInit+0x124>)
 800276c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002772:	613b      	str	r3, [r7, #16]
 8002774:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	4b38      	ldr	r3, [pc, #224]	; (800285c <HAL_ADC_MspInit+0x124>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	4a37      	ldr	r2, [pc, #220]	; (800285c <HAL_ADC_MspInit+0x124>)
 8002780:	f043 0320 	orr.w	r3, r3, #32
 8002784:	6313      	str	r3, [r2, #48]	; 0x30
 8002786:	4b35      	ldr	r3, [pc, #212]	; (800285c <HAL_ADC_MspInit+0x124>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	f003 0320 	and.w	r3, r3, #32
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	60bb      	str	r3, [r7, #8]
 8002796:	4b31      	ldr	r3, [pc, #196]	; (800285c <HAL_ADC_MspInit+0x124>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	4a30      	ldr	r2, [pc, #192]	; (800285c <HAL_ADC_MspInit+0x124>)
 800279c:	f043 0304 	orr.w	r3, r3, #4
 80027a0:	6313      	str	r3, [r2, #48]	; 0x30
 80027a2:	4b2e      	ldr	r3, [pc, #184]	; (800285c <HAL_ADC_MspInit+0x124>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	f003 0304 	and.w	r3, r3, #4
 80027aa:	60bb      	str	r3, [r7, #8]
 80027ac:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PF4     ------> ADC3_IN14
    PC2     ------> ADC3_IN12
    PC3     ------> ADC3_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80027ae:	2310      	movs	r3, #16
 80027b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027b2:	2303      	movs	r3, #3
 80027b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b6:	2300      	movs	r3, #0
 80027b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80027ba:	f107 0314 	add.w	r3, r7, #20
 80027be:	4619      	mov	r1, r3
 80027c0:	4827      	ldr	r0, [pc, #156]	; (8002860 <HAL_ADC_MspInit+0x128>)
 80027c2:	f002 fdc9 	bl	8005358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80027c6:	230c      	movs	r3, #12
 80027c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027ca:	2303      	movs	r3, #3
 80027cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ce:	2300      	movs	r3, #0
 80027d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027d2:	f107 0314 	add.w	r3, r7, #20
 80027d6:	4619      	mov	r1, r3
 80027d8:	4822      	ldr	r0, [pc, #136]	; (8002864 <HAL_ADC_MspInit+0x12c>)
 80027da:	f002 fdbd 	bl	8005358 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream1;
 80027de:	4b22      	ldr	r3, [pc, #136]	; (8002868 <HAL_ADC_MspInit+0x130>)
 80027e0:	4a22      	ldr	r2, [pc, #136]	; (800286c <HAL_ADC_MspInit+0x134>)
 80027e2:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 80027e4:	4b20      	ldr	r3, [pc, #128]	; (8002868 <HAL_ADC_MspInit+0x130>)
 80027e6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80027ea:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027ec:	4b1e      	ldr	r3, [pc, #120]	; (8002868 <HAL_ADC_MspInit+0x130>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80027f2:	4b1d      	ldr	r3, [pc, #116]	; (8002868 <HAL_ADC_MspInit+0x130>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80027f8:	4b1b      	ldr	r3, [pc, #108]	; (8002868 <HAL_ADC_MspInit+0x130>)
 80027fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027fe:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002800:	4b19      	ldr	r3, [pc, #100]	; (8002868 <HAL_ADC_MspInit+0x130>)
 8002802:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002806:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002808:	4b17      	ldr	r3, [pc, #92]	; (8002868 <HAL_ADC_MspInit+0x130>)
 800280a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800280e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002810:	4b15      	ldr	r3, [pc, #84]	; (8002868 <HAL_ADC_MspInit+0x130>)
 8002812:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002816:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002818:	4b13      	ldr	r3, [pc, #76]	; (8002868 <HAL_ADC_MspInit+0x130>)
 800281a:	2200      	movs	r2, #0
 800281c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800281e:	4b12      	ldr	r3, [pc, #72]	; (8002868 <HAL_ADC_MspInit+0x130>)
 8002820:	2200      	movs	r2, #0
 8002822:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002824:	4810      	ldr	r0, [pc, #64]	; (8002868 <HAL_ADC_MspInit+0x130>)
 8002826:	f001 fe6d 	bl	8004504 <HAL_DMA_Init>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8002830:	f7ff fd5c 	bl	80022ec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a0c      	ldr	r2, [pc, #48]	; (8002868 <HAL_ADC_MspInit+0x130>)
 8002838:	639a      	str	r2, [r3, #56]	; 0x38
 800283a:	4a0b      	ldr	r2, [pc, #44]	; (8002868 <HAL_ADC_MspInit+0x130>)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002840:	2200      	movs	r2, #0
 8002842:	2100      	movs	r1, #0
 8002844:	2012      	movs	r0, #18
 8002846:	f001 fe26 	bl	8004496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800284a:	2012      	movs	r0, #18
 800284c:	f001 fe3f 	bl	80044ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002850:	bf00      	nop
 8002852:	3728      	adds	r7, #40	; 0x28
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40012200 	.word	0x40012200
 800285c:	40023800 	.word	0x40023800
 8002860:	40021400 	.word	0x40021400
 8002864:	40020800 	.word	0x40020800
 8002868:	20000580 	.word	0x20000580
 800286c:	40026428 	.word	0x40026428

08002870 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b08e      	sub	sp, #56	; 0x38
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002878:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	605a      	str	r2, [r3, #4]
 8002882:	609a      	str	r2, [r3, #8]
 8002884:	60da      	str	r2, [r3, #12]
 8002886:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a55      	ldr	r2, [pc, #340]	; (80029e4 <HAL_ETH_MspInit+0x174>)
 800288e:	4293      	cmp	r3, r2
 8002890:	f040 80a4 	bne.w	80029dc <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002894:	2300      	movs	r3, #0
 8002896:	623b      	str	r3, [r7, #32]
 8002898:	4b53      	ldr	r3, [pc, #332]	; (80029e8 <HAL_ETH_MspInit+0x178>)
 800289a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289c:	4a52      	ldr	r2, [pc, #328]	; (80029e8 <HAL_ETH_MspInit+0x178>)
 800289e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028a2:	6313      	str	r3, [r2, #48]	; 0x30
 80028a4:	4b50      	ldr	r3, [pc, #320]	; (80029e8 <HAL_ETH_MspInit+0x178>)
 80028a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ac:	623b      	str	r3, [r7, #32]
 80028ae:	6a3b      	ldr	r3, [r7, #32]
 80028b0:	2300      	movs	r3, #0
 80028b2:	61fb      	str	r3, [r7, #28]
 80028b4:	4b4c      	ldr	r3, [pc, #304]	; (80029e8 <HAL_ETH_MspInit+0x178>)
 80028b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b8:	4a4b      	ldr	r2, [pc, #300]	; (80029e8 <HAL_ETH_MspInit+0x178>)
 80028ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028be:	6313      	str	r3, [r2, #48]	; 0x30
 80028c0:	4b49      	ldr	r3, [pc, #292]	; (80029e8 <HAL_ETH_MspInit+0x178>)
 80028c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028c8:	61fb      	str	r3, [r7, #28]
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	2300      	movs	r3, #0
 80028ce:	61bb      	str	r3, [r7, #24]
 80028d0:	4b45      	ldr	r3, [pc, #276]	; (80029e8 <HAL_ETH_MspInit+0x178>)
 80028d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d4:	4a44      	ldr	r2, [pc, #272]	; (80029e8 <HAL_ETH_MspInit+0x178>)
 80028d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80028da:	6313      	str	r3, [r2, #48]	; 0x30
 80028dc:	4b42      	ldr	r3, [pc, #264]	; (80029e8 <HAL_ETH_MspInit+0x178>)
 80028de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028e4:	61bb      	str	r3, [r7, #24]
 80028e6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028e8:	2300      	movs	r3, #0
 80028ea:	617b      	str	r3, [r7, #20]
 80028ec:	4b3e      	ldr	r3, [pc, #248]	; (80029e8 <HAL_ETH_MspInit+0x178>)
 80028ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f0:	4a3d      	ldr	r2, [pc, #244]	; (80029e8 <HAL_ETH_MspInit+0x178>)
 80028f2:	f043 0304 	orr.w	r3, r3, #4
 80028f6:	6313      	str	r3, [r2, #48]	; 0x30
 80028f8:	4b3b      	ldr	r3, [pc, #236]	; (80029e8 <HAL_ETH_MspInit+0x178>)
 80028fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	617b      	str	r3, [r7, #20]
 8002902:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002904:	2300      	movs	r3, #0
 8002906:	613b      	str	r3, [r7, #16]
 8002908:	4b37      	ldr	r3, [pc, #220]	; (80029e8 <HAL_ETH_MspInit+0x178>)
 800290a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290c:	4a36      	ldr	r2, [pc, #216]	; (80029e8 <HAL_ETH_MspInit+0x178>)
 800290e:	f043 0301 	orr.w	r3, r3, #1
 8002912:	6313      	str	r3, [r2, #48]	; 0x30
 8002914:	4b34      	ldr	r3, [pc, #208]	; (80029e8 <HAL_ETH_MspInit+0x178>)
 8002916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	613b      	str	r3, [r7, #16]
 800291e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002920:	2300      	movs	r3, #0
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	4b30      	ldr	r3, [pc, #192]	; (80029e8 <HAL_ETH_MspInit+0x178>)
 8002926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002928:	4a2f      	ldr	r2, [pc, #188]	; (80029e8 <HAL_ETH_MspInit+0x178>)
 800292a:	f043 0302 	orr.w	r3, r3, #2
 800292e:	6313      	str	r3, [r2, #48]	; 0x30
 8002930:	4b2d      	ldr	r3, [pc, #180]	; (80029e8 <HAL_ETH_MspInit+0x178>)
 8002932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800293c:	2300      	movs	r3, #0
 800293e:	60bb      	str	r3, [r7, #8]
 8002940:	4b29      	ldr	r3, [pc, #164]	; (80029e8 <HAL_ETH_MspInit+0x178>)
 8002942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002944:	4a28      	ldr	r2, [pc, #160]	; (80029e8 <HAL_ETH_MspInit+0x178>)
 8002946:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800294a:	6313      	str	r3, [r2, #48]	; 0x30
 800294c:	4b26      	ldr	r3, [pc, #152]	; (80029e8 <HAL_ETH_MspInit+0x178>)
 800294e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002954:	60bb      	str	r3, [r7, #8]
 8002956:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002958:	2332      	movs	r3, #50	; 0x32
 800295a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295c:	2302      	movs	r3, #2
 800295e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002960:	2300      	movs	r3, #0
 8002962:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002964:	2303      	movs	r3, #3
 8002966:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002968:	230b      	movs	r3, #11
 800296a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800296c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002970:	4619      	mov	r1, r3
 8002972:	481e      	ldr	r0, [pc, #120]	; (80029ec <HAL_ETH_MspInit+0x17c>)
 8002974:	f002 fcf0 	bl	8005358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002978:	2386      	movs	r3, #134	; 0x86
 800297a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297c:	2302      	movs	r3, #2
 800297e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002980:	2300      	movs	r3, #0
 8002982:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002984:	2303      	movs	r3, #3
 8002986:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002988:	230b      	movs	r3, #11
 800298a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800298c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002990:	4619      	mov	r1, r3
 8002992:	4817      	ldr	r0, [pc, #92]	; (80029f0 <HAL_ETH_MspInit+0x180>)
 8002994:	f002 fce0 	bl	8005358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002998:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800299c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299e:	2302      	movs	r3, #2
 80029a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a2:	2300      	movs	r3, #0
 80029a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a6:	2303      	movs	r3, #3
 80029a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80029aa:	230b      	movs	r3, #11
 80029ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80029ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029b2:	4619      	mov	r1, r3
 80029b4:	480f      	ldr	r0, [pc, #60]	; (80029f4 <HAL_ETH_MspInit+0x184>)
 80029b6:	f002 fccf 	bl	8005358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80029ba:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80029be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c0:	2302      	movs	r3, #2
 80029c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c4:	2300      	movs	r3, #0
 80029c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029c8:	2303      	movs	r3, #3
 80029ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80029cc:	230b      	movs	r3, #11
 80029ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029d4:	4619      	mov	r1, r3
 80029d6:	4808      	ldr	r0, [pc, #32]	; (80029f8 <HAL_ETH_MspInit+0x188>)
 80029d8:	f002 fcbe 	bl	8005358 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80029dc:	bf00      	nop
 80029de:	3738      	adds	r7, #56	; 0x38
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40028000 	.word	0x40028000
 80029e8:	40023800 	.word	0x40023800
 80029ec:	40020800 	.word	0x40020800
 80029f0:	40020000 	.word	0x40020000
 80029f4:	40020400 	.word	0x40020400
 80029f8:	40021800 	.word	0x40021800

080029fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b088      	sub	sp, #32
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a54      	ldr	r2, [pc, #336]	; (8002b5c <HAL_TIM_Base_MspInit+0x160>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d10e      	bne.n	8002a2c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a0e:	2300      	movs	r3, #0
 8002a10:	61fb      	str	r3, [r7, #28]
 8002a12:	4b53      	ldr	r3, [pc, #332]	; (8002b60 <HAL_TIM_Base_MspInit+0x164>)
 8002a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a16:	4a52      	ldr	r2, [pc, #328]	; (8002b60 <HAL_TIM_Base_MspInit+0x164>)
 8002a18:	f043 0301 	orr.w	r3, r3, #1
 8002a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a1e:	4b50      	ldr	r3, [pc, #320]	; (8002b60 <HAL_TIM_Base_MspInit+0x164>)
 8002a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	61fb      	str	r3, [r7, #28]
 8002a28:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002a2a:	e092      	b.n	8002b52 <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM3)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a4c      	ldr	r2, [pc, #304]	; (8002b64 <HAL_TIM_Base_MspInit+0x168>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d116      	bne.n	8002a64 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a36:	2300      	movs	r3, #0
 8002a38:	61bb      	str	r3, [r7, #24]
 8002a3a:	4b49      	ldr	r3, [pc, #292]	; (8002b60 <HAL_TIM_Base_MspInit+0x164>)
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	4a48      	ldr	r2, [pc, #288]	; (8002b60 <HAL_TIM_Base_MspInit+0x164>)
 8002a40:	f043 0302 	orr.w	r3, r3, #2
 8002a44:	6413      	str	r3, [r2, #64]	; 0x40
 8002a46:	4b46      	ldr	r3, [pc, #280]	; (8002b60 <HAL_TIM_Base_MspInit+0x164>)
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	61bb      	str	r3, [r7, #24]
 8002a50:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002a52:	2200      	movs	r2, #0
 8002a54:	2100      	movs	r1, #0
 8002a56:	201d      	movs	r0, #29
 8002a58:	f001 fd1d 	bl	8004496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a5c:	201d      	movs	r0, #29
 8002a5e:	f001 fd36 	bl	80044ce <HAL_NVIC_EnableIRQ>
}
 8002a62:	e076      	b.n	8002b52 <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM6)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a3f      	ldr	r2, [pc, #252]	; (8002b68 <HAL_TIM_Base_MspInit+0x16c>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d116      	bne.n	8002a9c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002a6e:	2300      	movs	r3, #0
 8002a70:	617b      	str	r3, [r7, #20]
 8002a72:	4b3b      	ldr	r3, [pc, #236]	; (8002b60 <HAL_TIM_Base_MspInit+0x164>)
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	4a3a      	ldr	r2, [pc, #232]	; (8002b60 <HAL_TIM_Base_MspInit+0x164>)
 8002a78:	f043 0310 	orr.w	r3, r3, #16
 8002a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a7e:	4b38      	ldr	r3, [pc, #224]	; (8002b60 <HAL_TIM_Base_MspInit+0x164>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	f003 0310 	and.w	r3, r3, #16
 8002a86:	617b      	str	r3, [r7, #20]
 8002a88:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	2106      	movs	r1, #6
 8002a8e:	2036      	movs	r0, #54	; 0x36
 8002a90:	f001 fd01 	bl	8004496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002a94:	2036      	movs	r0, #54	; 0x36
 8002a96:	f001 fd1a 	bl	80044ce <HAL_NVIC_EnableIRQ>
}
 8002a9a:	e05a      	b.n	8002b52 <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM8)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a32      	ldr	r2, [pc, #200]	; (8002b6c <HAL_TIM_Base_MspInit+0x170>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d11e      	bne.n	8002ae4 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	613b      	str	r3, [r7, #16]
 8002aaa:	4b2d      	ldr	r3, [pc, #180]	; (8002b60 <HAL_TIM_Base_MspInit+0x164>)
 8002aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aae:	4a2c      	ldr	r2, [pc, #176]	; (8002b60 <HAL_TIM_Base_MspInit+0x164>)
 8002ab0:	f043 0302 	orr.w	r3, r3, #2
 8002ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ab6:	4b2a      	ldr	r3, [pc, #168]	; (8002b60 <HAL_TIM_Base_MspInit+0x164>)
 8002ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	613b      	str	r3, [r7, #16]
 8002ac0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	202c      	movs	r0, #44	; 0x2c
 8002ac8:	f001 fce5 	bl	8004496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002acc:	202c      	movs	r0, #44	; 0x2c
 8002ace:	f001 fcfe 	bl	80044ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	202d      	movs	r0, #45	; 0x2d
 8002ad8:	f001 fcdd 	bl	8004496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002adc:	202d      	movs	r0, #45	; 0x2d
 8002ade:	f001 fcf6 	bl	80044ce <HAL_NVIC_EnableIRQ>
}
 8002ae2:	e036      	b.n	8002b52 <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM13)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a21      	ldr	r2, [pc, #132]	; (8002b70 <HAL_TIM_Base_MspInit+0x174>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d116      	bne.n	8002b1c <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	4b1b      	ldr	r3, [pc, #108]	; (8002b60 <HAL_TIM_Base_MspInit+0x164>)
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	4a1a      	ldr	r2, [pc, #104]	; (8002b60 <HAL_TIM_Base_MspInit+0x164>)
 8002af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002afc:	6413      	str	r3, [r2, #64]	; 0x40
 8002afe:	4b18      	ldr	r3, [pc, #96]	; (8002b60 <HAL_TIM_Base_MspInit+0x164>)
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	202c      	movs	r0, #44	; 0x2c
 8002b10:	f001 fcc1 	bl	8004496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002b14:	202c      	movs	r0, #44	; 0x2c
 8002b16:	f001 fcda 	bl	80044ce <HAL_NVIC_EnableIRQ>
}
 8002b1a:	e01a      	b.n	8002b52 <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM14)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a14      	ldr	r2, [pc, #80]	; (8002b74 <HAL_TIM_Base_MspInit+0x178>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d115      	bne.n	8002b52 <HAL_TIM_Base_MspInit+0x156>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002b26:	2300      	movs	r3, #0
 8002b28:	60bb      	str	r3, [r7, #8]
 8002b2a:	4b0d      	ldr	r3, [pc, #52]	; (8002b60 <HAL_TIM_Base_MspInit+0x164>)
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	4a0c      	ldr	r2, [pc, #48]	; (8002b60 <HAL_TIM_Base_MspInit+0x164>)
 8002b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b34:	6413      	str	r3, [r2, #64]	; 0x40
 8002b36:	4b0a      	ldr	r3, [pc, #40]	; (8002b60 <HAL_TIM_Base_MspInit+0x164>)
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3e:	60bb      	str	r3, [r7, #8]
 8002b40:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002b42:	2200      	movs	r2, #0
 8002b44:	2100      	movs	r1, #0
 8002b46:	202d      	movs	r0, #45	; 0x2d
 8002b48:	f001 fca5 	bl	8004496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002b4c:	202d      	movs	r0, #45	; 0x2d
 8002b4e:	f001 fcbe 	bl	80044ce <HAL_NVIC_EnableIRQ>
}
 8002b52:	bf00      	nop
 8002b54:	3720      	adds	r7, #32
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40010000 	.word	0x40010000
 8002b60:	40023800 	.word	0x40023800
 8002b64:	40000400 	.word	0x40000400
 8002b68:	40001000 	.word	0x40001000
 8002b6c:	40010400 	.word	0x40010400
 8002b70:	40001c00 	.word	0x40001c00
 8002b74:	40002000 	.word	0x40002000

08002b78 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b08c      	sub	sp, #48	; 0x30
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b80:	f107 031c 	add.w	r3, r7, #28
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	605a      	str	r2, [r3, #4]
 8002b8a:	609a      	str	r2, [r3, #8]
 8002b8c:	60da      	str	r2, [r3, #12]
 8002b8e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b98:	d14b      	bne.n	8002c32 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61bb      	str	r3, [r7, #24]
 8002b9e:	4b58      	ldr	r3, [pc, #352]	; (8002d00 <HAL_TIM_Encoder_MspInit+0x188>)
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	4a57      	ldr	r2, [pc, #348]	; (8002d00 <HAL_TIM_Encoder_MspInit+0x188>)
 8002ba4:	f043 0301 	orr.w	r3, r3, #1
 8002ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8002baa:	4b55      	ldr	r3, [pc, #340]	; (8002d00 <HAL_TIM_Encoder_MspInit+0x188>)
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	61bb      	str	r3, [r7, #24]
 8002bb4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	617b      	str	r3, [r7, #20]
 8002bba:	4b51      	ldr	r3, [pc, #324]	; (8002d00 <HAL_TIM_Encoder_MspInit+0x188>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbe:	4a50      	ldr	r2, [pc, #320]	; (8002d00 <HAL_TIM_Encoder_MspInit+0x188>)
 8002bc0:	f043 0301 	orr.w	r3, r3, #1
 8002bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc6:	4b4e      	ldr	r3, [pc, #312]	; (8002d00 <HAL_TIM_Encoder_MspInit+0x188>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	617b      	str	r3, [r7, #20]
 8002bd0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	613b      	str	r3, [r7, #16]
 8002bd6:	4b4a      	ldr	r3, [pc, #296]	; (8002d00 <HAL_TIM_Encoder_MspInit+0x188>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bda:	4a49      	ldr	r2, [pc, #292]	; (8002d00 <HAL_TIM_Encoder_MspInit+0x188>)
 8002bdc:	f043 0302 	orr.w	r3, r3, #2
 8002be0:	6313      	str	r3, [r2, #48]	; 0x30
 8002be2:	4b47      	ldr	r3, [pc, #284]	; (8002d00 <HAL_TIM_Encoder_MspInit+0x188>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	613b      	str	r3, [r7, #16]
 8002bec:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002bee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c00:	2301      	movs	r3, #1
 8002c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c04:	f107 031c 	add.w	r3, r7, #28
 8002c08:	4619      	mov	r1, r3
 8002c0a:	483e      	ldr	r0, [pc, #248]	; (8002d04 <HAL_TIM_Encoder_MspInit+0x18c>)
 8002c0c:	f002 fba4 	bl	8005358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002c10:	2308      	movs	r3, #8
 8002c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c14:	2302      	movs	r3, #2
 8002c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c20:	2301      	movs	r3, #1
 8002c22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c24:	f107 031c 	add.w	r3, r7, #28
 8002c28:	4619      	mov	r1, r3
 8002c2a:	4837      	ldr	r0, [pc, #220]	; (8002d08 <HAL_TIM_Encoder_MspInit+0x190>)
 8002c2c:	f002 fb94 	bl	8005358 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002c30:	e061      	b.n	8002cf6 <HAL_TIM_Encoder_MspInit+0x17e>
  else if(htim_encoder->Instance==TIM4)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a35      	ldr	r2, [pc, #212]	; (8002d0c <HAL_TIM_Encoder_MspInit+0x194>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d15c      	bne.n	8002cf6 <HAL_TIM_Encoder_MspInit+0x17e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	4b2f      	ldr	r3, [pc, #188]	; (8002d00 <HAL_TIM_Encoder_MspInit+0x188>)
 8002c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c44:	4a2e      	ldr	r2, [pc, #184]	; (8002d00 <HAL_TIM_Encoder_MspInit+0x188>)
 8002c46:	f043 0304 	orr.w	r3, r3, #4
 8002c4a:	6413      	str	r3, [r2, #64]	; 0x40
 8002c4c:	4b2c      	ldr	r3, [pc, #176]	; (8002d00 <HAL_TIM_Encoder_MspInit+0x188>)
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c58:	2300      	movs	r3, #0
 8002c5a:	60bb      	str	r3, [r7, #8]
 8002c5c:	4b28      	ldr	r3, [pc, #160]	; (8002d00 <HAL_TIM_Encoder_MspInit+0x188>)
 8002c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c60:	4a27      	ldr	r2, [pc, #156]	; (8002d00 <HAL_TIM_Encoder_MspInit+0x188>)
 8002c62:	f043 0308 	orr.w	r3, r3, #8
 8002c66:	6313      	str	r3, [r2, #48]	; 0x30
 8002c68:	4b25      	ldr	r3, [pc, #148]	; (8002d00 <HAL_TIM_Encoder_MspInit+0x188>)
 8002c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6c:	f003 0308 	and.w	r3, r3, #8
 8002c70:	60bb      	str	r3, [r7, #8]
 8002c72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002c74:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c82:	2300      	movs	r3, #0
 8002c84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002c86:	2302      	movs	r3, #2
 8002c88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c8a:	f107 031c 	add.w	r3, r7, #28
 8002c8e:	4619      	mov	r1, r3
 8002c90:	481f      	ldr	r0, [pc, #124]	; (8002d10 <HAL_TIM_Encoder_MspInit+0x198>)
 8002c92:	f002 fb61 	bl	8005358 <HAL_GPIO_Init>
    hdma_tim4_up.Instance = DMA1_Stream6;
 8002c96:	4b1f      	ldr	r3, [pc, #124]	; (8002d14 <HAL_TIM_Encoder_MspInit+0x19c>)
 8002c98:	4a1f      	ldr	r2, [pc, #124]	; (8002d18 <HAL_TIM_Encoder_MspInit+0x1a0>)
 8002c9a:	601a      	str	r2, [r3, #0]
    hdma_tim4_up.Init.Channel = DMA_CHANNEL_2;
 8002c9c:	4b1d      	ldr	r3, [pc, #116]	; (8002d14 <HAL_TIM_Encoder_MspInit+0x19c>)
 8002c9e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002ca2:	605a      	str	r2, [r3, #4]
    hdma_tim4_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ca4:	4b1b      	ldr	r3, [pc, #108]	; (8002d14 <HAL_TIM_Encoder_MspInit+0x19c>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	609a      	str	r2, [r3, #8]
    hdma_tim4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002caa:	4b1a      	ldr	r3, [pc, #104]	; (8002d14 <HAL_TIM_Encoder_MspInit+0x19c>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	60da      	str	r2, [r3, #12]
    hdma_tim4_up.Init.MemInc = DMA_MINC_ENABLE;
 8002cb0:	4b18      	ldr	r3, [pc, #96]	; (8002d14 <HAL_TIM_Encoder_MspInit+0x19c>)
 8002cb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cb6:	611a      	str	r2, [r3, #16]
    hdma_tim4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002cb8:	4b16      	ldr	r3, [pc, #88]	; (8002d14 <HAL_TIM_Encoder_MspInit+0x19c>)
 8002cba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cbe:	615a      	str	r2, [r3, #20]
    hdma_tim4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002cc0:	4b14      	ldr	r3, [pc, #80]	; (8002d14 <HAL_TIM_Encoder_MspInit+0x19c>)
 8002cc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cc6:	619a      	str	r2, [r3, #24]
    hdma_tim4_up.Init.Mode = DMA_NORMAL;
 8002cc8:	4b12      	ldr	r3, [pc, #72]	; (8002d14 <HAL_TIM_Encoder_MspInit+0x19c>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	61da      	str	r2, [r3, #28]
    hdma_tim4_up.Init.Priority = DMA_PRIORITY_LOW;
 8002cce:	4b11      	ldr	r3, [pc, #68]	; (8002d14 <HAL_TIM_Encoder_MspInit+0x19c>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	621a      	str	r2, [r3, #32]
    hdma_tim4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cd4:	4b0f      	ldr	r3, [pc, #60]	; (8002d14 <HAL_TIM_Encoder_MspInit+0x19c>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_up) != HAL_OK)
 8002cda:	480e      	ldr	r0, [pc, #56]	; (8002d14 <HAL_TIM_Encoder_MspInit+0x19c>)
 8002cdc:	f001 fc12 	bl	8004504 <HAL_DMA_Init>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <HAL_TIM_Encoder_MspInit+0x172>
      Error_Handler();
 8002ce6:	f7ff fb01 	bl	80022ec <Error_Handler>
    __HAL_LINKDMA(htim_encoder,hdma[TIM_DMA_ID_UPDATE],hdma_tim4_up);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a09      	ldr	r2, [pc, #36]	; (8002d14 <HAL_TIM_Encoder_MspInit+0x19c>)
 8002cee:	621a      	str	r2, [r3, #32]
 8002cf0:	4a08      	ldr	r2, [pc, #32]	; (8002d14 <HAL_TIM_Encoder_MspInit+0x19c>)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002cf6:	bf00      	nop
 8002cf8:	3730      	adds	r7, #48	; 0x30
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	40023800 	.word	0x40023800
 8002d04:	40020000 	.word	0x40020000
 8002d08:	40020400 	.word	0x40020400
 8002d0c:	40000800 	.word	0x40000800
 8002d10:	40020c00 	.word	0x40020c00
 8002d14:	200008d0 	.word	0x200008d0
 8002d18:	400260a0 	.word	0x400260a0

08002d1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b08a      	sub	sp, #40	; 0x28
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d24:	f107 0314 	add.w	r3, r7, #20
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]
 8002d2c:	605a      	str	r2, [r3, #4]
 8002d2e:	609a      	str	r2, [r3, #8]
 8002d30:	60da      	str	r2, [r3, #12]
 8002d32:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a33      	ldr	r2, [pc, #204]	; (8002e08 <HAL_TIM_MspPostInit+0xec>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d13c      	bne.n	8002db8 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d3e:	2300      	movs	r3, #0
 8002d40:	613b      	str	r3, [r7, #16]
 8002d42:	4b32      	ldr	r3, [pc, #200]	; (8002e0c <HAL_TIM_MspPostInit+0xf0>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d46:	4a31      	ldr	r2, [pc, #196]	; (8002e0c <HAL_TIM_MspPostInit+0xf0>)
 8002d48:	f043 0301 	orr.w	r3, r3, #1
 8002d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d4e:	4b2f      	ldr	r3, [pc, #188]	; (8002e0c <HAL_TIM_MspPostInit+0xf0>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	613b      	str	r3, [r7, #16]
 8002d58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60fb      	str	r3, [r7, #12]
 8002d5e:	4b2b      	ldr	r3, [pc, #172]	; (8002e0c <HAL_TIM_MspPostInit+0xf0>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	4a2a      	ldr	r2, [pc, #168]	; (8002e0c <HAL_TIM_MspPostInit+0xf0>)
 8002d64:	f043 0304 	orr.w	r3, r3, #4
 8002d68:	6313      	str	r3, [r2, #48]	; 0x30
 8002d6a:	4b28      	ldr	r3, [pc, #160]	; (8002e0c <HAL_TIM_MspPostInit+0xf0>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6e:	f003 0304 	and.w	r3, r3, #4
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d76:	2340      	movs	r3, #64	; 0x40
 8002d78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d82:	2300      	movs	r3, #0
 8002d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d86:	2302      	movs	r3, #2
 8002d88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d8a:	f107 0314 	add.w	r3, r7, #20
 8002d8e:	4619      	mov	r1, r3
 8002d90:	481f      	ldr	r0, [pc, #124]	; (8002e10 <HAL_TIM_MspPostInit+0xf4>)
 8002d92:	f002 fae1 	bl	8005358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002d96:	2380      	movs	r3, #128	; 0x80
 8002d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da2:	2300      	movs	r3, #0
 8002da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002da6:	2302      	movs	r3, #2
 8002da8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002daa:	f107 0314 	add.w	r3, r7, #20
 8002dae:	4619      	mov	r1, r3
 8002db0:	4818      	ldr	r0, [pc, #96]	; (8002e14 <HAL_TIM_MspPostInit+0xf8>)
 8002db2:	f002 fad1 	bl	8005358 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8002db6:	e023      	b.n	8002e00 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM13)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a16      	ldr	r2, [pc, #88]	; (8002e18 <HAL_TIM_MspPostInit+0xfc>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d11e      	bne.n	8002e00 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60bb      	str	r3, [r7, #8]
 8002dc6:	4b11      	ldr	r3, [pc, #68]	; (8002e0c <HAL_TIM_MspPostInit+0xf0>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	4a10      	ldr	r2, [pc, #64]	; (8002e0c <HAL_TIM_MspPostInit+0xf0>)
 8002dcc:	f043 0320 	orr.w	r3, r3, #32
 8002dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd2:	4b0e      	ldr	r3, [pc, #56]	; (8002e0c <HAL_TIM_MspPostInit+0xf0>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	f003 0320 	and.w	r3, r3, #32
 8002dda:	60bb      	str	r3, [r7, #8]
 8002ddc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002dde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de4:	2302      	movs	r3, #2
 8002de6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de8:	2300      	movs	r3, #0
 8002dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dec:	2300      	movs	r3, #0
 8002dee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002df0:	2309      	movs	r3, #9
 8002df2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002df4:	f107 0314 	add.w	r3, r7, #20
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4808      	ldr	r0, [pc, #32]	; (8002e1c <HAL_TIM_MspPostInit+0x100>)
 8002dfc:	f002 faac 	bl	8005358 <HAL_GPIO_Init>
}
 8002e00:	bf00      	nop
 8002e02:	3728      	adds	r7, #40	; 0x28
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40000400 	.word	0x40000400
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	40020000 	.word	0x40020000
 8002e14:	40020800 	.word	0x40020800
 8002e18:	40001c00 	.word	0x40001c00
 8002e1c:	40021400 	.word	0x40021400

08002e20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b08c      	sub	sp, #48	; 0x30
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e28:	f107 031c 	add.w	r3, r7, #28
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	605a      	str	r2, [r3, #4]
 8002e32:	609a      	str	r2, [r3, #8]
 8002e34:	60da      	str	r2, [r3, #12]
 8002e36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a3b      	ldr	r2, [pc, #236]	; (8002f2c <HAL_UART_MspInit+0x10c>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d135      	bne.n	8002eae <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002e42:	2300      	movs	r3, #0
 8002e44:	61bb      	str	r3, [r7, #24]
 8002e46:	4b3a      	ldr	r3, [pc, #232]	; (8002f30 <HAL_UART_MspInit+0x110>)
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	4a39      	ldr	r2, [pc, #228]	; (8002f30 <HAL_UART_MspInit+0x110>)
 8002e4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002e50:	6413      	str	r3, [r2, #64]	; 0x40
 8002e52:	4b37      	ldr	r3, [pc, #220]	; (8002f30 <HAL_UART_MspInit+0x110>)
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e5a:	61bb      	str	r3, [r7, #24]
 8002e5c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e5e:	2300      	movs	r3, #0
 8002e60:	617b      	str	r3, [r7, #20]
 8002e62:	4b33      	ldr	r3, [pc, #204]	; (8002f30 <HAL_UART_MspInit+0x110>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	4a32      	ldr	r2, [pc, #200]	; (8002f30 <HAL_UART_MspInit+0x110>)
 8002e68:	f043 0304 	orr.w	r3, r3, #4
 8002e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e6e:	4b30      	ldr	r3, [pc, #192]	; (8002f30 <HAL_UART_MspInit+0x110>)
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	f003 0304 	and.w	r3, r3, #4
 8002e76:	617b      	str	r3, [r7, #20]
 8002e78:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002e7a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002e7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e80:	2302      	movs	r3, #2
 8002e82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e84:	2300      	movs	r3, #0
 8002e86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002e8c:	2308      	movs	r3, #8
 8002e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e90:	f107 031c 	add.w	r3, r7, #28
 8002e94:	4619      	mov	r1, r3
 8002e96:	4827      	ldr	r0, [pc, #156]	; (8002f34 <HAL_UART_MspInit+0x114>)
 8002e98:	f002 fa5e 	bl	8005358 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	2034      	movs	r0, #52	; 0x34
 8002ea2:	f001 faf8 	bl	8004496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002ea6:	2034      	movs	r0, #52	; 0x34
 8002ea8:	f001 fb11 	bl	80044ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002eac:	e039      	b.n	8002f22 <HAL_UART_MspInit+0x102>
  else if(huart->Instance==USART3)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a21      	ldr	r2, [pc, #132]	; (8002f38 <HAL_UART_MspInit+0x118>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d134      	bne.n	8002f22 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002eb8:	2300      	movs	r3, #0
 8002eba:	613b      	str	r3, [r7, #16]
 8002ebc:	4b1c      	ldr	r3, [pc, #112]	; (8002f30 <HAL_UART_MspInit+0x110>)
 8002ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec0:	4a1b      	ldr	r2, [pc, #108]	; (8002f30 <HAL_UART_MspInit+0x110>)
 8002ec2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ec6:	6413      	str	r3, [r2, #64]	; 0x40
 8002ec8:	4b19      	ldr	r3, [pc, #100]	; (8002f30 <HAL_UART_MspInit+0x110>)
 8002eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ecc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ed0:	613b      	str	r3, [r7, #16]
 8002ed2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	4b15      	ldr	r3, [pc, #84]	; (8002f30 <HAL_UART_MspInit+0x110>)
 8002eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002edc:	4a14      	ldr	r2, [pc, #80]	; (8002f30 <HAL_UART_MspInit+0x110>)
 8002ede:	f043 0308 	orr.w	r3, r3, #8
 8002ee2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee4:	4b12      	ldr	r3, [pc, #72]	; (8002f30 <HAL_UART_MspInit+0x110>)
 8002ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee8:	f003 0308 	and.w	r3, r3, #8
 8002eec:	60fb      	str	r3, [r7, #12]
 8002eee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002ef0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efa:	2300      	movs	r3, #0
 8002efc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002efe:	2303      	movs	r3, #3
 8002f00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f02:	2307      	movs	r3, #7
 8002f04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f06:	f107 031c 	add.w	r3, r7, #28
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	480b      	ldr	r0, [pc, #44]	; (8002f3c <HAL_UART_MspInit+0x11c>)
 8002f0e:	f002 fa23 	bl	8005358 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002f12:	2200      	movs	r2, #0
 8002f14:	2100      	movs	r1, #0
 8002f16:	2027      	movs	r0, #39	; 0x27
 8002f18:	f001 fabd 	bl	8004496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002f1c:	2027      	movs	r0, #39	; 0x27
 8002f1e:	f001 fad6 	bl	80044ce <HAL_NVIC_EnableIRQ>
}
 8002f22:	bf00      	nop
 8002f24:	3730      	adds	r7, #48	; 0x30
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40004c00 	.word	0x40004c00
 8002f30:	40023800 	.word	0x40023800
 8002f34:	40020800 	.word	0x40020800
 8002f38:	40004800 	.word	0x40004800
 8002f3c:	40020c00 	.word	0x40020c00

08002f40 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b08a      	sub	sp, #40	; 0x28
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f48:	f107 0314 	add.w	r3, r7, #20
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	605a      	str	r2, [r3, #4]
 8002f52:	609a      	str	r2, [r3, #8]
 8002f54:	60da      	str	r2, [r3, #12]
 8002f56:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f60:	d13f      	bne.n	8002fe2 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f62:	2300      	movs	r3, #0
 8002f64:	613b      	str	r3, [r7, #16]
 8002f66:	4b21      	ldr	r3, [pc, #132]	; (8002fec <HAL_PCD_MspInit+0xac>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	4a20      	ldr	r2, [pc, #128]	; (8002fec <HAL_PCD_MspInit+0xac>)
 8002f6c:	f043 0301 	orr.w	r3, r3, #1
 8002f70:	6313      	str	r3, [r2, #48]	; 0x30
 8002f72:	4b1e      	ldr	r3, [pc, #120]	; (8002fec <HAL_PCD_MspInit+0xac>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	613b      	str	r3, [r7, #16]
 8002f7c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002f7e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002f82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f84:	2302      	movs	r3, #2
 8002f86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002f90:	230a      	movs	r3, #10
 8002f92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f94:	f107 0314 	add.w	r3, r7, #20
 8002f98:	4619      	mov	r1, r3
 8002f9a:	4815      	ldr	r0, [pc, #84]	; (8002ff0 <HAL_PCD_MspInit+0xb0>)
 8002f9c:	f002 f9dc 	bl	8005358 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002fa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002faa:	2300      	movs	r3, #0
 8002fac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002fae:	f107 0314 	add.w	r3, r7, #20
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	480e      	ldr	r0, [pc, #56]	; (8002ff0 <HAL_PCD_MspInit+0xb0>)
 8002fb6:	f002 f9cf 	bl	8005358 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002fba:	4b0c      	ldr	r3, [pc, #48]	; (8002fec <HAL_PCD_MspInit+0xac>)
 8002fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fbe:	4a0b      	ldr	r2, [pc, #44]	; (8002fec <HAL_PCD_MspInit+0xac>)
 8002fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fc4:	6353      	str	r3, [r2, #52]	; 0x34
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	4b08      	ldr	r3, [pc, #32]	; (8002fec <HAL_PCD_MspInit+0xac>)
 8002fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fce:	4a07      	ldr	r2, [pc, #28]	; (8002fec <HAL_PCD_MspInit+0xac>)
 8002fd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8002fd6:	4b05      	ldr	r3, [pc, #20]	; (8002fec <HAL_PCD_MspInit+0xac>)
 8002fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fde:	60fb      	str	r3, [r7, #12]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002fe2:	bf00      	nop
 8002fe4:	3728      	adds	r7, #40	; 0x28
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	40020000 	.word	0x40020000
 8002ff4:	00000000 	.word	0x00000000

08002ff8 <HAL_ADC_ConvCpltCallback>:




void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]

		if(hadc->Instance == hadc3.Instance)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	4b1a      	ldr	r3, [pc, #104]	; (8003070 <HAL_ADC_ConvCpltCallback+0x78>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	429a      	cmp	r2, r3
 800300a:	d124      	bne.n	8003056 <HAL_ADC_ConvCpltCallback+0x5e>

		{

		//	GPIOB->ODR ^= 1<<7;  ok

			battery_V=ADC3_value[2]/67.8*27.667  +1;
 800300c:	4b19      	ldr	r3, [pc, #100]	; (8003074 <HAL_ADC_ConvCpltCallback+0x7c>)
 800300e:	889b      	ldrh	r3, [r3, #4]
 8003010:	4618      	mov	r0, r3
 8003012:	f7fd fa97 	bl	8000544 <__aeabi_i2d>
 8003016:	a312      	add	r3, pc, #72	; (adr r3, 8003060 <HAL_ADC_ConvCpltCallback+0x68>)
 8003018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800301c:	f7fd fc26 	bl	800086c <__aeabi_ddiv>
 8003020:	4602      	mov	r2, r0
 8003022:	460b      	mov	r3, r1
 8003024:	4610      	mov	r0, r2
 8003026:	4619      	mov	r1, r3
 8003028:	a30f      	add	r3, pc, #60	; (adr r3, 8003068 <HAL_ADC_ConvCpltCallback+0x70>)
 800302a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800302e:	f7fd faf3 	bl	8000618 <__aeabi_dmul>
 8003032:	4602      	mov	r2, r0
 8003034:	460b      	mov	r3, r1
 8003036:	4610      	mov	r0, r2
 8003038:	4619      	mov	r1, r3
 800303a:	f04f 0200 	mov.w	r2, #0
 800303e:	4b0e      	ldr	r3, [pc, #56]	; (8003078 <HAL_ADC_ConvCpltCallback+0x80>)
 8003040:	f7fd f934 	bl	80002ac <__adddf3>
 8003044:	4602      	mov	r2, r0
 8003046:	460b      	mov	r3, r1
 8003048:	4610      	mov	r0, r2
 800304a:	4619      	mov	r1, r3
 800304c:	f7fd fddc 	bl	8000c08 <__aeabi_d2f>
 8003050:	4603      	mov	r3, r0
 8003052:	4a0a      	ldr	r2, [pc, #40]	; (800307c <HAL_ADC_ConvCpltCallback+0x84>)
 8003054:	6013      	str	r3, [r2, #0]
		}

}
 8003056:	bf00      	nop
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	33333333 	.word	0x33333333
 8003064:	4050f333 	.word	0x4050f333
 8003068:	83126e98 	.word	0x83126e98
 800306c:	403baac0 	.word	0x403baac0
 8003070:	20000538 	.word	0x20000538
 8003074:	200003b4 	.word	0x200003b4
 8003078:	3ff00000 	.word	0x3ff00000
 800307c:	20000e78 	.word	0x20000e78

08003080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003084:	e7fe      	b.n	8003084 <NMI_Handler+0x4>

08003086 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003086:	b480      	push	{r7}
 8003088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800308a:	e7fe      	b.n	800308a <HardFault_Handler+0x4>

0800308c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003090:	e7fe      	b.n	8003090 <MemManage_Handler+0x4>

08003092 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003092:	b480      	push	{r7}
 8003094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003096:	e7fe      	b.n	8003096 <BusFault_Handler+0x4>

08003098 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800309c:	e7fe      	b.n	800309c <UsageFault_Handler+0x4>

0800309e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800309e:	b480      	push	{r7}
 80030a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030a2:	bf00      	nop
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030b0:	bf00      	nop
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr

080030ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030ba:	b480      	push	{r7}
 80030bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030be:	bf00      	nop
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030cc:	f000 fb88 	bl	80037e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030d0:	bf00      	nop
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_up);
 80030d8:	4802      	ldr	r0, [pc, #8]	; (80030e4 <DMA1_Stream6_IRQHandler+0x10>)
 80030da:	f001 fbab 	bl	8004834 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80030de:	bf00      	nop
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	200008d0 	.word	0x200008d0

080030e8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80030e8:	b5b0      	push	{r4, r5, r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80030ec:	4872      	ldr	r0, [pc, #456]	; (80032b8 <ADC_IRQHandler+0x1d0>)
 80030ee:	f000 fbfe 	bl	80038ee <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */



  ADC3_IN12 = ADC3_value[0];
 80030f2:	4b72      	ldr	r3, [pc, #456]	; (80032bc <ADC_IRQHandler+0x1d4>)
 80030f4:	881a      	ldrh	r2, [r3, #0]
 80030f6:	4b72      	ldr	r3, [pc, #456]	; (80032c0 <ADC_IRQHandler+0x1d8>)
 80030f8:	801a      	strh	r2, [r3, #0]
  ADC3_IN13 = ADC3_value[1];
 80030fa:	4b70      	ldr	r3, [pc, #448]	; (80032bc <ADC_IRQHandler+0x1d4>)
 80030fc:	885a      	ldrh	r2, [r3, #2]
 80030fe:	4b71      	ldr	r3, [pc, #452]	; (80032c4 <ADC_IRQHandler+0x1dc>)
 8003100:	801a      	strh	r2, [r3, #0]




  V=ADC1_0 * 0.6547877;  //3227 > 2113(ref)= 2.58V
 8003102:	4b71      	ldr	r3, [pc, #452]	; (80032c8 <ADC_IRQHandler+0x1e0>)
 8003104:	881b      	ldrh	r3, [r3, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f7fd fa1c 	bl	8000544 <__aeabi_i2d>
 800310c:	a364      	add	r3, pc, #400	; (adr r3, 80032a0 <ADC_IRQHandler+0x1b8>)
 800310e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003112:	f7fd fa81 	bl	8000618 <__aeabi_dmul>
 8003116:	4602      	mov	r2, r0
 8003118:	460b      	mov	r3, r1
 800311a:	4610      	mov	r0, r2
 800311c:	4619      	mov	r1, r3
 800311e:	f7fd fd73 	bl	8000c08 <__aeabi_d2f>
 8003122:	4603      	mov	r3, r0
 8003124:	4a69      	ldr	r2, [pc, #420]	; (80032cc <ADC_IRQHandler+0x1e4>)
 8003126:	6013      	str	r3, [r2, #0]
  V1_mV = V *5000 / 4095.0; //[mV]
 8003128:	4b68      	ldr	r3, [pc, #416]	; (80032cc <ADC_IRQHandler+0x1e4>)
 800312a:	edd3 7a00 	vldr	s15, [r3]
 800312e:	ed9f 7a68 	vldr	s14, [pc, #416]	; 80032d0 <ADC_IRQHandler+0x1e8>
 8003132:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003136:	eddf 6a67 	vldr	s13, [pc, #412]	; 80032d4 <ADC_IRQHandler+0x1ec>
 800313a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800313e:	4b66      	ldr	r3, [pc, #408]	; (80032d8 <ADC_IRQHandler+0x1f0>)
 8003140:	edc3 7a00 	vstr	s15, [r3]
  V1_V = V *5 / 4095.0; //[V]
 8003144:	4b61      	ldr	r3, [pc, #388]	; (80032cc <ADC_IRQHandler+0x1e4>)
 8003146:	edd3 7a00 	vldr	s15, [r3]
 800314a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800314e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003152:	eddf 6a60 	vldr	s13, [pc, #384]	; 80032d4 <ADC_IRQHandler+0x1ec>
 8003156:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800315a:	4b60      	ldr	r3, [pc, #384]	; (80032dc <ADC_IRQHandler+0x1f4>)
 800315c:	edc3 7a00 	vstr	s15, [r3]


  if(V1_V - 2.58>=0)
 8003160:	4b5e      	ldr	r3, [pc, #376]	; (80032dc <ADC_IRQHandler+0x1f4>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4618      	mov	r0, r3
 8003166:	f7fd f9ff 	bl	8000568 <__aeabi_f2d>
 800316a:	a34f      	add	r3, pc, #316	; (adr r3, 80032a8 <ADC_IRQHandler+0x1c0>)
 800316c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003170:	f7fd f89a 	bl	80002a8 <__aeabi_dsub>
 8003174:	4602      	mov	r2, r0
 8003176:	460b      	mov	r3, r1
 8003178:	4610      	mov	r0, r2
 800317a:	4619      	mov	r1, r3
 800317c:	f04f 0200 	mov.w	r2, #0
 8003180:	f04f 0300 	mov.w	r3, #0
 8003184:	f7fd fcce 	bl	8000b24 <__aeabi_dcmpge>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d025      	beq.n	80031da <ADC_IRQHandler+0xf2>
  {
	  amp_A = (V1_V -2.58) /285*1000;
 800318e:	4b53      	ldr	r3, [pc, #332]	; (80032dc <ADC_IRQHandler+0x1f4>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4618      	mov	r0, r3
 8003194:	f7fd f9e8 	bl	8000568 <__aeabi_f2d>
 8003198:	a343      	add	r3, pc, #268	; (adr r3, 80032a8 <ADC_IRQHandler+0x1c0>)
 800319a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800319e:	f7fd f883 	bl	80002a8 <__aeabi_dsub>
 80031a2:	4602      	mov	r2, r0
 80031a4:	460b      	mov	r3, r1
 80031a6:	4610      	mov	r0, r2
 80031a8:	4619      	mov	r1, r3
 80031aa:	a341      	add	r3, pc, #260	; (adr r3, 80032b0 <ADC_IRQHandler+0x1c8>)
 80031ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b0:	f7fd fb5c 	bl	800086c <__aeabi_ddiv>
 80031b4:	4602      	mov	r2, r0
 80031b6:	460b      	mov	r3, r1
 80031b8:	4610      	mov	r0, r2
 80031ba:	4619      	mov	r1, r3
 80031bc:	f04f 0200 	mov.w	r2, #0
 80031c0:	4b47      	ldr	r3, [pc, #284]	; (80032e0 <ADC_IRQHandler+0x1f8>)
 80031c2:	f7fd fa29 	bl	8000618 <__aeabi_dmul>
 80031c6:	4602      	mov	r2, r0
 80031c8:	460b      	mov	r3, r1
 80031ca:	4610      	mov	r0, r2
 80031cc:	4619      	mov	r1, r3
 80031ce:	f7fd fd1b 	bl	8000c08 <__aeabi_d2f>
 80031d2:	4603      	mov	r3, r0
 80031d4:	4a43      	ldr	r2, [pc, #268]	; (80032e4 <ADC_IRQHandler+0x1fc>)
 80031d6:	6013      	str	r3, [r2, #0]
 80031d8:	e03e      	b.n	8003258 <ADC_IRQHandler+0x170>
  }
  else if(V1_V - 2.58 < 0)
 80031da:	4b40      	ldr	r3, [pc, #256]	; (80032dc <ADC_IRQHandler+0x1f4>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f7fd f9c2 	bl	8000568 <__aeabi_f2d>
 80031e4:	a330      	add	r3, pc, #192	; (adr r3, 80032a8 <ADC_IRQHandler+0x1c0>)
 80031e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ea:	f7fd f85d 	bl	80002a8 <__aeabi_dsub>
 80031ee:	4602      	mov	r2, r0
 80031f0:	460b      	mov	r3, r1
 80031f2:	4610      	mov	r0, r2
 80031f4:	4619      	mov	r1, r3
 80031f6:	f04f 0200 	mov.w	r2, #0
 80031fa:	f04f 0300 	mov.w	r3, #0
 80031fe:	f7fd fc7d 	bl	8000afc <__aeabi_dcmplt>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d027      	beq.n	8003258 <ADC_IRQHandler+0x170>
  {
	  amp_A = -(V1_V - 2.58) /285*1000;
 8003208:	4b34      	ldr	r3, [pc, #208]	; (80032dc <ADC_IRQHandler+0x1f4>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f7fd f9ab 	bl	8000568 <__aeabi_f2d>
 8003212:	a325      	add	r3, pc, #148	; (adr r3, 80032a8 <ADC_IRQHandler+0x1c0>)
 8003214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003218:	f7fd f846 	bl	80002a8 <__aeabi_dsub>
 800321c:	4602      	mov	r2, r0
 800321e:	460b      	mov	r3, r1
 8003220:	4614      	mov	r4, r2
 8003222:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003226:	a322      	add	r3, pc, #136	; (adr r3, 80032b0 <ADC_IRQHandler+0x1c8>)
 8003228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800322c:	4620      	mov	r0, r4
 800322e:	4629      	mov	r1, r5
 8003230:	f7fd fb1c 	bl	800086c <__aeabi_ddiv>
 8003234:	4602      	mov	r2, r0
 8003236:	460b      	mov	r3, r1
 8003238:	4610      	mov	r0, r2
 800323a:	4619      	mov	r1, r3
 800323c:	f04f 0200 	mov.w	r2, #0
 8003240:	4b27      	ldr	r3, [pc, #156]	; (80032e0 <ADC_IRQHandler+0x1f8>)
 8003242:	f7fd f9e9 	bl	8000618 <__aeabi_dmul>
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
 800324a:	4610      	mov	r0, r2
 800324c:	4619      	mov	r1, r3
 800324e:	f7fd fcdb 	bl	8000c08 <__aeabi_d2f>
 8003252:	4603      	mov	r3, r0
 8003254:	4a23      	ldr	r2, [pc, #140]	; (80032e4 <ADC_IRQHandler+0x1fc>)
 8003256:	6013      	str	r3, [r2, #0]
  }


  amp_mA = amp_A * 1000;
 8003258:	4b22      	ldr	r3, [pc, #136]	; (80032e4 <ADC_IRQHandler+0x1fc>)
 800325a:	edd3 7a00 	vldr	s15, [r3]
 800325e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80032e8 <ADC_IRQHandler+0x200>
 8003262:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003266:	4b21      	ldr	r3, [pc, #132]	; (80032ec <ADC_IRQHandler+0x204>)
 8003268:	edc3 7a00 	vstr	s15, [r3]

  sum=amp_mA + sum;
 800326c:	4b1f      	ldr	r3, [pc, #124]	; (80032ec <ADC_IRQHandler+0x204>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4618      	mov	r0, r3
 8003272:	f7fd f979 	bl	8000568 <__aeabi_f2d>
 8003276:	4b1e      	ldr	r3, [pc, #120]	; (80032f0 <ADC_IRQHandler+0x208>)
 8003278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800327c:	f7fd f816 	bl	80002ac <__adddf3>
 8003280:	4602      	mov	r2, r0
 8003282:	460b      	mov	r3, r1
 8003284:	491a      	ldr	r1, [pc, #104]	; (80032f0 <ADC_IRQHandler+0x208>)
 8003286:	e9c1 2300 	strd	r2, r3, [r1]
 	  i++;
 800328a:	4b1a      	ldr	r3, [pc, #104]	; (80032f4 <ADC_IRQHandler+0x20c>)
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	3301      	adds	r3, #1
 8003290:	b2da      	uxtb	r2, r3
 8003292:	4b18      	ldr	r3, [pc, #96]	; (80032f4 <ADC_IRQHandler+0x20c>)
 8003294:	701a      	strb	r2, [r3, #0]
 	 	  }



  /* USER CODE END ADC_IRQn 1 */
}
 8003296:	bf00      	nop
 8003298:	bdb0      	pop	{r4, r5, r7, pc}
 800329a:	bf00      	nop
 800329c:	f3af 8000 	nop.w
 80032a0:	55aa5680 	.word	0x55aa5680
 80032a4:	3fe4f405 	.word	0x3fe4f405
 80032a8:	0a3d70a4 	.word	0x0a3d70a4
 80032ac:	4004a3d7 	.word	0x4004a3d7
 80032b0:	00000000 	.word	0x00000000
 80032b4:	4071d000 	.word	0x4071d000
 80032b8:	20000538 	.word	0x20000538
 80032bc:	200003b4 	.word	0x200003b4
 80032c0:	20000e7c 	.word	0x20000e7c
 80032c4:	20000e7e 	.word	0x20000e7e
 80032c8:	200003ae 	.word	0x200003ae
 80032cc:	20000e8c 	.word	0x20000e8c
 80032d0:	459c4000 	.word	0x459c4000
 80032d4:	457ff000 	.word	0x457ff000
 80032d8:	20000e90 	.word	0x20000e90
 80032dc:	20000e94 	.word	0x20000e94
 80032e0:	408f4000 	.word	0x408f4000
 80032e4:	20000e98 	.word	0x20000e98
 80032e8:	447a0000 	.word	0x447a0000
 80032ec:	20000e9c 	.word	0x20000e9c
 80032f0:	20000ea0 	.word	0x20000ea0
 80032f4:	20000ea8 	.word	0x20000ea8

080032f8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80032fc:	4802      	ldr	r0, [pc, #8]	; (8003308 <TIM3_IRQHandler+0x10>)
 80032fe:	f003 fbd3 	bl	8006aa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */


  /* USER CODE END TIM3_IRQn 1 */
}
 8003302:	bf00      	nop
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	20000720 	.word	0x20000720

0800330c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003310:	4802      	ldr	r0, [pc, #8]	; (800331c <USART3_IRQHandler+0x10>)
 8003312:	f004 fbcf 	bl	8007ab4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003316:	bf00      	nop
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	20000304 	.word	0x20000304

08003320 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003324:	4805      	ldr	r0, [pc, #20]	; (800333c <TIM8_UP_TIM13_IRQHandler+0x1c>)
 8003326:	f003 fbbf 	bl	8006aa8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 800332a:	4805      	ldr	r0, [pc, #20]	; (8003340 <TIM8_UP_TIM13_IRQHandler+0x20>)
 800332c:	f003 fbbc 	bl	8006aa8 <HAL_TIM_IRQHandler>
  //0.0001/4

  //GPIOB->ODR ^=1<<0;  //ok


  tim13_flag=1;
 8003330:	4b04      	ldr	r3, [pc, #16]	; (8003344 <TIM8_UP_TIM13_IRQHandler+0x24>)
 8003332:	2201      	movs	r2, #1
 8003334:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003336:	bf00      	nop
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	200007f8 	.word	0x200007f8
 8003340:	20000840 	.word	0x20000840
 8003344:	20000e88 	.word	0x20000e88

08003348 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800334c:	4832      	ldr	r0, [pc, #200]	; (8003418 <TIM8_TRG_COM_TIM14_IRQHandler+0xd0>)
 800334e:	f003 fbab 	bl	8006aa8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 8003352:	4832      	ldr	r0, [pc, #200]	; (800341c <TIM8_TRG_COM_TIM14_IRQHandler+0xd4>)
 8003354:	f003 fba8 	bl	8006aa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

 tim14_flag++;
 8003358:	4b31      	ldr	r3, [pc, #196]	; (8003420 <TIM8_TRG_COM_TIM14_IRQHandler+0xd8>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	3301      	adds	r3, #1
 800335e:	4a30      	ldr	r2, [pc, #192]	; (8003420 <TIM8_TRG_COM_TIM14_IRQHandler+0xd8>)
 8003360:	6013      	str	r3, [r2, #0]

//motor1
  ENCODER_OLD= ENCODER_NEW;
 8003362:	4b30      	ldr	r3, [pc, #192]	; (8003424 <TIM8_TRG_COM_TIM14_IRQHandler+0xdc>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a30      	ldr	r2, [pc, #192]	; (8003428 <TIM8_TRG_COM_TIM14_IRQHandler+0xe0>)
 8003368:	6013      	str	r3, [r2, #0]
  ENCODER_NEW = TIM4->CNT;
 800336a:	4b30      	ldr	r3, [pc, #192]	; (800342c <TIM8_TRG_COM_TIM14_IRQHandler+0xe4>)
 800336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336e:	4a2d      	ldr	r2, [pc, #180]	; (8003424 <TIM8_TRG_COM_TIM14_IRQHandler+0xdc>)
 8003370:	6013      	str	r3, [r2, #0]


   	RPM =  ((abs(ENCODER_NEW-ENCODER_OLD)*60))/512.0/0.1;	// ?��코더 ?��?��: 1 turn?�� 3 pulse 출력
 8003372:	4b2c      	ldr	r3, [pc, #176]	; (8003424 <TIM8_TRG_COM_TIM14_IRQHandler+0xdc>)
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	4b2c      	ldr	r3, [pc, #176]	; (8003428 <TIM8_TRG_COM_TIM14_IRQHandler+0xe0>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003380:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003384:	4613      	mov	r3, r2
 8003386:	011b      	lsls	r3, r3, #4
 8003388:	1a9b      	subs	r3, r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4618      	mov	r0, r3
 800338e:	f7fd f8d9 	bl	8000544 <__aeabi_i2d>
 8003392:	f04f 0200 	mov.w	r2, #0
 8003396:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 800339a:	f7fd fa67 	bl	800086c <__aeabi_ddiv>
 800339e:	4602      	mov	r2, r0
 80033a0:	460b      	mov	r3, r1
 80033a2:	4610      	mov	r0, r2
 80033a4:	4619      	mov	r1, r3
 80033a6:	a318      	add	r3, pc, #96	; (adr r3, 8003408 <TIM8_TRG_COM_TIM14_IRQHandler+0xc0>)
 80033a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ac:	f7fd fa5e 	bl	800086c <__aeabi_ddiv>
 80033b0:	4602      	mov	r2, r0
 80033b2:	460b      	mov	r3, r1
 80033b4:	4610      	mov	r0, r2
 80033b6:	4619      	mov	r1, r3
 80033b8:	f7fd fc26 	bl	8000c08 <__aeabi_d2f>
 80033bc:	4603      	mov	r3, r0
 80033be:	4a1c      	ldr	r2, [pc, #112]	; (8003430 <TIM8_TRG_COM_TIM14_IRQHandler+0xe8>)
 80033c0:	6013      	str	r3, [r2, #0]
    	RPS=RPM/60;
 80033c2:	4b1b      	ldr	r3, [pc, #108]	; (8003430 <TIM8_TRG_COM_TIM14_IRQHandler+0xe8>)
 80033c4:	ed93 7a00 	vldr	s14, [r3]
 80033c8:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8003434 <TIM8_TRG_COM_TIM14_IRQHandler+0xec>
 80033cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033d0:	4b19      	ldr	r3, [pc, #100]	; (8003438 <TIM8_TRG_COM_TIM14_IRQHandler+0xf0>)
 80033d2:	edc3 7a00 	vstr	s15, [r3]
    	Omega= RPS*2*M_PI;
 80033d6:	4b18      	ldr	r3, [pc, #96]	; (8003438 <TIM8_TRG_COM_TIM14_IRQHandler+0xf0>)
 80033d8:	edd3 7a00 	vldr	s15, [r3]
 80033dc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80033e0:	ee17 0a90 	vmov	r0, s15
 80033e4:	f7fd f8c0 	bl	8000568 <__aeabi_f2d>
 80033e8:	a309      	add	r3, pc, #36	; (adr r3, 8003410 <TIM8_TRG_COM_TIM14_IRQHandler+0xc8>)
 80033ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ee:	f7fd f913 	bl	8000618 <__aeabi_dmul>
 80033f2:	4602      	mov	r2, r0
 80033f4:	460b      	mov	r3, r1
 80033f6:	4610      	mov	r0, r2
 80033f8:	4619      	mov	r1, r3
 80033fa:	f7fd fc05 	bl	8000c08 <__aeabi_d2f>
 80033fe:	4603      	mov	r3, r0
 8003400:	4a0e      	ldr	r2, [pc, #56]	; (800343c <TIM8_TRG_COM_TIM14_IRQHandler+0xf4>)
 8003402:	6013      	str	r3, [r2, #0]




  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003404:	bf00      	nop
 8003406:	bd80      	pop	{r7, pc}
 8003408:	9999999a 	.word	0x9999999a
 800340c:	3fb99999 	.word	0x3fb99999
 8003410:	54442d18 	.word	0x54442d18
 8003414:	400921fb 	.word	0x400921fb
 8003418:	200007f8 	.word	0x200007f8
 800341c:	20000888 	.word	0x20000888
 8003420:	20000e84 	.word	0x20000e84
 8003424:	2000039c 	.word	0x2000039c
 8003428:	200003a0 	.word	0x200003a0
 800342c:	40000800 	.word	0x40000800
 8003430:	200003a4 	.word	0x200003a4
 8003434:	42700000 	.word	0x42700000
 8003438:	200003a8 	.word	0x200003a8
 800343c:	200003bc 	.word	0x200003bc

08003440 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003444:	4802      	ldr	r0, [pc, #8]	; (8003450 <UART4_IRQHandler+0x10>)
 8003446:	f004 fb35 	bl	8007ab4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800344a:	bf00      	nop
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	20000350 	.word	0x20000350

08003454 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003458:	4837      	ldr	r0, [pc, #220]	; (8003538 <TIM6_DAC_IRQHandler+0xe4>)
 800345a:	f003 fb25 	bl	8006aa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  tim6_flag=1;
 800345e:	4b37      	ldr	r3, [pc, #220]	; (800353c <TIM6_DAC_IRQHandler+0xe8>)
 8003460:	2201      	movs	r2, #1
 8003462:	601a      	str	r2, [r3, #0]





  encoder_count=TIM4->CNT;
 8003464:	4b36      	ldr	r3, [pc, #216]	; (8003540 <TIM6_DAC_IRQHandler+0xec>)
 8003466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003468:	4a36      	ldr	r2, [pc, #216]	; (8003544 <TIM6_DAC_IRQHandler+0xf0>)
 800346a:	6013      	str	r3, [r2, #0]



	if(key_flag==1)
 800346c:	4b36      	ldr	r3, [pc, #216]	; (8003548 <TIM6_DAC_IRQHandler+0xf4>)
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d12d      	bne.n	80034d0 <TIM6_DAC_IRQHandler+0x7c>
	  {
		  GPIOE->ODR &= ~1<<0;  // forward
 8003474:	4b35      	ldr	r3, [pc, #212]	; (800354c <TIM6_DAC_IRQHandler+0xf8>)
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	4a34      	ldr	r2, [pc, #208]	; (800354c <TIM6_DAC_IRQHandler+0xf8>)
 800347a:	f023 0301 	bic.w	r3, r3, #1
 800347e:	6153      	str	r3, [r2, #20]

	      GPIOG->ODR &= ~1<<0;  //start
 8003480:	4b33      	ldr	r3, [pc, #204]	; (8003550 <TIM6_DAC_IRQHandler+0xfc>)
 8003482:	695b      	ldr	r3, [r3, #20]
 8003484:	4a32      	ldr	r2, [pc, #200]	; (8003550 <TIM6_DAC_IRQHandler+0xfc>)
 8003486:	f023 0301 	bic.w	r3, r3, #1
 800348a:	6153      	str	r3, [r2, #20]

		  TIM3->CCR1 = 250;
 800348c:	4b31      	ldr	r3, [pc, #196]	; (8003554 <TIM6_DAC_IRQHandler+0x100>)
 800348e:	22fa      	movs	r2, #250	; 0xfa
 8003490:	635a      	str	r2, [r3, #52]	; 0x34

		    if(TIM4->CNT>=10220)
 8003492:	4b2b      	ldr	r3, [pc, #172]	; (8003540 <TIM6_DAC_IRQHandler+0xec>)
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	f242 72eb 	movw	r2, #10219	; 0x27eb
 800349a:	4293      	cmp	r3, r2
 800349c:	d918      	bls.n	80034d0 <TIM6_DAC_IRQHandler+0x7c>
			{
		    	TIM3->CCR1 = 100;
 800349e:	4b2d      	ldr	r3, [pc, #180]	; (8003554 <TIM6_DAC_IRQHandler+0x100>)
 80034a0:	2264      	movs	r2, #100	; 0x64
 80034a2:	635a      	str	r2, [r3, #52]	; 0x34

		 		if(TIM4->CNT>=10512)
 80034a4:	4b26      	ldr	r3, [pc, #152]	; (8003540 <TIM6_DAC_IRQHandler+0xec>)
 80034a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a8:	f642 120f 	movw	r2, #10511	; 0x290f
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d90f      	bls.n	80034d0 <TIM6_DAC_IRQHandler+0x7c>
		  		{
			         GPIOG->ODR |= 1<<0;  //stop
 80034b0:	4b27      	ldr	r3, [pc, #156]	; (8003550 <TIM6_DAC_IRQHandler+0xfc>)
 80034b2:	695b      	ldr	r3, [r3, #20]
 80034b4:	4a26      	ldr	r2, [pc, #152]	; (8003550 <TIM6_DAC_IRQHandler+0xfc>)
 80034b6:	f043 0301 	orr.w	r3, r3, #1
 80034ba:	6153      	str	r3, [r2, #20]
			        //  key_flag=0;
			          stop_flag=1;
 80034bc:	4b26      	ldr	r3, [pc, #152]	; (8003558 <TIM6_DAC_IRQHandler+0x104>)
 80034be:	2201      	movs	r2, #1
 80034c0:	701a      	strb	r2, [r3, #0]
			          key_flag=0;
 80034c2:	4b21      	ldr	r3, [pc, #132]	; (8003548 <TIM6_DAC_IRQHandler+0xf4>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	701a      	strb	r2, [r3, #0]
			          HAL_Delay(2000);
 80034c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80034cc:	f000 f9a8 	bl	8003820 <HAL_Delay>


	  }


	  if(stop_flag==1)
 80034d0:	4b21      	ldr	r3, [pc, #132]	; (8003558 <TIM6_DAC_IRQHandler+0x104>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d12c      	bne.n	8003532 <TIM6_DAC_IRQHandler+0xde>
	      	    {
	      	          GPIOE->ODR |= 1<<0;  //back
 80034d8:	4b1c      	ldr	r3, [pc, #112]	; (800354c <TIM6_DAC_IRQHandler+0xf8>)
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	4a1b      	ldr	r2, [pc, #108]	; (800354c <TIM6_DAC_IRQHandler+0xf8>)
 80034de:	f043 0301 	orr.w	r3, r3, #1
 80034e2:	6153      	str	r3, [r2, #20]
	      	          GPIOG->ODR &= ~1<<0;  //start
 80034e4:	4b1a      	ldr	r3, [pc, #104]	; (8003550 <TIM6_DAC_IRQHandler+0xfc>)
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	4a19      	ldr	r2, [pc, #100]	; (8003550 <TIM6_DAC_IRQHandler+0xfc>)
 80034ea:	f023 0301 	bic.w	r3, r3, #1
 80034ee:	6153      	str	r3, [r2, #20]
	      	          TIM3->CCR1 = 250;
 80034f0:	4b18      	ldr	r3, [pc, #96]	; (8003554 <TIM6_DAC_IRQHandler+0x100>)
 80034f2:	22fa      	movs	r2, #250	; 0xfa
 80034f4:	635a      	str	r2, [r3, #52]	; 0x34


	      	            if(encoder_count<=10280)
 80034f6:	4b13      	ldr	r3, [pc, #76]	; (8003544 <TIM6_DAC_IRQHandler+0xf0>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f642 0228 	movw	r2, #10280	; 0x2828
 80034fe:	4293      	cmp	r3, r2
 8003500:	d817      	bhi.n	8003532 <TIM6_DAC_IRQHandler+0xde>
	      	            {
	      	            	  TIM3->CCR1 = 87;
 8003502:	4b14      	ldr	r3, [pc, #80]	; (8003554 <TIM6_DAC_IRQHandler+0x100>)
 8003504:	2257      	movs	r2, #87	; 0x57
 8003506:	635a      	str	r2, [r3, #52]	; 0x34
	      	             	  if(encoder_count<=10000)
 8003508:	4b0e      	ldr	r3, [pc, #56]	; (8003544 <TIM6_DAC_IRQHandler+0xf0>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f242 7210 	movw	r2, #10000	; 0x2710
 8003510:	4293      	cmp	r3, r2
 8003512:	d80e      	bhi.n	8003532 <TIM6_DAC_IRQHandler+0xde>
	      	    	      	    {
	      	    	  		 		  GPIOG->ODR |= 1<<0;  //stop
 8003514:	4b0e      	ldr	r3, [pc, #56]	; (8003550 <TIM6_DAC_IRQHandler+0xfc>)
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	4a0d      	ldr	r2, [pc, #52]	; (8003550 <TIM6_DAC_IRQHandler+0xfc>)
 800351a:	f043 0301 	orr.w	r3, r3, #1
 800351e:	6153      	str	r3, [r2, #20]
	      	    	          		  GPIOE->ODR &= ~1<<0;  //go
 8003520:	4b0a      	ldr	r3, [pc, #40]	; (800354c <TIM6_DAC_IRQHandler+0xf8>)
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	4a09      	ldr	r2, [pc, #36]	; (800354c <TIM6_DAC_IRQHandler+0xf8>)
 8003526:	f023 0301 	bic.w	r3, r3, #1
 800352a:	6153      	str	r3, [r2, #20]
	      	    	  		         stop_flag=0;
 800352c:	4b0a      	ldr	r3, [pc, #40]	; (8003558 <TIM6_DAC_IRQHandler+0x104>)
 800352e:	2200      	movs	r2, #0
 8003530:	701a      	strb	r2, [r3, #0]




  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003532:	bf00      	nop
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	200007b0 	.word	0x200007b0
 800353c:	20000e80 	.word	0x20000e80
 8003540:	40000800 	.word	0x40000800
 8003544:	20000000 	.word	0x20000000
 8003548:	200001fc 	.word	0x200001fc
 800354c:	40021000 	.word	0x40021000
 8003550:	40021800 	.word	0x40021800
 8003554:	40000400 	.word	0x40000400
 8003558:	20000ea9 	.word	0x20000ea9

0800355c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003560:	4802      	ldr	r0, [pc, #8]	; (800356c <DMA2_Stream1_IRQHandler+0x10>)
 8003562:	f001 f967 	bl	8004834 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003566:	bf00      	nop
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	20000580 	.word	0x20000580

08003570 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  return 1;
 8003574:	2301      	movs	r3, #1
}
 8003576:	4618      	mov	r0, r3
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <_kill>:

int _kill(int pid, int sig)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800358a:	f006 fad9 	bl	8009b40 <__errno>
 800358e:	4603      	mov	r3, r0
 8003590:	2216      	movs	r2, #22
 8003592:	601a      	str	r2, [r3, #0]
  return -1;
 8003594:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003598:	4618      	mov	r0, r3
 800359a:	3708      	adds	r7, #8
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <_exit>:

void _exit (int status)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80035a8:	f04f 31ff 	mov.w	r1, #4294967295
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f7ff ffe7 	bl	8003580 <_kill>
  while (1) {}    /* Make sure we hang here */
 80035b2:	e7fe      	b.n	80035b2 <_exit+0x12>

080035b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035c0:	2300      	movs	r3, #0
 80035c2:	617b      	str	r3, [r7, #20]
 80035c4:	e00a      	b.n	80035dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80035c6:	f3af 8000 	nop.w
 80035ca:	4601      	mov	r1, r0
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	1c5a      	adds	r2, r3, #1
 80035d0:	60ba      	str	r2, [r7, #8]
 80035d2:	b2ca      	uxtb	r2, r1
 80035d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	3301      	adds	r3, #1
 80035da:	617b      	str	r3, [r7, #20]
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	dbf0      	blt.n	80035c6 <_read+0x12>
  }

  return len;
 80035e4:	687b      	ldr	r3, [r7, #4]
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3718      	adds	r7, #24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <_close>:
  }
  return len;
}

int _close(int file)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80035f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr

08003606 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003606:	b480      	push	{r7}
 8003608:	b083      	sub	sp, #12
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
 800360e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003616:	605a      	str	r2, [r3, #4]
  return 0;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr

08003626 <_isatty>:

int _isatty(int file)
{
 8003626:	b480      	push	{r7}
 8003628:	b083      	sub	sp, #12
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800362e:	2301      	movs	r3, #1
}
 8003630:	4618      	mov	r0, r3
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3714      	adds	r7, #20
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
	...

08003658 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003660:	4a14      	ldr	r2, [pc, #80]	; (80036b4 <_sbrk+0x5c>)
 8003662:	4b15      	ldr	r3, [pc, #84]	; (80036b8 <_sbrk+0x60>)
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800366c:	4b13      	ldr	r3, [pc, #76]	; (80036bc <_sbrk+0x64>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d102      	bne.n	800367a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003674:	4b11      	ldr	r3, [pc, #68]	; (80036bc <_sbrk+0x64>)
 8003676:	4a12      	ldr	r2, [pc, #72]	; (80036c0 <_sbrk+0x68>)
 8003678:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800367a:	4b10      	ldr	r3, [pc, #64]	; (80036bc <_sbrk+0x64>)
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4413      	add	r3, r2
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	429a      	cmp	r2, r3
 8003686:	d207      	bcs.n	8003698 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003688:	f006 fa5a 	bl	8009b40 <__errno>
 800368c:	4603      	mov	r3, r0
 800368e:	220c      	movs	r2, #12
 8003690:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003692:	f04f 33ff 	mov.w	r3, #4294967295
 8003696:	e009      	b.n	80036ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003698:	4b08      	ldr	r3, [pc, #32]	; (80036bc <_sbrk+0x64>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800369e:	4b07      	ldr	r3, [pc, #28]	; (80036bc <_sbrk+0x64>)
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4413      	add	r3, r2
 80036a6:	4a05      	ldr	r2, [pc, #20]	; (80036bc <_sbrk+0x64>)
 80036a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036aa:	68fb      	ldr	r3, [r7, #12]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3718      	adds	r7, #24
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	20030000 	.word	0x20030000
 80036b8:	00000400 	.word	0x00000400
 80036bc:	20000eac 	.word	0x20000eac
 80036c0:	20001000 	.word	0x20001000

080036c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036c8:	4b06      	ldr	r3, [pc, #24]	; (80036e4 <SystemInit+0x20>)
 80036ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ce:	4a05      	ldr	r2, [pc, #20]	; (80036e4 <SystemInit+0x20>)
 80036d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036d8:	bf00      	nop
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	e000ed00 	.word	0xe000ed00

080036e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80036e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003720 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80036ec:	f7ff ffea 	bl	80036c4 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80036f0:	480c      	ldr	r0, [pc, #48]	; (8003724 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80036f2:	490d      	ldr	r1, [pc, #52]	; (8003728 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80036f4:	4a0d      	ldr	r2, [pc, #52]	; (800372c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80036f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036f8:	e002      	b.n	8003700 <LoopCopyDataInit>

080036fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036fe:	3304      	adds	r3, #4

08003700 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003700:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003702:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003704:	d3f9      	bcc.n	80036fa <CopyDataInit>
  


/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003706:	4a0a      	ldr	r2, [pc, #40]	; (8003730 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003708:	4c0a      	ldr	r4, [pc, #40]	; (8003734 <LoopFillZerobss+0x22>)
  movs r3, #0
 800370a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800370c:	e001      	b.n	8003712 <LoopFillZerobss>

0800370e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800370e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003710:	3204      	adds	r2, #4

08003712 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003712:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003714:	d3fb      	bcc.n	800370e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003716:	f006 fa19 	bl	8009b4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800371a:	f7fd feb5 	bl	8001488 <main>
  bx  lr    
 800371e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003720:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003724:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003728:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800372c:	0800c074 	.word	0x0800c074
  ldr r2, =_sbss
 8003730:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003734:	20001000 	.word	0x20001000

08003738 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003738:	e7fe      	b.n	8003738 <CAN1_RX0_IRQHandler>
	...

0800373c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003740:	4b0e      	ldr	r3, [pc, #56]	; (800377c <HAL_Init+0x40>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a0d      	ldr	r2, [pc, #52]	; (800377c <HAL_Init+0x40>)
 8003746:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800374a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800374c:	4b0b      	ldr	r3, [pc, #44]	; (800377c <HAL_Init+0x40>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a0a      	ldr	r2, [pc, #40]	; (800377c <HAL_Init+0x40>)
 8003752:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003756:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003758:	4b08      	ldr	r3, [pc, #32]	; (800377c <HAL_Init+0x40>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a07      	ldr	r2, [pc, #28]	; (800377c <HAL_Init+0x40>)
 800375e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003762:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003764:	2003      	movs	r0, #3
 8003766:	f000 fe8b 	bl	8004480 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800376a:	2000      	movs	r0, #0
 800376c:	f000 f808 	bl	8003780 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003770:	f7fe ffba 	bl	80026e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	40023c00 	.word	0x40023c00

08003780 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003788:	4b12      	ldr	r3, [pc, #72]	; (80037d4 <HAL_InitTick+0x54>)
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	4b12      	ldr	r3, [pc, #72]	; (80037d8 <HAL_InitTick+0x58>)
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	4619      	mov	r1, r3
 8003792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003796:	fbb3 f3f1 	udiv	r3, r3, r1
 800379a:	fbb2 f3f3 	udiv	r3, r2, r3
 800379e:	4618      	mov	r0, r3
 80037a0:	f000 fea3 	bl	80044ea <HAL_SYSTICK_Config>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e00e      	b.n	80037cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b0f      	cmp	r3, #15
 80037b2:	d80a      	bhi.n	80037ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037b4:	2200      	movs	r2, #0
 80037b6:	6879      	ldr	r1, [r7, #4]
 80037b8:	f04f 30ff 	mov.w	r0, #4294967295
 80037bc:	f000 fe6b 	bl	8004496 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037c0:	4a06      	ldr	r2, [pc, #24]	; (80037dc <HAL_InitTick+0x5c>)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
 80037c8:	e000      	b.n	80037cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3708      	adds	r7, #8
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	20000004 	.word	0x20000004
 80037d8:	2000000c 	.word	0x2000000c
 80037dc:	20000008 	.word	0x20000008

080037e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037e4:	4b06      	ldr	r3, [pc, #24]	; (8003800 <HAL_IncTick+0x20>)
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	461a      	mov	r2, r3
 80037ea:	4b06      	ldr	r3, [pc, #24]	; (8003804 <HAL_IncTick+0x24>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4413      	add	r3, r2
 80037f0:	4a04      	ldr	r2, [pc, #16]	; (8003804 <HAL_IncTick+0x24>)
 80037f2:	6013      	str	r3, [r2, #0]
}
 80037f4:	bf00      	nop
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	2000000c 	.word	0x2000000c
 8003804:	20000eb0 	.word	0x20000eb0

08003808 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  return uwTick;
 800380c:	4b03      	ldr	r3, [pc, #12]	; (800381c <HAL_GetTick+0x14>)
 800380e:	681b      	ldr	r3, [r3, #0]
}
 8003810:	4618      	mov	r0, r3
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	20000eb0 	.word	0x20000eb0

08003820 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003828:	f7ff ffee 	bl	8003808 <HAL_GetTick>
 800382c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003838:	d005      	beq.n	8003846 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800383a:	4b0a      	ldr	r3, [pc, #40]	; (8003864 <HAL_Delay+0x44>)
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	461a      	mov	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	4413      	add	r3, r2
 8003844:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003846:	bf00      	nop
 8003848:	f7ff ffde 	bl	8003808 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	429a      	cmp	r2, r3
 8003856:	d8f7      	bhi.n	8003848 <HAL_Delay+0x28>
  {
  }
}
 8003858:	bf00      	nop
 800385a:	bf00      	nop
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	2000000c 	.word	0x2000000c

08003868 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003870:	2300      	movs	r3, #0
 8003872:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e033      	b.n	80038e6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	2b00      	cmp	r3, #0
 8003884:	d109      	bne.n	800389a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7fe ff56 	bl	8002738 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	f003 0310 	and.w	r3, r3, #16
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d118      	bne.n	80038d8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038aa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80038ae:	f023 0302 	bic.w	r3, r3, #2
 80038b2:	f043 0202 	orr.w	r2, r3, #2
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 fb88 	bl	8003fd0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	f023 0303 	bic.w	r3, r3, #3
 80038ce:	f043 0201 	orr.w	r2, r3, #1
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	641a      	str	r2, [r3, #64]	; 0x40
 80038d6:	e001      	b.n	80038dc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80038e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b086      	sub	sp, #24
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80038f6:	2300      	movs	r3, #0
 80038f8:	617b      	str	r3, [r7, #20]
 80038fa:	2300      	movs	r3, #0
 80038fc:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	f003 0320 	and.w	r3, r3, #32
 800391c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d049      	beq.n	80039b8 <HAL_ADC_IRQHandler+0xca>
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d046      	beq.n	80039b8 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	f003 0310 	and.w	r3, r3, #16
 8003932:	2b00      	cmp	r3, #0
 8003934:	d105      	bne.n	8003942 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d12b      	bne.n	80039a8 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003954:	2b00      	cmp	r3, #0
 8003956:	d127      	bne.n	80039a8 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003962:	2b00      	cmp	r3, #0
 8003964:	d006      	beq.n	8003974 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003970:	2b00      	cmp	r3, #0
 8003972:	d119      	bne.n	80039a8 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0220 	bic.w	r2, r2, #32
 8003982:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003988:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003994:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d105      	bne.n	80039a8 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a0:	f043 0201 	orr.w	r2, r3, #1
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f7ff fb25 	bl	8002ff8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f06f 0212 	mvn.w	r2, #18
 80039b6:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f003 0304 	and.w	r3, r3, #4
 80039be:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d057      	beq.n	8003a7e <HAL_ADC_IRQHandler+0x190>
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d054      	beq.n	8003a7e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d8:	f003 0310 	and.w	r3, r3, #16
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d105      	bne.n	80039ec <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d139      	bne.n	8003a6e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a00:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d006      	beq.n	8003a16 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d12b      	bne.n	8003a6e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d124      	bne.n	8003a6e <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d11d      	bne.n	8003a6e <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d119      	bne.n	8003a6e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	685a      	ldr	r2, [r3, #4]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a48:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d105      	bne.n	8003a6e <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	f043 0201 	orr.w	r2, r3, #1
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 fc2c 	bl	80042cc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f06f 020c 	mvn.w	r2, #12
 8003a7c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f003 0301 	and.w	r3, r3, #1
 8003a84:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a8c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d017      	beq.n	8003ac4 <HAL_ADC_IRQHandler+0x1d6>
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d014      	beq.n	8003ac4 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d10d      	bne.n	8003ac4 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 f945 	bl	8003d44 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f06f 0201 	mvn.w	r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f003 0320 	and.w	r3, r3, #32
 8003aca:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ad2:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d015      	beq.n	8003b06 <HAL_ADC_IRQHandler+0x218>
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d012      	beq.n	8003b06 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae4:	f043 0202 	orr.w	r2, r3, #2
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f06f 0220 	mvn.w	r2, #32
 8003af4:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f92e 	bl	8003d58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f06f 0220 	mvn.w	r2, #32
 8003b04:	601a      	str	r2, [r3, #0]
  }
}
 8003b06:	bf00      	nop
 8003b08:	3718      	adds	r7, #24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
	...

08003b10 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d101      	bne.n	8003b2e <HAL_ADC_Start_DMA+0x1e>
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	e0e9      	b.n	8003d02 <HAL_ADC_Start_DMA+0x1f2>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d018      	beq.n	8003b76 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689a      	ldr	r2, [r3, #8]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f042 0201 	orr.w	r2, r2, #1
 8003b52:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003b54:	4b6d      	ldr	r3, [pc, #436]	; (8003d0c <HAL_ADC_Start_DMA+0x1fc>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a6d      	ldr	r2, [pc, #436]	; (8003d10 <HAL_ADC_Start_DMA+0x200>)
 8003b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5e:	0c9a      	lsrs	r2, r3, #18
 8003b60:	4613      	mov	r3, r2
 8003b62:	005b      	lsls	r3, r3, #1
 8003b64:	4413      	add	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003b68:	e002      	b.n	8003b70 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1f9      	bne.n	8003b6a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b84:	d107      	bne.n	8003b96 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b94:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	f040 80a1 	bne.w	8003ce8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003bae:	f023 0301 	bic.w	r3, r3, #1
 8003bb2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d007      	beq.n	8003bd8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bcc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003bd0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003be0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003be4:	d106      	bne.n	8003bf4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bea:	f023 0206 	bic.w	r2, r3, #6
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	645a      	str	r2, [r3, #68]	; 0x44
 8003bf2:	e002      	b.n	8003bfa <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c02:	4b44      	ldr	r3, [pc, #272]	; (8003d14 <HAL_ADC_Start_DMA+0x204>)
 8003c04:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0a:	4a43      	ldr	r2, [pc, #268]	; (8003d18 <HAL_ADC_Start_DMA+0x208>)
 8003c0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c12:	4a42      	ldr	r2, [pc, #264]	; (8003d1c <HAL_ADC_Start_DMA+0x20c>)
 8003c14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1a:	4a41      	ldr	r2, [pc, #260]	; (8003d20 <HAL_ADC_Start_DMA+0x210>)
 8003c1c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003c26:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003c36:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	689a      	ldr	r2, [r3, #8]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c46:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	334c      	adds	r3, #76	; 0x4c
 8003c52:	4619      	mov	r1, r3
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f000 fd02 	bl	8004660 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f003 031f 	and.w	r3, r3, #31
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d12a      	bne.n	8003cbe <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a2d      	ldr	r2, [pc, #180]	; (8003d24 <HAL_ADC_Start_DMA+0x214>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d015      	beq.n	8003c9e <HAL_ADC_Start_DMA+0x18e>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a2c      	ldr	r2, [pc, #176]	; (8003d28 <HAL_ADC_Start_DMA+0x218>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d105      	bne.n	8003c88 <HAL_ADC_Start_DMA+0x178>
 8003c7c:	4b25      	ldr	r3, [pc, #148]	; (8003d14 <HAL_ADC_Start_DMA+0x204>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f003 031f 	and.w	r3, r3, #31
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00a      	beq.n	8003c9e <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a27      	ldr	r2, [pc, #156]	; (8003d2c <HAL_ADC_Start_DMA+0x21c>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d136      	bne.n	8003d00 <HAL_ADC_Start_DMA+0x1f0>
 8003c92:	4b20      	ldr	r3, [pc, #128]	; (8003d14 <HAL_ADC_Start_DMA+0x204>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f003 0310 	and.w	r3, r3, #16
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d130      	bne.n	8003d00 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d129      	bne.n	8003d00 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689a      	ldr	r2, [r3, #8]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003cba:	609a      	str	r2, [r3, #8]
 8003cbc:	e020      	b.n	8003d00 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a18      	ldr	r2, [pc, #96]	; (8003d24 <HAL_ADC_Start_DMA+0x214>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d11b      	bne.n	8003d00 <HAL_ADC_Start_DMA+0x1f0>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d114      	bne.n	8003d00 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689a      	ldr	r2, [r3, #8]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003ce4:	609a      	str	r2, [r3, #8]
 8003ce6:	e00b      	b.n	8003d00 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cec:	f043 0210 	orr.w	r2, r3, #16
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf8:	f043 0201 	orr.w	r2, r3, #1
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3718      	adds	r7, #24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	20000004 	.word	0x20000004
 8003d10:	431bde83 	.word	0x431bde83
 8003d14:	40012300 	.word	0x40012300
 8003d18:	080041c9 	.word	0x080041c9
 8003d1c:	08004283 	.word	0x08004283
 8003d20:	0800429f 	.word	0x0800429f
 8003d24:	40012000 	.word	0x40012000
 8003d28:	40012100 	.word	0x40012100
 8003d2c:	40012200 	.word	0x40012200

08003d30 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003d76:	2300      	movs	r3, #0
 8003d78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d101      	bne.n	8003d88 <HAL_ADC_ConfigChannel+0x1c>
 8003d84:	2302      	movs	r3, #2
 8003d86:	e113      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0x244>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2b09      	cmp	r3, #9
 8003d96:	d925      	bls.n	8003de4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68d9      	ldr	r1, [r3, #12]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	461a      	mov	r2, r3
 8003da6:	4613      	mov	r3, r2
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	4413      	add	r3, r2
 8003dac:	3b1e      	subs	r3, #30
 8003dae:	2207      	movs	r2, #7
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	43da      	mvns	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	400a      	ands	r2, r1
 8003dbc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68d9      	ldr	r1, [r3, #12]
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	689a      	ldr	r2, [r3, #8]
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	4618      	mov	r0, r3
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	4403      	add	r3, r0
 8003dd6:	3b1e      	subs	r3, #30
 8003dd8:	409a      	lsls	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	60da      	str	r2, [r3, #12]
 8003de2:	e022      	b.n	8003e2a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6919      	ldr	r1, [r3, #16]
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	461a      	mov	r2, r3
 8003df2:	4613      	mov	r3, r2
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	4413      	add	r3, r2
 8003df8:	2207      	movs	r2, #7
 8003dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfe:	43da      	mvns	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	400a      	ands	r2, r1
 8003e06:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6919      	ldr	r1, [r3, #16]
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	689a      	ldr	r2, [r3, #8]
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	4618      	mov	r0, r3
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	4403      	add	r3, r0
 8003e20:	409a      	lsls	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	2b06      	cmp	r3, #6
 8003e30:	d824      	bhi.n	8003e7c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	685a      	ldr	r2, [r3, #4]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	4413      	add	r3, r2
 8003e42:	3b05      	subs	r3, #5
 8003e44:	221f      	movs	r2, #31
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	43da      	mvns	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	400a      	ands	r2, r1
 8003e52:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	4618      	mov	r0, r3
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	685a      	ldr	r2, [r3, #4]
 8003e66:	4613      	mov	r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	4413      	add	r3, r2
 8003e6c:	3b05      	subs	r3, #5
 8003e6e:	fa00 f203 	lsl.w	r2, r0, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	635a      	str	r2, [r3, #52]	; 0x34
 8003e7a:	e04c      	b.n	8003f16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	2b0c      	cmp	r3, #12
 8003e82:	d824      	bhi.n	8003ece <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	4413      	add	r3, r2
 8003e94:	3b23      	subs	r3, #35	; 0x23
 8003e96:	221f      	movs	r2, #31
 8003e98:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9c:	43da      	mvns	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	400a      	ands	r2, r1
 8003ea4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685a      	ldr	r2, [r3, #4]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4413      	add	r3, r2
 8003ebe:	3b23      	subs	r3, #35	; 0x23
 8003ec0:	fa00 f203 	lsl.w	r2, r0, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	631a      	str	r2, [r3, #48]	; 0x30
 8003ecc:	e023      	b.n	8003f16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685a      	ldr	r2, [r3, #4]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4413      	add	r3, r2
 8003ede:	3b41      	subs	r3, #65	; 0x41
 8003ee0:	221f      	movs	r2, #31
 8003ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee6:	43da      	mvns	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	400a      	ands	r2, r1
 8003eee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	4618      	mov	r0, r3
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	4613      	mov	r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	4413      	add	r3, r2
 8003f08:	3b41      	subs	r3, #65	; 0x41
 8003f0a:	fa00 f203 	lsl.w	r2, r0, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f16:	4b29      	ldr	r3, [pc, #164]	; (8003fbc <HAL_ADC_ConfigChannel+0x250>)
 8003f18:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a28      	ldr	r2, [pc, #160]	; (8003fc0 <HAL_ADC_ConfigChannel+0x254>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d10f      	bne.n	8003f44 <HAL_ADC_ConfigChannel+0x1d8>
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2b12      	cmp	r3, #18
 8003f2a:	d10b      	bne.n	8003f44 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a1d      	ldr	r2, [pc, #116]	; (8003fc0 <HAL_ADC_ConfigChannel+0x254>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d12b      	bne.n	8003fa6 <HAL_ADC_ConfigChannel+0x23a>
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a1c      	ldr	r2, [pc, #112]	; (8003fc4 <HAL_ADC_ConfigChannel+0x258>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d003      	beq.n	8003f60 <HAL_ADC_ConfigChannel+0x1f4>
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2b11      	cmp	r3, #17
 8003f5e:	d122      	bne.n	8003fa6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a11      	ldr	r2, [pc, #68]	; (8003fc4 <HAL_ADC_ConfigChannel+0x258>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d111      	bne.n	8003fa6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003f82:	4b11      	ldr	r3, [pc, #68]	; (8003fc8 <HAL_ADC_ConfigChannel+0x25c>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a11      	ldr	r2, [pc, #68]	; (8003fcc <HAL_ADC_ConfigChannel+0x260>)
 8003f88:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8c:	0c9a      	lsrs	r2, r3, #18
 8003f8e:	4613      	mov	r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	4413      	add	r3, r2
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003f98:	e002      	b.n	8003fa0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1f9      	bne.n	8003f9a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3714      	adds	r7, #20
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr
 8003fbc:	40012300 	.word	0x40012300
 8003fc0:	40012000 	.word	0x40012000
 8003fc4:	10000012 	.word	0x10000012
 8003fc8:	20000004 	.word	0x20000004
 8003fcc:	431bde83 	.word	0x431bde83

08003fd0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003fd8:	4b79      	ldr	r3, [pc, #484]	; (80041c0 <ADC_Init+0x1f0>)
 8003fda:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	431a      	orrs	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004004:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	6859      	ldr	r1, [r3, #4]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	021a      	lsls	r2, r3, #8
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	430a      	orrs	r2, r1
 8004018:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004028:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	6859      	ldr	r1, [r3, #4]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689a      	ldr	r2, [r3, #8]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	430a      	orrs	r2, r1
 800403a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689a      	ldr	r2, [r3, #8]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800404a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6899      	ldr	r1, [r3, #8]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68da      	ldr	r2, [r3, #12]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	430a      	orrs	r2, r1
 800405c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004062:	4a58      	ldr	r2, [pc, #352]	; (80041c4 <ADC_Init+0x1f4>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d022      	beq.n	80040ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	689a      	ldr	r2, [r3, #8]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004076:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	6899      	ldr	r1, [r3, #8]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	430a      	orrs	r2, r1
 8004088:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	689a      	ldr	r2, [r3, #8]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004098:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	6899      	ldr	r1, [r3, #8]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	430a      	orrs	r2, r1
 80040aa:	609a      	str	r2, [r3, #8]
 80040ac:	e00f      	b.n	80040ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	689a      	ldr	r2, [r3, #8]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80040bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	689a      	ldr	r2, [r3, #8]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80040cc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	689a      	ldr	r2, [r3, #8]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f022 0202 	bic.w	r2, r2, #2
 80040dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	6899      	ldr	r1, [r3, #8]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	7e1b      	ldrb	r3, [r3, #24]
 80040e8:	005a      	lsls	r2, r3, #1
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d01b      	beq.n	8004134 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800410a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800411a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	6859      	ldr	r1, [r3, #4]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004126:	3b01      	subs	r3, #1
 8004128:	035a      	lsls	r2, r3, #13
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	430a      	orrs	r2, r1
 8004130:	605a      	str	r2, [r3, #4]
 8004132:	e007      	b.n	8004144 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	685a      	ldr	r2, [r3, #4]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004142:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004152:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	3b01      	subs	r3, #1
 8004160:	051a      	lsls	r2, r3, #20
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	430a      	orrs	r2, r1
 8004168:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	689a      	ldr	r2, [r3, #8]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004178:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	6899      	ldr	r1, [r3, #8]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004186:	025a      	lsls	r2, r3, #9
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	430a      	orrs	r2, r1
 800418e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	689a      	ldr	r2, [r3, #8]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800419e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6899      	ldr	r1, [r3, #8]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	029a      	lsls	r2, r3, #10
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	430a      	orrs	r2, r1
 80041b2:	609a      	str	r2, [r3, #8]
}
 80041b4:	bf00      	nop
 80041b6:	3714      	adds	r7, #20
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	40012300 	.word	0x40012300
 80041c4:	0f000001 	.word	0x0f000001

080041c8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041da:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d13c      	bne.n	800425c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d12b      	bne.n	8004254 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004200:	2b00      	cmp	r3, #0
 8004202:	d127      	bne.n	8004254 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800420e:	2b00      	cmp	r3, #0
 8004210:	d006      	beq.n	8004220 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800421c:	2b00      	cmp	r3, #0
 800421e:	d119      	bne.n	8004254 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 0220 	bic.w	r2, r2, #32
 800422e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004234:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004240:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d105      	bne.n	8004254 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424c:	f043 0201 	orr.w	r2, r3, #1
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	f7fe fecf 	bl	8002ff8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800425a:	e00e      	b.n	800427a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004260:	f003 0310 	and.w	r3, r3, #16
 8004264:	2b00      	cmp	r3, #0
 8004266:	d003      	beq.n	8004270 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f7ff fd75 	bl	8003d58 <HAL_ADC_ErrorCallback>
}
 800426e:	e004      	b.n	800427a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	4798      	blx	r3
}
 800427a:	bf00      	nop
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004282:	b580      	push	{r7, lr}
 8004284:	b084      	sub	sp, #16
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f7ff fd4d 	bl	8003d30 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004296:	bf00      	nop
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b084      	sub	sp, #16
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042aa:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2240      	movs	r2, #64	; 0x40
 80042b0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b6:	f043 0204 	orr.w	r2, r3, #4
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	f7ff fd4a 	bl	8003d58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042c4:	bf00      	nop
 80042c6:	3710      	adds	r7, #16
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f003 0307 	and.w	r3, r3, #7
 80042ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042f0:	4b0c      	ldr	r3, [pc, #48]	; (8004324 <__NVIC_SetPriorityGrouping+0x44>)
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042fc:	4013      	ands	r3, r2
 80042fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004308:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800430c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004310:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004312:	4a04      	ldr	r2, [pc, #16]	; (8004324 <__NVIC_SetPriorityGrouping+0x44>)
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	60d3      	str	r3, [r2, #12]
}
 8004318:	bf00      	nop
 800431a:	3714      	adds	r7, #20
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr
 8004324:	e000ed00 	.word	0xe000ed00

08004328 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004328:	b480      	push	{r7}
 800432a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800432c:	4b04      	ldr	r3, [pc, #16]	; (8004340 <__NVIC_GetPriorityGrouping+0x18>)
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	0a1b      	lsrs	r3, r3, #8
 8004332:	f003 0307 	and.w	r3, r3, #7
}
 8004336:	4618      	mov	r0, r3
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr
 8004340:	e000ed00 	.word	0xe000ed00

08004344 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	4603      	mov	r3, r0
 800434c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800434e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004352:	2b00      	cmp	r3, #0
 8004354:	db0b      	blt.n	800436e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004356:	79fb      	ldrb	r3, [r7, #7]
 8004358:	f003 021f 	and.w	r2, r3, #31
 800435c:	4907      	ldr	r1, [pc, #28]	; (800437c <__NVIC_EnableIRQ+0x38>)
 800435e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004362:	095b      	lsrs	r3, r3, #5
 8004364:	2001      	movs	r0, #1
 8004366:	fa00 f202 	lsl.w	r2, r0, r2
 800436a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800436e:	bf00      	nop
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	e000e100 	.word	0xe000e100

08004380 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	4603      	mov	r3, r0
 8004388:	6039      	str	r1, [r7, #0]
 800438a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800438c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004390:	2b00      	cmp	r3, #0
 8004392:	db0a      	blt.n	80043aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	b2da      	uxtb	r2, r3
 8004398:	490c      	ldr	r1, [pc, #48]	; (80043cc <__NVIC_SetPriority+0x4c>)
 800439a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800439e:	0112      	lsls	r2, r2, #4
 80043a0:	b2d2      	uxtb	r2, r2
 80043a2:	440b      	add	r3, r1
 80043a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043a8:	e00a      	b.n	80043c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	b2da      	uxtb	r2, r3
 80043ae:	4908      	ldr	r1, [pc, #32]	; (80043d0 <__NVIC_SetPriority+0x50>)
 80043b0:	79fb      	ldrb	r3, [r7, #7]
 80043b2:	f003 030f 	and.w	r3, r3, #15
 80043b6:	3b04      	subs	r3, #4
 80043b8:	0112      	lsls	r2, r2, #4
 80043ba:	b2d2      	uxtb	r2, r2
 80043bc:	440b      	add	r3, r1
 80043be:	761a      	strb	r2, [r3, #24]
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	e000e100 	.word	0xe000e100
 80043d0:	e000ed00 	.word	0xe000ed00

080043d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b089      	sub	sp, #36	; 0x24
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f003 0307 	and.w	r3, r3, #7
 80043e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	f1c3 0307 	rsb	r3, r3, #7
 80043ee:	2b04      	cmp	r3, #4
 80043f0:	bf28      	it	cs
 80043f2:	2304      	movcs	r3, #4
 80043f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	3304      	adds	r3, #4
 80043fa:	2b06      	cmp	r3, #6
 80043fc:	d902      	bls.n	8004404 <NVIC_EncodePriority+0x30>
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	3b03      	subs	r3, #3
 8004402:	e000      	b.n	8004406 <NVIC_EncodePriority+0x32>
 8004404:	2300      	movs	r3, #0
 8004406:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004408:	f04f 32ff 	mov.w	r2, #4294967295
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	fa02 f303 	lsl.w	r3, r2, r3
 8004412:	43da      	mvns	r2, r3
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	401a      	ands	r2, r3
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800441c:	f04f 31ff 	mov.w	r1, #4294967295
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	fa01 f303 	lsl.w	r3, r1, r3
 8004426:	43d9      	mvns	r1, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800442c:	4313      	orrs	r3, r2
         );
}
 800442e:	4618      	mov	r0, r3
 8004430:	3724      	adds	r7, #36	; 0x24
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
	...

0800443c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	3b01      	subs	r3, #1
 8004448:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800444c:	d301      	bcc.n	8004452 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800444e:	2301      	movs	r3, #1
 8004450:	e00f      	b.n	8004472 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004452:	4a0a      	ldr	r2, [pc, #40]	; (800447c <SysTick_Config+0x40>)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	3b01      	subs	r3, #1
 8004458:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800445a:	210f      	movs	r1, #15
 800445c:	f04f 30ff 	mov.w	r0, #4294967295
 8004460:	f7ff ff8e 	bl	8004380 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004464:	4b05      	ldr	r3, [pc, #20]	; (800447c <SysTick_Config+0x40>)
 8004466:	2200      	movs	r2, #0
 8004468:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800446a:	4b04      	ldr	r3, [pc, #16]	; (800447c <SysTick_Config+0x40>)
 800446c:	2207      	movs	r2, #7
 800446e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3708      	adds	r7, #8
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	e000e010 	.word	0xe000e010

08004480 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f7ff ff29 	bl	80042e0 <__NVIC_SetPriorityGrouping>
}
 800448e:	bf00      	nop
 8004490:	3708      	adds	r7, #8
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004496:	b580      	push	{r7, lr}
 8004498:	b086      	sub	sp, #24
 800449a:	af00      	add	r7, sp, #0
 800449c:	4603      	mov	r3, r0
 800449e:	60b9      	str	r1, [r7, #8]
 80044a0:	607a      	str	r2, [r7, #4]
 80044a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044a4:	2300      	movs	r3, #0
 80044a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044a8:	f7ff ff3e 	bl	8004328 <__NVIC_GetPriorityGrouping>
 80044ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	68b9      	ldr	r1, [r7, #8]
 80044b2:	6978      	ldr	r0, [r7, #20]
 80044b4:	f7ff ff8e 	bl	80043d4 <NVIC_EncodePriority>
 80044b8:	4602      	mov	r2, r0
 80044ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044be:	4611      	mov	r1, r2
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7ff ff5d 	bl	8004380 <__NVIC_SetPriority>
}
 80044c6:	bf00      	nop
 80044c8:	3718      	adds	r7, #24
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b082      	sub	sp, #8
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	4603      	mov	r3, r0
 80044d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044dc:	4618      	mov	r0, r3
 80044de:	f7ff ff31 	bl	8004344 <__NVIC_EnableIRQ>
}
 80044e2:	bf00      	nop
 80044e4:	3708      	adds	r7, #8
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b082      	sub	sp, #8
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f7ff ffa2 	bl	800443c <SysTick_Config>
 80044f8:	4603      	mov	r3, r0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
	...

08004504 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b086      	sub	sp, #24
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800450c:	2300      	movs	r3, #0
 800450e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004510:	f7ff f97a 	bl	8003808 <HAL_GetTick>
 8004514:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d101      	bne.n	8004520 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e099      	b.n	8004654 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2202      	movs	r2, #2
 8004524:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 0201 	bic.w	r2, r2, #1
 800453e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004540:	e00f      	b.n	8004562 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004542:	f7ff f961 	bl	8003808 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b05      	cmp	r3, #5
 800454e:	d908      	bls.n	8004562 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2220      	movs	r2, #32
 8004554:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2203      	movs	r2, #3
 800455a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e078      	b.n	8004654 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1e8      	bne.n	8004542 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	4b38      	ldr	r3, [pc, #224]	; (800465c <HAL_DMA_Init+0x158>)
 800457c:	4013      	ands	r3, r2
 800457e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800458e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800459a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b8:	2b04      	cmp	r3, #4
 80045ba:	d107      	bne.n	80045cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c4:	4313      	orrs	r3, r2
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	f023 0307 	bic.w	r3, r3, #7
 80045e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f2:	2b04      	cmp	r3, #4
 80045f4:	d117      	bne.n	8004626 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00e      	beq.n	8004626 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 fb01 	bl	8004c10 <DMA_CheckFifoParam>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d008      	beq.n	8004626 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2240      	movs	r2, #64	; 0x40
 8004618:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004622:	2301      	movs	r3, #1
 8004624:	e016      	b.n	8004654 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 fab8 	bl	8004ba4 <DMA_CalcBaseAndBitshift>
 8004634:	4603      	mov	r3, r0
 8004636:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800463c:	223f      	movs	r2, #63	; 0x3f
 800463e:	409a      	lsls	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3718      	adds	r7, #24
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	f010803f 	.word	0xf010803f

08004660 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
 800466c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800466e:	2300      	movs	r3, #0
 8004670:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004676:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800467e:	2b01      	cmp	r3, #1
 8004680:	d101      	bne.n	8004686 <HAL_DMA_Start_IT+0x26>
 8004682:	2302      	movs	r3, #2
 8004684:	e040      	b.n	8004708 <HAL_DMA_Start_IT+0xa8>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b01      	cmp	r3, #1
 8004698:	d12f      	bne.n	80046fa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2202      	movs	r2, #2
 800469e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	68b9      	ldr	r1, [r7, #8]
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f000 fa4a 	bl	8004b48 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046b8:	223f      	movs	r2, #63	; 0x3f
 80046ba:	409a      	lsls	r2, r3
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f042 0216 	orr.w	r2, r2, #22
 80046ce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d007      	beq.n	80046e8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f042 0208 	orr.w	r2, r2, #8
 80046e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f042 0201 	orr.w	r2, r2, #1
 80046f6:	601a      	str	r2, [r3, #0]
 80046f8:	e005      	b.n	8004706 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004702:	2302      	movs	r3, #2
 8004704:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004706:	7dfb      	ldrb	r3, [r7, #23]
}
 8004708:	4618      	mov	r0, r3
 800470a:	3718      	adds	r7, #24
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800471c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800471e:	f7ff f873 	bl	8003808 <HAL_GetTick>
 8004722:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800472a:	b2db      	uxtb	r3, r3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d008      	beq.n	8004742 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2280      	movs	r2, #128	; 0x80
 8004734:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e052      	b.n	80047e8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f022 0216 	bic.w	r2, r2, #22
 8004750:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	695a      	ldr	r2, [r3, #20]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004760:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	2b00      	cmp	r3, #0
 8004768:	d103      	bne.n	8004772 <HAL_DMA_Abort+0x62>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800476e:	2b00      	cmp	r3, #0
 8004770:	d007      	beq.n	8004782 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f022 0208 	bic.w	r2, r2, #8
 8004780:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f022 0201 	bic.w	r2, r2, #1
 8004790:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004792:	e013      	b.n	80047bc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004794:	f7ff f838 	bl	8003808 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b05      	cmp	r3, #5
 80047a0:	d90c      	bls.n	80047bc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2220      	movs	r2, #32
 80047a6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2203      	movs	r2, #3
 80047ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e015      	b.n	80047e8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1e4      	bne.n	8004794 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ce:	223f      	movs	r2, #63	; 0x3f
 80047d0:	409a      	lsls	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2b02      	cmp	r3, #2
 8004802:	d004      	beq.n	800480e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2280      	movs	r2, #128	; 0x80
 8004808:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e00c      	b.n	8004828 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2205      	movs	r2, #5
 8004812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f022 0201 	bic.w	r2, r2, #1
 8004824:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b086      	sub	sp, #24
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800483c:	2300      	movs	r3, #0
 800483e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004840:	4b8e      	ldr	r3, [pc, #568]	; (8004a7c <HAL_DMA_IRQHandler+0x248>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a8e      	ldr	r2, [pc, #568]	; (8004a80 <HAL_DMA_IRQHandler+0x24c>)
 8004846:	fba2 2303 	umull	r2, r3, r2, r3
 800484a:	0a9b      	lsrs	r3, r3, #10
 800484c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004852:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800485e:	2208      	movs	r2, #8
 8004860:	409a      	lsls	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	4013      	ands	r3, r2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d01a      	beq.n	80048a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0304 	and.w	r3, r3, #4
 8004874:	2b00      	cmp	r3, #0
 8004876:	d013      	beq.n	80048a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f022 0204 	bic.w	r2, r2, #4
 8004886:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800488c:	2208      	movs	r2, #8
 800488e:	409a      	lsls	r2, r3
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004898:	f043 0201 	orr.w	r2, r3, #1
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a4:	2201      	movs	r2, #1
 80048a6:	409a      	lsls	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	4013      	ands	r3, r2
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d012      	beq.n	80048d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00b      	beq.n	80048d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048c2:	2201      	movs	r2, #1
 80048c4:	409a      	lsls	r2, r3
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ce:	f043 0202 	orr.w	r2, r3, #2
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048da:	2204      	movs	r2, #4
 80048dc:	409a      	lsls	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	4013      	ands	r3, r2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d012      	beq.n	800490c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0302 	and.w	r3, r3, #2
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00b      	beq.n	800490c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f8:	2204      	movs	r2, #4
 80048fa:	409a      	lsls	r2, r3
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004904:	f043 0204 	orr.w	r2, r3, #4
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004910:	2210      	movs	r2, #16
 8004912:	409a      	lsls	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	4013      	ands	r3, r2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d043      	beq.n	80049a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0308 	and.w	r3, r3, #8
 8004926:	2b00      	cmp	r3, #0
 8004928:	d03c      	beq.n	80049a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800492e:	2210      	movs	r2, #16
 8004930:	409a      	lsls	r2, r3
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d018      	beq.n	8004976 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d108      	bne.n	8004964 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004956:	2b00      	cmp	r3, #0
 8004958:	d024      	beq.n	80049a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	4798      	blx	r3
 8004962:	e01f      	b.n	80049a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004968:	2b00      	cmp	r3, #0
 800496a:	d01b      	beq.n	80049a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	4798      	blx	r3
 8004974:	e016      	b.n	80049a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004980:	2b00      	cmp	r3, #0
 8004982:	d107      	bne.n	8004994 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f022 0208 	bic.w	r2, r2, #8
 8004992:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004998:	2b00      	cmp	r3, #0
 800499a:	d003      	beq.n	80049a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049a8:	2220      	movs	r2, #32
 80049aa:	409a      	lsls	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	4013      	ands	r3, r2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f000 808f 	beq.w	8004ad4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0310 	and.w	r3, r3, #16
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f000 8087 	beq.w	8004ad4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ca:	2220      	movs	r2, #32
 80049cc:	409a      	lsls	r2, r3
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b05      	cmp	r3, #5
 80049dc:	d136      	bne.n	8004a4c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f022 0216 	bic.w	r2, r2, #22
 80049ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	695a      	ldr	r2, [r3, #20]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d103      	bne.n	8004a0e <HAL_DMA_IRQHandler+0x1da>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d007      	beq.n	8004a1e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 0208 	bic.w	r2, r2, #8
 8004a1c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a22:	223f      	movs	r2, #63	; 0x3f
 8004a24:	409a      	lsls	r2, r3
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d07e      	beq.n	8004b40 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	4798      	blx	r3
        }
        return;
 8004a4a:	e079      	b.n	8004b40 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d01d      	beq.n	8004a96 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d10d      	bne.n	8004a84 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d031      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	4798      	blx	r3
 8004a78:	e02c      	b.n	8004ad4 <HAL_DMA_IRQHandler+0x2a0>
 8004a7a:	bf00      	nop
 8004a7c:	20000004 	.word	0x20000004
 8004a80:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d023      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	4798      	blx	r3
 8004a94:	e01e      	b.n	8004ad4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d10f      	bne.n	8004ac4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f022 0210 	bic.w	r2, r2, #16
 8004ab2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d003      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d032      	beq.n	8004b42 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae0:	f003 0301 	and.w	r3, r3, #1
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d022      	beq.n	8004b2e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2205      	movs	r2, #5
 8004aec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f022 0201 	bic.w	r2, r2, #1
 8004afe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	3301      	adds	r3, #1
 8004b04:	60bb      	str	r3, [r7, #8]
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d307      	bcc.n	8004b1c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1f2      	bne.n	8004b00 <HAL_DMA_IRQHandler+0x2cc>
 8004b1a:	e000      	b.n	8004b1e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004b1c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d005      	beq.n	8004b42 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	4798      	blx	r3
 8004b3e:	e000      	b.n	8004b42 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004b40:	bf00      	nop
    }
  }
}
 8004b42:	3718      	adds	r7, #24
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
 8004b54:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b64:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	683a      	ldr	r2, [r7, #0]
 8004b6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	2b40      	cmp	r3, #64	; 0x40
 8004b74:	d108      	bne.n	8004b88 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004b86:	e007      	b.n	8004b98 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68ba      	ldr	r2, [r7, #8]
 8004b8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	60da      	str	r2, [r3, #12]
}
 8004b98:	bf00      	nop
 8004b9a:	3714      	adds	r7, #20
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	3b10      	subs	r3, #16
 8004bb4:	4a14      	ldr	r2, [pc, #80]	; (8004c08 <DMA_CalcBaseAndBitshift+0x64>)
 8004bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bba:	091b      	lsrs	r3, r3, #4
 8004bbc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004bbe:	4a13      	ldr	r2, [pc, #76]	; (8004c0c <DMA_CalcBaseAndBitshift+0x68>)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2b03      	cmp	r3, #3
 8004bd0:	d909      	bls.n	8004be6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004bda:	f023 0303 	bic.w	r3, r3, #3
 8004bde:	1d1a      	adds	r2, r3, #4
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	659a      	str	r2, [r3, #88]	; 0x58
 8004be4:	e007      	b.n	8004bf6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004bee:	f023 0303 	bic.w	r3, r3, #3
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3714      	adds	r7, #20
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	aaaaaaab 	.word	0xaaaaaaab
 8004c0c:	0800bce8 	.word	0x0800bce8

08004c10 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b085      	sub	sp, #20
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c20:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d11f      	bne.n	8004c6a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	2b03      	cmp	r3, #3
 8004c2e:	d856      	bhi.n	8004cde <DMA_CheckFifoParam+0xce>
 8004c30:	a201      	add	r2, pc, #4	; (adr r2, 8004c38 <DMA_CheckFifoParam+0x28>)
 8004c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c36:	bf00      	nop
 8004c38:	08004c49 	.word	0x08004c49
 8004c3c:	08004c5b 	.word	0x08004c5b
 8004c40:	08004c49 	.word	0x08004c49
 8004c44:	08004cdf 	.word	0x08004cdf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d046      	beq.n	8004ce2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c58:	e043      	b.n	8004ce2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c62:	d140      	bne.n	8004ce6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c68:	e03d      	b.n	8004ce6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c72:	d121      	bne.n	8004cb8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	2b03      	cmp	r3, #3
 8004c78:	d837      	bhi.n	8004cea <DMA_CheckFifoParam+0xda>
 8004c7a:	a201      	add	r2, pc, #4	; (adr r2, 8004c80 <DMA_CheckFifoParam+0x70>)
 8004c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c80:	08004c91 	.word	0x08004c91
 8004c84:	08004c97 	.word	0x08004c97
 8004c88:	08004c91 	.word	0x08004c91
 8004c8c:	08004ca9 	.word	0x08004ca9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	73fb      	strb	r3, [r7, #15]
      break;
 8004c94:	e030      	b.n	8004cf8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d025      	beq.n	8004cee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ca6:	e022      	b.n	8004cee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004cb0:	d11f      	bne.n	8004cf2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004cb6:	e01c      	b.n	8004cf2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d903      	bls.n	8004cc6 <DMA_CheckFifoParam+0xb6>
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	2b03      	cmp	r3, #3
 8004cc2:	d003      	beq.n	8004ccc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004cc4:	e018      	b.n	8004cf8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	73fb      	strb	r3, [r7, #15]
      break;
 8004cca:	e015      	b.n	8004cf8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d00e      	beq.n	8004cf6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	73fb      	strb	r3, [r7, #15]
      break;
 8004cdc:	e00b      	b.n	8004cf6 <DMA_CheckFifoParam+0xe6>
      break;
 8004cde:	bf00      	nop
 8004ce0:	e00a      	b.n	8004cf8 <DMA_CheckFifoParam+0xe8>
      break;
 8004ce2:	bf00      	nop
 8004ce4:	e008      	b.n	8004cf8 <DMA_CheckFifoParam+0xe8>
      break;
 8004ce6:	bf00      	nop
 8004ce8:	e006      	b.n	8004cf8 <DMA_CheckFifoParam+0xe8>
      break;
 8004cea:	bf00      	nop
 8004cec:	e004      	b.n	8004cf8 <DMA_CheckFifoParam+0xe8>
      break;
 8004cee:	bf00      	nop
 8004cf0:	e002      	b.n	8004cf8 <DMA_CheckFifoParam+0xe8>
      break;   
 8004cf2:	bf00      	nop
 8004cf4:	e000      	b.n	8004cf8 <DMA_CheckFifoParam+0xe8>
      break;
 8004cf6:	bf00      	nop
    }
  } 
  
  return status; 
 8004cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3714      	adds	r7, #20
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop

08004d08 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d101      	bne.n	8004d1a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e06c      	b.n	8004df4 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d106      	bne.n	8004d32 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2223      	movs	r2, #35	; 0x23
 8004d28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f7fd fd9f 	bl	8002870 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d32:	2300      	movs	r3, #0
 8004d34:	60bb      	str	r3, [r7, #8]
 8004d36:	4b31      	ldr	r3, [pc, #196]	; (8004dfc <HAL_ETH_Init+0xf4>)
 8004d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d3a:	4a30      	ldr	r2, [pc, #192]	; (8004dfc <HAL_ETH_Init+0xf4>)
 8004d3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d40:	6453      	str	r3, [r2, #68]	; 0x44
 8004d42:	4b2e      	ldr	r3, [pc, #184]	; (8004dfc <HAL_ETH_Init+0xf4>)
 8004d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d4a:	60bb      	str	r3, [r7, #8]
 8004d4c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004d4e:	4b2c      	ldr	r3, [pc, #176]	; (8004e00 <HAL_ETH_Init+0xf8>)
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	4a2b      	ldr	r2, [pc, #172]	; (8004e00 <HAL_ETH_Init+0xf8>)
 8004d54:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004d58:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004d5a:	4b29      	ldr	r3, [pc, #164]	; (8004e00 <HAL_ETH_Init+0xf8>)
 8004d5c:	685a      	ldr	r2, [r3, #4]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	4927      	ldr	r1, [pc, #156]	; (8004e00 <HAL_ETH_Init+0xf8>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8004d68:	4b25      	ldr	r3, [pc, #148]	; (8004e00 <HAL_ETH_Init+0xf8>)
 8004d6a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	6812      	ldr	r2, [r2, #0]
 8004d7a:	f043 0301 	orr.w	r3, r3, #1
 8004d7e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004d82:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d84:	f7fe fd40 	bl	8003808 <HAL_GetTick>
 8004d88:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004d8a:	e011      	b.n	8004db0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004d8c:	f7fe fd3c 	bl	8003808 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004d9a:	d909      	bls.n	8004db0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2204      	movs	r2, #4
 8004da0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	22e0      	movs	r2, #224	; 0xe0
 8004da8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e021      	b.n	8004df4 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d1e4      	bne.n	8004d8c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f958 	bl	8005078 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 f9ff 	bl	80051cc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 fa55 	bl	800527e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	461a      	mov	r2, r3
 8004dda:	2100      	movs	r1, #0
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 f9bd 	bl	800515c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2210      	movs	r2, #16
 8004dee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3710      	adds	r7, #16
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	40023800 	.word	0x40023800
 8004e00:	40013800 	.word	0x40013800

08004e04 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	4b51      	ldr	r3, [pc, #324]	; (8004f60 <ETH_SetMACConfig+0x15c>)
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	7c1b      	ldrb	r3, [r3, #16]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d102      	bne.n	8004e2c <ETH_SetMACConfig+0x28>
 8004e26:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004e2a:	e000      	b.n	8004e2e <ETH_SetMACConfig+0x2a>
 8004e2c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	7c5b      	ldrb	r3, [r3, #17]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d102      	bne.n	8004e3c <ETH_SetMACConfig+0x38>
 8004e36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004e3a:	e000      	b.n	8004e3e <ETH_SetMACConfig+0x3a>
 8004e3c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004e3e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004e44:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	7fdb      	ldrb	r3, [r3, #31]
 8004e4a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004e4c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004e52:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004e54:	683a      	ldr	r2, [r7, #0]
 8004e56:	7f92      	ldrb	r2, [r2, #30]
 8004e58:	2a00      	cmp	r2, #0
 8004e5a:	d102      	bne.n	8004e62 <ETH_SetMACConfig+0x5e>
 8004e5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004e60:	e000      	b.n	8004e64 <ETH_SetMACConfig+0x60>
 8004e62:	2200      	movs	r2, #0
                        macconf->Speed |
 8004e64:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	7f1b      	ldrb	r3, [r3, #28]
 8004e6a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004e6c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004e72:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	791b      	ldrb	r3, [r3, #4]
 8004e78:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8004e7a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004e7c:	683a      	ldr	r2, [r7, #0]
 8004e7e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004e82:	2a00      	cmp	r2, #0
 8004e84:	d102      	bne.n	8004e8c <ETH_SetMACConfig+0x88>
 8004e86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e8a:	e000      	b.n	8004e8e <ETH_SetMACConfig+0x8a>
 8004e8c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004e8e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	7bdb      	ldrb	r3, [r3, #15]
 8004e94:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004e96:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004e9c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ea4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004ebe:	2001      	movs	r0, #1
 8004ec0:	f7fe fcae 	bl	8003820 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004eda:	4013      	ands	r3, r2
 8004edc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ee2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004ee4:	683a      	ldr	r2, [r7, #0]
 8004ee6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004eea:	2a00      	cmp	r2, #0
 8004eec:	d101      	bne.n	8004ef2 <ETH_SetMACConfig+0xee>
 8004eee:	2280      	movs	r2, #128	; 0x80
 8004ef0:	e000      	b.n	8004ef4 <ETH_SetMACConfig+0xf0>
 8004ef2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004ef4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004efa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004efc:	683a      	ldr	r2, [r7, #0]
 8004efe:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8004f02:	2a01      	cmp	r2, #1
 8004f04:	d101      	bne.n	8004f0a <ETH_SetMACConfig+0x106>
 8004f06:	2208      	movs	r2, #8
 8004f08:	e000      	b.n	8004f0c <ETH_SetMACConfig+0x108>
 8004f0a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004f0c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8004f0e:	683a      	ldr	r2, [r7, #0]
 8004f10:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8004f14:	2a01      	cmp	r2, #1
 8004f16:	d101      	bne.n	8004f1c <ETH_SetMACConfig+0x118>
 8004f18:	2204      	movs	r2, #4
 8004f1a:	e000      	b.n	8004f1e <ETH_SetMACConfig+0x11a>
 8004f1c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004f1e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8004f20:	683a      	ldr	r2, [r7, #0]
 8004f22:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8004f26:	2a01      	cmp	r2, #1
 8004f28:	d101      	bne.n	8004f2e <ETH_SetMACConfig+0x12a>
 8004f2a:	2202      	movs	r2, #2
 8004f2c:	e000      	b.n	8004f30 <ETH_SetMACConfig+0x12c>
 8004f2e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004f30:	4313      	orrs	r3, r2
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004f48:	2001      	movs	r0, #1
 8004f4a:	f7fe fc69 	bl	8003820 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	619a      	str	r2, [r3, #24]
}
 8004f56:	bf00      	nop
 8004f58:	3710      	adds	r7, #16
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	ff20810f 	.word	0xff20810f

08004f64 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	4b3d      	ldr	r3, [pc, #244]	; (8005074 <ETH_SetDMAConfig+0x110>)
 8004f7e:	4013      	ands	r3, r2
 8004f80:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	7b1b      	ldrb	r3, [r3, #12]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d102      	bne.n	8004f90 <ETH_SetDMAConfig+0x2c>
 8004f8a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004f8e:	e000      	b.n	8004f92 <ETH_SetDMAConfig+0x2e>
 8004f90:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	7b5b      	ldrb	r3, [r3, #13]
 8004f96:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004f98:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004f9a:	683a      	ldr	r2, [r7, #0]
 8004f9c:	7f52      	ldrb	r2, [r2, #29]
 8004f9e:	2a00      	cmp	r2, #0
 8004fa0:	d102      	bne.n	8004fa8 <ETH_SetDMAConfig+0x44>
 8004fa2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004fa6:	e000      	b.n	8004faa <ETH_SetDMAConfig+0x46>
 8004fa8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004faa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	7b9b      	ldrb	r3, [r3, #14]
 8004fb0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004fb2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004fb8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	7f1b      	ldrb	r3, [r3, #28]
 8004fbe:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004fc0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	7f9b      	ldrb	r3, [r3, #30]
 8004fc6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004fc8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004fce:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004fd6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fe8:	461a      	mov	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004ffa:	2001      	movs	r0, #1
 8004ffc:	f7fe fc10 	bl	8003820 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005008:	461a      	mov	r2, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	791b      	ldrb	r3, [r3, #4]
 8005012:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005018:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800501e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005024:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800502c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800502e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005034:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8005036:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800503c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	6812      	ldr	r2, [r2, #0]
 8005042:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005046:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800504a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005058:	2001      	movs	r0, #1
 800505a:	f7fe fbe1 	bl	8003820 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005066:	461a      	mov	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6013      	str	r3, [r2, #0]
}
 800506c:	bf00      	nop
 800506e:	3710      	adds	r7, #16
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	f8de3f23 	.word	0xf8de3f23

08005078 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b0a6      	sub	sp, #152	; 0x98
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8005080:	2301      	movs	r3, #1
 8005082:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8005086:	2301      	movs	r3, #1
 8005088:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800508c:	2300      	movs	r3, #0
 800508e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005090:	2300      	movs	r3, #0
 8005092:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8005096:	2301      	movs	r3, #1
 8005098:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800509c:	2300      	movs	r3, #0
 800509e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80050a2:	2301      	movs	r3, #1
 80050a4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80050a8:	2300      	movs	r3, #0
 80050aa:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80050ae:	2300      	movs	r3, #0
 80050b0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80050b4:	2300      	movs	r3, #0
 80050b6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80050b8:	2300      	movs	r3, #0
 80050ba:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80050be:	2300      	movs	r3, #0
 80050c0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80050c2:	2300      	movs	r3, #0
 80050c4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80050c8:	2300      	movs	r3, #0
 80050ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80050ce:	2300      	movs	r3, #0
 80050d0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80050d4:	2300      	movs	r3, #0
 80050d6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80050da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80050de:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80050e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80050e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80050e6:	2300      	movs	r3, #0
 80050e8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80050ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80050f0:	4619      	mov	r1, r3
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7ff fe86 	bl	8004e04 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80050f8:	2301      	movs	r3, #1
 80050fa:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80050fc:	2301      	movs	r3, #1
 80050fe:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8005100:	2301      	movs	r3, #1
 8005102:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8005106:	2301      	movs	r3, #1
 8005108:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800510a:	2300      	movs	r3, #0
 800510c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800510e:	2300      	movs	r3, #0
 8005110:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8005114:	2300      	movs	r3, #0
 8005116:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800511a:	2300      	movs	r3, #0
 800511c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800511e:	2301      	movs	r3, #1
 8005120:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005124:	2301      	movs	r3, #1
 8005126:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005128:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800512c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800512e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005132:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005134:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005138:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800513a:	2301      	movs	r3, #1
 800513c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8005140:	2300      	movs	r3, #0
 8005142:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8005144:	2300      	movs	r3, #0
 8005146:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005148:	f107 0308 	add.w	r3, r7, #8
 800514c:	4619      	mov	r1, r3
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f7ff ff08 	bl	8004f64 <ETH_SetDMAConfig>
}
 8005154:	bf00      	nop
 8005156:	3798      	adds	r7, #152	; 0x98
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800515c:	b480      	push	{r7}
 800515e:	b087      	sub	sp, #28
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	3305      	adds	r3, #5
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	021b      	lsls	r3, r3, #8
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	3204      	adds	r2, #4
 8005174:	7812      	ldrb	r2, [r2, #0]
 8005176:	4313      	orrs	r3, r2
 8005178:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800517a:	68ba      	ldr	r2, [r7, #8]
 800517c:	4b11      	ldr	r3, [pc, #68]	; (80051c4 <ETH_MACAddressConfig+0x68>)
 800517e:	4413      	add	r3, r2
 8005180:	461a      	mov	r2, r3
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	3303      	adds	r3, #3
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	061a      	lsls	r2, r3, #24
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	3302      	adds	r3, #2
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	041b      	lsls	r3, r3, #16
 8005196:	431a      	orrs	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	3301      	adds	r3, #1
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	021b      	lsls	r3, r3, #8
 80051a0:	4313      	orrs	r3, r2
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	7812      	ldrb	r2, [r2, #0]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	4b06      	ldr	r3, [pc, #24]	; (80051c8 <ETH_MACAddressConfig+0x6c>)
 80051ae:	4413      	add	r3, r2
 80051b0:	461a      	mov	r2, r3
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	6013      	str	r3, [r2, #0]
}
 80051b6:	bf00      	nop
 80051b8:	371c      	adds	r7, #28
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	40028040 	.word	0x40028040
 80051c8:	40028044 	.word	0x40028044

080051cc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80051d4:	2300      	movs	r3, #0
 80051d6:	60fb      	str	r3, [r7, #12]
 80051d8:	e03e      	b.n	8005258 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	68d9      	ldr	r1, [r3, #12]
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	4613      	mov	r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	4413      	add	r3, r2
 80051e6:	00db      	lsls	r3, r3, #3
 80051e8:	440b      	add	r3, r1
 80051ea:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	2200      	movs	r2, #0
 80051f0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	2200      	movs	r2, #0
 80051f6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	2200      	movs	r2, #0
 80051fc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	2200      	movs	r2, #0
 8005202:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005204:	68b9      	ldr	r1, [r7, #8]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	3206      	adds	r2, #6
 800520c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2b02      	cmp	r3, #2
 8005220:	d80c      	bhi.n	800523c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	68d9      	ldr	r1, [r3, #12]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	1c5a      	adds	r2, r3, #1
 800522a:	4613      	mov	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	4413      	add	r3, r2
 8005230:	00db      	lsls	r3, r3, #3
 8005232:	440b      	add	r3, r1
 8005234:	461a      	mov	r2, r3
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	60da      	str	r2, [r3, #12]
 800523a:	e004      	b.n	8005246 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	461a      	mov	r2, r3
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	3301      	adds	r3, #1
 8005256:	60fb      	str	r3, [r7, #12]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2b03      	cmp	r3, #3
 800525c:	d9bd      	bls.n	80051da <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	68da      	ldr	r2, [r3, #12]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005270:	611a      	str	r2, [r3, #16]
}
 8005272:	bf00      	nop
 8005274:	3714      	adds	r7, #20
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr

0800527e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800527e:	b480      	push	{r7}
 8005280:	b085      	sub	sp, #20
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005286:	2300      	movs	r3, #0
 8005288:	60fb      	str	r3, [r7, #12]
 800528a:	e046      	b.n	800531a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6919      	ldr	r1, [r3, #16]
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	4613      	mov	r3, r2
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	4413      	add	r3, r2
 8005298:	00db      	lsls	r3, r3, #3
 800529a:	440b      	add	r3, r1
 800529c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	2200      	movs	r2, #0
 80052a2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	2200      	movs	r2, #0
 80052a8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	2200      	movs	r2, #0
 80052ae:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	2200      	movs	r2, #0
 80052b4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	2200      	movs	r2, #0
 80052ba:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	2200      	movs	r2, #0
 80052c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80052c8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80052d0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80052de:	68b9      	ldr	r1, [r7, #8]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	3212      	adds	r2, #18
 80052e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d80c      	bhi.n	800530a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6919      	ldr	r1, [r3, #16]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	1c5a      	adds	r2, r3, #1
 80052f8:	4613      	mov	r3, r2
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	4413      	add	r3, r2
 80052fe:	00db      	lsls	r3, r3, #3
 8005300:	440b      	add	r3, r1
 8005302:	461a      	mov	r2, r3
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	60da      	str	r2, [r3, #12]
 8005308:	e004      	b.n	8005314 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	461a      	mov	r2, r3
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	3301      	adds	r3, #1
 8005318:	60fb      	str	r3, [r7, #12]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2b03      	cmp	r3, #3
 800531e:	d9b5      	bls.n	800528c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	691a      	ldr	r2, [r3, #16]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800534a:	60da      	str	r2, [r3, #12]
}
 800534c:	bf00      	nop
 800534e:	3714      	adds	r7, #20
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005358:	b480      	push	{r7}
 800535a:	b089      	sub	sp, #36	; 0x24
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005362:	2300      	movs	r3, #0
 8005364:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005366:	2300      	movs	r3, #0
 8005368:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800536a:	2300      	movs	r3, #0
 800536c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800536e:	2300      	movs	r3, #0
 8005370:	61fb      	str	r3, [r7, #28]
 8005372:	e177      	b.n	8005664 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005374:	2201      	movs	r2, #1
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	fa02 f303 	lsl.w	r3, r2, r3
 800537c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	4013      	ands	r3, r2
 8005386:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005388:	693a      	ldr	r2, [r7, #16]
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	429a      	cmp	r2, r3
 800538e:	f040 8166 	bne.w	800565e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f003 0303 	and.w	r3, r3, #3
 800539a:	2b01      	cmp	r3, #1
 800539c:	d005      	beq.n	80053aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d130      	bne.n	800540c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	005b      	lsls	r3, r3, #1
 80053b4:	2203      	movs	r2, #3
 80053b6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ba:	43db      	mvns	r3, r3
 80053bc:	69ba      	ldr	r2, [r7, #24]
 80053be:	4013      	ands	r3, r2
 80053c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	68da      	ldr	r2, [r3, #12]
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	005b      	lsls	r3, r3, #1
 80053ca:	fa02 f303 	lsl.w	r3, r2, r3
 80053ce:	69ba      	ldr	r2, [r7, #24]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	69ba      	ldr	r2, [r7, #24]
 80053d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80053e0:	2201      	movs	r2, #1
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	fa02 f303 	lsl.w	r3, r2, r3
 80053e8:	43db      	mvns	r3, r3
 80053ea:	69ba      	ldr	r2, [r7, #24]
 80053ec:	4013      	ands	r3, r2
 80053ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	091b      	lsrs	r3, r3, #4
 80053f6:	f003 0201 	and.w	r2, r3, #1
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005400:	69ba      	ldr	r2, [r7, #24]
 8005402:	4313      	orrs	r3, r2
 8005404:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	69ba      	ldr	r2, [r7, #24]
 800540a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	f003 0303 	and.w	r3, r3, #3
 8005414:	2b03      	cmp	r3, #3
 8005416:	d017      	beq.n	8005448 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	005b      	lsls	r3, r3, #1
 8005422:	2203      	movs	r2, #3
 8005424:	fa02 f303 	lsl.w	r3, r2, r3
 8005428:	43db      	mvns	r3, r3
 800542a:	69ba      	ldr	r2, [r7, #24]
 800542c:	4013      	ands	r3, r2
 800542e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	689a      	ldr	r2, [r3, #8]
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	005b      	lsls	r3, r3, #1
 8005438:	fa02 f303 	lsl.w	r3, r2, r3
 800543c:	69ba      	ldr	r2, [r7, #24]
 800543e:	4313      	orrs	r3, r2
 8005440:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	69ba      	ldr	r2, [r7, #24]
 8005446:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f003 0303 	and.w	r3, r3, #3
 8005450:	2b02      	cmp	r3, #2
 8005452:	d123      	bne.n	800549c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	08da      	lsrs	r2, r3, #3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	3208      	adds	r2, #8
 800545c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005460:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	f003 0307 	and.w	r3, r3, #7
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	220f      	movs	r2, #15
 800546c:	fa02 f303 	lsl.w	r3, r2, r3
 8005470:	43db      	mvns	r3, r3
 8005472:	69ba      	ldr	r2, [r7, #24]
 8005474:	4013      	ands	r3, r2
 8005476:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	691a      	ldr	r2, [r3, #16]
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	f003 0307 	and.w	r3, r3, #7
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	fa02 f303 	lsl.w	r3, r2, r3
 8005488:	69ba      	ldr	r2, [r7, #24]
 800548a:	4313      	orrs	r3, r2
 800548c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	08da      	lsrs	r2, r3, #3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	3208      	adds	r2, #8
 8005496:	69b9      	ldr	r1, [r7, #24]
 8005498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	005b      	lsls	r3, r3, #1
 80054a6:	2203      	movs	r2, #3
 80054a8:	fa02 f303 	lsl.w	r3, r2, r3
 80054ac:	43db      	mvns	r3, r3
 80054ae:	69ba      	ldr	r2, [r7, #24]
 80054b0:	4013      	ands	r3, r2
 80054b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f003 0203 	and.w	r2, r3, #3
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	005b      	lsls	r3, r3, #1
 80054c0:	fa02 f303 	lsl.w	r3, r2, r3
 80054c4:	69ba      	ldr	r2, [r7, #24]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	69ba      	ldr	r2, [r7, #24]
 80054ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f000 80c0 	beq.w	800565e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054de:	2300      	movs	r3, #0
 80054e0:	60fb      	str	r3, [r7, #12]
 80054e2:	4b66      	ldr	r3, [pc, #408]	; (800567c <HAL_GPIO_Init+0x324>)
 80054e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054e6:	4a65      	ldr	r2, [pc, #404]	; (800567c <HAL_GPIO_Init+0x324>)
 80054e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054ec:	6453      	str	r3, [r2, #68]	; 0x44
 80054ee:	4b63      	ldr	r3, [pc, #396]	; (800567c <HAL_GPIO_Init+0x324>)
 80054f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054f6:	60fb      	str	r3, [r7, #12]
 80054f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80054fa:	4a61      	ldr	r2, [pc, #388]	; (8005680 <HAL_GPIO_Init+0x328>)
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	089b      	lsrs	r3, r3, #2
 8005500:	3302      	adds	r3, #2
 8005502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005506:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	f003 0303 	and.w	r3, r3, #3
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	220f      	movs	r2, #15
 8005512:	fa02 f303 	lsl.w	r3, r2, r3
 8005516:	43db      	mvns	r3, r3
 8005518:	69ba      	ldr	r2, [r7, #24]
 800551a:	4013      	ands	r3, r2
 800551c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a58      	ldr	r2, [pc, #352]	; (8005684 <HAL_GPIO_Init+0x32c>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d037      	beq.n	8005596 <HAL_GPIO_Init+0x23e>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a57      	ldr	r2, [pc, #348]	; (8005688 <HAL_GPIO_Init+0x330>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d031      	beq.n	8005592 <HAL_GPIO_Init+0x23a>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a56      	ldr	r2, [pc, #344]	; (800568c <HAL_GPIO_Init+0x334>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d02b      	beq.n	800558e <HAL_GPIO_Init+0x236>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a55      	ldr	r2, [pc, #340]	; (8005690 <HAL_GPIO_Init+0x338>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d025      	beq.n	800558a <HAL_GPIO_Init+0x232>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a54      	ldr	r2, [pc, #336]	; (8005694 <HAL_GPIO_Init+0x33c>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d01f      	beq.n	8005586 <HAL_GPIO_Init+0x22e>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a53      	ldr	r2, [pc, #332]	; (8005698 <HAL_GPIO_Init+0x340>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d019      	beq.n	8005582 <HAL_GPIO_Init+0x22a>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a52      	ldr	r2, [pc, #328]	; (800569c <HAL_GPIO_Init+0x344>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d013      	beq.n	800557e <HAL_GPIO_Init+0x226>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a51      	ldr	r2, [pc, #324]	; (80056a0 <HAL_GPIO_Init+0x348>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d00d      	beq.n	800557a <HAL_GPIO_Init+0x222>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a50      	ldr	r2, [pc, #320]	; (80056a4 <HAL_GPIO_Init+0x34c>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d007      	beq.n	8005576 <HAL_GPIO_Init+0x21e>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a4f      	ldr	r2, [pc, #316]	; (80056a8 <HAL_GPIO_Init+0x350>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d101      	bne.n	8005572 <HAL_GPIO_Init+0x21a>
 800556e:	2309      	movs	r3, #9
 8005570:	e012      	b.n	8005598 <HAL_GPIO_Init+0x240>
 8005572:	230a      	movs	r3, #10
 8005574:	e010      	b.n	8005598 <HAL_GPIO_Init+0x240>
 8005576:	2308      	movs	r3, #8
 8005578:	e00e      	b.n	8005598 <HAL_GPIO_Init+0x240>
 800557a:	2307      	movs	r3, #7
 800557c:	e00c      	b.n	8005598 <HAL_GPIO_Init+0x240>
 800557e:	2306      	movs	r3, #6
 8005580:	e00a      	b.n	8005598 <HAL_GPIO_Init+0x240>
 8005582:	2305      	movs	r3, #5
 8005584:	e008      	b.n	8005598 <HAL_GPIO_Init+0x240>
 8005586:	2304      	movs	r3, #4
 8005588:	e006      	b.n	8005598 <HAL_GPIO_Init+0x240>
 800558a:	2303      	movs	r3, #3
 800558c:	e004      	b.n	8005598 <HAL_GPIO_Init+0x240>
 800558e:	2302      	movs	r3, #2
 8005590:	e002      	b.n	8005598 <HAL_GPIO_Init+0x240>
 8005592:	2301      	movs	r3, #1
 8005594:	e000      	b.n	8005598 <HAL_GPIO_Init+0x240>
 8005596:	2300      	movs	r3, #0
 8005598:	69fa      	ldr	r2, [r7, #28]
 800559a:	f002 0203 	and.w	r2, r2, #3
 800559e:	0092      	lsls	r2, r2, #2
 80055a0:	4093      	lsls	r3, r2
 80055a2:	69ba      	ldr	r2, [r7, #24]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80055a8:	4935      	ldr	r1, [pc, #212]	; (8005680 <HAL_GPIO_Init+0x328>)
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	089b      	lsrs	r3, r3, #2
 80055ae:	3302      	adds	r3, #2
 80055b0:	69ba      	ldr	r2, [r7, #24]
 80055b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80055b6:	4b3d      	ldr	r3, [pc, #244]	; (80056ac <HAL_GPIO_Init+0x354>)
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	43db      	mvns	r3, r3
 80055c0:	69ba      	ldr	r2, [r7, #24]
 80055c2:	4013      	ands	r3, r2
 80055c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d003      	beq.n	80055da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80055d2:	69ba      	ldr	r2, [r7, #24]
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80055da:	4a34      	ldr	r2, [pc, #208]	; (80056ac <HAL_GPIO_Init+0x354>)
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80055e0:	4b32      	ldr	r3, [pc, #200]	; (80056ac <HAL_GPIO_Init+0x354>)
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	43db      	mvns	r3, r3
 80055ea:	69ba      	ldr	r2, [r7, #24]
 80055ec:	4013      	ands	r3, r2
 80055ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d003      	beq.n	8005604 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80055fc:	69ba      	ldr	r2, [r7, #24]
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	4313      	orrs	r3, r2
 8005602:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005604:	4a29      	ldr	r2, [pc, #164]	; (80056ac <HAL_GPIO_Init+0x354>)
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800560a:	4b28      	ldr	r3, [pc, #160]	; (80056ac <HAL_GPIO_Init+0x354>)
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	43db      	mvns	r3, r3
 8005614:	69ba      	ldr	r2, [r7, #24]
 8005616:	4013      	ands	r3, r2
 8005618:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d003      	beq.n	800562e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005626:	69ba      	ldr	r2, [r7, #24]
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	4313      	orrs	r3, r2
 800562c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800562e:	4a1f      	ldr	r2, [pc, #124]	; (80056ac <HAL_GPIO_Init+0x354>)
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005634:	4b1d      	ldr	r3, [pc, #116]	; (80056ac <HAL_GPIO_Init+0x354>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	43db      	mvns	r3, r3
 800563e:	69ba      	ldr	r2, [r7, #24]
 8005640:	4013      	ands	r3, r2
 8005642:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d003      	beq.n	8005658 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005650:	69ba      	ldr	r2, [r7, #24]
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	4313      	orrs	r3, r2
 8005656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005658:	4a14      	ldr	r2, [pc, #80]	; (80056ac <HAL_GPIO_Init+0x354>)
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	3301      	adds	r3, #1
 8005662:	61fb      	str	r3, [r7, #28]
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	2b0f      	cmp	r3, #15
 8005668:	f67f ae84 	bls.w	8005374 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800566c:	bf00      	nop
 800566e:	bf00      	nop
 8005670:	3724      	adds	r7, #36	; 0x24
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	40023800 	.word	0x40023800
 8005680:	40013800 	.word	0x40013800
 8005684:	40020000 	.word	0x40020000
 8005688:	40020400 	.word	0x40020400
 800568c:	40020800 	.word	0x40020800
 8005690:	40020c00 	.word	0x40020c00
 8005694:	40021000 	.word	0x40021000
 8005698:	40021400 	.word	0x40021400
 800569c:	40021800 	.word	0x40021800
 80056a0:	40021c00 	.word	0x40021c00
 80056a4:	40022000 	.word	0x40022000
 80056a8:	40022400 	.word	0x40022400
 80056ac:	40013c00 	.word	0x40013c00

080056b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	460b      	mov	r3, r1
 80056ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	691a      	ldr	r2, [r3, #16]
 80056c0:	887b      	ldrh	r3, [r7, #2]
 80056c2:	4013      	ands	r3, r2
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d002      	beq.n	80056ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80056c8:	2301      	movs	r3, #1
 80056ca:	73fb      	strb	r3, [r7, #15]
 80056cc:	e001      	b.n	80056d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80056ce:	2300      	movs	r3, #0
 80056d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80056d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3714      	adds	r7, #20
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	460b      	mov	r3, r1
 80056ea:	807b      	strh	r3, [r7, #2]
 80056ec:	4613      	mov	r3, r2
 80056ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80056f0:	787b      	ldrb	r3, [r7, #1]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d003      	beq.n	80056fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80056f6:	887a      	ldrh	r2, [r7, #2]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80056fc:	e003      	b.n	8005706 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80056fe:	887b      	ldrh	r3, [r7, #2]
 8005700:	041a      	lsls	r2, r3, #16
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	619a      	str	r2, [r3, #24]
}
 8005706:	bf00      	nop
 8005708:	370c      	adds	r7, #12
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr

08005712 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005712:	b580      	push	{r7, lr}
 8005714:	b086      	sub	sp, #24
 8005716:	af02      	add	r7, sp, #8
 8005718:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d101      	bne.n	8005724 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e101      	b.n	8005928 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d106      	bne.n	8005744 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f7fd fbfe 	bl	8002f40 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2203      	movs	r2, #3
 8005748:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005752:	d102      	bne.n	800575a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4618      	mov	r0, r3
 8005760:	f003 f962 	bl	8008a28 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6818      	ldr	r0, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	7c1a      	ldrb	r2, [r3, #16]
 800576c:	f88d 2000 	strb.w	r2, [sp]
 8005770:	3304      	adds	r3, #4
 8005772:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005774:	f003 f8f4 	bl	8008960 <USB_CoreInit>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d005      	beq.n	800578a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2202      	movs	r2, #2
 8005782:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e0ce      	b.n	8005928 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2100      	movs	r1, #0
 8005790:	4618      	mov	r0, r3
 8005792:	f003 f95a 	bl	8008a4a <USB_SetCurrentMode>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d005      	beq.n	80057a8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2202      	movs	r2, #2
 80057a0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e0bf      	b.n	8005928 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057a8:	2300      	movs	r3, #0
 80057aa:	73fb      	strb	r3, [r7, #15]
 80057ac:	e04a      	b.n	8005844 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80057ae:	7bfa      	ldrb	r2, [r7, #15]
 80057b0:	6879      	ldr	r1, [r7, #4]
 80057b2:	4613      	mov	r3, r2
 80057b4:	00db      	lsls	r3, r3, #3
 80057b6:	4413      	add	r3, r2
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	440b      	add	r3, r1
 80057bc:	3315      	adds	r3, #21
 80057be:	2201      	movs	r2, #1
 80057c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80057c2:	7bfa      	ldrb	r2, [r7, #15]
 80057c4:	6879      	ldr	r1, [r7, #4]
 80057c6:	4613      	mov	r3, r2
 80057c8:	00db      	lsls	r3, r3, #3
 80057ca:	4413      	add	r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	440b      	add	r3, r1
 80057d0:	3314      	adds	r3, #20
 80057d2:	7bfa      	ldrb	r2, [r7, #15]
 80057d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80057d6:	7bfa      	ldrb	r2, [r7, #15]
 80057d8:	7bfb      	ldrb	r3, [r7, #15]
 80057da:	b298      	uxth	r0, r3
 80057dc:	6879      	ldr	r1, [r7, #4]
 80057de:	4613      	mov	r3, r2
 80057e0:	00db      	lsls	r3, r3, #3
 80057e2:	4413      	add	r3, r2
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	440b      	add	r3, r1
 80057e8:	332e      	adds	r3, #46	; 0x2e
 80057ea:	4602      	mov	r2, r0
 80057ec:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80057ee:	7bfa      	ldrb	r2, [r7, #15]
 80057f0:	6879      	ldr	r1, [r7, #4]
 80057f2:	4613      	mov	r3, r2
 80057f4:	00db      	lsls	r3, r3, #3
 80057f6:	4413      	add	r3, r2
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	440b      	add	r3, r1
 80057fc:	3318      	adds	r3, #24
 80057fe:	2200      	movs	r2, #0
 8005800:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005802:	7bfa      	ldrb	r2, [r7, #15]
 8005804:	6879      	ldr	r1, [r7, #4]
 8005806:	4613      	mov	r3, r2
 8005808:	00db      	lsls	r3, r3, #3
 800580a:	4413      	add	r3, r2
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	440b      	add	r3, r1
 8005810:	331c      	adds	r3, #28
 8005812:	2200      	movs	r2, #0
 8005814:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005816:	7bfa      	ldrb	r2, [r7, #15]
 8005818:	6879      	ldr	r1, [r7, #4]
 800581a:	4613      	mov	r3, r2
 800581c:	00db      	lsls	r3, r3, #3
 800581e:	4413      	add	r3, r2
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	440b      	add	r3, r1
 8005824:	3320      	adds	r3, #32
 8005826:	2200      	movs	r2, #0
 8005828:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800582a:	7bfa      	ldrb	r2, [r7, #15]
 800582c:	6879      	ldr	r1, [r7, #4]
 800582e:	4613      	mov	r3, r2
 8005830:	00db      	lsls	r3, r3, #3
 8005832:	4413      	add	r3, r2
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	440b      	add	r3, r1
 8005838:	3324      	adds	r3, #36	; 0x24
 800583a:	2200      	movs	r2, #0
 800583c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800583e:	7bfb      	ldrb	r3, [r7, #15]
 8005840:	3301      	adds	r3, #1
 8005842:	73fb      	strb	r3, [r7, #15]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	791b      	ldrb	r3, [r3, #4]
 8005848:	7bfa      	ldrb	r2, [r7, #15]
 800584a:	429a      	cmp	r2, r3
 800584c:	d3af      	bcc.n	80057ae <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800584e:	2300      	movs	r3, #0
 8005850:	73fb      	strb	r3, [r7, #15]
 8005852:	e044      	b.n	80058de <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005854:	7bfa      	ldrb	r2, [r7, #15]
 8005856:	6879      	ldr	r1, [r7, #4]
 8005858:	4613      	mov	r3, r2
 800585a:	00db      	lsls	r3, r3, #3
 800585c:	4413      	add	r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	440b      	add	r3, r1
 8005862:	f203 2355 	addw	r3, r3, #597	; 0x255
 8005866:	2200      	movs	r2, #0
 8005868:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800586a:	7bfa      	ldrb	r2, [r7, #15]
 800586c:	6879      	ldr	r1, [r7, #4]
 800586e:	4613      	mov	r3, r2
 8005870:	00db      	lsls	r3, r3, #3
 8005872:	4413      	add	r3, r2
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	440b      	add	r3, r1
 8005878:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800587c:	7bfa      	ldrb	r2, [r7, #15]
 800587e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005880:	7bfa      	ldrb	r2, [r7, #15]
 8005882:	6879      	ldr	r1, [r7, #4]
 8005884:	4613      	mov	r3, r2
 8005886:	00db      	lsls	r3, r3, #3
 8005888:	4413      	add	r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	440b      	add	r3, r1
 800588e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8005892:	2200      	movs	r2, #0
 8005894:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005896:	7bfa      	ldrb	r2, [r7, #15]
 8005898:	6879      	ldr	r1, [r7, #4]
 800589a:	4613      	mov	r3, r2
 800589c:	00db      	lsls	r3, r3, #3
 800589e:	4413      	add	r3, r2
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	440b      	add	r3, r1
 80058a4:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80058a8:	2200      	movs	r2, #0
 80058aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80058ac:	7bfa      	ldrb	r2, [r7, #15]
 80058ae:	6879      	ldr	r1, [r7, #4]
 80058b0:	4613      	mov	r3, r2
 80058b2:	00db      	lsls	r3, r3, #3
 80058b4:	4413      	add	r3, r2
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	440b      	add	r3, r1
 80058ba:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80058be:	2200      	movs	r2, #0
 80058c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80058c2:	7bfa      	ldrb	r2, [r7, #15]
 80058c4:	6879      	ldr	r1, [r7, #4]
 80058c6:	4613      	mov	r3, r2
 80058c8:	00db      	lsls	r3, r3, #3
 80058ca:	4413      	add	r3, r2
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	440b      	add	r3, r1
 80058d0:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80058d4:	2200      	movs	r2, #0
 80058d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058d8:	7bfb      	ldrb	r3, [r7, #15]
 80058da:	3301      	adds	r3, #1
 80058dc:	73fb      	strb	r3, [r7, #15]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	791b      	ldrb	r3, [r3, #4]
 80058e2:	7bfa      	ldrb	r2, [r7, #15]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d3b5      	bcc.n	8005854 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6818      	ldr	r0, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	7c1a      	ldrb	r2, [r3, #16]
 80058f0:	f88d 2000 	strb.w	r2, [sp]
 80058f4:	3304      	adds	r3, #4
 80058f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058f8:	f003 f8f4 	bl	8008ae4 <USB_DevInit>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d005      	beq.n	800590e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2202      	movs	r2, #2
 8005906:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e00c      	b.n	8005928 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4618      	mov	r0, r3
 8005922:	f003 fabc 	bl	8008e9e <USB_DevDisconnect>

  return HAL_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3710      	adds	r7, #16
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e267      	b.n	8005e12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	2b00      	cmp	r3, #0
 800594c:	d075      	beq.n	8005a3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800594e:	4b88      	ldr	r3, [pc, #544]	; (8005b70 <HAL_RCC_OscConfig+0x240>)
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f003 030c 	and.w	r3, r3, #12
 8005956:	2b04      	cmp	r3, #4
 8005958:	d00c      	beq.n	8005974 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800595a:	4b85      	ldr	r3, [pc, #532]	; (8005b70 <HAL_RCC_OscConfig+0x240>)
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005962:	2b08      	cmp	r3, #8
 8005964:	d112      	bne.n	800598c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005966:	4b82      	ldr	r3, [pc, #520]	; (8005b70 <HAL_RCC_OscConfig+0x240>)
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800596e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005972:	d10b      	bne.n	800598c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005974:	4b7e      	ldr	r3, [pc, #504]	; (8005b70 <HAL_RCC_OscConfig+0x240>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800597c:	2b00      	cmp	r3, #0
 800597e:	d05b      	beq.n	8005a38 <HAL_RCC_OscConfig+0x108>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d157      	bne.n	8005a38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e242      	b.n	8005e12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005994:	d106      	bne.n	80059a4 <HAL_RCC_OscConfig+0x74>
 8005996:	4b76      	ldr	r3, [pc, #472]	; (8005b70 <HAL_RCC_OscConfig+0x240>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a75      	ldr	r2, [pc, #468]	; (8005b70 <HAL_RCC_OscConfig+0x240>)
 800599c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059a0:	6013      	str	r3, [r2, #0]
 80059a2:	e01d      	b.n	80059e0 <HAL_RCC_OscConfig+0xb0>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059ac:	d10c      	bne.n	80059c8 <HAL_RCC_OscConfig+0x98>
 80059ae:	4b70      	ldr	r3, [pc, #448]	; (8005b70 <HAL_RCC_OscConfig+0x240>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a6f      	ldr	r2, [pc, #444]	; (8005b70 <HAL_RCC_OscConfig+0x240>)
 80059b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059b8:	6013      	str	r3, [r2, #0]
 80059ba:	4b6d      	ldr	r3, [pc, #436]	; (8005b70 <HAL_RCC_OscConfig+0x240>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a6c      	ldr	r2, [pc, #432]	; (8005b70 <HAL_RCC_OscConfig+0x240>)
 80059c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059c4:	6013      	str	r3, [r2, #0]
 80059c6:	e00b      	b.n	80059e0 <HAL_RCC_OscConfig+0xb0>
 80059c8:	4b69      	ldr	r3, [pc, #420]	; (8005b70 <HAL_RCC_OscConfig+0x240>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a68      	ldr	r2, [pc, #416]	; (8005b70 <HAL_RCC_OscConfig+0x240>)
 80059ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059d2:	6013      	str	r3, [r2, #0]
 80059d4:	4b66      	ldr	r3, [pc, #408]	; (8005b70 <HAL_RCC_OscConfig+0x240>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a65      	ldr	r2, [pc, #404]	; (8005b70 <HAL_RCC_OscConfig+0x240>)
 80059da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d013      	beq.n	8005a10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059e8:	f7fd ff0e 	bl	8003808 <HAL_GetTick>
 80059ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ee:	e008      	b.n	8005a02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059f0:	f7fd ff0a 	bl	8003808 <HAL_GetTick>
 80059f4:	4602      	mov	r2, r0
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	2b64      	cmp	r3, #100	; 0x64
 80059fc:	d901      	bls.n	8005a02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e207      	b.n	8005e12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a02:	4b5b      	ldr	r3, [pc, #364]	; (8005b70 <HAL_RCC_OscConfig+0x240>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d0f0      	beq.n	80059f0 <HAL_RCC_OscConfig+0xc0>
 8005a0e:	e014      	b.n	8005a3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a10:	f7fd fefa 	bl	8003808 <HAL_GetTick>
 8005a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a16:	e008      	b.n	8005a2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a18:	f7fd fef6 	bl	8003808 <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	2b64      	cmp	r3, #100	; 0x64
 8005a24:	d901      	bls.n	8005a2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e1f3      	b.n	8005e12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a2a:	4b51      	ldr	r3, [pc, #324]	; (8005b70 <HAL_RCC_OscConfig+0x240>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1f0      	bne.n	8005a18 <HAL_RCC_OscConfig+0xe8>
 8005a36:	e000      	b.n	8005a3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0302 	and.w	r3, r3, #2
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d063      	beq.n	8005b0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a46:	4b4a      	ldr	r3, [pc, #296]	; (8005b70 <HAL_RCC_OscConfig+0x240>)
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f003 030c 	and.w	r3, r3, #12
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00b      	beq.n	8005a6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a52:	4b47      	ldr	r3, [pc, #284]	; (8005b70 <HAL_RCC_OscConfig+0x240>)
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a5a:	2b08      	cmp	r3, #8
 8005a5c:	d11c      	bne.n	8005a98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a5e:	4b44      	ldr	r3, [pc, #272]	; (8005b70 <HAL_RCC_OscConfig+0x240>)
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d116      	bne.n	8005a98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a6a:	4b41      	ldr	r3, [pc, #260]	; (8005b70 <HAL_RCC_OscConfig+0x240>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0302 	and.w	r3, r3, #2
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d005      	beq.n	8005a82 <HAL_RCC_OscConfig+0x152>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d001      	beq.n	8005a82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e1c7      	b.n	8005e12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a82:	4b3b      	ldr	r3, [pc, #236]	; (8005b70 <HAL_RCC_OscConfig+0x240>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	00db      	lsls	r3, r3, #3
 8005a90:	4937      	ldr	r1, [pc, #220]	; (8005b70 <HAL_RCC_OscConfig+0x240>)
 8005a92:	4313      	orrs	r3, r2
 8005a94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a96:	e03a      	b.n	8005b0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d020      	beq.n	8005ae2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005aa0:	4b34      	ldr	r3, [pc, #208]	; (8005b74 <HAL_RCC_OscConfig+0x244>)
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aa6:	f7fd feaf 	bl	8003808 <HAL_GetTick>
 8005aaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aac:	e008      	b.n	8005ac0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005aae:	f7fd feab 	bl	8003808 <HAL_GetTick>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d901      	bls.n	8005ac0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e1a8      	b.n	8005e12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ac0:	4b2b      	ldr	r3, [pc, #172]	; (8005b70 <HAL_RCC_OscConfig+0x240>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0302 	and.w	r3, r3, #2
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d0f0      	beq.n	8005aae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005acc:	4b28      	ldr	r3, [pc, #160]	; (8005b70 <HAL_RCC_OscConfig+0x240>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	00db      	lsls	r3, r3, #3
 8005ada:	4925      	ldr	r1, [pc, #148]	; (8005b70 <HAL_RCC_OscConfig+0x240>)
 8005adc:	4313      	orrs	r3, r2
 8005ade:	600b      	str	r3, [r1, #0]
 8005ae0:	e015      	b.n	8005b0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ae2:	4b24      	ldr	r3, [pc, #144]	; (8005b74 <HAL_RCC_OscConfig+0x244>)
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ae8:	f7fd fe8e 	bl	8003808 <HAL_GetTick>
 8005aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005aee:	e008      	b.n	8005b02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005af0:	f7fd fe8a 	bl	8003808 <HAL_GetTick>
 8005af4:	4602      	mov	r2, r0
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d901      	bls.n	8005b02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e187      	b.n	8005e12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b02:	4b1b      	ldr	r3, [pc, #108]	; (8005b70 <HAL_RCC_OscConfig+0x240>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0302 	and.w	r3, r3, #2
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1f0      	bne.n	8005af0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 0308 	and.w	r3, r3, #8
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d036      	beq.n	8005b88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	695b      	ldr	r3, [r3, #20]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d016      	beq.n	8005b50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b22:	4b15      	ldr	r3, [pc, #84]	; (8005b78 <HAL_RCC_OscConfig+0x248>)
 8005b24:	2201      	movs	r2, #1
 8005b26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b28:	f7fd fe6e 	bl	8003808 <HAL_GetTick>
 8005b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b2e:	e008      	b.n	8005b42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b30:	f7fd fe6a 	bl	8003808 <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d901      	bls.n	8005b42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e167      	b.n	8005e12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b42:	4b0b      	ldr	r3, [pc, #44]	; (8005b70 <HAL_RCC_OscConfig+0x240>)
 8005b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b46:	f003 0302 	and.w	r3, r3, #2
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d0f0      	beq.n	8005b30 <HAL_RCC_OscConfig+0x200>
 8005b4e:	e01b      	b.n	8005b88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b50:	4b09      	ldr	r3, [pc, #36]	; (8005b78 <HAL_RCC_OscConfig+0x248>)
 8005b52:	2200      	movs	r2, #0
 8005b54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b56:	f7fd fe57 	bl	8003808 <HAL_GetTick>
 8005b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b5c:	e00e      	b.n	8005b7c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b5e:	f7fd fe53 	bl	8003808 <HAL_GetTick>
 8005b62:	4602      	mov	r2, r0
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d907      	bls.n	8005b7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e150      	b.n	8005e12 <HAL_RCC_OscConfig+0x4e2>
 8005b70:	40023800 	.word	0x40023800
 8005b74:	42470000 	.word	0x42470000
 8005b78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b7c:	4b88      	ldr	r3, [pc, #544]	; (8005da0 <HAL_RCC_OscConfig+0x470>)
 8005b7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b80:	f003 0302 	and.w	r3, r3, #2
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1ea      	bne.n	8005b5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0304 	and.w	r3, r3, #4
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f000 8097 	beq.w	8005cc4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b96:	2300      	movs	r3, #0
 8005b98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b9a:	4b81      	ldr	r3, [pc, #516]	; (8005da0 <HAL_RCC_OscConfig+0x470>)
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d10f      	bne.n	8005bc6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	60bb      	str	r3, [r7, #8]
 8005baa:	4b7d      	ldr	r3, [pc, #500]	; (8005da0 <HAL_RCC_OscConfig+0x470>)
 8005bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bae:	4a7c      	ldr	r2, [pc, #496]	; (8005da0 <HAL_RCC_OscConfig+0x470>)
 8005bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8005bb6:	4b7a      	ldr	r3, [pc, #488]	; (8005da0 <HAL_RCC_OscConfig+0x470>)
 8005bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bbe:	60bb      	str	r3, [r7, #8]
 8005bc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bc6:	4b77      	ldr	r3, [pc, #476]	; (8005da4 <HAL_RCC_OscConfig+0x474>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d118      	bne.n	8005c04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bd2:	4b74      	ldr	r3, [pc, #464]	; (8005da4 <HAL_RCC_OscConfig+0x474>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a73      	ldr	r2, [pc, #460]	; (8005da4 <HAL_RCC_OscConfig+0x474>)
 8005bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bde:	f7fd fe13 	bl	8003808 <HAL_GetTick>
 8005be2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005be4:	e008      	b.n	8005bf8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005be6:	f7fd fe0f 	bl	8003808 <HAL_GetTick>
 8005bea:	4602      	mov	r2, r0
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d901      	bls.n	8005bf8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e10c      	b.n	8005e12 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bf8:	4b6a      	ldr	r3, [pc, #424]	; (8005da4 <HAL_RCC_OscConfig+0x474>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d0f0      	beq.n	8005be6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d106      	bne.n	8005c1a <HAL_RCC_OscConfig+0x2ea>
 8005c0c:	4b64      	ldr	r3, [pc, #400]	; (8005da0 <HAL_RCC_OscConfig+0x470>)
 8005c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c10:	4a63      	ldr	r2, [pc, #396]	; (8005da0 <HAL_RCC_OscConfig+0x470>)
 8005c12:	f043 0301 	orr.w	r3, r3, #1
 8005c16:	6713      	str	r3, [r2, #112]	; 0x70
 8005c18:	e01c      	b.n	8005c54 <HAL_RCC_OscConfig+0x324>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	2b05      	cmp	r3, #5
 8005c20:	d10c      	bne.n	8005c3c <HAL_RCC_OscConfig+0x30c>
 8005c22:	4b5f      	ldr	r3, [pc, #380]	; (8005da0 <HAL_RCC_OscConfig+0x470>)
 8005c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c26:	4a5e      	ldr	r2, [pc, #376]	; (8005da0 <HAL_RCC_OscConfig+0x470>)
 8005c28:	f043 0304 	orr.w	r3, r3, #4
 8005c2c:	6713      	str	r3, [r2, #112]	; 0x70
 8005c2e:	4b5c      	ldr	r3, [pc, #368]	; (8005da0 <HAL_RCC_OscConfig+0x470>)
 8005c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c32:	4a5b      	ldr	r2, [pc, #364]	; (8005da0 <HAL_RCC_OscConfig+0x470>)
 8005c34:	f043 0301 	orr.w	r3, r3, #1
 8005c38:	6713      	str	r3, [r2, #112]	; 0x70
 8005c3a:	e00b      	b.n	8005c54 <HAL_RCC_OscConfig+0x324>
 8005c3c:	4b58      	ldr	r3, [pc, #352]	; (8005da0 <HAL_RCC_OscConfig+0x470>)
 8005c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c40:	4a57      	ldr	r2, [pc, #348]	; (8005da0 <HAL_RCC_OscConfig+0x470>)
 8005c42:	f023 0301 	bic.w	r3, r3, #1
 8005c46:	6713      	str	r3, [r2, #112]	; 0x70
 8005c48:	4b55      	ldr	r3, [pc, #340]	; (8005da0 <HAL_RCC_OscConfig+0x470>)
 8005c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c4c:	4a54      	ldr	r2, [pc, #336]	; (8005da0 <HAL_RCC_OscConfig+0x470>)
 8005c4e:	f023 0304 	bic.w	r3, r3, #4
 8005c52:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d015      	beq.n	8005c88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c5c:	f7fd fdd4 	bl	8003808 <HAL_GetTick>
 8005c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c62:	e00a      	b.n	8005c7a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c64:	f7fd fdd0 	bl	8003808 <HAL_GetTick>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d901      	bls.n	8005c7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005c76:	2303      	movs	r3, #3
 8005c78:	e0cb      	b.n	8005e12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c7a:	4b49      	ldr	r3, [pc, #292]	; (8005da0 <HAL_RCC_OscConfig+0x470>)
 8005c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c7e:	f003 0302 	and.w	r3, r3, #2
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d0ee      	beq.n	8005c64 <HAL_RCC_OscConfig+0x334>
 8005c86:	e014      	b.n	8005cb2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c88:	f7fd fdbe 	bl	8003808 <HAL_GetTick>
 8005c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c8e:	e00a      	b.n	8005ca6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c90:	f7fd fdba 	bl	8003808 <HAL_GetTick>
 8005c94:	4602      	mov	r2, r0
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d901      	bls.n	8005ca6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e0b5      	b.n	8005e12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ca6:	4b3e      	ldr	r3, [pc, #248]	; (8005da0 <HAL_RCC_OscConfig+0x470>)
 8005ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005caa:	f003 0302 	and.w	r3, r3, #2
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d1ee      	bne.n	8005c90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005cb2:	7dfb      	ldrb	r3, [r7, #23]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d105      	bne.n	8005cc4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cb8:	4b39      	ldr	r3, [pc, #228]	; (8005da0 <HAL_RCC_OscConfig+0x470>)
 8005cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cbc:	4a38      	ldr	r2, [pc, #224]	; (8005da0 <HAL_RCC_OscConfig+0x470>)
 8005cbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cc2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	f000 80a1 	beq.w	8005e10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005cce:	4b34      	ldr	r3, [pc, #208]	; (8005da0 <HAL_RCC_OscConfig+0x470>)
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	f003 030c 	and.w	r3, r3, #12
 8005cd6:	2b08      	cmp	r3, #8
 8005cd8:	d05c      	beq.n	8005d94 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d141      	bne.n	8005d66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ce2:	4b31      	ldr	r3, [pc, #196]	; (8005da8 <HAL_RCC_OscConfig+0x478>)
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ce8:	f7fd fd8e 	bl	8003808 <HAL_GetTick>
 8005cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cee:	e008      	b.n	8005d02 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cf0:	f7fd fd8a 	bl	8003808 <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d901      	bls.n	8005d02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e087      	b.n	8005e12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d02:	4b27      	ldr	r3, [pc, #156]	; (8005da0 <HAL_RCC_OscConfig+0x470>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d1f0      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	69da      	ldr	r2, [r3, #28]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	431a      	orrs	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1c:	019b      	lsls	r3, r3, #6
 8005d1e:	431a      	orrs	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d24:	085b      	lsrs	r3, r3, #1
 8005d26:	3b01      	subs	r3, #1
 8005d28:	041b      	lsls	r3, r3, #16
 8005d2a:	431a      	orrs	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d30:	061b      	lsls	r3, r3, #24
 8005d32:	491b      	ldr	r1, [pc, #108]	; (8005da0 <HAL_RCC_OscConfig+0x470>)
 8005d34:	4313      	orrs	r3, r2
 8005d36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d38:	4b1b      	ldr	r3, [pc, #108]	; (8005da8 <HAL_RCC_OscConfig+0x478>)
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d3e:	f7fd fd63 	bl	8003808 <HAL_GetTick>
 8005d42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d44:	e008      	b.n	8005d58 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d46:	f7fd fd5f 	bl	8003808 <HAL_GetTick>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d901      	bls.n	8005d58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e05c      	b.n	8005e12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d58:	4b11      	ldr	r3, [pc, #68]	; (8005da0 <HAL_RCC_OscConfig+0x470>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d0f0      	beq.n	8005d46 <HAL_RCC_OscConfig+0x416>
 8005d64:	e054      	b.n	8005e10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d66:	4b10      	ldr	r3, [pc, #64]	; (8005da8 <HAL_RCC_OscConfig+0x478>)
 8005d68:	2200      	movs	r2, #0
 8005d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d6c:	f7fd fd4c 	bl	8003808 <HAL_GetTick>
 8005d70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d72:	e008      	b.n	8005d86 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d74:	f7fd fd48 	bl	8003808 <HAL_GetTick>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d901      	bls.n	8005d86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e045      	b.n	8005e12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d86:	4b06      	ldr	r3, [pc, #24]	; (8005da0 <HAL_RCC_OscConfig+0x470>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d1f0      	bne.n	8005d74 <HAL_RCC_OscConfig+0x444>
 8005d92:	e03d      	b.n	8005e10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d107      	bne.n	8005dac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e038      	b.n	8005e12 <HAL_RCC_OscConfig+0x4e2>
 8005da0:	40023800 	.word	0x40023800
 8005da4:	40007000 	.word	0x40007000
 8005da8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005dac:	4b1b      	ldr	r3, [pc, #108]	; (8005e1c <HAL_RCC_OscConfig+0x4ec>)
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	699b      	ldr	r3, [r3, #24]
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d028      	beq.n	8005e0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d121      	bne.n	8005e0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d11a      	bne.n	8005e0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005ddc:	4013      	ands	r3, r2
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005de2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d111      	bne.n	8005e0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df2:	085b      	lsrs	r3, r3, #1
 8005df4:	3b01      	subs	r3, #1
 8005df6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d107      	bne.n	8005e0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d001      	beq.n	8005e10 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e000      	b.n	8005e12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3718      	adds	r7, #24
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	40023800 	.word	0x40023800

08005e20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d101      	bne.n	8005e34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e0cc      	b.n	8005fce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e34:	4b68      	ldr	r3, [pc, #416]	; (8005fd8 <HAL_RCC_ClockConfig+0x1b8>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 030f 	and.w	r3, r3, #15
 8005e3c:	683a      	ldr	r2, [r7, #0]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d90c      	bls.n	8005e5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e42:	4b65      	ldr	r3, [pc, #404]	; (8005fd8 <HAL_RCC_ClockConfig+0x1b8>)
 8005e44:	683a      	ldr	r2, [r7, #0]
 8005e46:	b2d2      	uxtb	r2, r2
 8005e48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e4a:	4b63      	ldr	r3, [pc, #396]	; (8005fd8 <HAL_RCC_ClockConfig+0x1b8>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 030f 	and.w	r3, r3, #15
 8005e52:	683a      	ldr	r2, [r7, #0]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d001      	beq.n	8005e5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e0b8      	b.n	8005fce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 0302 	and.w	r3, r3, #2
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d020      	beq.n	8005eaa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 0304 	and.w	r3, r3, #4
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d005      	beq.n	8005e80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e74:	4b59      	ldr	r3, [pc, #356]	; (8005fdc <HAL_RCC_ClockConfig+0x1bc>)
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	4a58      	ldr	r2, [pc, #352]	; (8005fdc <HAL_RCC_ClockConfig+0x1bc>)
 8005e7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005e7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0308 	and.w	r3, r3, #8
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d005      	beq.n	8005e98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e8c:	4b53      	ldr	r3, [pc, #332]	; (8005fdc <HAL_RCC_ClockConfig+0x1bc>)
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	4a52      	ldr	r2, [pc, #328]	; (8005fdc <HAL_RCC_ClockConfig+0x1bc>)
 8005e92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005e96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e98:	4b50      	ldr	r3, [pc, #320]	; (8005fdc <HAL_RCC_ClockConfig+0x1bc>)
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	494d      	ldr	r1, [pc, #308]	; (8005fdc <HAL_RCC_ClockConfig+0x1bc>)
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 0301 	and.w	r3, r3, #1
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d044      	beq.n	8005f40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d107      	bne.n	8005ece <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ebe:	4b47      	ldr	r3, [pc, #284]	; (8005fdc <HAL_RCC_ClockConfig+0x1bc>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d119      	bne.n	8005efe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e07f      	b.n	8005fce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d003      	beq.n	8005ede <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005eda:	2b03      	cmp	r3, #3
 8005edc:	d107      	bne.n	8005eee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ede:	4b3f      	ldr	r3, [pc, #252]	; (8005fdc <HAL_RCC_ClockConfig+0x1bc>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d109      	bne.n	8005efe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e06f      	b.n	8005fce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005eee:	4b3b      	ldr	r3, [pc, #236]	; (8005fdc <HAL_RCC_ClockConfig+0x1bc>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 0302 	and.w	r3, r3, #2
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d101      	bne.n	8005efe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e067      	b.n	8005fce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005efe:	4b37      	ldr	r3, [pc, #220]	; (8005fdc <HAL_RCC_ClockConfig+0x1bc>)
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	f023 0203 	bic.w	r2, r3, #3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	4934      	ldr	r1, [pc, #208]	; (8005fdc <HAL_RCC_ClockConfig+0x1bc>)
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f10:	f7fd fc7a 	bl	8003808 <HAL_GetTick>
 8005f14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f16:	e00a      	b.n	8005f2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f18:	f7fd fc76 	bl	8003808 <HAL_GetTick>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d901      	bls.n	8005f2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e04f      	b.n	8005fce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f2e:	4b2b      	ldr	r3, [pc, #172]	; (8005fdc <HAL_RCC_ClockConfig+0x1bc>)
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	f003 020c 	and.w	r2, r3, #12
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d1eb      	bne.n	8005f18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f40:	4b25      	ldr	r3, [pc, #148]	; (8005fd8 <HAL_RCC_ClockConfig+0x1b8>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 030f 	and.w	r3, r3, #15
 8005f48:	683a      	ldr	r2, [r7, #0]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d20c      	bcs.n	8005f68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f4e:	4b22      	ldr	r3, [pc, #136]	; (8005fd8 <HAL_RCC_ClockConfig+0x1b8>)
 8005f50:	683a      	ldr	r2, [r7, #0]
 8005f52:	b2d2      	uxtb	r2, r2
 8005f54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f56:	4b20      	ldr	r3, [pc, #128]	; (8005fd8 <HAL_RCC_ClockConfig+0x1b8>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 030f 	and.w	r3, r3, #15
 8005f5e:	683a      	ldr	r2, [r7, #0]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d001      	beq.n	8005f68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e032      	b.n	8005fce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 0304 	and.w	r3, r3, #4
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d008      	beq.n	8005f86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f74:	4b19      	ldr	r3, [pc, #100]	; (8005fdc <HAL_RCC_ClockConfig+0x1bc>)
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	4916      	ldr	r1, [pc, #88]	; (8005fdc <HAL_RCC_ClockConfig+0x1bc>)
 8005f82:	4313      	orrs	r3, r2
 8005f84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 0308 	and.w	r3, r3, #8
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d009      	beq.n	8005fa6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f92:	4b12      	ldr	r3, [pc, #72]	; (8005fdc <HAL_RCC_ClockConfig+0x1bc>)
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	00db      	lsls	r3, r3, #3
 8005fa0:	490e      	ldr	r1, [pc, #56]	; (8005fdc <HAL_RCC_ClockConfig+0x1bc>)
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005fa6:	f000 f821 	bl	8005fec <HAL_RCC_GetSysClockFreq>
 8005faa:	4602      	mov	r2, r0
 8005fac:	4b0b      	ldr	r3, [pc, #44]	; (8005fdc <HAL_RCC_ClockConfig+0x1bc>)
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	091b      	lsrs	r3, r3, #4
 8005fb2:	f003 030f 	and.w	r3, r3, #15
 8005fb6:	490a      	ldr	r1, [pc, #40]	; (8005fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8005fb8:	5ccb      	ldrb	r3, [r1, r3]
 8005fba:	fa22 f303 	lsr.w	r3, r2, r3
 8005fbe:	4a09      	ldr	r2, [pc, #36]	; (8005fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8005fc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005fc2:	4b09      	ldr	r3, [pc, #36]	; (8005fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7fd fbda 	bl	8003780 <HAL_InitTick>

  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3710      	adds	r7, #16
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	40023c00 	.word	0x40023c00
 8005fdc:	40023800 	.word	0x40023800
 8005fe0:	0800bcd0 	.word	0x0800bcd0
 8005fe4:	20000004 	.word	0x20000004
 8005fe8:	20000008 	.word	0x20000008

08005fec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ff0:	b094      	sub	sp, #80	; 0x50
 8005ff2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	647b      	str	r3, [r7, #68]	; 0x44
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006000:	2300      	movs	r3, #0
 8006002:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006004:	4b79      	ldr	r3, [pc, #484]	; (80061ec <HAL_RCC_GetSysClockFreq+0x200>)
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	f003 030c 	and.w	r3, r3, #12
 800600c:	2b08      	cmp	r3, #8
 800600e:	d00d      	beq.n	800602c <HAL_RCC_GetSysClockFreq+0x40>
 8006010:	2b08      	cmp	r3, #8
 8006012:	f200 80e1 	bhi.w	80061d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006016:	2b00      	cmp	r3, #0
 8006018:	d002      	beq.n	8006020 <HAL_RCC_GetSysClockFreq+0x34>
 800601a:	2b04      	cmp	r3, #4
 800601c:	d003      	beq.n	8006026 <HAL_RCC_GetSysClockFreq+0x3a>
 800601e:	e0db      	b.n	80061d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006020:	4b73      	ldr	r3, [pc, #460]	; (80061f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006022:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006024:	e0db      	b.n	80061de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006026:	4b73      	ldr	r3, [pc, #460]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8006028:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800602a:	e0d8      	b.n	80061de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800602c:	4b6f      	ldr	r3, [pc, #444]	; (80061ec <HAL_RCC_GetSysClockFreq+0x200>)
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006034:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006036:	4b6d      	ldr	r3, [pc, #436]	; (80061ec <HAL_RCC_GetSysClockFreq+0x200>)
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800603e:	2b00      	cmp	r3, #0
 8006040:	d063      	beq.n	800610a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006042:	4b6a      	ldr	r3, [pc, #424]	; (80061ec <HAL_RCC_GetSysClockFreq+0x200>)
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	099b      	lsrs	r3, r3, #6
 8006048:	2200      	movs	r2, #0
 800604a:	63bb      	str	r3, [r7, #56]	; 0x38
 800604c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800604e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006050:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006054:	633b      	str	r3, [r7, #48]	; 0x30
 8006056:	2300      	movs	r3, #0
 8006058:	637b      	str	r3, [r7, #52]	; 0x34
 800605a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800605e:	4622      	mov	r2, r4
 8006060:	462b      	mov	r3, r5
 8006062:	f04f 0000 	mov.w	r0, #0
 8006066:	f04f 0100 	mov.w	r1, #0
 800606a:	0159      	lsls	r1, r3, #5
 800606c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006070:	0150      	lsls	r0, r2, #5
 8006072:	4602      	mov	r2, r0
 8006074:	460b      	mov	r3, r1
 8006076:	4621      	mov	r1, r4
 8006078:	1a51      	subs	r1, r2, r1
 800607a:	6139      	str	r1, [r7, #16]
 800607c:	4629      	mov	r1, r5
 800607e:	eb63 0301 	sbc.w	r3, r3, r1
 8006082:	617b      	str	r3, [r7, #20]
 8006084:	f04f 0200 	mov.w	r2, #0
 8006088:	f04f 0300 	mov.w	r3, #0
 800608c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006090:	4659      	mov	r1, fp
 8006092:	018b      	lsls	r3, r1, #6
 8006094:	4651      	mov	r1, sl
 8006096:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800609a:	4651      	mov	r1, sl
 800609c:	018a      	lsls	r2, r1, #6
 800609e:	4651      	mov	r1, sl
 80060a0:	ebb2 0801 	subs.w	r8, r2, r1
 80060a4:	4659      	mov	r1, fp
 80060a6:	eb63 0901 	sbc.w	r9, r3, r1
 80060aa:	f04f 0200 	mov.w	r2, #0
 80060ae:	f04f 0300 	mov.w	r3, #0
 80060b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060be:	4690      	mov	r8, r2
 80060c0:	4699      	mov	r9, r3
 80060c2:	4623      	mov	r3, r4
 80060c4:	eb18 0303 	adds.w	r3, r8, r3
 80060c8:	60bb      	str	r3, [r7, #8]
 80060ca:	462b      	mov	r3, r5
 80060cc:	eb49 0303 	adc.w	r3, r9, r3
 80060d0:	60fb      	str	r3, [r7, #12]
 80060d2:	f04f 0200 	mov.w	r2, #0
 80060d6:	f04f 0300 	mov.w	r3, #0
 80060da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80060de:	4629      	mov	r1, r5
 80060e0:	024b      	lsls	r3, r1, #9
 80060e2:	4621      	mov	r1, r4
 80060e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80060e8:	4621      	mov	r1, r4
 80060ea:	024a      	lsls	r2, r1, #9
 80060ec:	4610      	mov	r0, r2
 80060ee:	4619      	mov	r1, r3
 80060f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060f2:	2200      	movs	r2, #0
 80060f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80060f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80060fc:	f7fa fdd4 	bl	8000ca8 <__aeabi_uldivmod>
 8006100:	4602      	mov	r2, r0
 8006102:	460b      	mov	r3, r1
 8006104:	4613      	mov	r3, r2
 8006106:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006108:	e058      	b.n	80061bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800610a:	4b38      	ldr	r3, [pc, #224]	; (80061ec <HAL_RCC_GetSysClockFreq+0x200>)
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	099b      	lsrs	r3, r3, #6
 8006110:	2200      	movs	r2, #0
 8006112:	4618      	mov	r0, r3
 8006114:	4611      	mov	r1, r2
 8006116:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800611a:	623b      	str	r3, [r7, #32]
 800611c:	2300      	movs	r3, #0
 800611e:	627b      	str	r3, [r7, #36]	; 0x24
 8006120:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006124:	4642      	mov	r2, r8
 8006126:	464b      	mov	r3, r9
 8006128:	f04f 0000 	mov.w	r0, #0
 800612c:	f04f 0100 	mov.w	r1, #0
 8006130:	0159      	lsls	r1, r3, #5
 8006132:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006136:	0150      	lsls	r0, r2, #5
 8006138:	4602      	mov	r2, r0
 800613a:	460b      	mov	r3, r1
 800613c:	4641      	mov	r1, r8
 800613e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006142:	4649      	mov	r1, r9
 8006144:	eb63 0b01 	sbc.w	fp, r3, r1
 8006148:	f04f 0200 	mov.w	r2, #0
 800614c:	f04f 0300 	mov.w	r3, #0
 8006150:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006154:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006158:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800615c:	ebb2 040a 	subs.w	r4, r2, sl
 8006160:	eb63 050b 	sbc.w	r5, r3, fp
 8006164:	f04f 0200 	mov.w	r2, #0
 8006168:	f04f 0300 	mov.w	r3, #0
 800616c:	00eb      	lsls	r3, r5, #3
 800616e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006172:	00e2      	lsls	r2, r4, #3
 8006174:	4614      	mov	r4, r2
 8006176:	461d      	mov	r5, r3
 8006178:	4643      	mov	r3, r8
 800617a:	18e3      	adds	r3, r4, r3
 800617c:	603b      	str	r3, [r7, #0]
 800617e:	464b      	mov	r3, r9
 8006180:	eb45 0303 	adc.w	r3, r5, r3
 8006184:	607b      	str	r3, [r7, #4]
 8006186:	f04f 0200 	mov.w	r2, #0
 800618a:	f04f 0300 	mov.w	r3, #0
 800618e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006192:	4629      	mov	r1, r5
 8006194:	028b      	lsls	r3, r1, #10
 8006196:	4621      	mov	r1, r4
 8006198:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800619c:	4621      	mov	r1, r4
 800619e:	028a      	lsls	r2, r1, #10
 80061a0:	4610      	mov	r0, r2
 80061a2:	4619      	mov	r1, r3
 80061a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061a6:	2200      	movs	r2, #0
 80061a8:	61bb      	str	r3, [r7, #24]
 80061aa:	61fa      	str	r2, [r7, #28]
 80061ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061b0:	f7fa fd7a 	bl	8000ca8 <__aeabi_uldivmod>
 80061b4:	4602      	mov	r2, r0
 80061b6:	460b      	mov	r3, r1
 80061b8:	4613      	mov	r3, r2
 80061ba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80061bc:	4b0b      	ldr	r3, [pc, #44]	; (80061ec <HAL_RCC_GetSysClockFreq+0x200>)
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	0c1b      	lsrs	r3, r3, #16
 80061c2:	f003 0303 	and.w	r3, r3, #3
 80061c6:	3301      	adds	r3, #1
 80061c8:	005b      	lsls	r3, r3, #1
 80061ca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80061cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80061ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80061d6:	e002      	b.n	80061de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80061d8:	4b05      	ldr	r3, [pc, #20]	; (80061f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80061da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80061dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3750      	adds	r7, #80	; 0x50
 80061e4:	46bd      	mov	sp, r7
 80061e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061ea:	bf00      	nop
 80061ec:	40023800 	.word	0x40023800
 80061f0:	00f42400 	.word	0x00f42400
 80061f4:	007a1200 	.word	0x007a1200

080061f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061f8:	b480      	push	{r7}
 80061fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061fc:	4b03      	ldr	r3, [pc, #12]	; (800620c <HAL_RCC_GetHCLKFreq+0x14>)
 80061fe:	681b      	ldr	r3, [r3, #0]
}
 8006200:	4618      	mov	r0, r3
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop
 800620c:	20000004 	.word	0x20000004

08006210 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006214:	f7ff fff0 	bl	80061f8 <HAL_RCC_GetHCLKFreq>
 8006218:	4602      	mov	r2, r0
 800621a:	4b05      	ldr	r3, [pc, #20]	; (8006230 <HAL_RCC_GetPCLK1Freq+0x20>)
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	0a9b      	lsrs	r3, r3, #10
 8006220:	f003 0307 	and.w	r3, r3, #7
 8006224:	4903      	ldr	r1, [pc, #12]	; (8006234 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006226:	5ccb      	ldrb	r3, [r1, r3]
 8006228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800622c:	4618      	mov	r0, r3
 800622e:	bd80      	pop	{r7, pc}
 8006230:	40023800 	.word	0x40023800
 8006234:	0800bce0 	.word	0x0800bce0

08006238 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800623c:	f7ff ffdc 	bl	80061f8 <HAL_RCC_GetHCLKFreq>
 8006240:	4602      	mov	r2, r0
 8006242:	4b05      	ldr	r3, [pc, #20]	; (8006258 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	0b5b      	lsrs	r3, r3, #13
 8006248:	f003 0307 	and.w	r3, r3, #7
 800624c:	4903      	ldr	r1, [pc, #12]	; (800625c <HAL_RCC_GetPCLK2Freq+0x24>)
 800624e:	5ccb      	ldrb	r3, [r1, r3]
 8006250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006254:	4618      	mov	r0, r3
 8006256:	bd80      	pop	{r7, pc}
 8006258:	40023800 	.word	0x40023800
 800625c:	0800bce0 	.word	0x0800bce0

08006260 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d101      	bne.n	8006272 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e041      	b.n	80062f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006278:	b2db      	uxtb	r3, r3
 800627a:	2b00      	cmp	r3, #0
 800627c:	d106      	bne.n	800628c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f7fc fbb8 	bl	80029fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2202      	movs	r2, #2
 8006290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	3304      	adds	r3, #4
 800629c:	4619      	mov	r1, r3
 800629e:	4610      	mov	r0, r2
 80062a0:	f000 ff0a 	bl	80070b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3708      	adds	r7, #8
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
	...

08006300 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800630e:	b2db      	uxtb	r3, r3
 8006310:	2b01      	cmp	r3, #1
 8006312:	d001      	beq.n	8006318 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	e046      	b.n	80063a6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2202      	movs	r2, #2
 800631c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a23      	ldr	r2, [pc, #140]	; (80063b4 <HAL_TIM_Base_Start+0xb4>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d022      	beq.n	8006370 <HAL_TIM_Base_Start+0x70>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006332:	d01d      	beq.n	8006370 <HAL_TIM_Base_Start+0x70>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a1f      	ldr	r2, [pc, #124]	; (80063b8 <HAL_TIM_Base_Start+0xb8>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d018      	beq.n	8006370 <HAL_TIM_Base_Start+0x70>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a1e      	ldr	r2, [pc, #120]	; (80063bc <HAL_TIM_Base_Start+0xbc>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d013      	beq.n	8006370 <HAL_TIM_Base_Start+0x70>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a1c      	ldr	r2, [pc, #112]	; (80063c0 <HAL_TIM_Base_Start+0xc0>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d00e      	beq.n	8006370 <HAL_TIM_Base_Start+0x70>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a1b      	ldr	r2, [pc, #108]	; (80063c4 <HAL_TIM_Base_Start+0xc4>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d009      	beq.n	8006370 <HAL_TIM_Base_Start+0x70>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a19      	ldr	r2, [pc, #100]	; (80063c8 <HAL_TIM_Base_Start+0xc8>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d004      	beq.n	8006370 <HAL_TIM_Base_Start+0x70>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a18      	ldr	r2, [pc, #96]	; (80063cc <HAL_TIM_Base_Start+0xcc>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d111      	bne.n	8006394 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	f003 0307 	and.w	r3, r3, #7
 800637a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2b06      	cmp	r3, #6
 8006380:	d010      	beq.n	80063a4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f042 0201 	orr.w	r2, r2, #1
 8006390:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006392:	e007      	b.n	80063a4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f042 0201 	orr.w	r2, r2, #1
 80063a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3714      	adds	r7, #20
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	40010000 	.word	0x40010000
 80063b8:	40000400 	.word	0x40000400
 80063bc:	40000800 	.word	0x40000800
 80063c0:	40000c00 	.word	0x40000c00
 80063c4:	40010400 	.word	0x40010400
 80063c8:	40014000 	.word	0x40014000
 80063cc:	40001800 	.word	0x40001800

080063d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d001      	beq.n	80063e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e04e      	b.n	8006486 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2202      	movs	r2, #2
 80063ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68da      	ldr	r2, [r3, #12]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f042 0201 	orr.w	r2, r2, #1
 80063fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a23      	ldr	r2, [pc, #140]	; (8006494 <HAL_TIM_Base_Start_IT+0xc4>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d022      	beq.n	8006450 <HAL_TIM_Base_Start_IT+0x80>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006412:	d01d      	beq.n	8006450 <HAL_TIM_Base_Start_IT+0x80>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a1f      	ldr	r2, [pc, #124]	; (8006498 <HAL_TIM_Base_Start_IT+0xc8>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d018      	beq.n	8006450 <HAL_TIM_Base_Start_IT+0x80>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a1e      	ldr	r2, [pc, #120]	; (800649c <HAL_TIM_Base_Start_IT+0xcc>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d013      	beq.n	8006450 <HAL_TIM_Base_Start_IT+0x80>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a1c      	ldr	r2, [pc, #112]	; (80064a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d00e      	beq.n	8006450 <HAL_TIM_Base_Start_IT+0x80>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a1b      	ldr	r2, [pc, #108]	; (80064a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d009      	beq.n	8006450 <HAL_TIM_Base_Start_IT+0x80>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a19      	ldr	r2, [pc, #100]	; (80064a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d004      	beq.n	8006450 <HAL_TIM_Base_Start_IT+0x80>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a18      	ldr	r2, [pc, #96]	; (80064ac <HAL_TIM_Base_Start_IT+0xdc>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d111      	bne.n	8006474 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	f003 0307 	and.w	r3, r3, #7
 800645a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2b06      	cmp	r3, #6
 8006460:	d010      	beq.n	8006484 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f042 0201 	orr.w	r2, r2, #1
 8006470:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006472:	e007      	b.n	8006484 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f042 0201 	orr.w	r2, r2, #1
 8006482:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3714      	adds	r7, #20
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	40010000 	.word	0x40010000
 8006498:	40000400 	.word	0x40000400
 800649c:	40000800 	.word	0x40000800
 80064a0:	40000c00 	.word	0x40000c00
 80064a4:	40010400 	.word	0x40010400
 80064a8:	40014000 	.word	0x40014000
 80064ac:	40001800 	.word	0x40001800

080064b0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d101      	bne.n	80064c2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e041      	b.n	8006546 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d106      	bne.n	80064dc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 f839 	bl	800654e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2202      	movs	r2, #2
 80064e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	3304      	adds	r3, #4
 80064ec:	4619      	mov	r1, r3
 80064ee:	4610      	mov	r0, r2
 80064f0:	f000 fde2 	bl	80070b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3708      	adds	r7, #8
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}

0800654e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800654e:	b480      	push	{r7}
 8006550:	b083      	sub	sp, #12
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006556:	bf00      	nop
 8006558:	370c      	adds	r7, #12
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr

08006562 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006562:	b580      	push	{r7, lr}
 8006564:	b082      	sub	sp, #8
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d101      	bne.n	8006574 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e041      	b.n	80065f8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b00      	cmp	r3, #0
 800657e:	d106      	bne.n	800658e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 f839 	bl	8006600 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2202      	movs	r2, #2
 8006592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	3304      	adds	r3, #4
 800659e:	4619      	mov	r1, r3
 80065a0:	4610      	mov	r0, r2
 80065a2:	f000 fd89 	bl	80070b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2201      	movs	r2, #1
 80065aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2201      	movs	r2, #1
 80065b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2201      	movs	r2, #1
 80065ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2201      	movs	r2, #1
 80065ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2201      	movs	r2, #1
 80065d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2201      	movs	r2, #1
 80065da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2201      	movs	r2, #1
 80065e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2201      	movs	r2, #1
 80065ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2201      	movs	r2, #1
 80065f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3708      	adds	r7, #8
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006608:	bf00      	nop
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800661e:	2300      	movs	r3, #0
 8006620:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d109      	bne.n	800663c <HAL_TIM_PWM_Start_IT+0x28>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800662e:	b2db      	uxtb	r3, r3
 8006630:	2b01      	cmp	r3, #1
 8006632:	bf14      	ite	ne
 8006634:	2301      	movne	r3, #1
 8006636:	2300      	moveq	r3, #0
 8006638:	b2db      	uxtb	r3, r3
 800663a:	e022      	b.n	8006682 <HAL_TIM_PWM_Start_IT+0x6e>
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	2b04      	cmp	r3, #4
 8006640:	d109      	bne.n	8006656 <HAL_TIM_PWM_Start_IT+0x42>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006648:	b2db      	uxtb	r3, r3
 800664a:	2b01      	cmp	r3, #1
 800664c:	bf14      	ite	ne
 800664e:	2301      	movne	r3, #1
 8006650:	2300      	moveq	r3, #0
 8006652:	b2db      	uxtb	r3, r3
 8006654:	e015      	b.n	8006682 <HAL_TIM_PWM_Start_IT+0x6e>
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	2b08      	cmp	r3, #8
 800665a:	d109      	bne.n	8006670 <HAL_TIM_PWM_Start_IT+0x5c>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006662:	b2db      	uxtb	r3, r3
 8006664:	2b01      	cmp	r3, #1
 8006666:	bf14      	ite	ne
 8006668:	2301      	movne	r3, #1
 800666a:	2300      	moveq	r3, #0
 800666c:	b2db      	uxtb	r3, r3
 800666e:	e008      	b.n	8006682 <HAL_TIM_PWM_Start_IT+0x6e>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006676:	b2db      	uxtb	r3, r3
 8006678:	2b01      	cmp	r3, #1
 800667a:	bf14      	ite	ne
 800667c:	2301      	movne	r3, #1
 800667e:	2300      	moveq	r3, #0
 8006680:	b2db      	uxtb	r3, r3
 8006682:	2b00      	cmp	r3, #0
 8006684:	d001      	beq.n	800668a <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	e0c7      	b.n	800681a <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d104      	bne.n	800669a <HAL_TIM_PWM_Start_IT+0x86>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2202      	movs	r2, #2
 8006694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006698:	e013      	b.n	80066c2 <HAL_TIM_PWM_Start_IT+0xae>
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	2b04      	cmp	r3, #4
 800669e:	d104      	bne.n	80066aa <HAL_TIM_PWM_Start_IT+0x96>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2202      	movs	r2, #2
 80066a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066a8:	e00b      	b.n	80066c2 <HAL_TIM_PWM_Start_IT+0xae>
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	2b08      	cmp	r3, #8
 80066ae:	d104      	bne.n	80066ba <HAL_TIM_PWM_Start_IT+0xa6>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2202      	movs	r2, #2
 80066b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066b8:	e003      	b.n	80066c2 <HAL_TIM_PWM_Start_IT+0xae>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2202      	movs	r2, #2
 80066be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	2b0c      	cmp	r3, #12
 80066c6:	d841      	bhi.n	800674c <HAL_TIM_PWM_Start_IT+0x138>
 80066c8:	a201      	add	r2, pc, #4	; (adr r2, 80066d0 <HAL_TIM_PWM_Start_IT+0xbc>)
 80066ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ce:	bf00      	nop
 80066d0:	08006705 	.word	0x08006705
 80066d4:	0800674d 	.word	0x0800674d
 80066d8:	0800674d 	.word	0x0800674d
 80066dc:	0800674d 	.word	0x0800674d
 80066e0:	08006717 	.word	0x08006717
 80066e4:	0800674d 	.word	0x0800674d
 80066e8:	0800674d 	.word	0x0800674d
 80066ec:	0800674d 	.word	0x0800674d
 80066f0:	08006729 	.word	0x08006729
 80066f4:	0800674d 	.word	0x0800674d
 80066f8:	0800674d 	.word	0x0800674d
 80066fc:	0800674d 	.word	0x0800674d
 8006700:	0800673b 	.word	0x0800673b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68da      	ldr	r2, [r3, #12]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f042 0202 	orr.w	r2, r2, #2
 8006712:	60da      	str	r2, [r3, #12]
      break;
 8006714:	e01d      	b.n	8006752 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	68da      	ldr	r2, [r3, #12]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f042 0204 	orr.w	r2, r2, #4
 8006724:	60da      	str	r2, [r3, #12]
      break;
 8006726:	e014      	b.n	8006752 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68da      	ldr	r2, [r3, #12]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f042 0208 	orr.w	r2, r2, #8
 8006736:	60da      	str	r2, [r3, #12]
      break;
 8006738:	e00b      	b.n	8006752 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	68da      	ldr	r2, [r3, #12]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f042 0210 	orr.w	r2, r2, #16
 8006748:	60da      	str	r2, [r3, #12]
      break;
 800674a:	e002      	b.n	8006752 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	73fb      	strb	r3, [r7, #15]
      break;
 8006750:	bf00      	nop
  }

  if (status == HAL_OK)
 8006752:	7bfb      	ldrb	r3, [r7, #15]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d15f      	bne.n	8006818 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2201      	movs	r2, #1
 800675e:	6839      	ldr	r1, [r7, #0]
 8006760:	4618      	mov	r0, r3
 8006762:	f000 ff9f 	bl	80076a4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a2e      	ldr	r2, [pc, #184]	; (8006824 <HAL_TIM_PWM_Start_IT+0x210>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d004      	beq.n	800677a <HAL_TIM_PWM_Start_IT+0x166>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a2c      	ldr	r2, [pc, #176]	; (8006828 <HAL_TIM_PWM_Start_IT+0x214>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d101      	bne.n	800677e <HAL_TIM_PWM_Start_IT+0x16a>
 800677a:	2301      	movs	r3, #1
 800677c:	e000      	b.n	8006780 <HAL_TIM_PWM_Start_IT+0x16c>
 800677e:	2300      	movs	r3, #0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d007      	beq.n	8006794 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006792:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a22      	ldr	r2, [pc, #136]	; (8006824 <HAL_TIM_PWM_Start_IT+0x210>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d022      	beq.n	80067e4 <HAL_TIM_PWM_Start_IT+0x1d0>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067a6:	d01d      	beq.n	80067e4 <HAL_TIM_PWM_Start_IT+0x1d0>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a1f      	ldr	r2, [pc, #124]	; (800682c <HAL_TIM_PWM_Start_IT+0x218>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d018      	beq.n	80067e4 <HAL_TIM_PWM_Start_IT+0x1d0>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a1e      	ldr	r2, [pc, #120]	; (8006830 <HAL_TIM_PWM_Start_IT+0x21c>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d013      	beq.n	80067e4 <HAL_TIM_PWM_Start_IT+0x1d0>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a1c      	ldr	r2, [pc, #112]	; (8006834 <HAL_TIM_PWM_Start_IT+0x220>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d00e      	beq.n	80067e4 <HAL_TIM_PWM_Start_IT+0x1d0>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a17      	ldr	r2, [pc, #92]	; (8006828 <HAL_TIM_PWM_Start_IT+0x214>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d009      	beq.n	80067e4 <HAL_TIM_PWM_Start_IT+0x1d0>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a18      	ldr	r2, [pc, #96]	; (8006838 <HAL_TIM_PWM_Start_IT+0x224>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d004      	beq.n	80067e4 <HAL_TIM_PWM_Start_IT+0x1d0>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a17      	ldr	r2, [pc, #92]	; (800683c <HAL_TIM_PWM_Start_IT+0x228>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d111      	bne.n	8006808 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	f003 0307 	and.w	r3, r3, #7
 80067ee:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	2b06      	cmp	r3, #6
 80067f4:	d010      	beq.n	8006818 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f042 0201 	orr.w	r2, r2, #1
 8006804:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006806:	e007      	b.n	8006818 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f042 0201 	orr.w	r2, r2, #1
 8006816:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006818:	7bfb      	ldrb	r3, [r7, #15]
}
 800681a:	4618      	mov	r0, r3
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	40010000 	.word	0x40010000
 8006828:	40010400 	.word	0x40010400
 800682c:	40000400 	.word	0x40000400
 8006830:	40000800 	.word	0x40000800
 8006834:	40000c00 	.word	0x40000c00
 8006838:	40014000 	.word	0x40014000
 800683c:	40001800 	.word	0x40001800

08006840 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b086      	sub	sp, #24
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d101      	bne.n	8006854 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	e097      	b.n	8006984 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800685a:	b2db      	uxtb	r3, r3
 800685c:	2b00      	cmp	r3, #0
 800685e:	d106      	bne.n	800686e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f7fc f985 	bl	8002b78 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2202      	movs	r2, #2
 8006872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	6812      	ldr	r2, [r2, #0]
 8006880:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006884:	f023 0307 	bic.w	r3, r3, #7
 8006888:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	3304      	adds	r3, #4
 8006892:	4619      	mov	r1, r3
 8006894:	4610      	mov	r0, r2
 8006896:	f000 fc0f 	bl	80070b8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	699b      	ldr	r3, [r3, #24]
 80068a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	6a1b      	ldr	r3, [r3, #32]
 80068b0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	697a      	ldr	r2, [r7, #20]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068c2:	f023 0303 	bic.w	r3, r3, #3
 80068c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	689a      	ldr	r2, [r3, #8]
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	699b      	ldr	r3, [r3, #24]
 80068d0:	021b      	lsls	r3, r3, #8
 80068d2:	4313      	orrs	r3, r2
 80068d4:	693a      	ldr	r2, [r7, #16]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80068e0:	f023 030c 	bic.w	r3, r3, #12
 80068e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	68da      	ldr	r2, [r3, #12]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	69db      	ldr	r3, [r3, #28]
 80068fa:	021b      	lsls	r3, r3, #8
 80068fc:	4313      	orrs	r3, r2
 80068fe:	693a      	ldr	r2, [r7, #16]
 8006900:	4313      	orrs	r3, r2
 8006902:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	011a      	lsls	r2, r3, #4
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	6a1b      	ldr	r3, [r3, #32]
 800690e:	031b      	lsls	r3, r3, #12
 8006910:	4313      	orrs	r3, r2
 8006912:	693a      	ldr	r2, [r7, #16]
 8006914:	4313      	orrs	r3, r2
 8006916:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800691e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006926:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	685a      	ldr	r2, [r3, #4]
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	695b      	ldr	r3, [r3, #20]
 8006930:	011b      	lsls	r3, r3, #4
 8006932:	4313      	orrs	r3, r2
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	4313      	orrs	r3, r2
 8006938:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	697a      	ldr	r2, [r7, #20]
 8006940:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	693a      	ldr	r2, [r7, #16]
 8006948:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2201      	movs	r2, #1
 8006956:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2201      	movs	r2, #1
 800695e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2201      	movs	r2, #1
 8006966:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2201      	movs	r2, #1
 800696e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2201      	movs	r2, #1
 8006976:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2201      	movs	r2, #1
 800697e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006982:	2300      	movs	r3, #0
}
 8006984:	4618      	mov	r0, r3
 8006986:	3718      	adds	r7, #24
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800699c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80069a4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80069ac:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80069b4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d110      	bne.n	80069de <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80069bc:	7bfb      	ldrb	r3, [r7, #15]
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d102      	bne.n	80069c8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80069c2:	7b7b      	ldrb	r3, [r7, #13]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d001      	beq.n	80069cc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e069      	b.n	8006aa0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2202      	movs	r2, #2
 80069d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2202      	movs	r2, #2
 80069d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069dc:	e031      	b.n	8006a42 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	2b04      	cmp	r3, #4
 80069e2:	d110      	bne.n	8006a06 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80069e4:	7bbb      	ldrb	r3, [r7, #14]
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d102      	bne.n	80069f0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80069ea:	7b3b      	ldrb	r3, [r7, #12]
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d001      	beq.n	80069f4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	e055      	b.n	8006aa0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2202      	movs	r2, #2
 80069f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2202      	movs	r2, #2
 8006a00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a04:	e01d      	b.n	8006a42 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a06:	7bfb      	ldrb	r3, [r7, #15]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d108      	bne.n	8006a1e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a0c:	7bbb      	ldrb	r3, [r7, #14]
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d105      	bne.n	8006a1e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a12:	7b7b      	ldrb	r3, [r7, #13]
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d102      	bne.n	8006a1e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006a18:	7b3b      	ldrb	r3, [r7, #12]
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d001      	beq.n	8006a22 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e03e      	b.n	8006aa0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2202      	movs	r2, #2
 8006a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2202      	movs	r2, #2
 8006a2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2202      	movs	r2, #2
 8006a36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2202      	movs	r2, #2
 8006a3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d003      	beq.n	8006a50 <HAL_TIM_Encoder_Start+0xc4>
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	2b04      	cmp	r3, #4
 8006a4c:	d008      	beq.n	8006a60 <HAL_TIM_Encoder_Start+0xd4>
 8006a4e:	e00f      	b.n	8006a70 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2201      	movs	r2, #1
 8006a56:	2100      	movs	r1, #0
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f000 fe23 	bl	80076a4 <TIM_CCxChannelCmd>
      break;
 8006a5e:	e016      	b.n	8006a8e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2201      	movs	r2, #1
 8006a66:	2104      	movs	r1, #4
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f000 fe1b 	bl	80076a4 <TIM_CCxChannelCmd>
      break;
 8006a6e:	e00e      	b.n	8006a8e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2201      	movs	r2, #1
 8006a76:	2100      	movs	r1, #0
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f000 fe13 	bl	80076a4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2201      	movs	r2, #1
 8006a84:	2104      	movs	r1, #4
 8006a86:	4618      	mov	r0, r3
 8006a88:	f000 fe0c 	bl	80076a4 <TIM_CCxChannelCmd>
      break;
 8006a8c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f042 0201 	orr.w	r2, r2, #1
 8006a9c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3710      	adds	r7, #16
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	f003 0302 	and.w	r3, r3, #2
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d020      	beq.n	8006b0c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f003 0302 	and.w	r3, r3, #2
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d01b      	beq.n	8006b0c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f06f 0202 	mvn.w	r2, #2
 8006adc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	699b      	ldr	r3, [r3, #24]
 8006aea:	f003 0303 	and.w	r3, r3, #3
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d003      	beq.n	8006afa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 fac1 	bl	800707a <HAL_TIM_IC_CaptureCallback>
 8006af8:	e005      	b.n	8006b06 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 fab3 	bl	8007066 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 fac4 	bl	800708e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	f003 0304 	and.w	r3, r3, #4
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d020      	beq.n	8006b58 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f003 0304 	and.w	r3, r3, #4
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d01b      	beq.n	8006b58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f06f 0204 	mvn.w	r2, #4
 8006b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2202      	movs	r2, #2
 8006b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	699b      	ldr	r3, [r3, #24]
 8006b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d003      	beq.n	8006b46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 fa9b 	bl	800707a <HAL_TIM_IC_CaptureCallback>
 8006b44:	e005      	b.n	8006b52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 fa8d 	bl	8007066 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 fa9e 	bl	800708e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	f003 0308 	and.w	r3, r3, #8
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d020      	beq.n	8006ba4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f003 0308 	and.w	r3, r3, #8
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d01b      	beq.n	8006ba4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f06f 0208 	mvn.w	r2, #8
 8006b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2204      	movs	r2, #4
 8006b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	69db      	ldr	r3, [r3, #28]
 8006b82:	f003 0303 	and.w	r3, r3, #3
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d003      	beq.n	8006b92 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 fa75 	bl	800707a <HAL_TIM_IC_CaptureCallback>
 8006b90:	e005      	b.n	8006b9e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 fa67 	bl	8007066 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 fa78 	bl	800708e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	f003 0310 	and.w	r3, r3, #16
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d020      	beq.n	8006bf0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f003 0310 	and.w	r3, r3, #16
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d01b      	beq.n	8006bf0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f06f 0210 	mvn.w	r2, #16
 8006bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2208      	movs	r2, #8
 8006bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	69db      	ldr	r3, [r3, #28]
 8006bce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d003      	beq.n	8006bde <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 fa4f 	bl	800707a <HAL_TIM_IC_CaptureCallback>
 8006bdc:	e005      	b.n	8006bea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 fa41 	bl	8007066 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 fa52 	bl	800708e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	f003 0301 	and.w	r3, r3, #1
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00c      	beq.n	8006c14 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f003 0301 	and.w	r3, r3, #1
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d007      	beq.n	8006c14 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f06f 0201 	mvn.w	r2, #1
 8006c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 fa1f 	bl	8007052 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00c      	beq.n	8006c38 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d007      	beq.n	8006c38 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 fe34 	bl	80078a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d00c      	beq.n	8006c5c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d007      	beq.n	8006c5c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 fa23 	bl	80070a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	f003 0320 	and.w	r3, r3, #32
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00c      	beq.n	8006c80 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f003 0320 	and.w	r3, r3, #32
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d007      	beq.n	8006c80 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f06f 0220 	mvn.w	r2, #32
 8006c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 fe06 	bl	800788c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c80:	bf00      	nop
 8006c82:	3710      	adds	r7, #16
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b086      	sub	sp, #24
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c94:	2300      	movs	r3, #0
 8006c96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d101      	bne.n	8006ca6 <HAL_TIM_OC_ConfigChannel+0x1e>
 8006ca2:	2302      	movs	r3, #2
 8006ca4:	e048      	b.n	8006d38 <HAL_TIM_OC_ConfigChannel+0xb0>
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2b0c      	cmp	r3, #12
 8006cb2:	d839      	bhi.n	8006d28 <HAL_TIM_OC_ConfigChannel+0xa0>
 8006cb4:	a201      	add	r2, pc, #4	; (adr r2, 8006cbc <HAL_TIM_OC_ConfigChannel+0x34>)
 8006cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cba:	bf00      	nop
 8006cbc:	08006cf1 	.word	0x08006cf1
 8006cc0:	08006d29 	.word	0x08006d29
 8006cc4:	08006d29 	.word	0x08006d29
 8006cc8:	08006d29 	.word	0x08006d29
 8006ccc:	08006cff 	.word	0x08006cff
 8006cd0:	08006d29 	.word	0x08006d29
 8006cd4:	08006d29 	.word	0x08006d29
 8006cd8:	08006d29 	.word	0x08006d29
 8006cdc:	08006d0d 	.word	0x08006d0d
 8006ce0:	08006d29 	.word	0x08006d29
 8006ce4:	08006d29 	.word	0x08006d29
 8006ce8:	08006d29 	.word	0x08006d29
 8006cec:	08006d1b 	.word	0x08006d1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	68b9      	ldr	r1, [r7, #8]
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f000 fa8a 	bl	8007210 <TIM_OC1_SetConfig>
      break;
 8006cfc:	e017      	b.n	8006d2e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68b9      	ldr	r1, [r7, #8]
 8006d04:	4618      	mov	r0, r3
 8006d06:	f000 faf3 	bl	80072f0 <TIM_OC2_SetConfig>
      break;
 8006d0a:	e010      	b.n	8006d2e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68b9      	ldr	r1, [r7, #8]
 8006d12:	4618      	mov	r0, r3
 8006d14:	f000 fb62 	bl	80073dc <TIM_OC3_SetConfig>
      break;
 8006d18:	e009      	b.n	8006d2e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68b9      	ldr	r1, [r7, #8]
 8006d20:	4618      	mov	r0, r3
 8006d22:	f000 fbcf 	bl	80074c4 <TIM_OC4_SetConfig>
      break;
 8006d26:	e002      	b.n	8006d2e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	75fb      	strb	r3, [r7, #23]
      break;
 8006d2c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3718      	adds	r7, #24
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b086      	sub	sp, #24
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	60b9      	str	r1, [r7, #8]
 8006d4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d101      	bne.n	8006d5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006d5a:	2302      	movs	r3, #2
 8006d5c:	e0ae      	b.n	8006ebc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2201      	movs	r2, #1
 8006d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2b0c      	cmp	r3, #12
 8006d6a:	f200 809f 	bhi.w	8006eac <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006d6e:	a201      	add	r2, pc, #4	; (adr r2, 8006d74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d74:	08006da9 	.word	0x08006da9
 8006d78:	08006ead 	.word	0x08006ead
 8006d7c:	08006ead 	.word	0x08006ead
 8006d80:	08006ead 	.word	0x08006ead
 8006d84:	08006de9 	.word	0x08006de9
 8006d88:	08006ead 	.word	0x08006ead
 8006d8c:	08006ead 	.word	0x08006ead
 8006d90:	08006ead 	.word	0x08006ead
 8006d94:	08006e2b 	.word	0x08006e2b
 8006d98:	08006ead 	.word	0x08006ead
 8006d9c:	08006ead 	.word	0x08006ead
 8006da0:	08006ead 	.word	0x08006ead
 8006da4:	08006e6b 	.word	0x08006e6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	68b9      	ldr	r1, [r7, #8]
 8006dae:	4618      	mov	r0, r3
 8006db0:	f000 fa2e 	bl	8007210 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	699a      	ldr	r2, [r3, #24]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f042 0208 	orr.w	r2, r2, #8
 8006dc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	699a      	ldr	r2, [r3, #24]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f022 0204 	bic.w	r2, r2, #4
 8006dd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	6999      	ldr	r1, [r3, #24]
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	691a      	ldr	r2, [r3, #16]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	430a      	orrs	r2, r1
 8006de4:	619a      	str	r2, [r3, #24]
      break;
 8006de6:	e064      	b.n	8006eb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68b9      	ldr	r1, [r7, #8]
 8006dee:	4618      	mov	r0, r3
 8006df0:	f000 fa7e 	bl	80072f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	699a      	ldr	r2, [r3, #24]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	699a      	ldr	r2, [r3, #24]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	6999      	ldr	r1, [r3, #24]
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	021a      	lsls	r2, r3, #8
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	430a      	orrs	r2, r1
 8006e26:	619a      	str	r2, [r3, #24]
      break;
 8006e28:	e043      	b.n	8006eb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	68b9      	ldr	r1, [r7, #8]
 8006e30:	4618      	mov	r0, r3
 8006e32:	f000 fad3 	bl	80073dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	69da      	ldr	r2, [r3, #28]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f042 0208 	orr.w	r2, r2, #8
 8006e44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	69da      	ldr	r2, [r3, #28]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f022 0204 	bic.w	r2, r2, #4
 8006e54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	69d9      	ldr	r1, [r3, #28]
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	691a      	ldr	r2, [r3, #16]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	430a      	orrs	r2, r1
 8006e66:	61da      	str	r2, [r3, #28]
      break;
 8006e68:	e023      	b.n	8006eb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	68b9      	ldr	r1, [r7, #8]
 8006e70:	4618      	mov	r0, r3
 8006e72:	f000 fb27 	bl	80074c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	69da      	ldr	r2, [r3, #28]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	69da      	ldr	r2, [r3, #28]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	69d9      	ldr	r1, [r3, #28]
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	021a      	lsls	r2, r3, #8
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	430a      	orrs	r2, r1
 8006ea8:	61da      	str	r2, [r3, #28]
      break;
 8006eaa:	e002      	b.n	8006eb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	75fb      	strb	r3, [r7, #23]
      break;
 8006eb0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3718      	adds	r7, #24
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d101      	bne.n	8006ee0 <HAL_TIM_ConfigClockSource+0x1c>
 8006edc:	2302      	movs	r3, #2
 8006ede:	e0b4      	b.n	800704a <HAL_TIM_ConfigClockSource+0x186>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2202      	movs	r2, #2
 8006eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006efe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	68ba      	ldr	r2, [r7, #8]
 8006f0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f18:	d03e      	beq.n	8006f98 <HAL_TIM_ConfigClockSource+0xd4>
 8006f1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f1e:	f200 8087 	bhi.w	8007030 <HAL_TIM_ConfigClockSource+0x16c>
 8006f22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f26:	f000 8086 	beq.w	8007036 <HAL_TIM_ConfigClockSource+0x172>
 8006f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f2e:	d87f      	bhi.n	8007030 <HAL_TIM_ConfigClockSource+0x16c>
 8006f30:	2b70      	cmp	r3, #112	; 0x70
 8006f32:	d01a      	beq.n	8006f6a <HAL_TIM_ConfigClockSource+0xa6>
 8006f34:	2b70      	cmp	r3, #112	; 0x70
 8006f36:	d87b      	bhi.n	8007030 <HAL_TIM_ConfigClockSource+0x16c>
 8006f38:	2b60      	cmp	r3, #96	; 0x60
 8006f3a:	d050      	beq.n	8006fde <HAL_TIM_ConfigClockSource+0x11a>
 8006f3c:	2b60      	cmp	r3, #96	; 0x60
 8006f3e:	d877      	bhi.n	8007030 <HAL_TIM_ConfigClockSource+0x16c>
 8006f40:	2b50      	cmp	r3, #80	; 0x50
 8006f42:	d03c      	beq.n	8006fbe <HAL_TIM_ConfigClockSource+0xfa>
 8006f44:	2b50      	cmp	r3, #80	; 0x50
 8006f46:	d873      	bhi.n	8007030 <HAL_TIM_ConfigClockSource+0x16c>
 8006f48:	2b40      	cmp	r3, #64	; 0x40
 8006f4a:	d058      	beq.n	8006ffe <HAL_TIM_ConfigClockSource+0x13a>
 8006f4c:	2b40      	cmp	r3, #64	; 0x40
 8006f4e:	d86f      	bhi.n	8007030 <HAL_TIM_ConfigClockSource+0x16c>
 8006f50:	2b30      	cmp	r3, #48	; 0x30
 8006f52:	d064      	beq.n	800701e <HAL_TIM_ConfigClockSource+0x15a>
 8006f54:	2b30      	cmp	r3, #48	; 0x30
 8006f56:	d86b      	bhi.n	8007030 <HAL_TIM_ConfigClockSource+0x16c>
 8006f58:	2b20      	cmp	r3, #32
 8006f5a:	d060      	beq.n	800701e <HAL_TIM_ConfigClockSource+0x15a>
 8006f5c:	2b20      	cmp	r3, #32
 8006f5e:	d867      	bhi.n	8007030 <HAL_TIM_ConfigClockSource+0x16c>
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d05c      	beq.n	800701e <HAL_TIM_ConfigClockSource+0x15a>
 8006f64:	2b10      	cmp	r3, #16
 8006f66:	d05a      	beq.n	800701e <HAL_TIM_ConfigClockSource+0x15a>
 8006f68:	e062      	b.n	8007030 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f7a:	f000 fb73 	bl	8007664 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	68ba      	ldr	r2, [r7, #8]
 8006f94:	609a      	str	r2, [r3, #8]
      break;
 8006f96:	e04f      	b.n	8007038 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006fa8:	f000 fb5c 	bl	8007664 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	689a      	ldr	r2, [r3, #8]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006fba:	609a      	str	r2, [r3, #8]
      break;
 8006fbc:	e03c      	b.n	8007038 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fca:	461a      	mov	r2, r3
 8006fcc:	f000 fad0 	bl	8007570 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2150      	movs	r1, #80	; 0x50
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f000 fb29 	bl	800762e <TIM_ITRx_SetConfig>
      break;
 8006fdc:	e02c      	b.n	8007038 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fea:	461a      	mov	r2, r3
 8006fec:	f000 faef 	bl	80075ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2160      	movs	r1, #96	; 0x60
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f000 fb19 	bl	800762e <TIM_ITRx_SetConfig>
      break;
 8006ffc:	e01c      	b.n	8007038 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800700a:	461a      	mov	r2, r3
 800700c:	f000 fab0 	bl	8007570 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2140      	movs	r1, #64	; 0x40
 8007016:	4618      	mov	r0, r3
 8007018:	f000 fb09 	bl	800762e <TIM_ITRx_SetConfig>
      break;
 800701c:	e00c      	b.n	8007038 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4619      	mov	r1, r3
 8007028:	4610      	mov	r0, r2
 800702a:	f000 fb00 	bl	800762e <TIM_ITRx_SetConfig>
      break;
 800702e:	e003      	b.n	8007038 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	73fb      	strb	r3, [r7, #15]
      break;
 8007034:	e000      	b.n	8007038 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007036:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007048:	7bfb      	ldrb	r3, [r7, #15]
}
 800704a:	4618      	mov	r0, r3
 800704c:	3710      	adds	r7, #16
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007052:	b480      	push	{r7}
 8007054:	b083      	sub	sp, #12
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800705a:	bf00      	nop
 800705c:	370c      	adds	r7, #12
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr

08007066 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007066:	b480      	push	{r7}
 8007068:	b083      	sub	sp, #12
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800706e:	bf00      	nop
 8007070:	370c      	adds	r7, #12
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr

0800707a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800707a:	b480      	push	{r7}
 800707c:	b083      	sub	sp, #12
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007082:	bf00      	nop
 8007084:	370c      	adds	r7, #12
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr

0800708e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800708e:	b480      	push	{r7}
 8007090:	b083      	sub	sp, #12
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007096:	bf00      	nop
 8007098:	370c      	adds	r7, #12
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr

080070a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070a2:	b480      	push	{r7}
 80070a4:	b083      	sub	sp, #12
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070aa:	bf00      	nop
 80070ac:	370c      	adds	r7, #12
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr
	...

080070b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	4a46      	ldr	r2, [pc, #280]	; (80071e4 <TIM_Base_SetConfig+0x12c>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d013      	beq.n	80070f8 <TIM_Base_SetConfig+0x40>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070d6:	d00f      	beq.n	80070f8 <TIM_Base_SetConfig+0x40>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	4a43      	ldr	r2, [pc, #268]	; (80071e8 <TIM_Base_SetConfig+0x130>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d00b      	beq.n	80070f8 <TIM_Base_SetConfig+0x40>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	4a42      	ldr	r2, [pc, #264]	; (80071ec <TIM_Base_SetConfig+0x134>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d007      	beq.n	80070f8 <TIM_Base_SetConfig+0x40>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	4a41      	ldr	r2, [pc, #260]	; (80071f0 <TIM_Base_SetConfig+0x138>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d003      	beq.n	80070f8 <TIM_Base_SetConfig+0x40>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	4a40      	ldr	r2, [pc, #256]	; (80071f4 <TIM_Base_SetConfig+0x13c>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d108      	bne.n	800710a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	4313      	orrs	r3, r2
 8007108:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4a35      	ldr	r2, [pc, #212]	; (80071e4 <TIM_Base_SetConfig+0x12c>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d02b      	beq.n	800716a <TIM_Base_SetConfig+0xb2>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007118:	d027      	beq.n	800716a <TIM_Base_SetConfig+0xb2>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4a32      	ldr	r2, [pc, #200]	; (80071e8 <TIM_Base_SetConfig+0x130>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d023      	beq.n	800716a <TIM_Base_SetConfig+0xb2>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4a31      	ldr	r2, [pc, #196]	; (80071ec <TIM_Base_SetConfig+0x134>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d01f      	beq.n	800716a <TIM_Base_SetConfig+0xb2>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a30      	ldr	r2, [pc, #192]	; (80071f0 <TIM_Base_SetConfig+0x138>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d01b      	beq.n	800716a <TIM_Base_SetConfig+0xb2>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a2f      	ldr	r2, [pc, #188]	; (80071f4 <TIM_Base_SetConfig+0x13c>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d017      	beq.n	800716a <TIM_Base_SetConfig+0xb2>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4a2e      	ldr	r2, [pc, #184]	; (80071f8 <TIM_Base_SetConfig+0x140>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d013      	beq.n	800716a <TIM_Base_SetConfig+0xb2>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a2d      	ldr	r2, [pc, #180]	; (80071fc <TIM_Base_SetConfig+0x144>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d00f      	beq.n	800716a <TIM_Base_SetConfig+0xb2>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4a2c      	ldr	r2, [pc, #176]	; (8007200 <TIM_Base_SetConfig+0x148>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d00b      	beq.n	800716a <TIM_Base_SetConfig+0xb2>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4a2b      	ldr	r2, [pc, #172]	; (8007204 <TIM_Base_SetConfig+0x14c>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d007      	beq.n	800716a <TIM_Base_SetConfig+0xb2>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4a2a      	ldr	r2, [pc, #168]	; (8007208 <TIM_Base_SetConfig+0x150>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d003      	beq.n	800716a <TIM_Base_SetConfig+0xb2>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4a29      	ldr	r2, [pc, #164]	; (800720c <TIM_Base_SetConfig+0x154>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d108      	bne.n	800717c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007170:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	68fa      	ldr	r2, [r7, #12]
 8007178:	4313      	orrs	r3, r2
 800717a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	695b      	ldr	r3, [r3, #20]
 8007186:	4313      	orrs	r3, r2
 8007188:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	689a      	ldr	r2, [r3, #8]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4a10      	ldr	r2, [pc, #64]	; (80071e4 <TIM_Base_SetConfig+0x12c>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d003      	beq.n	80071b0 <TIM_Base_SetConfig+0xf8>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a12      	ldr	r2, [pc, #72]	; (80071f4 <TIM_Base_SetConfig+0x13c>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d103      	bne.n	80071b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	691a      	ldr	r2, [r3, #16]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2201      	movs	r2, #1
 80071bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	f003 0301 	and.w	r3, r3, #1
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d105      	bne.n	80071d6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	691b      	ldr	r3, [r3, #16]
 80071ce:	f023 0201 	bic.w	r2, r3, #1
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	611a      	str	r2, [r3, #16]
  }
}
 80071d6:	bf00      	nop
 80071d8:	3714      	adds	r7, #20
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
 80071e4:	40010000 	.word	0x40010000
 80071e8:	40000400 	.word	0x40000400
 80071ec:	40000800 	.word	0x40000800
 80071f0:	40000c00 	.word	0x40000c00
 80071f4:	40010400 	.word	0x40010400
 80071f8:	40014000 	.word	0x40014000
 80071fc:	40014400 	.word	0x40014400
 8007200:	40014800 	.word	0x40014800
 8007204:	40001800 	.word	0x40001800
 8007208:	40001c00 	.word	0x40001c00
 800720c:	40002000 	.word	0x40002000

08007210 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007210:	b480      	push	{r7}
 8007212:	b087      	sub	sp, #28
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a1b      	ldr	r3, [r3, #32]
 800721e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6a1b      	ldr	r3, [r3, #32]
 8007224:	f023 0201 	bic.w	r2, r3, #1
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	699b      	ldr	r3, [r3, #24]
 8007236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800723e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f023 0303 	bic.w	r3, r3, #3
 8007246:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	68fa      	ldr	r2, [r7, #12]
 800724e:	4313      	orrs	r3, r2
 8007250:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	f023 0302 	bic.w	r3, r3, #2
 8007258:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	697a      	ldr	r2, [r7, #20]
 8007260:	4313      	orrs	r3, r2
 8007262:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a20      	ldr	r2, [pc, #128]	; (80072e8 <TIM_OC1_SetConfig+0xd8>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d003      	beq.n	8007274 <TIM_OC1_SetConfig+0x64>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4a1f      	ldr	r2, [pc, #124]	; (80072ec <TIM_OC1_SetConfig+0xdc>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d10c      	bne.n	800728e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	f023 0308 	bic.w	r3, r3, #8
 800727a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	697a      	ldr	r2, [r7, #20]
 8007282:	4313      	orrs	r3, r2
 8007284:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	f023 0304 	bic.w	r3, r3, #4
 800728c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	4a15      	ldr	r2, [pc, #84]	; (80072e8 <TIM_OC1_SetConfig+0xd8>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d003      	beq.n	800729e <TIM_OC1_SetConfig+0x8e>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	4a14      	ldr	r2, [pc, #80]	; (80072ec <TIM_OC1_SetConfig+0xdc>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d111      	bne.n	80072c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	695b      	ldr	r3, [r3, #20]
 80072b2:	693a      	ldr	r2, [r7, #16]
 80072b4:	4313      	orrs	r3, r2
 80072b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	699b      	ldr	r3, [r3, #24]
 80072bc:	693a      	ldr	r2, [r7, #16]
 80072be:	4313      	orrs	r3, r2
 80072c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	693a      	ldr	r2, [r7, #16]
 80072c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	68fa      	ldr	r2, [r7, #12]
 80072cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	685a      	ldr	r2, [r3, #4]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	697a      	ldr	r2, [r7, #20]
 80072da:	621a      	str	r2, [r3, #32]
}
 80072dc:	bf00      	nop
 80072de:	371c      	adds	r7, #28
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr
 80072e8:	40010000 	.word	0x40010000
 80072ec:	40010400 	.word	0x40010400

080072f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b087      	sub	sp, #28
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a1b      	ldr	r3, [r3, #32]
 80072fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6a1b      	ldr	r3, [r3, #32]
 8007304:	f023 0210 	bic.w	r2, r3, #16
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	699b      	ldr	r3, [r3, #24]
 8007316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800731e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007326:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	021b      	lsls	r3, r3, #8
 800732e:	68fa      	ldr	r2, [r7, #12]
 8007330:	4313      	orrs	r3, r2
 8007332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	f023 0320 	bic.w	r3, r3, #32
 800733a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	011b      	lsls	r3, r3, #4
 8007342:	697a      	ldr	r2, [r7, #20]
 8007344:	4313      	orrs	r3, r2
 8007346:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4a22      	ldr	r2, [pc, #136]	; (80073d4 <TIM_OC2_SetConfig+0xe4>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d003      	beq.n	8007358 <TIM_OC2_SetConfig+0x68>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4a21      	ldr	r2, [pc, #132]	; (80073d8 <TIM_OC2_SetConfig+0xe8>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d10d      	bne.n	8007374 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800735e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	011b      	lsls	r3, r3, #4
 8007366:	697a      	ldr	r2, [r7, #20]
 8007368:	4313      	orrs	r3, r2
 800736a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007372:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	4a17      	ldr	r2, [pc, #92]	; (80073d4 <TIM_OC2_SetConfig+0xe4>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d003      	beq.n	8007384 <TIM_OC2_SetConfig+0x94>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	4a16      	ldr	r2, [pc, #88]	; (80073d8 <TIM_OC2_SetConfig+0xe8>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d113      	bne.n	80073ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800738a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007392:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	695b      	ldr	r3, [r3, #20]
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	693a      	ldr	r2, [r7, #16]
 800739c:	4313      	orrs	r3, r2
 800739e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	699b      	ldr	r3, [r3, #24]
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	693a      	ldr	r2, [r7, #16]
 80073a8:	4313      	orrs	r3, r2
 80073aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	693a      	ldr	r2, [r7, #16]
 80073b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	685a      	ldr	r2, [r3, #4]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	697a      	ldr	r2, [r7, #20]
 80073c4:	621a      	str	r2, [r3, #32]
}
 80073c6:	bf00      	nop
 80073c8:	371c      	adds	r7, #28
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop
 80073d4:	40010000 	.word	0x40010000
 80073d8:	40010400 	.word	0x40010400

080073dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80073dc:	b480      	push	{r7}
 80073de:	b087      	sub	sp, #28
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6a1b      	ldr	r3, [r3, #32]
 80073ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6a1b      	ldr	r3, [r3, #32]
 80073f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	69db      	ldr	r3, [r3, #28]
 8007402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800740a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f023 0303 	bic.w	r3, r3, #3
 8007412:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	68fa      	ldr	r2, [r7, #12]
 800741a:	4313      	orrs	r3, r2
 800741c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007424:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	021b      	lsls	r3, r3, #8
 800742c:	697a      	ldr	r2, [r7, #20]
 800742e:	4313      	orrs	r3, r2
 8007430:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a21      	ldr	r2, [pc, #132]	; (80074bc <TIM_OC3_SetConfig+0xe0>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d003      	beq.n	8007442 <TIM_OC3_SetConfig+0x66>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4a20      	ldr	r2, [pc, #128]	; (80074c0 <TIM_OC3_SetConfig+0xe4>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d10d      	bne.n	800745e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007448:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	021b      	lsls	r3, r3, #8
 8007450:	697a      	ldr	r2, [r7, #20]
 8007452:	4313      	orrs	r3, r2
 8007454:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800745c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	4a16      	ldr	r2, [pc, #88]	; (80074bc <TIM_OC3_SetConfig+0xe0>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d003      	beq.n	800746e <TIM_OC3_SetConfig+0x92>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4a15      	ldr	r2, [pc, #84]	; (80074c0 <TIM_OC3_SetConfig+0xe4>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d113      	bne.n	8007496 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007474:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800747c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	695b      	ldr	r3, [r3, #20]
 8007482:	011b      	lsls	r3, r3, #4
 8007484:	693a      	ldr	r2, [r7, #16]
 8007486:	4313      	orrs	r3, r2
 8007488:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	699b      	ldr	r3, [r3, #24]
 800748e:	011b      	lsls	r3, r3, #4
 8007490:	693a      	ldr	r2, [r7, #16]
 8007492:	4313      	orrs	r3, r2
 8007494:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	693a      	ldr	r2, [r7, #16]
 800749a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	685a      	ldr	r2, [r3, #4]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	697a      	ldr	r2, [r7, #20]
 80074ae:	621a      	str	r2, [r3, #32]
}
 80074b0:	bf00      	nop
 80074b2:	371c      	adds	r7, #28
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr
 80074bc:	40010000 	.word	0x40010000
 80074c0:	40010400 	.word	0x40010400

080074c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b087      	sub	sp, #28
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6a1b      	ldr	r3, [r3, #32]
 80074d2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6a1b      	ldr	r3, [r3, #32]
 80074d8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	69db      	ldr	r3, [r3, #28]
 80074ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	021b      	lsls	r3, r3, #8
 8007502:	68fa      	ldr	r2, [r7, #12]
 8007504:	4313      	orrs	r3, r2
 8007506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800750e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	031b      	lsls	r3, r3, #12
 8007516:	693a      	ldr	r2, [r7, #16]
 8007518:	4313      	orrs	r3, r2
 800751a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	4a12      	ldr	r2, [pc, #72]	; (8007568 <TIM_OC4_SetConfig+0xa4>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d003      	beq.n	800752c <TIM_OC4_SetConfig+0x68>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	4a11      	ldr	r2, [pc, #68]	; (800756c <TIM_OC4_SetConfig+0xa8>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d109      	bne.n	8007540 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007532:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	695b      	ldr	r3, [r3, #20]
 8007538:	019b      	lsls	r3, r3, #6
 800753a:	697a      	ldr	r2, [r7, #20]
 800753c:	4313      	orrs	r3, r2
 800753e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	697a      	ldr	r2, [r7, #20]
 8007544:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	685a      	ldr	r2, [r3, #4]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	693a      	ldr	r2, [r7, #16]
 8007558:	621a      	str	r2, [r3, #32]
}
 800755a:	bf00      	nop
 800755c:	371c      	adds	r7, #28
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop
 8007568:	40010000 	.word	0x40010000
 800756c:	40010400 	.word	0x40010400

08007570 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007570:	b480      	push	{r7}
 8007572:	b087      	sub	sp, #28
 8007574:	af00      	add	r7, sp, #0
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	60b9      	str	r1, [r7, #8]
 800757a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	6a1b      	ldr	r3, [r3, #32]
 8007580:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	6a1b      	ldr	r3, [r3, #32]
 8007586:	f023 0201 	bic.w	r2, r3, #1
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	699b      	ldr	r3, [r3, #24]
 8007592:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800759a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	011b      	lsls	r3, r3, #4
 80075a0:	693a      	ldr	r2, [r7, #16]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	f023 030a 	bic.w	r3, r3, #10
 80075ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80075ae:	697a      	ldr	r2, [r7, #20]
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	693a      	ldr	r2, [r7, #16]
 80075ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	697a      	ldr	r2, [r7, #20]
 80075c0:	621a      	str	r2, [r3, #32]
}
 80075c2:	bf00      	nop
 80075c4:	371c      	adds	r7, #28
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr

080075ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075ce:	b480      	push	{r7}
 80075d0:	b087      	sub	sp, #28
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	60f8      	str	r0, [r7, #12]
 80075d6:	60b9      	str	r1, [r7, #8]
 80075d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6a1b      	ldr	r3, [r3, #32]
 80075de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6a1b      	ldr	r3, [r3, #32]
 80075e4:	f023 0210 	bic.w	r2, r3, #16
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	699b      	ldr	r3, [r3, #24]
 80075f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80075f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	031b      	lsls	r3, r3, #12
 80075fe:	693a      	ldr	r2, [r7, #16]
 8007600:	4313      	orrs	r3, r2
 8007602:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800760a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	011b      	lsls	r3, r3, #4
 8007610:	697a      	ldr	r2, [r7, #20]
 8007612:	4313      	orrs	r3, r2
 8007614:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	693a      	ldr	r2, [r7, #16]
 800761a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	697a      	ldr	r2, [r7, #20]
 8007620:	621a      	str	r2, [r3, #32]
}
 8007622:	bf00      	nop
 8007624:	371c      	adds	r7, #28
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr

0800762e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800762e:	b480      	push	{r7}
 8007630:	b085      	sub	sp, #20
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
 8007636:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007644:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007646:	683a      	ldr	r2, [r7, #0]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	4313      	orrs	r3, r2
 800764c:	f043 0307 	orr.w	r3, r3, #7
 8007650:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	609a      	str	r2, [r3, #8]
}
 8007658:	bf00      	nop
 800765a:	3714      	adds	r7, #20
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007664:	b480      	push	{r7}
 8007666:	b087      	sub	sp, #28
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	607a      	str	r2, [r7, #4]
 8007670:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800767e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	021a      	lsls	r2, r3, #8
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	431a      	orrs	r2, r3
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	4313      	orrs	r3, r2
 800768c:	697a      	ldr	r2, [r7, #20]
 800768e:	4313      	orrs	r3, r2
 8007690:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	697a      	ldr	r2, [r7, #20]
 8007696:	609a      	str	r2, [r3, #8]
}
 8007698:	bf00      	nop
 800769a:	371c      	adds	r7, #28
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b087      	sub	sp, #28
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	60b9      	str	r1, [r7, #8]
 80076ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	f003 031f 	and.w	r3, r3, #31
 80076b6:	2201      	movs	r2, #1
 80076b8:	fa02 f303 	lsl.w	r3, r2, r3
 80076bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	6a1a      	ldr	r2, [r3, #32]
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	43db      	mvns	r3, r3
 80076c6:	401a      	ands	r2, r3
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6a1a      	ldr	r2, [r3, #32]
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	f003 031f 	and.w	r3, r3, #31
 80076d6:	6879      	ldr	r1, [r7, #4]
 80076d8:	fa01 f303 	lsl.w	r3, r1, r3
 80076dc:	431a      	orrs	r2, r3
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	621a      	str	r2, [r3, #32]
}
 80076e2:	bf00      	nop
 80076e4:	371c      	adds	r7, #28
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr
	...

080076f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b085      	sub	sp, #20
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007700:	2b01      	cmp	r3, #1
 8007702:	d101      	bne.n	8007708 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007704:	2302      	movs	r3, #2
 8007706:	e05a      	b.n	80077be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2202      	movs	r2, #2
 8007714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800772e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	4313      	orrs	r3, r2
 8007738:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a21      	ldr	r2, [pc, #132]	; (80077cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d022      	beq.n	8007792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007754:	d01d      	beq.n	8007792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a1d      	ldr	r2, [pc, #116]	; (80077d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d018      	beq.n	8007792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a1b      	ldr	r2, [pc, #108]	; (80077d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d013      	beq.n	8007792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a1a      	ldr	r2, [pc, #104]	; (80077d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d00e      	beq.n	8007792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a18      	ldr	r2, [pc, #96]	; (80077dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d009      	beq.n	8007792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a17      	ldr	r2, [pc, #92]	; (80077e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d004      	beq.n	8007792 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a15      	ldr	r2, [pc, #84]	; (80077e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d10c      	bne.n	80077ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007798:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	68ba      	ldr	r2, [r7, #8]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	68ba      	ldr	r2, [r7, #8]
 80077aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2201      	movs	r2, #1
 80077b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3714      	adds	r7, #20
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr
 80077ca:	bf00      	nop
 80077cc:	40010000 	.word	0x40010000
 80077d0:	40000400 	.word	0x40000400
 80077d4:	40000800 	.word	0x40000800
 80077d8:	40000c00 	.word	0x40000c00
 80077dc:	40010400 	.word	0x40010400
 80077e0:	40014000 	.word	0x40014000
 80077e4:	40001800 	.word	0x40001800

080077e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b085      	sub	sp, #20
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80077f2:	2300      	movs	r3, #0
 80077f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d101      	bne.n	8007804 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007800:	2302      	movs	r3, #2
 8007802:	e03d      	b.n	8007880 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	4313      	orrs	r3, r2
 8007818:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	4313      	orrs	r3, r2
 8007826:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	4313      	orrs	r3, r2
 8007834:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4313      	orrs	r3, r2
 8007842:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	691b      	ldr	r3, [r3, #16]
 800784e:	4313      	orrs	r3, r2
 8007850:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	695b      	ldr	r3, [r3, #20]
 800785c:	4313      	orrs	r3, r2
 800785e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	69db      	ldr	r3, [r3, #28]
 800786a:	4313      	orrs	r3, r2
 800786c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	68fa      	ldr	r2, [r7, #12]
 8007874:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800787e:	2300      	movs	r3, #0
}
 8007880:	4618      	mov	r0, r3
 8007882:	3714      	adds	r7, #20
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007894:	bf00      	nop
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80078a8:	bf00      	nop
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b082      	sub	sp, #8
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d101      	bne.n	80078c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	e042      	b.n	800794c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d106      	bne.n	80078e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2200      	movs	r2, #0
 80078d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f7fb faa0 	bl	8002e20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2224      	movs	r2, #36	; 0x24
 80078e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	68da      	ldr	r2, [r3, #12]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80078f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 fdbd 	bl	8008478 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	691a      	ldr	r2, [r3, #16]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800790c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	695a      	ldr	r2, [r3, #20]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800791c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	68da      	ldr	r2, [r3, #12]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800792c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2220      	movs	r2, #32
 8007938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2220      	movs	r2, #32
 8007940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800794a:	2300      	movs	r3, #0
}
 800794c:	4618      	mov	r0, r3
 800794e:	3708      	adds	r7, #8
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b08a      	sub	sp, #40	; 0x28
 8007958:	af02      	add	r7, sp, #8
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	60b9      	str	r1, [r7, #8]
 800795e:	603b      	str	r3, [r7, #0]
 8007960:	4613      	mov	r3, r2
 8007962:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007964:	2300      	movs	r3, #0
 8007966:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800796e:	b2db      	uxtb	r3, r3
 8007970:	2b20      	cmp	r3, #32
 8007972:	d175      	bne.n	8007a60 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d002      	beq.n	8007980 <HAL_UART_Transmit+0x2c>
 800797a:	88fb      	ldrh	r3, [r7, #6]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d101      	bne.n	8007984 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	e06e      	b.n	8007a62 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2200      	movs	r2, #0
 8007988:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2221      	movs	r2, #33	; 0x21
 800798e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007992:	f7fb ff39 	bl	8003808 <HAL_GetTick>
 8007996:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	88fa      	ldrh	r2, [r7, #6]
 800799c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	88fa      	ldrh	r2, [r7, #6]
 80079a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079ac:	d108      	bne.n	80079c0 <HAL_UART_Transmit+0x6c>
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	691b      	ldr	r3, [r3, #16]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d104      	bne.n	80079c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80079b6:	2300      	movs	r3, #0
 80079b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	61bb      	str	r3, [r7, #24]
 80079be:	e003      	b.n	80079c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80079c4:	2300      	movs	r3, #0
 80079c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80079c8:	e02e      	b.n	8007a28 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	9300      	str	r3, [sp, #0]
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	2200      	movs	r2, #0
 80079d2:	2180      	movs	r1, #128	; 0x80
 80079d4:	68f8      	ldr	r0, [r7, #12]
 80079d6:	f000 fb1f 	bl	8008018 <UART_WaitOnFlagUntilTimeout>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d005      	beq.n	80079ec <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2220      	movs	r2, #32
 80079e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80079e8:	2303      	movs	r3, #3
 80079ea:	e03a      	b.n	8007a62 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d10b      	bne.n	8007a0a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80079f2:	69bb      	ldr	r3, [r7, #24]
 80079f4:	881b      	ldrh	r3, [r3, #0]
 80079f6:	461a      	mov	r2, r3
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007a02:	69bb      	ldr	r3, [r7, #24]
 8007a04:	3302      	adds	r3, #2
 8007a06:	61bb      	str	r3, [r7, #24]
 8007a08:	e007      	b.n	8007a1a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a0a:	69fb      	ldr	r3, [r7, #28]
 8007a0c:	781a      	ldrb	r2, [r3, #0]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007a14:	69fb      	ldr	r3, [r7, #28]
 8007a16:	3301      	adds	r3, #1
 8007a18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	3b01      	subs	r3, #1
 8007a22:	b29a      	uxth	r2, r3
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d1cb      	bne.n	80079ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	9300      	str	r3, [sp, #0]
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	2140      	movs	r1, #64	; 0x40
 8007a3c:	68f8      	ldr	r0, [r7, #12]
 8007a3e:	f000 faeb 	bl	8008018 <UART_WaitOnFlagUntilTimeout>
 8007a42:	4603      	mov	r3, r0
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d005      	beq.n	8007a54 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2220      	movs	r2, #32
 8007a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8007a50:	2303      	movs	r3, #3
 8007a52:	e006      	b.n	8007a62 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2220      	movs	r2, #32
 8007a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	e000      	b.n	8007a62 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007a60:	2302      	movs	r3, #2
  }
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3720      	adds	r7, #32
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}

08007a6a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b084      	sub	sp, #16
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	60f8      	str	r0, [r7, #12]
 8007a72:	60b9      	str	r1, [r7, #8]
 8007a74:	4613      	mov	r3, r2
 8007a76:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	2b20      	cmp	r3, #32
 8007a82:	d112      	bne.n	8007aaa <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d002      	beq.n	8007a90 <HAL_UART_Receive_IT+0x26>
 8007a8a:	88fb      	ldrh	r3, [r7, #6]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d101      	bne.n	8007a94 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	e00b      	b.n	8007aac <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2200      	movs	r2, #0
 8007a98:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007a9a:	88fb      	ldrh	r3, [r7, #6]
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	68b9      	ldr	r1, [r7, #8]
 8007aa0:	68f8      	ldr	r0, [r7, #12]
 8007aa2:	f000 fb12 	bl	80080ca <UART_Start_Receive_IT>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	e000      	b.n	8007aac <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007aaa:	2302      	movs	r3, #2
  }
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3710      	adds	r7, #16
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b0ba      	sub	sp, #232	; 0xe8
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	695b      	ldr	r3, [r3, #20]
 8007ad6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007ada:	2300      	movs	r3, #0
 8007adc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aea:	f003 030f 	and.w	r3, r3, #15
 8007aee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007af2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d10f      	bne.n	8007b1a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007afe:	f003 0320 	and.w	r3, r3, #32
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d009      	beq.n	8007b1a <HAL_UART_IRQHandler+0x66>
 8007b06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b0a:	f003 0320 	and.w	r3, r3, #32
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d003      	beq.n	8007b1a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 fbf2 	bl	80082fc <UART_Receive_IT>
      return;
 8007b18:	e25b      	b.n	8007fd2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007b1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	f000 80de 	beq.w	8007ce0 <HAL_UART_IRQHandler+0x22c>
 8007b24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b28:	f003 0301 	and.w	r3, r3, #1
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d106      	bne.n	8007b3e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b34:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	f000 80d1 	beq.w	8007ce0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b42:	f003 0301 	and.w	r3, r3, #1
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d00b      	beq.n	8007b62 <HAL_UART_IRQHandler+0xae>
 8007b4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d005      	beq.n	8007b62 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b5a:	f043 0201 	orr.w	r2, r3, #1
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b66:	f003 0304 	and.w	r3, r3, #4
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00b      	beq.n	8007b86 <HAL_UART_IRQHandler+0xd2>
 8007b6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b72:	f003 0301 	and.w	r3, r3, #1
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d005      	beq.n	8007b86 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b7e:	f043 0202 	orr.w	r2, r3, #2
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b8a:	f003 0302 	and.w	r3, r3, #2
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d00b      	beq.n	8007baa <HAL_UART_IRQHandler+0xf6>
 8007b92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b96:	f003 0301 	and.w	r3, r3, #1
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d005      	beq.n	8007baa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ba2:	f043 0204 	orr.w	r2, r3, #4
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bae:	f003 0308 	and.w	r3, r3, #8
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d011      	beq.n	8007bda <HAL_UART_IRQHandler+0x126>
 8007bb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bba:	f003 0320 	and.w	r3, r3, #32
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d105      	bne.n	8007bce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007bc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bc6:	f003 0301 	and.w	r3, r3, #1
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d005      	beq.n	8007bda <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bd2:	f043 0208 	orr.w	r2, r3, #8
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	f000 81f2 	beq.w	8007fc8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007be8:	f003 0320 	and.w	r3, r3, #32
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d008      	beq.n	8007c02 <HAL_UART_IRQHandler+0x14e>
 8007bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bf4:	f003 0320 	and.w	r3, r3, #32
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d002      	beq.n	8007c02 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 fb7d 	bl	80082fc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	695b      	ldr	r3, [r3, #20]
 8007c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c0c:	2b40      	cmp	r3, #64	; 0x40
 8007c0e:	bf0c      	ite	eq
 8007c10:	2301      	moveq	r3, #1
 8007c12:	2300      	movne	r3, #0
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c1e:	f003 0308 	and.w	r3, r3, #8
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d103      	bne.n	8007c2e <HAL_UART_IRQHandler+0x17a>
 8007c26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d04f      	beq.n	8007cce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 fa85 	bl	800813e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	695b      	ldr	r3, [r3, #20]
 8007c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c3e:	2b40      	cmp	r3, #64	; 0x40
 8007c40:	d141      	bne.n	8007cc6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	3314      	adds	r3, #20
 8007c48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c50:	e853 3f00 	ldrex	r3, [r3]
 8007c54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007c58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	3314      	adds	r3, #20
 8007c6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007c6e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007c72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007c7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007c7e:	e841 2300 	strex	r3, r2, [r1]
 8007c82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007c86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d1d9      	bne.n	8007c42 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d013      	beq.n	8007cbe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c9a:	4a7e      	ldr	r2, [pc, #504]	; (8007e94 <HAL_UART_IRQHandler+0x3e0>)
 8007c9c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f7fc fda4 	bl	80047f0 <HAL_DMA_Abort_IT>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d016      	beq.n	8007cdc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007cb8:	4610      	mov	r0, r2
 8007cba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cbc:	e00e      	b.n	8007cdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 f994 	bl	8007fec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cc4:	e00a      	b.n	8007cdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 f990 	bl	8007fec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ccc:	e006      	b.n	8007cdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 f98c 	bl	8007fec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8007cda:	e175      	b.n	8007fc8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cdc:	bf00      	nop
    return;
 8007cde:	e173      	b.n	8007fc8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	f040 814f 	bne.w	8007f88 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cee:	f003 0310 	and.w	r3, r3, #16
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	f000 8148 	beq.w	8007f88 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cfc:	f003 0310 	and.w	r3, r3, #16
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	f000 8141 	beq.w	8007f88 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d06:	2300      	movs	r3, #0
 8007d08:	60bb      	str	r3, [r7, #8]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	60bb      	str	r3, [r7, #8]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	60bb      	str	r3, [r7, #8]
 8007d1a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	695b      	ldr	r3, [r3, #20]
 8007d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d26:	2b40      	cmp	r3, #64	; 0x40
 8007d28:	f040 80b6 	bne.w	8007e98 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007d38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	f000 8145 	beq.w	8007fcc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007d46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	f080 813e 	bcs.w	8007fcc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d56:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d5c:	69db      	ldr	r3, [r3, #28]
 8007d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d62:	f000 8088 	beq.w	8007e76 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	330c      	adds	r3, #12
 8007d6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d74:	e853 3f00 	ldrex	r3, [r3]
 8007d78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007d7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	330c      	adds	r3, #12
 8007d8e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007d92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007d96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007d9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007da2:	e841 2300 	strex	r3, r2, [r1]
 8007da6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007daa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d1d9      	bne.n	8007d66 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	3314      	adds	r3, #20
 8007db8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007dbc:	e853 3f00 	ldrex	r3, [r3]
 8007dc0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007dc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007dc4:	f023 0301 	bic.w	r3, r3, #1
 8007dc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	3314      	adds	r3, #20
 8007dd2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007dd6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007dda:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ddc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007dde:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007de2:	e841 2300 	strex	r3, r2, [r1]
 8007de6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007de8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d1e1      	bne.n	8007db2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	3314      	adds	r3, #20
 8007df4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007df8:	e853 3f00 	ldrex	r3, [r3]
 8007dfc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007dfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	3314      	adds	r3, #20
 8007e0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007e12:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007e14:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e16:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007e18:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007e1a:	e841 2300 	strex	r3, r2, [r1]
 8007e1e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007e20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d1e3      	bne.n	8007dee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2220      	movs	r2, #32
 8007e2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	330c      	adds	r3, #12
 8007e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e3e:	e853 3f00 	ldrex	r3, [r3]
 8007e42:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007e44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e46:	f023 0310 	bic.w	r3, r3, #16
 8007e4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	330c      	adds	r3, #12
 8007e54:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007e58:	65ba      	str	r2, [r7, #88]	; 0x58
 8007e5a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007e5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e60:	e841 2300 	strex	r3, r2, [r1]
 8007e64:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007e66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d1e3      	bne.n	8007e34 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e70:	4618      	mov	r0, r3
 8007e72:	f7fc fc4d 	bl	8004710 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2202      	movs	r2, #2
 8007e7a:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	1ad3      	subs	r3, r2, r3
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 f8b7 	bl	8008000 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007e92:	e09b      	b.n	8007fcc <HAL_UART_IRQHandler+0x518>
 8007e94:	08008205 	.word	0x08008205
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	1ad3      	subs	r3, r2, r3
 8007ea4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	f000 808e 	beq.w	8007fd0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007eb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	f000 8089 	beq.w	8007fd0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	330c      	adds	r3, #12
 8007ec4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec8:	e853 3f00 	ldrex	r3, [r3]
 8007ecc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ed0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ed4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	330c      	adds	r3, #12
 8007ede:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007ee2:	647a      	str	r2, [r7, #68]	; 0x44
 8007ee4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007ee8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007eea:	e841 2300 	strex	r3, r2, [r1]
 8007eee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d1e3      	bne.n	8007ebe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	3314      	adds	r3, #20
 8007efc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f00:	e853 3f00 	ldrex	r3, [r3]
 8007f04:	623b      	str	r3, [r7, #32]
   return(result);
 8007f06:	6a3b      	ldr	r3, [r7, #32]
 8007f08:	f023 0301 	bic.w	r3, r3, #1
 8007f0c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	3314      	adds	r3, #20
 8007f16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007f1a:	633a      	str	r2, [r7, #48]	; 0x30
 8007f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f22:	e841 2300 	strex	r3, r2, [r1]
 8007f26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d1e3      	bne.n	8007ef6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2220      	movs	r2, #32
 8007f32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	330c      	adds	r3, #12
 8007f42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	e853 3f00 	ldrex	r3, [r3]
 8007f4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f023 0310 	bic.w	r3, r3, #16
 8007f52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	330c      	adds	r3, #12
 8007f5c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007f60:	61fa      	str	r2, [r7, #28]
 8007f62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f64:	69b9      	ldr	r1, [r7, #24]
 8007f66:	69fa      	ldr	r2, [r7, #28]
 8007f68:	e841 2300 	strex	r3, r2, [r1]
 8007f6c:	617b      	str	r3, [r7, #20]
   return(result);
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d1e3      	bne.n	8007f3c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2202      	movs	r2, #2
 8007f78:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007f7a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007f7e:	4619      	mov	r1, r3
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 f83d 	bl	8008000 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007f86:	e023      	b.n	8007fd0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007f88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d009      	beq.n	8007fa8 <HAL_UART_IRQHandler+0x4f4>
 8007f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d003      	beq.n	8007fa8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 f943 	bl	800822c <UART_Transmit_IT>
    return;
 8007fa6:	e014      	b.n	8007fd2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d00e      	beq.n	8007fd2 <HAL_UART_IRQHandler+0x51e>
 8007fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d008      	beq.n	8007fd2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 f983 	bl	80082cc <UART_EndTransmit_IT>
    return;
 8007fc6:	e004      	b.n	8007fd2 <HAL_UART_IRQHandler+0x51e>
    return;
 8007fc8:	bf00      	nop
 8007fca:	e002      	b.n	8007fd2 <HAL_UART_IRQHandler+0x51e>
      return;
 8007fcc:	bf00      	nop
 8007fce:	e000      	b.n	8007fd2 <HAL_UART_IRQHandler+0x51e>
      return;
 8007fd0:	bf00      	nop
  }
}
 8007fd2:	37e8      	adds	r7, #232	; 0xe8
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007fe0:	bf00      	nop
 8007fe2:	370c      	adds	r7, #12
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007ff4:	bf00      	nop
 8007ff6:	370c      	adds	r7, #12
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr

08008000 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	460b      	mov	r3, r1
 800800a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800800c:	bf00      	nop
 800800e:	370c      	adds	r7, #12
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr

08008018 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b086      	sub	sp, #24
 800801c:	af00      	add	r7, sp, #0
 800801e:	60f8      	str	r0, [r7, #12]
 8008020:	60b9      	str	r1, [r7, #8]
 8008022:	603b      	str	r3, [r7, #0]
 8008024:	4613      	mov	r3, r2
 8008026:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008028:	e03b      	b.n	80080a2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800802a:	6a3b      	ldr	r3, [r7, #32]
 800802c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008030:	d037      	beq.n	80080a2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008032:	f7fb fbe9 	bl	8003808 <HAL_GetTick>
 8008036:	4602      	mov	r2, r0
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	1ad3      	subs	r3, r2, r3
 800803c:	6a3a      	ldr	r2, [r7, #32]
 800803e:	429a      	cmp	r2, r3
 8008040:	d302      	bcc.n	8008048 <UART_WaitOnFlagUntilTimeout+0x30>
 8008042:	6a3b      	ldr	r3, [r7, #32]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d101      	bne.n	800804c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008048:	2303      	movs	r3, #3
 800804a:	e03a      	b.n	80080c2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	f003 0304 	and.w	r3, r3, #4
 8008056:	2b00      	cmp	r3, #0
 8008058:	d023      	beq.n	80080a2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	2b80      	cmp	r3, #128	; 0x80
 800805e:	d020      	beq.n	80080a2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	2b40      	cmp	r3, #64	; 0x40
 8008064:	d01d      	beq.n	80080a2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f003 0308 	and.w	r3, r3, #8
 8008070:	2b08      	cmp	r3, #8
 8008072:	d116      	bne.n	80080a2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008074:	2300      	movs	r3, #0
 8008076:	617b      	str	r3, [r7, #20]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	617b      	str	r3, [r7, #20]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	617b      	str	r3, [r7, #20]
 8008088:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800808a:	68f8      	ldr	r0, [r7, #12]
 800808c:	f000 f857 	bl	800813e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2208      	movs	r2, #8
 8008094:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2200      	movs	r2, #0
 800809a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800809e:	2301      	movs	r3, #1
 80080a0:	e00f      	b.n	80080c2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	4013      	ands	r3, r2
 80080ac:	68ba      	ldr	r2, [r7, #8]
 80080ae:	429a      	cmp	r2, r3
 80080b0:	bf0c      	ite	eq
 80080b2:	2301      	moveq	r3, #1
 80080b4:	2300      	movne	r3, #0
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	461a      	mov	r2, r3
 80080ba:	79fb      	ldrb	r3, [r7, #7]
 80080bc:	429a      	cmp	r2, r3
 80080be:	d0b4      	beq.n	800802a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080c0:	2300      	movs	r3, #0
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3718      	adds	r7, #24
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}

080080ca <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080ca:	b480      	push	{r7}
 80080cc:	b085      	sub	sp, #20
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	60f8      	str	r0, [r7, #12]
 80080d2:	60b9      	str	r1, [r7, #8]
 80080d4:	4613      	mov	r3, r2
 80080d6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	68ba      	ldr	r2, [r7, #8]
 80080dc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	88fa      	ldrh	r2, [r7, #6]
 80080e2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	88fa      	ldrh	r2, [r7, #6]
 80080e8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2200      	movs	r2, #0
 80080ee:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2222      	movs	r2, #34	; 0x22
 80080f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	691b      	ldr	r3, [r3, #16]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d007      	beq.n	8008110 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	68da      	ldr	r2, [r3, #12]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800810e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	695a      	ldr	r2, [r3, #20]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f042 0201 	orr.w	r2, r2, #1
 800811e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	68da      	ldr	r2, [r3, #12]
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f042 0220 	orr.w	r2, r2, #32
 800812e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008130:	2300      	movs	r3, #0
}
 8008132:	4618      	mov	r0, r3
 8008134:	3714      	adds	r7, #20
 8008136:	46bd      	mov	sp, r7
 8008138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813c:	4770      	bx	lr

0800813e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800813e:	b480      	push	{r7}
 8008140:	b095      	sub	sp, #84	; 0x54
 8008142:	af00      	add	r7, sp, #0
 8008144:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	330c      	adds	r3, #12
 800814c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800814e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008150:	e853 3f00 	ldrex	r3, [r3]
 8008154:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008158:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800815c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	330c      	adds	r3, #12
 8008164:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008166:	643a      	str	r2, [r7, #64]	; 0x40
 8008168:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800816a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800816c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800816e:	e841 2300 	strex	r3, r2, [r1]
 8008172:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008176:	2b00      	cmp	r3, #0
 8008178:	d1e5      	bne.n	8008146 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	3314      	adds	r3, #20
 8008180:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008182:	6a3b      	ldr	r3, [r7, #32]
 8008184:	e853 3f00 	ldrex	r3, [r3]
 8008188:	61fb      	str	r3, [r7, #28]
   return(result);
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	f023 0301 	bic.w	r3, r3, #1
 8008190:	64bb      	str	r3, [r7, #72]	; 0x48
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	3314      	adds	r3, #20
 8008198:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800819a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800819c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800819e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081a2:	e841 2300 	strex	r3, r2, [r1]
 80081a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d1e5      	bne.n	800817a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	d119      	bne.n	80081ea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	330c      	adds	r3, #12
 80081bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	e853 3f00 	ldrex	r3, [r3]
 80081c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	f023 0310 	bic.w	r3, r3, #16
 80081cc:	647b      	str	r3, [r7, #68]	; 0x44
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	330c      	adds	r3, #12
 80081d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081d6:	61ba      	str	r2, [r7, #24]
 80081d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081da:	6979      	ldr	r1, [r7, #20]
 80081dc:	69ba      	ldr	r2, [r7, #24]
 80081de:	e841 2300 	strex	r3, r2, [r1]
 80081e2:	613b      	str	r3, [r7, #16]
   return(result);
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d1e5      	bne.n	80081b6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2220      	movs	r2, #32
 80081ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80081f8:	bf00      	nop
 80081fa:	3754      	adds	r7, #84	; 0x54
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr

08008204 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008210:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2200      	movs	r2, #0
 8008216:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2200      	movs	r2, #0
 800821c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800821e:	68f8      	ldr	r0, [r7, #12]
 8008220:	f7ff fee4 	bl	8007fec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008224:	bf00      	nop
 8008226:	3710      	adds	r7, #16
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800822c:	b480      	push	{r7}
 800822e:	b085      	sub	sp, #20
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800823a:	b2db      	uxtb	r3, r3
 800823c:	2b21      	cmp	r3, #33	; 0x21
 800823e:	d13e      	bne.n	80082be <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008248:	d114      	bne.n	8008274 <UART_Transmit_IT+0x48>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	691b      	ldr	r3, [r3, #16]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d110      	bne.n	8008274 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6a1b      	ldr	r3, [r3, #32]
 8008256:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	881b      	ldrh	r3, [r3, #0]
 800825c:	461a      	mov	r2, r3
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008266:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6a1b      	ldr	r3, [r3, #32]
 800826c:	1c9a      	adds	r2, r3, #2
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	621a      	str	r2, [r3, #32]
 8008272:	e008      	b.n	8008286 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6a1b      	ldr	r3, [r3, #32]
 8008278:	1c59      	adds	r1, r3, #1
 800827a:	687a      	ldr	r2, [r7, #4]
 800827c:	6211      	str	r1, [r2, #32]
 800827e:	781a      	ldrb	r2, [r3, #0]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800828a:	b29b      	uxth	r3, r3
 800828c:	3b01      	subs	r3, #1
 800828e:	b29b      	uxth	r3, r3
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	4619      	mov	r1, r3
 8008294:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008296:	2b00      	cmp	r3, #0
 8008298:	d10f      	bne.n	80082ba <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	68da      	ldr	r2, [r3, #12]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80082a8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	68da      	ldr	r2, [r3, #12]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082b8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80082ba:	2300      	movs	r3, #0
 80082bc:	e000      	b.n	80082c0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80082be:	2302      	movs	r3, #2
  }
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3714      	adds	r7, #20
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	68da      	ldr	r2, [r3, #12]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082e2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2220      	movs	r2, #32
 80082e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f7ff fe73 	bl	8007fd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80082f2:	2300      	movs	r3, #0
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3708      	adds	r7, #8
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b08c      	sub	sp, #48	; 0x30
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800830a:	b2db      	uxtb	r3, r3
 800830c:	2b22      	cmp	r3, #34	; 0x22
 800830e:	f040 80ae 	bne.w	800846e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800831a:	d117      	bne.n	800834c <UART_Receive_IT+0x50>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	691b      	ldr	r3, [r3, #16]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d113      	bne.n	800834c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008324:	2300      	movs	r3, #0
 8008326:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800832c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	b29b      	uxth	r3, r3
 8008336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800833a:	b29a      	uxth	r2, r3
 800833c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800833e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008344:	1c9a      	adds	r2, r3, #2
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	629a      	str	r2, [r3, #40]	; 0x28
 800834a:	e026      	b.n	800839a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008350:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008352:	2300      	movs	r3, #0
 8008354:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800835e:	d007      	beq.n	8008370 <UART_Receive_IT+0x74>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d10a      	bne.n	800837e <UART_Receive_IT+0x82>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	691b      	ldr	r3, [r3, #16]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d106      	bne.n	800837e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	b2da      	uxtb	r2, r3
 8008378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800837a:	701a      	strb	r2, [r3, #0]
 800837c:	e008      	b.n	8008390 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	b2db      	uxtb	r3, r3
 8008386:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800838a:	b2da      	uxtb	r2, r3
 800838c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800838e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008394:	1c5a      	adds	r2, r3, #1
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800839e:	b29b      	uxth	r3, r3
 80083a0:	3b01      	subs	r3, #1
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	687a      	ldr	r2, [r7, #4]
 80083a6:	4619      	mov	r1, r3
 80083a8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d15d      	bne.n	800846a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	68da      	ldr	r2, [r3, #12]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f022 0220 	bic.w	r2, r2, #32
 80083bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	68da      	ldr	r2, [r3, #12]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80083cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	695a      	ldr	r2, [r3, #20]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f022 0201 	bic.w	r2, r2, #1
 80083dc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2220      	movs	r2, #32
 80083e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2200      	movs	r2, #0
 80083ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d135      	bne.n	8008460 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	330c      	adds	r3, #12
 8008400:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	e853 3f00 	ldrex	r3, [r3]
 8008408:	613b      	str	r3, [r7, #16]
   return(result);
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	f023 0310 	bic.w	r3, r3, #16
 8008410:	627b      	str	r3, [r7, #36]	; 0x24
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	330c      	adds	r3, #12
 8008418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800841a:	623a      	str	r2, [r7, #32]
 800841c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800841e:	69f9      	ldr	r1, [r7, #28]
 8008420:	6a3a      	ldr	r2, [r7, #32]
 8008422:	e841 2300 	strex	r3, r2, [r1]
 8008426:	61bb      	str	r3, [r7, #24]
   return(result);
 8008428:	69bb      	ldr	r3, [r7, #24]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d1e5      	bne.n	80083fa <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f003 0310 	and.w	r3, r3, #16
 8008438:	2b10      	cmp	r3, #16
 800843a:	d10a      	bne.n	8008452 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800843c:	2300      	movs	r3, #0
 800843e:	60fb      	str	r3, [r7, #12]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	60fb      	str	r3, [r7, #12]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	60fb      	str	r3, [r7, #12]
 8008450:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008456:	4619      	mov	r1, r3
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f7ff fdd1 	bl	8008000 <HAL_UARTEx_RxEventCallback>
 800845e:	e002      	b.n	8008466 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f7f8 fdcb 	bl	8000ffc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008466:	2300      	movs	r3, #0
 8008468:	e002      	b.n	8008470 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800846a:	2300      	movs	r3, #0
 800846c:	e000      	b.n	8008470 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800846e:	2302      	movs	r3, #2
  }
}
 8008470:	4618      	mov	r0, r3
 8008472:	3730      	adds	r7, #48	; 0x30
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008478:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800847c:	b0c0      	sub	sp, #256	; 0x100
 800847e:	af00      	add	r7, sp, #0
 8008480:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	691b      	ldr	r3, [r3, #16]
 800848c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008494:	68d9      	ldr	r1, [r3, #12]
 8008496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	ea40 0301 	orr.w	r3, r0, r1
 80084a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80084a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084a6:	689a      	ldr	r2, [r3, #8]
 80084a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084ac:	691b      	ldr	r3, [r3, #16]
 80084ae:	431a      	orrs	r2, r3
 80084b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084b4:	695b      	ldr	r3, [r3, #20]
 80084b6:	431a      	orrs	r2, r3
 80084b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084bc:	69db      	ldr	r3, [r3, #28]
 80084be:	4313      	orrs	r3, r2
 80084c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80084c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	68db      	ldr	r3, [r3, #12]
 80084cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80084d0:	f021 010c 	bic.w	r1, r1, #12
 80084d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084d8:	681a      	ldr	r2, [r3, #0]
 80084da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80084de:	430b      	orrs	r3, r1
 80084e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80084e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	695b      	ldr	r3, [r3, #20]
 80084ea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80084ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084f2:	6999      	ldr	r1, [r3, #24]
 80084f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	ea40 0301 	orr.w	r3, r0, r1
 80084fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	4b8f      	ldr	r3, [pc, #572]	; (8008744 <UART_SetConfig+0x2cc>)
 8008508:	429a      	cmp	r2, r3
 800850a:	d005      	beq.n	8008518 <UART_SetConfig+0xa0>
 800850c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	4b8d      	ldr	r3, [pc, #564]	; (8008748 <UART_SetConfig+0x2d0>)
 8008514:	429a      	cmp	r2, r3
 8008516:	d104      	bne.n	8008522 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008518:	f7fd fe8e 	bl	8006238 <HAL_RCC_GetPCLK2Freq>
 800851c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008520:	e003      	b.n	800852a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008522:	f7fd fe75 	bl	8006210 <HAL_RCC_GetPCLK1Freq>
 8008526:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800852a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800852e:	69db      	ldr	r3, [r3, #28]
 8008530:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008534:	f040 810c 	bne.w	8008750 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008538:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800853c:	2200      	movs	r2, #0
 800853e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008542:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008546:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800854a:	4622      	mov	r2, r4
 800854c:	462b      	mov	r3, r5
 800854e:	1891      	adds	r1, r2, r2
 8008550:	65b9      	str	r1, [r7, #88]	; 0x58
 8008552:	415b      	adcs	r3, r3
 8008554:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008556:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800855a:	4621      	mov	r1, r4
 800855c:	eb12 0801 	adds.w	r8, r2, r1
 8008560:	4629      	mov	r1, r5
 8008562:	eb43 0901 	adc.w	r9, r3, r1
 8008566:	f04f 0200 	mov.w	r2, #0
 800856a:	f04f 0300 	mov.w	r3, #0
 800856e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008572:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008576:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800857a:	4690      	mov	r8, r2
 800857c:	4699      	mov	r9, r3
 800857e:	4623      	mov	r3, r4
 8008580:	eb18 0303 	adds.w	r3, r8, r3
 8008584:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008588:	462b      	mov	r3, r5
 800858a:	eb49 0303 	adc.w	r3, r9, r3
 800858e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	2200      	movs	r2, #0
 800859a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800859e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80085a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80085a6:	460b      	mov	r3, r1
 80085a8:	18db      	adds	r3, r3, r3
 80085aa:	653b      	str	r3, [r7, #80]	; 0x50
 80085ac:	4613      	mov	r3, r2
 80085ae:	eb42 0303 	adc.w	r3, r2, r3
 80085b2:	657b      	str	r3, [r7, #84]	; 0x54
 80085b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80085b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80085bc:	f7f8 fb74 	bl	8000ca8 <__aeabi_uldivmod>
 80085c0:	4602      	mov	r2, r0
 80085c2:	460b      	mov	r3, r1
 80085c4:	4b61      	ldr	r3, [pc, #388]	; (800874c <UART_SetConfig+0x2d4>)
 80085c6:	fba3 2302 	umull	r2, r3, r3, r2
 80085ca:	095b      	lsrs	r3, r3, #5
 80085cc:	011c      	lsls	r4, r3, #4
 80085ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085d2:	2200      	movs	r2, #0
 80085d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80085d8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80085dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80085e0:	4642      	mov	r2, r8
 80085e2:	464b      	mov	r3, r9
 80085e4:	1891      	adds	r1, r2, r2
 80085e6:	64b9      	str	r1, [r7, #72]	; 0x48
 80085e8:	415b      	adcs	r3, r3
 80085ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80085f0:	4641      	mov	r1, r8
 80085f2:	eb12 0a01 	adds.w	sl, r2, r1
 80085f6:	4649      	mov	r1, r9
 80085f8:	eb43 0b01 	adc.w	fp, r3, r1
 80085fc:	f04f 0200 	mov.w	r2, #0
 8008600:	f04f 0300 	mov.w	r3, #0
 8008604:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008608:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800860c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008610:	4692      	mov	sl, r2
 8008612:	469b      	mov	fp, r3
 8008614:	4643      	mov	r3, r8
 8008616:	eb1a 0303 	adds.w	r3, sl, r3
 800861a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800861e:	464b      	mov	r3, r9
 8008620:	eb4b 0303 	adc.w	r3, fp, r3
 8008624:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008634:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008638:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800863c:	460b      	mov	r3, r1
 800863e:	18db      	adds	r3, r3, r3
 8008640:	643b      	str	r3, [r7, #64]	; 0x40
 8008642:	4613      	mov	r3, r2
 8008644:	eb42 0303 	adc.w	r3, r2, r3
 8008648:	647b      	str	r3, [r7, #68]	; 0x44
 800864a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800864e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008652:	f7f8 fb29 	bl	8000ca8 <__aeabi_uldivmod>
 8008656:	4602      	mov	r2, r0
 8008658:	460b      	mov	r3, r1
 800865a:	4611      	mov	r1, r2
 800865c:	4b3b      	ldr	r3, [pc, #236]	; (800874c <UART_SetConfig+0x2d4>)
 800865e:	fba3 2301 	umull	r2, r3, r3, r1
 8008662:	095b      	lsrs	r3, r3, #5
 8008664:	2264      	movs	r2, #100	; 0x64
 8008666:	fb02 f303 	mul.w	r3, r2, r3
 800866a:	1acb      	subs	r3, r1, r3
 800866c:	00db      	lsls	r3, r3, #3
 800866e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008672:	4b36      	ldr	r3, [pc, #216]	; (800874c <UART_SetConfig+0x2d4>)
 8008674:	fba3 2302 	umull	r2, r3, r3, r2
 8008678:	095b      	lsrs	r3, r3, #5
 800867a:	005b      	lsls	r3, r3, #1
 800867c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008680:	441c      	add	r4, r3
 8008682:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008686:	2200      	movs	r2, #0
 8008688:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800868c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008690:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008694:	4642      	mov	r2, r8
 8008696:	464b      	mov	r3, r9
 8008698:	1891      	adds	r1, r2, r2
 800869a:	63b9      	str	r1, [r7, #56]	; 0x38
 800869c:	415b      	adcs	r3, r3
 800869e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80086a4:	4641      	mov	r1, r8
 80086a6:	1851      	adds	r1, r2, r1
 80086a8:	6339      	str	r1, [r7, #48]	; 0x30
 80086aa:	4649      	mov	r1, r9
 80086ac:	414b      	adcs	r3, r1
 80086ae:	637b      	str	r3, [r7, #52]	; 0x34
 80086b0:	f04f 0200 	mov.w	r2, #0
 80086b4:	f04f 0300 	mov.w	r3, #0
 80086b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80086bc:	4659      	mov	r1, fp
 80086be:	00cb      	lsls	r3, r1, #3
 80086c0:	4651      	mov	r1, sl
 80086c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80086c6:	4651      	mov	r1, sl
 80086c8:	00ca      	lsls	r2, r1, #3
 80086ca:	4610      	mov	r0, r2
 80086cc:	4619      	mov	r1, r3
 80086ce:	4603      	mov	r3, r0
 80086d0:	4642      	mov	r2, r8
 80086d2:	189b      	adds	r3, r3, r2
 80086d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80086d8:	464b      	mov	r3, r9
 80086da:	460a      	mov	r2, r1
 80086dc:	eb42 0303 	adc.w	r3, r2, r3
 80086e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80086e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80086f0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80086f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80086f8:	460b      	mov	r3, r1
 80086fa:	18db      	adds	r3, r3, r3
 80086fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80086fe:	4613      	mov	r3, r2
 8008700:	eb42 0303 	adc.w	r3, r2, r3
 8008704:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008706:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800870a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800870e:	f7f8 facb 	bl	8000ca8 <__aeabi_uldivmod>
 8008712:	4602      	mov	r2, r0
 8008714:	460b      	mov	r3, r1
 8008716:	4b0d      	ldr	r3, [pc, #52]	; (800874c <UART_SetConfig+0x2d4>)
 8008718:	fba3 1302 	umull	r1, r3, r3, r2
 800871c:	095b      	lsrs	r3, r3, #5
 800871e:	2164      	movs	r1, #100	; 0x64
 8008720:	fb01 f303 	mul.w	r3, r1, r3
 8008724:	1ad3      	subs	r3, r2, r3
 8008726:	00db      	lsls	r3, r3, #3
 8008728:	3332      	adds	r3, #50	; 0x32
 800872a:	4a08      	ldr	r2, [pc, #32]	; (800874c <UART_SetConfig+0x2d4>)
 800872c:	fba2 2303 	umull	r2, r3, r2, r3
 8008730:	095b      	lsrs	r3, r3, #5
 8008732:	f003 0207 	and.w	r2, r3, #7
 8008736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4422      	add	r2, r4
 800873e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008740:	e106      	b.n	8008950 <UART_SetConfig+0x4d8>
 8008742:	bf00      	nop
 8008744:	40011000 	.word	0x40011000
 8008748:	40011400 	.word	0x40011400
 800874c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008750:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008754:	2200      	movs	r2, #0
 8008756:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800875a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800875e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008762:	4642      	mov	r2, r8
 8008764:	464b      	mov	r3, r9
 8008766:	1891      	adds	r1, r2, r2
 8008768:	6239      	str	r1, [r7, #32]
 800876a:	415b      	adcs	r3, r3
 800876c:	627b      	str	r3, [r7, #36]	; 0x24
 800876e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008772:	4641      	mov	r1, r8
 8008774:	1854      	adds	r4, r2, r1
 8008776:	4649      	mov	r1, r9
 8008778:	eb43 0501 	adc.w	r5, r3, r1
 800877c:	f04f 0200 	mov.w	r2, #0
 8008780:	f04f 0300 	mov.w	r3, #0
 8008784:	00eb      	lsls	r3, r5, #3
 8008786:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800878a:	00e2      	lsls	r2, r4, #3
 800878c:	4614      	mov	r4, r2
 800878e:	461d      	mov	r5, r3
 8008790:	4643      	mov	r3, r8
 8008792:	18e3      	adds	r3, r4, r3
 8008794:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008798:	464b      	mov	r3, r9
 800879a:	eb45 0303 	adc.w	r3, r5, r3
 800879e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80087a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80087ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80087b2:	f04f 0200 	mov.w	r2, #0
 80087b6:	f04f 0300 	mov.w	r3, #0
 80087ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80087be:	4629      	mov	r1, r5
 80087c0:	008b      	lsls	r3, r1, #2
 80087c2:	4621      	mov	r1, r4
 80087c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80087c8:	4621      	mov	r1, r4
 80087ca:	008a      	lsls	r2, r1, #2
 80087cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80087d0:	f7f8 fa6a 	bl	8000ca8 <__aeabi_uldivmod>
 80087d4:	4602      	mov	r2, r0
 80087d6:	460b      	mov	r3, r1
 80087d8:	4b60      	ldr	r3, [pc, #384]	; (800895c <UART_SetConfig+0x4e4>)
 80087da:	fba3 2302 	umull	r2, r3, r3, r2
 80087de:	095b      	lsrs	r3, r3, #5
 80087e0:	011c      	lsls	r4, r3, #4
 80087e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087e6:	2200      	movs	r2, #0
 80087e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80087ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80087f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80087f4:	4642      	mov	r2, r8
 80087f6:	464b      	mov	r3, r9
 80087f8:	1891      	adds	r1, r2, r2
 80087fa:	61b9      	str	r1, [r7, #24]
 80087fc:	415b      	adcs	r3, r3
 80087fe:	61fb      	str	r3, [r7, #28]
 8008800:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008804:	4641      	mov	r1, r8
 8008806:	1851      	adds	r1, r2, r1
 8008808:	6139      	str	r1, [r7, #16]
 800880a:	4649      	mov	r1, r9
 800880c:	414b      	adcs	r3, r1
 800880e:	617b      	str	r3, [r7, #20]
 8008810:	f04f 0200 	mov.w	r2, #0
 8008814:	f04f 0300 	mov.w	r3, #0
 8008818:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800881c:	4659      	mov	r1, fp
 800881e:	00cb      	lsls	r3, r1, #3
 8008820:	4651      	mov	r1, sl
 8008822:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008826:	4651      	mov	r1, sl
 8008828:	00ca      	lsls	r2, r1, #3
 800882a:	4610      	mov	r0, r2
 800882c:	4619      	mov	r1, r3
 800882e:	4603      	mov	r3, r0
 8008830:	4642      	mov	r2, r8
 8008832:	189b      	adds	r3, r3, r2
 8008834:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008838:	464b      	mov	r3, r9
 800883a:	460a      	mov	r2, r1
 800883c:	eb42 0303 	adc.w	r3, r2, r3
 8008840:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	2200      	movs	r2, #0
 800884c:	67bb      	str	r3, [r7, #120]	; 0x78
 800884e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008850:	f04f 0200 	mov.w	r2, #0
 8008854:	f04f 0300 	mov.w	r3, #0
 8008858:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800885c:	4649      	mov	r1, r9
 800885e:	008b      	lsls	r3, r1, #2
 8008860:	4641      	mov	r1, r8
 8008862:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008866:	4641      	mov	r1, r8
 8008868:	008a      	lsls	r2, r1, #2
 800886a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800886e:	f7f8 fa1b 	bl	8000ca8 <__aeabi_uldivmod>
 8008872:	4602      	mov	r2, r0
 8008874:	460b      	mov	r3, r1
 8008876:	4611      	mov	r1, r2
 8008878:	4b38      	ldr	r3, [pc, #224]	; (800895c <UART_SetConfig+0x4e4>)
 800887a:	fba3 2301 	umull	r2, r3, r3, r1
 800887e:	095b      	lsrs	r3, r3, #5
 8008880:	2264      	movs	r2, #100	; 0x64
 8008882:	fb02 f303 	mul.w	r3, r2, r3
 8008886:	1acb      	subs	r3, r1, r3
 8008888:	011b      	lsls	r3, r3, #4
 800888a:	3332      	adds	r3, #50	; 0x32
 800888c:	4a33      	ldr	r2, [pc, #204]	; (800895c <UART_SetConfig+0x4e4>)
 800888e:	fba2 2303 	umull	r2, r3, r2, r3
 8008892:	095b      	lsrs	r3, r3, #5
 8008894:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008898:	441c      	add	r4, r3
 800889a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800889e:	2200      	movs	r2, #0
 80088a0:	673b      	str	r3, [r7, #112]	; 0x70
 80088a2:	677a      	str	r2, [r7, #116]	; 0x74
 80088a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80088a8:	4642      	mov	r2, r8
 80088aa:	464b      	mov	r3, r9
 80088ac:	1891      	adds	r1, r2, r2
 80088ae:	60b9      	str	r1, [r7, #8]
 80088b0:	415b      	adcs	r3, r3
 80088b2:	60fb      	str	r3, [r7, #12]
 80088b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80088b8:	4641      	mov	r1, r8
 80088ba:	1851      	adds	r1, r2, r1
 80088bc:	6039      	str	r1, [r7, #0]
 80088be:	4649      	mov	r1, r9
 80088c0:	414b      	adcs	r3, r1
 80088c2:	607b      	str	r3, [r7, #4]
 80088c4:	f04f 0200 	mov.w	r2, #0
 80088c8:	f04f 0300 	mov.w	r3, #0
 80088cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80088d0:	4659      	mov	r1, fp
 80088d2:	00cb      	lsls	r3, r1, #3
 80088d4:	4651      	mov	r1, sl
 80088d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80088da:	4651      	mov	r1, sl
 80088dc:	00ca      	lsls	r2, r1, #3
 80088de:	4610      	mov	r0, r2
 80088e0:	4619      	mov	r1, r3
 80088e2:	4603      	mov	r3, r0
 80088e4:	4642      	mov	r2, r8
 80088e6:	189b      	adds	r3, r3, r2
 80088e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80088ea:	464b      	mov	r3, r9
 80088ec:	460a      	mov	r2, r1
 80088ee:	eb42 0303 	adc.w	r3, r2, r3
 80088f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80088f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	2200      	movs	r2, #0
 80088fc:	663b      	str	r3, [r7, #96]	; 0x60
 80088fe:	667a      	str	r2, [r7, #100]	; 0x64
 8008900:	f04f 0200 	mov.w	r2, #0
 8008904:	f04f 0300 	mov.w	r3, #0
 8008908:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800890c:	4649      	mov	r1, r9
 800890e:	008b      	lsls	r3, r1, #2
 8008910:	4641      	mov	r1, r8
 8008912:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008916:	4641      	mov	r1, r8
 8008918:	008a      	lsls	r2, r1, #2
 800891a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800891e:	f7f8 f9c3 	bl	8000ca8 <__aeabi_uldivmod>
 8008922:	4602      	mov	r2, r0
 8008924:	460b      	mov	r3, r1
 8008926:	4b0d      	ldr	r3, [pc, #52]	; (800895c <UART_SetConfig+0x4e4>)
 8008928:	fba3 1302 	umull	r1, r3, r3, r2
 800892c:	095b      	lsrs	r3, r3, #5
 800892e:	2164      	movs	r1, #100	; 0x64
 8008930:	fb01 f303 	mul.w	r3, r1, r3
 8008934:	1ad3      	subs	r3, r2, r3
 8008936:	011b      	lsls	r3, r3, #4
 8008938:	3332      	adds	r3, #50	; 0x32
 800893a:	4a08      	ldr	r2, [pc, #32]	; (800895c <UART_SetConfig+0x4e4>)
 800893c:	fba2 2303 	umull	r2, r3, r2, r3
 8008940:	095b      	lsrs	r3, r3, #5
 8008942:	f003 020f 	and.w	r2, r3, #15
 8008946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4422      	add	r2, r4
 800894e:	609a      	str	r2, [r3, #8]
}
 8008950:	bf00      	nop
 8008952:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008956:	46bd      	mov	sp, r7
 8008958:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800895c:	51eb851f 	.word	0x51eb851f

08008960 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008960:	b084      	sub	sp, #16
 8008962:	b580      	push	{r7, lr}
 8008964:	b084      	sub	sp, #16
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
 800896a:	f107 001c 	add.w	r0, r7, #28
 800896e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008972:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008976:	2b01      	cmp	r3, #1
 8008978:	d123      	bne.n	80089c2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800897e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	68db      	ldr	r3, [r3, #12]
 800898a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800898e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008992:	687a      	ldr	r2, [r7, #4]
 8008994:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	68db      	ldr	r3, [r3, #12]
 800899a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80089a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d105      	bne.n	80089b6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	68db      	ldr	r3, [r3, #12]
 80089ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 faa0 	bl	8008efc <USB_CoreReset>
 80089bc:	4603      	mov	r3, r0
 80089be:	73fb      	strb	r3, [r7, #15]
 80089c0:	e01b      	b.n	80089fa <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	68db      	ldr	r3, [r3, #12]
 80089c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 fa94 	bl	8008efc <USB_CoreReset>
 80089d4:	4603      	mov	r3, r0
 80089d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80089d8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d106      	bne.n	80089ee <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	639a      	str	r2, [r3, #56]	; 0x38
 80089ec:	e005      	b.n	80089fa <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80089fa:	7fbb      	ldrb	r3, [r7, #30]
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	d10b      	bne.n	8008a18 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	f043 0206 	orr.w	r2, r3, #6
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	f043 0220 	orr.w	r2, r3, #32
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3710      	adds	r7, #16
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a24:	b004      	add	sp, #16
 8008a26:	4770      	bx	lr

08008a28 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b083      	sub	sp, #12
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	f023 0201 	bic.w	r2, r3, #1
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008a3c:	2300      	movs	r3, #0
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	370c      	adds	r7, #12
 8008a42:	46bd      	mov	sp, r7
 8008a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a48:	4770      	bx	lr

08008a4a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b084      	sub	sp, #16
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
 8008a52:	460b      	mov	r3, r1
 8008a54:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008a56:	2300      	movs	r3, #0
 8008a58:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	68db      	ldr	r3, [r3, #12]
 8008a5e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008a66:	78fb      	ldrb	r3, [r7, #3]
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d115      	bne.n	8008a98 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	68db      	ldr	r3, [r3, #12]
 8008a70:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008a78:	200a      	movs	r0, #10
 8008a7a:	f7fa fed1 	bl	8003820 <HAL_Delay>
      ms += 10U;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	330a      	adds	r3, #10
 8008a82:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 fa2b 	bl	8008ee0 <USB_GetMode>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d01e      	beq.n	8008ace <USB_SetCurrentMode+0x84>
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2bc7      	cmp	r3, #199	; 0xc7
 8008a94:	d9f0      	bls.n	8008a78 <USB_SetCurrentMode+0x2e>
 8008a96:	e01a      	b.n	8008ace <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008a98:	78fb      	ldrb	r3, [r7, #3]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d115      	bne.n	8008aca <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	68db      	ldr	r3, [r3, #12]
 8008aa2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008aaa:	200a      	movs	r0, #10
 8008aac:	f7fa feb8 	bl	8003820 <HAL_Delay>
      ms += 10U;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	330a      	adds	r3, #10
 8008ab4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 fa12 	bl	8008ee0 <USB_GetMode>
 8008abc:	4603      	mov	r3, r0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d005      	beq.n	8008ace <USB_SetCurrentMode+0x84>
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2bc7      	cmp	r3, #199	; 0xc7
 8008ac6:	d9f0      	bls.n	8008aaa <USB_SetCurrentMode+0x60>
 8008ac8:	e001      	b.n	8008ace <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008aca:	2301      	movs	r3, #1
 8008acc:	e005      	b.n	8008ada <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2bc8      	cmp	r3, #200	; 0xc8
 8008ad2:	d101      	bne.n	8008ad8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	e000      	b.n	8008ada <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008ad8:	2300      	movs	r3, #0
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3710      	adds	r7, #16
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
	...

08008ae4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ae4:	b084      	sub	sp, #16
 8008ae6:	b580      	push	{r7, lr}
 8008ae8:	b086      	sub	sp, #24
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
 8008aee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008af2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008af6:	2300      	movs	r3, #0
 8008af8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008afe:	2300      	movs	r3, #0
 8008b00:	613b      	str	r3, [r7, #16]
 8008b02:	e009      	b.n	8008b18 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	3340      	adds	r3, #64	; 0x40
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	4413      	add	r3, r2
 8008b0e:	2200      	movs	r2, #0
 8008b10:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	3301      	adds	r3, #1
 8008b16:	613b      	str	r3, [r7, #16]
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	2b0e      	cmp	r3, #14
 8008b1c:	d9f2      	bls.n	8008b04 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008b1e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d11c      	bne.n	8008b60 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	68fa      	ldr	r2, [r7, #12]
 8008b30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b34:	f043 0302 	orr.w	r3, r3, #2
 8008b38:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b3e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b4a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b56:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	639a      	str	r2, [r3, #56]	; 0x38
 8008b5e:	e00b      	b.n	8008b78 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b64:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b70:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b7e:	461a      	mov	r2, r3
 8008b80:	2300      	movs	r3, #0
 8008b82:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008b84:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d10d      	bne.n	8008ba8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008b8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d104      	bne.n	8008b9e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008b94:	2100      	movs	r1, #0
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 f968 	bl	8008e6c <USB_SetDevSpeed>
 8008b9c:	e008      	b.n	8008bb0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008b9e:	2101      	movs	r1, #1
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 f963 	bl	8008e6c <USB_SetDevSpeed>
 8008ba6:	e003      	b.n	8008bb0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008ba8:	2103      	movs	r1, #3
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 f95e 	bl	8008e6c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008bb0:	2110      	movs	r1, #16
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 f8fa 	bl	8008dac <USB_FlushTxFifo>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d001      	beq.n	8008bc2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 f924 	bl	8008e10 <USB_FlushRxFifo>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d001      	beq.n	8008bd2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bd8:	461a      	mov	r2, r3
 8008bda:	2300      	movs	r3, #0
 8008bdc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008be4:	461a      	mov	r2, r3
 8008be6:	2300      	movs	r3, #0
 8008be8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	613b      	str	r3, [r7, #16]
 8008bfa:	e043      	b.n	8008c84 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	015a      	lsls	r2, r3, #5
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	4413      	add	r3, r2
 8008c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c12:	d118      	bne.n	8008c46 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d10a      	bne.n	8008c30 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	015a      	lsls	r2, r3, #5
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	4413      	add	r3, r2
 8008c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c26:	461a      	mov	r2, r3
 8008c28:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008c2c:	6013      	str	r3, [r2, #0]
 8008c2e:	e013      	b.n	8008c58 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	015a      	lsls	r2, r3, #5
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	4413      	add	r3, r2
 8008c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008c42:	6013      	str	r3, [r2, #0]
 8008c44:	e008      	b.n	8008c58 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	015a      	lsls	r2, r3, #5
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	4413      	add	r3, r2
 8008c4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c52:	461a      	mov	r2, r3
 8008c54:	2300      	movs	r3, #0
 8008c56:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	015a      	lsls	r2, r3, #5
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	4413      	add	r3, r2
 8008c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c64:	461a      	mov	r2, r3
 8008c66:	2300      	movs	r3, #0
 8008c68:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	015a      	lsls	r2, r3, #5
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	4413      	add	r3, r2
 8008c72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c76:	461a      	mov	r2, r3
 8008c78:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008c7c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	3301      	adds	r3, #1
 8008c82:	613b      	str	r3, [r7, #16]
 8008c84:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008c88:	461a      	mov	r2, r3
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d3b5      	bcc.n	8008bfc <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c90:	2300      	movs	r3, #0
 8008c92:	613b      	str	r3, [r7, #16]
 8008c94:	e043      	b.n	8008d1e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	015a      	lsls	r2, r3, #5
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	4413      	add	r3, r2
 8008c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ca8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008cac:	d118      	bne.n	8008ce0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d10a      	bne.n	8008cca <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	015a      	lsls	r2, r3, #5
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	4413      	add	r3, r2
 8008cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008cc6:	6013      	str	r3, [r2, #0]
 8008cc8:	e013      	b.n	8008cf2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	015a      	lsls	r2, r3, #5
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	4413      	add	r3, r2
 8008cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cd6:	461a      	mov	r2, r3
 8008cd8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008cdc:	6013      	str	r3, [r2, #0]
 8008cde:	e008      	b.n	8008cf2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	015a      	lsls	r2, r3, #5
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	4413      	add	r3, r2
 8008ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cec:	461a      	mov	r2, r3
 8008cee:	2300      	movs	r3, #0
 8008cf0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	015a      	lsls	r2, r3, #5
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	4413      	add	r3, r2
 8008cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cfe:	461a      	mov	r2, r3
 8008d00:	2300      	movs	r3, #0
 8008d02:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	015a      	lsls	r2, r3, #5
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	4413      	add	r3, r2
 8008d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d10:	461a      	mov	r2, r3
 8008d12:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008d16:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	613b      	str	r3, [r7, #16]
 8008d1e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008d22:	461a      	mov	r2, r3
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d3b5      	bcc.n	8008c96 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d30:	691b      	ldr	r3, [r3, #16]
 8008d32:	68fa      	ldr	r2, [r7, #12]
 8008d34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d3c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2200      	movs	r2, #0
 8008d42:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008d4a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008d4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d105      	bne.n	8008d60 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	699b      	ldr	r3, [r3, #24]
 8008d58:	f043 0210 	orr.w	r2, r3, #16
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	699a      	ldr	r2, [r3, #24]
 8008d64:	4b10      	ldr	r3, [pc, #64]	; (8008da8 <USB_DevInit+0x2c4>)
 8008d66:	4313      	orrs	r3, r2
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008d6c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d005      	beq.n	8008d80 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	699b      	ldr	r3, [r3, #24]
 8008d78:	f043 0208 	orr.w	r2, r3, #8
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008d80:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d107      	bne.n	8008d98 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	699b      	ldr	r3, [r3, #24]
 8008d8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d90:	f043 0304 	orr.w	r3, r3, #4
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008d98:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3718      	adds	r7, #24
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008da4:	b004      	add	sp, #16
 8008da6:	4770      	bx	lr
 8008da8:	803c3800 	.word	0x803c3800

08008dac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b085      	sub	sp, #20
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008db6:	2300      	movs	r3, #0
 8008db8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008dc6:	d901      	bls.n	8008dcc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008dc8:	2303      	movs	r3, #3
 8008dca:	e01b      	b.n	8008e04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	691b      	ldr	r3, [r3, #16]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	daf2      	bge.n	8008dba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	019b      	lsls	r3, r3, #6
 8008ddc:	f043 0220 	orr.w	r2, r3, #32
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	3301      	adds	r3, #1
 8008de8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008df0:	d901      	bls.n	8008df6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008df2:	2303      	movs	r3, #3
 8008df4:	e006      	b.n	8008e04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	691b      	ldr	r3, [r3, #16]
 8008dfa:	f003 0320 	and.w	r3, r3, #32
 8008dfe:	2b20      	cmp	r3, #32
 8008e00:	d0f0      	beq.n	8008de4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008e02:	2300      	movs	r3, #0
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3714      	adds	r7, #20
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr

08008e10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b085      	sub	sp, #20
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	3301      	adds	r3, #1
 8008e20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008e28:	d901      	bls.n	8008e2e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008e2a:	2303      	movs	r3, #3
 8008e2c:	e018      	b.n	8008e60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	691b      	ldr	r3, [r3, #16]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	daf2      	bge.n	8008e1c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008e36:	2300      	movs	r3, #0
 8008e38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2210      	movs	r2, #16
 8008e3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	3301      	adds	r3, #1
 8008e44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008e4c:	d901      	bls.n	8008e52 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008e4e:	2303      	movs	r3, #3
 8008e50:	e006      	b.n	8008e60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	691b      	ldr	r3, [r3, #16]
 8008e56:	f003 0310 	and.w	r3, r3, #16
 8008e5a:	2b10      	cmp	r3, #16
 8008e5c:	d0f0      	beq.n	8008e40 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008e5e:	2300      	movs	r3, #0
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3714      	adds	r7, #20
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr

08008e6c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b085      	sub	sp, #20
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	460b      	mov	r3, r1
 8008e76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	78fb      	ldrb	r3, [r7, #3]
 8008e86:	68f9      	ldr	r1, [r7, #12]
 8008e88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008e90:	2300      	movs	r3, #0
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3714      	adds	r7, #20
 8008e96:	46bd      	mov	sp, r7
 8008e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9c:	4770      	bx	lr

08008e9e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008e9e:	b480      	push	{r7}
 8008ea0:	b085      	sub	sp, #20
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	68fa      	ldr	r2, [r7, #12]
 8008eb4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008eb8:	f023 0303 	bic.w	r3, r3, #3
 8008ebc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ec4:	685b      	ldr	r3, [r3, #4]
 8008ec6:	68fa      	ldr	r2, [r7, #12]
 8008ec8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ecc:	f043 0302 	orr.w	r3, r3, #2
 8008ed0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008ed2:	2300      	movs	r3, #0
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3714      	adds	r7, #20
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr

08008ee0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b083      	sub	sp, #12
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	695b      	ldr	r3, [r3, #20]
 8008eec:	f003 0301 	and.w	r3, r3, #1
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	370c      	adds	r7, #12
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr

08008efc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b085      	sub	sp, #20
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f04:	2300      	movs	r3, #0
 8008f06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008f14:	d901      	bls.n	8008f1a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008f16:	2303      	movs	r3, #3
 8008f18:	e01b      	b.n	8008f52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	691b      	ldr	r3, [r3, #16]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	daf2      	bge.n	8008f08 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008f22:	2300      	movs	r3, #0
 8008f24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	691b      	ldr	r3, [r3, #16]
 8008f2a:	f043 0201 	orr.w	r2, r3, #1
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	3301      	adds	r3, #1
 8008f36:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008f3e:	d901      	bls.n	8008f44 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008f40:	2303      	movs	r3, #3
 8008f42:	e006      	b.n	8008f52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	691b      	ldr	r3, [r3, #16]
 8008f48:	f003 0301 	and.w	r3, r3, #1
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d0f0      	beq.n	8008f32 <USB_CoreReset+0x36>

  return HAL_OK;
 8008f50:	2300      	movs	r3, #0
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3714      	adds	r7, #20
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr

08008f5e <__cvt>:
 8008f5e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f62:	ec55 4b10 	vmov	r4, r5, d0
 8008f66:	2d00      	cmp	r5, #0
 8008f68:	460e      	mov	r6, r1
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	462b      	mov	r3, r5
 8008f6e:	bfbb      	ittet	lt
 8008f70:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008f74:	461d      	movlt	r5, r3
 8008f76:	2300      	movge	r3, #0
 8008f78:	232d      	movlt	r3, #45	; 0x2d
 8008f7a:	700b      	strb	r3, [r1, #0]
 8008f7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f7e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008f82:	4691      	mov	r9, r2
 8008f84:	f023 0820 	bic.w	r8, r3, #32
 8008f88:	bfbc      	itt	lt
 8008f8a:	4622      	movlt	r2, r4
 8008f8c:	4614      	movlt	r4, r2
 8008f8e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008f92:	d005      	beq.n	8008fa0 <__cvt+0x42>
 8008f94:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008f98:	d100      	bne.n	8008f9c <__cvt+0x3e>
 8008f9a:	3601      	adds	r6, #1
 8008f9c:	2102      	movs	r1, #2
 8008f9e:	e000      	b.n	8008fa2 <__cvt+0x44>
 8008fa0:	2103      	movs	r1, #3
 8008fa2:	ab03      	add	r3, sp, #12
 8008fa4:	9301      	str	r3, [sp, #4]
 8008fa6:	ab02      	add	r3, sp, #8
 8008fa8:	9300      	str	r3, [sp, #0]
 8008faa:	ec45 4b10 	vmov	d0, r4, r5
 8008fae:	4653      	mov	r3, sl
 8008fb0:	4632      	mov	r2, r6
 8008fb2:	f000 fe7d 	bl	8009cb0 <_dtoa_r>
 8008fb6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008fba:	4607      	mov	r7, r0
 8008fbc:	d102      	bne.n	8008fc4 <__cvt+0x66>
 8008fbe:	f019 0f01 	tst.w	r9, #1
 8008fc2:	d022      	beq.n	800900a <__cvt+0xac>
 8008fc4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008fc8:	eb07 0906 	add.w	r9, r7, r6
 8008fcc:	d110      	bne.n	8008ff0 <__cvt+0x92>
 8008fce:	783b      	ldrb	r3, [r7, #0]
 8008fd0:	2b30      	cmp	r3, #48	; 0x30
 8008fd2:	d10a      	bne.n	8008fea <__cvt+0x8c>
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	4620      	mov	r0, r4
 8008fda:	4629      	mov	r1, r5
 8008fdc:	f7f7 fd84 	bl	8000ae8 <__aeabi_dcmpeq>
 8008fe0:	b918      	cbnz	r0, 8008fea <__cvt+0x8c>
 8008fe2:	f1c6 0601 	rsb	r6, r6, #1
 8008fe6:	f8ca 6000 	str.w	r6, [sl]
 8008fea:	f8da 3000 	ldr.w	r3, [sl]
 8008fee:	4499      	add	r9, r3
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	4620      	mov	r0, r4
 8008ff6:	4629      	mov	r1, r5
 8008ff8:	f7f7 fd76 	bl	8000ae8 <__aeabi_dcmpeq>
 8008ffc:	b108      	cbz	r0, 8009002 <__cvt+0xa4>
 8008ffe:	f8cd 900c 	str.w	r9, [sp, #12]
 8009002:	2230      	movs	r2, #48	; 0x30
 8009004:	9b03      	ldr	r3, [sp, #12]
 8009006:	454b      	cmp	r3, r9
 8009008:	d307      	bcc.n	800901a <__cvt+0xbc>
 800900a:	9b03      	ldr	r3, [sp, #12]
 800900c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800900e:	1bdb      	subs	r3, r3, r7
 8009010:	4638      	mov	r0, r7
 8009012:	6013      	str	r3, [r2, #0]
 8009014:	b004      	add	sp, #16
 8009016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800901a:	1c59      	adds	r1, r3, #1
 800901c:	9103      	str	r1, [sp, #12]
 800901e:	701a      	strb	r2, [r3, #0]
 8009020:	e7f0      	b.n	8009004 <__cvt+0xa6>

08009022 <__exponent>:
 8009022:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009024:	4603      	mov	r3, r0
 8009026:	2900      	cmp	r1, #0
 8009028:	bfb8      	it	lt
 800902a:	4249      	neglt	r1, r1
 800902c:	f803 2b02 	strb.w	r2, [r3], #2
 8009030:	bfb4      	ite	lt
 8009032:	222d      	movlt	r2, #45	; 0x2d
 8009034:	222b      	movge	r2, #43	; 0x2b
 8009036:	2909      	cmp	r1, #9
 8009038:	7042      	strb	r2, [r0, #1]
 800903a:	dd2a      	ble.n	8009092 <__exponent+0x70>
 800903c:	f10d 0207 	add.w	r2, sp, #7
 8009040:	4617      	mov	r7, r2
 8009042:	260a      	movs	r6, #10
 8009044:	4694      	mov	ip, r2
 8009046:	fb91 f5f6 	sdiv	r5, r1, r6
 800904a:	fb06 1415 	mls	r4, r6, r5, r1
 800904e:	3430      	adds	r4, #48	; 0x30
 8009050:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009054:	460c      	mov	r4, r1
 8009056:	2c63      	cmp	r4, #99	; 0x63
 8009058:	f102 32ff 	add.w	r2, r2, #4294967295
 800905c:	4629      	mov	r1, r5
 800905e:	dcf1      	bgt.n	8009044 <__exponent+0x22>
 8009060:	3130      	adds	r1, #48	; 0x30
 8009062:	f1ac 0402 	sub.w	r4, ip, #2
 8009066:	f802 1c01 	strb.w	r1, [r2, #-1]
 800906a:	1c41      	adds	r1, r0, #1
 800906c:	4622      	mov	r2, r4
 800906e:	42ba      	cmp	r2, r7
 8009070:	d30a      	bcc.n	8009088 <__exponent+0x66>
 8009072:	f10d 0209 	add.w	r2, sp, #9
 8009076:	eba2 020c 	sub.w	r2, r2, ip
 800907a:	42bc      	cmp	r4, r7
 800907c:	bf88      	it	hi
 800907e:	2200      	movhi	r2, #0
 8009080:	4413      	add	r3, r2
 8009082:	1a18      	subs	r0, r3, r0
 8009084:	b003      	add	sp, #12
 8009086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009088:	f812 5b01 	ldrb.w	r5, [r2], #1
 800908c:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009090:	e7ed      	b.n	800906e <__exponent+0x4c>
 8009092:	2330      	movs	r3, #48	; 0x30
 8009094:	3130      	adds	r1, #48	; 0x30
 8009096:	7083      	strb	r3, [r0, #2]
 8009098:	70c1      	strb	r1, [r0, #3]
 800909a:	1d03      	adds	r3, r0, #4
 800909c:	e7f1      	b.n	8009082 <__exponent+0x60>
	...

080090a0 <_printf_float>:
 80090a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090a4:	ed2d 8b02 	vpush	{d8}
 80090a8:	b08d      	sub	sp, #52	; 0x34
 80090aa:	460c      	mov	r4, r1
 80090ac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80090b0:	4616      	mov	r6, r2
 80090b2:	461f      	mov	r7, r3
 80090b4:	4605      	mov	r5, r0
 80090b6:	f000 fcf9 	bl	8009aac <_localeconv_r>
 80090ba:	f8d0 a000 	ldr.w	sl, [r0]
 80090be:	4650      	mov	r0, sl
 80090c0:	f7f7 f8e6 	bl	8000290 <strlen>
 80090c4:	2300      	movs	r3, #0
 80090c6:	930a      	str	r3, [sp, #40]	; 0x28
 80090c8:	6823      	ldr	r3, [r4, #0]
 80090ca:	9305      	str	r3, [sp, #20]
 80090cc:	f8d8 3000 	ldr.w	r3, [r8]
 80090d0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80090d4:	3307      	adds	r3, #7
 80090d6:	f023 0307 	bic.w	r3, r3, #7
 80090da:	f103 0208 	add.w	r2, r3, #8
 80090de:	f8c8 2000 	str.w	r2, [r8]
 80090e2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80090e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80090ea:	9307      	str	r3, [sp, #28]
 80090ec:	f8cd 8018 	str.w	r8, [sp, #24]
 80090f0:	ee08 0a10 	vmov	s16, r0
 80090f4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80090f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80090fc:	4b9e      	ldr	r3, [pc, #632]	; (8009378 <_printf_float+0x2d8>)
 80090fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009102:	f7f7 fd23 	bl	8000b4c <__aeabi_dcmpun>
 8009106:	bb88      	cbnz	r0, 800916c <_printf_float+0xcc>
 8009108:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800910c:	4b9a      	ldr	r3, [pc, #616]	; (8009378 <_printf_float+0x2d8>)
 800910e:	f04f 32ff 	mov.w	r2, #4294967295
 8009112:	f7f7 fcfd 	bl	8000b10 <__aeabi_dcmple>
 8009116:	bb48      	cbnz	r0, 800916c <_printf_float+0xcc>
 8009118:	2200      	movs	r2, #0
 800911a:	2300      	movs	r3, #0
 800911c:	4640      	mov	r0, r8
 800911e:	4649      	mov	r1, r9
 8009120:	f7f7 fcec 	bl	8000afc <__aeabi_dcmplt>
 8009124:	b110      	cbz	r0, 800912c <_printf_float+0x8c>
 8009126:	232d      	movs	r3, #45	; 0x2d
 8009128:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800912c:	4a93      	ldr	r2, [pc, #588]	; (800937c <_printf_float+0x2dc>)
 800912e:	4b94      	ldr	r3, [pc, #592]	; (8009380 <_printf_float+0x2e0>)
 8009130:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009134:	bf94      	ite	ls
 8009136:	4690      	movls	r8, r2
 8009138:	4698      	movhi	r8, r3
 800913a:	2303      	movs	r3, #3
 800913c:	6123      	str	r3, [r4, #16]
 800913e:	9b05      	ldr	r3, [sp, #20]
 8009140:	f023 0304 	bic.w	r3, r3, #4
 8009144:	6023      	str	r3, [r4, #0]
 8009146:	f04f 0900 	mov.w	r9, #0
 800914a:	9700      	str	r7, [sp, #0]
 800914c:	4633      	mov	r3, r6
 800914e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009150:	4621      	mov	r1, r4
 8009152:	4628      	mov	r0, r5
 8009154:	f000 f9da 	bl	800950c <_printf_common>
 8009158:	3001      	adds	r0, #1
 800915a:	f040 8090 	bne.w	800927e <_printf_float+0x1de>
 800915e:	f04f 30ff 	mov.w	r0, #4294967295
 8009162:	b00d      	add	sp, #52	; 0x34
 8009164:	ecbd 8b02 	vpop	{d8}
 8009168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800916c:	4642      	mov	r2, r8
 800916e:	464b      	mov	r3, r9
 8009170:	4640      	mov	r0, r8
 8009172:	4649      	mov	r1, r9
 8009174:	f7f7 fcea 	bl	8000b4c <__aeabi_dcmpun>
 8009178:	b140      	cbz	r0, 800918c <_printf_float+0xec>
 800917a:	464b      	mov	r3, r9
 800917c:	2b00      	cmp	r3, #0
 800917e:	bfbc      	itt	lt
 8009180:	232d      	movlt	r3, #45	; 0x2d
 8009182:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009186:	4a7f      	ldr	r2, [pc, #508]	; (8009384 <_printf_float+0x2e4>)
 8009188:	4b7f      	ldr	r3, [pc, #508]	; (8009388 <_printf_float+0x2e8>)
 800918a:	e7d1      	b.n	8009130 <_printf_float+0x90>
 800918c:	6863      	ldr	r3, [r4, #4]
 800918e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009192:	9206      	str	r2, [sp, #24]
 8009194:	1c5a      	adds	r2, r3, #1
 8009196:	d13f      	bne.n	8009218 <_printf_float+0x178>
 8009198:	2306      	movs	r3, #6
 800919a:	6063      	str	r3, [r4, #4]
 800919c:	9b05      	ldr	r3, [sp, #20]
 800919e:	6861      	ldr	r1, [r4, #4]
 80091a0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80091a4:	2300      	movs	r3, #0
 80091a6:	9303      	str	r3, [sp, #12]
 80091a8:	ab0a      	add	r3, sp, #40	; 0x28
 80091aa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80091ae:	ab09      	add	r3, sp, #36	; 0x24
 80091b0:	ec49 8b10 	vmov	d0, r8, r9
 80091b4:	9300      	str	r3, [sp, #0]
 80091b6:	6022      	str	r2, [r4, #0]
 80091b8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80091bc:	4628      	mov	r0, r5
 80091be:	f7ff fece 	bl	8008f5e <__cvt>
 80091c2:	9b06      	ldr	r3, [sp, #24]
 80091c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80091c6:	2b47      	cmp	r3, #71	; 0x47
 80091c8:	4680      	mov	r8, r0
 80091ca:	d108      	bne.n	80091de <_printf_float+0x13e>
 80091cc:	1cc8      	adds	r0, r1, #3
 80091ce:	db02      	blt.n	80091d6 <_printf_float+0x136>
 80091d0:	6863      	ldr	r3, [r4, #4]
 80091d2:	4299      	cmp	r1, r3
 80091d4:	dd41      	ble.n	800925a <_printf_float+0x1ba>
 80091d6:	f1ab 0302 	sub.w	r3, fp, #2
 80091da:	fa5f fb83 	uxtb.w	fp, r3
 80091de:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80091e2:	d820      	bhi.n	8009226 <_printf_float+0x186>
 80091e4:	3901      	subs	r1, #1
 80091e6:	465a      	mov	r2, fp
 80091e8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80091ec:	9109      	str	r1, [sp, #36]	; 0x24
 80091ee:	f7ff ff18 	bl	8009022 <__exponent>
 80091f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091f4:	1813      	adds	r3, r2, r0
 80091f6:	2a01      	cmp	r2, #1
 80091f8:	4681      	mov	r9, r0
 80091fa:	6123      	str	r3, [r4, #16]
 80091fc:	dc02      	bgt.n	8009204 <_printf_float+0x164>
 80091fe:	6822      	ldr	r2, [r4, #0]
 8009200:	07d2      	lsls	r2, r2, #31
 8009202:	d501      	bpl.n	8009208 <_printf_float+0x168>
 8009204:	3301      	adds	r3, #1
 8009206:	6123      	str	r3, [r4, #16]
 8009208:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800920c:	2b00      	cmp	r3, #0
 800920e:	d09c      	beq.n	800914a <_printf_float+0xaa>
 8009210:	232d      	movs	r3, #45	; 0x2d
 8009212:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009216:	e798      	b.n	800914a <_printf_float+0xaa>
 8009218:	9a06      	ldr	r2, [sp, #24]
 800921a:	2a47      	cmp	r2, #71	; 0x47
 800921c:	d1be      	bne.n	800919c <_printf_float+0xfc>
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1bc      	bne.n	800919c <_printf_float+0xfc>
 8009222:	2301      	movs	r3, #1
 8009224:	e7b9      	b.n	800919a <_printf_float+0xfa>
 8009226:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800922a:	d118      	bne.n	800925e <_printf_float+0x1be>
 800922c:	2900      	cmp	r1, #0
 800922e:	6863      	ldr	r3, [r4, #4]
 8009230:	dd0b      	ble.n	800924a <_printf_float+0x1aa>
 8009232:	6121      	str	r1, [r4, #16]
 8009234:	b913      	cbnz	r3, 800923c <_printf_float+0x19c>
 8009236:	6822      	ldr	r2, [r4, #0]
 8009238:	07d0      	lsls	r0, r2, #31
 800923a:	d502      	bpl.n	8009242 <_printf_float+0x1a2>
 800923c:	3301      	adds	r3, #1
 800923e:	440b      	add	r3, r1
 8009240:	6123      	str	r3, [r4, #16]
 8009242:	65a1      	str	r1, [r4, #88]	; 0x58
 8009244:	f04f 0900 	mov.w	r9, #0
 8009248:	e7de      	b.n	8009208 <_printf_float+0x168>
 800924a:	b913      	cbnz	r3, 8009252 <_printf_float+0x1b2>
 800924c:	6822      	ldr	r2, [r4, #0]
 800924e:	07d2      	lsls	r2, r2, #31
 8009250:	d501      	bpl.n	8009256 <_printf_float+0x1b6>
 8009252:	3302      	adds	r3, #2
 8009254:	e7f4      	b.n	8009240 <_printf_float+0x1a0>
 8009256:	2301      	movs	r3, #1
 8009258:	e7f2      	b.n	8009240 <_printf_float+0x1a0>
 800925a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800925e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009260:	4299      	cmp	r1, r3
 8009262:	db05      	blt.n	8009270 <_printf_float+0x1d0>
 8009264:	6823      	ldr	r3, [r4, #0]
 8009266:	6121      	str	r1, [r4, #16]
 8009268:	07d8      	lsls	r0, r3, #31
 800926a:	d5ea      	bpl.n	8009242 <_printf_float+0x1a2>
 800926c:	1c4b      	adds	r3, r1, #1
 800926e:	e7e7      	b.n	8009240 <_printf_float+0x1a0>
 8009270:	2900      	cmp	r1, #0
 8009272:	bfd4      	ite	le
 8009274:	f1c1 0202 	rsble	r2, r1, #2
 8009278:	2201      	movgt	r2, #1
 800927a:	4413      	add	r3, r2
 800927c:	e7e0      	b.n	8009240 <_printf_float+0x1a0>
 800927e:	6823      	ldr	r3, [r4, #0]
 8009280:	055a      	lsls	r2, r3, #21
 8009282:	d407      	bmi.n	8009294 <_printf_float+0x1f4>
 8009284:	6923      	ldr	r3, [r4, #16]
 8009286:	4642      	mov	r2, r8
 8009288:	4631      	mov	r1, r6
 800928a:	4628      	mov	r0, r5
 800928c:	47b8      	blx	r7
 800928e:	3001      	adds	r0, #1
 8009290:	d12c      	bne.n	80092ec <_printf_float+0x24c>
 8009292:	e764      	b.n	800915e <_printf_float+0xbe>
 8009294:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009298:	f240 80e0 	bls.w	800945c <_printf_float+0x3bc>
 800929c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80092a0:	2200      	movs	r2, #0
 80092a2:	2300      	movs	r3, #0
 80092a4:	f7f7 fc20 	bl	8000ae8 <__aeabi_dcmpeq>
 80092a8:	2800      	cmp	r0, #0
 80092aa:	d034      	beq.n	8009316 <_printf_float+0x276>
 80092ac:	4a37      	ldr	r2, [pc, #220]	; (800938c <_printf_float+0x2ec>)
 80092ae:	2301      	movs	r3, #1
 80092b0:	4631      	mov	r1, r6
 80092b2:	4628      	mov	r0, r5
 80092b4:	47b8      	blx	r7
 80092b6:	3001      	adds	r0, #1
 80092b8:	f43f af51 	beq.w	800915e <_printf_float+0xbe>
 80092bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80092c0:	429a      	cmp	r2, r3
 80092c2:	db02      	blt.n	80092ca <_printf_float+0x22a>
 80092c4:	6823      	ldr	r3, [r4, #0]
 80092c6:	07d8      	lsls	r0, r3, #31
 80092c8:	d510      	bpl.n	80092ec <_printf_float+0x24c>
 80092ca:	ee18 3a10 	vmov	r3, s16
 80092ce:	4652      	mov	r2, sl
 80092d0:	4631      	mov	r1, r6
 80092d2:	4628      	mov	r0, r5
 80092d4:	47b8      	blx	r7
 80092d6:	3001      	adds	r0, #1
 80092d8:	f43f af41 	beq.w	800915e <_printf_float+0xbe>
 80092dc:	f04f 0800 	mov.w	r8, #0
 80092e0:	f104 091a 	add.w	r9, r4, #26
 80092e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092e6:	3b01      	subs	r3, #1
 80092e8:	4543      	cmp	r3, r8
 80092ea:	dc09      	bgt.n	8009300 <_printf_float+0x260>
 80092ec:	6823      	ldr	r3, [r4, #0]
 80092ee:	079b      	lsls	r3, r3, #30
 80092f0:	f100 8107 	bmi.w	8009502 <_printf_float+0x462>
 80092f4:	68e0      	ldr	r0, [r4, #12]
 80092f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092f8:	4298      	cmp	r0, r3
 80092fa:	bfb8      	it	lt
 80092fc:	4618      	movlt	r0, r3
 80092fe:	e730      	b.n	8009162 <_printf_float+0xc2>
 8009300:	2301      	movs	r3, #1
 8009302:	464a      	mov	r2, r9
 8009304:	4631      	mov	r1, r6
 8009306:	4628      	mov	r0, r5
 8009308:	47b8      	blx	r7
 800930a:	3001      	adds	r0, #1
 800930c:	f43f af27 	beq.w	800915e <_printf_float+0xbe>
 8009310:	f108 0801 	add.w	r8, r8, #1
 8009314:	e7e6      	b.n	80092e4 <_printf_float+0x244>
 8009316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009318:	2b00      	cmp	r3, #0
 800931a:	dc39      	bgt.n	8009390 <_printf_float+0x2f0>
 800931c:	4a1b      	ldr	r2, [pc, #108]	; (800938c <_printf_float+0x2ec>)
 800931e:	2301      	movs	r3, #1
 8009320:	4631      	mov	r1, r6
 8009322:	4628      	mov	r0, r5
 8009324:	47b8      	blx	r7
 8009326:	3001      	adds	r0, #1
 8009328:	f43f af19 	beq.w	800915e <_printf_float+0xbe>
 800932c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009330:	4313      	orrs	r3, r2
 8009332:	d102      	bne.n	800933a <_printf_float+0x29a>
 8009334:	6823      	ldr	r3, [r4, #0]
 8009336:	07d9      	lsls	r1, r3, #31
 8009338:	d5d8      	bpl.n	80092ec <_printf_float+0x24c>
 800933a:	ee18 3a10 	vmov	r3, s16
 800933e:	4652      	mov	r2, sl
 8009340:	4631      	mov	r1, r6
 8009342:	4628      	mov	r0, r5
 8009344:	47b8      	blx	r7
 8009346:	3001      	adds	r0, #1
 8009348:	f43f af09 	beq.w	800915e <_printf_float+0xbe>
 800934c:	f04f 0900 	mov.w	r9, #0
 8009350:	f104 0a1a 	add.w	sl, r4, #26
 8009354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009356:	425b      	negs	r3, r3
 8009358:	454b      	cmp	r3, r9
 800935a:	dc01      	bgt.n	8009360 <_printf_float+0x2c0>
 800935c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800935e:	e792      	b.n	8009286 <_printf_float+0x1e6>
 8009360:	2301      	movs	r3, #1
 8009362:	4652      	mov	r2, sl
 8009364:	4631      	mov	r1, r6
 8009366:	4628      	mov	r0, r5
 8009368:	47b8      	blx	r7
 800936a:	3001      	adds	r0, #1
 800936c:	f43f aef7 	beq.w	800915e <_printf_float+0xbe>
 8009370:	f109 0901 	add.w	r9, r9, #1
 8009374:	e7ee      	b.n	8009354 <_printf_float+0x2b4>
 8009376:	bf00      	nop
 8009378:	7fefffff 	.word	0x7fefffff
 800937c:	0800bcf0 	.word	0x0800bcf0
 8009380:	0800bcf4 	.word	0x0800bcf4
 8009384:	0800bcf8 	.word	0x0800bcf8
 8009388:	0800bcfc 	.word	0x0800bcfc
 800938c:	0800bd00 	.word	0x0800bd00
 8009390:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009392:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009394:	429a      	cmp	r2, r3
 8009396:	bfa8      	it	ge
 8009398:	461a      	movge	r2, r3
 800939a:	2a00      	cmp	r2, #0
 800939c:	4691      	mov	r9, r2
 800939e:	dc37      	bgt.n	8009410 <_printf_float+0x370>
 80093a0:	f04f 0b00 	mov.w	fp, #0
 80093a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80093a8:	f104 021a 	add.w	r2, r4, #26
 80093ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80093ae:	9305      	str	r3, [sp, #20]
 80093b0:	eba3 0309 	sub.w	r3, r3, r9
 80093b4:	455b      	cmp	r3, fp
 80093b6:	dc33      	bgt.n	8009420 <_printf_float+0x380>
 80093b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093bc:	429a      	cmp	r2, r3
 80093be:	db3b      	blt.n	8009438 <_printf_float+0x398>
 80093c0:	6823      	ldr	r3, [r4, #0]
 80093c2:	07da      	lsls	r2, r3, #31
 80093c4:	d438      	bmi.n	8009438 <_printf_float+0x398>
 80093c6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80093ca:	eba2 0903 	sub.w	r9, r2, r3
 80093ce:	9b05      	ldr	r3, [sp, #20]
 80093d0:	1ad2      	subs	r2, r2, r3
 80093d2:	4591      	cmp	r9, r2
 80093d4:	bfa8      	it	ge
 80093d6:	4691      	movge	r9, r2
 80093d8:	f1b9 0f00 	cmp.w	r9, #0
 80093dc:	dc35      	bgt.n	800944a <_printf_float+0x3aa>
 80093de:	f04f 0800 	mov.w	r8, #0
 80093e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80093e6:	f104 0a1a 	add.w	sl, r4, #26
 80093ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093ee:	1a9b      	subs	r3, r3, r2
 80093f0:	eba3 0309 	sub.w	r3, r3, r9
 80093f4:	4543      	cmp	r3, r8
 80093f6:	f77f af79 	ble.w	80092ec <_printf_float+0x24c>
 80093fa:	2301      	movs	r3, #1
 80093fc:	4652      	mov	r2, sl
 80093fe:	4631      	mov	r1, r6
 8009400:	4628      	mov	r0, r5
 8009402:	47b8      	blx	r7
 8009404:	3001      	adds	r0, #1
 8009406:	f43f aeaa 	beq.w	800915e <_printf_float+0xbe>
 800940a:	f108 0801 	add.w	r8, r8, #1
 800940e:	e7ec      	b.n	80093ea <_printf_float+0x34a>
 8009410:	4613      	mov	r3, r2
 8009412:	4631      	mov	r1, r6
 8009414:	4642      	mov	r2, r8
 8009416:	4628      	mov	r0, r5
 8009418:	47b8      	blx	r7
 800941a:	3001      	adds	r0, #1
 800941c:	d1c0      	bne.n	80093a0 <_printf_float+0x300>
 800941e:	e69e      	b.n	800915e <_printf_float+0xbe>
 8009420:	2301      	movs	r3, #1
 8009422:	4631      	mov	r1, r6
 8009424:	4628      	mov	r0, r5
 8009426:	9205      	str	r2, [sp, #20]
 8009428:	47b8      	blx	r7
 800942a:	3001      	adds	r0, #1
 800942c:	f43f ae97 	beq.w	800915e <_printf_float+0xbe>
 8009430:	9a05      	ldr	r2, [sp, #20]
 8009432:	f10b 0b01 	add.w	fp, fp, #1
 8009436:	e7b9      	b.n	80093ac <_printf_float+0x30c>
 8009438:	ee18 3a10 	vmov	r3, s16
 800943c:	4652      	mov	r2, sl
 800943e:	4631      	mov	r1, r6
 8009440:	4628      	mov	r0, r5
 8009442:	47b8      	blx	r7
 8009444:	3001      	adds	r0, #1
 8009446:	d1be      	bne.n	80093c6 <_printf_float+0x326>
 8009448:	e689      	b.n	800915e <_printf_float+0xbe>
 800944a:	9a05      	ldr	r2, [sp, #20]
 800944c:	464b      	mov	r3, r9
 800944e:	4442      	add	r2, r8
 8009450:	4631      	mov	r1, r6
 8009452:	4628      	mov	r0, r5
 8009454:	47b8      	blx	r7
 8009456:	3001      	adds	r0, #1
 8009458:	d1c1      	bne.n	80093de <_printf_float+0x33e>
 800945a:	e680      	b.n	800915e <_printf_float+0xbe>
 800945c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800945e:	2a01      	cmp	r2, #1
 8009460:	dc01      	bgt.n	8009466 <_printf_float+0x3c6>
 8009462:	07db      	lsls	r3, r3, #31
 8009464:	d53a      	bpl.n	80094dc <_printf_float+0x43c>
 8009466:	2301      	movs	r3, #1
 8009468:	4642      	mov	r2, r8
 800946a:	4631      	mov	r1, r6
 800946c:	4628      	mov	r0, r5
 800946e:	47b8      	blx	r7
 8009470:	3001      	adds	r0, #1
 8009472:	f43f ae74 	beq.w	800915e <_printf_float+0xbe>
 8009476:	ee18 3a10 	vmov	r3, s16
 800947a:	4652      	mov	r2, sl
 800947c:	4631      	mov	r1, r6
 800947e:	4628      	mov	r0, r5
 8009480:	47b8      	blx	r7
 8009482:	3001      	adds	r0, #1
 8009484:	f43f ae6b 	beq.w	800915e <_printf_float+0xbe>
 8009488:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800948c:	2200      	movs	r2, #0
 800948e:	2300      	movs	r3, #0
 8009490:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009494:	f7f7 fb28 	bl	8000ae8 <__aeabi_dcmpeq>
 8009498:	b9d8      	cbnz	r0, 80094d2 <_printf_float+0x432>
 800949a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800949e:	f108 0201 	add.w	r2, r8, #1
 80094a2:	4631      	mov	r1, r6
 80094a4:	4628      	mov	r0, r5
 80094a6:	47b8      	blx	r7
 80094a8:	3001      	adds	r0, #1
 80094aa:	d10e      	bne.n	80094ca <_printf_float+0x42a>
 80094ac:	e657      	b.n	800915e <_printf_float+0xbe>
 80094ae:	2301      	movs	r3, #1
 80094b0:	4652      	mov	r2, sl
 80094b2:	4631      	mov	r1, r6
 80094b4:	4628      	mov	r0, r5
 80094b6:	47b8      	blx	r7
 80094b8:	3001      	adds	r0, #1
 80094ba:	f43f ae50 	beq.w	800915e <_printf_float+0xbe>
 80094be:	f108 0801 	add.w	r8, r8, #1
 80094c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094c4:	3b01      	subs	r3, #1
 80094c6:	4543      	cmp	r3, r8
 80094c8:	dcf1      	bgt.n	80094ae <_printf_float+0x40e>
 80094ca:	464b      	mov	r3, r9
 80094cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80094d0:	e6da      	b.n	8009288 <_printf_float+0x1e8>
 80094d2:	f04f 0800 	mov.w	r8, #0
 80094d6:	f104 0a1a 	add.w	sl, r4, #26
 80094da:	e7f2      	b.n	80094c2 <_printf_float+0x422>
 80094dc:	2301      	movs	r3, #1
 80094de:	4642      	mov	r2, r8
 80094e0:	e7df      	b.n	80094a2 <_printf_float+0x402>
 80094e2:	2301      	movs	r3, #1
 80094e4:	464a      	mov	r2, r9
 80094e6:	4631      	mov	r1, r6
 80094e8:	4628      	mov	r0, r5
 80094ea:	47b8      	blx	r7
 80094ec:	3001      	adds	r0, #1
 80094ee:	f43f ae36 	beq.w	800915e <_printf_float+0xbe>
 80094f2:	f108 0801 	add.w	r8, r8, #1
 80094f6:	68e3      	ldr	r3, [r4, #12]
 80094f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80094fa:	1a5b      	subs	r3, r3, r1
 80094fc:	4543      	cmp	r3, r8
 80094fe:	dcf0      	bgt.n	80094e2 <_printf_float+0x442>
 8009500:	e6f8      	b.n	80092f4 <_printf_float+0x254>
 8009502:	f04f 0800 	mov.w	r8, #0
 8009506:	f104 0919 	add.w	r9, r4, #25
 800950a:	e7f4      	b.n	80094f6 <_printf_float+0x456>

0800950c <_printf_common>:
 800950c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009510:	4616      	mov	r6, r2
 8009512:	4699      	mov	r9, r3
 8009514:	688a      	ldr	r2, [r1, #8]
 8009516:	690b      	ldr	r3, [r1, #16]
 8009518:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800951c:	4293      	cmp	r3, r2
 800951e:	bfb8      	it	lt
 8009520:	4613      	movlt	r3, r2
 8009522:	6033      	str	r3, [r6, #0]
 8009524:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009528:	4607      	mov	r7, r0
 800952a:	460c      	mov	r4, r1
 800952c:	b10a      	cbz	r2, 8009532 <_printf_common+0x26>
 800952e:	3301      	adds	r3, #1
 8009530:	6033      	str	r3, [r6, #0]
 8009532:	6823      	ldr	r3, [r4, #0]
 8009534:	0699      	lsls	r1, r3, #26
 8009536:	bf42      	ittt	mi
 8009538:	6833      	ldrmi	r3, [r6, #0]
 800953a:	3302      	addmi	r3, #2
 800953c:	6033      	strmi	r3, [r6, #0]
 800953e:	6825      	ldr	r5, [r4, #0]
 8009540:	f015 0506 	ands.w	r5, r5, #6
 8009544:	d106      	bne.n	8009554 <_printf_common+0x48>
 8009546:	f104 0a19 	add.w	sl, r4, #25
 800954a:	68e3      	ldr	r3, [r4, #12]
 800954c:	6832      	ldr	r2, [r6, #0]
 800954e:	1a9b      	subs	r3, r3, r2
 8009550:	42ab      	cmp	r3, r5
 8009552:	dc26      	bgt.n	80095a2 <_printf_common+0x96>
 8009554:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009558:	1e13      	subs	r3, r2, #0
 800955a:	6822      	ldr	r2, [r4, #0]
 800955c:	bf18      	it	ne
 800955e:	2301      	movne	r3, #1
 8009560:	0692      	lsls	r2, r2, #26
 8009562:	d42b      	bmi.n	80095bc <_printf_common+0xb0>
 8009564:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009568:	4649      	mov	r1, r9
 800956a:	4638      	mov	r0, r7
 800956c:	47c0      	blx	r8
 800956e:	3001      	adds	r0, #1
 8009570:	d01e      	beq.n	80095b0 <_printf_common+0xa4>
 8009572:	6823      	ldr	r3, [r4, #0]
 8009574:	6922      	ldr	r2, [r4, #16]
 8009576:	f003 0306 	and.w	r3, r3, #6
 800957a:	2b04      	cmp	r3, #4
 800957c:	bf02      	ittt	eq
 800957e:	68e5      	ldreq	r5, [r4, #12]
 8009580:	6833      	ldreq	r3, [r6, #0]
 8009582:	1aed      	subeq	r5, r5, r3
 8009584:	68a3      	ldr	r3, [r4, #8]
 8009586:	bf0c      	ite	eq
 8009588:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800958c:	2500      	movne	r5, #0
 800958e:	4293      	cmp	r3, r2
 8009590:	bfc4      	itt	gt
 8009592:	1a9b      	subgt	r3, r3, r2
 8009594:	18ed      	addgt	r5, r5, r3
 8009596:	2600      	movs	r6, #0
 8009598:	341a      	adds	r4, #26
 800959a:	42b5      	cmp	r5, r6
 800959c:	d11a      	bne.n	80095d4 <_printf_common+0xc8>
 800959e:	2000      	movs	r0, #0
 80095a0:	e008      	b.n	80095b4 <_printf_common+0xa8>
 80095a2:	2301      	movs	r3, #1
 80095a4:	4652      	mov	r2, sl
 80095a6:	4649      	mov	r1, r9
 80095a8:	4638      	mov	r0, r7
 80095aa:	47c0      	blx	r8
 80095ac:	3001      	adds	r0, #1
 80095ae:	d103      	bne.n	80095b8 <_printf_common+0xac>
 80095b0:	f04f 30ff 	mov.w	r0, #4294967295
 80095b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095b8:	3501      	adds	r5, #1
 80095ba:	e7c6      	b.n	800954a <_printf_common+0x3e>
 80095bc:	18e1      	adds	r1, r4, r3
 80095be:	1c5a      	adds	r2, r3, #1
 80095c0:	2030      	movs	r0, #48	; 0x30
 80095c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80095c6:	4422      	add	r2, r4
 80095c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80095cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80095d0:	3302      	adds	r3, #2
 80095d2:	e7c7      	b.n	8009564 <_printf_common+0x58>
 80095d4:	2301      	movs	r3, #1
 80095d6:	4622      	mov	r2, r4
 80095d8:	4649      	mov	r1, r9
 80095da:	4638      	mov	r0, r7
 80095dc:	47c0      	blx	r8
 80095de:	3001      	adds	r0, #1
 80095e0:	d0e6      	beq.n	80095b0 <_printf_common+0xa4>
 80095e2:	3601      	adds	r6, #1
 80095e4:	e7d9      	b.n	800959a <_printf_common+0x8e>
	...

080095e8 <_printf_i>:
 80095e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095ec:	7e0f      	ldrb	r7, [r1, #24]
 80095ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80095f0:	2f78      	cmp	r7, #120	; 0x78
 80095f2:	4691      	mov	r9, r2
 80095f4:	4680      	mov	r8, r0
 80095f6:	460c      	mov	r4, r1
 80095f8:	469a      	mov	sl, r3
 80095fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80095fe:	d807      	bhi.n	8009610 <_printf_i+0x28>
 8009600:	2f62      	cmp	r7, #98	; 0x62
 8009602:	d80a      	bhi.n	800961a <_printf_i+0x32>
 8009604:	2f00      	cmp	r7, #0
 8009606:	f000 80d4 	beq.w	80097b2 <_printf_i+0x1ca>
 800960a:	2f58      	cmp	r7, #88	; 0x58
 800960c:	f000 80c0 	beq.w	8009790 <_printf_i+0x1a8>
 8009610:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009614:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009618:	e03a      	b.n	8009690 <_printf_i+0xa8>
 800961a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800961e:	2b15      	cmp	r3, #21
 8009620:	d8f6      	bhi.n	8009610 <_printf_i+0x28>
 8009622:	a101      	add	r1, pc, #4	; (adr r1, 8009628 <_printf_i+0x40>)
 8009624:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009628:	08009681 	.word	0x08009681
 800962c:	08009695 	.word	0x08009695
 8009630:	08009611 	.word	0x08009611
 8009634:	08009611 	.word	0x08009611
 8009638:	08009611 	.word	0x08009611
 800963c:	08009611 	.word	0x08009611
 8009640:	08009695 	.word	0x08009695
 8009644:	08009611 	.word	0x08009611
 8009648:	08009611 	.word	0x08009611
 800964c:	08009611 	.word	0x08009611
 8009650:	08009611 	.word	0x08009611
 8009654:	08009799 	.word	0x08009799
 8009658:	080096c1 	.word	0x080096c1
 800965c:	08009753 	.word	0x08009753
 8009660:	08009611 	.word	0x08009611
 8009664:	08009611 	.word	0x08009611
 8009668:	080097bb 	.word	0x080097bb
 800966c:	08009611 	.word	0x08009611
 8009670:	080096c1 	.word	0x080096c1
 8009674:	08009611 	.word	0x08009611
 8009678:	08009611 	.word	0x08009611
 800967c:	0800975b 	.word	0x0800975b
 8009680:	682b      	ldr	r3, [r5, #0]
 8009682:	1d1a      	adds	r2, r3, #4
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	602a      	str	r2, [r5, #0]
 8009688:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800968c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009690:	2301      	movs	r3, #1
 8009692:	e09f      	b.n	80097d4 <_printf_i+0x1ec>
 8009694:	6820      	ldr	r0, [r4, #0]
 8009696:	682b      	ldr	r3, [r5, #0]
 8009698:	0607      	lsls	r7, r0, #24
 800969a:	f103 0104 	add.w	r1, r3, #4
 800969e:	6029      	str	r1, [r5, #0]
 80096a0:	d501      	bpl.n	80096a6 <_printf_i+0xbe>
 80096a2:	681e      	ldr	r6, [r3, #0]
 80096a4:	e003      	b.n	80096ae <_printf_i+0xc6>
 80096a6:	0646      	lsls	r6, r0, #25
 80096a8:	d5fb      	bpl.n	80096a2 <_printf_i+0xba>
 80096aa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80096ae:	2e00      	cmp	r6, #0
 80096b0:	da03      	bge.n	80096ba <_printf_i+0xd2>
 80096b2:	232d      	movs	r3, #45	; 0x2d
 80096b4:	4276      	negs	r6, r6
 80096b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096ba:	485a      	ldr	r0, [pc, #360]	; (8009824 <_printf_i+0x23c>)
 80096bc:	230a      	movs	r3, #10
 80096be:	e012      	b.n	80096e6 <_printf_i+0xfe>
 80096c0:	682b      	ldr	r3, [r5, #0]
 80096c2:	6820      	ldr	r0, [r4, #0]
 80096c4:	1d19      	adds	r1, r3, #4
 80096c6:	6029      	str	r1, [r5, #0]
 80096c8:	0605      	lsls	r5, r0, #24
 80096ca:	d501      	bpl.n	80096d0 <_printf_i+0xe8>
 80096cc:	681e      	ldr	r6, [r3, #0]
 80096ce:	e002      	b.n	80096d6 <_printf_i+0xee>
 80096d0:	0641      	lsls	r1, r0, #25
 80096d2:	d5fb      	bpl.n	80096cc <_printf_i+0xe4>
 80096d4:	881e      	ldrh	r6, [r3, #0]
 80096d6:	4853      	ldr	r0, [pc, #332]	; (8009824 <_printf_i+0x23c>)
 80096d8:	2f6f      	cmp	r7, #111	; 0x6f
 80096da:	bf0c      	ite	eq
 80096dc:	2308      	moveq	r3, #8
 80096de:	230a      	movne	r3, #10
 80096e0:	2100      	movs	r1, #0
 80096e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80096e6:	6865      	ldr	r5, [r4, #4]
 80096e8:	60a5      	str	r5, [r4, #8]
 80096ea:	2d00      	cmp	r5, #0
 80096ec:	bfa2      	ittt	ge
 80096ee:	6821      	ldrge	r1, [r4, #0]
 80096f0:	f021 0104 	bicge.w	r1, r1, #4
 80096f4:	6021      	strge	r1, [r4, #0]
 80096f6:	b90e      	cbnz	r6, 80096fc <_printf_i+0x114>
 80096f8:	2d00      	cmp	r5, #0
 80096fa:	d04b      	beq.n	8009794 <_printf_i+0x1ac>
 80096fc:	4615      	mov	r5, r2
 80096fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8009702:	fb03 6711 	mls	r7, r3, r1, r6
 8009706:	5dc7      	ldrb	r7, [r0, r7]
 8009708:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800970c:	4637      	mov	r7, r6
 800970e:	42bb      	cmp	r3, r7
 8009710:	460e      	mov	r6, r1
 8009712:	d9f4      	bls.n	80096fe <_printf_i+0x116>
 8009714:	2b08      	cmp	r3, #8
 8009716:	d10b      	bne.n	8009730 <_printf_i+0x148>
 8009718:	6823      	ldr	r3, [r4, #0]
 800971a:	07de      	lsls	r6, r3, #31
 800971c:	d508      	bpl.n	8009730 <_printf_i+0x148>
 800971e:	6923      	ldr	r3, [r4, #16]
 8009720:	6861      	ldr	r1, [r4, #4]
 8009722:	4299      	cmp	r1, r3
 8009724:	bfde      	ittt	le
 8009726:	2330      	movle	r3, #48	; 0x30
 8009728:	f805 3c01 	strble.w	r3, [r5, #-1]
 800972c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009730:	1b52      	subs	r2, r2, r5
 8009732:	6122      	str	r2, [r4, #16]
 8009734:	f8cd a000 	str.w	sl, [sp]
 8009738:	464b      	mov	r3, r9
 800973a:	aa03      	add	r2, sp, #12
 800973c:	4621      	mov	r1, r4
 800973e:	4640      	mov	r0, r8
 8009740:	f7ff fee4 	bl	800950c <_printf_common>
 8009744:	3001      	adds	r0, #1
 8009746:	d14a      	bne.n	80097de <_printf_i+0x1f6>
 8009748:	f04f 30ff 	mov.w	r0, #4294967295
 800974c:	b004      	add	sp, #16
 800974e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009752:	6823      	ldr	r3, [r4, #0]
 8009754:	f043 0320 	orr.w	r3, r3, #32
 8009758:	6023      	str	r3, [r4, #0]
 800975a:	4833      	ldr	r0, [pc, #204]	; (8009828 <_printf_i+0x240>)
 800975c:	2778      	movs	r7, #120	; 0x78
 800975e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009762:	6823      	ldr	r3, [r4, #0]
 8009764:	6829      	ldr	r1, [r5, #0]
 8009766:	061f      	lsls	r7, r3, #24
 8009768:	f851 6b04 	ldr.w	r6, [r1], #4
 800976c:	d402      	bmi.n	8009774 <_printf_i+0x18c>
 800976e:	065f      	lsls	r7, r3, #25
 8009770:	bf48      	it	mi
 8009772:	b2b6      	uxthmi	r6, r6
 8009774:	07df      	lsls	r7, r3, #31
 8009776:	bf48      	it	mi
 8009778:	f043 0320 	orrmi.w	r3, r3, #32
 800977c:	6029      	str	r1, [r5, #0]
 800977e:	bf48      	it	mi
 8009780:	6023      	strmi	r3, [r4, #0]
 8009782:	b91e      	cbnz	r6, 800978c <_printf_i+0x1a4>
 8009784:	6823      	ldr	r3, [r4, #0]
 8009786:	f023 0320 	bic.w	r3, r3, #32
 800978a:	6023      	str	r3, [r4, #0]
 800978c:	2310      	movs	r3, #16
 800978e:	e7a7      	b.n	80096e0 <_printf_i+0xf8>
 8009790:	4824      	ldr	r0, [pc, #144]	; (8009824 <_printf_i+0x23c>)
 8009792:	e7e4      	b.n	800975e <_printf_i+0x176>
 8009794:	4615      	mov	r5, r2
 8009796:	e7bd      	b.n	8009714 <_printf_i+0x12c>
 8009798:	682b      	ldr	r3, [r5, #0]
 800979a:	6826      	ldr	r6, [r4, #0]
 800979c:	6961      	ldr	r1, [r4, #20]
 800979e:	1d18      	adds	r0, r3, #4
 80097a0:	6028      	str	r0, [r5, #0]
 80097a2:	0635      	lsls	r5, r6, #24
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	d501      	bpl.n	80097ac <_printf_i+0x1c4>
 80097a8:	6019      	str	r1, [r3, #0]
 80097aa:	e002      	b.n	80097b2 <_printf_i+0x1ca>
 80097ac:	0670      	lsls	r0, r6, #25
 80097ae:	d5fb      	bpl.n	80097a8 <_printf_i+0x1c0>
 80097b0:	8019      	strh	r1, [r3, #0]
 80097b2:	2300      	movs	r3, #0
 80097b4:	6123      	str	r3, [r4, #16]
 80097b6:	4615      	mov	r5, r2
 80097b8:	e7bc      	b.n	8009734 <_printf_i+0x14c>
 80097ba:	682b      	ldr	r3, [r5, #0]
 80097bc:	1d1a      	adds	r2, r3, #4
 80097be:	602a      	str	r2, [r5, #0]
 80097c0:	681d      	ldr	r5, [r3, #0]
 80097c2:	6862      	ldr	r2, [r4, #4]
 80097c4:	2100      	movs	r1, #0
 80097c6:	4628      	mov	r0, r5
 80097c8:	f7f6 fd12 	bl	80001f0 <memchr>
 80097cc:	b108      	cbz	r0, 80097d2 <_printf_i+0x1ea>
 80097ce:	1b40      	subs	r0, r0, r5
 80097d0:	6060      	str	r0, [r4, #4]
 80097d2:	6863      	ldr	r3, [r4, #4]
 80097d4:	6123      	str	r3, [r4, #16]
 80097d6:	2300      	movs	r3, #0
 80097d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097dc:	e7aa      	b.n	8009734 <_printf_i+0x14c>
 80097de:	6923      	ldr	r3, [r4, #16]
 80097e0:	462a      	mov	r2, r5
 80097e2:	4649      	mov	r1, r9
 80097e4:	4640      	mov	r0, r8
 80097e6:	47d0      	blx	sl
 80097e8:	3001      	adds	r0, #1
 80097ea:	d0ad      	beq.n	8009748 <_printf_i+0x160>
 80097ec:	6823      	ldr	r3, [r4, #0]
 80097ee:	079b      	lsls	r3, r3, #30
 80097f0:	d413      	bmi.n	800981a <_printf_i+0x232>
 80097f2:	68e0      	ldr	r0, [r4, #12]
 80097f4:	9b03      	ldr	r3, [sp, #12]
 80097f6:	4298      	cmp	r0, r3
 80097f8:	bfb8      	it	lt
 80097fa:	4618      	movlt	r0, r3
 80097fc:	e7a6      	b.n	800974c <_printf_i+0x164>
 80097fe:	2301      	movs	r3, #1
 8009800:	4632      	mov	r2, r6
 8009802:	4649      	mov	r1, r9
 8009804:	4640      	mov	r0, r8
 8009806:	47d0      	blx	sl
 8009808:	3001      	adds	r0, #1
 800980a:	d09d      	beq.n	8009748 <_printf_i+0x160>
 800980c:	3501      	adds	r5, #1
 800980e:	68e3      	ldr	r3, [r4, #12]
 8009810:	9903      	ldr	r1, [sp, #12]
 8009812:	1a5b      	subs	r3, r3, r1
 8009814:	42ab      	cmp	r3, r5
 8009816:	dcf2      	bgt.n	80097fe <_printf_i+0x216>
 8009818:	e7eb      	b.n	80097f2 <_printf_i+0x20a>
 800981a:	2500      	movs	r5, #0
 800981c:	f104 0619 	add.w	r6, r4, #25
 8009820:	e7f5      	b.n	800980e <_printf_i+0x226>
 8009822:	bf00      	nop
 8009824:	0800bd02 	.word	0x0800bd02
 8009828:	0800bd13 	.word	0x0800bd13

0800982c <std>:
 800982c:	2300      	movs	r3, #0
 800982e:	b510      	push	{r4, lr}
 8009830:	4604      	mov	r4, r0
 8009832:	e9c0 3300 	strd	r3, r3, [r0]
 8009836:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800983a:	6083      	str	r3, [r0, #8]
 800983c:	8181      	strh	r1, [r0, #12]
 800983e:	6643      	str	r3, [r0, #100]	; 0x64
 8009840:	81c2      	strh	r2, [r0, #14]
 8009842:	6183      	str	r3, [r0, #24]
 8009844:	4619      	mov	r1, r3
 8009846:	2208      	movs	r2, #8
 8009848:	305c      	adds	r0, #92	; 0x5c
 800984a:	f000 f926 	bl	8009a9a <memset>
 800984e:	4b0d      	ldr	r3, [pc, #52]	; (8009884 <std+0x58>)
 8009850:	6263      	str	r3, [r4, #36]	; 0x24
 8009852:	4b0d      	ldr	r3, [pc, #52]	; (8009888 <std+0x5c>)
 8009854:	62a3      	str	r3, [r4, #40]	; 0x28
 8009856:	4b0d      	ldr	r3, [pc, #52]	; (800988c <std+0x60>)
 8009858:	62e3      	str	r3, [r4, #44]	; 0x2c
 800985a:	4b0d      	ldr	r3, [pc, #52]	; (8009890 <std+0x64>)
 800985c:	6323      	str	r3, [r4, #48]	; 0x30
 800985e:	4b0d      	ldr	r3, [pc, #52]	; (8009894 <std+0x68>)
 8009860:	6224      	str	r4, [r4, #32]
 8009862:	429c      	cmp	r4, r3
 8009864:	d006      	beq.n	8009874 <std+0x48>
 8009866:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800986a:	4294      	cmp	r4, r2
 800986c:	d002      	beq.n	8009874 <std+0x48>
 800986e:	33d0      	adds	r3, #208	; 0xd0
 8009870:	429c      	cmp	r4, r3
 8009872:	d105      	bne.n	8009880 <std+0x54>
 8009874:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800987c:	f000 b98a 	b.w	8009b94 <__retarget_lock_init_recursive>
 8009880:	bd10      	pop	{r4, pc}
 8009882:	bf00      	nop
 8009884:	08009a15 	.word	0x08009a15
 8009888:	08009a37 	.word	0x08009a37
 800988c:	08009a6f 	.word	0x08009a6f
 8009890:	08009a93 	.word	0x08009a93
 8009894:	20000eb4 	.word	0x20000eb4

08009898 <stdio_exit_handler>:
 8009898:	4a02      	ldr	r2, [pc, #8]	; (80098a4 <stdio_exit_handler+0xc>)
 800989a:	4903      	ldr	r1, [pc, #12]	; (80098a8 <stdio_exit_handler+0x10>)
 800989c:	4803      	ldr	r0, [pc, #12]	; (80098ac <stdio_exit_handler+0x14>)
 800989e:	f000 b869 	b.w	8009974 <_fwalk_sglue>
 80098a2:	bf00      	nop
 80098a4:	20000010 	.word	0x20000010
 80098a8:	0800b7d1 	.word	0x0800b7d1
 80098ac:	2000001c 	.word	0x2000001c

080098b0 <cleanup_stdio>:
 80098b0:	6841      	ldr	r1, [r0, #4]
 80098b2:	4b0c      	ldr	r3, [pc, #48]	; (80098e4 <cleanup_stdio+0x34>)
 80098b4:	4299      	cmp	r1, r3
 80098b6:	b510      	push	{r4, lr}
 80098b8:	4604      	mov	r4, r0
 80098ba:	d001      	beq.n	80098c0 <cleanup_stdio+0x10>
 80098bc:	f001 ff88 	bl	800b7d0 <_fflush_r>
 80098c0:	68a1      	ldr	r1, [r4, #8]
 80098c2:	4b09      	ldr	r3, [pc, #36]	; (80098e8 <cleanup_stdio+0x38>)
 80098c4:	4299      	cmp	r1, r3
 80098c6:	d002      	beq.n	80098ce <cleanup_stdio+0x1e>
 80098c8:	4620      	mov	r0, r4
 80098ca:	f001 ff81 	bl	800b7d0 <_fflush_r>
 80098ce:	68e1      	ldr	r1, [r4, #12]
 80098d0:	4b06      	ldr	r3, [pc, #24]	; (80098ec <cleanup_stdio+0x3c>)
 80098d2:	4299      	cmp	r1, r3
 80098d4:	d004      	beq.n	80098e0 <cleanup_stdio+0x30>
 80098d6:	4620      	mov	r0, r4
 80098d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098dc:	f001 bf78 	b.w	800b7d0 <_fflush_r>
 80098e0:	bd10      	pop	{r4, pc}
 80098e2:	bf00      	nop
 80098e4:	20000eb4 	.word	0x20000eb4
 80098e8:	20000f1c 	.word	0x20000f1c
 80098ec:	20000f84 	.word	0x20000f84

080098f0 <global_stdio_init.part.0>:
 80098f0:	b510      	push	{r4, lr}
 80098f2:	4b0b      	ldr	r3, [pc, #44]	; (8009920 <global_stdio_init.part.0+0x30>)
 80098f4:	4c0b      	ldr	r4, [pc, #44]	; (8009924 <global_stdio_init.part.0+0x34>)
 80098f6:	4a0c      	ldr	r2, [pc, #48]	; (8009928 <global_stdio_init.part.0+0x38>)
 80098f8:	601a      	str	r2, [r3, #0]
 80098fa:	4620      	mov	r0, r4
 80098fc:	2200      	movs	r2, #0
 80098fe:	2104      	movs	r1, #4
 8009900:	f7ff ff94 	bl	800982c <std>
 8009904:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009908:	2201      	movs	r2, #1
 800990a:	2109      	movs	r1, #9
 800990c:	f7ff ff8e 	bl	800982c <std>
 8009910:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009914:	2202      	movs	r2, #2
 8009916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800991a:	2112      	movs	r1, #18
 800991c:	f7ff bf86 	b.w	800982c <std>
 8009920:	20000fec 	.word	0x20000fec
 8009924:	20000eb4 	.word	0x20000eb4
 8009928:	08009899 	.word	0x08009899

0800992c <__sfp_lock_acquire>:
 800992c:	4801      	ldr	r0, [pc, #4]	; (8009934 <__sfp_lock_acquire+0x8>)
 800992e:	f000 b932 	b.w	8009b96 <__retarget_lock_acquire_recursive>
 8009932:	bf00      	nop
 8009934:	20000ff5 	.word	0x20000ff5

08009938 <__sfp_lock_release>:
 8009938:	4801      	ldr	r0, [pc, #4]	; (8009940 <__sfp_lock_release+0x8>)
 800993a:	f000 b92d 	b.w	8009b98 <__retarget_lock_release_recursive>
 800993e:	bf00      	nop
 8009940:	20000ff5 	.word	0x20000ff5

08009944 <__sinit>:
 8009944:	b510      	push	{r4, lr}
 8009946:	4604      	mov	r4, r0
 8009948:	f7ff fff0 	bl	800992c <__sfp_lock_acquire>
 800994c:	6a23      	ldr	r3, [r4, #32]
 800994e:	b11b      	cbz	r3, 8009958 <__sinit+0x14>
 8009950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009954:	f7ff bff0 	b.w	8009938 <__sfp_lock_release>
 8009958:	4b04      	ldr	r3, [pc, #16]	; (800996c <__sinit+0x28>)
 800995a:	6223      	str	r3, [r4, #32]
 800995c:	4b04      	ldr	r3, [pc, #16]	; (8009970 <__sinit+0x2c>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d1f5      	bne.n	8009950 <__sinit+0xc>
 8009964:	f7ff ffc4 	bl	80098f0 <global_stdio_init.part.0>
 8009968:	e7f2      	b.n	8009950 <__sinit+0xc>
 800996a:	bf00      	nop
 800996c:	080098b1 	.word	0x080098b1
 8009970:	20000fec 	.word	0x20000fec

08009974 <_fwalk_sglue>:
 8009974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009978:	4607      	mov	r7, r0
 800997a:	4688      	mov	r8, r1
 800997c:	4614      	mov	r4, r2
 800997e:	2600      	movs	r6, #0
 8009980:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009984:	f1b9 0901 	subs.w	r9, r9, #1
 8009988:	d505      	bpl.n	8009996 <_fwalk_sglue+0x22>
 800998a:	6824      	ldr	r4, [r4, #0]
 800998c:	2c00      	cmp	r4, #0
 800998e:	d1f7      	bne.n	8009980 <_fwalk_sglue+0xc>
 8009990:	4630      	mov	r0, r6
 8009992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009996:	89ab      	ldrh	r3, [r5, #12]
 8009998:	2b01      	cmp	r3, #1
 800999a:	d907      	bls.n	80099ac <_fwalk_sglue+0x38>
 800999c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80099a0:	3301      	adds	r3, #1
 80099a2:	d003      	beq.n	80099ac <_fwalk_sglue+0x38>
 80099a4:	4629      	mov	r1, r5
 80099a6:	4638      	mov	r0, r7
 80099a8:	47c0      	blx	r8
 80099aa:	4306      	orrs	r6, r0
 80099ac:	3568      	adds	r5, #104	; 0x68
 80099ae:	e7e9      	b.n	8009984 <_fwalk_sglue+0x10>

080099b0 <iprintf>:
 80099b0:	b40f      	push	{r0, r1, r2, r3}
 80099b2:	b507      	push	{r0, r1, r2, lr}
 80099b4:	4906      	ldr	r1, [pc, #24]	; (80099d0 <iprintf+0x20>)
 80099b6:	ab04      	add	r3, sp, #16
 80099b8:	6808      	ldr	r0, [r1, #0]
 80099ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80099be:	6881      	ldr	r1, [r0, #8]
 80099c0:	9301      	str	r3, [sp, #4]
 80099c2:	f001 fd65 	bl	800b490 <_vfiprintf_r>
 80099c6:	b003      	add	sp, #12
 80099c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80099cc:	b004      	add	sp, #16
 80099ce:	4770      	bx	lr
 80099d0:	20000068 	.word	0x20000068

080099d4 <siprintf>:
 80099d4:	b40e      	push	{r1, r2, r3}
 80099d6:	b500      	push	{lr}
 80099d8:	b09c      	sub	sp, #112	; 0x70
 80099da:	ab1d      	add	r3, sp, #116	; 0x74
 80099dc:	9002      	str	r0, [sp, #8]
 80099de:	9006      	str	r0, [sp, #24]
 80099e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80099e4:	4809      	ldr	r0, [pc, #36]	; (8009a0c <siprintf+0x38>)
 80099e6:	9107      	str	r1, [sp, #28]
 80099e8:	9104      	str	r1, [sp, #16]
 80099ea:	4909      	ldr	r1, [pc, #36]	; (8009a10 <siprintf+0x3c>)
 80099ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80099f0:	9105      	str	r1, [sp, #20]
 80099f2:	6800      	ldr	r0, [r0, #0]
 80099f4:	9301      	str	r3, [sp, #4]
 80099f6:	a902      	add	r1, sp, #8
 80099f8:	f001 fc22 	bl	800b240 <_svfiprintf_r>
 80099fc:	9b02      	ldr	r3, [sp, #8]
 80099fe:	2200      	movs	r2, #0
 8009a00:	701a      	strb	r2, [r3, #0]
 8009a02:	b01c      	add	sp, #112	; 0x70
 8009a04:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a08:	b003      	add	sp, #12
 8009a0a:	4770      	bx	lr
 8009a0c:	20000068 	.word	0x20000068
 8009a10:	ffff0208 	.word	0xffff0208

08009a14 <__sread>:
 8009a14:	b510      	push	{r4, lr}
 8009a16:	460c      	mov	r4, r1
 8009a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a1c:	f000 f86c 	bl	8009af8 <_read_r>
 8009a20:	2800      	cmp	r0, #0
 8009a22:	bfab      	itete	ge
 8009a24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009a26:	89a3      	ldrhlt	r3, [r4, #12]
 8009a28:	181b      	addge	r3, r3, r0
 8009a2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009a2e:	bfac      	ite	ge
 8009a30:	6563      	strge	r3, [r4, #84]	; 0x54
 8009a32:	81a3      	strhlt	r3, [r4, #12]
 8009a34:	bd10      	pop	{r4, pc}

08009a36 <__swrite>:
 8009a36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a3a:	461f      	mov	r7, r3
 8009a3c:	898b      	ldrh	r3, [r1, #12]
 8009a3e:	05db      	lsls	r3, r3, #23
 8009a40:	4605      	mov	r5, r0
 8009a42:	460c      	mov	r4, r1
 8009a44:	4616      	mov	r6, r2
 8009a46:	d505      	bpl.n	8009a54 <__swrite+0x1e>
 8009a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a4c:	2302      	movs	r3, #2
 8009a4e:	2200      	movs	r2, #0
 8009a50:	f000 f840 	bl	8009ad4 <_lseek_r>
 8009a54:	89a3      	ldrh	r3, [r4, #12]
 8009a56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a5e:	81a3      	strh	r3, [r4, #12]
 8009a60:	4632      	mov	r2, r6
 8009a62:	463b      	mov	r3, r7
 8009a64:	4628      	mov	r0, r5
 8009a66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a6a:	f000 b857 	b.w	8009b1c <_write_r>

08009a6e <__sseek>:
 8009a6e:	b510      	push	{r4, lr}
 8009a70:	460c      	mov	r4, r1
 8009a72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a76:	f000 f82d 	bl	8009ad4 <_lseek_r>
 8009a7a:	1c43      	adds	r3, r0, #1
 8009a7c:	89a3      	ldrh	r3, [r4, #12]
 8009a7e:	bf15      	itete	ne
 8009a80:	6560      	strne	r0, [r4, #84]	; 0x54
 8009a82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009a86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009a8a:	81a3      	strheq	r3, [r4, #12]
 8009a8c:	bf18      	it	ne
 8009a8e:	81a3      	strhne	r3, [r4, #12]
 8009a90:	bd10      	pop	{r4, pc}

08009a92 <__sclose>:
 8009a92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a96:	f000 b80d 	b.w	8009ab4 <_close_r>

08009a9a <memset>:
 8009a9a:	4402      	add	r2, r0
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d100      	bne.n	8009aa4 <memset+0xa>
 8009aa2:	4770      	bx	lr
 8009aa4:	f803 1b01 	strb.w	r1, [r3], #1
 8009aa8:	e7f9      	b.n	8009a9e <memset+0x4>
	...

08009aac <_localeconv_r>:
 8009aac:	4800      	ldr	r0, [pc, #0]	; (8009ab0 <_localeconv_r+0x4>)
 8009aae:	4770      	bx	lr
 8009ab0:	2000015c 	.word	0x2000015c

08009ab4 <_close_r>:
 8009ab4:	b538      	push	{r3, r4, r5, lr}
 8009ab6:	4d06      	ldr	r5, [pc, #24]	; (8009ad0 <_close_r+0x1c>)
 8009ab8:	2300      	movs	r3, #0
 8009aba:	4604      	mov	r4, r0
 8009abc:	4608      	mov	r0, r1
 8009abe:	602b      	str	r3, [r5, #0]
 8009ac0:	f7f9 fd95 	bl	80035ee <_close>
 8009ac4:	1c43      	adds	r3, r0, #1
 8009ac6:	d102      	bne.n	8009ace <_close_r+0x1a>
 8009ac8:	682b      	ldr	r3, [r5, #0]
 8009aca:	b103      	cbz	r3, 8009ace <_close_r+0x1a>
 8009acc:	6023      	str	r3, [r4, #0]
 8009ace:	bd38      	pop	{r3, r4, r5, pc}
 8009ad0:	20000ff0 	.word	0x20000ff0

08009ad4 <_lseek_r>:
 8009ad4:	b538      	push	{r3, r4, r5, lr}
 8009ad6:	4d07      	ldr	r5, [pc, #28]	; (8009af4 <_lseek_r+0x20>)
 8009ad8:	4604      	mov	r4, r0
 8009ada:	4608      	mov	r0, r1
 8009adc:	4611      	mov	r1, r2
 8009ade:	2200      	movs	r2, #0
 8009ae0:	602a      	str	r2, [r5, #0]
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	f7f9 fdaa 	bl	800363c <_lseek>
 8009ae8:	1c43      	adds	r3, r0, #1
 8009aea:	d102      	bne.n	8009af2 <_lseek_r+0x1e>
 8009aec:	682b      	ldr	r3, [r5, #0]
 8009aee:	b103      	cbz	r3, 8009af2 <_lseek_r+0x1e>
 8009af0:	6023      	str	r3, [r4, #0]
 8009af2:	bd38      	pop	{r3, r4, r5, pc}
 8009af4:	20000ff0 	.word	0x20000ff0

08009af8 <_read_r>:
 8009af8:	b538      	push	{r3, r4, r5, lr}
 8009afa:	4d07      	ldr	r5, [pc, #28]	; (8009b18 <_read_r+0x20>)
 8009afc:	4604      	mov	r4, r0
 8009afe:	4608      	mov	r0, r1
 8009b00:	4611      	mov	r1, r2
 8009b02:	2200      	movs	r2, #0
 8009b04:	602a      	str	r2, [r5, #0]
 8009b06:	461a      	mov	r2, r3
 8009b08:	f7f9 fd54 	bl	80035b4 <_read>
 8009b0c:	1c43      	adds	r3, r0, #1
 8009b0e:	d102      	bne.n	8009b16 <_read_r+0x1e>
 8009b10:	682b      	ldr	r3, [r5, #0]
 8009b12:	b103      	cbz	r3, 8009b16 <_read_r+0x1e>
 8009b14:	6023      	str	r3, [r4, #0]
 8009b16:	bd38      	pop	{r3, r4, r5, pc}
 8009b18:	20000ff0 	.word	0x20000ff0

08009b1c <_write_r>:
 8009b1c:	b538      	push	{r3, r4, r5, lr}
 8009b1e:	4d07      	ldr	r5, [pc, #28]	; (8009b3c <_write_r+0x20>)
 8009b20:	4604      	mov	r4, r0
 8009b22:	4608      	mov	r0, r1
 8009b24:	4611      	mov	r1, r2
 8009b26:	2200      	movs	r2, #0
 8009b28:	602a      	str	r2, [r5, #0]
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	f7f7 fa3a 	bl	8000fa4 <_write>
 8009b30:	1c43      	adds	r3, r0, #1
 8009b32:	d102      	bne.n	8009b3a <_write_r+0x1e>
 8009b34:	682b      	ldr	r3, [r5, #0]
 8009b36:	b103      	cbz	r3, 8009b3a <_write_r+0x1e>
 8009b38:	6023      	str	r3, [r4, #0]
 8009b3a:	bd38      	pop	{r3, r4, r5, pc}
 8009b3c:	20000ff0 	.word	0x20000ff0

08009b40 <__errno>:
 8009b40:	4b01      	ldr	r3, [pc, #4]	; (8009b48 <__errno+0x8>)
 8009b42:	6818      	ldr	r0, [r3, #0]
 8009b44:	4770      	bx	lr
 8009b46:	bf00      	nop
 8009b48:	20000068 	.word	0x20000068

08009b4c <__libc_init_array>:
 8009b4c:	b570      	push	{r4, r5, r6, lr}
 8009b4e:	4d0d      	ldr	r5, [pc, #52]	; (8009b84 <__libc_init_array+0x38>)
 8009b50:	4c0d      	ldr	r4, [pc, #52]	; (8009b88 <__libc_init_array+0x3c>)
 8009b52:	1b64      	subs	r4, r4, r5
 8009b54:	10a4      	asrs	r4, r4, #2
 8009b56:	2600      	movs	r6, #0
 8009b58:	42a6      	cmp	r6, r4
 8009b5a:	d109      	bne.n	8009b70 <__libc_init_array+0x24>
 8009b5c:	4d0b      	ldr	r5, [pc, #44]	; (8009b8c <__libc_init_array+0x40>)
 8009b5e:	4c0c      	ldr	r4, [pc, #48]	; (8009b90 <__libc_init_array+0x44>)
 8009b60:	f002 f898 	bl	800bc94 <_init>
 8009b64:	1b64      	subs	r4, r4, r5
 8009b66:	10a4      	asrs	r4, r4, #2
 8009b68:	2600      	movs	r6, #0
 8009b6a:	42a6      	cmp	r6, r4
 8009b6c:	d105      	bne.n	8009b7a <__libc_init_array+0x2e>
 8009b6e:	bd70      	pop	{r4, r5, r6, pc}
 8009b70:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b74:	4798      	blx	r3
 8009b76:	3601      	adds	r6, #1
 8009b78:	e7ee      	b.n	8009b58 <__libc_init_array+0xc>
 8009b7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b7e:	4798      	blx	r3
 8009b80:	3601      	adds	r6, #1
 8009b82:	e7f2      	b.n	8009b6a <__libc_init_array+0x1e>
 8009b84:	0800c06c 	.word	0x0800c06c
 8009b88:	0800c06c 	.word	0x0800c06c
 8009b8c:	0800c06c 	.word	0x0800c06c
 8009b90:	0800c070 	.word	0x0800c070

08009b94 <__retarget_lock_init_recursive>:
 8009b94:	4770      	bx	lr

08009b96 <__retarget_lock_acquire_recursive>:
 8009b96:	4770      	bx	lr

08009b98 <__retarget_lock_release_recursive>:
 8009b98:	4770      	bx	lr

08009b9a <quorem>:
 8009b9a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b9e:	6903      	ldr	r3, [r0, #16]
 8009ba0:	690c      	ldr	r4, [r1, #16]
 8009ba2:	42a3      	cmp	r3, r4
 8009ba4:	4607      	mov	r7, r0
 8009ba6:	db7e      	blt.n	8009ca6 <quorem+0x10c>
 8009ba8:	3c01      	subs	r4, #1
 8009baa:	f101 0814 	add.w	r8, r1, #20
 8009bae:	f100 0514 	add.w	r5, r0, #20
 8009bb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009bb6:	9301      	str	r3, [sp, #4]
 8009bb8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009bbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009bc0:	3301      	adds	r3, #1
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009bc8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009bcc:	fbb2 f6f3 	udiv	r6, r2, r3
 8009bd0:	d331      	bcc.n	8009c36 <quorem+0x9c>
 8009bd2:	f04f 0e00 	mov.w	lr, #0
 8009bd6:	4640      	mov	r0, r8
 8009bd8:	46ac      	mov	ip, r5
 8009bda:	46f2      	mov	sl, lr
 8009bdc:	f850 2b04 	ldr.w	r2, [r0], #4
 8009be0:	b293      	uxth	r3, r2
 8009be2:	fb06 e303 	mla	r3, r6, r3, lr
 8009be6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009bea:	0c1a      	lsrs	r2, r3, #16
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	ebaa 0303 	sub.w	r3, sl, r3
 8009bf2:	f8dc a000 	ldr.w	sl, [ip]
 8009bf6:	fa13 f38a 	uxtah	r3, r3, sl
 8009bfa:	fb06 220e 	mla	r2, r6, lr, r2
 8009bfe:	9300      	str	r3, [sp, #0]
 8009c00:	9b00      	ldr	r3, [sp, #0]
 8009c02:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009c06:	b292      	uxth	r2, r2
 8009c08:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009c0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009c10:	f8bd 3000 	ldrh.w	r3, [sp]
 8009c14:	4581      	cmp	r9, r0
 8009c16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c1a:	f84c 3b04 	str.w	r3, [ip], #4
 8009c1e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009c22:	d2db      	bcs.n	8009bdc <quorem+0x42>
 8009c24:	f855 300b 	ldr.w	r3, [r5, fp]
 8009c28:	b92b      	cbnz	r3, 8009c36 <quorem+0x9c>
 8009c2a:	9b01      	ldr	r3, [sp, #4]
 8009c2c:	3b04      	subs	r3, #4
 8009c2e:	429d      	cmp	r5, r3
 8009c30:	461a      	mov	r2, r3
 8009c32:	d32c      	bcc.n	8009c8e <quorem+0xf4>
 8009c34:	613c      	str	r4, [r7, #16]
 8009c36:	4638      	mov	r0, r7
 8009c38:	f001 f9a8 	bl	800af8c <__mcmp>
 8009c3c:	2800      	cmp	r0, #0
 8009c3e:	db22      	blt.n	8009c86 <quorem+0xec>
 8009c40:	3601      	adds	r6, #1
 8009c42:	4629      	mov	r1, r5
 8009c44:	2000      	movs	r0, #0
 8009c46:	f858 2b04 	ldr.w	r2, [r8], #4
 8009c4a:	f8d1 c000 	ldr.w	ip, [r1]
 8009c4e:	b293      	uxth	r3, r2
 8009c50:	1ac3      	subs	r3, r0, r3
 8009c52:	0c12      	lsrs	r2, r2, #16
 8009c54:	fa13 f38c 	uxtah	r3, r3, ip
 8009c58:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009c5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009c60:	b29b      	uxth	r3, r3
 8009c62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c66:	45c1      	cmp	r9, r8
 8009c68:	f841 3b04 	str.w	r3, [r1], #4
 8009c6c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009c70:	d2e9      	bcs.n	8009c46 <quorem+0xac>
 8009c72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c7a:	b922      	cbnz	r2, 8009c86 <quorem+0xec>
 8009c7c:	3b04      	subs	r3, #4
 8009c7e:	429d      	cmp	r5, r3
 8009c80:	461a      	mov	r2, r3
 8009c82:	d30a      	bcc.n	8009c9a <quorem+0x100>
 8009c84:	613c      	str	r4, [r7, #16]
 8009c86:	4630      	mov	r0, r6
 8009c88:	b003      	add	sp, #12
 8009c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c8e:	6812      	ldr	r2, [r2, #0]
 8009c90:	3b04      	subs	r3, #4
 8009c92:	2a00      	cmp	r2, #0
 8009c94:	d1ce      	bne.n	8009c34 <quorem+0x9a>
 8009c96:	3c01      	subs	r4, #1
 8009c98:	e7c9      	b.n	8009c2e <quorem+0x94>
 8009c9a:	6812      	ldr	r2, [r2, #0]
 8009c9c:	3b04      	subs	r3, #4
 8009c9e:	2a00      	cmp	r2, #0
 8009ca0:	d1f0      	bne.n	8009c84 <quorem+0xea>
 8009ca2:	3c01      	subs	r4, #1
 8009ca4:	e7eb      	b.n	8009c7e <quorem+0xe4>
 8009ca6:	2000      	movs	r0, #0
 8009ca8:	e7ee      	b.n	8009c88 <quorem+0xee>
 8009caa:	0000      	movs	r0, r0
 8009cac:	0000      	movs	r0, r0
	...

08009cb0 <_dtoa_r>:
 8009cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cb4:	ed2d 8b04 	vpush	{d8-d9}
 8009cb8:	69c5      	ldr	r5, [r0, #28]
 8009cba:	b093      	sub	sp, #76	; 0x4c
 8009cbc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009cc0:	ec57 6b10 	vmov	r6, r7, d0
 8009cc4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009cc8:	9107      	str	r1, [sp, #28]
 8009cca:	4604      	mov	r4, r0
 8009ccc:	920a      	str	r2, [sp, #40]	; 0x28
 8009cce:	930d      	str	r3, [sp, #52]	; 0x34
 8009cd0:	b975      	cbnz	r5, 8009cf0 <_dtoa_r+0x40>
 8009cd2:	2010      	movs	r0, #16
 8009cd4:	f000 fe2a 	bl	800a92c <malloc>
 8009cd8:	4602      	mov	r2, r0
 8009cda:	61e0      	str	r0, [r4, #28]
 8009cdc:	b920      	cbnz	r0, 8009ce8 <_dtoa_r+0x38>
 8009cde:	4bae      	ldr	r3, [pc, #696]	; (8009f98 <_dtoa_r+0x2e8>)
 8009ce0:	21ef      	movs	r1, #239	; 0xef
 8009ce2:	48ae      	ldr	r0, [pc, #696]	; (8009f9c <_dtoa_r+0x2ec>)
 8009ce4:	f001 fe6a 	bl	800b9bc <__assert_func>
 8009ce8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009cec:	6005      	str	r5, [r0, #0]
 8009cee:	60c5      	str	r5, [r0, #12]
 8009cf0:	69e3      	ldr	r3, [r4, #28]
 8009cf2:	6819      	ldr	r1, [r3, #0]
 8009cf4:	b151      	cbz	r1, 8009d0c <_dtoa_r+0x5c>
 8009cf6:	685a      	ldr	r2, [r3, #4]
 8009cf8:	604a      	str	r2, [r1, #4]
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	4093      	lsls	r3, r2
 8009cfe:	608b      	str	r3, [r1, #8]
 8009d00:	4620      	mov	r0, r4
 8009d02:	f000 ff07 	bl	800ab14 <_Bfree>
 8009d06:	69e3      	ldr	r3, [r4, #28]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	601a      	str	r2, [r3, #0]
 8009d0c:	1e3b      	subs	r3, r7, #0
 8009d0e:	bfbb      	ittet	lt
 8009d10:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009d14:	9303      	strlt	r3, [sp, #12]
 8009d16:	2300      	movge	r3, #0
 8009d18:	2201      	movlt	r2, #1
 8009d1a:	bfac      	ite	ge
 8009d1c:	f8c8 3000 	strge.w	r3, [r8]
 8009d20:	f8c8 2000 	strlt.w	r2, [r8]
 8009d24:	4b9e      	ldr	r3, [pc, #632]	; (8009fa0 <_dtoa_r+0x2f0>)
 8009d26:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009d2a:	ea33 0308 	bics.w	r3, r3, r8
 8009d2e:	d11b      	bne.n	8009d68 <_dtoa_r+0xb8>
 8009d30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d32:	f242 730f 	movw	r3, #9999	; 0x270f
 8009d36:	6013      	str	r3, [r2, #0]
 8009d38:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009d3c:	4333      	orrs	r3, r6
 8009d3e:	f000 8593 	beq.w	800a868 <_dtoa_r+0xbb8>
 8009d42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d44:	b963      	cbnz	r3, 8009d60 <_dtoa_r+0xb0>
 8009d46:	4b97      	ldr	r3, [pc, #604]	; (8009fa4 <_dtoa_r+0x2f4>)
 8009d48:	e027      	b.n	8009d9a <_dtoa_r+0xea>
 8009d4a:	4b97      	ldr	r3, [pc, #604]	; (8009fa8 <_dtoa_r+0x2f8>)
 8009d4c:	9300      	str	r3, [sp, #0]
 8009d4e:	3308      	adds	r3, #8
 8009d50:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009d52:	6013      	str	r3, [r2, #0]
 8009d54:	9800      	ldr	r0, [sp, #0]
 8009d56:	b013      	add	sp, #76	; 0x4c
 8009d58:	ecbd 8b04 	vpop	{d8-d9}
 8009d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d60:	4b90      	ldr	r3, [pc, #576]	; (8009fa4 <_dtoa_r+0x2f4>)
 8009d62:	9300      	str	r3, [sp, #0]
 8009d64:	3303      	adds	r3, #3
 8009d66:	e7f3      	b.n	8009d50 <_dtoa_r+0xa0>
 8009d68:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	ec51 0b17 	vmov	r0, r1, d7
 8009d72:	eeb0 8a47 	vmov.f32	s16, s14
 8009d76:	eef0 8a67 	vmov.f32	s17, s15
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	f7f6 feb4 	bl	8000ae8 <__aeabi_dcmpeq>
 8009d80:	4681      	mov	r9, r0
 8009d82:	b160      	cbz	r0, 8009d9e <_dtoa_r+0xee>
 8009d84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d86:	2301      	movs	r3, #1
 8009d88:	6013      	str	r3, [r2, #0]
 8009d8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	f000 8568 	beq.w	800a862 <_dtoa_r+0xbb2>
 8009d92:	4b86      	ldr	r3, [pc, #536]	; (8009fac <_dtoa_r+0x2fc>)
 8009d94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009d96:	6013      	str	r3, [r2, #0]
 8009d98:	3b01      	subs	r3, #1
 8009d9a:	9300      	str	r3, [sp, #0]
 8009d9c:	e7da      	b.n	8009d54 <_dtoa_r+0xa4>
 8009d9e:	aa10      	add	r2, sp, #64	; 0x40
 8009da0:	a911      	add	r1, sp, #68	; 0x44
 8009da2:	4620      	mov	r0, r4
 8009da4:	eeb0 0a48 	vmov.f32	s0, s16
 8009da8:	eef0 0a68 	vmov.f32	s1, s17
 8009dac:	f001 f994 	bl	800b0d8 <__d2b>
 8009db0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009db4:	4682      	mov	sl, r0
 8009db6:	2d00      	cmp	r5, #0
 8009db8:	d07f      	beq.n	8009eba <_dtoa_r+0x20a>
 8009dba:	ee18 3a90 	vmov	r3, s17
 8009dbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009dc2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009dc6:	ec51 0b18 	vmov	r0, r1, d8
 8009dca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009dce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009dd2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	2200      	movs	r2, #0
 8009dda:	4b75      	ldr	r3, [pc, #468]	; (8009fb0 <_dtoa_r+0x300>)
 8009ddc:	f7f6 fa64 	bl	80002a8 <__aeabi_dsub>
 8009de0:	a367      	add	r3, pc, #412	; (adr r3, 8009f80 <_dtoa_r+0x2d0>)
 8009de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de6:	f7f6 fc17 	bl	8000618 <__aeabi_dmul>
 8009dea:	a367      	add	r3, pc, #412	; (adr r3, 8009f88 <_dtoa_r+0x2d8>)
 8009dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df0:	f7f6 fa5c 	bl	80002ac <__adddf3>
 8009df4:	4606      	mov	r6, r0
 8009df6:	4628      	mov	r0, r5
 8009df8:	460f      	mov	r7, r1
 8009dfa:	f7f6 fba3 	bl	8000544 <__aeabi_i2d>
 8009dfe:	a364      	add	r3, pc, #400	; (adr r3, 8009f90 <_dtoa_r+0x2e0>)
 8009e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e04:	f7f6 fc08 	bl	8000618 <__aeabi_dmul>
 8009e08:	4602      	mov	r2, r0
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	4630      	mov	r0, r6
 8009e0e:	4639      	mov	r1, r7
 8009e10:	f7f6 fa4c 	bl	80002ac <__adddf3>
 8009e14:	4606      	mov	r6, r0
 8009e16:	460f      	mov	r7, r1
 8009e18:	f7f6 feae 	bl	8000b78 <__aeabi_d2iz>
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	4683      	mov	fp, r0
 8009e20:	2300      	movs	r3, #0
 8009e22:	4630      	mov	r0, r6
 8009e24:	4639      	mov	r1, r7
 8009e26:	f7f6 fe69 	bl	8000afc <__aeabi_dcmplt>
 8009e2a:	b148      	cbz	r0, 8009e40 <_dtoa_r+0x190>
 8009e2c:	4658      	mov	r0, fp
 8009e2e:	f7f6 fb89 	bl	8000544 <__aeabi_i2d>
 8009e32:	4632      	mov	r2, r6
 8009e34:	463b      	mov	r3, r7
 8009e36:	f7f6 fe57 	bl	8000ae8 <__aeabi_dcmpeq>
 8009e3a:	b908      	cbnz	r0, 8009e40 <_dtoa_r+0x190>
 8009e3c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009e40:	f1bb 0f16 	cmp.w	fp, #22
 8009e44:	d857      	bhi.n	8009ef6 <_dtoa_r+0x246>
 8009e46:	4b5b      	ldr	r3, [pc, #364]	; (8009fb4 <_dtoa_r+0x304>)
 8009e48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e50:	ec51 0b18 	vmov	r0, r1, d8
 8009e54:	f7f6 fe52 	bl	8000afc <__aeabi_dcmplt>
 8009e58:	2800      	cmp	r0, #0
 8009e5a:	d04e      	beq.n	8009efa <_dtoa_r+0x24a>
 8009e5c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009e60:	2300      	movs	r3, #0
 8009e62:	930c      	str	r3, [sp, #48]	; 0x30
 8009e64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009e66:	1b5b      	subs	r3, r3, r5
 8009e68:	1e5a      	subs	r2, r3, #1
 8009e6a:	bf45      	ittet	mi
 8009e6c:	f1c3 0301 	rsbmi	r3, r3, #1
 8009e70:	9305      	strmi	r3, [sp, #20]
 8009e72:	2300      	movpl	r3, #0
 8009e74:	2300      	movmi	r3, #0
 8009e76:	9206      	str	r2, [sp, #24]
 8009e78:	bf54      	ite	pl
 8009e7a:	9305      	strpl	r3, [sp, #20]
 8009e7c:	9306      	strmi	r3, [sp, #24]
 8009e7e:	f1bb 0f00 	cmp.w	fp, #0
 8009e82:	db3c      	blt.n	8009efe <_dtoa_r+0x24e>
 8009e84:	9b06      	ldr	r3, [sp, #24]
 8009e86:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009e8a:	445b      	add	r3, fp
 8009e8c:	9306      	str	r3, [sp, #24]
 8009e8e:	2300      	movs	r3, #0
 8009e90:	9308      	str	r3, [sp, #32]
 8009e92:	9b07      	ldr	r3, [sp, #28]
 8009e94:	2b09      	cmp	r3, #9
 8009e96:	d868      	bhi.n	8009f6a <_dtoa_r+0x2ba>
 8009e98:	2b05      	cmp	r3, #5
 8009e9a:	bfc4      	itt	gt
 8009e9c:	3b04      	subgt	r3, #4
 8009e9e:	9307      	strgt	r3, [sp, #28]
 8009ea0:	9b07      	ldr	r3, [sp, #28]
 8009ea2:	f1a3 0302 	sub.w	r3, r3, #2
 8009ea6:	bfcc      	ite	gt
 8009ea8:	2500      	movgt	r5, #0
 8009eaa:	2501      	movle	r5, #1
 8009eac:	2b03      	cmp	r3, #3
 8009eae:	f200 8085 	bhi.w	8009fbc <_dtoa_r+0x30c>
 8009eb2:	e8df f003 	tbb	[pc, r3]
 8009eb6:	3b2e      	.short	0x3b2e
 8009eb8:	5839      	.short	0x5839
 8009eba:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009ebe:	441d      	add	r5, r3
 8009ec0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009ec4:	2b20      	cmp	r3, #32
 8009ec6:	bfc1      	itttt	gt
 8009ec8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009ecc:	fa08 f803 	lslgt.w	r8, r8, r3
 8009ed0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009ed4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009ed8:	bfd6      	itet	le
 8009eda:	f1c3 0320 	rsble	r3, r3, #32
 8009ede:	ea48 0003 	orrgt.w	r0, r8, r3
 8009ee2:	fa06 f003 	lslle.w	r0, r6, r3
 8009ee6:	f7f6 fb1d 	bl	8000524 <__aeabi_ui2d>
 8009eea:	2201      	movs	r2, #1
 8009eec:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009ef0:	3d01      	subs	r5, #1
 8009ef2:	920e      	str	r2, [sp, #56]	; 0x38
 8009ef4:	e76f      	b.n	8009dd6 <_dtoa_r+0x126>
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	e7b3      	b.n	8009e62 <_dtoa_r+0x1b2>
 8009efa:	900c      	str	r0, [sp, #48]	; 0x30
 8009efc:	e7b2      	b.n	8009e64 <_dtoa_r+0x1b4>
 8009efe:	9b05      	ldr	r3, [sp, #20]
 8009f00:	eba3 030b 	sub.w	r3, r3, fp
 8009f04:	9305      	str	r3, [sp, #20]
 8009f06:	f1cb 0300 	rsb	r3, fp, #0
 8009f0a:	9308      	str	r3, [sp, #32]
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f10:	e7bf      	b.n	8009e92 <_dtoa_r+0x1e2>
 8009f12:	2300      	movs	r3, #0
 8009f14:	9309      	str	r3, [sp, #36]	; 0x24
 8009f16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	dc52      	bgt.n	8009fc2 <_dtoa_r+0x312>
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	9301      	str	r3, [sp, #4]
 8009f20:	9304      	str	r3, [sp, #16]
 8009f22:	461a      	mov	r2, r3
 8009f24:	920a      	str	r2, [sp, #40]	; 0x28
 8009f26:	e00b      	b.n	8009f40 <_dtoa_r+0x290>
 8009f28:	2301      	movs	r3, #1
 8009f2a:	e7f3      	b.n	8009f14 <_dtoa_r+0x264>
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	9309      	str	r3, [sp, #36]	; 0x24
 8009f30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f32:	445b      	add	r3, fp
 8009f34:	9301      	str	r3, [sp, #4]
 8009f36:	3301      	adds	r3, #1
 8009f38:	2b01      	cmp	r3, #1
 8009f3a:	9304      	str	r3, [sp, #16]
 8009f3c:	bfb8      	it	lt
 8009f3e:	2301      	movlt	r3, #1
 8009f40:	69e0      	ldr	r0, [r4, #28]
 8009f42:	2100      	movs	r1, #0
 8009f44:	2204      	movs	r2, #4
 8009f46:	f102 0614 	add.w	r6, r2, #20
 8009f4a:	429e      	cmp	r6, r3
 8009f4c:	d93d      	bls.n	8009fca <_dtoa_r+0x31a>
 8009f4e:	6041      	str	r1, [r0, #4]
 8009f50:	4620      	mov	r0, r4
 8009f52:	f000 fd9f 	bl	800aa94 <_Balloc>
 8009f56:	9000      	str	r0, [sp, #0]
 8009f58:	2800      	cmp	r0, #0
 8009f5a:	d139      	bne.n	8009fd0 <_dtoa_r+0x320>
 8009f5c:	4b16      	ldr	r3, [pc, #88]	; (8009fb8 <_dtoa_r+0x308>)
 8009f5e:	4602      	mov	r2, r0
 8009f60:	f240 11af 	movw	r1, #431	; 0x1af
 8009f64:	e6bd      	b.n	8009ce2 <_dtoa_r+0x32>
 8009f66:	2301      	movs	r3, #1
 8009f68:	e7e1      	b.n	8009f2e <_dtoa_r+0x27e>
 8009f6a:	2501      	movs	r5, #1
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	9307      	str	r3, [sp, #28]
 8009f70:	9509      	str	r5, [sp, #36]	; 0x24
 8009f72:	f04f 33ff 	mov.w	r3, #4294967295
 8009f76:	9301      	str	r3, [sp, #4]
 8009f78:	9304      	str	r3, [sp, #16]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	2312      	movs	r3, #18
 8009f7e:	e7d1      	b.n	8009f24 <_dtoa_r+0x274>
 8009f80:	636f4361 	.word	0x636f4361
 8009f84:	3fd287a7 	.word	0x3fd287a7
 8009f88:	8b60c8b3 	.word	0x8b60c8b3
 8009f8c:	3fc68a28 	.word	0x3fc68a28
 8009f90:	509f79fb 	.word	0x509f79fb
 8009f94:	3fd34413 	.word	0x3fd34413
 8009f98:	0800bd31 	.word	0x0800bd31
 8009f9c:	0800bd48 	.word	0x0800bd48
 8009fa0:	7ff00000 	.word	0x7ff00000
 8009fa4:	0800bd2d 	.word	0x0800bd2d
 8009fa8:	0800bd24 	.word	0x0800bd24
 8009fac:	0800bd01 	.word	0x0800bd01
 8009fb0:	3ff80000 	.word	0x3ff80000
 8009fb4:	0800be38 	.word	0x0800be38
 8009fb8:	0800bda0 	.word	0x0800bda0
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	9309      	str	r3, [sp, #36]	; 0x24
 8009fc0:	e7d7      	b.n	8009f72 <_dtoa_r+0x2c2>
 8009fc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fc4:	9301      	str	r3, [sp, #4]
 8009fc6:	9304      	str	r3, [sp, #16]
 8009fc8:	e7ba      	b.n	8009f40 <_dtoa_r+0x290>
 8009fca:	3101      	adds	r1, #1
 8009fcc:	0052      	lsls	r2, r2, #1
 8009fce:	e7ba      	b.n	8009f46 <_dtoa_r+0x296>
 8009fd0:	69e3      	ldr	r3, [r4, #28]
 8009fd2:	9a00      	ldr	r2, [sp, #0]
 8009fd4:	601a      	str	r2, [r3, #0]
 8009fd6:	9b04      	ldr	r3, [sp, #16]
 8009fd8:	2b0e      	cmp	r3, #14
 8009fda:	f200 80a8 	bhi.w	800a12e <_dtoa_r+0x47e>
 8009fde:	2d00      	cmp	r5, #0
 8009fe0:	f000 80a5 	beq.w	800a12e <_dtoa_r+0x47e>
 8009fe4:	f1bb 0f00 	cmp.w	fp, #0
 8009fe8:	dd38      	ble.n	800a05c <_dtoa_r+0x3ac>
 8009fea:	4bc0      	ldr	r3, [pc, #768]	; (800a2ec <_dtoa_r+0x63c>)
 8009fec:	f00b 020f 	and.w	r2, fp, #15
 8009ff0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ff4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009ff8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009ffc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a000:	d019      	beq.n	800a036 <_dtoa_r+0x386>
 800a002:	4bbb      	ldr	r3, [pc, #748]	; (800a2f0 <_dtoa_r+0x640>)
 800a004:	ec51 0b18 	vmov	r0, r1, d8
 800a008:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a00c:	f7f6 fc2e 	bl	800086c <__aeabi_ddiv>
 800a010:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a014:	f008 080f 	and.w	r8, r8, #15
 800a018:	2503      	movs	r5, #3
 800a01a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a2f0 <_dtoa_r+0x640>
 800a01e:	f1b8 0f00 	cmp.w	r8, #0
 800a022:	d10a      	bne.n	800a03a <_dtoa_r+0x38a>
 800a024:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a028:	4632      	mov	r2, r6
 800a02a:	463b      	mov	r3, r7
 800a02c:	f7f6 fc1e 	bl	800086c <__aeabi_ddiv>
 800a030:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a034:	e02b      	b.n	800a08e <_dtoa_r+0x3de>
 800a036:	2502      	movs	r5, #2
 800a038:	e7ef      	b.n	800a01a <_dtoa_r+0x36a>
 800a03a:	f018 0f01 	tst.w	r8, #1
 800a03e:	d008      	beq.n	800a052 <_dtoa_r+0x3a2>
 800a040:	4630      	mov	r0, r6
 800a042:	4639      	mov	r1, r7
 800a044:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a048:	f7f6 fae6 	bl	8000618 <__aeabi_dmul>
 800a04c:	3501      	adds	r5, #1
 800a04e:	4606      	mov	r6, r0
 800a050:	460f      	mov	r7, r1
 800a052:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a056:	f109 0908 	add.w	r9, r9, #8
 800a05a:	e7e0      	b.n	800a01e <_dtoa_r+0x36e>
 800a05c:	f000 809f 	beq.w	800a19e <_dtoa_r+0x4ee>
 800a060:	f1cb 0600 	rsb	r6, fp, #0
 800a064:	4ba1      	ldr	r3, [pc, #644]	; (800a2ec <_dtoa_r+0x63c>)
 800a066:	4fa2      	ldr	r7, [pc, #648]	; (800a2f0 <_dtoa_r+0x640>)
 800a068:	f006 020f 	and.w	r2, r6, #15
 800a06c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a074:	ec51 0b18 	vmov	r0, r1, d8
 800a078:	f7f6 face 	bl	8000618 <__aeabi_dmul>
 800a07c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a080:	1136      	asrs	r6, r6, #4
 800a082:	2300      	movs	r3, #0
 800a084:	2502      	movs	r5, #2
 800a086:	2e00      	cmp	r6, #0
 800a088:	d17e      	bne.n	800a188 <_dtoa_r+0x4d8>
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d1d0      	bne.n	800a030 <_dtoa_r+0x380>
 800a08e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a090:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a094:	2b00      	cmp	r3, #0
 800a096:	f000 8084 	beq.w	800a1a2 <_dtoa_r+0x4f2>
 800a09a:	4b96      	ldr	r3, [pc, #600]	; (800a2f4 <_dtoa_r+0x644>)
 800a09c:	2200      	movs	r2, #0
 800a09e:	4640      	mov	r0, r8
 800a0a0:	4649      	mov	r1, r9
 800a0a2:	f7f6 fd2b 	bl	8000afc <__aeabi_dcmplt>
 800a0a6:	2800      	cmp	r0, #0
 800a0a8:	d07b      	beq.n	800a1a2 <_dtoa_r+0x4f2>
 800a0aa:	9b04      	ldr	r3, [sp, #16]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d078      	beq.n	800a1a2 <_dtoa_r+0x4f2>
 800a0b0:	9b01      	ldr	r3, [sp, #4]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	dd39      	ble.n	800a12a <_dtoa_r+0x47a>
 800a0b6:	4b90      	ldr	r3, [pc, #576]	; (800a2f8 <_dtoa_r+0x648>)
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	4640      	mov	r0, r8
 800a0bc:	4649      	mov	r1, r9
 800a0be:	f7f6 faab 	bl	8000618 <__aeabi_dmul>
 800a0c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0c6:	9e01      	ldr	r6, [sp, #4]
 800a0c8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a0cc:	3501      	adds	r5, #1
 800a0ce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a0d2:	4628      	mov	r0, r5
 800a0d4:	f7f6 fa36 	bl	8000544 <__aeabi_i2d>
 800a0d8:	4642      	mov	r2, r8
 800a0da:	464b      	mov	r3, r9
 800a0dc:	f7f6 fa9c 	bl	8000618 <__aeabi_dmul>
 800a0e0:	4b86      	ldr	r3, [pc, #536]	; (800a2fc <_dtoa_r+0x64c>)
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	f7f6 f8e2 	bl	80002ac <__adddf3>
 800a0e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a0ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0f0:	9303      	str	r3, [sp, #12]
 800a0f2:	2e00      	cmp	r6, #0
 800a0f4:	d158      	bne.n	800a1a8 <_dtoa_r+0x4f8>
 800a0f6:	4b82      	ldr	r3, [pc, #520]	; (800a300 <_dtoa_r+0x650>)
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	4640      	mov	r0, r8
 800a0fc:	4649      	mov	r1, r9
 800a0fe:	f7f6 f8d3 	bl	80002a8 <__aeabi_dsub>
 800a102:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a106:	4680      	mov	r8, r0
 800a108:	4689      	mov	r9, r1
 800a10a:	f7f6 fd15 	bl	8000b38 <__aeabi_dcmpgt>
 800a10e:	2800      	cmp	r0, #0
 800a110:	f040 8296 	bne.w	800a640 <_dtoa_r+0x990>
 800a114:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a118:	4640      	mov	r0, r8
 800a11a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a11e:	4649      	mov	r1, r9
 800a120:	f7f6 fcec 	bl	8000afc <__aeabi_dcmplt>
 800a124:	2800      	cmp	r0, #0
 800a126:	f040 8289 	bne.w	800a63c <_dtoa_r+0x98c>
 800a12a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a12e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a130:	2b00      	cmp	r3, #0
 800a132:	f2c0 814e 	blt.w	800a3d2 <_dtoa_r+0x722>
 800a136:	f1bb 0f0e 	cmp.w	fp, #14
 800a13a:	f300 814a 	bgt.w	800a3d2 <_dtoa_r+0x722>
 800a13e:	4b6b      	ldr	r3, [pc, #428]	; (800a2ec <_dtoa_r+0x63c>)
 800a140:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a144:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	f280 80dc 	bge.w	800a308 <_dtoa_r+0x658>
 800a150:	9b04      	ldr	r3, [sp, #16]
 800a152:	2b00      	cmp	r3, #0
 800a154:	f300 80d8 	bgt.w	800a308 <_dtoa_r+0x658>
 800a158:	f040 826f 	bne.w	800a63a <_dtoa_r+0x98a>
 800a15c:	4b68      	ldr	r3, [pc, #416]	; (800a300 <_dtoa_r+0x650>)
 800a15e:	2200      	movs	r2, #0
 800a160:	4640      	mov	r0, r8
 800a162:	4649      	mov	r1, r9
 800a164:	f7f6 fa58 	bl	8000618 <__aeabi_dmul>
 800a168:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a16c:	f7f6 fcda 	bl	8000b24 <__aeabi_dcmpge>
 800a170:	9e04      	ldr	r6, [sp, #16]
 800a172:	4637      	mov	r7, r6
 800a174:	2800      	cmp	r0, #0
 800a176:	f040 8245 	bne.w	800a604 <_dtoa_r+0x954>
 800a17a:	9d00      	ldr	r5, [sp, #0]
 800a17c:	2331      	movs	r3, #49	; 0x31
 800a17e:	f805 3b01 	strb.w	r3, [r5], #1
 800a182:	f10b 0b01 	add.w	fp, fp, #1
 800a186:	e241      	b.n	800a60c <_dtoa_r+0x95c>
 800a188:	07f2      	lsls	r2, r6, #31
 800a18a:	d505      	bpl.n	800a198 <_dtoa_r+0x4e8>
 800a18c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a190:	f7f6 fa42 	bl	8000618 <__aeabi_dmul>
 800a194:	3501      	adds	r5, #1
 800a196:	2301      	movs	r3, #1
 800a198:	1076      	asrs	r6, r6, #1
 800a19a:	3708      	adds	r7, #8
 800a19c:	e773      	b.n	800a086 <_dtoa_r+0x3d6>
 800a19e:	2502      	movs	r5, #2
 800a1a0:	e775      	b.n	800a08e <_dtoa_r+0x3de>
 800a1a2:	9e04      	ldr	r6, [sp, #16]
 800a1a4:	465f      	mov	r7, fp
 800a1a6:	e792      	b.n	800a0ce <_dtoa_r+0x41e>
 800a1a8:	9900      	ldr	r1, [sp, #0]
 800a1aa:	4b50      	ldr	r3, [pc, #320]	; (800a2ec <_dtoa_r+0x63c>)
 800a1ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a1b0:	4431      	add	r1, r6
 800a1b2:	9102      	str	r1, [sp, #8]
 800a1b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a1b6:	eeb0 9a47 	vmov.f32	s18, s14
 800a1ba:	eef0 9a67 	vmov.f32	s19, s15
 800a1be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a1c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a1c6:	2900      	cmp	r1, #0
 800a1c8:	d044      	beq.n	800a254 <_dtoa_r+0x5a4>
 800a1ca:	494e      	ldr	r1, [pc, #312]	; (800a304 <_dtoa_r+0x654>)
 800a1cc:	2000      	movs	r0, #0
 800a1ce:	f7f6 fb4d 	bl	800086c <__aeabi_ddiv>
 800a1d2:	ec53 2b19 	vmov	r2, r3, d9
 800a1d6:	f7f6 f867 	bl	80002a8 <__aeabi_dsub>
 800a1da:	9d00      	ldr	r5, [sp, #0]
 800a1dc:	ec41 0b19 	vmov	d9, r0, r1
 800a1e0:	4649      	mov	r1, r9
 800a1e2:	4640      	mov	r0, r8
 800a1e4:	f7f6 fcc8 	bl	8000b78 <__aeabi_d2iz>
 800a1e8:	4606      	mov	r6, r0
 800a1ea:	f7f6 f9ab 	bl	8000544 <__aeabi_i2d>
 800a1ee:	4602      	mov	r2, r0
 800a1f0:	460b      	mov	r3, r1
 800a1f2:	4640      	mov	r0, r8
 800a1f4:	4649      	mov	r1, r9
 800a1f6:	f7f6 f857 	bl	80002a8 <__aeabi_dsub>
 800a1fa:	3630      	adds	r6, #48	; 0x30
 800a1fc:	f805 6b01 	strb.w	r6, [r5], #1
 800a200:	ec53 2b19 	vmov	r2, r3, d9
 800a204:	4680      	mov	r8, r0
 800a206:	4689      	mov	r9, r1
 800a208:	f7f6 fc78 	bl	8000afc <__aeabi_dcmplt>
 800a20c:	2800      	cmp	r0, #0
 800a20e:	d164      	bne.n	800a2da <_dtoa_r+0x62a>
 800a210:	4642      	mov	r2, r8
 800a212:	464b      	mov	r3, r9
 800a214:	4937      	ldr	r1, [pc, #220]	; (800a2f4 <_dtoa_r+0x644>)
 800a216:	2000      	movs	r0, #0
 800a218:	f7f6 f846 	bl	80002a8 <__aeabi_dsub>
 800a21c:	ec53 2b19 	vmov	r2, r3, d9
 800a220:	f7f6 fc6c 	bl	8000afc <__aeabi_dcmplt>
 800a224:	2800      	cmp	r0, #0
 800a226:	f040 80b6 	bne.w	800a396 <_dtoa_r+0x6e6>
 800a22a:	9b02      	ldr	r3, [sp, #8]
 800a22c:	429d      	cmp	r5, r3
 800a22e:	f43f af7c 	beq.w	800a12a <_dtoa_r+0x47a>
 800a232:	4b31      	ldr	r3, [pc, #196]	; (800a2f8 <_dtoa_r+0x648>)
 800a234:	ec51 0b19 	vmov	r0, r1, d9
 800a238:	2200      	movs	r2, #0
 800a23a:	f7f6 f9ed 	bl	8000618 <__aeabi_dmul>
 800a23e:	4b2e      	ldr	r3, [pc, #184]	; (800a2f8 <_dtoa_r+0x648>)
 800a240:	ec41 0b19 	vmov	d9, r0, r1
 800a244:	2200      	movs	r2, #0
 800a246:	4640      	mov	r0, r8
 800a248:	4649      	mov	r1, r9
 800a24a:	f7f6 f9e5 	bl	8000618 <__aeabi_dmul>
 800a24e:	4680      	mov	r8, r0
 800a250:	4689      	mov	r9, r1
 800a252:	e7c5      	b.n	800a1e0 <_dtoa_r+0x530>
 800a254:	ec51 0b17 	vmov	r0, r1, d7
 800a258:	f7f6 f9de 	bl	8000618 <__aeabi_dmul>
 800a25c:	9b02      	ldr	r3, [sp, #8]
 800a25e:	9d00      	ldr	r5, [sp, #0]
 800a260:	930f      	str	r3, [sp, #60]	; 0x3c
 800a262:	ec41 0b19 	vmov	d9, r0, r1
 800a266:	4649      	mov	r1, r9
 800a268:	4640      	mov	r0, r8
 800a26a:	f7f6 fc85 	bl	8000b78 <__aeabi_d2iz>
 800a26e:	4606      	mov	r6, r0
 800a270:	f7f6 f968 	bl	8000544 <__aeabi_i2d>
 800a274:	3630      	adds	r6, #48	; 0x30
 800a276:	4602      	mov	r2, r0
 800a278:	460b      	mov	r3, r1
 800a27a:	4640      	mov	r0, r8
 800a27c:	4649      	mov	r1, r9
 800a27e:	f7f6 f813 	bl	80002a8 <__aeabi_dsub>
 800a282:	f805 6b01 	strb.w	r6, [r5], #1
 800a286:	9b02      	ldr	r3, [sp, #8]
 800a288:	429d      	cmp	r5, r3
 800a28a:	4680      	mov	r8, r0
 800a28c:	4689      	mov	r9, r1
 800a28e:	f04f 0200 	mov.w	r2, #0
 800a292:	d124      	bne.n	800a2de <_dtoa_r+0x62e>
 800a294:	4b1b      	ldr	r3, [pc, #108]	; (800a304 <_dtoa_r+0x654>)
 800a296:	ec51 0b19 	vmov	r0, r1, d9
 800a29a:	f7f6 f807 	bl	80002ac <__adddf3>
 800a29e:	4602      	mov	r2, r0
 800a2a0:	460b      	mov	r3, r1
 800a2a2:	4640      	mov	r0, r8
 800a2a4:	4649      	mov	r1, r9
 800a2a6:	f7f6 fc47 	bl	8000b38 <__aeabi_dcmpgt>
 800a2aa:	2800      	cmp	r0, #0
 800a2ac:	d173      	bne.n	800a396 <_dtoa_r+0x6e6>
 800a2ae:	ec53 2b19 	vmov	r2, r3, d9
 800a2b2:	4914      	ldr	r1, [pc, #80]	; (800a304 <_dtoa_r+0x654>)
 800a2b4:	2000      	movs	r0, #0
 800a2b6:	f7f5 fff7 	bl	80002a8 <__aeabi_dsub>
 800a2ba:	4602      	mov	r2, r0
 800a2bc:	460b      	mov	r3, r1
 800a2be:	4640      	mov	r0, r8
 800a2c0:	4649      	mov	r1, r9
 800a2c2:	f7f6 fc1b 	bl	8000afc <__aeabi_dcmplt>
 800a2c6:	2800      	cmp	r0, #0
 800a2c8:	f43f af2f 	beq.w	800a12a <_dtoa_r+0x47a>
 800a2cc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a2ce:	1e6b      	subs	r3, r5, #1
 800a2d0:	930f      	str	r3, [sp, #60]	; 0x3c
 800a2d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a2d6:	2b30      	cmp	r3, #48	; 0x30
 800a2d8:	d0f8      	beq.n	800a2cc <_dtoa_r+0x61c>
 800a2da:	46bb      	mov	fp, r7
 800a2dc:	e04a      	b.n	800a374 <_dtoa_r+0x6c4>
 800a2de:	4b06      	ldr	r3, [pc, #24]	; (800a2f8 <_dtoa_r+0x648>)
 800a2e0:	f7f6 f99a 	bl	8000618 <__aeabi_dmul>
 800a2e4:	4680      	mov	r8, r0
 800a2e6:	4689      	mov	r9, r1
 800a2e8:	e7bd      	b.n	800a266 <_dtoa_r+0x5b6>
 800a2ea:	bf00      	nop
 800a2ec:	0800be38 	.word	0x0800be38
 800a2f0:	0800be10 	.word	0x0800be10
 800a2f4:	3ff00000 	.word	0x3ff00000
 800a2f8:	40240000 	.word	0x40240000
 800a2fc:	401c0000 	.word	0x401c0000
 800a300:	40140000 	.word	0x40140000
 800a304:	3fe00000 	.word	0x3fe00000
 800a308:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a30c:	9d00      	ldr	r5, [sp, #0]
 800a30e:	4642      	mov	r2, r8
 800a310:	464b      	mov	r3, r9
 800a312:	4630      	mov	r0, r6
 800a314:	4639      	mov	r1, r7
 800a316:	f7f6 faa9 	bl	800086c <__aeabi_ddiv>
 800a31a:	f7f6 fc2d 	bl	8000b78 <__aeabi_d2iz>
 800a31e:	9001      	str	r0, [sp, #4]
 800a320:	f7f6 f910 	bl	8000544 <__aeabi_i2d>
 800a324:	4642      	mov	r2, r8
 800a326:	464b      	mov	r3, r9
 800a328:	f7f6 f976 	bl	8000618 <__aeabi_dmul>
 800a32c:	4602      	mov	r2, r0
 800a32e:	460b      	mov	r3, r1
 800a330:	4630      	mov	r0, r6
 800a332:	4639      	mov	r1, r7
 800a334:	f7f5 ffb8 	bl	80002a8 <__aeabi_dsub>
 800a338:	9e01      	ldr	r6, [sp, #4]
 800a33a:	9f04      	ldr	r7, [sp, #16]
 800a33c:	3630      	adds	r6, #48	; 0x30
 800a33e:	f805 6b01 	strb.w	r6, [r5], #1
 800a342:	9e00      	ldr	r6, [sp, #0]
 800a344:	1bae      	subs	r6, r5, r6
 800a346:	42b7      	cmp	r7, r6
 800a348:	4602      	mov	r2, r0
 800a34a:	460b      	mov	r3, r1
 800a34c:	d134      	bne.n	800a3b8 <_dtoa_r+0x708>
 800a34e:	f7f5 ffad 	bl	80002ac <__adddf3>
 800a352:	4642      	mov	r2, r8
 800a354:	464b      	mov	r3, r9
 800a356:	4606      	mov	r6, r0
 800a358:	460f      	mov	r7, r1
 800a35a:	f7f6 fbed 	bl	8000b38 <__aeabi_dcmpgt>
 800a35e:	b9c8      	cbnz	r0, 800a394 <_dtoa_r+0x6e4>
 800a360:	4642      	mov	r2, r8
 800a362:	464b      	mov	r3, r9
 800a364:	4630      	mov	r0, r6
 800a366:	4639      	mov	r1, r7
 800a368:	f7f6 fbbe 	bl	8000ae8 <__aeabi_dcmpeq>
 800a36c:	b110      	cbz	r0, 800a374 <_dtoa_r+0x6c4>
 800a36e:	9b01      	ldr	r3, [sp, #4]
 800a370:	07db      	lsls	r3, r3, #31
 800a372:	d40f      	bmi.n	800a394 <_dtoa_r+0x6e4>
 800a374:	4651      	mov	r1, sl
 800a376:	4620      	mov	r0, r4
 800a378:	f000 fbcc 	bl	800ab14 <_Bfree>
 800a37c:	2300      	movs	r3, #0
 800a37e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a380:	702b      	strb	r3, [r5, #0]
 800a382:	f10b 0301 	add.w	r3, fp, #1
 800a386:	6013      	str	r3, [r2, #0]
 800a388:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	f43f ace2 	beq.w	8009d54 <_dtoa_r+0xa4>
 800a390:	601d      	str	r5, [r3, #0]
 800a392:	e4df      	b.n	8009d54 <_dtoa_r+0xa4>
 800a394:	465f      	mov	r7, fp
 800a396:	462b      	mov	r3, r5
 800a398:	461d      	mov	r5, r3
 800a39a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a39e:	2a39      	cmp	r2, #57	; 0x39
 800a3a0:	d106      	bne.n	800a3b0 <_dtoa_r+0x700>
 800a3a2:	9a00      	ldr	r2, [sp, #0]
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d1f7      	bne.n	800a398 <_dtoa_r+0x6e8>
 800a3a8:	9900      	ldr	r1, [sp, #0]
 800a3aa:	2230      	movs	r2, #48	; 0x30
 800a3ac:	3701      	adds	r7, #1
 800a3ae:	700a      	strb	r2, [r1, #0]
 800a3b0:	781a      	ldrb	r2, [r3, #0]
 800a3b2:	3201      	adds	r2, #1
 800a3b4:	701a      	strb	r2, [r3, #0]
 800a3b6:	e790      	b.n	800a2da <_dtoa_r+0x62a>
 800a3b8:	4ba3      	ldr	r3, [pc, #652]	; (800a648 <_dtoa_r+0x998>)
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	f7f6 f92c 	bl	8000618 <__aeabi_dmul>
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	4606      	mov	r6, r0
 800a3c6:	460f      	mov	r7, r1
 800a3c8:	f7f6 fb8e 	bl	8000ae8 <__aeabi_dcmpeq>
 800a3cc:	2800      	cmp	r0, #0
 800a3ce:	d09e      	beq.n	800a30e <_dtoa_r+0x65e>
 800a3d0:	e7d0      	b.n	800a374 <_dtoa_r+0x6c4>
 800a3d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3d4:	2a00      	cmp	r2, #0
 800a3d6:	f000 80ca 	beq.w	800a56e <_dtoa_r+0x8be>
 800a3da:	9a07      	ldr	r2, [sp, #28]
 800a3dc:	2a01      	cmp	r2, #1
 800a3de:	f300 80ad 	bgt.w	800a53c <_dtoa_r+0x88c>
 800a3e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a3e4:	2a00      	cmp	r2, #0
 800a3e6:	f000 80a5 	beq.w	800a534 <_dtoa_r+0x884>
 800a3ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a3ee:	9e08      	ldr	r6, [sp, #32]
 800a3f0:	9d05      	ldr	r5, [sp, #20]
 800a3f2:	9a05      	ldr	r2, [sp, #20]
 800a3f4:	441a      	add	r2, r3
 800a3f6:	9205      	str	r2, [sp, #20]
 800a3f8:	9a06      	ldr	r2, [sp, #24]
 800a3fa:	2101      	movs	r1, #1
 800a3fc:	441a      	add	r2, r3
 800a3fe:	4620      	mov	r0, r4
 800a400:	9206      	str	r2, [sp, #24]
 800a402:	f000 fc3d 	bl	800ac80 <__i2b>
 800a406:	4607      	mov	r7, r0
 800a408:	b165      	cbz	r5, 800a424 <_dtoa_r+0x774>
 800a40a:	9b06      	ldr	r3, [sp, #24]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	dd09      	ble.n	800a424 <_dtoa_r+0x774>
 800a410:	42ab      	cmp	r3, r5
 800a412:	9a05      	ldr	r2, [sp, #20]
 800a414:	bfa8      	it	ge
 800a416:	462b      	movge	r3, r5
 800a418:	1ad2      	subs	r2, r2, r3
 800a41a:	9205      	str	r2, [sp, #20]
 800a41c:	9a06      	ldr	r2, [sp, #24]
 800a41e:	1aed      	subs	r5, r5, r3
 800a420:	1ad3      	subs	r3, r2, r3
 800a422:	9306      	str	r3, [sp, #24]
 800a424:	9b08      	ldr	r3, [sp, #32]
 800a426:	b1f3      	cbz	r3, 800a466 <_dtoa_r+0x7b6>
 800a428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	f000 80a3 	beq.w	800a576 <_dtoa_r+0x8c6>
 800a430:	2e00      	cmp	r6, #0
 800a432:	dd10      	ble.n	800a456 <_dtoa_r+0x7a6>
 800a434:	4639      	mov	r1, r7
 800a436:	4632      	mov	r2, r6
 800a438:	4620      	mov	r0, r4
 800a43a:	f000 fce1 	bl	800ae00 <__pow5mult>
 800a43e:	4652      	mov	r2, sl
 800a440:	4601      	mov	r1, r0
 800a442:	4607      	mov	r7, r0
 800a444:	4620      	mov	r0, r4
 800a446:	f000 fc31 	bl	800acac <__multiply>
 800a44a:	4651      	mov	r1, sl
 800a44c:	4680      	mov	r8, r0
 800a44e:	4620      	mov	r0, r4
 800a450:	f000 fb60 	bl	800ab14 <_Bfree>
 800a454:	46c2      	mov	sl, r8
 800a456:	9b08      	ldr	r3, [sp, #32]
 800a458:	1b9a      	subs	r2, r3, r6
 800a45a:	d004      	beq.n	800a466 <_dtoa_r+0x7b6>
 800a45c:	4651      	mov	r1, sl
 800a45e:	4620      	mov	r0, r4
 800a460:	f000 fcce 	bl	800ae00 <__pow5mult>
 800a464:	4682      	mov	sl, r0
 800a466:	2101      	movs	r1, #1
 800a468:	4620      	mov	r0, r4
 800a46a:	f000 fc09 	bl	800ac80 <__i2b>
 800a46e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a470:	2b00      	cmp	r3, #0
 800a472:	4606      	mov	r6, r0
 800a474:	f340 8081 	ble.w	800a57a <_dtoa_r+0x8ca>
 800a478:	461a      	mov	r2, r3
 800a47a:	4601      	mov	r1, r0
 800a47c:	4620      	mov	r0, r4
 800a47e:	f000 fcbf 	bl	800ae00 <__pow5mult>
 800a482:	9b07      	ldr	r3, [sp, #28]
 800a484:	2b01      	cmp	r3, #1
 800a486:	4606      	mov	r6, r0
 800a488:	dd7a      	ble.n	800a580 <_dtoa_r+0x8d0>
 800a48a:	f04f 0800 	mov.w	r8, #0
 800a48e:	6933      	ldr	r3, [r6, #16]
 800a490:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a494:	6918      	ldr	r0, [r3, #16]
 800a496:	f000 fba5 	bl	800abe4 <__hi0bits>
 800a49a:	f1c0 0020 	rsb	r0, r0, #32
 800a49e:	9b06      	ldr	r3, [sp, #24]
 800a4a0:	4418      	add	r0, r3
 800a4a2:	f010 001f 	ands.w	r0, r0, #31
 800a4a6:	f000 8094 	beq.w	800a5d2 <_dtoa_r+0x922>
 800a4aa:	f1c0 0320 	rsb	r3, r0, #32
 800a4ae:	2b04      	cmp	r3, #4
 800a4b0:	f340 8085 	ble.w	800a5be <_dtoa_r+0x90e>
 800a4b4:	9b05      	ldr	r3, [sp, #20]
 800a4b6:	f1c0 001c 	rsb	r0, r0, #28
 800a4ba:	4403      	add	r3, r0
 800a4bc:	9305      	str	r3, [sp, #20]
 800a4be:	9b06      	ldr	r3, [sp, #24]
 800a4c0:	4403      	add	r3, r0
 800a4c2:	4405      	add	r5, r0
 800a4c4:	9306      	str	r3, [sp, #24]
 800a4c6:	9b05      	ldr	r3, [sp, #20]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	dd05      	ble.n	800a4d8 <_dtoa_r+0x828>
 800a4cc:	4651      	mov	r1, sl
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	4620      	mov	r0, r4
 800a4d2:	f000 fcef 	bl	800aeb4 <__lshift>
 800a4d6:	4682      	mov	sl, r0
 800a4d8:	9b06      	ldr	r3, [sp, #24]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	dd05      	ble.n	800a4ea <_dtoa_r+0x83a>
 800a4de:	4631      	mov	r1, r6
 800a4e0:	461a      	mov	r2, r3
 800a4e2:	4620      	mov	r0, r4
 800a4e4:	f000 fce6 	bl	800aeb4 <__lshift>
 800a4e8:	4606      	mov	r6, r0
 800a4ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d072      	beq.n	800a5d6 <_dtoa_r+0x926>
 800a4f0:	4631      	mov	r1, r6
 800a4f2:	4650      	mov	r0, sl
 800a4f4:	f000 fd4a 	bl	800af8c <__mcmp>
 800a4f8:	2800      	cmp	r0, #0
 800a4fa:	da6c      	bge.n	800a5d6 <_dtoa_r+0x926>
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	4651      	mov	r1, sl
 800a500:	220a      	movs	r2, #10
 800a502:	4620      	mov	r0, r4
 800a504:	f000 fb28 	bl	800ab58 <__multadd>
 800a508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a50a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a50e:	4682      	mov	sl, r0
 800a510:	2b00      	cmp	r3, #0
 800a512:	f000 81b0 	beq.w	800a876 <_dtoa_r+0xbc6>
 800a516:	2300      	movs	r3, #0
 800a518:	4639      	mov	r1, r7
 800a51a:	220a      	movs	r2, #10
 800a51c:	4620      	mov	r0, r4
 800a51e:	f000 fb1b 	bl	800ab58 <__multadd>
 800a522:	9b01      	ldr	r3, [sp, #4]
 800a524:	2b00      	cmp	r3, #0
 800a526:	4607      	mov	r7, r0
 800a528:	f300 8096 	bgt.w	800a658 <_dtoa_r+0x9a8>
 800a52c:	9b07      	ldr	r3, [sp, #28]
 800a52e:	2b02      	cmp	r3, #2
 800a530:	dc59      	bgt.n	800a5e6 <_dtoa_r+0x936>
 800a532:	e091      	b.n	800a658 <_dtoa_r+0x9a8>
 800a534:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a536:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a53a:	e758      	b.n	800a3ee <_dtoa_r+0x73e>
 800a53c:	9b04      	ldr	r3, [sp, #16]
 800a53e:	1e5e      	subs	r6, r3, #1
 800a540:	9b08      	ldr	r3, [sp, #32]
 800a542:	42b3      	cmp	r3, r6
 800a544:	bfbf      	itttt	lt
 800a546:	9b08      	ldrlt	r3, [sp, #32]
 800a548:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a54a:	9608      	strlt	r6, [sp, #32]
 800a54c:	1af3      	sublt	r3, r6, r3
 800a54e:	bfb4      	ite	lt
 800a550:	18d2      	addlt	r2, r2, r3
 800a552:	1b9e      	subge	r6, r3, r6
 800a554:	9b04      	ldr	r3, [sp, #16]
 800a556:	bfbc      	itt	lt
 800a558:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a55a:	2600      	movlt	r6, #0
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	bfb7      	itett	lt
 800a560:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a564:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a568:	1a9d      	sublt	r5, r3, r2
 800a56a:	2300      	movlt	r3, #0
 800a56c:	e741      	b.n	800a3f2 <_dtoa_r+0x742>
 800a56e:	9e08      	ldr	r6, [sp, #32]
 800a570:	9d05      	ldr	r5, [sp, #20]
 800a572:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a574:	e748      	b.n	800a408 <_dtoa_r+0x758>
 800a576:	9a08      	ldr	r2, [sp, #32]
 800a578:	e770      	b.n	800a45c <_dtoa_r+0x7ac>
 800a57a:	9b07      	ldr	r3, [sp, #28]
 800a57c:	2b01      	cmp	r3, #1
 800a57e:	dc19      	bgt.n	800a5b4 <_dtoa_r+0x904>
 800a580:	9b02      	ldr	r3, [sp, #8]
 800a582:	b9bb      	cbnz	r3, 800a5b4 <_dtoa_r+0x904>
 800a584:	9b03      	ldr	r3, [sp, #12]
 800a586:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a58a:	b99b      	cbnz	r3, 800a5b4 <_dtoa_r+0x904>
 800a58c:	9b03      	ldr	r3, [sp, #12]
 800a58e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a592:	0d1b      	lsrs	r3, r3, #20
 800a594:	051b      	lsls	r3, r3, #20
 800a596:	b183      	cbz	r3, 800a5ba <_dtoa_r+0x90a>
 800a598:	9b05      	ldr	r3, [sp, #20]
 800a59a:	3301      	adds	r3, #1
 800a59c:	9305      	str	r3, [sp, #20]
 800a59e:	9b06      	ldr	r3, [sp, #24]
 800a5a0:	3301      	adds	r3, #1
 800a5a2:	9306      	str	r3, [sp, #24]
 800a5a4:	f04f 0801 	mov.w	r8, #1
 800a5a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	f47f af6f 	bne.w	800a48e <_dtoa_r+0x7de>
 800a5b0:	2001      	movs	r0, #1
 800a5b2:	e774      	b.n	800a49e <_dtoa_r+0x7ee>
 800a5b4:	f04f 0800 	mov.w	r8, #0
 800a5b8:	e7f6      	b.n	800a5a8 <_dtoa_r+0x8f8>
 800a5ba:	4698      	mov	r8, r3
 800a5bc:	e7f4      	b.n	800a5a8 <_dtoa_r+0x8f8>
 800a5be:	d082      	beq.n	800a4c6 <_dtoa_r+0x816>
 800a5c0:	9a05      	ldr	r2, [sp, #20]
 800a5c2:	331c      	adds	r3, #28
 800a5c4:	441a      	add	r2, r3
 800a5c6:	9205      	str	r2, [sp, #20]
 800a5c8:	9a06      	ldr	r2, [sp, #24]
 800a5ca:	441a      	add	r2, r3
 800a5cc:	441d      	add	r5, r3
 800a5ce:	9206      	str	r2, [sp, #24]
 800a5d0:	e779      	b.n	800a4c6 <_dtoa_r+0x816>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	e7f4      	b.n	800a5c0 <_dtoa_r+0x910>
 800a5d6:	9b04      	ldr	r3, [sp, #16]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	dc37      	bgt.n	800a64c <_dtoa_r+0x99c>
 800a5dc:	9b07      	ldr	r3, [sp, #28]
 800a5de:	2b02      	cmp	r3, #2
 800a5e0:	dd34      	ble.n	800a64c <_dtoa_r+0x99c>
 800a5e2:	9b04      	ldr	r3, [sp, #16]
 800a5e4:	9301      	str	r3, [sp, #4]
 800a5e6:	9b01      	ldr	r3, [sp, #4]
 800a5e8:	b963      	cbnz	r3, 800a604 <_dtoa_r+0x954>
 800a5ea:	4631      	mov	r1, r6
 800a5ec:	2205      	movs	r2, #5
 800a5ee:	4620      	mov	r0, r4
 800a5f0:	f000 fab2 	bl	800ab58 <__multadd>
 800a5f4:	4601      	mov	r1, r0
 800a5f6:	4606      	mov	r6, r0
 800a5f8:	4650      	mov	r0, sl
 800a5fa:	f000 fcc7 	bl	800af8c <__mcmp>
 800a5fe:	2800      	cmp	r0, #0
 800a600:	f73f adbb 	bgt.w	800a17a <_dtoa_r+0x4ca>
 800a604:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a606:	9d00      	ldr	r5, [sp, #0]
 800a608:	ea6f 0b03 	mvn.w	fp, r3
 800a60c:	f04f 0800 	mov.w	r8, #0
 800a610:	4631      	mov	r1, r6
 800a612:	4620      	mov	r0, r4
 800a614:	f000 fa7e 	bl	800ab14 <_Bfree>
 800a618:	2f00      	cmp	r7, #0
 800a61a:	f43f aeab 	beq.w	800a374 <_dtoa_r+0x6c4>
 800a61e:	f1b8 0f00 	cmp.w	r8, #0
 800a622:	d005      	beq.n	800a630 <_dtoa_r+0x980>
 800a624:	45b8      	cmp	r8, r7
 800a626:	d003      	beq.n	800a630 <_dtoa_r+0x980>
 800a628:	4641      	mov	r1, r8
 800a62a:	4620      	mov	r0, r4
 800a62c:	f000 fa72 	bl	800ab14 <_Bfree>
 800a630:	4639      	mov	r1, r7
 800a632:	4620      	mov	r0, r4
 800a634:	f000 fa6e 	bl	800ab14 <_Bfree>
 800a638:	e69c      	b.n	800a374 <_dtoa_r+0x6c4>
 800a63a:	2600      	movs	r6, #0
 800a63c:	4637      	mov	r7, r6
 800a63e:	e7e1      	b.n	800a604 <_dtoa_r+0x954>
 800a640:	46bb      	mov	fp, r7
 800a642:	4637      	mov	r7, r6
 800a644:	e599      	b.n	800a17a <_dtoa_r+0x4ca>
 800a646:	bf00      	nop
 800a648:	40240000 	.word	0x40240000
 800a64c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a64e:	2b00      	cmp	r3, #0
 800a650:	f000 80c8 	beq.w	800a7e4 <_dtoa_r+0xb34>
 800a654:	9b04      	ldr	r3, [sp, #16]
 800a656:	9301      	str	r3, [sp, #4]
 800a658:	2d00      	cmp	r5, #0
 800a65a:	dd05      	ble.n	800a668 <_dtoa_r+0x9b8>
 800a65c:	4639      	mov	r1, r7
 800a65e:	462a      	mov	r2, r5
 800a660:	4620      	mov	r0, r4
 800a662:	f000 fc27 	bl	800aeb4 <__lshift>
 800a666:	4607      	mov	r7, r0
 800a668:	f1b8 0f00 	cmp.w	r8, #0
 800a66c:	d05b      	beq.n	800a726 <_dtoa_r+0xa76>
 800a66e:	6879      	ldr	r1, [r7, #4]
 800a670:	4620      	mov	r0, r4
 800a672:	f000 fa0f 	bl	800aa94 <_Balloc>
 800a676:	4605      	mov	r5, r0
 800a678:	b928      	cbnz	r0, 800a686 <_dtoa_r+0x9d6>
 800a67a:	4b83      	ldr	r3, [pc, #524]	; (800a888 <_dtoa_r+0xbd8>)
 800a67c:	4602      	mov	r2, r0
 800a67e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a682:	f7ff bb2e 	b.w	8009ce2 <_dtoa_r+0x32>
 800a686:	693a      	ldr	r2, [r7, #16]
 800a688:	3202      	adds	r2, #2
 800a68a:	0092      	lsls	r2, r2, #2
 800a68c:	f107 010c 	add.w	r1, r7, #12
 800a690:	300c      	adds	r0, #12
 800a692:	f001 f985 	bl	800b9a0 <memcpy>
 800a696:	2201      	movs	r2, #1
 800a698:	4629      	mov	r1, r5
 800a69a:	4620      	mov	r0, r4
 800a69c:	f000 fc0a 	bl	800aeb4 <__lshift>
 800a6a0:	9b00      	ldr	r3, [sp, #0]
 800a6a2:	3301      	adds	r3, #1
 800a6a4:	9304      	str	r3, [sp, #16]
 800a6a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6aa:	4413      	add	r3, r2
 800a6ac:	9308      	str	r3, [sp, #32]
 800a6ae:	9b02      	ldr	r3, [sp, #8]
 800a6b0:	f003 0301 	and.w	r3, r3, #1
 800a6b4:	46b8      	mov	r8, r7
 800a6b6:	9306      	str	r3, [sp, #24]
 800a6b8:	4607      	mov	r7, r0
 800a6ba:	9b04      	ldr	r3, [sp, #16]
 800a6bc:	4631      	mov	r1, r6
 800a6be:	3b01      	subs	r3, #1
 800a6c0:	4650      	mov	r0, sl
 800a6c2:	9301      	str	r3, [sp, #4]
 800a6c4:	f7ff fa69 	bl	8009b9a <quorem>
 800a6c8:	4641      	mov	r1, r8
 800a6ca:	9002      	str	r0, [sp, #8]
 800a6cc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a6d0:	4650      	mov	r0, sl
 800a6d2:	f000 fc5b 	bl	800af8c <__mcmp>
 800a6d6:	463a      	mov	r2, r7
 800a6d8:	9005      	str	r0, [sp, #20]
 800a6da:	4631      	mov	r1, r6
 800a6dc:	4620      	mov	r0, r4
 800a6de:	f000 fc71 	bl	800afc4 <__mdiff>
 800a6e2:	68c2      	ldr	r2, [r0, #12]
 800a6e4:	4605      	mov	r5, r0
 800a6e6:	bb02      	cbnz	r2, 800a72a <_dtoa_r+0xa7a>
 800a6e8:	4601      	mov	r1, r0
 800a6ea:	4650      	mov	r0, sl
 800a6ec:	f000 fc4e 	bl	800af8c <__mcmp>
 800a6f0:	4602      	mov	r2, r0
 800a6f2:	4629      	mov	r1, r5
 800a6f4:	4620      	mov	r0, r4
 800a6f6:	9209      	str	r2, [sp, #36]	; 0x24
 800a6f8:	f000 fa0c 	bl	800ab14 <_Bfree>
 800a6fc:	9b07      	ldr	r3, [sp, #28]
 800a6fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a700:	9d04      	ldr	r5, [sp, #16]
 800a702:	ea43 0102 	orr.w	r1, r3, r2
 800a706:	9b06      	ldr	r3, [sp, #24]
 800a708:	4319      	orrs	r1, r3
 800a70a:	d110      	bne.n	800a72e <_dtoa_r+0xa7e>
 800a70c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a710:	d029      	beq.n	800a766 <_dtoa_r+0xab6>
 800a712:	9b05      	ldr	r3, [sp, #20]
 800a714:	2b00      	cmp	r3, #0
 800a716:	dd02      	ble.n	800a71e <_dtoa_r+0xa6e>
 800a718:	9b02      	ldr	r3, [sp, #8]
 800a71a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a71e:	9b01      	ldr	r3, [sp, #4]
 800a720:	f883 9000 	strb.w	r9, [r3]
 800a724:	e774      	b.n	800a610 <_dtoa_r+0x960>
 800a726:	4638      	mov	r0, r7
 800a728:	e7ba      	b.n	800a6a0 <_dtoa_r+0x9f0>
 800a72a:	2201      	movs	r2, #1
 800a72c:	e7e1      	b.n	800a6f2 <_dtoa_r+0xa42>
 800a72e:	9b05      	ldr	r3, [sp, #20]
 800a730:	2b00      	cmp	r3, #0
 800a732:	db04      	blt.n	800a73e <_dtoa_r+0xa8e>
 800a734:	9907      	ldr	r1, [sp, #28]
 800a736:	430b      	orrs	r3, r1
 800a738:	9906      	ldr	r1, [sp, #24]
 800a73a:	430b      	orrs	r3, r1
 800a73c:	d120      	bne.n	800a780 <_dtoa_r+0xad0>
 800a73e:	2a00      	cmp	r2, #0
 800a740:	dded      	ble.n	800a71e <_dtoa_r+0xa6e>
 800a742:	4651      	mov	r1, sl
 800a744:	2201      	movs	r2, #1
 800a746:	4620      	mov	r0, r4
 800a748:	f000 fbb4 	bl	800aeb4 <__lshift>
 800a74c:	4631      	mov	r1, r6
 800a74e:	4682      	mov	sl, r0
 800a750:	f000 fc1c 	bl	800af8c <__mcmp>
 800a754:	2800      	cmp	r0, #0
 800a756:	dc03      	bgt.n	800a760 <_dtoa_r+0xab0>
 800a758:	d1e1      	bne.n	800a71e <_dtoa_r+0xa6e>
 800a75a:	f019 0f01 	tst.w	r9, #1
 800a75e:	d0de      	beq.n	800a71e <_dtoa_r+0xa6e>
 800a760:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a764:	d1d8      	bne.n	800a718 <_dtoa_r+0xa68>
 800a766:	9a01      	ldr	r2, [sp, #4]
 800a768:	2339      	movs	r3, #57	; 0x39
 800a76a:	7013      	strb	r3, [r2, #0]
 800a76c:	462b      	mov	r3, r5
 800a76e:	461d      	mov	r5, r3
 800a770:	3b01      	subs	r3, #1
 800a772:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a776:	2a39      	cmp	r2, #57	; 0x39
 800a778:	d06c      	beq.n	800a854 <_dtoa_r+0xba4>
 800a77a:	3201      	adds	r2, #1
 800a77c:	701a      	strb	r2, [r3, #0]
 800a77e:	e747      	b.n	800a610 <_dtoa_r+0x960>
 800a780:	2a00      	cmp	r2, #0
 800a782:	dd07      	ble.n	800a794 <_dtoa_r+0xae4>
 800a784:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a788:	d0ed      	beq.n	800a766 <_dtoa_r+0xab6>
 800a78a:	9a01      	ldr	r2, [sp, #4]
 800a78c:	f109 0301 	add.w	r3, r9, #1
 800a790:	7013      	strb	r3, [r2, #0]
 800a792:	e73d      	b.n	800a610 <_dtoa_r+0x960>
 800a794:	9b04      	ldr	r3, [sp, #16]
 800a796:	9a08      	ldr	r2, [sp, #32]
 800a798:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d043      	beq.n	800a828 <_dtoa_r+0xb78>
 800a7a0:	4651      	mov	r1, sl
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	220a      	movs	r2, #10
 800a7a6:	4620      	mov	r0, r4
 800a7a8:	f000 f9d6 	bl	800ab58 <__multadd>
 800a7ac:	45b8      	cmp	r8, r7
 800a7ae:	4682      	mov	sl, r0
 800a7b0:	f04f 0300 	mov.w	r3, #0
 800a7b4:	f04f 020a 	mov.w	r2, #10
 800a7b8:	4641      	mov	r1, r8
 800a7ba:	4620      	mov	r0, r4
 800a7bc:	d107      	bne.n	800a7ce <_dtoa_r+0xb1e>
 800a7be:	f000 f9cb 	bl	800ab58 <__multadd>
 800a7c2:	4680      	mov	r8, r0
 800a7c4:	4607      	mov	r7, r0
 800a7c6:	9b04      	ldr	r3, [sp, #16]
 800a7c8:	3301      	adds	r3, #1
 800a7ca:	9304      	str	r3, [sp, #16]
 800a7cc:	e775      	b.n	800a6ba <_dtoa_r+0xa0a>
 800a7ce:	f000 f9c3 	bl	800ab58 <__multadd>
 800a7d2:	4639      	mov	r1, r7
 800a7d4:	4680      	mov	r8, r0
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	220a      	movs	r2, #10
 800a7da:	4620      	mov	r0, r4
 800a7dc:	f000 f9bc 	bl	800ab58 <__multadd>
 800a7e0:	4607      	mov	r7, r0
 800a7e2:	e7f0      	b.n	800a7c6 <_dtoa_r+0xb16>
 800a7e4:	9b04      	ldr	r3, [sp, #16]
 800a7e6:	9301      	str	r3, [sp, #4]
 800a7e8:	9d00      	ldr	r5, [sp, #0]
 800a7ea:	4631      	mov	r1, r6
 800a7ec:	4650      	mov	r0, sl
 800a7ee:	f7ff f9d4 	bl	8009b9a <quorem>
 800a7f2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a7f6:	9b00      	ldr	r3, [sp, #0]
 800a7f8:	f805 9b01 	strb.w	r9, [r5], #1
 800a7fc:	1aea      	subs	r2, r5, r3
 800a7fe:	9b01      	ldr	r3, [sp, #4]
 800a800:	4293      	cmp	r3, r2
 800a802:	dd07      	ble.n	800a814 <_dtoa_r+0xb64>
 800a804:	4651      	mov	r1, sl
 800a806:	2300      	movs	r3, #0
 800a808:	220a      	movs	r2, #10
 800a80a:	4620      	mov	r0, r4
 800a80c:	f000 f9a4 	bl	800ab58 <__multadd>
 800a810:	4682      	mov	sl, r0
 800a812:	e7ea      	b.n	800a7ea <_dtoa_r+0xb3a>
 800a814:	9b01      	ldr	r3, [sp, #4]
 800a816:	2b00      	cmp	r3, #0
 800a818:	bfc8      	it	gt
 800a81a:	461d      	movgt	r5, r3
 800a81c:	9b00      	ldr	r3, [sp, #0]
 800a81e:	bfd8      	it	le
 800a820:	2501      	movle	r5, #1
 800a822:	441d      	add	r5, r3
 800a824:	f04f 0800 	mov.w	r8, #0
 800a828:	4651      	mov	r1, sl
 800a82a:	2201      	movs	r2, #1
 800a82c:	4620      	mov	r0, r4
 800a82e:	f000 fb41 	bl	800aeb4 <__lshift>
 800a832:	4631      	mov	r1, r6
 800a834:	4682      	mov	sl, r0
 800a836:	f000 fba9 	bl	800af8c <__mcmp>
 800a83a:	2800      	cmp	r0, #0
 800a83c:	dc96      	bgt.n	800a76c <_dtoa_r+0xabc>
 800a83e:	d102      	bne.n	800a846 <_dtoa_r+0xb96>
 800a840:	f019 0f01 	tst.w	r9, #1
 800a844:	d192      	bne.n	800a76c <_dtoa_r+0xabc>
 800a846:	462b      	mov	r3, r5
 800a848:	461d      	mov	r5, r3
 800a84a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a84e:	2a30      	cmp	r2, #48	; 0x30
 800a850:	d0fa      	beq.n	800a848 <_dtoa_r+0xb98>
 800a852:	e6dd      	b.n	800a610 <_dtoa_r+0x960>
 800a854:	9a00      	ldr	r2, [sp, #0]
 800a856:	429a      	cmp	r2, r3
 800a858:	d189      	bne.n	800a76e <_dtoa_r+0xabe>
 800a85a:	f10b 0b01 	add.w	fp, fp, #1
 800a85e:	2331      	movs	r3, #49	; 0x31
 800a860:	e796      	b.n	800a790 <_dtoa_r+0xae0>
 800a862:	4b0a      	ldr	r3, [pc, #40]	; (800a88c <_dtoa_r+0xbdc>)
 800a864:	f7ff ba99 	b.w	8009d9a <_dtoa_r+0xea>
 800a868:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	f47f aa6d 	bne.w	8009d4a <_dtoa_r+0x9a>
 800a870:	4b07      	ldr	r3, [pc, #28]	; (800a890 <_dtoa_r+0xbe0>)
 800a872:	f7ff ba92 	b.w	8009d9a <_dtoa_r+0xea>
 800a876:	9b01      	ldr	r3, [sp, #4]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	dcb5      	bgt.n	800a7e8 <_dtoa_r+0xb38>
 800a87c:	9b07      	ldr	r3, [sp, #28]
 800a87e:	2b02      	cmp	r3, #2
 800a880:	f73f aeb1 	bgt.w	800a5e6 <_dtoa_r+0x936>
 800a884:	e7b0      	b.n	800a7e8 <_dtoa_r+0xb38>
 800a886:	bf00      	nop
 800a888:	0800bda0 	.word	0x0800bda0
 800a88c:	0800bd00 	.word	0x0800bd00
 800a890:	0800bd24 	.word	0x0800bd24

0800a894 <_free_r>:
 800a894:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a896:	2900      	cmp	r1, #0
 800a898:	d044      	beq.n	800a924 <_free_r+0x90>
 800a89a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a89e:	9001      	str	r0, [sp, #4]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	f1a1 0404 	sub.w	r4, r1, #4
 800a8a6:	bfb8      	it	lt
 800a8a8:	18e4      	addlt	r4, r4, r3
 800a8aa:	f000 f8e7 	bl	800aa7c <__malloc_lock>
 800a8ae:	4a1e      	ldr	r2, [pc, #120]	; (800a928 <_free_r+0x94>)
 800a8b0:	9801      	ldr	r0, [sp, #4]
 800a8b2:	6813      	ldr	r3, [r2, #0]
 800a8b4:	b933      	cbnz	r3, 800a8c4 <_free_r+0x30>
 800a8b6:	6063      	str	r3, [r4, #4]
 800a8b8:	6014      	str	r4, [r2, #0]
 800a8ba:	b003      	add	sp, #12
 800a8bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a8c0:	f000 b8e2 	b.w	800aa88 <__malloc_unlock>
 800a8c4:	42a3      	cmp	r3, r4
 800a8c6:	d908      	bls.n	800a8da <_free_r+0x46>
 800a8c8:	6825      	ldr	r5, [r4, #0]
 800a8ca:	1961      	adds	r1, r4, r5
 800a8cc:	428b      	cmp	r3, r1
 800a8ce:	bf01      	itttt	eq
 800a8d0:	6819      	ldreq	r1, [r3, #0]
 800a8d2:	685b      	ldreq	r3, [r3, #4]
 800a8d4:	1949      	addeq	r1, r1, r5
 800a8d6:	6021      	streq	r1, [r4, #0]
 800a8d8:	e7ed      	b.n	800a8b6 <_free_r+0x22>
 800a8da:	461a      	mov	r2, r3
 800a8dc:	685b      	ldr	r3, [r3, #4]
 800a8de:	b10b      	cbz	r3, 800a8e4 <_free_r+0x50>
 800a8e0:	42a3      	cmp	r3, r4
 800a8e2:	d9fa      	bls.n	800a8da <_free_r+0x46>
 800a8e4:	6811      	ldr	r1, [r2, #0]
 800a8e6:	1855      	adds	r5, r2, r1
 800a8e8:	42a5      	cmp	r5, r4
 800a8ea:	d10b      	bne.n	800a904 <_free_r+0x70>
 800a8ec:	6824      	ldr	r4, [r4, #0]
 800a8ee:	4421      	add	r1, r4
 800a8f0:	1854      	adds	r4, r2, r1
 800a8f2:	42a3      	cmp	r3, r4
 800a8f4:	6011      	str	r1, [r2, #0]
 800a8f6:	d1e0      	bne.n	800a8ba <_free_r+0x26>
 800a8f8:	681c      	ldr	r4, [r3, #0]
 800a8fa:	685b      	ldr	r3, [r3, #4]
 800a8fc:	6053      	str	r3, [r2, #4]
 800a8fe:	440c      	add	r4, r1
 800a900:	6014      	str	r4, [r2, #0]
 800a902:	e7da      	b.n	800a8ba <_free_r+0x26>
 800a904:	d902      	bls.n	800a90c <_free_r+0x78>
 800a906:	230c      	movs	r3, #12
 800a908:	6003      	str	r3, [r0, #0]
 800a90a:	e7d6      	b.n	800a8ba <_free_r+0x26>
 800a90c:	6825      	ldr	r5, [r4, #0]
 800a90e:	1961      	adds	r1, r4, r5
 800a910:	428b      	cmp	r3, r1
 800a912:	bf04      	itt	eq
 800a914:	6819      	ldreq	r1, [r3, #0]
 800a916:	685b      	ldreq	r3, [r3, #4]
 800a918:	6063      	str	r3, [r4, #4]
 800a91a:	bf04      	itt	eq
 800a91c:	1949      	addeq	r1, r1, r5
 800a91e:	6021      	streq	r1, [r4, #0]
 800a920:	6054      	str	r4, [r2, #4]
 800a922:	e7ca      	b.n	800a8ba <_free_r+0x26>
 800a924:	b003      	add	sp, #12
 800a926:	bd30      	pop	{r4, r5, pc}
 800a928:	20000ff8 	.word	0x20000ff8

0800a92c <malloc>:
 800a92c:	4b02      	ldr	r3, [pc, #8]	; (800a938 <malloc+0xc>)
 800a92e:	4601      	mov	r1, r0
 800a930:	6818      	ldr	r0, [r3, #0]
 800a932:	f000 b823 	b.w	800a97c <_malloc_r>
 800a936:	bf00      	nop
 800a938:	20000068 	.word	0x20000068

0800a93c <sbrk_aligned>:
 800a93c:	b570      	push	{r4, r5, r6, lr}
 800a93e:	4e0e      	ldr	r6, [pc, #56]	; (800a978 <sbrk_aligned+0x3c>)
 800a940:	460c      	mov	r4, r1
 800a942:	6831      	ldr	r1, [r6, #0]
 800a944:	4605      	mov	r5, r0
 800a946:	b911      	cbnz	r1, 800a94e <sbrk_aligned+0x12>
 800a948:	f001 f81a 	bl	800b980 <_sbrk_r>
 800a94c:	6030      	str	r0, [r6, #0]
 800a94e:	4621      	mov	r1, r4
 800a950:	4628      	mov	r0, r5
 800a952:	f001 f815 	bl	800b980 <_sbrk_r>
 800a956:	1c43      	adds	r3, r0, #1
 800a958:	d00a      	beq.n	800a970 <sbrk_aligned+0x34>
 800a95a:	1cc4      	adds	r4, r0, #3
 800a95c:	f024 0403 	bic.w	r4, r4, #3
 800a960:	42a0      	cmp	r0, r4
 800a962:	d007      	beq.n	800a974 <sbrk_aligned+0x38>
 800a964:	1a21      	subs	r1, r4, r0
 800a966:	4628      	mov	r0, r5
 800a968:	f001 f80a 	bl	800b980 <_sbrk_r>
 800a96c:	3001      	adds	r0, #1
 800a96e:	d101      	bne.n	800a974 <sbrk_aligned+0x38>
 800a970:	f04f 34ff 	mov.w	r4, #4294967295
 800a974:	4620      	mov	r0, r4
 800a976:	bd70      	pop	{r4, r5, r6, pc}
 800a978:	20000ffc 	.word	0x20000ffc

0800a97c <_malloc_r>:
 800a97c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a980:	1ccd      	adds	r5, r1, #3
 800a982:	f025 0503 	bic.w	r5, r5, #3
 800a986:	3508      	adds	r5, #8
 800a988:	2d0c      	cmp	r5, #12
 800a98a:	bf38      	it	cc
 800a98c:	250c      	movcc	r5, #12
 800a98e:	2d00      	cmp	r5, #0
 800a990:	4607      	mov	r7, r0
 800a992:	db01      	blt.n	800a998 <_malloc_r+0x1c>
 800a994:	42a9      	cmp	r1, r5
 800a996:	d905      	bls.n	800a9a4 <_malloc_r+0x28>
 800a998:	230c      	movs	r3, #12
 800a99a:	603b      	str	r3, [r7, #0]
 800a99c:	2600      	movs	r6, #0
 800a99e:	4630      	mov	r0, r6
 800a9a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800aa78 <_malloc_r+0xfc>
 800a9a8:	f000 f868 	bl	800aa7c <__malloc_lock>
 800a9ac:	f8d8 3000 	ldr.w	r3, [r8]
 800a9b0:	461c      	mov	r4, r3
 800a9b2:	bb5c      	cbnz	r4, 800aa0c <_malloc_r+0x90>
 800a9b4:	4629      	mov	r1, r5
 800a9b6:	4638      	mov	r0, r7
 800a9b8:	f7ff ffc0 	bl	800a93c <sbrk_aligned>
 800a9bc:	1c43      	adds	r3, r0, #1
 800a9be:	4604      	mov	r4, r0
 800a9c0:	d155      	bne.n	800aa6e <_malloc_r+0xf2>
 800a9c2:	f8d8 4000 	ldr.w	r4, [r8]
 800a9c6:	4626      	mov	r6, r4
 800a9c8:	2e00      	cmp	r6, #0
 800a9ca:	d145      	bne.n	800aa58 <_malloc_r+0xdc>
 800a9cc:	2c00      	cmp	r4, #0
 800a9ce:	d048      	beq.n	800aa62 <_malloc_r+0xe6>
 800a9d0:	6823      	ldr	r3, [r4, #0]
 800a9d2:	4631      	mov	r1, r6
 800a9d4:	4638      	mov	r0, r7
 800a9d6:	eb04 0903 	add.w	r9, r4, r3
 800a9da:	f000 ffd1 	bl	800b980 <_sbrk_r>
 800a9de:	4581      	cmp	r9, r0
 800a9e0:	d13f      	bne.n	800aa62 <_malloc_r+0xe6>
 800a9e2:	6821      	ldr	r1, [r4, #0]
 800a9e4:	1a6d      	subs	r5, r5, r1
 800a9e6:	4629      	mov	r1, r5
 800a9e8:	4638      	mov	r0, r7
 800a9ea:	f7ff ffa7 	bl	800a93c <sbrk_aligned>
 800a9ee:	3001      	adds	r0, #1
 800a9f0:	d037      	beq.n	800aa62 <_malloc_r+0xe6>
 800a9f2:	6823      	ldr	r3, [r4, #0]
 800a9f4:	442b      	add	r3, r5
 800a9f6:	6023      	str	r3, [r4, #0]
 800a9f8:	f8d8 3000 	ldr.w	r3, [r8]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d038      	beq.n	800aa72 <_malloc_r+0xf6>
 800aa00:	685a      	ldr	r2, [r3, #4]
 800aa02:	42a2      	cmp	r2, r4
 800aa04:	d12b      	bne.n	800aa5e <_malloc_r+0xe2>
 800aa06:	2200      	movs	r2, #0
 800aa08:	605a      	str	r2, [r3, #4]
 800aa0a:	e00f      	b.n	800aa2c <_malloc_r+0xb0>
 800aa0c:	6822      	ldr	r2, [r4, #0]
 800aa0e:	1b52      	subs	r2, r2, r5
 800aa10:	d41f      	bmi.n	800aa52 <_malloc_r+0xd6>
 800aa12:	2a0b      	cmp	r2, #11
 800aa14:	d917      	bls.n	800aa46 <_malloc_r+0xca>
 800aa16:	1961      	adds	r1, r4, r5
 800aa18:	42a3      	cmp	r3, r4
 800aa1a:	6025      	str	r5, [r4, #0]
 800aa1c:	bf18      	it	ne
 800aa1e:	6059      	strne	r1, [r3, #4]
 800aa20:	6863      	ldr	r3, [r4, #4]
 800aa22:	bf08      	it	eq
 800aa24:	f8c8 1000 	streq.w	r1, [r8]
 800aa28:	5162      	str	r2, [r4, r5]
 800aa2a:	604b      	str	r3, [r1, #4]
 800aa2c:	4638      	mov	r0, r7
 800aa2e:	f104 060b 	add.w	r6, r4, #11
 800aa32:	f000 f829 	bl	800aa88 <__malloc_unlock>
 800aa36:	f026 0607 	bic.w	r6, r6, #7
 800aa3a:	1d23      	adds	r3, r4, #4
 800aa3c:	1af2      	subs	r2, r6, r3
 800aa3e:	d0ae      	beq.n	800a99e <_malloc_r+0x22>
 800aa40:	1b9b      	subs	r3, r3, r6
 800aa42:	50a3      	str	r3, [r4, r2]
 800aa44:	e7ab      	b.n	800a99e <_malloc_r+0x22>
 800aa46:	42a3      	cmp	r3, r4
 800aa48:	6862      	ldr	r2, [r4, #4]
 800aa4a:	d1dd      	bne.n	800aa08 <_malloc_r+0x8c>
 800aa4c:	f8c8 2000 	str.w	r2, [r8]
 800aa50:	e7ec      	b.n	800aa2c <_malloc_r+0xb0>
 800aa52:	4623      	mov	r3, r4
 800aa54:	6864      	ldr	r4, [r4, #4]
 800aa56:	e7ac      	b.n	800a9b2 <_malloc_r+0x36>
 800aa58:	4634      	mov	r4, r6
 800aa5a:	6876      	ldr	r6, [r6, #4]
 800aa5c:	e7b4      	b.n	800a9c8 <_malloc_r+0x4c>
 800aa5e:	4613      	mov	r3, r2
 800aa60:	e7cc      	b.n	800a9fc <_malloc_r+0x80>
 800aa62:	230c      	movs	r3, #12
 800aa64:	603b      	str	r3, [r7, #0]
 800aa66:	4638      	mov	r0, r7
 800aa68:	f000 f80e 	bl	800aa88 <__malloc_unlock>
 800aa6c:	e797      	b.n	800a99e <_malloc_r+0x22>
 800aa6e:	6025      	str	r5, [r4, #0]
 800aa70:	e7dc      	b.n	800aa2c <_malloc_r+0xb0>
 800aa72:	605b      	str	r3, [r3, #4]
 800aa74:	deff      	udf	#255	; 0xff
 800aa76:	bf00      	nop
 800aa78:	20000ff8 	.word	0x20000ff8

0800aa7c <__malloc_lock>:
 800aa7c:	4801      	ldr	r0, [pc, #4]	; (800aa84 <__malloc_lock+0x8>)
 800aa7e:	f7ff b88a 	b.w	8009b96 <__retarget_lock_acquire_recursive>
 800aa82:	bf00      	nop
 800aa84:	20000ff4 	.word	0x20000ff4

0800aa88 <__malloc_unlock>:
 800aa88:	4801      	ldr	r0, [pc, #4]	; (800aa90 <__malloc_unlock+0x8>)
 800aa8a:	f7ff b885 	b.w	8009b98 <__retarget_lock_release_recursive>
 800aa8e:	bf00      	nop
 800aa90:	20000ff4 	.word	0x20000ff4

0800aa94 <_Balloc>:
 800aa94:	b570      	push	{r4, r5, r6, lr}
 800aa96:	69c6      	ldr	r6, [r0, #28]
 800aa98:	4604      	mov	r4, r0
 800aa9a:	460d      	mov	r5, r1
 800aa9c:	b976      	cbnz	r6, 800aabc <_Balloc+0x28>
 800aa9e:	2010      	movs	r0, #16
 800aaa0:	f7ff ff44 	bl	800a92c <malloc>
 800aaa4:	4602      	mov	r2, r0
 800aaa6:	61e0      	str	r0, [r4, #28]
 800aaa8:	b920      	cbnz	r0, 800aab4 <_Balloc+0x20>
 800aaaa:	4b18      	ldr	r3, [pc, #96]	; (800ab0c <_Balloc+0x78>)
 800aaac:	4818      	ldr	r0, [pc, #96]	; (800ab10 <_Balloc+0x7c>)
 800aaae:	216b      	movs	r1, #107	; 0x6b
 800aab0:	f000 ff84 	bl	800b9bc <__assert_func>
 800aab4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aab8:	6006      	str	r6, [r0, #0]
 800aaba:	60c6      	str	r6, [r0, #12]
 800aabc:	69e6      	ldr	r6, [r4, #28]
 800aabe:	68f3      	ldr	r3, [r6, #12]
 800aac0:	b183      	cbz	r3, 800aae4 <_Balloc+0x50>
 800aac2:	69e3      	ldr	r3, [r4, #28]
 800aac4:	68db      	ldr	r3, [r3, #12]
 800aac6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aaca:	b9b8      	cbnz	r0, 800aafc <_Balloc+0x68>
 800aacc:	2101      	movs	r1, #1
 800aace:	fa01 f605 	lsl.w	r6, r1, r5
 800aad2:	1d72      	adds	r2, r6, #5
 800aad4:	0092      	lsls	r2, r2, #2
 800aad6:	4620      	mov	r0, r4
 800aad8:	f000 ff8e 	bl	800b9f8 <_calloc_r>
 800aadc:	b160      	cbz	r0, 800aaf8 <_Balloc+0x64>
 800aade:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aae2:	e00e      	b.n	800ab02 <_Balloc+0x6e>
 800aae4:	2221      	movs	r2, #33	; 0x21
 800aae6:	2104      	movs	r1, #4
 800aae8:	4620      	mov	r0, r4
 800aaea:	f000 ff85 	bl	800b9f8 <_calloc_r>
 800aaee:	69e3      	ldr	r3, [r4, #28]
 800aaf0:	60f0      	str	r0, [r6, #12]
 800aaf2:	68db      	ldr	r3, [r3, #12]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d1e4      	bne.n	800aac2 <_Balloc+0x2e>
 800aaf8:	2000      	movs	r0, #0
 800aafa:	bd70      	pop	{r4, r5, r6, pc}
 800aafc:	6802      	ldr	r2, [r0, #0]
 800aafe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ab02:	2300      	movs	r3, #0
 800ab04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ab08:	e7f7      	b.n	800aafa <_Balloc+0x66>
 800ab0a:	bf00      	nop
 800ab0c:	0800bd31 	.word	0x0800bd31
 800ab10:	0800bdb1 	.word	0x0800bdb1

0800ab14 <_Bfree>:
 800ab14:	b570      	push	{r4, r5, r6, lr}
 800ab16:	69c6      	ldr	r6, [r0, #28]
 800ab18:	4605      	mov	r5, r0
 800ab1a:	460c      	mov	r4, r1
 800ab1c:	b976      	cbnz	r6, 800ab3c <_Bfree+0x28>
 800ab1e:	2010      	movs	r0, #16
 800ab20:	f7ff ff04 	bl	800a92c <malloc>
 800ab24:	4602      	mov	r2, r0
 800ab26:	61e8      	str	r0, [r5, #28]
 800ab28:	b920      	cbnz	r0, 800ab34 <_Bfree+0x20>
 800ab2a:	4b09      	ldr	r3, [pc, #36]	; (800ab50 <_Bfree+0x3c>)
 800ab2c:	4809      	ldr	r0, [pc, #36]	; (800ab54 <_Bfree+0x40>)
 800ab2e:	218f      	movs	r1, #143	; 0x8f
 800ab30:	f000 ff44 	bl	800b9bc <__assert_func>
 800ab34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab38:	6006      	str	r6, [r0, #0]
 800ab3a:	60c6      	str	r6, [r0, #12]
 800ab3c:	b13c      	cbz	r4, 800ab4e <_Bfree+0x3a>
 800ab3e:	69eb      	ldr	r3, [r5, #28]
 800ab40:	6862      	ldr	r2, [r4, #4]
 800ab42:	68db      	ldr	r3, [r3, #12]
 800ab44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ab48:	6021      	str	r1, [r4, #0]
 800ab4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ab4e:	bd70      	pop	{r4, r5, r6, pc}
 800ab50:	0800bd31 	.word	0x0800bd31
 800ab54:	0800bdb1 	.word	0x0800bdb1

0800ab58 <__multadd>:
 800ab58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab5c:	690d      	ldr	r5, [r1, #16]
 800ab5e:	4607      	mov	r7, r0
 800ab60:	460c      	mov	r4, r1
 800ab62:	461e      	mov	r6, r3
 800ab64:	f101 0c14 	add.w	ip, r1, #20
 800ab68:	2000      	movs	r0, #0
 800ab6a:	f8dc 3000 	ldr.w	r3, [ip]
 800ab6e:	b299      	uxth	r1, r3
 800ab70:	fb02 6101 	mla	r1, r2, r1, r6
 800ab74:	0c1e      	lsrs	r6, r3, #16
 800ab76:	0c0b      	lsrs	r3, r1, #16
 800ab78:	fb02 3306 	mla	r3, r2, r6, r3
 800ab7c:	b289      	uxth	r1, r1
 800ab7e:	3001      	adds	r0, #1
 800ab80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ab84:	4285      	cmp	r5, r0
 800ab86:	f84c 1b04 	str.w	r1, [ip], #4
 800ab8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ab8e:	dcec      	bgt.n	800ab6a <__multadd+0x12>
 800ab90:	b30e      	cbz	r6, 800abd6 <__multadd+0x7e>
 800ab92:	68a3      	ldr	r3, [r4, #8]
 800ab94:	42ab      	cmp	r3, r5
 800ab96:	dc19      	bgt.n	800abcc <__multadd+0x74>
 800ab98:	6861      	ldr	r1, [r4, #4]
 800ab9a:	4638      	mov	r0, r7
 800ab9c:	3101      	adds	r1, #1
 800ab9e:	f7ff ff79 	bl	800aa94 <_Balloc>
 800aba2:	4680      	mov	r8, r0
 800aba4:	b928      	cbnz	r0, 800abb2 <__multadd+0x5a>
 800aba6:	4602      	mov	r2, r0
 800aba8:	4b0c      	ldr	r3, [pc, #48]	; (800abdc <__multadd+0x84>)
 800abaa:	480d      	ldr	r0, [pc, #52]	; (800abe0 <__multadd+0x88>)
 800abac:	21ba      	movs	r1, #186	; 0xba
 800abae:	f000 ff05 	bl	800b9bc <__assert_func>
 800abb2:	6922      	ldr	r2, [r4, #16]
 800abb4:	3202      	adds	r2, #2
 800abb6:	f104 010c 	add.w	r1, r4, #12
 800abba:	0092      	lsls	r2, r2, #2
 800abbc:	300c      	adds	r0, #12
 800abbe:	f000 feef 	bl	800b9a0 <memcpy>
 800abc2:	4621      	mov	r1, r4
 800abc4:	4638      	mov	r0, r7
 800abc6:	f7ff ffa5 	bl	800ab14 <_Bfree>
 800abca:	4644      	mov	r4, r8
 800abcc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800abd0:	3501      	adds	r5, #1
 800abd2:	615e      	str	r6, [r3, #20]
 800abd4:	6125      	str	r5, [r4, #16]
 800abd6:	4620      	mov	r0, r4
 800abd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abdc:	0800bda0 	.word	0x0800bda0
 800abe0:	0800bdb1 	.word	0x0800bdb1

0800abe4 <__hi0bits>:
 800abe4:	0c03      	lsrs	r3, r0, #16
 800abe6:	041b      	lsls	r3, r3, #16
 800abe8:	b9d3      	cbnz	r3, 800ac20 <__hi0bits+0x3c>
 800abea:	0400      	lsls	r0, r0, #16
 800abec:	2310      	movs	r3, #16
 800abee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800abf2:	bf04      	itt	eq
 800abf4:	0200      	lsleq	r0, r0, #8
 800abf6:	3308      	addeq	r3, #8
 800abf8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800abfc:	bf04      	itt	eq
 800abfe:	0100      	lsleq	r0, r0, #4
 800ac00:	3304      	addeq	r3, #4
 800ac02:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ac06:	bf04      	itt	eq
 800ac08:	0080      	lsleq	r0, r0, #2
 800ac0a:	3302      	addeq	r3, #2
 800ac0c:	2800      	cmp	r0, #0
 800ac0e:	db05      	blt.n	800ac1c <__hi0bits+0x38>
 800ac10:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ac14:	f103 0301 	add.w	r3, r3, #1
 800ac18:	bf08      	it	eq
 800ac1a:	2320      	moveq	r3, #32
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	4770      	bx	lr
 800ac20:	2300      	movs	r3, #0
 800ac22:	e7e4      	b.n	800abee <__hi0bits+0xa>

0800ac24 <__lo0bits>:
 800ac24:	6803      	ldr	r3, [r0, #0]
 800ac26:	f013 0207 	ands.w	r2, r3, #7
 800ac2a:	d00c      	beq.n	800ac46 <__lo0bits+0x22>
 800ac2c:	07d9      	lsls	r1, r3, #31
 800ac2e:	d422      	bmi.n	800ac76 <__lo0bits+0x52>
 800ac30:	079a      	lsls	r2, r3, #30
 800ac32:	bf49      	itett	mi
 800ac34:	085b      	lsrmi	r3, r3, #1
 800ac36:	089b      	lsrpl	r3, r3, #2
 800ac38:	6003      	strmi	r3, [r0, #0]
 800ac3a:	2201      	movmi	r2, #1
 800ac3c:	bf5c      	itt	pl
 800ac3e:	6003      	strpl	r3, [r0, #0]
 800ac40:	2202      	movpl	r2, #2
 800ac42:	4610      	mov	r0, r2
 800ac44:	4770      	bx	lr
 800ac46:	b299      	uxth	r1, r3
 800ac48:	b909      	cbnz	r1, 800ac4e <__lo0bits+0x2a>
 800ac4a:	0c1b      	lsrs	r3, r3, #16
 800ac4c:	2210      	movs	r2, #16
 800ac4e:	b2d9      	uxtb	r1, r3
 800ac50:	b909      	cbnz	r1, 800ac56 <__lo0bits+0x32>
 800ac52:	3208      	adds	r2, #8
 800ac54:	0a1b      	lsrs	r3, r3, #8
 800ac56:	0719      	lsls	r1, r3, #28
 800ac58:	bf04      	itt	eq
 800ac5a:	091b      	lsreq	r3, r3, #4
 800ac5c:	3204      	addeq	r2, #4
 800ac5e:	0799      	lsls	r1, r3, #30
 800ac60:	bf04      	itt	eq
 800ac62:	089b      	lsreq	r3, r3, #2
 800ac64:	3202      	addeq	r2, #2
 800ac66:	07d9      	lsls	r1, r3, #31
 800ac68:	d403      	bmi.n	800ac72 <__lo0bits+0x4e>
 800ac6a:	085b      	lsrs	r3, r3, #1
 800ac6c:	f102 0201 	add.w	r2, r2, #1
 800ac70:	d003      	beq.n	800ac7a <__lo0bits+0x56>
 800ac72:	6003      	str	r3, [r0, #0]
 800ac74:	e7e5      	b.n	800ac42 <__lo0bits+0x1e>
 800ac76:	2200      	movs	r2, #0
 800ac78:	e7e3      	b.n	800ac42 <__lo0bits+0x1e>
 800ac7a:	2220      	movs	r2, #32
 800ac7c:	e7e1      	b.n	800ac42 <__lo0bits+0x1e>
	...

0800ac80 <__i2b>:
 800ac80:	b510      	push	{r4, lr}
 800ac82:	460c      	mov	r4, r1
 800ac84:	2101      	movs	r1, #1
 800ac86:	f7ff ff05 	bl	800aa94 <_Balloc>
 800ac8a:	4602      	mov	r2, r0
 800ac8c:	b928      	cbnz	r0, 800ac9a <__i2b+0x1a>
 800ac8e:	4b05      	ldr	r3, [pc, #20]	; (800aca4 <__i2b+0x24>)
 800ac90:	4805      	ldr	r0, [pc, #20]	; (800aca8 <__i2b+0x28>)
 800ac92:	f240 1145 	movw	r1, #325	; 0x145
 800ac96:	f000 fe91 	bl	800b9bc <__assert_func>
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	6144      	str	r4, [r0, #20]
 800ac9e:	6103      	str	r3, [r0, #16]
 800aca0:	bd10      	pop	{r4, pc}
 800aca2:	bf00      	nop
 800aca4:	0800bda0 	.word	0x0800bda0
 800aca8:	0800bdb1 	.word	0x0800bdb1

0800acac <__multiply>:
 800acac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acb0:	4691      	mov	r9, r2
 800acb2:	690a      	ldr	r2, [r1, #16]
 800acb4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800acb8:	429a      	cmp	r2, r3
 800acba:	bfb8      	it	lt
 800acbc:	460b      	movlt	r3, r1
 800acbe:	460c      	mov	r4, r1
 800acc0:	bfbc      	itt	lt
 800acc2:	464c      	movlt	r4, r9
 800acc4:	4699      	movlt	r9, r3
 800acc6:	6927      	ldr	r7, [r4, #16]
 800acc8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800accc:	68a3      	ldr	r3, [r4, #8]
 800acce:	6861      	ldr	r1, [r4, #4]
 800acd0:	eb07 060a 	add.w	r6, r7, sl
 800acd4:	42b3      	cmp	r3, r6
 800acd6:	b085      	sub	sp, #20
 800acd8:	bfb8      	it	lt
 800acda:	3101      	addlt	r1, #1
 800acdc:	f7ff feda 	bl	800aa94 <_Balloc>
 800ace0:	b930      	cbnz	r0, 800acf0 <__multiply+0x44>
 800ace2:	4602      	mov	r2, r0
 800ace4:	4b44      	ldr	r3, [pc, #272]	; (800adf8 <__multiply+0x14c>)
 800ace6:	4845      	ldr	r0, [pc, #276]	; (800adfc <__multiply+0x150>)
 800ace8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800acec:	f000 fe66 	bl	800b9bc <__assert_func>
 800acf0:	f100 0514 	add.w	r5, r0, #20
 800acf4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800acf8:	462b      	mov	r3, r5
 800acfa:	2200      	movs	r2, #0
 800acfc:	4543      	cmp	r3, r8
 800acfe:	d321      	bcc.n	800ad44 <__multiply+0x98>
 800ad00:	f104 0314 	add.w	r3, r4, #20
 800ad04:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ad08:	f109 0314 	add.w	r3, r9, #20
 800ad0c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ad10:	9202      	str	r2, [sp, #8]
 800ad12:	1b3a      	subs	r2, r7, r4
 800ad14:	3a15      	subs	r2, #21
 800ad16:	f022 0203 	bic.w	r2, r2, #3
 800ad1a:	3204      	adds	r2, #4
 800ad1c:	f104 0115 	add.w	r1, r4, #21
 800ad20:	428f      	cmp	r7, r1
 800ad22:	bf38      	it	cc
 800ad24:	2204      	movcc	r2, #4
 800ad26:	9201      	str	r2, [sp, #4]
 800ad28:	9a02      	ldr	r2, [sp, #8]
 800ad2a:	9303      	str	r3, [sp, #12]
 800ad2c:	429a      	cmp	r2, r3
 800ad2e:	d80c      	bhi.n	800ad4a <__multiply+0x9e>
 800ad30:	2e00      	cmp	r6, #0
 800ad32:	dd03      	ble.n	800ad3c <__multiply+0x90>
 800ad34:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d05b      	beq.n	800adf4 <__multiply+0x148>
 800ad3c:	6106      	str	r6, [r0, #16]
 800ad3e:	b005      	add	sp, #20
 800ad40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad44:	f843 2b04 	str.w	r2, [r3], #4
 800ad48:	e7d8      	b.n	800acfc <__multiply+0x50>
 800ad4a:	f8b3 a000 	ldrh.w	sl, [r3]
 800ad4e:	f1ba 0f00 	cmp.w	sl, #0
 800ad52:	d024      	beq.n	800ad9e <__multiply+0xf2>
 800ad54:	f104 0e14 	add.w	lr, r4, #20
 800ad58:	46a9      	mov	r9, r5
 800ad5a:	f04f 0c00 	mov.w	ip, #0
 800ad5e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ad62:	f8d9 1000 	ldr.w	r1, [r9]
 800ad66:	fa1f fb82 	uxth.w	fp, r2
 800ad6a:	b289      	uxth	r1, r1
 800ad6c:	fb0a 110b 	mla	r1, sl, fp, r1
 800ad70:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ad74:	f8d9 2000 	ldr.w	r2, [r9]
 800ad78:	4461      	add	r1, ip
 800ad7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ad7e:	fb0a c20b 	mla	r2, sl, fp, ip
 800ad82:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ad86:	b289      	uxth	r1, r1
 800ad88:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ad8c:	4577      	cmp	r7, lr
 800ad8e:	f849 1b04 	str.w	r1, [r9], #4
 800ad92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ad96:	d8e2      	bhi.n	800ad5e <__multiply+0xb2>
 800ad98:	9a01      	ldr	r2, [sp, #4]
 800ad9a:	f845 c002 	str.w	ip, [r5, r2]
 800ad9e:	9a03      	ldr	r2, [sp, #12]
 800ada0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ada4:	3304      	adds	r3, #4
 800ada6:	f1b9 0f00 	cmp.w	r9, #0
 800adaa:	d021      	beq.n	800adf0 <__multiply+0x144>
 800adac:	6829      	ldr	r1, [r5, #0]
 800adae:	f104 0c14 	add.w	ip, r4, #20
 800adb2:	46ae      	mov	lr, r5
 800adb4:	f04f 0a00 	mov.w	sl, #0
 800adb8:	f8bc b000 	ldrh.w	fp, [ip]
 800adbc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800adc0:	fb09 220b 	mla	r2, r9, fp, r2
 800adc4:	4452      	add	r2, sl
 800adc6:	b289      	uxth	r1, r1
 800adc8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800adcc:	f84e 1b04 	str.w	r1, [lr], #4
 800add0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800add4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800add8:	f8be 1000 	ldrh.w	r1, [lr]
 800addc:	fb09 110a 	mla	r1, r9, sl, r1
 800ade0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ade4:	4567      	cmp	r7, ip
 800ade6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800adea:	d8e5      	bhi.n	800adb8 <__multiply+0x10c>
 800adec:	9a01      	ldr	r2, [sp, #4]
 800adee:	50a9      	str	r1, [r5, r2]
 800adf0:	3504      	adds	r5, #4
 800adf2:	e799      	b.n	800ad28 <__multiply+0x7c>
 800adf4:	3e01      	subs	r6, #1
 800adf6:	e79b      	b.n	800ad30 <__multiply+0x84>
 800adf8:	0800bda0 	.word	0x0800bda0
 800adfc:	0800bdb1 	.word	0x0800bdb1

0800ae00 <__pow5mult>:
 800ae00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae04:	4615      	mov	r5, r2
 800ae06:	f012 0203 	ands.w	r2, r2, #3
 800ae0a:	4606      	mov	r6, r0
 800ae0c:	460f      	mov	r7, r1
 800ae0e:	d007      	beq.n	800ae20 <__pow5mult+0x20>
 800ae10:	4c25      	ldr	r4, [pc, #148]	; (800aea8 <__pow5mult+0xa8>)
 800ae12:	3a01      	subs	r2, #1
 800ae14:	2300      	movs	r3, #0
 800ae16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ae1a:	f7ff fe9d 	bl	800ab58 <__multadd>
 800ae1e:	4607      	mov	r7, r0
 800ae20:	10ad      	asrs	r5, r5, #2
 800ae22:	d03d      	beq.n	800aea0 <__pow5mult+0xa0>
 800ae24:	69f4      	ldr	r4, [r6, #28]
 800ae26:	b97c      	cbnz	r4, 800ae48 <__pow5mult+0x48>
 800ae28:	2010      	movs	r0, #16
 800ae2a:	f7ff fd7f 	bl	800a92c <malloc>
 800ae2e:	4602      	mov	r2, r0
 800ae30:	61f0      	str	r0, [r6, #28]
 800ae32:	b928      	cbnz	r0, 800ae40 <__pow5mult+0x40>
 800ae34:	4b1d      	ldr	r3, [pc, #116]	; (800aeac <__pow5mult+0xac>)
 800ae36:	481e      	ldr	r0, [pc, #120]	; (800aeb0 <__pow5mult+0xb0>)
 800ae38:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ae3c:	f000 fdbe 	bl	800b9bc <__assert_func>
 800ae40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ae44:	6004      	str	r4, [r0, #0]
 800ae46:	60c4      	str	r4, [r0, #12]
 800ae48:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ae4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ae50:	b94c      	cbnz	r4, 800ae66 <__pow5mult+0x66>
 800ae52:	f240 2171 	movw	r1, #625	; 0x271
 800ae56:	4630      	mov	r0, r6
 800ae58:	f7ff ff12 	bl	800ac80 <__i2b>
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ae62:	4604      	mov	r4, r0
 800ae64:	6003      	str	r3, [r0, #0]
 800ae66:	f04f 0900 	mov.w	r9, #0
 800ae6a:	07eb      	lsls	r3, r5, #31
 800ae6c:	d50a      	bpl.n	800ae84 <__pow5mult+0x84>
 800ae6e:	4639      	mov	r1, r7
 800ae70:	4622      	mov	r2, r4
 800ae72:	4630      	mov	r0, r6
 800ae74:	f7ff ff1a 	bl	800acac <__multiply>
 800ae78:	4639      	mov	r1, r7
 800ae7a:	4680      	mov	r8, r0
 800ae7c:	4630      	mov	r0, r6
 800ae7e:	f7ff fe49 	bl	800ab14 <_Bfree>
 800ae82:	4647      	mov	r7, r8
 800ae84:	106d      	asrs	r5, r5, #1
 800ae86:	d00b      	beq.n	800aea0 <__pow5mult+0xa0>
 800ae88:	6820      	ldr	r0, [r4, #0]
 800ae8a:	b938      	cbnz	r0, 800ae9c <__pow5mult+0x9c>
 800ae8c:	4622      	mov	r2, r4
 800ae8e:	4621      	mov	r1, r4
 800ae90:	4630      	mov	r0, r6
 800ae92:	f7ff ff0b 	bl	800acac <__multiply>
 800ae96:	6020      	str	r0, [r4, #0]
 800ae98:	f8c0 9000 	str.w	r9, [r0]
 800ae9c:	4604      	mov	r4, r0
 800ae9e:	e7e4      	b.n	800ae6a <__pow5mult+0x6a>
 800aea0:	4638      	mov	r0, r7
 800aea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aea6:	bf00      	nop
 800aea8:	0800bf00 	.word	0x0800bf00
 800aeac:	0800bd31 	.word	0x0800bd31
 800aeb0:	0800bdb1 	.word	0x0800bdb1

0800aeb4 <__lshift>:
 800aeb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aeb8:	460c      	mov	r4, r1
 800aeba:	6849      	ldr	r1, [r1, #4]
 800aebc:	6923      	ldr	r3, [r4, #16]
 800aebe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aec2:	68a3      	ldr	r3, [r4, #8]
 800aec4:	4607      	mov	r7, r0
 800aec6:	4691      	mov	r9, r2
 800aec8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aecc:	f108 0601 	add.w	r6, r8, #1
 800aed0:	42b3      	cmp	r3, r6
 800aed2:	db0b      	blt.n	800aeec <__lshift+0x38>
 800aed4:	4638      	mov	r0, r7
 800aed6:	f7ff fddd 	bl	800aa94 <_Balloc>
 800aeda:	4605      	mov	r5, r0
 800aedc:	b948      	cbnz	r0, 800aef2 <__lshift+0x3e>
 800aede:	4602      	mov	r2, r0
 800aee0:	4b28      	ldr	r3, [pc, #160]	; (800af84 <__lshift+0xd0>)
 800aee2:	4829      	ldr	r0, [pc, #164]	; (800af88 <__lshift+0xd4>)
 800aee4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800aee8:	f000 fd68 	bl	800b9bc <__assert_func>
 800aeec:	3101      	adds	r1, #1
 800aeee:	005b      	lsls	r3, r3, #1
 800aef0:	e7ee      	b.n	800aed0 <__lshift+0x1c>
 800aef2:	2300      	movs	r3, #0
 800aef4:	f100 0114 	add.w	r1, r0, #20
 800aef8:	f100 0210 	add.w	r2, r0, #16
 800aefc:	4618      	mov	r0, r3
 800aefe:	4553      	cmp	r3, sl
 800af00:	db33      	blt.n	800af6a <__lshift+0xb6>
 800af02:	6920      	ldr	r0, [r4, #16]
 800af04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800af08:	f104 0314 	add.w	r3, r4, #20
 800af0c:	f019 091f 	ands.w	r9, r9, #31
 800af10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800af14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800af18:	d02b      	beq.n	800af72 <__lshift+0xbe>
 800af1a:	f1c9 0e20 	rsb	lr, r9, #32
 800af1e:	468a      	mov	sl, r1
 800af20:	2200      	movs	r2, #0
 800af22:	6818      	ldr	r0, [r3, #0]
 800af24:	fa00 f009 	lsl.w	r0, r0, r9
 800af28:	4310      	orrs	r0, r2
 800af2a:	f84a 0b04 	str.w	r0, [sl], #4
 800af2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800af32:	459c      	cmp	ip, r3
 800af34:	fa22 f20e 	lsr.w	r2, r2, lr
 800af38:	d8f3      	bhi.n	800af22 <__lshift+0x6e>
 800af3a:	ebac 0304 	sub.w	r3, ip, r4
 800af3e:	3b15      	subs	r3, #21
 800af40:	f023 0303 	bic.w	r3, r3, #3
 800af44:	3304      	adds	r3, #4
 800af46:	f104 0015 	add.w	r0, r4, #21
 800af4a:	4584      	cmp	ip, r0
 800af4c:	bf38      	it	cc
 800af4e:	2304      	movcc	r3, #4
 800af50:	50ca      	str	r2, [r1, r3]
 800af52:	b10a      	cbz	r2, 800af58 <__lshift+0xa4>
 800af54:	f108 0602 	add.w	r6, r8, #2
 800af58:	3e01      	subs	r6, #1
 800af5a:	4638      	mov	r0, r7
 800af5c:	612e      	str	r6, [r5, #16]
 800af5e:	4621      	mov	r1, r4
 800af60:	f7ff fdd8 	bl	800ab14 <_Bfree>
 800af64:	4628      	mov	r0, r5
 800af66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af6a:	f842 0f04 	str.w	r0, [r2, #4]!
 800af6e:	3301      	adds	r3, #1
 800af70:	e7c5      	b.n	800aefe <__lshift+0x4a>
 800af72:	3904      	subs	r1, #4
 800af74:	f853 2b04 	ldr.w	r2, [r3], #4
 800af78:	f841 2f04 	str.w	r2, [r1, #4]!
 800af7c:	459c      	cmp	ip, r3
 800af7e:	d8f9      	bhi.n	800af74 <__lshift+0xc0>
 800af80:	e7ea      	b.n	800af58 <__lshift+0xa4>
 800af82:	bf00      	nop
 800af84:	0800bda0 	.word	0x0800bda0
 800af88:	0800bdb1 	.word	0x0800bdb1

0800af8c <__mcmp>:
 800af8c:	b530      	push	{r4, r5, lr}
 800af8e:	6902      	ldr	r2, [r0, #16]
 800af90:	690c      	ldr	r4, [r1, #16]
 800af92:	1b12      	subs	r2, r2, r4
 800af94:	d10e      	bne.n	800afb4 <__mcmp+0x28>
 800af96:	f100 0314 	add.w	r3, r0, #20
 800af9a:	3114      	adds	r1, #20
 800af9c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800afa0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800afa4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800afa8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800afac:	42a5      	cmp	r5, r4
 800afae:	d003      	beq.n	800afb8 <__mcmp+0x2c>
 800afb0:	d305      	bcc.n	800afbe <__mcmp+0x32>
 800afb2:	2201      	movs	r2, #1
 800afb4:	4610      	mov	r0, r2
 800afb6:	bd30      	pop	{r4, r5, pc}
 800afb8:	4283      	cmp	r3, r0
 800afba:	d3f3      	bcc.n	800afa4 <__mcmp+0x18>
 800afbc:	e7fa      	b.n	800afb4 <__mcmp+0x28>
 800afbe:	f04f 32ff 	mov.w	r2, #4294967295
 800afc2:	e7f7      	b.n	800afb4 <__mcmp+0x28>

0800afc4 <__mdiff>:
 800afc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afc8:	460c      	mov	r4, r1
 800afca:	4606      	mov	r6, r0
 800afcc:	4611      	mov	r1, r2
 800afce:	4620      	mov	r0, r4
 800afd0:	4690      	mov	r8, r2
 800afd2:	f7ff ffdb 	bl	800af8c <__mcmp>
 800afd6:	1e05      	subs	r5, r0, #0
 800afd8:	d110      	bne.n	800affc <__mdiff+0x38>
 800afda:	4629      	mov	r1, r5
 800afdc:	4630      	mov	r0, r6
 800afde:	f7ff fd59 	bl	800aa94 <_Balloc>
 800afe2:	b930      	cbnz	r0, 800aff2 <__mdiff+0x2e>
 800afe4:	4b3a      	ldr	r3, [pc, #232]	; (800b0d0 <__mdiff+0x10c>)
 800afe6:	4602      	mov	r2, r0
 800afe8:	f240 2137 	movw	r1, #567	; 0x237
 800afec:	4839      	ldr	r0, [pc, #228]	; (800b0d4 <__mdiff+0x110>)
 800afee:	f000 fce5 	bl	800b9bc <__assert_func>
 800aff2:	2301      	movs	r3, #1
 800aff4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aff8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800affc:	bfa4      	itt	ge
 800affe:	4643      	movge	r3, r8
 800b000:	46a0      	movge	r8, r4
 800b002:	4630      	mov	r0, r6
 800b004:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b008:	bfa6      	itte	ge
 800b00a:	461c      	movge	r4, r3
 800b00c:	2500      	movge	r5, #0
 800b00e:	2501      	movlt	r5, #1
 800b010:	f7ff fd40 	bl	800aa94 <_Balloc>
 800b014:	b920      	cbnz	r0, 800b020 <__mdiff+0x5c>
 800b016:	4b2e      	ldr	r3, [pc, #184]	; (800b0d0 <__mdiff+0x10c>)
 800b018:	4602      	mov	r2, r0
 800b01a:	f240 2145 	movw	r1, #581	; 0x245
 800b01e:	e7e5      	b.n	800afec <__mdiff+0x28>
 800b020:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b024:	6926      	ldr	r6, [r4, #16]
 800b026:	60c5      	str	r5, [r0, #12]
 800b028:	f104 0914 	add.w	r9, r4, #20
 800b02c:	f108 0514 	add.w	r5, r8, #20
 800b030:	f100 0e14 	add.w	lr, r0, #20
 800b034:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b038:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b03c:	f108 0210 	add.w	r2, r8, #16
 800b040:	46f2      	mov	sl, lr
 800b042:	2100      	movs	r1, #0
 800b044:	f859 3b04 	ldr.w	r3, [r9], #4
 800b048:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b04c:	fa11 f88b 	uxtah	r8, r1, fp
 800b050:	b299      	uxth	r1, r3
 800b052:	0c1b      	lsrs	r3, r3, #16
 800b054:	eba8 0801 	sub.w	r8, r8, r1
 800b058:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b05c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b060:	fa1f f888 	uxth.w	r8, r8
 800b064:	1419      	asrs	r1, r3, #16
 800b066:	454e      	cmp	r6, r9
 800b068:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b06c:	f84a 3b04 	str.w	r3, [sl], #4
 800b070:	d8e8      	bhi.n	800b044 <__mdiff+0x80>
 800b072:	1b33      	subs	r3, r6, r4
 800b074:	3b15      	subs	r3, #21
 800b076:	f023 0303 	bic.w	r3, r3, #3
 800b07a:	3304      	adds	r3, #4
 800b07c:	3415      	adds	r4, #21
 800b07e:	42a6      	cmp	r6, r4
 800b080:	bf38      	it	cc
 800b082:	2304      	movcc	r3, #4
 800b084:	441d      	add	r5, r3
 800b086:	4473      	add	r3, lr
 800b088:	469e      	mov	lr, r3
 800b08a:	462e      	mov	r6, r5
 800b08c:	4566      	cmp	r6, ip
 800b08e:	d30e      	bcc.n	800b0ae <__mdiff+0xea>
 800b090:	f10c 0203 	add.w	r2, ip, #3
 800b094:	1b52      	subs	r2, r2, r5
 800b096:	f022 0203 	bic.w	r2, r2, #3
 800b09a:	3d03      	subs	r5, #3
 800b09c:	45ac      	cmp	ip, r5
 800b09e:	bf38      	it	cc
 800b0a0:	2200      	movcc	r2, #0
 800b0a2:	4413      	add	r3, r2
 800b0a4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b0a8:	b17a      	cbz	r2, 800b0ca <__mdiff+0x106>
 800b0aa:	6107      	str	r7, [r0, #16]
 800b0ac:	e7a4      	b.n	800aff8 <__mdiff+0x34>
 800b0ae:	f856 8b04 	ldr.w	r8, [r6], #4
 800b0b2:	fa11 f288 	uxtah	r2, r1, r8
 800b0b6:	1414      	asrs	r4, r2, #16
 800b0b8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b0bc:	b292      	uxth	r2, r2
 800b0be:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b0c2:	f84e 2b04 	str.w	r2, [lr], #4
 800b0c6:	1421      	asrs	r1, r4, #16
 800b0c8:	e7e0      	b.n	800b08c <__mdiff+0xc8>
 800b0ca:	3f01      	subs	r7, #1
 800b0cc:	e7ea      	b.n	800b0a4 <__mdiff+0xe0>
 800b0ce:	bf00      	nop
 800b0d0:	0800bda0 	.word	0x0800bda0
 800b0d4:	0800bdb1 	.word	0x0800bdb1

0800b0d8 <__d2b>:
 800b0d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b0dc:	460f      	mov	r7, r1
 800b0de:	2101      	movs	r1, #1
 800b0e0:	ec59 8b10 	vmov	r8, r9, d0
 800b0e4:	4616      	mov	r6, r2
 800b0e6:	f7ff fcd5 	bl	800aa94 <_Balloc>
 800b0ea:	4604      	mov	r4, r0
 800b0ec:	b930      	cbnz	r0, 800b0fc <__d2b+0x24>
 800b0ee:	4602      	mov	r2, r0
 800b0f0:	4b24      	ldr	r3, [pc, #144]	; (800b184 <__d2b+0xac>)
 800b0f2:	4825      	ldr	r0, [pc, #148]	; (800b188 <__d2b+0xb0>)
 800b0f4:	f240 310f 	movw	r1, #783	; 0x30f
 800b0f8:	f000 fc60 	bl	800b9bc <__assert_func>
 800b0fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b100:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b104:	bb2d      	cbnz	r5, 800b152 <__d2b+0x7a>
 800b106:	9301      	str	r3, [sp, #4]
 800b108:	f1b8 0300 	subs.w	r3, r8, #0
 800b10c:	d026      	beq.n	800b15c <__d2b+0x84>
 800b10e:	4668      	mov	r0, sp
 800b110:	9300      	str	r3, [sp, #0]
 800b112:	f7ff fd87 	bl	800ac24 <__lo0bits>
 800b116:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b11a:	b1e8      	cbz	r0, 800b158 <__d2b+0x80>
 800b11c:	f1c0 0320 	rsb	r3, r0, #32
 800b120:	fa02 f303 	lsl.w	r3, r2, r3
 800b124:	430b      	orrs	r3, r1
 800b126:	40c2      	lsrs	r2, r0
 800b128:	6163      	str	r3, [r4, #20]
 800b12a:	9201      	str	r2, [sp, #4]
 800b12c:	9b01      	ldr	r3, [sp, #4]
 800b12e:	61a3      	str	r3, [r4, #24]
 800b130:	2b00      	cmp	r3, #0
 800b132:	bf14      	ite	ne
 800b134:	2202      	movne	r2, #2
 800b136:	2201      	moveq	r2, #1
 800b138:	6122      	str	r2, [r4, #16]
 800b13a:	b1bd      	cbz	r5, 800b16c <__d2b+0x94>
 800b13c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b140:	4405      	add	r5, r0
 800b142:	603d      	str	r5, [r7, #0]
 800b144:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b148:	6030      	str	r0, [r6, #0]
 800b14a:	4620      	mov	r0, r4
 800b14c:	b003      	add	sp, #12
 800b14e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b152:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b156:	e7d6      	b.n	800b106 <__d2b+0x2e>
 800b158:	6161      	str	r1, [r4, #20]
 800b15a:	e7e7      	b.n	800b12c <__d2b+0x54>
 800b15c:	a801      	add	r0, sp, #4
 800b15e:	f7ff fd61 	bl	800ac24 <__lo0bits>
 800b162:	9b01      	ldr	r3, [sp, #4]
 800b164:	6163      	str	r3, [r4, #20]
 800b166:	3020      	adds	r0, #32
 800b168:	2201      	movs	r2, #1
 800b16a:	e7e5      	b.n	800b138 <__d2b+0x60>
 800b16c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b170:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b174:	6038      	str	r0, [r7, #0]
 800b176:	6918      	ldr	r0, [r3, #16]
 800b178:	f7ff fd34 	bl	800abe4 <__hi0bits>
 800b17c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b180:	e7e2      	b.n	800b148 <__d2b+0x70>
 800b182:	bf00      	nop
 800b184:	0800bda0 	.word	0x0800bda0
 800b188:	0800bdb1 	.word	0x0800bdb1

0800b18c <__ssputs_r>:
 800b18c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b190:	688e      	ldr	r6, [r1, #8]
 800b192:	461f      	mov	r7, r3
 800b194:	42be      	cmp	r6, r7
 800b196:	680b      	ldr	r3, [r1, #0]
 800b198:	4682      	mov	sl, r0
 800b19a:	460c      	mov	r4, r1
 800b19c:	4690      	mov	r8, r2
 800b19e:	d82c      	bhi.n	800b1fa <__ssputs_r+0x6e>
 800b1a0:	898a      	ldrh	r2, [r1, #12]
 800b1a2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b1a6:	d026      	beq.n	800b1f6 <__ssputs_r+0x6a>
 800b1a8:	6965      	ldr	r5, [r4, #20]
 800b1aa:	6909      	ldr	r1, [r1, #16]
 800b1ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b1b0:	eba3 0901 	sub.w	r9, r3, r1
 800b1b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b1b8:	1c7b      	adds	r3, r7, #1
 800b1ba:	444b      	add	r3, r9
 800b1bc:	106d      	asrs	r5, r5, #1
 800b1be:	429d      	cmp	r5, r3
 800b1c0:	bf38      	it	cc
 800b1c2:	461d      	movcc	r5, r3
 800b1c4:	0553      	lsls	r3, r2, #21
 800b1c6:	d527      	bpl.n	800b218 <__ssputs_r+0x8c>
 800b1c8:	4629      	mov	r1, r5
 800b1ca:	f7ff fbd7 	bl	800a97c <_malloc_r>
 800b1ce:	4606      	mov	r6, r0
 800b1d0:	b360      	cbz	r0, 800b22c <__ssputs_r+0xa0>
 800b1d2:	6921      	ldr	r1, [r4, #16]
 800b1d4:	464a      	mov	r2, r9
 800b1d6:	f000 fbe3 	bl	800b9a0 <memcpy>
 800b1da:	89a3      	ldrh	r3, [r4, #12]
 800b1dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b1e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1e4:	81a3      	strh	r3, [r4, #12]
 800b1e6:	6126      	str	r6, [r4, #16]
 800b1e8:	6165      	str	r5, [r4, #20]
 800b1ea:	444e      	add	r6, r9
 800b1ec:	eba5 0509 	sub.w	r5, r5, r9
 800b1f0:	6026      	str	r6, [r4, #0]
 800b1f2:	60a5      	str	r5, [r4, #8]
 800b1f4:	463e      	mov	r6, r7
 800b1f6:	42be      	cmp	r6, r7
 800b1f8:	d900      	bls.n	800b1fc <__ssputs_r+0x70>
 800b1fa:	463e      	mov	r6, r7
 800b1fc:	6820      	ldr	r0, [r4, #0]
 800b1fe:	4632      	mov	r2, r6
 800b200:	4641      	mov	r1, r8
 800b202:	f000 fba3 	bl	800b94c <memmove>
 800b206:	68a3      	ldr	r3, [r4, #8]
 800b208:	1b9b      	subs	r3, r3, r6
 800b20a:	60a3      	str	r3, [r4, #8]
 800b20c:	6823      	ldr	r3, [r4, #0]
 800b20e:	4433      	add	r3, r6
 800b210:	6023      	str	r3, [r4, #0]
 800b212:	2000      	movs	r0, #0
 800b214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b218:	462a      	mov	r2, r5
 800b21a:	f000 fc15 	bl	800ba48 <_realloc_r>
 800b21e:	4606      	mov	r6, r0
 800b220:	2800      	cmp	r0, #0
 800b222:	d1e0      	bne.n	800b1e6 <__ssputs_r+0x5a>
 800b224:	6921      	ldr	r1, [r4, #16]
 800b226:	4650      	mov	r0, sl
 800b228:	f7ff fb34 	bl	800a894 <_free_r>
 800b22c:	230c      	movs	r3, #12
 800b22e:	f8ca 3000 	str.w	r3, [sl]
 800b232:	89a3      	ldrh	r3, [r4, #12]
 800b234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b238:	81a3      	strh	r3, [r4, #12]
 800b23a:	f04f 30ff 	mov.w	r0, #4294967295
 800b23e:	e7e9      	b.n	800b214 <__ssputs_r+0x88>

0800b240 <_svfiprintf_r>:
 800b240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b244:	4698      	mov	r8, r3
 800b246:	898b      	ldrh	r3, [r1, #12]
 800b248:	061b      	lsls	r3, r3, #24
 800b24a:	b09d      	sub	sp, #116	; 0x74
 800b24c:	4607      	mov	r7, r0
 800b24e:	460d      	mov	r5, r1
 800b250:	4614      	mov	r4, r2
 800b252:	d50e      	bpl.n	800b272 <_svfiprintf_r+0x32>
 800b254:	690b      	ldr	r3, [r1, #16]
 800b256:	b963      	cbnz	r3, 800b272 <_svfiprintf_r+0x32>
 800b258:	2140      	movs	r1, #64	; 0x40
 800b25a:	f7ff fb8f 	bl	800a97c <_malloc_r>
 800b25e:	6028      	str	r0, [r5, #0]
 800b260:	6128      	str	r0, [r5, #16]
 800b262:	b920      	cbnz	r0, 800b26e <_svfiprintf_r+0x2e>
 800b264:	230c      	movs	r3, #12
 800b266:	603b      	str	r3, [r7, #0]
 800b268:	f04f 30ff 	mov.w	r0, #4294967295
 800b26c:	e0d0      	b.n	800b410 <_svfiprintf_r+0x1d0>
 800b26e:	2340      	movs	r3, #64	; 0x40
 800b270:	616b      	str	r3, [r5, #20]
 800b272:	2300      	movs	r3, #0
 800b274:	9309      	str	r3, [sp, #36]	; 0x24
 800b276:	2320      	movs	r3, #32
 800b278:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b27c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b280:	2330      	movs	r3, #48	; 0x30
 800b282:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b428 <_svfiprintf_r+0x1e8>
 800b286:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b28a:	f04f 0901 	mov.w	r9, #1
 800b28e:	4623      	mov	r3, r4
 800b290:	469a      	mov	sl, r3
 800b292:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b296:	b10a      	cbz	r2, 800b29c <_svfiprintf_r+0x5c>
 800b298:	2a25      	cmp	r2, #37	; 0x25
 800b29a:	d1f9      	bne.n	800b290 <_svfiprintf_r+0x50>
 800b29c:	ebba 0b04 	subs.w	fp, sl, r4
 800b2a0:	d00b      	beq.n	800b2ba <_svfiprintf_r+0x7a>
 800b2a2:	465b      	mov	r3, fp
 800b2a4:	4622      	mov	r2, r4
 800b2a6:	4629      	mov	r1, r5
 800b2a8:	4638      	mov	r0, r7
 800b2aa:	f7ff ff6f 	bl	800b18c <__ssputs_r>
 800b2ae:	3001      	adds	r0, #1
 800b2b0:	f000 80a9 	beq.w	800b406 <_svfiprintf_r+0x1c6>
 800b2b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2b6:	445a      	add	r2, fp
 800b2b8:	9209      	str	r2, [sp, #36]	; 0x24
 800b2ba:	f89a 3000 	ldrb.w	r3, [sl]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	f000 80a1 	beq.w	800b406 <_svfiprintf_r+0x1c6>
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	f04f 32ff 	mov.w	r2, #4294967295
 800b2ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2ce:	f10a 0a01 	add.w	sl, sl, #1
 800b2d2:	9304      	str	r3, [sp, #16]
 800b2d4:	9307      	str	r3, [sp, #28]
 800b2d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b2da:	931a      	str	r3, [sp, #104]	; 0x68
 800b2dc:	4654      	mov	r4, sl
 800b2de:	2205      	movs	r2, #5
 800b2e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2e4:	4850      	ldr	r0, [pc, #320]	; (800b428 <_svfiprintf_r+0x1e8>)
 800b2e6:	f7f4 ff83 	bl	80001f0 <memchr>
 800b2ea:	9a04      	ldr	r2, [sp, #16]
 800b2ec:	b9d8      	cbnz	r0, 800b326 <_svfiprintf_r+0xe6>
 800b2ee:	06d0      	lsls	r0, r2, #27
 800b2f0:	bf44      	itt	mi
 800b2f2:	2320      	movmi	r3, #32
 800b2f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2f8:	0711      	lsls	r1, r2, #28
 800b2fa:	bf44      	itt	mi
 800b2fc:	232b      	movmi	r3, #43	; 0x2b
 800b2fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b302:	f89a 3000 	ldrb.w	r3, [sl]
 800b306:	2b2a      	cmp	r3, #42	; 0x2a
 800b308:	d015      	beq.n	800b336 <_svfiprintf_r+0xf6>
 800b30a:	9a07      	ldr	r2, [sp, #28]
 800b30c:	4654      	mov	r4, sl
 800b30e:	2000      	movs	r0, #0
 800b310:	f04f 0c0a 	mov.w	ip, #10
 800b314:	4621      	mov	r1, r4
 800b316:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b31a:	3b30      	subs	r3, #48	; 0x30
 800b31c:	2b09      	cmp	r3, #9
 800b31e:	d94d      	bls.n	800b3bc <_svfiprintf_r+0x17c>
 800b320:	b1b0      	cbz	r0, 800b350 <_svfiprintf_r+0x110>
 800b322:	9207      	str	r2, [sp, #28]
 800b324:	e014      	b.n	800b350 <_svfiprintf_r+0x110>
 800b326:	eba0 0308 	sub.w	r3, r0, r8
 800b32a:	fa09 f303 	lsl.w	r3, r9, r3
 800b32e:	4313      	orrs	r3, r2
 800b330:	9304      	str	r3, [sp, #16]
 800b332:	46a2      	mov	sl, r4
 800b334:	e7d2      	b.n	800b2dc <_svfiprintf_r+0x9c>
 800b336:	9b03      	ldr	r3, [sp, #12]
 800b338:	1d19      	adds	r1, r3, #4
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	9103      	str	r1, [sp, #12]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	bfbb      	ittet	lt
 800b342:	425b      	neglt	r3, r3
 800b344:	f042 0202 	orrlt.w	r2, r2, #2
 800b348:	9307      	strge	r3, [sp, #28]
 800b34a:	9307      	strlt	r3, [sp, #28]
 800b34c:	bfb8      	it	lt
 800b34e:	9204      	strlt	r2, [sp, #16]
 800b350:	7823      	ldrb	r3, [r4, #0]
 800b352:	2b2e      	cmp	r3, #46	; 0x2e
 800b354:	d10c      	bne.n	800b370 <_svfiprintf_r+0x130>
 800b356:	7863      	ldrb	r3, [r4, #1]
 800b358:	2b2a      	cmp	r3, #42	; 0x2a
 800b35a:	d134      	bne.n	800b3c6 <_svfiprintf_r+0x186>
 800b35c:	9b03      	ldr	r3, [sp, #12]
 800b35e:	1d1a      	adds	r2, r3, #4
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	9203      	str	r2, [sp, #12]
 800b364:	2b00      	cmp	r3, #0
 800b366:	bfb8      	it	lt
 800b368:	f04f 33ff 	movlt.w	r3, #4294967295
 800b36c:	3402      	adds	r4, #2
 800b36e:	9305      	str	r3, [sp, #20]
 800b370:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b438 <_svfiprintf_r+0x1f8>
 800b374:	7821      	ldrb	r1, [r4, #0]
 800b376:	2203      	movs	r2, #3
 800b378:	4650      	mov	r0, sl
 800b37a:	f7f4 ff39 	bl	80001f0 <memchr>
 800b37e:	b138      	cbz	r0, 800b390 <_svfiprintf_r+0x150>
 800b380:	9b04      	ldr	r3, [sp, #16]
 800b382:	eba0 000a 	sub.w	r0, r0, sl
 800b386:	2240      	movs	r2, #64	; 0x40
 800b388:	4082      	lsls	r2, r0
 800b38a:	4313      	orrs	r3, r2
 800b38c:	3401      	adds	r4, #1
 800b38e:	9304      	str	r3, [sp, #16]
 800b390:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b394:	4825      	ldr	r0, [pc, #148]	; (800b42c <_svfiprintf_r+0x1ec>)
 800b396:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b39a:	2206      	movs	r2, #6
 800b39c:	f7f4 ff28 	bl	80001f0 <memchr>
 800b3a0:	2800      	cmp	r0, #0
 800b3a2:	d038      	beq.n	800b416 <_svfiprintf_r+0x1d6>
 800b3a4:	4b22      	ldr	r3, [pc, #136]	; (800b430 <_svfiprintf_r+0x1f0>)
 800b3a6:	bb1b      	cbnz	r3, 800b3f0 <_svfiprintf_r+0x1b0>
 800b3a8:	9b03      	ldr	r3, [sp, #12]
 800b3aa:	3307      	adds	r3, #7
 800b3ac:	f023 0307 	bic.w	r3, r3, #7
 800b3b0:	3308      	adds	r3, #8
 800b3b2:	9303      	str	r3, [sp, #12]
 800b3b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3b6:	4433      	add	r3, r6
 800b3b8:	9309      	str	r3, [sp, #36]	; 0x24
 800b3ba:	e768      	b.n	800b28e <_svfiprintf_r+0x4e>
 800b3bc:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3c0:	460c      	mov	r4, r1
 800b3c2:	2001      	movs	r0, #1
 800b3c4:	e7a6      	b.n	800b314 <_svfiprintf_r+0xd4>
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	3401      	adds	r4, #1
 800b3ca:	9305      	str	r3, [sp, #20]
 800b3cc:	4619      	mov	r1, r3
 800b3ce:	f04f 0c0a 	mov.w	ip, #10
 800b3d2:	4620      	mov	r0, r4
 800b3d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3d8:	3a30      	subs	r2, #48	; 0x30
 800b3da:	2a09      	cmp	r2, #9
 800b3dc:	d903      	bls.n	800b3e6 <_svfiprintf_r+0x1a6>
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d0c6      	beq.n	800b370 <_svfiprintf_r+0x130>
 800b3e2:	9105      	str	r1, [sp, #20]
 800b3e4:	e7c4      	b.n	800b370 <_svfiprintf_r+0x130>
 800b3e6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3ea:	4604      	mov	r4, r0
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	e7f0      	b.n	800b3d2 <_svfiprintf_r+0x192>
 800b3f0:	ab03      	add	r3, sp, #12
 800b3f2:	9300      	str	r3, [sp, #0]
 800b3f4:	462a      	mov	r2, r5
 800b3f6:	4b0f      	ldr	r3, [pc, #60]	; (800b434 <_svfiprintf_r+0x1f4>)
 800b3f8:	a904      	add	r1, sp, #16
 800b3fa:	4638      	mov	r0, r7
 800b3fc:	f7fd fe50 	bl	80090a0 <_printf_float>
 800b400:	1c42      	adds	r2, r0, #1
 800b402:	4606      	mov	r6, r0
 800b404:	d1d6      	bne.n	800b3b4 <_svfiprintf_r+0x174>
 800b406:	89ab      	ldrh	r3, [r5, #12]
 800b408:	065b      	lsls	r3, r3, #25
 800b40a:	f53f af2d 	bmi.w	800b268 <_svfiprintf_r+0x28>
 800b40e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b410:	b01d      	add	sp, #116	; 0x74
 800b412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b416:	ab03      	add	r3, sp, #12
 800b418:	9300      	str	r3, [sp, #0]
 800b41a:	462a      	mov	r2, r5
 800b41c:	4b05      	ldr	r3, [pc, #20]	; (800b434 <_svfiprintf_r+0x1f4>)
 800b41e:	a904      	add	r1, sp, #16
 800b420:	4638      	mov	r0, r7
 800b422:	f7fe f8e1 	bl	80095e8 <_printf_i>
 800b426:	e7eb      	b.n	800b400 <_svfiprintf_r+0x1c0>
 800b428:	0800bf0c 	.word	0x0800bf0c
 800b42c:	0800bf16 	.word	0x0800bf16
 800b430:	080090a1 	.word	0x080090a1
 800b434:	0800b18d 	.word	0x0800b18d
 800b438:	0800bf12 	.word	0x0800bf12

0800b43c <__sfputc_r>:
 800b43c:	6893      	ldr	r3, [r2, #8]
 800b43e:	3b01      	subs	r3, #1
 800b440:	2b00      	cmp	r3, #0
 800b442:	b410      	push	{r4}
 800b444:	6093      	str	r3, [r2, #8]
 800b446:	da08      	bge.n	800b45a <__sfputc_r+0x1e>
 800b448:	6994      	ldr	r4, [r2, #24]
 800b44a:	42a3      	cmp	r3, r4
 800b44c:	db01      	blt.n	800b452 <__sfputc_r+0x16>
 800b44e:	290a      	cmp	r1, #10
 800b450:	d103      	bne.n	800b45a <__sfputc_r+0x1e>
 800b452:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b456:	f000 b9e3 	b.w	800b820 <__swbuf_r>
 800b45a:	6813      	ldr	r3, [r2, #0]
 800b45c:	1c58      	adds	r0, r3, #1
 800b45e:	6010      	str	r0, [r2, #0]
 800b460:	7019      	strb	r1, [r3, #0]
 800b462:	4608      	mov	r0, r1
 800b464:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b468:	4770      	bx	lr

0800b46a <__sfputs_r>:
 800b46a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b46c:	4606      	mov	r6, r0
 800b46e:	460f      	mov	r7, r1
 800b470:	4614      	mov	r4, r2
 800b472:	18d5      	adds	r5, r2, r3
 800b474:	42ac      	cmp	r4, r5
 800b476:	d101      	bne.n	800b47c <__sfputs_r+0x12>
 800b478:	2000      	movs	r0, #0
 800b47a:	e007      	b.n	800b48c <__sfputs_r+0x22>
 800b47c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b480:	463a      	mov	r2, r7
 800b482:	4630      	mov	r0, r6
 800b484:	f7ff ffda 	bl	800b43c <__sfputc_r>
 800b488:	1c43      	adds	r3, r0, #1
 800b48a:	d1f3      	bne.n	800b474 <__sfputs_r+0xa>
 800b48c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b490 <_vfiprintf_r>:
 800b490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b494:	460d      	mov	r5, r1
 800b496:	b09d      	sub	sp, #116	; 0x74
 800b498:	4614      	mov	r4, r2
 800b49a:	4698      	mov	r8, r3
 800b49c:	4606      	mov	r6, r0
 800b49e:	b118      	cbz	r0, 800b4a8 <_vfiprintf_r+0x18>
 800b4a0:	6a03      	ldr	r3, [r0, #32]
 800b4a2:	b90b      	cbnz	r3, 800b4a8 <_vfiprintf_r+0x18>
 800b4a4:	f7fe fa4e 	bl	8009944 <__sinit>
 800b4a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b4aa:	07d9      	lsls	r1, r3, #31
 800b4ac:	d405      	bmi.n	800b4ba <_vfiprintf_r+0x2a>
 800b4ae:	89ab      	ldrh	r3, [r5, #12]
 800b4b0:	059a      	lsls	r2, r3, #22
 800b4b2:	d402      	bmi.n	800b4ba <_vfiprintf_r+0x2a>
 800b4b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b4b6:	f7fe fb6e 	bl	8009b96 <__retarget_lock_acquire_recursive>
 800b4ba:	89ab      	ldrh	r3, [r5, #12]
 800b4bc:	071b      	lsls	r3, r3, #28
 800b4be:	d501      	bpl.n	800b4c4 <_vfiprintf_r+0x34>
 800b4c0:	692b      	ldr	r3, [r5, #16]
 800b4c2:	b99b      	cbnz	r3, 800b4ec <_vfiprintf_r+0x5c>
 800b4c4:	4629      	mov	r1, r5
 800b4c6:	4630      	mov	r0, r6
 800b4c8:	f000 f9e8 	bl	800b89c <__swsetup_r>
 800b4cc:	b170      	cbz	r0, 800b4ec <_vfiprintf_r+0x5c>
 800b4ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b4d0:	07dc      	lsls	r4, r3, #31
 800b4d2:	d504      	bpl.n	800b4de <_vfiprintf_r+0x4e>
 800b4d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b4d8:	b01d      	add	sp, #116	; 0x74
 800b4da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4de:	89ab      	ldrh	r3, [r5, #12]
 800b4e0:	0598      	lsls	r0, r3, #22
 800b4e2:	d4f7      	bmi.n	800b4d4 <_vfiprintf_r+0x44>
 800b4e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b4e6:	f7fe fb57 	bl	8009b98 <__retarget_lock_release_recursive>
 800b4ea:	e7f3      	b.n	800b4d4 <_vfiprintf_r+0x44>
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	9309      	str	r3, [sp, #36]	; 0x24
 800b4f0:	2320      	movs	r3, #32
 800b4f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b4f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b4fa:	2330      	movs	r3, #48	; 0x30
 800b4fc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b6b0 <_vfiprintf_r+0x220>
 800b500:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b504:	f04f 0901 	mov.w	r9, #1
 800b508:	4623      	mov	r3, r4
 800b50a:	469a      	mov	sl, r3
 800b50c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b510:	b10a      	cbz	r2, 800b516 <_vfiprintf_r+0x86>
 800b512:	2a25      	cmp	r2, #37	; 0x25
 800b514:	d1f9      	bne.n	800b50a <_vfiprintf_r+0x7a>
 800b516:	ebba 0b04 	subs.w	fp, sl, r4
 800b51a:	d00b      	beq.n	800b534 <_vfiprintf_r+0xa4>
 800b51c:	465b      	mov	r3, fp
 800b51e:	4622      	mov	r2, r4
 800b520:	4629      	mov	r1, r5
 800b522:	4630      	mov	r0, r6
 800b524:	f7ff ffa1 	bl	800b46a <__sfputs_r>
 800b528:	3001      	adds	r0, #1
 800b52a:	f000 80a9 	beq.w	800b680 <_vfiprintf_r+0x1f0>
 800b52e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b530:	445a      	add	r2, fp
 800b532:	9209      	str	r2, [sp, #36]	; 0x24
 800b534:	f89a 3000 	ldrb.w	r3, [sl]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	f000 80a1 	beq.w	800b680 <_vfiprintf_r+0x1f0>
 800b53e:	2300      	movs	r3, #0
 800b540:	f04f 32ff 	mov.w	r2, #4294967295
 800b544:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b548:	f10a 0a01 	add.w	sl, sl, #1
 800b54c:	9304      	str	r3, [sp, #16]
 800b54e:	9307      	str	r3, [sp, #28]
 800b550:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b554:	931a      	str	r3, [sp, #104]	; 0x68
 800b556:	4654      	mov	r4, sl
 800b558:	2205      	movs	r2, #5
 800b55a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b55e:	4854      	ldr	r0, [pc, #336]	; (800b6b0 <_vfiprintf_r+0x220>)
 800b560:	f7f4 fe46 	bl	80001f0 <memchr>
 800b564:	9a04      	ldr	r2, [sp, #16]
 800b566:	b9d8      	cbnz	r0, 800b5a0 <_vfiprintf_r+0x110>
 800b568:	06d1      	lsls	r1, r2, #27
 800b56a:	bf44      	itt	mi
 800b56c:	2320      	movmi	r3, #32
 800b56e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b572:	0713      	lsls	r3, r2, #28
 800b574:	bf44      	itt	mi
 800b576:	232b      	movmi	r3, #43	; 0x2b
 800b578:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b57c:	f89a 3000 	ldrb.w	r3, [sl]
 800b580:	2b2a      	cmp	r3, #42	; 0x2a
 800b582:	d015      	beq.n	800b5b0 <_vfiprintf_r+0x120>
 800b584:	9a07      	ldr	r2, [sp, #28]
 800b586:	4654      	mov	r4, sl
 800b588:	2000      	movs	r0, #0
 800b58a:	f04f 0c0a 	mov.w	ip, #10
 800b58e:	4621      	mov	r1, r4
 800b590:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b594:	3b30      	subs	r3, #48	; 0x30
 800b596:	2b09      	cmp	r3, #9
 800b598:	d94d      	bls.n	800b636 <_vfiprintf_r+0x1a6>
 800b59a:	b1b0      	cbz	r0, 800b5ca <_vfiprintf_r+0x13a>
 800b59c:	9207      	str	r2, [sp, #28]
 800b59e:	e014      	b.n	800b5ca <_vfiprintf_r+0x13a>
 800b5a0:	eba0 0308 	sub.w	r3, r0, r8
 800b5a4:	fa09 f303 	lsl.w	r3, r9, r3
 800b5a8:	4313      	orrs	r3, r2
 800b5aa:	9304      	str	r3, [sp, #16]
 800b5ac:	46a2      	mov	sl, r4
 800b5ae:	e7d2      	b.n	800b556 <_vfiprintf_r+0xc6>
 800b5b0:	9b03      	ldr	r3, [sp, #12]
 800b5b2:	1d19      	adds	r1, r3, #4
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	9103      	str	r1, [sp, #12]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	bfbb      	ittet	lt
 800b5bc:	425b      	neglt	r3, r3
 800b5be:	f042 0202 	orrlt.w	r2, r2, #2
 800b5c2:	9307      	strge	r3, [sp, #28]
 800b5c4:	9307      	strlt	r3, [sp, #28]
 800b5c6:	bfb8      	it	lt
 800b5c8:	9204      	strlt	r2, [sp, #16]
 800b5ca:	7823      	ldrb	r3, [r4, #0]
 800b5cc:	2b2e      	cmp	r3, #46	; 0x2e
 800b5ce:	d10c      	bne.n	800b5ea <_vfiprintf_r+0x15a>
 800b5d0:	7863      	ldrb	r3, [r4, #1]
 800b5d2:	2b2a      	cmp	r3, #42	; 0x2a
 800b5d4:	d134      	bne.n	800b640 <_vfiprintf_r+0x1b0>
 800b5d6:	9b03      	ldr	r3, [sp, #12]
 800b5d8:	1d1a      	adds	r2, r3, #4
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	9203      	str	r2, [sp, #12]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	bfb8      	it	lt
 800b5e2:	f04f 33ff 	movlt.w	r3, #4294967295
 800b5e6:	3402      	adds	r4, #2
 800b5e8:	9305      	str	r3, [sp, #20]
 800b5ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b6c0 <_vfiprintf_r+0x230>
 800b5ee:	7821      	ldrb	r1, [r4, #0]
 800b5f0:	2203      	movs	r2, #3
 800b5f2:	4650      	mov	r0, sl
 800b5f4:	f7f4 fdfc 	bl	80001f0 <memchr>
 800b5f8:	b138      	cbz	r0, 800b60a <_vfiprintf_r+0x17a>
 800b5fa:	9b04      	ldr	r3, [sp, #16]
 800b5fc:	eba0 000a 	sub.w	r0, r0, sl
 800b600:	2240      	movs	r2, #64	; 0x40
 800b602:	4082      	lsls	r2, r0
 800b604:	4313      	orrs	r3, r2
 800b606:	3401      	adds	r4, #1
 800b608:	9304      	str	r3, [sp, #16]
 800b60a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b60e:	4829      	ldr	r0, [pc, #164]	; (800b6b4 <_vfiprintf_r+0x224>)
 800b610:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b614:	2206      	movs	r2, #6
 800b616:	f7f4 fdeb 	bl	80001f0 <memchr>
 800b61a:	2800      	cmp	r0, #0
 800b61c:	d03f      	beq.n	800b69e <_vfiprintf_r+0x20e>
 800b61e:	4b26      	ldr	r3, [pc, #152]	; (800b6b8 <_vfiprintf_r+0x228>)
 800b620:	bb1b      	cbnz	r3, 800b66a <_vfiprintf_r+0x1da>
 800b622:	9b03      	ldr	r3, [sp, #12]
 800b624:	3307      	adds	r3, #7
 800b626:	f023 0307 	bic.w	r3, r3, #7
 800b62a:	3308      	adds	r3, #8
 800b62c:	9303      	str	r3, [sp, #12]
 800b62e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b630:	443b      	add	r3, r7
 800b632:	9309      	str	r3, [sp, #36]	; 0x24
 800b634:	e768      	b.n	800b508 <_vfiprintf_r+0x78>
 800b636:	fb0c 3202 	mla	r2, ip, r2, r3
 800b63a:	460c      	mov	r4, r1
 800b63c:	2001      	movs	r0, #1
 800b63e:	e7a6      	b.n	800b58e <_vfiprintf_r+0xfe>
 800b640:	2300      	movs	r3, #0
 800b642:	3401      	adds	r4, #1
 800b644:	9305      	str	r3, [sp, #20]
 800b646:	4619      	mov	r1, r3
 800b648:	f04f 0c0a 	mov.w	ip, #10
 800b64c:	4620      	mov	r0, r4
 800b64e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b652:	3a30      	subs	r2, #48	; 0x30
 800b654:	2a09      	cmp	r2, #9
 800b656:	d903      	bls.n	800b660 <_vfiprintf_r+0x1d0>
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d0c6      	beq.n	800b5ea <_vfiprintf_r+0x15a>
 800b65c:	9105      	str	r1, [sp, #20]
 800b65e:	e7c4      	b.n	800b5ea <_vfiprintf_r+0x15a>
 800b660:	fb0c 2101 	mla	r1, ip, r1, r2
 800b664:	4604      	mov	r4, r0
 800b666:	2301      	movs	r3, #1
 800b668:	e7f0      	b.n	800b64c <_vfiprintf_r+0x1bc>
 800b66a:	ab03      	add	r3, sp, #12
 800b66c:	9300      	str	r3, [sp, #0]
 800b66e:	462a      	mov	r2, r5
 800b670:	4b12      	ldr	r3, [pc, #72]	; (800b6bc <_vfiprintf_r+0x22c>)
 800b672:	a904      	add	r1, sp, #16
 800b674:	4630      	mov	r0, r6
 800b676:	f7fd fd13 	bl	80090a0 <_printf_float>
 800b67a:	4607      	mov	r7, r0
 800b67c:	1c78      	adds	r0, r7, #1
 800b67e:	d1d6      	bne.n	800b62e <_vfiprintf_r+0x19e>
 800b680:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b682:	07d9      	lsls	r1, r3, #31
 800b684:	d405      	bmi.n	800b692 <_vfiprintf_r+0x202>
 800b686:	89ab      	ldrh	r3, [r5, #12]
 800b688:	059a      	lsls	r2, r3, #22
 800b68a:	d402      	bmi.n	800b692 <_vfiprintf_r+0x202>
 800b68c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b68e:	f7fe fa83 	bl	8009b98 <__retarget_lock_release_recursive>
 800b692:	89ab      	ldrh	r3, [r5, #12]
 800b694:	065b      	lsls	r3, r3, #25
 800b696:	f53f af1d 	bmi.w	800b4d4 <_vfiprintf_r+0x44>
 800b69a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b69c:	e71c      	b.n	800b4d8 <_vfiprintf_r+0x48>
 800b69e:	ab03      	add	r3, sp, #12
 800b6a0:	9300      	str	r3, [sp, #0]
 800b6a2:	462a      	mov	r2, r5
 800b6a4:	4b05      	ldr	r3, [pc, #20]	; (800b6bc <_vfiprintf_r+0x22c>)
 800b6a6:	a904      	add	r1, sp, #16
 800b6a8:	4630      	mov	r0, r6
 800b6aa:	f7fd ff9d 	bl	80095e8 <_printf_i>
 800b6ae:	e7e4      	b.n	800b67a <_vfiprintf_r+0x1ea>
 800b6b0:	0800bf0c 	.word	0x0800bf0c
 800b6b4:	0800bf16 	.word	0x0800bf16
 800b6b8:	080090a1 	.word	0x080090a1
 800b6bc:	0800b46b 	.word	0x0800b46b
 800b6c0:	0800bf12 	.word	0x0800bf12

0800b6c4 <__sflush_r>:
 800b6c4:	898a      	ldrh	r2, [r1, #12]
 800b6c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6ca:	4605      	mov	r5, r0
 800b6cc:	0710      	lsls	r0, r2, #28
 800b6ce:	460c      	mov	r4, r1
 800b6d0:	d458      	bmi.n	800b784 <__sflush_r+0xc0>
 800b6d2:	684b      	ldr	r3, [r1, #4]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	dc05      	bgt.n	800b6e4 <__sflush_r+0x20>
 800b6d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	dc02      	bgt.n	800b6e4 <__sflush_r+0x20>
 800b6de:	2000      	movs	r0, #0
 800b6e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b6e6:	2e00      	cmp	r6, #0
 800b6e8:	d0f9      	beq.n	800b6de <__sflush_r+0x1a>
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b6f0:	682f      	ldr	r7, [r5, #0]
 800b6f2:	6a21      	ldr	r1, [r4, #32]
 800b6f4:	602b      	str	r3, [r5, #0]
 800b6f6:	d032      	beq.n	800b75e <__sflush_r+0x9a>
 800b6f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b6fa:	89a3      	ldrh	r3, [r4, #12]
 800b6fc:	075a      	lsls	r2, r3, #29
 800b6fe:	d505      	bpl.n	800b70c <__sflush_r+0x48>
 800b700:	6863      	ldr	r3, [r4, #4]
 800b702:	1ac0      	subs	r0, r0, r3
 800b704:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b706:	b10b      	cbz	r3, 800b70c <__sflush_r+0x48>
 800b708:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b70a:	1ac0      	subs	r0, r0, r3
 800b70c:	2300      	movs	r3, #0
 800b70e:	4602      	mov	r2, r0
 800b710:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b712:	6a21      	ldr	r1, [r4, #32]
 800b714:	4628      	mov	r0, r5
 800b716:	47b0      	blx	r6
 800b718:	1c43      	adds	r3, r0, #1
 800b71a:	89a3      	ldrh	r3, [r4, #12]
 800b71c:	d106      	bne.n	800b72c <__sflush_r+0x68>
 800b71e:	6829      	ldr	r1, [r5, #0]
 800b720:	291d      	cmp	r1, #29
 800b722:	d82b      	bhi.n	800b77c <__sflush_r+0xb8>
 800b724:	4a29      	ldr	r2, [pc, #164]	; (800b7cc <__sflush_r+0x108>)
 800b726:	410a      	asrs	r2, r1
 800b728:	07d6      	lsls	r6, r2, #31
 800b72a:	d427      	bmi.n	800b77c <__sflush_r+0xb8>
 800b72c:	2200      	movs	r2, #0
 800b72e:	6062      	str	r2, [r4, #4]
 800b730:	04d9      	lsls	r1, r3, #19
 800b732:	6922      	ldr	r2, [r4, #16]
 800b734:	6022      	str	r2, [r4, #0]
 800b736:	d504      	bpl.n	800b742 <__sflush_r+0x7e>
 800b738:	1c42      	adds	r2, r0, #1
 800b73a:	d101      	bne.n	800b740 <__sflush_r+0x7c>
 800b73c:	682b      	ldr	r3, [r5, #0]
 800b73e:	b903      	cbnz	r3, 800b742 <__sflush_r+0x7e>
 800b740:	6560      	str	r0, [r4, #84]	; 0x54
 800b742:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b744:	602f      	str	r7, [r5, #0]
 800b746:	2900      	cmp	r1, #0
 800b748:	d0c9      	beq.n	800b6de <__sflush_r+0x1a>
 800b74a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b74e:	4299      	cmp	r1, r3
 800b750:	d002      	beq.n	800b758 <__sflush_r+0x94>
 800b752:	4628      	mov	r0, r5
 800b754:	f7ff f89e 	bl	800a894 <_free_r>
 800b758:	2000      	movs	r0, #0
 800b75a:	6360      	str	r0, [r4, #52]	; 0x34
 800b75c:	e7c0      	b.n	800b6e0 <__sflush_r+0x1c>
 800b75e:	2301      	movs	r3, #1
 800b760:	4628      	mov	r0, r5
 800b762:	47b0      	blx	r6
 800b764:	1c41      	adds	r1, r0, #1
 800b766:	d1c8      	bne.n	800b6fa <__sflush_r+0x36>
 800b768:	682b      	ldr	r3, [r5, #0]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d0c5      	beq.n	800b6fa <__sflush_r+0x36>
 800b76e:	2b1d      	cmp	r3, #29
 800b770:	d001      	beq.n	800b776 <__sflush_r+0xb2>
 800b772:	2b16      	cmp	r3, #22
 800b774:	d101      	bne.n	800b77a <__sflush_r+0xb6>
 800b776:	602f      	str	r7, [r5, #0]
 800b778:	e7b1      	b.n	800b6de <__sflush_r+0x1a>
 800b77a:	89a3      	ldrh	r3, [r4, #12]
 800b77c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b780:	81a3      	strh	r3, [r4, #12]
 800b782:	e7ad      	b.n	800b6e0 <__sflush_r+0x1c>
 800b784:	690f      	ldr	r7, [r1, #16]
 800b786:	2f00      	cmp	r7, #0
 800b788:	d0a9      	beq.n	800b6de <__sflush_r+0x1a>
 800b78a:	0793      	lsls	r3, r2, #30
 800b78c:	680e      	ldr	r6, [r1, #0]
 800b78e:	bf08      	it	eq
 800b790:	694b      	ldreq	r3, [r1, #20]
 800b792:	600f      	str	r7, [r1, #0]
 800b794:	bf18      	it	ne
 800b796:	2300      	movne	r3, #0
 800b798:	eba6 0807 	sub.w	r8, r6, r7
 800b79c:	608b      	str	r3, [r1, #8]
 800b79e:	f1b8 0f00 	cmp.w	r8, #0
 800b7a2:	dd9c      	ble.n	800b6de <__sflush_r+0x1a>
 800b7a4:	6a21      	ldr	r1, [r4, #32]
 800b7a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b7a8:	4643      	mov	r3, r8
 800b7aa:	463a      	mov	r2, r7
 800b7ac:	4628      	mov	r0, r5
 800b7ae:	47b0      	blx	r6
 800b7b0:	2800      	cmp	r0, #0
 800b7b2:	dc06      	bgt.n	800b7c2 <__sflush_r+0xfe>
 800b7b4:	89a3      	ldrh	r3, [r4, #12]
 800b7b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7ba:	81a3      	strh	r3, [r4, #12]
 800b7bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b7c0:	e78e      	b.n	800b6e0 <__sflush_r+0x1c>
 800b7c2:	4407      	add	r7, r0
 800b7c4:	eba8 0800 	sub.w	r8, r8, r0
 800b7c8:	e7e9      	b.n	800b79e <__sflush_r+0xda>
 800b7ca:	bf00      	nop
 800b7cc:	dfbffffe 	.word	0xdfbffffe

0800b7d0 <_fflush_r>:
 800b7d0:	b538      	push	{r3, r4, r5, lr}
 800b7d2:	690b      	ldr	r3, [r1, #16]
 800b7d4:	4605      	mov	r5, r0
 800b7d6:	460c      	mov	r4, r1
 800b7d8:	b913      	cbnz	r3, 800b7e0 <_fflush_r+0x10>
 800b7da:	2500      	movs	r5, #0
 800b7dc:	4628      	mov	r0, r5
 800b7de:	bd38      	pop	{r3, r4, r5, pc}
 800b7e0:	b118      	cbz	r0, 800b7ea <_fflush_r+0x1a>
 800b7e2:	6a03      	ldr	r3, [r0, #32]
 800b7e4:	b90b      	cbnz	r3, 800b7ea <_fflush_r+0x1a>
 800b7e6:	f7fe f8ad 	bl	8009944 <__sinit>
 800b7ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d0f3      	beq.n	800b7da <_fflush_r+0xa>
 800b7f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b7f4:	07d0      	lsls	r0, r2, #31
 800b7f6:	d404      	bmi.n	800b802 <_fflush_r+0x32>
 800b7f8:	0599      	lsls	r1, r3, #22
 800b7fa:	d402      	bmi.n	800b802 <_fflush_r+0x32>
 800b7fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7fe:	f7fe f9ca 	bl	8009b96 <__retarget_lock_acquire_recursive>
 800b802:	4628      	mov	r0, r5
 800b804:	4621      	mov	r1, r4
 800b806:	f7ff ff5d 	bl	800b6c4 <__sflush_r>
 800b80a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b80c:	07da      	lsls	r2, r3, #31
 800b80e:	4605      	mov	r5, r0
 800b810:	d4e4      	bmi.n	800b7dc <_fflush_r+0xc>
 800b812:	89a3      	ldrh	r3, [r4, #12]
 800b814:	059b      	lsls	r3, r3, #22
 800b816:	d4e1      	bmi.n	800b7dc <_fflush_r+0xc>
 800b818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b81a:	f7fe f9bd 	bl	8009b98 <__retarget_lock_release_recursive>
 800b81e:	e7dd      	b.n	800b7dc <_fflush_r+0xc>

0800b820 <__swbuf_r>:
 800b820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b822:	460e      	mov	r6, r1
 800b824:	4614      	mov	r4, r2
 800b826:	4605      	mov	r5, r0
 800b828:	b118      	cbz	r0, 800b832 <__swbuf_r+0x12>
 800b82a:	6a03      	ldr	r3, [r0, #32]
 800b82c:	b90b      	cbnz	r3, 800b832 <__swbuf_r+0x12>
 800b82e:	f7fe f889 	bl	8009944 <__sinit>
 800b832:	69a3      	ldr	r3, [r4, #24]
 800b834:	60a3      	str	r3, [r4, #8]
 800b836:	89a3      	ldrh	r3, [r4, #12]
 800b838:	071a      	lsls	r2, r3, #28
 800b83a:	d525      	bpl.n	800b888 <__swbuf_r+0x68>
 800b83c:	6923      	ldr	r3, [r4, #16]
 800b83e:	b31b      	cbz	r3, 800b888 <__swbuf_r+0x68>
 800b840:	6823      	ldr	r3, [r4, #0]
 800b842:	6922      	ldr	r2, [r4, #16]
 800b844:	1a98      	subs	r0, r3, r2
 800b846:	6963      	ldr	r3, [r4, #20]
 800b848:	b2f6      	uxtb	r6, r6
 800b84a:	4283      	cmp	r3, r0
 800b84c:	4637      	mov	r7, r6
 800b84e:	dc04      	bgt.n	800b85a <__swbuf_r+0x3a>
 800b850:	4621      	mov	r1, r4
 800b852:	4628      	mov	r0, r5
 800b854:	f7ff ffbc 	bl	800b7d0 <_fflush_r>
 800b858:	b9e0      	cbnz	r0, 800b894 <__swbuf_r+0x74>
 800b85a:	68a3      	ldr	r3, [r4, #8]
 800b85c:	3b01      	subs	r3, #1
 800b85e:	60a3      	str	r3, [r4, #8]
 800b860:	6823      	ldr	r3, [r4, #0]
 800b862:	1c5a      	adds	r2, r3, #1
 800b864:	6022      	str	r2, [r4, #0]
 800b866:	701e      	strb	r6, [r3, #0]
 800b868:	6962      	ldr	r2, [r4, #20]
 800b86a:	1c43      	adds	r3, r0, #1
 800b86c:	429a      	cmp	r2, r3
 800b86e:	d004      	beq.n	800b87a <__swbuf_r+0x5a>
 800b870:	89a3      	ldrh	r3, [r4, #12]
 800b872:	07db      	lsls	r3, r3, #31
 800b874:	d506      	bpl.n	800b884 <__swbuf_r+0x64>
 800b876:	2e0a      	cmp	r6, #10
 800b878:	d104      	bne.n	800b884 <__swbuf_r+0x64>
 800b87a:	4621      	mov	r1, r4
 800b87c:	4628      	mov	r0, r5
 800b87e:	f7ff ffa7 	bl	800b7d0 <_fflush_r>
 800b882:	b938      	cbnz	r0, 800b894 <__swbuf_r+0x74>
 800b884:	4638      	mov	r0, r7
 800b886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b888:	4621      	mov	r1, r4
 800b88a:	4628      	mov	r0, r5
 800b88c:	f000 f806 	bl	800b89c <__swsetup_r>
 800b890:	2800      	cmp	r0, #0
 800b892:	d0d5      	beq.n	800b840 <__swbuf_r+0x20>
 800b894:	f04f 37ff 	mov.w	r7, #4294967295
 800b898:	e7f4      	b.n	800b884 <__swbuf_r+0x64>
	...

0800b89c <__swsetup_r>:
 800b89c:	b538      	push	{r3, r4, r5, lr}
 800b89e:	4b2a      	ldr	r3, [pc, #168]	; (800b948 <__swsetup_r+0xac>)
 800b8a0:	4605      	mov	r5, r0
 800b8a2:	6818      	ldr	r0, [r3, #0]
 800b8a4:	460c      	mov	r4, r1
 800b8a6:	b118      	cbz	r0, 800b8b0 <__swsetup_r+0x14>
 800b8a8:	6a03      	ldr	r3, [r0, #32]
 800b8aa:	b90b      	cbnz	r3, 800b8b0 <__swsetup_r+0x14>
 800b8ac:	f7fe f84a 	bl	8009944 <__sinit>
 800b8b0:	89a3      	ldrh	r3, [r4, #12]
 800b8b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b8b6:	0718      	lsls	r0, r3, #28
 800b8b8:	d422      	bmi.n	800b900 <__swsetup_r+0x64>
 800b8ba:	06d9      	lsls	r1, r3, #27
 800b8bc:	d407      	bmi.n	800b8ce <__swsetup_r+0x32>
 800b8be:	2309      	movs	r3, #9
 800b8c0:	602b      	str	r3, [r5, #0]
 800b8c2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b8c6:	81a3      	strh	r3, [r4, #12]
 800b8c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b8cc:	e034      	b.n	800b938 <__swsetup_r+0x9c>
 800b8ce:	0758      	lsls	r0, r3, #29
 800b8d0:	d512      	bpl.n	800b8f8 <__swsetup_r+0x5c>
 800b8d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b8d4:	b141      	cbz	r1, 800b8e8 <__swsetup_r+0x4c>
 800b8d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b8da:	4299      	cmp	r1, r3
 800b8dc:	d002      	beq.n	800b8e4 <__swsetup_r+0x48>
 800b8de:	4628      	mov	r0, r5
 800b8e0:	f7fe ffd8 	bl	800a894 <_free_r>
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	6363      	str	r3, [r4, #52]	; 0x34
 800b8e8:	89a3      	ldrh	r3, [r4, #12]
 800b8ea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b8ee:	81a3      	strh	r3, [r4, #12]
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	6063      	str	r3, [r4, #4]
 800b8f4:	6923      	ldr	r3, [r4, #16]
 800b8f6:	6023      	str	r3, [r4, #0]
 800b8f8:	89a3      	ldrh	r3, [r4, #12]
 800b8fa:	f043 0308 	orr.w	r3, r3, #8
 800b8fe:	81a3      	strh	r3, [r4, #12]
 800b900:	6923      	ldr	r3, [r4, #16]
 800b902:	b94b      	cbnz	r3, 800b918 <__swsetup_r+0x7c>
 800b904:	89a3      	ldrh	r3, [r4, #12]
 800b906:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b90a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b90e:	d003      	beq.n	800b918 <__swsetup_r+0x7c>
 800b910:	4621      	mov	r1, r4
 800b912:	4628      	mov	r0, r5
 800b914:	f000 f90c 	bl	800bb30 <__smakebuf_r>
 800b918:	89a0      	ldrh	r0, [r4, #12]
 800b91a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b91e:	f010 0301 	ands.w	r3, r0, #1
 800b922:	d00a      	beq.n	800b93a <__swsetup_r+0x9e>
 800b924:	2300      	movs	r3, #0
 800b926:	60a3      	str	r3, [r4, #8]
 800b928:	6963      	ldr	r3, [r4, #20]
 800b92a:	425b      	negs	r3, r3
 800b92c:	61a3      	str	r3, [r4, #24]
 800b92e:	6923      	ldr	r3, [r4, #16]
 800b930:	b943      	cbnz	r3, 800b944 <__swsetup_r+0xa8>
 800b932:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b936:	d1c4      	bne.n	800b8c2 <__swsetup_r+0x26>
 800b938:	bd38      	pop	{r3, r4, r5, pc}
 800b93a:	0781      	lsls	r1, r0, #30
 800b93c:	bf58      	it	pl
 800b93e:	6963      	ldrpl	r3, [r4, #20]
 800b940:	60a3      	str	r3, [r4, #8]
 800b942:	e7f4      	b.n	800b92e <__swsetup_r+0x92>
 800b944:	2000      	movs	r0, #0
 800b946:	e7f7      	b.n	800b938 <__swsetup_r+0x9c>
 800b948:	20000068 	.word	0x20000068

0800b94c <memmove>:
 800b94c:	4288      	cmp	r0, r1
 800b94e:	b510      	push	{r4, lr}
 800b950:	eb01 0402 	add.w	r4, r1, r2
 800b954:	d902      	bls.n	800b95c <memmove+0x10>
 800b956:	4284      	cmp	r4, r0
 800b958:	4623      	mov	r3, r4
 800b95a:	d807      	bhi.n	800b96c <memmove+0x20>
 800b95c:	1e43      	subs	r3, r0, #1
 800b95e:	42a1      	cmp	r1, r4
 800b960:	d008      	beq.n	800b974 <memmove+0x28>
 800b962:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b966:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b96a:	e7f8      	b.n	800b95e <memmove+0x12>
 800b96c:	4402      	add	r2, r0
 800b96e:	4601      	mov	r1, r0
 800b970:	428a      	cmp	r2, r1
 800b972:	d100      	bne.n	800b976 <memmove+0x2a>
 800b974:	bd10      	pop	{r4, pc}
 800b976:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b97a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b97e:	e7f7      	b.n	800b970 <memmove+0x24>

0800b980 <_sbrk_r>:
 800b980:	b538      	push	{r3, r4, r5, lr}
 800b982:	4d06      	ldr	r5, [pc, #24]	; (800b99c <_sbrk_r+0x1c>)
 800b984:	2300      	movs	r3, #0
 800b986:	4604      	mov	r4, r0
 800b988:	4608      	mov	r0, r1
 800b98a:	602b      	str	r3, [r5, #0]
 800b98c:	f7f7 fe64 	bl	8003658 <_sbrk>
 800b990:	1c43      	adds	r3, r0, #1
 800b992:	d102      	bne.n	800b99a <_sbrk_r+0x1a>
 800b994:	682b      	ldr	r3, [r5, #0]
 800b996:	b103      	cbz	r3, 800b99a <_sbrk_r+0x1a>
 800b998:	6023      	str	r3, [r4, #0]
 800b99a:	bd38      	pop	{r3, r4, r5, pc}
 800b99c:	20000ff0 	.word	0x20000ff0

0800b9a0 <memcpy>:
 800b9a0:	440a      	add	r2, r1
 800b9a2:	4291      	cmp	r1, r2
 800b9a4:	f100 33ff 	add.w	r3, r0, #4294967295
 800b9a8:	d100      	bne.n	800b9ac <memcpy+0xc>
 800b9aa:	4770      	bx	lr
 800b9ac:	b510      	push	{r4, lr}
 800b9ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b9b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b9b6:	4291      	cmp	r1, r2
 800b9b8:	d1f9      	bne.n	800b9ae <memcpy+0xe>
 800b9ba:	bd10      	pop	{r4, pc}

0800b9bc <__assert_func>:
 800b9bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b9be:	4614      	mov	r4, r2
 800b9c0:	461a      	mov	r2, r3
 800b9c2:	4b09      	ldr	r3, [pc, #36]	; (800b9e8 <__assert_func+0x2c>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	4605      	mov	r5, r0
 800b9c8:	68d8      	ldr	r0, [r3, #12]
 800b9ca:	b14c      	cbz	r4, 800b9e0 <__assert_func+0x24>
 800b9cc:	4b07      	ldr	r3, [pc, #28]	; (800b9ec <__assert_func+0x30>)
 800b9ce:	9100      	str	r1, [sp, #0]
 800b9d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b9d4:	4906      	ldr	r1, [pc, #24]	; (800b9f0 <__assert_func+0x34>)
 800b9d6:	462b      	mov	r3, r5
 800b9d8:	f000 f872 	bl	800bac0 <fiprintf>
 800b9dc:	f000 f906 	bl	800bbec <abort>
 800b9e0:	4b04      	ldr	r3, [pc, #16]	; (800b9f4 <__assert_func+0x38>)
 800b9e2:	461c      	mov	r4, r3
 800b9e4:	e7f3      	b.n	800b9ce <__assert_func+0x12>
 800b9e6:	bf00      	nop
 800b9e8:	20000068 	.word	0x20000068
 800b9ec:	0800bf27 	.word	0x0800bf27
 800b9f0:	0800bf34 	.word	0x0800bf34
 800b9f4:	0800bf62 	.word	0x0800bf62

0800b9f8 <_calloc_r>:
 800b9f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b9fa:	fba1 2402 	umull	r2, r4, r1, r2
 800b9fe:	b94c      	cbnz	r4, 800ba14 <_calloc_r+0x1c>
 800ba00:	4611      	mov	r1, r2
 800ba02:	9201      	str	r2, [sp, #4]
 800ba04:	f7fe ffba 	bl	800a97c <_malloc_r>
 800ba08:	9a01      	ldr	r2, [sp, #4]
 800ba0a:	4605      	mov	r5, r0
 800ba0c:	b930      	cbnz	r0, 800ba1c <_calloc_r+0x24>
 800ba0e:	4628      	mov	r0, r5
 800ba10:	b003      	add	sp, #12
 800ba12:	bd30      	pop	{r4, r5, pc}
 800ba14:	220c      	movs	r2, #12
 800ba16:	6002      	str	r2, [r0, #0]
 800ba18:	2500      	movs	r5, #0
 800ba1a:	e7f8      	b.n	800ba0e <_calloc_r+0x16>
 800ba1c:	4621      	mov	r1, r4
 800ba1e:	f7fe f83c 	bl	8009a9a <memset>
 800ba22:	e7f4      	b.n	800ba0e <_calloc_r+0x16>

0800ba24 <__ascii_mbtowc>:
 800ba24:	b082      	sub	sp, #8
 800ba26:	b901      	cbnz	r1, 800ba2a <__ascii_mbtowc+0x6>
 800ba28:	a901      	add	r1, sp, #4
 800ba2a:	b142      	cbz	r2, 800ba3e <__ascii_mbtowc+0x1a>
 800ba2c:	b14b      	cbz	r3, 800ba42 <__ascii_mbtowc+0x1e>
 800ba2e:	7813      	ldrb	r3, [r2, #0]
 800ba30:	600b      	str	r3, [r1, #0]
 800ba32:	7812      	ldrb	r2, [r2, #0]
 800ba34:	1e10      	subs	r0, r2, #0
 800ba36:	bf18      	it	ne
 800ba38:	2001      	movne	r0, #1
 800ba3a:	b002      	add	sp, #8
 800ba3c:	4770      	bx	lr
 800ba3e:	4610      	mov	r0, r2
 800ba40:	e7fb      	b.n	800ba3a <__ascii_mbtowc+0x16>
 800ba42:	f06f 0001 	mvn.w	r0, #1
 800ba46:	e7f8      	b.n	800ba3a <__ascii_mbtowc+0x16>

0800ba48 <_realloc_r>:
 800ba48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba4c:	4680      	mov	r8, r0
 800ba4e:	4614      	mov	r4, r2
 800ba50:	460e      	mov	r6, r1
 800ba52:	b921      	cbnz	r1, 800ba5e <_realloc_r+0x16>
 800ba54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba58:	4611      	mov	r1, r2
 800ba5a:	f7fe bf8f 	b.w	800a97c <_malloc_r>
 800ba5e:	b92a      	cbnz	r2, 800ba6c <_realloc_r+0x24>
 800ba60:	f7fe ff18 	bl	800a894 <_free_r>
 800ba64:	4625      	mov	r5, r4
 800ba66:	4628      	mov	r0, r5
 800ba68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba6c:	f000 f8c5 	bl	800bbfa <_malloc_usable_size_r>
 800ba70:	4284      	cmp	r4, r0
 800ba72:	4607      	mov	r7, r0
 800ba74:	d802      	bhi.n	800ba7c <_realloc_r+0x34>
 800ba76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ba7a:	d812      	bhi.n	800baa2 <_realloc_r+0x5a>
 800ba7c:	4621      	mov	r1, r4
 800ba7e:	4640      	mov	r0, r8
 800ba80:	f7fe ff7c 	bl	800a97c <_malloc_r>
 800ba84:	4605      	mov	r5, r0
 800ba86:	2800      	cmp	r0, #0
 800ba88:	d0ed      	beq.n	800ba66 <_realloc_r+0x1e>
 800ba8a:	42bc      	cmp	r4, r7
 800ba8c:	4622      	mov	r2, r4
 800ba8e:	4631      	mov	r1, r6
 800ba90:	bf28      	it	cs
 800ba92:	463a      	movcs	r2, r7
 800ba94:	f7ff ff84 	bl	800b9a0 <memcpy>
 800ba98:	4631      	mov	r1, r6
 800ba9a:	4640      	mov	r0, r8
 800ba9c:	f7fe fefa 	bl	800a894 <_free_r>
 800baa0:	e7e1      	b.n	800ba66 <_realloc_r+0x1e>
 800baa2:	4635      	mov	r5, r6
 800baa4:	e7df      	b.n	800ba66 <_realloc_r+0x1e>

0800baa6 <__ascii_wctomb>:
 800baa6:	b149      	cbz	r1, 800babc <__ascii_wctomb+0x16>
 800baa8:	2aff      	cmp	r2, #255	; 0xff
 800baaa:	bf85      	ittet	hi
 800baac:	238a      	movhi	r3, #138	; 0x8a
 800baae:	6003      	strhi	r3, [r0, #0]
 800bab0:	700a      	strbls	r2, [r1, #0]
 800bab2:	f04f 30ff 	movhi.w	r0, #4294967295
 800bab6:	bf98      	it	ls
 800bab8:	2001      	movls	r0, #1
 800baba:	4770      	bx	lr
 800babc:	4608      	mov	r0, r1
 800babe:	4770      	bx	lr

0800bac0 <fiprintf>:
 800bac0:	b40e      	push	{r1, r2, r3}
 800bac2:	b503      	push	{r0, r1, lr}
 800bac4:	4601      	mov	r1, r0
 800bac6:	ab03      	add	r3, sp, #12
 800bac8:	4805      	ldr	r0, [pc, #20]	; (800bae0 <fiprintf+0x20>)
 800baca:	f853 2b04 	ldr.w	r2, [r3], #4
 800bace:	6800      	ldr	r0, [r0, #0]
 800bad0:	9301      	str	r3, [sp, #4]
 800bad2:	f7ff fcdd 	bl	800b490 <_vfiprintf_r>
 800bad6:	b002      	add	sp, #8
 800bad8:	f85d eb04 	ldr.w	lr, [sp], #4
 800badc:	b003      	add	sp, #12
 800bade:	4770      	bx	lr
 800bae0:	20000068 	.word	0x20000068

0800bae4 <__swhatbuf_r>:
 800bae4:	b570      	push	{r4, r5, r6, lr}
 800bae6:	460c      	mov	r4, r1
 800bae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baec:	2900      	cmp	r1, #0
 800baee:	b096      	sub	sp, #88	; 0x58
 800baf0:	4615      	mov	r5, r2
 800baf2:	461e      	mov	r6, r3
 800baf4:	da0d      	bge.n	800bb12 <__swhatbuf_r+0x2e>
 800baf6:	89a3      	ldrh	r3, [r4, #12]
 800baf8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bafc:	f04f 0100 	mov.w	r1, #0
 800bb00:	bf0c      	ite	eq
 800bb02:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bb06:	2340      	movne	r3, #64	; 0x40
 800bb08:	2000      	movs	r0, #0
 800bb0a:	6031      	str	r1, [r6, #0]
 800bb0c:	602b      	str	r3, [r5, #0]
 800bb0e:	b016      	add	sp, #88	; 0x58
 800bb10:	bd70      	pop	{r4, r5, r6, pc}
 800bb12:	466a      	mov	r2, sp
 800bb14:	f000 f848 	bl	800bba8 <_fstat_r>
 800bb18:	2800      	cmp	r0, #0
 800bb1a:	dbec      	blt.n	800baf6 <__swhatbuf_r+0x12>
 800bb1c:	9901      	ldr	r1, [sp, #4]
 800bb1e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bb22:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bb26:	4259      	negs	r1, r3
 800bb28:	4159      	adcs	r1, r3
 800bb2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb2e:	e7eb      	b.n	800bb08 <__swhatbuf_r+0x24>

0800bb30 <__smakebuf_r>:
 800bb30:	898b      	ldrh	r3, [r1, #12]
 800bb32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bb34:	079d      	lsls	r5, r3, #30
 800bb36:	4606      	mov	r6, r0
 800bb38:	460c      	mov	r4, r1
 800bb3a:	d507      	bpl.n	800bb4c <__smakebuf_r+0x1c>
 800bb3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bb40:	6023      	str	r3, [r4, #0]
 800bb42:	6123      	str	r3, [r4, #16]
 800bb44:	2301      	movs	r3, #1
 800bb46:	6163      	str	r3, [r4, #20]
 800bb48:	b002      	add	sp, #8
 800bb4a:	bd70      	pop	{r4, r5, r6, pc}
 800bb4c:	ab01      	add	r3, sp, #4
 800bb4e:	466a      	mov	r2, sp
 800bb50:	f7ff ffc8 	bl	800bae4 <__swhatbuf_r>
 800bb54:	9900      	ldr	r1, [sp, #0]
 800bb56:	4605      	mov	r5, r0
 800bb58:	4630      	mov	r0, r6
 800bb5a:	f7fe ff0f 	bl	800a97c <_malloc_r>
 800bb5e:	b948      	cbnz	r0, 800bb74 <__smakebuf_r+0x44>
 800bb60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb64:	059a      	lsls	r2, r3, #22
 800bb66:	d4ef      	bmi.n	800bb48 <__smakebuf_r+0x18>
 800bb68:	f023 0303 	bic.w	r3, r3, #3
 800bb6c:	f043 0302 	orr.w	r3, r3, #2
 800bb70:	81a3      	strh	r3, [r4, #12]
 800bb72:	e7e3      	b.n	800bb3c <__smakebuf_r+0xc>
 800bb74:	89a3      	ldrh	r3, [r4, #12]
 800bb76:	6020      	str	r0, [r4, #0]
 800bb78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb7c:	81a3      	strh	r3, [r4, #12]
 800bb7e:	9b00      	ldr	r3, [sp, #0]
 800bb80:	6163      	str	r3, [r4, #20]
 800bb82:	9b01      	ldr	r3, [sp, #4]
 800bb84:	6120      	str	r0, [r4, #16]
 800bb86:	b15b      	cbz	r3, 800bba0 <__smakebuf_r+0x70>
 800bb88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb8c:	4630      	mov	r0, r6
 800bb8e:	f000 f81d 	bl	800bbcc <_isatty_r>
 800bb92:	b128      	cbz	r0, 800bba0 <__smakebuf_r+0x70>
 800bb94:	89a3      	ldrh	r3, [r4, #12]
 800bb96:	f023 0303 	bic.w	r3, r3, #3
 800bb9a:	f043 0301 	orr.w	r3, r3, #1
 800bb9e:	81a3      	strh	r3, [r4, #12]
 800bba0:	89a3      	ldrh	r3, [r4, #12]
 800bba2:	431d      	orrs	r5, r3
 800bba4:	81a5      	strh	r5, [r4, #12]
 800bba6:	e7cf      	b.n	800bb48 <__smakebuf_r+0x18>

0800bba8 <_fstat_r>:
 800bba8:	b538      	push	{r3, r4, r5, lr}
 800bbaa:	4d07      	ldr	r5, [pc, #28]	; (800bbc8 <_fstat_r+0x20>)
 800bbac:	2300      	movs	r3, #0
 800bbae:	4604      	mov	r4, r0
 800bbb0:	4608      	mov	r0, r1
 800bbb2:	4611      	mov	r1, r2
 800bbb4:	602b      	str	r3, [r5, #0]
 800bbb6:	f7f7 fd26 	bl	8003606 <_fstat>
 800bbba:	1c43      	adds	r3, r0, #1
 800bbbc:	d102      	bne.n	800bbc4 <_fstat_r+0x1c>
 800bbbe:	682b      	ldr	r3, [r5, #0]
 800bbc0:	b103      	cbz	r3, 800bbc4 <_fstat_r+0x1c>
 800bbc2:	6023      	str	r3, [r4, #0]
 800bbc4:	bd38      	pop	{r3, r4, r5, pc}
 800bbc6:	bf00      	nop
 800bbc8:	20000ff0 	.word	0x20000ff0

0800bbcc <_isatty_r>:
 800bbcc:	b538      	push	{r3, r4, r5, lr}
 800bbce:	4d06      	ldr	r5, [pc, #24]	; (800bbe8 <_isatty_r+0x1c>)
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	4604      	mov	r4, r0
 800bbd4:	4608      	mov	r0, r1
 800bbd6:	602b      	str	r3, [r5, #0]
 800bbd8:	f7f7 fd25 	bl	8003626 <_isatty>
 800bbdc:	1c43      	adds	r3, r0, #1
 800bbde:	d102      	bne.n	800bbe6 <_isatty_r+0x1a>
 800bbe0:	682b      	ldr	r3, [r5, #0]
 800bbe2:	b103      	cbz	r3, 800bbe6 <_isatty_r+0x1a>
 800bbe4:	6023      	str	r3, [r4, #0]
 800bbe6:	bd38      	pop	{r3, r4, r5, pc}
 800bbe8:	20000ff0 	.word	0x20000ff0

0800bbec <abort>:
 800bbec:	b508      	push	{r3, lr}
 800bbee:	2006      	movs	r0, #6
 800bbf0:	f000 f834 	bl	800bc5c <raise>
 800bbf4:	2001      	movs	r0, #1
 800bbf6:	f7f7 fcd3 	bl	80035a0 <_exit>

0800bbfa <_malloc_usable_size_r>:
 800bbfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbfe:	1f18      	subs	r0, r3, #4
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	bfbc      	itt	lt
 800bc04:	580b      	ldrlt	r3, [r1, r0]
 800bc06:	18c0      	addlt	r0, r0, r3
 800bc08:	4770      	bx	lr

0800bc0a <_raise_r>:
 800bc0a:	291f      	cmp	r1, #31
 800bc0c:	b538      	push	{r3, r4, r5, lr}
 800bc0e:	4604      	mov	r4, r0
 800bc10:	460d      	mov	r5, r1
 800bc12:	d904      	bls.n	800bc1e <_raise_r+0x14>
 800bc14:	2316      	movs	r3, #22
 800bc16:	6003      	str	r3, [r0, #0]
 800bc18:	f04f 30ff 	mov.w	r0, #4294967295
 800bc1c:	bd38      	pop	{r3, r4, r5, pc}
 800bc1e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800bc20:	b112      	cbz	r2, 800bc28 <_raise_r+0x1e>
 800bc22:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc26:	b94b      	cbnz	r3, 800bc3c <_raise_r+0x32>
 800bc28:	4620      	mov	r0, r4
 800bc2a:	f000 f831 	bl	800bc90 <_getpid_r>
 800bc2e:	462a      	mov	r2, r5
 800bc30:	4601      	mov	r1, r0
 800bc32:	4620      	mov	r0, r4
 800bc34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc38:	f000 b818 	b.w	800bc6c <_kill_r>
 800bc3c:	2b01      	cmp	r3, #1
 800bc3e:	d00a      	beq.n	800bc56 <_raise_r+0x4c>
 800bc40:	1c59      	adds	r1, r3, #1
 800bc42:	d103      	bne.n	800bc4c <_raise_r+0x42>
 800bc44:	2316      	movs	r3, #22
 800bc46:	6003      	str	r3, [r0, #0]
 800bc48:	2001      	movs	r0, #1
 800bc4a:	e7e7      	b.n	800bc1c <_raise_r+0x12>
 800bc4c:	2400      	movs	r4, #0
 800bc4e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bc52:	4628      	mov	r0, r5
 800bc54:	4798      	blx	r3
 800bc56:	2000      	movs	r0, #0
 800bc58:	e7e0      	b.n	800bc1c <_raise_r+0x12>
	...

0800bc5c <raise>:
 800bc5c:	4b02      	ldr	r3, [pc, #8]	; (800bc68 <raise+0xc>)
 800bc5e:	4601      	mov	r1, r0
 800bc60:	6818      	ldr	r0, [r3, #0]
 800bc62:	f7ff bfd2 	b.w	800bc0a <_raise_r>
 800bc66:	bf00      	nop
 800bc68:	20000068 	.word	0x20000068

0800bc6c <_kill_r>:
 800bc6c:	b538      	push	{r3, r4, r5, lr}
 800bc6e:	4d07      	ldr	r5, [pc, #28]	; (800bc8c <_kill_r+0x20>)
 800bc70:	2300      	movs	r3, #0
 800bc72:	4604      	mov	r4, r0
 800bc74:	4608      	mov	r0, r1
 800bc76:	4611      	mov	r1, r2
 800bc78:	602b      	str	r3, [r5, #0]
 800bc7a:	f7f7 fc81 	bl	8003580 <_kill>
 800bc7e:	1c43      	adds	r3, r0, #1
 800bc80:	d102      	bne.n	800bc88 <_kill_r+0x1c>
 800bc82:	682b      	ldr	r3, [r5, #0]
 800bc84:	b103      	cbz	r3, 800bc88 <_kill_r+0x1c>
 800bc86:	6023      	str	r3, [r4, #0]
 800bc88:	bd38      	pop	{r3, r4, r5, pc}
 800bc8a:	bf00      	nop
 800bc8c:	20000ff0 	.word	0x20000ff0

0800bc90 <_getpid_r>:
 800bc90:	f7f7 bc6e 	b.w	8003570 <_getpid>

0800bc94 <_init>:
 800bc94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc96:	bf00      	nop
 800bc98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc9a:	bc08      	pop	{r3}
 800bc9c:	469e      	mov	lr, r3
 800bc9e:	4770      	bx	lr

0800bca0 <_fini>:
 800bca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bca2:	bf00      	nop
 800bca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bca6:	bc08      	pop	{r3}
 800bca8:	469e      	mov	lr, r3
 800bcaa:	4770      	bx	lr
