
teraterm_encoder_count.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcc4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  0800be78  0800be78  0001be78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c224  0800c224  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c224  0800c224  0001c224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c22c  0800c22c  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c22c  0800c22c  0001c22c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c230  0800c230  0001c230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800c234  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d8  2**0
                  CONTENTS
 10 .bss          00000e20  200001d8  200001d8  000201d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000ff8  20000ff8  000201d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001bb80  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000031bb  00000000  00000000  0003bdcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001488  00000000  00000000  0003ef88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000012b8  00000000  00000000  00040410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002b8cb  00000000  00000000  000416c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00019c78  00000000  00000000  0006cf93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f6905  00000000  00000000  00086c0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006988  00000000  00000000  0017d510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_rnglists 00000085  00000000  00000000  00183e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800be5c 	.word	0x0800be5c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	0800be5c 	.word	0x0800be5c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b970 	b.w	8000fa0 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	460d      	mov	r5, r1
 8000ce0:	4604      	mov	r4, r0
 8000ce2:	460f      	mov	r7, r1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d14a      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce8:	428a      	cmp	r2, r1
 8000cea:	4694      	mov	ip, r2
 8000cec:	d965      	bls.n	8000dba <__udivmoddi4+0xe2>
 8000cee:	fab2 f382 	clz	r3, r2
 8000cf2:	b143      	cbz	r3, 8000d06 <__udivmoddi4+0x2e>
 8000cf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cf8:	f1c3 0220 	rsb	r2, r3, #32
 8000cfc:	409f      	lsls	r7, r3
 8000cfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000d02:	4317      	orrs	r7, r2
 8000d04:	409c      	lsls	r4, r3
 8000d06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d0a:	fa1f f58c 	uxth.w	r5, ip
 8000d0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d12:	0c22      	lsrs	r2, r4, #16
 8000d14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d1c:	fb01 f005 	mul.w	r0, r1, r5
 8000d20:	4290      	cmp	r0, r2
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x62>
 8000d24:	eb1c 0202 	adds.w	r2, ip, r2
 8000d28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d2c:	f080 811c 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d30:	4290      	cmp	r0, r2
 8000d32:	f240 8119 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d36:	3902      	subs	r1, #2
 8000d38:	4462      	add	r2, ip
 8000d3a:	1a12      	subs	r2, r2, r0
 8000d3c:	b2a4      	uxth	r4, r4
 8000d3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4a:	fb00 f505 	mul.w	r5, r0, r5
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	d90a      	bls.n	8000d68 <__udivmoddi4+0x90>
 8000d52:	eb1c 0404 	adds.w	r4, ip, r4
 8000d56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d5a:	f080 8107 	bcs.w	8000f6c <__udivmoddi4+0x294>
 8000d5e:	42a5      	cmp	r5, r4
 8000d60:	f240 8104 	bls.w	8000f6c <__udivmoddi4+0x294>
 8000d64:	4464      	add	r4, ip
 8000d66:	3802      	subs	r0, #2
 8000d68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d6c:	1b64      	subs	r4, r4, r5
 8000d6e:	2100      	movs	r1, #0
 8000d70:	b11e      	cbz	r6, 8000d7a <__udivmoddi4+0xa2>
 8000d72:	40dc      	lsrs	r4, r3
 8000d74:	2300      	movs	r3, #0
 8000d76:	e9c6 4300 	strd	r4, r3, [r6]
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0xbc>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80ed 	beq.w	8000f62 <__udivmoddi4+0x28a>
 8000d88:	2100      	movs	r1, #0
 8000d8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d8e:	4608      	mov	r0, r1
 8000d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d94:	fab3 f183 	clz	r1, r3
 8000d98:	2900      	cmp	r1, #0
 8000d9a:	d149      	bne.n	8000e30 <__udivmoddi4+0x158>
 8000d9c:	42ab      	cmp	r3, r5
 8000d9e:	d302      	bcc.n	8000da6 <__udivmoddi4+0xce>
 8000da0:	4282      	cmp	r2, r0
 8000da2:	f200 80f8 	bhi.w	8000f96 <__udivmoddi4+0x2be>
 8000da6:	1a84      	subs	r4, r0, r2
 8000da8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dac:	2001      	movs	r0, #1
 8000dae:	4617      	mov	r7, r2
 8000db0:	2e00      	cmp	r6, #0
 8000db2:	d0e2      	beq.n	8000d7a <__udivmoddi4+0xa2>
 8000db4:	e9c6 4700 	strd	r4, r7, [r6]
 8000db8:	e7df      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000dba:	b902      	cbnz	r2, 8000dbe <__udivmoddi4+0xe6>
 8000dbc:	deff      	udf	#255	; 0xff
 8000dbe:	fab2 f382 	clz	r3, r2
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	f040 8090 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dc8:	1a8a      	subs	r2, r1, r2
 8000dca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dce:	fa1f fe8c 	uxth.w	lr, ip
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000ddc:	0c22      	lsrs	r2, r4, #16
 8000dde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000de2:	fb0e f005 	mul.w	r0, lr, r5
 8000de6:	4290      	cmp	r0, r2
 8000de8:	d908      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dea:	eb1c 0202 	adds.w	r2, ip, r2
 8000dee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4290      	cmp	r0, r2
 8000df6:	f200 80cb 	bhi.w	8000f90 <__udivmoddi4+0x2b8>
 8000dfa:	4645      	mov	r5, r8
 8000dfc:	1a12      	subs	r2, r2, r0
 8000dfe:	b2a4      	uxth	r4, r4
 8000e00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e04:	fb07 2210 	mls	r2, r7, r0, r2
 8000e08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e10:	45a6      	cmp	lr, r4
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x14e>
 8000e14:	eb1c 0404 	adds.w	r4, ip, r4
 8000e18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e1c:	d202      	bcs.n	8000e24 <__udivmoddi4+0x14c>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f200 80bb 	bhi.w	8000f9a <__udivmoddi4+0x2c2>
 8000e24:	4610      	mov	r0, r2
 8000e26:	eba4 040e 	sub.w	r4, r4, lr
 8000e2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e2e:	e79f      	b.n	8000d70 <__udivmoddi4+0x98>
 8000e30:	f1c1 0720 	rsb	r7, r1, #32
 8000e34:	408b      	lsls	r3, r1
 8000e36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e42:	fa20 f307 	lsr.w	r3, r0, r7
 8000e46:	40fd      	lsrs	r5, r7
 8000e48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e4c:	4323      	orrs	r3, r4
 8000e4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	fb09 5518 	mls	r5, r9, r8, r5
 8000e5a:	0c1c      	lsrs	r4, r3, #16
 8000e5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e60:	fb08 f50e 	mul.w	r5, r8, lr
 8000e64:	42a5      	cmp	r5, r4
 8000e66:	fa02 f201 	lsl.w	r2, r2, r1
 8000e6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e78:	f080 8088 	bcs.w	8000f8c <__udivmoddi4+0x2b4>
 8000e7c:	42a5      	cmp	r5, r4
 8000e7e:	f240 8085 	bls.w	8000f8c <__udivmoddi4+0x2b4>
 8000e82:	f1a8 0802 	sub.w	r8, r8, #2
 8000e86:	4464      	add	r4, ip
 8000e88:	1b64      	subs	r4, r4, r5
 8000e8a:	b29d      	uxth	r5, r3
 8000e8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e90:	fb09 4413 	mls	r4, r9, r3, r4
 8000e94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ea8:	d26c      	bcs.n	8000f84 <__udivmoddi4+0x2ac>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	d96a      	bls.n	8000f84 <__udivmoddi4+0x2ac>
 8000eae:	3b02      	subs	r3, #2
 8000eb0:	4464      	add	r4, ip
 8000eb2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000eb6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	42ac      	cmp	r4, r5
 8000ec0:	46c8      	mov	r8, r9
 8000ec2:	46ae      	mov	lr, r5
 8000ec4:	d356      	bcc.n	8000f74 <__udivmoddi4+0x29c>
 8000ec6:	d053      	beq.n	8000f70 <__udivmoddi4+0x298>
 8000ec8:	b156      	cbz	r6, 8000ee0 <__udivmoddi4+0x208>
 8000eca:	ebb0 0208 	subs.w	r2, r0, r8
 8000ece:	eb64 040e 	sbc.w	r4, r4, lr
 8000ed2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ed6:	40ca      	lsrs	r2, r1
 8000ed8:	40cc      	lsrs	r4, r1
 8000eda:	4317      	orrs	r7, r2
 8000edc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee8:	f1c3 0120 	rsb	r1, r3, #32
 8000eec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ef0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ef4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ef8:	409d      	lsls	r5, r3
 8000efa:	432a      	orrs	r2, r5
 8000efc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f00:	fa1f fe8c 	uxth.w	lr, ip
 8000f04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f08:	fb07 1510 	mls	r5, r7, r0, r1
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f12:	fb00 f50e 	mul.w	r5, r0, lr
 8000f16:	428d      	cmp	r5, r1
 8000f18:	fa04 f403 	lsl.w	r4, r4, r3
 8000f1c:	d908      	bls.n	8000f30 <__udivmoddi4+0x258>
 8000f1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f26:	d22f      	bcs.n	8000f88 <__udivmoddi4+0x2b0>
 8000f28:	428d      	cmp	r5, r1
 8000f2a:	d92d      	bls.n	8000f88 <__udivmoddi4+0x2b0>
 8000f2c:	3802      	subs	r0, #2
 8000f2e:	4461      	add	r1, ip
 8000f30:	1b49      	subs	r1, r1, r5
 8000f32:	b292      	uxth	r2, r2
 8000f34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f38:	fb07 1115 	mls	r1, r7, r5, r1
 8000f3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f40:	fb05 f10e 	mul.w	r1, r5, lr
 8000f44:	4291      	cmp	r1, r2
 8000f46:	d908      	bls.n	8000f5a <__udivmoddi4+0x282>
 8000f48:	eb1c 0202 	adds.w	r2, ip, r2
 8000f4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f50:	d216      	bcs.n	8000f80 <__udivmoddi4+0x2a8>
 8000f52:	4291      	cmp	r1, r2
 8000f54:	d914      	bls.n	8000f80 <__udivmoddi4+0x2a8>
 8000f56:	3d02      	subs	r5, #2
 8000f58:	4462      	add	r2, ip
 8000f5a:	1a52      	subs	r2, r2, r1
 8000f5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f60:	e738      	b.n	8000dd4 <__udivmoddi4+0xfc>
 8000f62:	4631      	mov	r1, r6
 8000f64:	4630      	mov	r0, r6
 8000f66:	e708      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000f68:	4639      	mov	r1, r7
 8000f6a:	e6e6      	b.n	8000d3a <__udivmoddi4+0x62>
 8000f6c:	4610      	mov	r0, r2
 8000f6e:	e6fb      	b.n	8000d68 <__udivmoddi4+0x90>
 8000f70:	4548      	cmp	r0, r9
 8000f72:	d2a9      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f74:	ebb9 0802 	subs.w	r8, r9, r2
 8000f78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	e7a3      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f80:	4645      	mov	r5, r8
 8000f82:	e7ea      	b.n	8000f5a <__udivmoddi4+0x282>
 8000f84:	462b      	mov	r3, r5
 8000f86:	e794      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f88:	4640      	mov	r0, r8
 8000f8a:	e7d1      	b.n	8000f30 <__udivmoddi4+0x258>
 8000f8c:	46d0      	mov	r8, sl
 8000f8e:	e77b      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f90:	3d02      	subs	r5, #2
 8000f92:	4462      	add	r2, ip
 8000f94:	e732      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f96:	4608      	mov	r0, r1
 8000f98:	e70a      	b.n	8000db0 <__udivmoddi4+0xd8>
 8000f9a:	4464      	add	r4, ip
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	e742      	b.n	8000e26 <__udivmoddi4+0x14e>

08000fa0 <__aeabi_idiv0>:
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <_write>:
{
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
  return ch;
}

int _write(int file, char* p, int len){        //테라텀
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, p, len, 10);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	230a      	movs	r3, #10
 8000fb6:	68b9      	ldr	r1, [r7, #8]
 8000fb8:	4803      	ldr	r0, [pc, #12]	; (8000fc8 <_write+0x24>)
 8000fba:	f006 fdaf 	bl	8007b1c <HAL_UART_Transmit>
	return len;
 8000fbe:	687b      	ldr	r3, [r7, #4]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000248 	.word	0x20000248

08000fcc <SerialSendChar_PC>:

void SerialSendChar_PC(uint8_t Ch1) // 1문자 보내기 함수
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
	// USART_SR_TXE(1<<7)=0?, TX Buffer NOT Empty?
	// TX buffer Empty되지 않으면 계속 대기(송신 가능한 상태까지 대기)
	while((USART3->SR & 1<<7) == RESET);
 8000fd6:	bf00      	nop
 8000fd8:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <SerialSendChar_PC+0x2c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d0f9      	beq.n	8000fd8 <SerialSendChar_PC+0xc>
	USART3->DR = (Ch1 & 0x01FF);	// 전송 (최대 9bit 이므로 0x01FF과 masking)
 8000fe4:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <SerialSendChar_PC+0x2c>)
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	6053      	str	r3, [r2, #4]
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	40004800 	.word	0x40004800

08000ffc <SerialSendChar_WIFI>:

void SerialSendChar_WIFI(uint8_t Ch2) // 1문자 보내기 함수
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
	while((UART4->SR & 1<<7) == RESET);
 8001006:	bf00      	nop
 8001008:	4b07      	ldr	r3, [pc, #28]	; (8001028 <SerialSendChar_WIFI+0x2c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001010:	2b00      	cmp	r3, #0
 8001012:	d0f9      	beq.n	8001008 <SerialSendChar_WIFI+0xc>
	UART4->DR = (Ch2 & 0x01FF);
 8001014:	4a04      	ldr	r2, [pc, #16]	; (8001028 <SerialSendChar_WIFI+0x2c>)
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	6053      	str	r3, [r2, #4]
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	40004c00 	.word	0x40004c00

0800102c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	encoder_count=TIM4->CNT;
 8001034:	4ba6      	ldr	r3, [pc, #664]	; (80012d0 <HAL_UART_RxCpltCallback+0x2a4>)
 8001036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001038:	4aa6      	ldr	r2, [pc, #664]	; (80012d4 <HAL_UART_RxCpltCallback+0x2a8>)
 800103a:	6013      	str	r3, [r2, #0]

  if(huart->Instance == USART3)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4aa5      	ldr	r2, [pc, #660]	; (80012d8 <HAL_UART_RxCpltCallback+0x2ac>)
 8001042:	4293      	cmp	r3, r2
 8001044:	f040 816b 	bne.w	800131e <HAL_UART_RxCpltCallback+0x2f2>
  {

	  HAL_UART_Receive_IT(&huart3, &key_value, 1);
 8001048:	2201      	movs	r2, #1
 800104a:	49a4      	ldr	r1, [pc, #656]	; (80012dc <HAL_UART_RxCpltCallback+0x2b0>)
 800104c:	48a4      	ldr	r0, [pc, #656]	; (80012e0 <HAL_UART_RxCpltCallback+0x2b4>)
 800104e:	f006 fdf0 	bl	8007c32 <HAL_UART_Receive_IT>
	  printf("%d,^^ %c \r\n", key_value,key_value);
 8001052:	4ba2      	ldr	r3, [pc, #648]	; (80012dc <HAL_UART_RxCpltCallback+0x2b0>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	4619      	mov	r1, r3
 8001058:	4ba0      	ldr	r3, [pc, #640]	; (80012dc <HAL_UART_RxCpltCallback+0x2b0>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	461a      	mov	r2, r3
 800105e:	48a1      	ldr	r0, [pc, #644]	; (80012e4 <HAL_UART_RxCpltCallback+0x2b8>)
 8001060:	f008 fd8a 	bl	8009b78 <iprintf>

	  switch(key_value)
 8001064:	4b9d      	ldr	r3, [pc, #628]	; (80012dc <HAL_UART_RxCpltCallback+0x2b0>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	3b31      	subs	r3, #49	; 0x31
 800106a:	2b49      	cmp	r3, #73	; 0x49
 800106c:	f200 8157 	bhi.w	800131e <HAL_UART_RxCpltCallback+0x2f2>
 8001070:	a201      	add	r2, pc, #4	; (adr r2, 8001078 <HAL_UART_RxCpltCallback+0x4c>)
 8001072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001076:	bf00      	nop
 8001078:	080011d5 	.word	0x080011d5
 800107c:	080011e3 	.word	0x080011e3
 8001080:	080011f1 	.word	0x080011f1
 8001084:	080011f9 	.word	0x080011f9
 8001088:	08001201 	.word	0x08001201
 800108c:	0800120b 	.word	0x0800120b
 8001090:	08001215 	.word	0x08001215
 8001094:	0800131f 	.word	0x0800131f
 8001098:	0800131f 	.word	0x0800131f
 800109c:	0800131f 	.word	0x0800131f
 80010a0:	0800131f 	.word	0x0800131f
 80010a4:	0800131f 	.word	0x0800131f
 80010a8:	0800131f 	.word	0x0800131f
 80010ac:	0800131f 	.word	0x0800131f
 80010b0:	0800131f 	.word	0x0800131f
 80010b4:	0800131f 	.word	0x0800131f
 80010b8:	0800131f 	.word	0x0800131f
 80010bc:	0800131f 	.word	0x0800131f
 80010c0:	0800131f 	.word	0x0800131f
 80010c4:	0800131f 	.word	0x0800131f
 80010c8:	0800131f 	.word	0x0800131f
 80010cc:	0800131f 	.word	0x0800131f
 80010d0:	0800131f 	.word	0x0800131f
 80010d4:	0800131f 	.word	0x0800131f
 80010d8:	0800131f 	.word	0x0800131f
 80010dc:	0800131f 	.word	0x0800131f
 80010e0:	0800131f 	.word	0x0800131f
 80010e4:	0800131f 	.word	0x0800131f
 80010e8:	0800131f 	.word	0x0800131f
 80010ec:	0800131f 	.word	0x0800131f
 80010f0:	0800131f 	.word	0x0800131f
 80010f4:	0800131f 	.word	0x0800131f
 80010f8:	0800131f 	.word	0x0800131f
 80010fc:	0800131f 	.word	0x0800131f
 8001100:	0800131f 	.word	0x0800131f
 8001104:	0800131f 	.word	0x0800131f
 8001108:	0800131f 	.word	0x0800131f
 800110c:	0800131f 	.word	0x0800131f
 8001110:	0800131f 	.word	0x0800131f
 8001114:	0800131f 	.word	0x0800131f
 8001118:	0800131f 	.word	0x0800131f
 800111c:	0800131f 	.word	0x0800131f
 8001120:	0800131f 	.word	0x0800131f
 8001124:	0800131f 	.word	0x0800131f
 8001128:	0800131f 	.word	0x0800131f
 800112c:	0800131f 	.word	0x0800131f
 8001130:	0800131f 	.word	0x0800131f
 8001134:	0800131f 	.word	0x0800131f
 8001138:	0800121f 	.word	0x0800121f
 800113c:	0800131f 	.word	0x0800131f
 8001140:	0800131f 	.word	0x0800131f
 8001144:	08001237 	.word	0x08001237
 8001148:	0800131f 	.word	0x0800131f
 800114c:	0800123f 	.word	0x0800123f
 8001150:	0800131f 	.word	0x0800131f
 8001154:	0800131f 	.word	0x0800131f
 8001158:	08001283 	.word	0x08001283
 800115c:	0800131f 	.word	0x0800131f
 8001160:	0800131f 	.word	0x0800131f
 8001164:	0800131f 	.word	0x0800131f
 8001168:	0800131f 	.word	0x0800131f
 800116c:	0800131f 	.word	0x0800131f
 8001170:	0800129d 	.word	0x0800129d
 8001174:	080012b7 	.word	0x080012b7
 8001178:	080011a1 	.word	0x080011a1
 800117c:	0800131f 	.word	0x0800131f
 8001180:	0800122f 	.word	0x0800122f
 8001184:	0800131f 	.word	0x0800131f
 8001188:	08001263 	.word	0x08001263
 800118c:	0800131f 	.word	0x0800131f
 8001190:	080011bb 	.word	0x080011bb
 8001194:	0800124f 	.word	0x0800124f
 8001198:	0800131f 	.word	0x0800131f
 800119c:	08001247 	.word	0x08001247
	  	{
	  		case 'q':  // forward
	  			GPIOE->ODR |= 1<<0;  // back
 80011a0:	4b51      	ldr	r3, [pc, #324]	; (80012e8 <HAL_UART_RxCpltCallback+0x2bc>)
 80011a2:	695b      	ldr	r3, [r3, #20]
 80011a4:	4a50      	ldr	r2, [pc, #320]	; (80012e8 <HAL_UART_RxCpltCallback+0x2bc>)
 80011a6:	f043 0301 	orr.w	r3, r3, #1
 80011aa:	6153      	str	r3, [r2, #20]
	  	  	 	GPIOB->ODR |= 1<<0;  //LD1
 80011ac:	4b4f      	ldr	r3, [pc, #316]	; (80012ec <HAL_UART_RxCpltCallback+0x2c0>)
 80011ae:	695b      	ldr	r3, [r3, #20]
 80011b0:	4a4e      	ldr	r2, [pc, #312]	; (80012ec <HAL_UART_RxCpltCallback+0x2c0>)
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	6153      	str	r3, [r2, #20]

	  			break;
 80011b8:	e0b1      	b.n	800131e <HAL_UART_RxCpltCallback+0x2f2>

	  		case 'w':  // back
	  			GPIOE->ODR &= ~1<<0;  // go
 80011ba:	4b4b      	ldr	r3, [pc, #300]	; (80012e8 <HAL_UART_RxCpltCallback+0x2bc>)
 80011bc:	695b      	ldr	r3, [r3, #20]
 80011be:	4a4a      	ldr	r2, [pc, #296]	; (80012e8 <HAL_UART_RxCpltCallback+0x2bc>)
 80011c0:	f023 0301 	bic.w	r3, r3, #1
 80011c4:	6153      	str	r3, [r2, #20]
	  		    GPIOB->ODR &= ~1<<0;  //LD1
 80011c6:	4b49      	ldr	r3, [pc, #292]	; (80012ec <HAL_UART_RxCpltCallback+0x2c0>)
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	4a48      	ldr	r2, [pc, #288]	; (80012ec <HAL_UART_RxCpltCallback+0x2c0>)
 80011cc:	f023 0301 	bic.w	r3, r3, #1
 80011d0:	6153      	str	r3, [r2, #20]

	  			break;
 80011d2:	e0a4      	b.n	800131e <HAL_UART_RxCpltCallback+0x2f2>

	  		case '1':
	  			GPIOG->ODR |= 1<<0;  //stop
 80011d4:	4b46      	ldr	r3, [pc, #280]	; (80012f0 <HAL_UART_RxCpltCallback+0x2c4>)
 80011d6:	695b      	ldr	r3, [r3, #20]
 80011d8:	4a45      	ldr	r2, [pc, #276]	; (80012f0 <HAL_UART_RxCpltCallback+0x2c4>)
 80011da:	f043 0301 	orr.w	r3, r3, #1
 80011de:	6153      	str	r3, [r2, #20]

	  			break;
 80011e0:	e09d      	b.n	800131e <HAL_UART_RxCpltCallback+0x2f2>

	  		case '2':
	  			  GPIOG->ODR &= ~1<<0;  //start
 80011e2:	4b43      	ldr	r3, [pc, #268]	; (80012f0 <HAL_UART_RxCpltCallback+0x2c4>)
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	4a42      	ldr	r2, [pc, #264]	; (80012f0 <HAL_UART_RxCpltCallback+0x2c4>)
 80011e8:	f023 0301 	bic.w	r3, r3, #1
 80011ec:	6153      	str	r3, [r2, #20]

	  			break;
 80011ee:	e096      	b.n	800131e <HAL_UART_RxCpltCallback+0x2f2>

	  		case '3':
	  			TIM3->CCR1 = 50;
 80011f0:	4b40      	ldr	r3, [pc, #256]	; (80012f4 <HAL_UART_RxCpltCallback+0x2c8>)
 80011f2:	2232      	movs	r2, #50	; 0x32
 80011f4:	635a      	str	r2, [r3, #52]	; 0x34
	  		//	TIM3->CCR2 = 50;

	  			break;
 80011f6:	e092      	b.n	800131e <HAL_UART_RxCpltCallback+0x2f2>

	  		case '4':
	  			TIM3->CCR1 = 100;
 80011f8:	4b3e      	ldr	r3, [pc, #248]	; (80012f4 <HAL_UART_RxCpltCallback+0x2c8>)
 80011fa:	2264      	movs	r2, #100	; 0x64
 80011fc:	635a      	str	r2, [r3, #52]	; 0x34
	  	  		//	TIM3->CCR2 = 100;

	  			break;
 80011fe:	e08e      	b.n	800131e <HAL_UART_RxCpltCallback+0x2f2>

	  		case '5':
	  			TIM3->CCR1 = 500;
 8001200:	4b3c      	ldr	r3, [pc, #240]	; (80012f4 <HAL_UART_RxCpltCallback+0x2c8>)
 8001202:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001206:	635a      	str	r2, [r3, #52]	; 0x34
	  	  	  	//	TIM3->CCR2 = 500;

	  			break;
 8001208:	e089      	b.n	800131e <HAL_UART_RxCpltCallback+0x2f2>

	  		case '6':
	  			TIM3->CCR1 = 800;
 800120a:	4b3a      	ldr	r3, [pc, #232]	; (80012f4 <HAL_UART_RxCpltCallback+0x2c8>)
 800120c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001210:	635a      	str	r2, [r3, #52]	; 0x34
	  	  	  	//	TIM3->CCR2 = 800;
	  			break;
 8001212:	e084      	b.n	800131e <HAL_UART_RxCpltCallback+0x2f2>

	  		case '7':
	  			TIM3->CCR1 = 1000;
 8001214:	4b37      	ldr	r3, [pc, #220]	; (80012f4 <HAL_UART_RxCpltCallback+0x2c8>)
 8001216:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800121a:	635a      	str	r2, [r3, #52]	; 0x34
	  	  	//  		TIM3->CCR2 = 1000;

	  			break;
 800121c:	e07f      	b.n	800131e <HAL_UART_RxCpltCallback+0x2f2>

	  		case 'a':
	  			  TIM4->CNT=10000;
 800121e:	4b2c      	ldr	r3, [pc, #176]	; (80012d0 <HAL_UART_RxCpltCallback+0x2a4>)
 8001220:	f242 7210 	movw	r2, #10000	; 0x2710
 8001224:	625a      	str	r2, [r3, #36]	; 0x24

	  		  key_flag=1;
 8001226:	4b34      	ldr	r3, [pc, #208]	; (80012f8 <HAL_UART_RxCpltCallback+0x2cc>)
 8001228:	2201      	movs	r2, #1
 800122a:	701a      	strb	r2, [r3, #0]

	  			break;
 800122c:	e077      	b.n	800131e <HAL_UART_RxCpltCallback+0x2f2>

	  		case 's':
	  			 speed_input=(2*M_PI/60)*10;
 800122e:	4b33      	ldr	r3, [pc, #204]	; (80012fc <HAL_UART_RxCpltCallback+0x2d0>)
 8001230:	4a33      	ldr	r2, [pc, #204]	; (8001300 <HAL_UART_RxCpltCallback+0x2d4>)
 8001232:	601a      	str	r2, [r3, #0]
	  			break;
 8001234:	e073      	b.n	800131e <HAL_UART_RxCpltCallback+0x2f2>

	  		case 'd':
	  			 speed_input=(2*M_PI/60)*30;
 8001236:	4b31      	ldr	r3, [pc, #196]	; (80012fc <HAL_UART_RxCpltCallback+0x2d0>)
 8001238:	4a32      	ldr	r2, [pc, #200]	; (8001304 <HAL_UART_RxCpltCallback+0x2d8>)
 800123a:	601a      	str	r2, [r3, #0]
	  			break;
 800123c:	e06f      	b.n	800131e <HAL_UART_RxCpltCallback+0x2f2>

	  		case 'f':
	  			 speed_input=(2*M_PI/60)*50;
 800123e:	4b2f      	ldr	r3, [pc, #188]	; (80012fc <HAL_UART_RxCpltCallback+0x2d0>)
 8001240:	4a31      	ldr	r2, [pc, #196]	; (8001308 <HAL_UART_RxCpltCallback+0x2dc>)
 8001242:	601a      	str	r2, [r3, #0]
	  			break;
 8001244:	e06b      	b.n	800131e <HAL_UART_RxCpltCallback+0x2f2>

	  		case 'z':

	  			speed_input=10*2*M_PI/60;
 8001246:	4b2d      	ldr	r3, [pc, #180]	; (80012fc <HAL_UART_RxCpltCallback+0x2d0>)
 8001248:	4a2d      	ldr	r2, [pc, #180]	; (8001300 <HAL_UART_RxCpltCallback+0x2d4>)
 800124a:	601a      	str	r2, [r3, #0]
	  	  	  //[%]

	  	  	//  	TIM3->CCR1 = 1000*duty/100;
	  	  	//  		TIM3->CCR2 = 1000*duty/100;

	  			break;
 800124c:	e067      	b.n	800131e <HAL_UART_RxCpltCallback+0x2f2>

	  		case 'x':
	  			GPIOB->ODR &= ~1<<0;
 800124e:	4b27      	ldr	r3, [pc, #156]	; (80012ec <HAL_UART_RxCpltCallback+0x2c0>)
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	4a26      	ldr	r2, [pc, #152]	; (80012ec <HAL_UART_RxCpltCallback+0x2c0>)
 8001254:	f023 0301 	bic.w	r3, r3, #1
 8001258:	6153      	str	r3, [r2, #20]


	  	  	  	   speed_input=45*2*M_PI/60;
 800125a:	4b28      	ldr	r3, [pc, #160]	; (80012fc <HAL_UART_RxCpltCallback+0x2d0>)
 800125c:	4a2b      	ldr	r2, [pc, #172]	; (800130c <HAL_UART_RxCpltCallback+0x2e0>)
 800125e:	601a      	str	r2, [r3, #0]
	  	 //		  duty = 2.0881*pow(x,6) - 36.163*pow(x,5) + 248.4*pow(x,4) - 851.05*pow(x,3) + 1486.5*pow(x,2) - 1164.9*x + 249.29;
	  	  	  		 	  //[%]
	  	  	//	  TIM3->CCR1 = 1000*duty/100;
	  	  	//		  	TIM3->CCR2 = 1000*duty/100;

	  			break;
 8001260:	e05d      	b.n	800131e <HAL_UART_RxCpltCallback+0x2f2>
	  		case 'u':
	  			if(position_start==0)
 8001262:	4b2b      	ldr	r3, [pc, #172]	; (8001310 <HAL_UART_RxCpltCallback+0x2e4>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d103      	bne.n	8001272 <HAL_UART_RxCpltCallback+0x246>
	  			{
	  				position_start=1;
 800126a:	4b29      	ldr	r3, [pc, #164]	; (8001310 <HAL_UART_RxCpltCallback+0x2e4>)
 800126c:	2201      	movs	r2, #1
 800126e:	601a      	str	r2, [r3, #0]
	  			else if(position_start==1)
	  		    {
	  				position_start=0;

	  			}
	  			  			 break;
 8001270:	e054      	b.n	800131c <HAL_UART_RxCpltCallback+0x2f0>
	  			else if(position_start==1)
 8001272:	4b27      	ldr	r3, [pc, #156]	; (8001310 <HAL_UART_RxCpltCallback+0x2e4>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d150      	bne.n	800131c <HAL_UART_RxCpltCallback+0x2f0>
	  				position_start=0;
 800127a:	4b25      	ldr	r3, [pc, #148]	; (8001310 <HAL_UART_RxCpltCallback+0x2e4>)
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
	  			  			 break;
 8001280:	e04c      	b.n	800131c <HAL_UART_RxCpltCallback+0x2f0>
	  			case 'i':
	  			      TIM4->CNT=10000;
 8001282:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <HAL_UART_RxCpltCallback+0x2a4>)
 8001284:	f242 7210 	movw	r2, #10000	; 0x2710
 8001288:	625a      	str	r2, [r3, #36]	; 0x24
	  			    input_position=10000+512*1;
 800128a:	4b22      	ldr	r3, [pc, #136]	; (8001314 <HAL_UART_RxCpltCallback+0x2e8>)
 800128c:	f642 1210 	movw	r2, #10512	; 0x2910
 8001290:	801a      	strh	r2, [r3, #0]
	  			  	  err_sum=0;
 8001292:	4b21      	ldr	r3, [pc, #132]	; (8001318 <HAL_UART_RxCpltCallback+0x2ec>)
 8001294:	f04f 0200 	mov.w	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
	  			 break;
 800129a:	e040      	b.n	800131e <HAL_UART_RxCpltCallback+0x2f2>
	  			case 'o':
	  				  TIM4->CNT=10000;
 800129c:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <HAL_UART_RxCpltCallback+0x2a4>)
 800129e:	f242 7210 	movw	r2, #10000	; 0x2710
 80012a2:	625a      	str	r2, [r3, #36]	; 0x24
	  				input_position=10000+512*2;
 80012a4:	4b1b      	ldr	r3, [pc, #108]	; (8001314 <HAL_UART_RxCpltCallback+0x2e8>)
 80012a6:	f642 3210 	movw	r2, #11024	; 0x2b10
 80012aa:	801a      	strh	r2, [r3, #0]
	  				  err_sum=0;
 80012ac:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <HAL_UART_RxCpltCallback+0x2ec>)
 80012ae:	f04f 0200 	mov.w	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
	  			break;
 80012b4:	e033      	b.n	800131e <HAL_UART_RxCpltCallback+0x2f2>
	  			case 'p':
	  				   TIM4->CNT=10000;
 80012b6:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <HAL_UART_RxCpltCallback+0x2a4>)
 80012b8:	f242 7210 	movw	r2, #10000	; 0x2710
 80012bc:	625a      	str	r2, [r3, #36]	; 0x24
	  				 input_position=10000-512*1;
 80012be:	4b15      	ldr	r3, [pc, #84]	; (8001314 <HAL_UART_RxCpltCallback+0x2e8>)
 80012c0:	f242 5210 	movw	r2, #9488	; 0x2510
 80012c4:	801a      	strh	r2, [r3, #0]
	  			 	   err_sum=0;
 80012c6:	4b14      	ldr	r3, [pc, #80]	; (8001318 <HAL_UART_RxCpltCallback+0x2ec>)
 80012c8:	f04f 0200 	mov.w	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
	  			 break;
 80012ce:	e026      	b.n	800131e <HAL_UART_RxCpltCallback+0x2f2>
 80012d0:	40000800 	.word	0x40000800
 80012d4:	20000000 	.word	0x20000000
 80012d8:	40004800 	.word	0x40004800
 80012dc:	20000390 	.word	0x20000390
 80012e0:	20000248 	.word	0x20000248
 80012e4:	0800be78 	.word	0x0800be78
 80012e8:	40021000 	.word	0x40021000
 80012ec:	40020400 	.word	0x40020400
 80012f0:	40021800 	.word	0x40021800
 80012f4:	40000400 	.word	0x40000400
 80012f8:	200001fc 	.word	0x200001fc
 80012fc:	200001f8 	.word	0x200001f8
 8001300:	3f860a92 	.word	0x3f860a92
 8001304:	40490fdb 	.word	0x40490fdb
 8001308:	40a78d36 	.word	0x40a78d36
 800130c:	4096cbe4 	.word	0x4096cbe4
 8001310:	200001f4 	.word	0x200001f4
 8001314:	20000e12 	.word	0x20000e12
 8001318:	20000e18 	.word	0x20000e18
	  			  			 break;
 800131c:	bf00      	nop




  }
  if(huart->Instance == UART4)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a57      	ldr	r2, [pc, #348]	; (8001480 <HAL_UART_RxCpltCallback+0x454>)
 8001324:	4293      	cmp	r3, r2
 8001326:	f040 80a6 	bne.w	8001476 <HAL_UART_RxCpltCallback+0x44a>
    {
	  HAL_UART_Receive_IT(&huart4, &data, 1);
 800132a:	2201      	movs	r2, #1
 800132c:	4955      	ldr	r1, [pc, #340]	; (8001484 <HAL_UART_RxCpltCallback+0x458>)
 800132e:	4856      	ldr	r0, [pc, #344]	; (8001488 <HAL_UART_RxCpltCallback+0x45c>)
 8001330:	f006 fc7f 	bl	8007c32 <HAL_UART_Receive_IT>


		switch(data)
 8001334:	4b53      	ldr	r3, [pc, #332]	; (8001484 <HAL_UART_RxCpltCallback+0x458>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	3b21      	subs	r3, #33	; 0x21
 800133a:	2b20      	cmp	r3, #32
 800133c:	f200 809b 	bhi.w	8001476 <HAL_UART_RxCpltCallback+0x44a>
 8001340:	a201      	add	r2, pc, #4	; (adr r2, 8001348 <HAL_UART_RxCpltCallback+0x31c>)
 8001342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001346:	bf00      	nop
 8001348:	08001459 	.word	0x08001459
 800134c:	08001477 	.word	0x08001477
 8001350:	08001477 	.word	0x08001477
 8001354:	08001477 	.word	0x08001477
 8001358:	08001477 	.word	0x08001477
 800135c:	08001477 	.word	0x08001477
 8001360:	08001477 	.word	0x08001477
 8001364:	08001477 	.word	0x08001477
 8001368:	08001477 	.word	0x08001477
 800136c:	08001477 	.word	0x08001477
 8001370:	08001477 	.word	0x08001477
 8001374:	08001477 	.word	0x08001477
 8001378:	08001477 	.word	0x08001477
 800137c:	08001477 	.word	0x08001477
 8001380:	08001477 	.word	0x08001477
 8001384:	080013cd 	.word	0x080013cd
 8001388:	080013e7 	.word	0x080013e7
 800138c:	08001401 	.word	0x08001401
 8001390:	0800140f 	.word	0x0800140f
 8001394:	0800141d 	.word	0x0800141d
 8001398:	0800142b 	.word	0x0800142b
 800139c:	08001439 	.word	0x08001439
 80013a0:	08001447 	.word	0x08001447
 80013a4:	08001477 	.word	0x08001477
 80013a8:	08001477 	.word	0x08001477
 80013ac:	08001477 	.word	0x08001477
 80013b0:	08001477 	.word	0x08001477
 80013b4:	08001477 	.word	0x08001477
 80013b8:	08001477 	.word	0x08001477
 80013bc:	08001477 	.word	0x08001477
 80013c0:	08001477 	.word	0x08001477
 80013c4:	08001477 	.word	0x08001477
 80013c8:	0800146f 	.word	0x0800146f
		{
		case '0':
			 GPIOB->ODR |= 1<<0;
 80013cc:	4b2f      	ldr	r3, [pc, #188]	; (800148c <HAL_UART_RxCpltCallback+0x460>)
 80013ce:	695b      	ldr	r3, [r3, #20]
 80013d0:	4a2e      	ldr	r2, [pc, #184]	; (800148c <HAL_UART_RxCpltCallback+0x460>)
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	6153      	str	r3, [r2, #20]
			GPIOG->ODR &= ~1<<0;// start
 80013d8:	4b2d      	ldr	r3, [pc, #180]	; (8001490 <HAL_UART_RxCpltCallback+0x464>)
 80013da:	695b      	ldr	r3, [r3, #20]
 80013dc:	4a2c      	ldr	r2, [pc, #176]	; (8001490 <HAL_UART_RxCpltCallback+0x464>)
 80013de:	f023 0301 	bic.w	r3, r3, #1
 80013e2:	6153      	str	r3, [r2, #20]

			break;
 80013e4:	e047      	b.n	8001476 <HAL_UART_RxCpltCallback+0x44a>

		case '1':  //stop
			  GPIOB->ODR &= ~1<<0;
 80013e6:	4b29      	ldr	r3, [pc, #164]	; (800148c <HAL_UART_RxCpltCallback+0x460>)
 80013e8:	695b      	ldr	r3, [r3, #20]
 80013ea:	4a28      	ldr	r2, [pc, #160]	; (800148c <HAL_UART_RxCpltCallback+0x460>)
 80013ec:	f023 0301 	bic.w	r3, r3, #1
 80013f0:	6153      	str	r3, [r2, #20]
	          GPIOG->ODR |= 1<<0;
 80013f2:	4b27      	ldr	r3, [pc, #156]	; (8001490 <HAL_UART_RxCpltCallback+0x464>)
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	4a26      	ldr	r2, [pc, #152]	; (8001490 <HAL_UART_RxCpltCallback+0x464>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	6153      	str	r3, [r2, #20]
			break;
 80013fe:	e03a      	b.n	8001476 <HAL_UART_RxCpltCallback+0x44a>

		case '2':  //dir
			  GPIOE->ODR |= 1<<0;  // back
 8001400:	4b24      	ldr	r3, [pc, #144]	; (8001494 <HAL_UART_RxCpltCallback+0x468>)
 8001402:	695b      	ldr	r3, [r3, #20]
 8001404:	4a23      	ldr	r2, [pc, #140]	; (8001494 <HAL_UART_RxCpltCallback+0x468>)
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	6153      	str	r3, [r2, #20]
			break;
 800140c:	e033      	b.n	8001476 <HAL_UART_RxCpltCallback+0x44a>

		case '3'://dir
			 GPIOE->ODR &= ~1<<0; // go
 800140e:	4b21      	ldr	r3, [pc, #132]	; (8001494 <HAL_UART_RxCpltCallback+0x468>)
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	4a20      	ldr	r2, [pc, #128]	; (8001494 <HAL_UART_RxCpltCallback+0x468>)
 8001414:	f023 0301 	bic.w	r3, r3, #1
 8001418:	6153      	str	r3, [r2, #20]
			break;
 800141a:	e02c      	b.n	8001476 <HAL_UART_RxCpltCallback+0x44a>

		case '4':

		    TIM3->CCR1 = 0;
 800141c:	4b1e      	ldr	r3, [pc, #120]	; (8001498 <HAL_UART_RxCpltCallback+0x46c>)
 800141e:	2200      	movs	r2, #0
 8001420:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 0;
 8001422:	4b1d      	ldr	r3, [pc, #116]	; (8001498 <HAL_UART_RxCpltCallback+0x46c>)
 8001424:	2200      	movs	r2, #0
 8001426:	639a      	str	r2, [r3, #56]	; 0x38

			break;
 8001428:	e025      	b.n	8001476 <HAL_UART_RxCpltCallback+0x44a>

		case '5':
			TIM3->CCR1 = 50;
 800142a:	4b1b      	ldr	r3, [pc, #108]	; (8001498 <HAL_UART_RxCpltCallback+0x46c>)
 800142c:	2232      	movs	r2, #50	; 0x32
 800142e:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 50;
 8001430:	4b19      	ldr	r3, [pc, #100]	; (8001498 <HAL_UART_RxCpltCallback+0x46c>)
 8001432:	2232      	movs	r2, #50	; 0x32
 8001434:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8001436:	e01e      	b.n	8001476 <HAL_UART_RxCpltCallback+0x44a>

		case '6':
			TIM3->CCR1 = 200;
 8001438:	4b17      	ldr	r3, [pc, #92]	; (8001498 <HAL_UART_RxCpltCallback+0x46c>)
 800143a:	22c8      	movs	r2, #200	; 0xc8
 800143c:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 200;
 800143e:	4b16      	ldr	r3, [pc, #88]	; (8001498 <HAL_UART_RxCpltCallback+0x46c>)
 8001440:	22c8      	movs	r2, #200	; 0xc8
 8001442:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8001444:	e017      	b.n	8001476 <HAL_UART_RxCpltCallback+0x44a>

		case '7':
			TIM3->CCR1 = 1000;
 8001446:	4b14      	ldr	r3, [pc, #80]	; (8001498 <HAL_UART_RxCpltCallback+0x46c>)
 8001448:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800144c:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 1000;
 800144e:	4b12      	ldr	r3, [pc, #72]	; (8001498 <HAL_UART_RxCpltCallback+0x46c>)
 8001450:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001454:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8001456:	e00e      	b.n	8001476 <HAL_UART_RxCpltCallback+0x44a>

		case '!':
			RX_flag=1;
 8001458:	4b10      	ldr	r3, [pc, #64]	; (800149c <HAL_UART_RxCpltCallback+0x470>)
 800145a:	2201      	movs	r2, #1
 800145c:	701a      	strb	r2, [r3, #0]
			 TIM2->CNT=0;
 800145e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001462:	2200      	movs	r2, #0
 8001464:	625a      	str	r2, [r3, #36]	; 0x24
			 TIM4->CNT=0;
 8001466:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <HAL_UART_RxCpltCallback+0x474>)
 8001468:	2200      	movs	r2, #0
 800146a:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 800146c:	e003      	b.n	8001476 <HAL_UART_RxCpltCallback+0x44a>
		case 'A':  //Tx

			RX_flag=2;
 800146e:	4b0b      	ldr	r3, [pc, #44]	; (800149c <HAL_UART_RxCpltCallback+0x470>)
 8001470:	2202      	movs	r2, #2
 8001472:	701a      	strb	r2, [r3, #0]
				break;
 8001474:	bf00      	nop



    }

}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40004c00 	.word	0x40004c00
 8001484:	20000391 	.word	0x20000391
 8001488:	20000200 	.word	0x20000200
 800148c:	40020400 	.word	0x40020400
 8001490:	40021800 	.word	0x40021800
 8001494:	40021000 	.word	0x40021000
 8001498:	40000400 	.word	0x40000400
 800149c:	20000392 	.word	0x20000392
 80014a0:	40000800 	.word	0x40000800

080014a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014a8:	f002 fa2c 	bl	8003904 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ac:	f000 f954 	bl	8001758 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014b0:	f000 fef2 	bl	8002298 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80014b4:	f000 feba 	bl	800222c <_ZL11MX_DMA_Initv>
  MX_ETH_Init();
 80014b8:	f000 fa46 	bl	8001948 <_ZL11MX_ETH_Initv>
  MX_USART3_UART_Init();
 80014bc:	f000 fe56 	bl	800216c <_ZL19MX_USART3_UART_Initv>
  MX_USB_OTG_FS_PCD_Init();
 80014c0:	f000 fe82 	bl	80021c8 <_ZL22MX_USB_OTG_FS_PCD_Initv>
  MX_TIM3_Init();
 80014c4:	f000 fb54 	bl	8001b70 <_ZL12MX_TIM3_Initv>
  MX_TIM14_Init();
 80014c8:	f000 fde2 	bl	8002090 <_ZL13MX_TIM14_Initv>
  MX_TIM4_Init();
 80014cc:	f000 fc1e 	bl	8001d0c <_ZL12MX_TIM4_Initv>
  MX_UART4_Init();
 80014d0:	f000 fe1c 	bl	800210c <_ZL13MX_UART4_Initv>
  MX_TIM2_Init();
 80014d4:	f000 faea 	bl	8001aac <_ZL12MX_TIM2_Initv>
  MX_TIM8_Init();
 80014d8:	f000 fcbe 	bl	8001e58 <_ZL12MX_TIM8_Initv>
  MX_TIM6_Init();
 80014dc:	f000 fc7a 	bl	8001dd4 <_ZL12MX_TIM6_Initv>
  MX_TIM13_Init();
 80014e0:	f000 fd78 	bl	8001fd4 <_ZL13MX_TIM13_Initv>
  MX_TIM1_Init();
 80014e4:	f000 fa82 	bl	80019ec <_ZL12MX_TIM1_Initv>
  MX_ADC3_Init();
 80014e8:	f000 f9aa 	bl	8001840 <_ZL12MX_ADC3_Initv>
  /* USER CODE BEGIN 2 */


  HAL_UART_Receive_IT(&huart3, &key_value, 1);
 80014ec:	2201      	movs	r2, #1
 80014ee:	4980      	ldr	r1, [pc, #512]	; (80016f0 <main+0x24c>)
 80014f0:	4880      	ldr	r0, [pc, #512]	; (80016f4 <main+0x250>)
 80014f2:	f006 fb9e 	bl	8007c32 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart4, &data, 1);
 80014f6:	2201      	movs	r2, #1
 80014f8:	497f      	ldr	r1, [pc, #508]	; (80016f8 <main+0x254>)
 80014fa:	4880      	ldr	r0, [pc, #512]	; (80016fc <main+0x258>)
 80014fc:	f006 fb99 	bl	8007c32 <HAL_UART_Receive_IT>


  HAL_ADC_Start_DMA(&hadc3, (uint32_t*)ADC3_value, 3);
 8001500:	2203      	movs	r2, #3
 8001502:	497f      	ldr	r1, [pc, #508]	; (8001700 <main+0x25c>)
 8001504:	487f      	ldr	r0, [pc, #508]	; (8001704 <main+0x260>)
 8001506:	f002 fbe7 	bl	8003cd8 <HAL_ADC_Start_DMA>




   HAL_TIM_Base_Start_IT(&htim6);
 800150a:	487f      	ldr	r0, [pc, #508]	; (8001708 <main+0x264>)
 800150c:	f005 f844 	bl	8006598 <HAL_TIM_Base_Start_IT>


   HAL_TIM_Base_Start(&htim1);
 8001510:	487e      	ldr	r0, [pc, #504]	; (800170c <main+0x268>)
 8001512:	f004 ffd9 	bl	80064c8 <HAL_TIM_Base_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(tim6_flag==1)
 8001516:	4b7e      	ldr	r3, [pc, #504]	; (8001710 <main+0x26c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d105      	bne.n	800152a <main+0x86>
	  {
		  distance_sencor();  //거리?��?��
 800151e:	f001 f91b 	bl	8002758 <distance_sencor>

	       tim6_flag=0;
 8001522:	4b7b      	ldr	r3, [pc, #492]	; (8001710 <main+0x26c>)
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	e0ab      	b.n	8001682 <main+0x1de>
	  }
	  else if(tim14_flag==20) //2�? ???���?
 800152a:	4b7a      	ldr	r3, [pc, #488]	; (8001714 <main+0x270>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2b14      	cmp	r3, #20
 8001530:	f040 809a 	bne.w	8001668 <main+0x1c4>
	  {
		    RPM_uint16=RPM*100;
 8001534:	4b78      	ldr	r3, [pc, #480]	; (8001718 <main+0x274>)
 8001536:	edd3 7a00 	vldr	s15, [r3]
 800153a:	ed9f 7a78 	vldr	s14, [pc, #480]	; 800171c <main+0x278>
 800153e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001542:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001546:	ee17 3a90 	vmov	r3, s15
 800154a:	b29a      	uxth	r2, r3
 800154c:	4b74      	ldr	r3, [pc, #464]	; (8001720 <main+0x27c>)
 800154e:	801a      	strh	r2, [r3, #0]
		    ENC[3]=RPM_uint16 / 1000;		// 10000 ?���???????????????????????????????????????
 8001550:	4b73      	ldr	r3, [pc, #460]	; (8001720 <main+0x27c>)
 8001552:	881b      	ldrh	r3, [r3, #0]
 8001554:	4a73      	ldr	r2, [pc, #460]	; (8001724 <main+0x280>)
 8001556:	fba2 2303 	umull	r2, r3, r2, r3
 800155a:	099b      	lsrs	r3, r3, #6
 800155c:	b29b      	uxth	r3, r3
 800155e:	b2da      	uxtb	r2, r3
 8001560:	4b71      	ldr	r3, [pc, #452]	; (8001728 <main+0x284>)
 8001562:	70da      	strb	r2, [r3, #3]
    	    ENC[2]=RPM_uint16 % 1000/100;	// 1000 ?���???????????????????????????????????????
 8001564:	4b6e      	ldr	r3, [pc, #440]	; (8001720 <main+0x27c>)
 8001566:	881b      	ldrh	r3, [r3, #0]
 8001568:	4a6e      	ldr	r2, [pc, #440]	; (8001724 <main+0x280>)
 800156a:	fba2 1203 	umull	r1, r2, r2, r3
 800156e:	0992      	lsrs	r2, r2, #6
 8001570:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001574:	fb01 f202 	mul.w	r2, r1, r2
 8001578:	1a9b      	subs	r3, r3, r2
 800157a:	b29b      	uxth	r3, r3
 800157c:	4a6b      	ldr	r2, [pc, #428]	; (800172c <main+0x288>)
 800157e:	fba2 2303 	umull	r2, r3, r2, r3
 8001582:	095b      	lsrs	r3, r3, #5
 8001584:	b29b      	uxth	r3, r3
 8001586:	b2da      	uxtb	r2, r3
 8001588:	4b67      	ldr	r3, [pc, #412]	; (8001728 <main+0x284>)
 800158a:	709a      	strb	r2, [r3, #2]
			ENC[1]= RPM_uint16 % 100/10;	// 100 ?���???????????????????????????????????????
 800158c:	4b64      	ldr	r3, [pc, #400]	; (8001720 <main+0x27c>)
 800158e:	881b      	ldrh	r3, [r3, #0]
 8001590:	4a66      	ldr	r2, [pc, #408]	; (800172c <main+0x288>)
 8001592:	fba2 1203 	umull	r1, r2, r2, r3
 8001596:	0952      	lsrs	r2, r2, #5
 8001598:	2164      	movs	r1, #100	; 0x64
 800159a:	fb01 f202 	mul.w	r2, r1, r2
 800159e:	1a9b      	subs	r3, r3, r2
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	4a63      	ldr	r2, [pc, #396]	; (8001730 <main+0x28c>)
 80015a4:	fba2 2303 	umull	r2, r3, r2, r3
 80015a8:	08db      	lsrs	r3, r3, #3
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	4b5e      	ldr	r3, [pc, #376]	; (8001728 <main+0x284>)
 80015b0:	705a      	strb	r2, [r3, #1]
		 	ENC[0]=RPM_uint16 % 10/1;		// 10 ?���???????????????????????????????????????
 80015b2:	4b5b      	ldr	r3, [pc, #364]	; (8001720 <main+0x27c>)
 80015b4:	881a      	ldrh	r2, [r3, #0]
 80015b6:	4b5e      	ldr	r3, [pc, #376]	; (8001730 <main+0x28c>)
 80015b8:	fba3 1302 	umull	r1, r3, r3, r2
 80015bc:	08d9      	lsrs	r1, r3, #3
 80015be:	460b      	mov	r3, r1
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	440b      	add	r3, r1
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	4b56      	ldr	r3, [pc, #344]	; (8001728 <main+0x284>)
 80015ce:	701a      	strb	r2, [r3, #0]

		   	SerialSendChar_WIFI('?');
 80015d0:	203f      	movs	r0, #63	; 0x3f
 80015d2:	f7ff fd13 	bl	8000ffc <SerialSendChar_WIFI>

			SerialSendChar_WIFI('0');
 80015d6:	2030      	movs	r0, #48	; 0x30
 80015d8:	f7ff fd10 	bl	8000ffc <SerialSendChar_WIFI>
			SerialSendChar_WIFI('0');
 80015dc:	2030      	movs	r0, #48	; 0x30
 80015de:	f7ff fd0d 	bl	8000ffc <SerialSendChar_WIFI>
			SerialSendChar_WIFI('0');
 80015e2:	2030      	movs	r0, #48	; 0x30
 80015e4:	f7ff fd0a 	bl	8000ffc <SerialSendChar_WIFI>
	     	SerialSendChar_WIFI('0');
 80015e8:	2030      	movs	r0, #48	; 0x30
 80015ea:	f7ff fd07 	bl	8000ffc <SerialSendChar_WIFI>

		    SerialSendChar_WIFI(ENC[3]+0x30);
 80015ee:	4b4e      	ldr	r3, [pc, #312]	; (8001728 <main+0x284>)
 80015f0:	78db      	ldrb	r3, [r3, #3]
 80015f2:	3330      	adds	r3, #48	; 0x30
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff fd00 	bl	8000ffc <SerialSendChar_WIFI>
		    SerialSendChar_WIFI(ENC[2]+0x30);
 80015fc:	4b4a      	ldr	r3, [pc, #296]	; (8001728 <main+0x284>)
 80015fe:	789b      	ldrb	r3, [r3, #2]
 8001600:	3330      	adds	r3, #48	; 0x30
 8001602:	b2db      	uxtb	r3, r3
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff fcf9 	bl	8000ffc <SerialSendChar_WIFI>
		 	SerialSendChar_WIFI(ENC[1]+0x30);
 800160a:	4b47      	ldr	r3, [pc, #284]	; (8001728 <main+0x284>)
 800160c:	785b      	ldrb	r3, [r3, #1]
 800160e:	3330      	adds	r3, #48	; 0x30
 8001610:	b2db      	uxtb	r3, r3
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fcf2 	bl	8000ffc <SerialSendChar_WIFI>
	        SerialSendChar_WIFI(ENC[0]+0x30);
 8001618:	4b43      	ldr	r3, [pc, #268]	; (8001728 <main+0x284>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	3330      	adds	r3, #48	; 0x30
 800161e:	b2db      	uxtb	r3, r3
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fceb 	bl	8000ffc <SerialSendChar_WIFI>

	  		  sprintf((char *)buffer, "%d \r\n",RPM_uint16);
 8001626:	4b3e      	ldr	r3, [pc, #248]	; (8001720 <main+0x27c>)
 8001628:	881b      	ldrh	r3, [r3, #0]
 800162a:	461a      	mov	r2, r3
 800162c:	4941      	ldr	r1, [pc, #260]	; (8001734 <main+0x290>)
 800162e:	4842      	ldr	r0, [pc, #264]	; (8001738 <main+0x294>)
 8001630:	f008 fab4 	bl	8009b9c <siprintf>
  		  		 	  		  	  HAL_UART_Transmit(&huart3, buffer, strlen((char *)buffer), 100);
 8001634:	4840      	ldr	r0, [pc, #256]	; (8001738 <main+0x294>)
 8001636:	f7fe fe2b 	bl	8000290 <strlen>
 800163a:	4603      	mov	r3, r0
 800163c:	b29a      	uxth	r2, r3
 800163e:	2364      	movs	r3, #100	; 0x64
 8001640:	493d      	ldr	r1, [pc, #244]	; (8001738 <main+0x294>)
 8001642:	482c      	ldr	r0, [pc, #176]	; (80016f4 <main+0x250>)
 8001644:	f006 fa6a 	bl	8007b1c <HAL_UART_Transmit>
printf("%d \n\r",RPM_uint16);
 8001648:	4b35      	ldr	r3, [pc, #212]	; (8001720 <main+0x27c>)
 800164a:	881b      	ldrh	r3, [r3, #0]
 800164c:	4619      	mov	r1, r3
 800164e:	483b      	ldr	r0, [pc, #236]	; (800173c <main+0x298>)
 8001650:	f008 fa92 	bl	8009b78 <iprintf>


		  	SerialSendChar_PC('\n');
 8001654:	200a      	movs	r0, #10
 8001656:	f7ff fcb9 	bl	8000fcc <SerialSendChar_PC>
		 	SerialSendChar_PC('\r');
 800165a:	200d      	movs	r0, #13
 800165c:	f7ff fcb6 	bl	8000fcc <SerialSendChar_PC>
		 	//  	  HAL_UART_Transmit(&huart4, buffer, strlen((char *)buffer), 100);


		 	//  	  HAL_Delay(2000);

		  tim14_flag=0;
 8001660:	4b2c      	ldr	r3, [pc, #176]	; (8001714 <main+0x270>)
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	e00c      	b.n	8001682 <main+0x1de>
	  }
	  else if(tim13_flag==1)
 8001668:	4b35      	ldr	r3, [pc, #212]	; (8001740 <main+0x29c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d108      	bne.n	8001682 <main+0x1de>
	  {
		  if(position_start==1)
 8001670:	4b34      	ldr	r3, [pc, #208]	; (8001744 <main+0x2a0>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d104      	bne.n	8001682 <main+0x1de>
		  	{
			  position_pid();
 8001678:	f000 ff22 	bl	80024c0 <position_pid>

			  tim13_flag=0;
 800167c:	4b30      	ldr	r3, [pc, #192]	; (8001740 <main+0x29c>)
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]





	  if(RX_flag==1)
 8001682:	4b31      	ldr	r3, [pc, #196]	; (8001748 <main+0x2a4>)
 8001684:	f993 3000 	ldrsb.w	r3, [r3]
 8001688:	2b01      	cmp	r3, #1
 800168a:	f47f af44 	bne.w	8001516 <main+0x72>
	  {
		 // RX_flag=0;
		//  TIM4->CNT=0;
	  	 		TIM3->CCR1 = 1000;
 800168e:	4b2f      	ldr	r3, [pc, #188]	; (800174c <main+0x2a8>)
 8001690:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001694:	635a      	str	r2, [r3, #52]	; 0x34
	  	 		TIM3->CCR2 = 1000;
 8001696:	4b2d      	ldr	r3, [pc, #180]	; (800174c <main+0x2a8>)
 8001698:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800169c:	639a      	str	r2, [r3, #56]	; 0x38
	  	 			if(encoder_count>=1200)
 800169e:	4b2c      	ldr	r3, [pc, #176]	; (8001750 <main+0x2ac>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80016a6:	f4ff af36 	bcc.w	8001516 <main+0x72>
	  		 		{
	  	 				TIM3->CCR1 = 50;
 80016aa:	4b28      	ldr	r3, [pc, #160]	; (800174c <main+0x2a8>)
 80016ac:	2232      	movs	r2, #50	; 0x32
 80016ae:	635a      	str	r2, [r3, #52]	; 0x34

	  	 				GPIOG->ODR |= 1<<0;
 80016b0:	4b28      	ldr	r3, [pc, #160]	; (8001754 <main+0x2b0>)
 80016b2:	695b      	ldr	r3, [r3, #20]
 80016b4:	4a27      	ldr	r2, [pc, #156]	; (8001754 <main+0x2b0>)
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	6153      	str	r3, [r2, #20]
	  	 				HAL_Delay(100);
 80016bc:	2064      	movs	r0, #100	; 0x64
 80016be:	f002 f993 	bl	80039e8 <HAL_Delay>
	  	 				GPIOG->ODR &= ~1<<0;
 80016c2:	4b24      	ldr	r3, [pc, #144]	; (8001754 <main+0x2b0>)
 80016c4:	695b      	ldr	r3, [r3, #20]
 80016c6:	4a23      	ldr	r2, [pc, #140]	; (8001754 <main+0x2b0>)
 80016c8:	f023 0301 	bic.w	r3, r3, #1
 80016cc:	6153      	str	r3, [r2, #20]
	  	 				TIM3->CCR1 = 50;
 80016ce:	4b1f      	ldr	r3, [pc, #124]	; (800174c <main+0x2a8>)
 80016d0:	2232      	movs	r2, #50	; 0x32
 80016d2:	635a      	str	r2, [r3, #52]	; 0x34
	  	 				if(encoder_count>=512*3)
 80016d4:	4b1e      	ldr	r3, [pc, #120]	; (8001750 <main+0x2ac>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80016dc:	f4ff af1b 	bcc.w	8001516 <main+0x72>
	  	 				{
	  	 					TIM3->CCR1 = 0;
 80016e0:	4b1a      	ldr	r3, [pc, #104]	; (800174c <main+0x2a8>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	635a      	str	r2, [r3, #52]	; 0x34
	  	 					RX_flag=0;
 80016e6:	4b18      	ldr	r3, [pc, #96]	; (8001748 <main+0x2a4>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	701a      	strb	r2, [r3, #0]
	  if(tim6_flag==1)
 80016ec:	e713      	b.n	8001516 <main+0x72>
 80016ee:	bf00      	nop
 80016f0:	20000390 	.word	0x20000390
 80016f4:	20000248 	.word	0x20000248
 80016f8:	20000391 	.word	0x20000391
 80016fc:	20000200 	.word	0x20000200
 8001700:	200003ac 	.word	0x200003ac
 8001704:	20000530 	.word	0x20000530
 8001708:	200007a8 	.word	0x200007a8
 800170c:	20000688 	.word	0x20000688
 8001710:	20000e78 	.word	0x20000e78
 8001714:	20000e7c 	.word	0x20000e7c
 8001718:	2000039c 	.word	0x2000039c
 800171c:	42c80000 	.word	0x42c80000
 8001720:	200003a4 	.word	0x200003a4
 8001724:	10624dd3 	.word	0x10624dd3
 8001728:	200003a8 	.word	0x200003a8
 800172c:	51eb851f 	.word	0x51eb851f
 8001730:	cccccccd 	.word	0xcccccccd
 8001734:	0800be84 	.word	0x0800be84
 8001738:	20000290 	.word	0x20000290
 800173c:	0800be8c 	.word	0x0800be8c
 8001740:	20000e80 	.word	0x20000e80
 8001744:	200001f4 	.word	0x200001f4
 8001748:	20000392 	.word	0x20000392
 800174c:	40000400 	.word	0x40000400
 8001750:	20000000 	.word	0x20000000
 8001754:	40021800 	.word	0x40021800

08001758 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b094      	sub	sp, #80	; 0x50
 800175c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800175e:	f107 0320 	add.w	r3, r7, #32
 8001762:	2230      	movs	r2, #48	; 0x30
 8001764:	2100      	movs	r1, #0
 8001766:	4618      	mov	r0, r3
 8001768:	f008 fa7b 	bl	8009c62 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800176c:	f107 030c 	add.w	r3, r7, #12
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800177c:	2300      	movs	r3, #0
 800177e:	60bb      	str	r3, [r7, #8]
 8001780:	4b2d      	ldr	r3, [pc, #180]	; (8001838 <_Z18SystemClock_Configv+0xe0>)
 8001782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001784:	4a2c      	ldr	r2, [pc, #176]	; (8001838 <_Z18SystemClock_Configv+0xe0>)
 8001786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800178a:	6413      	str	r3, [r2, #64]	; 0x40
 800178c:	4b2a      	ldr	r3, [pc, #168]	; (8001838 <_Z18SystemClock_Configv+0xe0>)
 800178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001794:	60bb      	str	r3, [r7, #8]
 8001796:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001798:	2300      	movs	r3, #0
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	4b27      	ldr	r3, [pc, #156]	; (800183c <_Z18SystemClock_Configv+0xe4>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a26      	ldr	r2, [pc, #152]	; (800183c <_Z18SystemClock_Configv+0xe4>)
 80017a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017a6:	6013      	str	r3, [r2, #0]
 80017a8:	4b24      	ldr	r3, [pc, #144]	; (800183c <_Z18SystemClock_Configv+0xe4>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017b0:	607b      	str	r3, [r7, #4]
 80017b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017b4:	2301      	movs	r3, #1
 80017b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80017b8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017be:	2302      	movs	r3, #2
 80017c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80017c8:	2304      	movs	r3, #4
 80017ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80017cc:	23a8      	movs	r3, #168	; 0xa8
 80017ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017d0:	2302      	movs	r3, #2
 80017d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80017d4:	2307      	movs	r3, #7
 80017d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017d8:	f107 0320 	add.w	r3, r7, #32
 80017dc:	4618      	mov	r0, r3
 80017de:	f004 f98b 	bl	8005af8 <HAL_RCC_OscConfig>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	bf14      	ite	ne
 80017e8:	2301      	movne	r3, #1
 80017ea:	2300      	moveq	r3, #0
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 80017f2:	f000 fe5d 	bl	80024b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017f6:	230f      	movs	r3, #15
 80017f8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017fa:	2302      	movs	r3, #2
 80017fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017fe:	2300      	movs	r3, #0
 8001800:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001802:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001806:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800180c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800180e:	f107 030c 	add.w	r3, r7, #12
 8001812:	2105      	movs	r1, #5
 8001814:	4618      	mov	r0, r3
 8001816:	f004 fbe7 	bl	8005fe8 <HAL_RCC_ClockConfig>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	bf14      	ite	ne
 8001820:	2301      	movne	r3, #1
 8001822:	2300      	moveq	r3, #0
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 800182a:	f000 fe41 	bl	80024b0 <Error_Handler>
  }
}
 800182e:	bf00      	nop
 8001830:	3750      	adds	r7, #80	; 0x50
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40023800 	.word	0x40023800
 800183c:	40007000 	.word	0x40007000

08001840 <_ZL12MX_ADC3_Initv>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001846:	463b      	mov	r3, r7
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001852:	4b3b      	ldr	r3, [pc, #236]	; (8001940 <_ZL12MX_ADC3_Initv+0x100>)
 8001854:	4a3b      	ldr	r2, [pc, #236]	; (8001944 <_ZL12MX_ADC3_Initv+0x104>)
 8001856:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001858:	4b39      	ldr	r3, [pc, #228]	; (8001940 <_ZL12MX_ADC3_Initv+0x100>)
 800185a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800185e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_10B;
 8001860:	4b37      	ldr	r3, [pc, #220]	; (8001940 <_ZL12MX_ADC3_Initv+0x100>)
 8001862:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001866:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 8001868:	4b35      	ldr	r3, [pc, #212]	; (8001940 <_ZL12MX_ADC3_Initv+0x100>)
 800186a:	2201      	movs	r2, #1
 800186c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800186e:	4b34      	ldr	r3, [pc, #208]	; (8001940 <_ZL12MX_ADC3_Initv+0x100>)
 8001870:	2200      	movs	r2, #0
 8001872:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001874:	4b32      	ldr	r3, [pc, #200]	; (8001940 <_ZL12MX_ADC3_Initv+0x100>)
 8001876:	2200      	movs	r2, #0
 8001878:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800187c:	4b30      	ldr	r3, [pc, #192]	; (8001940 <_ZL12MX_ADC3_Initv+0x100>)
 800187e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001882:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8001884:	4b2e      	ldr	r3, [pc, #184]	; (8001940 <_ZL12MX_ADC3_Initv+0x100>)
 8001886:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800188a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800188c:	4b2c      	ldr	r3, [pc, #176]	; (8001940 <_ZL12MX_ADC3_Initv+0x100>)
 800188e:	2200      	movs	r2, #0
 8001890:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 3;
 8001892:	4b2b      	ldr	r3, [pc, #172]	; (8001940 <_ZL12MX_ADC3_Initv+0x100>)
 8001894:	2203      	movs	r2, #3
 8001896:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001898:	4b29      	ldr	r3, [pc, #164]	; (8001940 <_ZL12MX_ADC3_Initv+0x100>)
 800189a:	2201      	movs	r2, #1
 800189c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018a0:	4b27      	ldr	r3, [pc, #156]	; (8001940 <_ZL12MX_ADC3_Initv+0x100>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80018a6:	4826      	ldr	r0, [pc, #152]	; (8001940 <_ZL12MX_ADC3_Initv+0x100>)
 80018a8:	f002 f8c2 	bl	8003a30 <HAL_ADC_Init>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	bf14      	ite	ne
 80018b2:	2301      	movne	r3, #1
 80018b4:	2300      	moveq	r3, #0
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <_ZL12MX_ADC3_Initv+0x80>
  {
    Error_Handler();
 80018bc:	f000 fdf8 	bl	80024b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80018c0:	230c      	movs	r3, #12
 80018c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80018c4:	2301      	movs	r3, #1
 80018c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80018c8:	2307      	movs	r3, #7
 80018ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80018cc:	463b      	mov	r3, r7
 80018ce:	4619      	mov	r1, r3
 80018d0:	481b      	ldr	r0, [pc, #108]	; (8001940 <_ZL12MX_ADC3_Initv+0x100>)
 80018d2:	f002 fb2f 	bl	8003f34 <HAL_ADC_ConfigChannel>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	bf14      	ite	ne
 80018dc:	2301      	movne	r3, #1
 80018de:	2300      	moveq	r3, #0
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <_ZL12MX_ADC3_Initv+0xaa>
  {
    Error_Handler();
 80018e6:	f000 fde3 	bl	80024b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80018ea:	230d      	movs	r3, #13
 80018ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80018ee:	2302      	movs	r3, #2
 80018f0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80018f2:	463b      	mov	r3, r7
 80018f4:	4619      	mov	r1, r3
 80018f6:	4812      	ldr	r0, [pc, #72]	; (8001940 <_ZL12MX_ADC3_Initv+0x100>)
 80018f8:	f002 fb1c 	bl	8003f34 <HAL_ADC_ConfigChannel>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	bf14      	ite	ne
 8001902:	2301      	movne	r3, #1
 8001904:	2300      	moveq	r3, #0
 8001906:	b2db      	uxtb	r3, r3
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <_ZL12MX_ADC3_Initv+0xd0>
  {
    Error_Handler();
 800190c:	f000 fdd0 	bl	80024b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001910:	230e      	movs	r3, #14
 8001912:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001914:	2303      	movs	r3, #3
 8001916:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001918:	463b      	mov	r3, r7
 800191a:	4619      	mov	r1, r3
 800191c:	4808      	ldr	r0, [pc, #32]	; (8001940 <_ZL12MX_ADC3_Initv+0x100>)
 800191e:	f002 fb09 	bl	8003f34 <HAL_ADC_ConfigChannel>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	bf14      	ite	ne
 8001928:	2301      	movne	r3, #1
 800192a:	2300      	moveq	r3, #0
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <_ZL12MX_ADC3_Initv+0xf6>
  {
    Error_Handler();
 8001932:	f000 fdbd 	bl	80024b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001936:	bf00      	nop
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000530 	.word	0x20000530
 8001944:	40012200 	.word	0x40012200

08001948 <_ZL11MX_ETH_Initv>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800194c:	4b21      	ldr	r3, [pc, #132]	; (80019d4 <_ZL11MX_ETH_Initv+0x8c>)
 800194e:	4a22      	ldr	r2, [pc, #136]	; (80019d8 <_ZL11MX_ETH_Initv+0x90>)
 8001950:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001952:	4b22      	ldr	r3, [pc, #136]	; (80019dc <_ZL11MX_ETH_Initv+0x94>)
 8001954:	2200      	movs	r2, #0
 8001956:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001958:	4b20      	ldr	r3, [pc, #128]	; (80019dc <_ZL11MX_ETH_Initv+0x94>)
 800195a:	2280      	movs	r2, #128	; 0x80
 800195c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800195e:	4b1f      	ldr	r3, [pc, #124]	; (80019dc <_ZL11MX_ETH_Initv+0x94>)
 8001960:	22e1      	movs	r2, #225	; 0xe1
 8001962:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001964:	4b1d      	ldr	r3, [pc, #116]	; (80019dc <_ZL11MX_ETH_Initv+0x94>)
 8001966:	2200      	movs	r2, #0
 8001968:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800196a:	4b1c      	ldr	r3, [pc, #112]	; (80019dc <_ZL11MX_ETH_Initv+0x94>)
 800196c:	2200      	movs	r2, #0
 800196e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001970:	4b1a      	ldr	r3, [pc, #104]	; (80019dc <_ZL11MX_ETH_Initv+0x94>)
 8001972:	2200      	movs	r2, #0
 8001974:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001976:	4b17      	ldr	r3, [pc, #92]	; (80019d4 <_ZL11MX_ETH_Initv+0x8c>)
 8001978:	4a18      	ldr	r2, [pc, #96]	; (80019dc <_ZL11MX_ETH_Initv+0x94>)
 800197a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800197c:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <_ZL11MX_ETH_Initv+0x8c>)
 800197e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001982:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001984:	4b13      	ldr	r3, [pc, #76]	; (80019d4 <_ZL11MX_ETH_Initv+0x8c>)
 8001986:	4a16      	ldr	r2, [pc, #88]	; (80019e0 <_ZL11MX_ETH_Initv+0x98>)
 8001988:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800198a:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <_ZL11MX_ETH_Initv+0x8c>)
 800198c:	4a15      	ldr	r2, [pc, #84]	; (80019e4 <_ZL11MX_ETH_Initv+0x9c>)
 800198e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001990:	4b10      	ldr	r3, [pc, #64]	; (80019d4 <_ZL11MX_ETH_Initv+0x8c>)
 8001992:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001996:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001998:	480e      	ldr	r0, [pc, #56]	; (80019d4 <_ZL11MX_ETH_Initv+0x8c>)
 800199a:	f003 fa99 	bl	8004ed0 <HAL_ETH_Init>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	bf14      	ite	ne
 80019a4:	2301      	movne	r3, #1
 80019a6:	2300      	moveq	r3, #0
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <_ZL11MX_ETH_Initv+0x6a>
  {
    Error_Handler();
 80019ae:	f000 fd7f 	bl	80024b0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80019b2:	2238      	movs	r2, #56	; 0x38
 80019b4:	2100      	movs	r1, #0
 80019b6:	480c      	ldr	r0, [pc, #48]	; (80019e8 <_ZL11MX_ETH_Initv+0xa0>)
 80019b8:	f008 f953 	bl	8009c62 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80019bc:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <_ZL11MX_ETH_Initv+0xa0>)
 80019be:	2221      	movs	r2, #33	; 0x21
 80019c0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80019c2:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <_ZL11MX_ETH_Initv+0xa0>)
 80019c4:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80019c8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80019ca:	4b07      	ldr	r3, [pc, #28]	; (80019e8 <_ZL11MX_ETH_Initv+0xa0>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80019d0:	bf00      	nop
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	200005d8 	.word	0x200005d8
 80019d8:	40028000 	.word	0x40028000
 80019dc:	20000e0c 	.word	0x20000e0c
 80019e0:	20000490 	.word	0x20000490
 80019e4:	200003f0 	.word	0x200003f0
 80019e8:	200003b8 	.word	0x200003b8

080019ec <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019f2:	f107 0308 	add.w	r3, r7, #8
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	605a      	str	r2, [r3, #4]
 80019fc:	609a      	str	r2, [r3, #8]
 80019fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a00:	463b      	mov	r3, r7
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a08:	4b26      	ldr	r3, [pc, #152]	; (8001aa4 <_ZL12MX_TIM1_Initv+0xb8>)
 8001a0a:	4a27      	ldr	r2, [pc, #156]	; (8001aa8 <_ZL12MX_TIM1_Initv+0xbc>)
 8001a0c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001a0e:	4b25      	ldr	r3, [pc, #148]	; (8001aa4 <_ZL12MX_TIM1_Initv+0xb8>)
 8001a10:	2253      	movs	r2, #83	; 0x53
 8001a12:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a14:	4b23      	ldr	r3, [pc, #140]	; (8001aa4 <_ZL12MX_TIM1_Initv+0xb8>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a1a:	4b22      	ldr	r3, [pc, #136]	; (8001aa4 <_ZL12MX_TIM1_Initv+0xb8>)
 8001a1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a20:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a22:	4b20      	ldr	r3, [pc, #128]	; (8001aa4 <_ZL12MX_TIM1_Initv+0xb8>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a28:	4b1e      	ldr	r3, [pc, #120]	; (8001aa4 <_ZL12MX_TIM1_Initv+0xb8>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a2e:	4b1d      	ldr	r3, [pc, #116]	; (8001aa4 <_ZL12MX_TIM1_Initv+0xb8>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a34:	481b      	ldr	r0, [pc, #108]	; (8001aa4 <_ZL12MX_TIM1_Initv+0xb8>)
 8001a36:	f004 fcf7 	bl	8006428 <HAL_TIM_Base_Init>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	bf14      	ite	ne
 8001a40:	2301      	movne	r3, #1
 8001a42:	2300      	moveq	r3, #0
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <_ZL12MX_TIM1_Initv+0x62>
  {
    Error_Handler();
 8001a4a:	f000 fd31 	bl	80024b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a52:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a54:	f107 0308 	add.w	r3, r7, #8
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4812      	ldr	r0, [pc, #72]	; (8001aa4 <_ZL12MX_TIM1_Initv+0xb8>)
 8001a5c:	f005 fb16 	bl	800708c <HAL_TIM_ConfigClockSource>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	bf14      	ite	ne
 8001a66:	2301      	movne	r3, #1
 8001a68:	2300      	moveq	r3, #0
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <_ZL12MX_TIM1_Initv+0x88>
  {
    Error_Handler();
 8001a70:	f000 fd1e 	bl	80024b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a74:	2300      	movs	r3, #0
 8001a76:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a7c:	463b      	mov	r3, r7
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4808      	ldr	r0, [pc, #32]	; (8001aa4 <_ZL12MX_TIM1_Initv+0xb8>)
 8001a82:	f005 ff19 	bl	80078b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	bf14      	ite	ne
 8001a8c:	2301      	movne	r3, #1
 8001a8e:	2300      	moveq	r3, #0
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <_ZL12MX_TIM1_Initv+0xae>
  {
    Error_Handler();
 8001a96:	f000 fd0b 	bl	80024b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a9a:	bf00      	nop
 8001a9c:	3718      	adds	r7, #24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000688 	.word	0x20000688
 8001aa8:	40010000 	.word	0x40010000

08001aac <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08c      	sub	sp, #48	; 0x30
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ab2:	f107 030c 	add.w	r3, r7, #12
 8001ab6:	2224      	movs	r2, #36	; 0x24
 8001ab8:	2100      	movs	r1, #0
 8001aba:	4618      	mov	r0, r3
 8001abc:	f008 f8d1 	bl	8009c62 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac0:	1d3b      	adds	r3, r7, #4
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ac8:	4b28      	ldr	r3, [pc, #160]	; (8001b6c <_ZL12MX_TIM2_Initv+0xc0>)
 8001aca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ace:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 340;
 8001ad0:	4b26      	ldr	r3, [pc, #152]	; (8001b6c <_ZL12MX_TIM2_Initv+0xc0>)
 8001ad2:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8001ad6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ad8:	4b24      	ldr	r3, [pc, #144]	; (8001b6c <_ZL12MX_TIM2_Initv+0xc0>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65000;
 8001ade:	4b23      	ldr	r3, [pc, #140]	; (8001b6c <_ZL12MX_TIM2_Initv+0xc0>)
 8001ae0:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001ae4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae6:	4b21      	ldr	r3, [pc, #132]	; (8001b6c <_ZL12MX_TIM2_Initv+0xc0>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aec:	4b1f      	ldr	r3, [pc, #124]	; (8001b6c <_ZL12MX_TIM2_Initv+0xc0>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001af2:	2303      	movs	r3, #3
 8001af4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001af6:	2300      	movs	r3, #0
 8001af8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001afa:	2301      	movs	r3, #1
 8001afc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b06:	2300      	movs	r3, #0
 8001b08:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001b16:	f107 030c 	add.w	r3, r7, #12
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4813      	ldr	r0, [pc, #76]	; (8001b6c <_ZL12MX_TIM2_Initv+0xc0>)
 8001b1e:	f004 ff73 	bl	8006a08 <HAL_TIM_Encoder_Init>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	bf14      	ite	ne
 8001b28:	2301      	movne	r3, #1
 8001b2a:	2300      	moveq	r3, #0
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <_ZL12MX_TIM2_Initv+0x8a>
  {
    Error_Handler();
 8001b32:	f000 fcbd 	bl	80024b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b36:	2300      	movs	r3, #0
 8001b38:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b3e:	1d3b      	adds	r3, r7, #4
 8001b40:	4619      	mov	r1, r3
 8001b42:	480a      	ldr	r0, [pc, #40]	; (8001b6c <_ZL12MX_TIM2_Initv+0xc0>)
 8001b44:	f005 feb8 	bl	80078b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	bf14      	ite	ne
 8001b4e:	2301      	movne	r3, #1
 8001b50:	2300      	moveq	r3, #0
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <_ZL12MX_TIM2_Initv+0xb0>
  {
    Error_Handler();
 8001b58:	f000 fcaa 	bl	80024b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001b5c:	213c      	movs	r1, #60	; 0x3c
 8001b5e:	4803      	ldr	r0, [pc, #12]	; (8001b6c <_ZL12MX_TIM2_Initv+0xc0>)
 8001b60:	f004 fff8 	bl	8006b54 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM2_Init 2 */

}
 8001b64:	bf00      	nop
 8001b66:	3730      	adds	r7, #48	; 0x30
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	200006d0 	.word	0x200006d0

08001b70 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08e      	sub	sp, #56	; 0x38
 8001b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	605a      	str	r2, [r3, #4]
 8001b80:	609a      	str	r2, [r3, #8]
 8001b82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b84:	f107 0320 	add.w	r3, r7, #32
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b8e:	1d3b      	adds	r3, r7, #4
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]
 8001b9c:	615a      	str	r2, [r3, #20]
 8001b9e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ba0:	4b57      	ldr	r3, [pc, #348]	; (8001d00 <_ZL12MX_TIM3_Initv+0x190>)
 8001ba2:	4a58      	ldr	r2, [pc, #352]	; (8001d04 <_ZL12MX_TIM3_Initv+0x194>)
 8001ba4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 840-1;
 8001ba6:	4b56      	ldr	r3, [pc, #344]	; (8001d00 <_ZL12MX_TIM3_Initv+0x190>)
 8001ba8:	f240 3247 	movw	r2, #839	; 0x347
 8001bac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bae:	4b54      	ldr	r3, [pc, #336]	; (8001d00 <_ZL12MX_TIM3_Initv+0x190>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001bb4:	4b52      	ldr	r3, [pc, #328]	; (8001d00 <_ZL12MX_TIM3_Initv+0x190>)
 8001bb6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bbc:	4b50      	ldr	r3, [pc, #320]	; (8001d00 <_ZL12MX_TIM3_Initv+0x190>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc2:	4b4f      	ldr	r3, [pc, #316]	; (8001d00 <_ZL12MX_TIM3_Initv+0x190>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001bc8:	484d      	ldr	r0, [pc, #308]	; (8001d00 <_ZL12MX_TIM3_Initv+0x190>)
 8001bca:	f004 fc2d 	bl	8006428 <HAL_TIM_Base_Init>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	bf14      	ite	ne
 8001bd4:	2301      	movne	r3, #1
 8001bd6:	2300      	moveq	r3, #0
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <_ZL12MX_TIM3_Initv+0x72>
  {
    Error_Handler();
 8001bde:	f000 fc67 	bl	80024b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001be2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001be6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001be8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bec:	4619      	mov	r1, r3
 8001bee:	4844      	ldr	r0, [pc, #272]	; (8001d00 <_ZL12MX_TIM3_Initv+0x190>)
 8001bf0:	f005 fa4c 	bl	800708c <HAL_TIM_ConfigClockSource>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	bf14      	ite	ne
 8001bfa:	2301      	movne	r3, #1
 8001bfc:	2300      	moveq	r3, #0
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <_ZL12MX_TIM3_Initv+0x98>
  {
    Error_Handler();
 8001c04:	f000 fc54 	bl	80024b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c08:	483d      	ldr	r0, [pc, #244]	; (8001d00 <_ZL12MX_TIM3_Initv+0x190>)
 8001c0a:	f004 fd8e 	bl	800672a <HAL_TIM_PWM_Init>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	bf14      	ite	ne
 8001c14:	2301      	movne	r3, #1
 8001c16:	2300      	moveq	r3, #0
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <_ZL12MX_TIM3_Initv+0xb2>
  {
    Error_Handler();
 8001c1e:	f000 fc47 	bl	80024b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c22:	2300      	movs	r3, #0
 8001c24:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c26:	2300      	movs	r3, #0
 8001c28:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c2a:	f107 0320 	add.w	r3, r7, #32
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4833      	ldr	r0, [pc, #204]	; (8001d00 <_ZL12MX_TIM3_Initv+0x190>)
 8001c32:	f005 fe41 	bl	80078b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	bf14      	ite	ne
 8001c3c:	2301      	movne	r3, #1
 8001c3e:	2300      	moveq	r3, #0
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 8001c46:	f000 fc33 	bl	80024b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c4a:	2360      	movs	r3, #96	; 0x60
 8001c4c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8001c4e:	2364      	movs	r3, #100	; 0x64
 8001c50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c5a:	1d3b      	adds	r3, r7, #4
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4827      	ldr	r0, [pc, #156]	; (8001d00 <_ZL12MX_TIM3_Initv+0x190>)
 8001c62:	f005 f951 	bl	8006f08 <HAL_TIM_PWM_ConfigChannel>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	bf14      	ite	ne
 8001c6c:	2301      	movne	r3, #1
 8001c6e:	2300      	moveq	r3, #0
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <_ZL12MX_TIM3_Initv+0x10a>
  {
    Error_Handler();
 8001c76:	f000 fc1b 	bl	80024b0 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 8001c7a:	4b21      	ldr	r3, [pc, #132]	; (8001d00 <_ZL12MX_TIM3_Initv+0x190>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	699a      	ldr	r2, [r3, #24]
 8001c80:	4b1f      	ldr	r3, [pc, #124]	; (8001d00 <_ZL12MX_TIM3_Initv+0x190>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 0208 	bic.w	r2, r2, #8
 8001c88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c8a:	1d3b      	adds	r3, r7, #4
 8001c8c:	2204      	movs	r2, #4
 8001c8e:	4619      	mov	r1, r3
 8001c90:	481b      	ldr	r0, [pc, #108]	; (8001d00 <_ZL12MX_TIM3_Initv+0x190>)
 8001c92:	f005 f939 	bl	8006f08 <HAL_TIM_PWM_ConfigChannel>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	bf14      	ite	ne
 8001c9c:	2301      	movne	r3, #1
 8001c9e:	2300      	moveq	r3, #0
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <_ZL12MX_TIM3_Initv+0x13a>
  {
    Error_Handler();
 8001ca6:	f000 fc03 	bl	80024b0 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_2);
 8001caa:	4b15      	ldr	r3, [pc, #84]	; (8001d00 <_ZL12MX_TIM3_Initv+0x190>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	699a      	ldr	r2, [r3, #24]
 8001cb0:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <_ZL12MX_TIM3_Initv+0x190>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cb8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM3_Init 2 */
  TIM3->DIER |= (1<<1);   // CC1IE: Enable the Tim3 CC1 interrupt
 8001cba:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <_ZL12MX_TIM3_Initv+0x194>)
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	4a11      	ldr	r2, [pc, #68]	; (8001d04 <_ZL12MX_TIM3_Initv+0x194>)
 8001cc0:	f043 0302 	orr.w	r3, r3, #2
 8001cc4:	60d3      	str	r3, [r2, #12]
   NVIC->ISER[0] |= (1<<29); // TIM3_CC
 8001cc6:	4b10      	ldr	r3, [pc, #64]	; (8001d08 <_ZL12MX_TIM3_Initv+0x198>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a0f      	ldr	r2, [pc, #60]	; (8001d08 <_ZL12MX_TIM3_Initv+0x198>)
 8001ccc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001cd0:	6013      	str	r3, [r2, #0]
   TIM3->CCER	|= (1<<0);	// CC1E=1: OC1(TIM5_CH1) Active(Capture/Compare 1 output enable)
 8001cd2:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <_ZL12MX_TIM3_Initv+0x194>)
 8001cd4:	6a1b      	ldr	r3, [r3, #32]
 8001cd6:	4a0b      	ldr	r2, [pc, #44]	; (8001d04 <_ZL12MX_TIM3_Initv+0x194>)
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	6213      	str	r3, [r2, #32]
    					// ?��?��??(40�??????????????????????????????????????????)?�� ?��?�� ?��?��출력
   TIM3->CR1	|= (1<<0);	// CEN: Counter TIM3 enable
 8001cde:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <_ZL12MX_TIM3_Initv+0x194>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a08      	ldr	r2, [pc, #32]	; (8001d04 <_ZL12MX_TIM3_Initv+0x194>)
 8001ce4:	f043 0301 	orr.w	r3, r3, #1
 8001ce8:	6013      	str	r3, [r2, #0]

  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8001cea:	2100      	movs	r1, #0
 8001cec:	4804      	ldr	r0, [pc, #16]	; (8001d00 <_ZL12MX_TIM3_Initv+0x190>)
 8001cee:	f004 fd75 	bl	80067dc <HAL_TIM_PWM_Start_IT>

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001cf2:	4803      	ldr	r0, [pc, #12]	; (8001d00 <_ZL12MX_TIM3_Initv+0x190>)
 8001cf4:	f001 f8f6 	bl	8002ee4 <HAL_TIM_MspPostInit>

}
 8001cf8:	bf00      	nop
 8001cfa:	3738      	adds	r7, #56	; 0x38
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	20000718 	.word	0x20000718
 8001d04:	40000400 	.word	0x40000400
 8001d08:	e000e100 	.word	0xe000e100

08001d0c <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08c      	sub	sp, #48	; 0x30
 8001d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d12:	f107 030c 	add.w	r3, r7, #12
 8001d16:	2224      	movs	r2, #36	; 0x24
 8001d18:	2100      	movs	r1, #0
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f007 ffa1 	bl	8009c62 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d20:	1d3b      	adds	r3, r7, #4
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d28:	4b28      	ldr	r3, [pc, #160]	; (8001dcc <_ZL12MX_TIM4_Initv+0xc0>)
 8001d2a:	4a29      	ldr	r2, [pc, #164]	; (8001dd0 <_ZL12MX_TIM4_Initv+0xc4>)
 8001d2c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 340;
 8001d2e:	4b27      	ldr	r3, [pc, #156]	; (8001dcc <_ZL12MX_TIM4_Initv+0xc0>)
 8001d30:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8001d34:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d36:	4b25      	ldr	r3, [pc, #148]	; (8001dcc <_ZL12MX_TIM4_Initv+0xc0>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65000;
 8001d3c:	4b23      	ldr	r3, [pc, #140]	; (8001dcc <_ZL12MX_TIM4_Initv+0xc0>)
 8001d3e:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001d42:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d44:	4b21      	ldr	r3, [pc, #132]	; (8001dcc <_ZL12MX_TIM4_Initv+0xc0>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d4a:	4b20      	ldr	r3, [pc, #128]	; (8001dcc <_ZL12MX_TIM4_Initv+0xc0>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d50:	2303      	movs	r3, #3
 8001d52:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d54:	2300      	movs	r3, #0
 8001d56:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d60:	2300      	movs	r3, #0
 8001d62:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d64:	2300      	movs	r3, #0
 8001d66:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001d74:	f107 030c 	add.w	r3, r7, #12
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4814      	ldr	r0, [pc, #80]	; (8001dcc <_ZL12MX_TIM4_Initv+0xc0>)
 8001d7c:	f004 fe44 	bl	8006a08 <HAL_TIM_Encoder_Init>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	bf14      	ite	ne
 8001d86:	2301      	movne	r3, #1
 8001d88:	2300      	moveq	r3, #0
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <_ZL12MX_TIM4_Initv+0x88>
  {
    Error_Handler();
 8001d90:	f000 fb8e 	bl	80024b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d94:	2300      	movs	r3, #0
 8001d96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d9c:	1d3b      	adds	r3, r7, #4
 8001d9e:	4619      	mov	r1, r3
 8001da0:	480a      	ldr	r0, [pc, #40]	; (8001dcc <_ZL12MX_TIM4_Initv+0xc0>)
 8001da2:	f005 fd89 	bl	80078b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	bf14      	ite	ne
 8001dac:	2301      	movne	r3, #1
 8001dae:	2300      	moveq	r3, #0
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <_ZL12MX_TIM4_Initv+0xae>
  {
    Error_Handler();
 8001db6:	f000 fb7b 	bl	80024b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001dba:	213c      	movs	r1, #60	; 0x3c
 8001dbc:	4803      	ldr	r0, [pc, #12]	; (8001dcc <_ZL12MX_TIM4_Initv+0xc0>)
 8001dbe:	f004 fec9 	bl	8006b54 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM4_Init 2 */

}
 8001dc2:	bf00      	nop
 8001dc4:	3730      	adds	r7, #48	; 0x30
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000760 	.word	0x20000760
 8001dd0:	40000800 	.word	0x40000800

08001dd4 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dda:	463b      	mov	r3, r7
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001de2:	4b1b      	ldr	r3, [pc, #108]	; (8001e50 <_ZL12MX_TIM6_Initv+0x7c>)
 8001de4:	4a1b      	ldr	r2, [pc, #108]	; (8001e54 <_ZL12MX_TIM6_Initv+0x80>)
 8001de6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 8001de8:	4b19      	ldr	r3, [pc, #100]	; (8001e50 <_ZL12MX_TIM6_Initv+0x7c>)
 8001dea:	2253      	movs	r2, #83	; 0x53
 8001dec:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dee:	4b18      	ldr	r3, [pc, #96]	; (8001e50 <_ZL12MX_TIM6_Initv+0x7c>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8001df4:	4b16      	ldr	r3, [pc, #88]	; (8001e50 <_ZL12MX_TIM6_Initv+0x7c>)
 8001df6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001dfa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dfc:	4b14      	ldr	r3, [pc, #80]	; (8001e50 <_ZL12MX_TIM6_Initv+0x7c>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001e02:	4813      	ldr	r0, [pc, #76]	; (8001e50 <_ZL12MX_TIM6_Initv+0x7c>)
 8001e04:	f004 fb10 	bl	8006428 <HAL_TIM_Base_Init>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	bf14      	ite	ne
 8001e0e:	2301      	movne	r3, #1
 8001e10:	2300      	moveq	r3, #0
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <_ZL12MX_TIM6_Initv+0x48>
  {
    Error_Handler();
 8001e18:	f000 fb4a 	bl	80024b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e20:	2300      	movs	r3, #0
 8001e22:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001e24:	463b      	mov	r3, r7
 8001e26:	4619      	mov	r1, r3
 8001e28:	4809      	ldr	r0, [pc, #36]	; (8001e50 <_ZL12MX_TIM6_Initv+0x7c>)
 8001e2a:	f005 fd45 	bl	80078b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	bf14      	ite	ne
 8001e34:	2301      	movne	r3, #1
 8001e36:	2300      	moveq	r3, #0
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <_ZL12MX_TIM6_Initv+0x6e>
  {
    Error_Handler();
 8001e3e:	f000 fb37 	bl	80024b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8001e42:	4803      	ldr	r0, [pc, #12]	; (8001e50 <_ZL12MX_TIM6_Initv+0x7c>)
 8001e44:	f004 fba8 	bl	8006598 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM6_Init 2 */

}
 8001e48:	bf00      	nop
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	200007a8 	.word	0x200007a8
 8001e54:	40001000 	.word	0x40001000

08001e58 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b096      	sub	sp, #88	; 0x58
 8001e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e5e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	605a      	str	r2, [r3, #4]
 8001e68:	609a      	str	r2, [r3, #8]
 8001e6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e6c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	605a      	str	r2, [r3, #4]
 8001e80:	609a      	str	r2, [r3, #8]
 8001e82:	60da      	str	r2, [r3, #12]
 8001e84:	611a      	str	r2, [r3, #16]
 8001e86:	615a      	str	r2, [r3, #20]
 8001e88:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e8a:	1d3b      	adds	r3, r7, #4
 8001e8c:	2220      	movs	r2, #32
 8001e8e:	2100      	movs	r1, #0
 8001e90:	4618      	mov	r0, r3
 8001e92:	f007 fee6 	bl	8009c62 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001e96:	4b4d      	ldr	r3, [pc, #308]	; (8001fcc <_ZL12MX_TIM8_Initv+0x174>)
 8001e98:	4a4d      	ldr	r2, [pc, #308]	; (8001fd0 <_ZL12MX_TIM8_Initv+0x178>)
 8001e9a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 840-1;
 8001e9c:	4b4b      	ldr	r3, [pc, #300]	; (8001fcc <_ZL12MX_TIM8_Initv+0x174>)
 8001e9e:	f240 3247 	movw	r2, #839	; 0x347
 8001ea2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea4:	4b49      	ldr	r3, [pc, #292]	; (8001fcc <_ZL12MX_TIM8_Initv+0x174>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 50-1;
 8001eaa:	4b48      	ldr	r3, [pc, #288]	; (8001fcc <_ZL12MX_TIM8_Initv+0x174>)
 8001eac:	2231      	movs	r2, #49	; 0x31
 8001eae:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eb0:	4b46      	ldr	r3, [pc, #280]	; (8001fcc <_ZL12MX_TIM8_Initv+0x174>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001eb6:	4b45      	ldr	r3, [pc, #276]	; (8001fcc <_ZL12MX_TIM8_Initv+0x174>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ebc:	4b43      	ldr	r3, [pc, #268]	; (8001fcc <_ZL12MX_TIM8_Initv+0x174>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001ec2:	4842      	ldr	r0, [pc, #264]	; (8001fcc <_ZL12MX_TIM8_Initv+0x174>)
 8001ec4:	f004 fab0 	bl	8006428 <HAL_TIM_Base_Init>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	bf14      	ite	ne
 8001ece:	2301      	movne	r3, #1
 8001ed0:	2300      	moveq	r3, #0
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <_ZL12MX_TIM8_Initv+0x84>
  {
    Error_Handler();
 8001ed8:	f000 faea 	bl	80024b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ee0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001ee2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4838      	ldr	r0, [pc, #224]	; (8001fcc <_ZL12MX_TIM8_Initv+0x174>)
 8001eea:	f005 f8cf 	bl	800708c <HAL_TIM_ConfigClockSource>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	bf14      	ite	ne
 8001ef4:	2301      	movne	r3, #1
 8001ef6:	2300      	moveq	r3, #0
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <_ZL12MX_TIM8_Initv+0xaa>
  {
    Error_Handler();
 8001efe:	f000 fad7 	bl	80024b0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8001f02:	4832      	ldr	r0, [pc, #200]	; (8001fcc <_ZL12MX_TIM8_Initv+0x174>)
 8001f04:	f004 fbb8 	bl	8006678 <HAL_TIM_OC_Init>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	bf14      	ite	ne
 8001f0e:	2301      	movne	r3, #1
 8001f10:	2300      	moveq	r3, #0
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <_ZL12MX_TIM8_Initv+0xc4>
  {
    Error_Handler();
 8001f18:	f000 faca 	bl	80024b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001f1c:	2320      	movs	r3, #32
 8001f1e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f20:	2300      	movs	r3, #0
 8001f22:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001f24:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4828      	ldr	r0, [pc, #160]	; (8001fcc <_ZL12MX_TIM8_Initv+0x174>)
 8001f2c:	f005 fcc4 	bl	80078b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	bf14      	ite	ne
 8001f36:	2301      	movne	r3, #1
 8001f38:	2300      	moveq	r3, #0
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <_ZL12MX_TIM8_Initv+0xec>
  {
    Error_Handler();
 8001f40:	f000 fab6 	bl	80024b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001f44:	2300      	movs	r3, #0
 8001f46:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2000;
 8001f48:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001f4c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f52:	2300      	movs	r3, #0
 8001f54:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f56:	2300      	movs	r3, #0
 8001f58:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f62:	220c      	movs	r2, #12
 8001f64:	4619      	mov	r1, r3
 8001f66:	4819      	ldr	r0, [pc, #100]	; (8001fcc <_ZL12MX_TIM8_Initv+0x174>)
 8001f68:	f004 ff72 	bl	8006e50 <HAL_TIM_OC_ConfigChannel>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	bf14      	ite	ne
 8001f72:	2301      	movne	r3, #1
 8001f74:	2300      	moveq	r3, #0
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <_ZL12MX_TIM8_Initv+0x128>
  {
    Error_Handler();
 8001f7c:	f000 fa98 	bl	80024b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f80:	2300      	movs	r3, #0
 8001f82:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f84:	2300      	movs	r3, #0
 8001f86:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f98:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001f9e:	1d3b      	adds	r3, r7, #4
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	480a      	ldr	r0, [pc, #40]	; (8001fcc <_ZL12MX_TIM8_Initv+0x174>)
 8001fa4:	f005 fd04 	bl	80079b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	bf14      	ite	ne
 8001fae:	2301      	movne	r3, #1
 8001fb0:	2300      	moveq	r3, #0
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <_ZL12MX_TIM8_Initv+0x164>
  {
    Error_Handler();
 8001fb8:	f000 fa7a 	bl	80024b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */
  HAL_TIM_Base_Start_IT(&htim8);
 8001fbc:	4803      	ldr	r0, [pc, #12]	; (8001fcc <_ZL12MX_TIM8_Initv+0x174>)
 8001fbe:	f004 faeb 	bl	8006598 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM8_Init 2 */

}
 8001fc2:	bf00      	nop
 8001fc4:	3758      	adds	r7, #88	; 0x58
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	200007f0 	.word	0x200007f0
 8001fd0:	40010400 	.word	0x40010400

08001fd4 <_ZL13MX_TIM13_Initv>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b088      	sub	sp, #32
 8001fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fda:	1d3b      	adds	r3, r7, #4
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	60da      	str	r2, [r3, #12]
 8001fe6:	611a      	str	r2, [r3, #16]
 8001fe8:	615a      	str	r2, [r3, #20]
 8001fea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001fec:	4b26      	ldr	r3, [pc, #152]	; (8002088 <_ZL13MX_TIM13_Initv+0xb4>)
 8001fee:	4a27      	ldr	r2, [pc, #156]	; (800208c <_ZL13MX_TIM13_Initv+0xb8>)
 8001ff0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 84;
 8001ff2:	4b25      	ldr	r3, [pc, #148]	; (8002088 <_ZL13MX_TIM13_Initv+0xb4>)
 8001ff4:	2254      	movs	r2, #84	; 0x54
 8001ff6:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff8:	4b23      	ldr	r3, [pc, #140]	; (8002088 <_ZL13MX_TIM13_Initv+0xb4>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100;
 8001ffe:	4b22      	ldr	r3, [pc, #136]	; (8002088 <_ZL13MX_TIM13_Initv+0xb4>)
 8002000:	2264      	movs	r2, #100	; 0x64
 8002002:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002004:	4b20      	ldr	r3, [pc, #128]	; (8002088 <_ZL13MX_TIM13_Initv+0xb4>)
 8002006:	2200      	movs	r2, #0
 8002008:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800200a:	4b1f      	ldr	r3, [pc, #124]	; (8002088 <_ZL13MX_TIM13_Initv+0xb4>)
 800200c:	2200      	movs	r2, #0
 800200e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002010:	481d      	ldr	r0, [pc, #116]	; (8002088 <_ZL13MX_TIM13_Initv+0xb4>)
 8002012:	f004 fa09 	bl	8006428 <HAL_TIM_Base_Init>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	bf14      	ite	ne
 800201c:	2301      	movne	r3, #1
 800201e:	2300      	moveq	r3, #0
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <_ZL13MX_TIM13_Initv+0x56>
  {
    Error_Handler();
 8002026:	f000 fa43 	bl	80024b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800202a:	4817      	ldr	r0, [pc, #92]	; (8002088 <_ZL13MX_TIM13_Initv+0xb4>)
 800202c:	f004 fb7d 	bl	800672a <HAL_TIM_PWM_Init>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	bf14      	ite	ne
 8002036:	2301      	movne	r3, #1
 8002038:	2300      	moveq	r3, #0
 800203a:	b2db      	uxtb	r3, r3
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <_ZL13MX_TIM13_Initv+0x70>
  {
    Error_Handler();
 8002040:	f000 fa36 	bl	80024b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002044:	2360      	movs	r3, #96	; 0x60
 8002046:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8002048:	2332      	movs	r3, #50	; 0x32
 800204a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800204c:	2300      	movs	r3, #0
 800204e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002050:	2300      	movs	r3, #0
 8002052:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002054:	1d3b      	adds	r3, r7, #4
 8002056:	2200      	movs	r2, #0
 8002058:	4619      	mov	r1, r3
 800205a:	480b      	ldr	r0, [pc, #44]	; (8002088 <_ZL13MX_TIM13_Initv+0xb4>)
 800205c:	f004 ff54 	bl	8006f08 <HAL_TIM_PWM_ConfigChannel>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	bf14      	ite	ne
 8002066:	2301      	movne	r3, #1
 8002068:	2300      	moveq	r3, #0
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <_ZL13MX_TIM13_Initv+0xa0>
  {
    Error_Handler();
 8002070:	f000 fa1e 	bl	80024b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002074:	4804      	ldr	r0, [pc, #16]	; (8002088 <_ZL13MX_TIM13_Initv+0xb4>)
 8002076:	f000 ff35 	bl	8002ee4 <HAL_TIM_MspPostInit>
  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 800207a:	4803      	ldr	r0, [pc, #12]	; (8002088 <_ZL13MX_TIM13_Initv+0xb4>)
 800207c:	f000 ff32 	bl	8002ee4 <HAL_TIM_MspPostInit>

}
 8002080:	bf00      	nop
 8002082:	3720      	adds	r7, #32
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	20000838 	.word	0x20000838
 800208c:	40001c00 	.word	0x40001c00

08002090 <_ZL13MX_TIM14_Initv>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002094:	4b1a      	ldr	r3, [pc, #104]	; (8002100 <_ZL13MX_TIM14_Initv+0x70>)
 8002096:	4a1b      	ldr	r2, [pc, #108]	; (8002104 <_ZL13MX_TIM14_Initv+0x74>)
 8002098:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 840-1;
 800209a:	4b19      	ldr	r3, [pc, #100]	; (8002100 <_ZL13MX_TIM14_Initv+0x70>)
 800209c:	f240 3247 	movw	r2, #839	; 0x347
 80020a0:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a2:	4b17      	ldr	r3, [pc, #92]	; (8002100 <_ZL13MX_TIM14_Initv+0x70>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 80020a8:	4b15      	ldr	r3, [pc, #84]	; (8002100 <_ZL13MX_TIM14_Initv+0x70>)
 80020aa:	f242 720f 	movw	r2, #9999	; 0x270f
 80020ae:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020b0:	4b13      	ldr	r3, [pc, #76]	; (8002100 <_ZL13MX_TIM14_Initv+0x70>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020b6:	4b12      	ldr	r3, [pc, #72]	; (8002100 <_ZL13MX_TIM14_Initv+0x70>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80020bc:	4810      	ldr	r0, [pc, #64]	; (8002100 <_ZL13MX_TIM14_Initv+0x70>)
 80020be:	f004 f9b3 	bl	8006428 <HAL_TIM_Base_Init>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	bf14      	ite	ne
 80020c8:	2301      	movne	r3, #1
 80020ca:	2300      	moveq	r3, #0
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <_ZL13MX_TIM14_Initv+0x46>
  {
    Error_Handler();
 80020d2:	f000 f9ed 	bl	80024b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */
  TIM14->DIER |= (1<<0);   // CC1IE: Enable the Tim14 UG interrupt
 80020d6:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <_ZL13MX_TIM14_Initv+0x74>)
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	4a0a      	ldr	r2, [pc, #40]	; (8002104 <_ZL13MX_TIM14_Initv+0x74>)
 80020dc:	f043 0301 	orr.w	r3, r3, #1
 80020e0:	60d3      	str	r3, [r2, #12]
   NVIC->ISER[1] |= (1<<(45-32)); // TIM14_CC
 80020e2:	4b09      	ldr	r3, [pc, #36]	; (8002108 <_ZL13MX_TIM14_Initv+0x78>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	4a08      	ldr	r2, [pc, #32]	; (8002108 <_ZL13MX_TIM14_Initv+0x78>)
 80020e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020ec:	6053      	str	r3, [r2, #4]

   TIM14->CR1	|= (1<<0);	// CEN: Counter TIM14 enable
 80020ee:	4b05      	ldr	r3, [pc, #20]	; (8002104 <_ZL13MX_TIM14_Initv+0x74>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a04      	ldr	r2, [pc, #16]	; (8002104 <_ZL13MX_TIM14_Initv+0x74>)
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM14_Init 2 */

}
 80020fa:	bf00      	nop
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	20000880 	.word	0x20000880
 8002104:	40002000 	.word	0x40002000
 8002108:	e000e100 	.word	0xe000e100

0800210c <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002110:	4b14      	ldr	r3, [pc, #80]	; (8002164 <_ZL13MX_UART4_Initv+0x58>)
 8002112:	4a15      	ldr	r2, [pc, #84]	; (8002168 <_ZL13MX_UART4_Initv+0x5c>)
 8002114:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002116:	4b13      	ldr	r3, [pc, #76]	; (8002164 <_ZL13MX_UART4_Initv+0x58>)
 8002118:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800211c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800211e:	4b11      	ldr	r3, [pc, #68]	; (8002164 <_ZL13MX_UART4_Initv+0x58>)
 8002120:	2200      	movs	r2, #0
 8002122:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002124:	4b0f      	ldr	r3, [pc, #60]	; (8002164 <_ZL13MX_UART4_Initv+0x58>)
 8002126:	2200      	movs	r2, #0
 8002128:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 800212a:	4b0e      	ldr	r3, [pc, #56]	; (8002164 <_ZL13MX_UART4_Initv+0x58>)
 800212c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002130:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002132:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <_ZL13MX_UART4_Initv+0x58>)
 8002134:	220c      	movs	r2, #12
 8002136:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002138:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <_ZL13MX_UART4_Initv+0x58>)
 800213a:	2200      	movs	r2, #0
 800213c:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800213e:	4b09      	ldr	r3, [pc, #36]	; (8002164 <_ZL13MX_UART4_Initv+0x58>)
 8002140:	2200      	movs	r2, #0
 8002142:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002144:	4807      	ldr	r0, [pc, #28]	; (8002164 <_ZL13MX_UART4_Initv+0x58>)
 8002146:	f005 fc99 	bl	8007a7c <HAL_UART_Init>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	bf14      	ite	ne
 8002150:	2301      	movne	r3, #1
 8002152:	2300      	moveq	r3, #0
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <_ZL13MX_UART4_Initv+0x52>
  {
    Error_Handler();
 800215a:	f000 f9a9 	bl	80024b0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000200 	.word	0x20000200
 8002168:	40004c00 	.word	0x40004c00

0800216c <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002170:	4b13      	ldr	r3, [pc, #76]	; (80021c0 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002172:	4a14      	ldr	r2, [pc, #80]	; (80021c4 <_ZL19MX_USART3_UART_Initv+0x58>)
 8002174:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002176:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002178:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800217c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800217e:	4b10      	ldr	r3, [pc, #64]	; (80021c0 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002180:	2200      	movs	r2, #0
 8002182:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002184:	4b0e      	ldr	r3, [pc, #56]	; (80021c0 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002186:	2200      	movs	r2, #0
 8002188:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800218a:	4b0d      	ldr	r3, [pc, #52]	; (80021c0 <_ZL19MX_USART3_UART_Initv+0x54>)
 800218c:	2200      	movs	r2, #0
 800218e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002190:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002192:	220c      	movs	r2, #12
 8002194:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002196:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002198:	2200      	movs	r2, #0
 800219a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800219c:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <_ZL19MX_USART3_UART_Initv+0x54>)
 800219e:	2200      	movs	r2, #0
 80021a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80021a2:	4807      	ldr	r0, [pc, #28]	; (80021c0 <_ZL19MX_USART3_UART_Initv+0x54>)
 80021a4:	f005 fc6a 	bl	8007a7c <HAL_UART_Init>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	bf14      	ite	ne
 80021ae:	2301      	movne	r3, #1
 80021b0:	2300      	moveq	r3, #0
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 80021b8:	f000 f97a 	bl	80024b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80021bc:	bf00      	nop
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20000248 	.word	0x20000248
 80021c4:	40004800 	.word	0x40004800

080021c8 <_ZL22MX_USB_OTG_FS_PCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80021cc:	4b16      	ldr	r3, [pc, #88]	; (8002228 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 80021ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80021d2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80021d4:	4b14      	ldr	r3, [pc, #80]	; (8002228 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 80021d6:	2204      	movs	r2, #4
 80021d8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80021da:	4b13      	ldr	r3, [pc, #76]	; (8002228 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 80021dc:	2202      	movs	r2, #2
 80021de:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80021e0:	4b11      	ldr	r3, [pc, #68]	; (8002228 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80021e6:	4b10      	ldr	r3, [pc, #64]	; (8002228 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 80021e8:	2202      	movs	r2, #2
 80021ea:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80021ec:	4b0e      	ldr	r3, [pc, #56]	; (8002228 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 80021ee:	2201      	movs	r2, #1
 80021f0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80021f2:	4b0d      	ldr	r3, [pc, #52]	; (8002228 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80021f8:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80021fe:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8002200:	2201      	movs	r2, #1
 8002202:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002204:	4b08      	ldr	r3, [pc, #32]	; (8002228 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8002206:	2200      	movs	r2, #0
 8002208:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800220a:	4807      	ldr	r0, [pc, #28]	; (8002228 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800220c:	f003 fb65 	bl	80058da <HAL_PCD_Init>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	bf14      	ite	ne
 8002216:	2301      	movne	r3, #1
 8002218:	2300      	moveq	r3, #0
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x5c>
  {
    Error_Handler();
 8002220:	f000 f946 	bl	80024b0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002224:	bf00      	nop
 8002226:	bd80      	pop	{r7, pc}
 8002228:	20000928 	.word	0x20000928

0800222c <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	607b      	str	r3, [r7, #4]
 8002236:	4b17      	ldr	r3, [pc, #92]	; (8002294 <_ZL11MX_DMA_Initv+0x68>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	4a16      	ldr	r2, [pc, #88]	; (8002294 <_ZL11MX_DMA_Initv+0x68>)
 800223c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002240:	6313      	str	r3, [r2, #48]	; 0x30
 8002242:	4b14      	ldr	r3, [pc, #80]	; (8002294 <_ZL11MX_DMA_Initv+0x68>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800224a:	607b      	str	r3, [r7, #4]
 800224c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	603b      	str	r3, [r7, #0]
 8002252:	4b10      	ldr	r3, [pc, #64]	; (8002294 <_ZL11MX_DMA_Initv+0x68>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	4a0f      	ldr	r2, [pc, #60]	; (8002294 <_ZL11MX_DMA_Initv+0x68>)
 8002258:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800225c:	6313      	str	r3, [r2, #48]	; 0x30
 800225e:	4b0d      	ldr	r3, [pc, #52]	; (8002294 <_ZL11MX_DMA_Initv+0x68>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002266:	603b      	str	r3, [r7, #0]
 8002268:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800226a:	2200      	movs	r2, #0
 800226c:	2100      	movs	r1, #0
 800226e:	2011      	movs	r0, #17
 8002270:	f002 f9f5 	bl	800465e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002274:	2011      	movs	r0, #17
 8002276:	f002 fa0e 	bl	8004696 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800227a:	2200      	movs	r2, #0
 800227c:	2100      	movs	r1, #0
 800227e:	2039      	movs	r0, #57	; 0x39
 8002280:	f002 f9ed 	bl	800465e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002284:	2039      	movs	r0, #57	; 0x39
 8002286:	f002 fa06 	bl	8004696 <HAL_NVIC_EnableIRQ>

}
 800228a:	bf00      	nop
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40023800 	.word	0x40023800

08002298 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b08e      	sub	sp, #56	; 0x38
 800229c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800229e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	605a      	str	r2, [r3, #4]
 80022a8:	609a      	str	r2, [r3, #8]
 80022aa:	60da      	str	r2, [r3, #12]
 80022ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	623b      	str	r3, [r7, #32]
 80022b2:	4b79      	ldr	r3, [pc, #484]	; (8002498 <_ZL12MX_GPIO_Initv+0x200>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	4a78      	ldr	r2, [pc, #480]	; (8002498 <_ZL12MX_GPIO_Initv+0x200>)
 80022b8:	f043 0304 	orr.w	r3, r3, #4
 80022bc:	6313      	str	r3, [r2, #48]	; 0x30
 80022be:	4b76      	ldr	r3, [pc, #472]	; (8002498 <_ZL12MX_GPIO_Initv+0x200>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	f003 0304 	and.w	r3, r3, #4
 80022c6:	623b      	str	r3, [r7, #32]
 80022c8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	61fb      	str	r3, [r7, #28]
 80022ce:	4b72      	ldr	r3, [pc, #456]	; (8002498 <_ZL12MX_GPIO_Initv+0x200>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	4a71      	ldr	r2, [pc, #452]	; (8002498 <_ZL12MX_GPIO_Initv+0x200>)
 80022d4:	f043 0320 	orr.w	r3, r3, #32
 80022d8:	6313      	str	r3, [r2, #48]	; 0x30
 80022da:	4b6f      	ldr	r3, [pc, #444]	; (8002498 <_ZL12MX_GPIO_Initv+0x200>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	f003 0320 	and.w	r3, r3, #32
 80022e2:	61fb      	str	r3, [r7, #28]
 80022e4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	61bb      	str	r3, [r7, #24]
 80022ea:	4b6b      	ldr	r3, [pc, #428]	; (8002498 <_ZL12MX_GPIO_Initv+0x200>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	4a6a      	ldr	r2, [pc, #424]	; (8002498 <_ZL12MX_GPIO_Initv+0x200>)
 80022f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022f4:	6313      	str	r3, [r2, #48]	; 0x30
 80022f6:	4b68      	ldr	r3, [pc, #416]	; (8002498 <_ZL12MX_GPIO_Initv+0x200>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022fe:	61bb      	str	r3, [r7, #24]
 8002300:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	617b      	str	r3, [r7, #20]
 8002306:	4b64      	ldr	r3, [pc, #400]	; (8002498 <_ZL12MX_GPIO_Initv+0x200>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	4a63      	ldr	r2, [pc, #396]	; (8002498 <_ZL12MX_GPIO_Initv+0x200>)
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	6313      	str	r3, [r2, #48]	; 0x30
 8002312:	4b61      	ldr	r3, [pc, #388]	; (8002498 <_ZL12MX_GPIO_Initv+0x200>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	617b      	str	r3, [r7, #20]
 800231c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	613b      	str	r3, [r7, #16]
 8002322:	4b5d      	ldr	r3, [pc, #372]	; (8002498 <_ZL12MX_GPIO_Initv+0x200>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	4a5c      	ldr	r2, [pc, #368]	; (8002498 <_ZL12MX_GPIO_Initv+0x200>)
 8002328:	f043 0302 	orr.w	r3, r3, #2
 800232c:	6313      	str	r3, [r2, #48]	; 0x30
 800232e:	4b5a      	ldr	r3, [pc, #360]	; (8002498 <_ZL12MX_GPIO_Initv+0x200>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	613b      	str	r3, [r7, #16]
 8002338:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	4b56      	ldr	r3, [pc, #344]	; (8002498 <_ZL12MX_GPIO_Initv+0x200>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	4a55      	ldr	r2, [pc, #340]	; (8002498 <_ZL12MX_GPIO_Initv+0x200>)
 8002344:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002348:	6313      	str	r3, [r2, #48]	; 0x30
 800234a:	4b53      	ldr	r3, [pc, #332]	; (8002498 <_ZL12MX_GPIO_Initv+0x200>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	4b4f      	ldr	r3, [pc, #316]	; (8002498 <_ZL12MX_GPIO_Initv+0x200>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	4a4e      	ldr	r2, [pc, #312]	; (8002498 <_ZL12MX_GPIO_Initv+0x200>)
 8002360:	f043 0308 	orr.w	r3, r3, #8
 8002364:	6313      	str	r3, [r2, #48]	; 0x30
 8002366:	4b4c      	ldr	r3, [pc, #304]	; (8002498 <_ZL12MX_GPIO_Initv+0x200>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	f003 0308 	and.w	r3, r3, #8
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	607b      	str	r3, [r7, #4]
 8002376:	4b48      	ldr	r3, [pc, #288]	; (8002498 <_ZL12MX_GPIO_Initv+0x200>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	4a47      	ldr	r2, [pc, #284]	; (8002498 <_ZL12MX_GPIO_Initv+0x200>)
 800237c:	f043 0310 	orr.w	r3, r3, #16
 8002380:	6313      	str	r3, [r2, #48]	; 0x30
 8002382:	4b45      	ldr	r3, [pc, #276]	; (8002498 <_ZL12MX_GPIO_Initv+0x200>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	f003 0310 	and.w	r3, r3, #16
 800238a:	607b      	str	r3, [r7, #4]
 800238c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD3_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 800238e:	2200      	movs	r2, #0
 8002390:	f244 0181 	movw	r1, #16513	; 0x4081
 8002394:	4841      	ldr	r0, [pc, #260]	; (800249c <_ZL12MX_GPIO_Initv+0x204>)
 8002396:	f003 fa87 	bl	80058a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800239a:	2200      	movs	r2, #0
 800239c:	2103      	movs	r1, #3
 800239e:	4840      	ldr	r0, [pc, #256]	; (80024a0 <_ZL12MX_GPIO_Initv+0x208>)
 80023a0:	f003 fa82 	bl	80058a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 80023a4:	2200      	movs	r2, #0
 80023a6:	2180      	movs	r1, #128	; 0x80
 80023a8:	483e      	ldr	r0, [pc, #248]	; (80024a4 <_ZL12MX_GPIO_Initv+0x20c>)
 80023aa:	f003 fa7d 	bl	80058a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
 80023ae:	2200      	movs	r2, #0
 80023b0:	2101      	movs	r1, #1
 80023b2:	483d      	ldr	r0, [pc, #244]	; (80024a8 <_ZL12MX_GPIO_Initv+0x210>)
 80023b4:	f003 fa78 	bl	80058a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80023b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80023c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c4:	2300      	movs	r3, #0
 80023c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80023c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023cc:	4619      	mov	r1, r3
 80023ce:	4837      	ldr	r0, [pc, #220]	; (80024ac <_ZL12MX_GPIO_Initv+0x214>)
 80023d0:	f003 f8a6 	bl	8005520 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 LD3_Pin PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin|GPIO_PIN_7;
 80023d4:	f244 0381 	movw	r3, #16513	; 0x4081
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023da:	2301      	movs	r3, #1
 80023dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023de:	2300      	movs	r3, #0
 80023e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e2:	2300      	movs	r3, #0
 80023e4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ea:	4619      	mov	r1, r3
 80023ec:	482b      	ldr	r0, [pc, #172]	; (800249c <_ZL12MX_GPIO_Initv+0x204>)
 80023ee:	f003 f897 	bl	8005520 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80023f2:	2303      	movs	r3, #3
 80023f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023f6:	2301      	movs	r3, #1
 80023f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fa:	2300      	movs	r3, #0
 80023fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fe:	2300      	movs	r3, #0
 8002400:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002402:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002406:	4619      	mov	r1, r3
 8002408:	4825      	ldr	r0, [pc, #148]	; (80024a0 <_ZL12MX_GPIO_Initv+0x208>)
 800240a:	f003 f889 	bl	8005520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800240e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002412:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002414:	2300      	movs	r3, #0
 8002416:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002418:	2300      	movs	r3, #0
 800241a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800241c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002420:	4619      	mov	r1, r3
 8002422:	481e      	ldr	r0, [pc, #120]	; (800249c <_ZL12MX_GPIO_Initv+0x204>)
 8002424:	f003 f87c 	bl	8005520 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002428:	2380      	movs	r3, #128	; 0x80
 800242a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800242c:	2300      	movs	r3, #0
 800242e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002430:	2300      	movs	r3, #0
 8002432:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002434:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002438:	4619      	mov	r1, r3
 800243a:	4819      	ldr	r0, [pc, #100]	; (80024a0 <_ZL12MX_GPIO_Initv+0x208>)
 800243c:	f003 f870 	bl	8005520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002440:	2340      	movs	r3, #64	; 0x40
 8002442:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002444:	2300      	movs	r3, #0
 8002446:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002448:	2300      	movs	r3, #0
 800244a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800244c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002450:	4619      	mov	r1, r3
 8002452:	4814      	ldr	r0, [pc, #80]	; (80024a4 <_ZL12MX_GPIO_Initv+0x20c>)
 8002454:	f003 f864 	bl	8005520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002458:	2380      	movs	r3, #128	; 0x80
 800245a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800245c:	2301      	movs	r3, #1
 800245e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002460:	2300      	movs	r3, #0
 8002462:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002464:	2300      	movs	r3, #0
 8002466:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002468:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800246c:	4619      	mov	r1, r3
 800246e:	480d      	ldr	r0, [pc, #52]	; (80024a4 <_ZL12MX_GPIO_Initv+0x20c>)
 8002470:	f003 f856 	bl	8005520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002474:	2301      	movs	r3, #1
 8002476:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002478:	2301      	movs	r3, #1
 800247a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247c:	2300      	movs	r3, #0
 800247e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002480:	2300      	movs	r3, #0
 8002482:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002484:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002488:	4619      	mov	r1, r3
 800248a:	4807      	ldr	r0, [pc, #28]	; (80024a8 <_ZL12MX_GPIO_Initv+0x210>)
 800248c:	f003 f848 	bl	8005520 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002490:	bf00      	nop
 8002492:	3738      	adds	r7, #56	; 0x38
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40023800 	.word	0x40023800
 800249c:	40020400 	.word	0x40020400
 80024a0:	40021800 	.word	0x40021800
 80024a4:	40020c00 	.word	0x40020c00
 80024a8:	40021000 	.word	0x40021000
 80024ac:	40020800 	.word	0x40020800

080024b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024b4:	b672      	cpsid	i
}
 80024b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024b8:	e7fe      	b.n	80024b8 <Error_Handler+0x8>
 80024ba:	0000      	movs	r0, r0
 80024bc:	0000      	movs	r0, r0
	...

080024c0 <position_pid>:




void position_pid(void)
{
 80024c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80024c4:	af00      	add	r7, sp, #0
	p_kp = 4;
 80024c6:	4b92      	ldr	r3, [pc, #584]	; (8002710 <position_pid+0x250>)
 80024c8:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80024cc:	601a      	str	r2, [r3, #0]
	p_ki = 2;
 80024ce:	4b91      	ldr	r3, [pc, #580]	; (8002714 <position_pid+0x254>)
 80024d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024d4:	601a      	str	r2, [r3, #0]
	p_kd = 0.01;
 80024d6:	4b90      	ldr	r3, [pc, #576]	; (8002718 <position_pid+0x258>)
 80024d8:	4a90      	ldr	r2, [pc, #576]	; (800271c <position_pid+0x25c>)
 80024da:	601a      	str	r2, [r3, #0]

	err = input_position - encoder_count;
 80024dc:	4b90      	ldr	r3, [pc, #576]	; (8002720 <position_pid+0x260>)
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	461a      	mov	r2, r3
 80024e2:	4b90      	ldr	r3, [pc, #576]	; (8002724 <position_pid+0x264>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	461a      	mov	r2, r3
 80024ea:	4b8f      	ldr	r3, [pc, #572]	; (8002728 <position_pid+0x268>)
 80024ec:	601a      	str	r2, [r3, #0]
	P_KP = err * p_kp;
 80024ee:	4b8e      	ldr	r3, [pc, #568]	; (8002728 <position_pid+0x268>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	ee07 3a90 	vmov	s15, r3
 80024f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024fa:	4b85      	ldr	r3, [pc, #532]	; (8002710 <position_pid+0x250>)
 80024fc:	edd3 7a00 	vldr	s15, [r3]
 8002500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002504:	4b89      	ldr	r3, [pc, #548]	; (800272c <position_pid+0x26c>)
 8002506:	edc3 7a00 	vstr	s15, [r3]

	err_sum = err_sum + err * 0.0001;
 800250a:	4b89      	ldr	r3, [pc, #548]	; (8002730 <position_pid+0x270>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f7fe f82a 	bl	8000568 <__aeabi_f2d>
 8002514:	4680      	mov	r8, r0
 8002516:	4689      	mov	r9, r1
 8002518:	4b83      	ldr	r3, [pc, #524]	; (8002728 <position_pid+0x268>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4618      	mov	r0, r3
 800251e:	f7fe f811 	bl	8000544 <__aeabi_i2d>
 8002522:	a379      	add	r3, pc, #484	; (adr r3, 8002708 <position_pid+0x248>)
 8002524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002528:	f7fe f876 	bl	8000618 <__aeabi_dmul>
 800252c:	4602      	mov	r2, r0
 800252e:	460b      	mov	r3, r1
 8002530:	4640      	mov	r0, r8
 8002532:	4649      	mov	r1, r9
 8002534:	f7fd feba 	bl	80002ac <__adddf3>
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	4610      	mov	r0, r2
 800253e:	4619      	mov	r1, r3
 8002540:	f7fe fb62 	bl	8000c08 <__aeabi_d2f>
 8002544:	4603      	mov	r3, r0
 8002546:	4a7a      	ldr	r2, [pc, #488]	; (8002730 <position_pid+0x270>)
 8002548:	6013      	str	r3, [r2, #0]
	if (p_PID == 0)
 800254a:	4b7a      	ldr	r3, [pc, #488]	; (8002734 <position_pid+0x274>)
 800254c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002550:	f04f 0200 	mov.w	r2, #0
 8002554:	f04f 0300 	mov.w	r3, #0
 8002558:	f7fe fac6 	bl	8000ae8 <__aeabi_dcmpeq>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <position_pid+0xaa>
	{
		err_sum = 0;
 8002562:	4b73      	ldr	r3, [pc, #460]	; (8002730 <position_pid+0x270>)
 8002564:	f04f 0200 	mov.w	r2, #0
 8002568:	601a      	str	r2, [r3, #0]
	}
	P_KI = err_sum * p_ki;
 800256a:	4b71      	ldr	r3, [pc, #452]	; (8002730 <position_pid+0x270>)
 800256c:	ed93 7a00 	vldr	s14, [r3]
 8002570:	4b68      	ldr	r3, [pc, #416]	; (8002714 <position_pid+0x254>)
 8002572:	edd3 7a00 	vldr	s15, [r3]
 8002576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800257a:	4b6f      	ldr	r3, [pc, #444]	; (8002738 <position_pid+0x278>)
 800257c:	edc3 7a00 	vstr	s15, [r3]

	err_d = (err - previous_err) / 0.0001;
 8002580:	4b69      	ldr	r3, [pc, #420]	; (8002728 <position_pid+0x268>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	ee07 3a90 	vmov	s15, r3
 8002588:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800258c:	4b6b      	ldr	r3, [pc, #428]	; (800273c <position_pid+0x27c>)
 800258e:	edd3 7a00 	vldr	s15, [r3]
 8002592:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002596:	ee17 0a90 	vmov	r0, s15
 800259a:	f7fd ffe5 	bl	8000568 <__aeabi_f2d>
 800259e:	a35a      	add	r3, pc, #360	; (adr r3, 8002708 <position_pid+0x248>)
 80025a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a4:	f7fe f962 	bl	800086c <__aeabi_ddiv>
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	4964      	ldr	r1, [pc, #400]	; (8002740 <position_pid+0x280>)
 80025ae:	e9c1 2300 	strd	r2, r3, [r1]
	previous_err = err;
 80025b2:	4b5d      	ldr	r3, [pc, #372]	; (8002728 <position_pid+0x268>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	ee07 3a90 	vmov	s15, r3
 80025ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025be:	4b5f      	ldr	r3, [pc, #380]	; (800273c <position_pid+0x27c>)
 80025c0:	edc3 7a00 	vstr	s15, [r3]
	P_KD = err_d * p_kd;
 80025c4:	4b54      	ldr	r3, [pc, #336]	; (8002718 <position_pid+0x258>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7fd ffcd 	bl	8000568 <__aeabi_f2d>
 80025ce:	4b5c      	ldr	r3, [pc, #368]	; (8002740 <position_pid+0x280>)
 80025d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d4:	f7fe f820 	bl	8000618 <__aeabi_dmul>
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	4959      	ldr	r1, [pc, #356]	; (8002744 <position_pid+0x284>)
 80025de:	e9c1 2300 	strd	r2, r3, [r1]

	p_PID = P_KP + P_KI + P_KD;
 80025e2:	4b52      	ldr	r3, [pc, #328]	; (800272c <position_pid+0x26c>)
 80025e4:	ed93 7a00 	vldr	s14, [r3]
 80025e8:	4b53      	ldr	r3, [pc, #332]	; (8002738 <position_pid+0x278>)
 80025ea:	edd3 7a00 	vldr	s15, [r3]
 80025ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025f2:	ee17 0a90 	vmov	r0, s15
 80025f6:	f7fd ffb7 	bl	8000568 <__aeabi_f2d>
 80025fa:	4b52      	ldr	r3, [pc, #328]	; (8002744 <position_pid+0x284>)
 80025fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002600:	f7fd fe54 	bl	80002ac <__adddf3>
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
 8002608:	494a      	ldr	r1, [pc, #296]	; (8002734 <position_pid+0x274>)
 800260a:	e9c1 2300 	strd	r2, r3, [r1]

	if (p_PID >= 400)
 800260e:	4b49      	ldr	r3, [pc, #292]	; (8002734 <position_pid+0x274>)
 8002610:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002614:	f04f 0200 	mov.w	r2, #0
 8002618:	4b4b      	ldr	r3, [pc, #300]	; (8002748 <position_pid+0x288>)
 800261a:	f7fe fa83 	bl	8000b24 <__aeabi_dcmpge>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d006      	beq.n	8002632 <position_pid+0x172>
	{
		p_PID = 400;
 8002624:	4943      	ldr	r1, [pc, #268]	; (8002734 <position_pid+0x274>)
 8002626:	f04f 0200 	mov.w	r2, #0
 800262a:	4b47      	ldr	r3, [pc, #284]	; (8002748 <position_pid+0x288>)
 800262c:	e9c1 2300 	strd	r2, r3, [r1]
 8002630:	e010      	b.n	8002654 <position_pid+0x194>
	}
	else if (p_PID <= -400)
 8002632:	4b40      	ldr	r3, [pc, #256]	; (8002734 <position_pid+0x274>)
 8002634:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002638:	f04f 0200 	mov.w	r2, #0
 800263c:	4b43      	ldr	r3, [pc, #268]	; (800274c <position_pid+0x28c>)
 800263e:	f7fe fa67 	bl	8000b10 <__aeabi_dcmple>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d005      	beq.n	8002654 <position_pid+0x194>
	{
		p_PID = -400;
 8002648:	493a      	ldr	r1, [pc, #232]	; (8002734 <position_pid+0x274>)
 800264a:	f04f 0200 	mov.w	r2, #0
 800264e:	4b3f      	ldr	r3, [pc, #252]	; (800274c <position_pid+0x28c>)
 8002650:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if (p_PID > 0)
 8002654:	4b37      	ldr	r3, [pc, #220]	; (8002734 <position_pid+0x274>)
 8002656:	e9d3 0100 	ldrd	r0, r1, [r3]
 800265a:	f04f 0200 	mov.w	r2, #0
 800265e:	f04f 0300 	mov.w	r3, #0
 8002662:	f7fe fa69 	bl	8000b38 <__aeabi_dcmpgt>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d010      	beq.n	800268e <position_pid+0x1ce>
	{
		GPIOE->ODR &= ~1 << 0; // go
 800266c:	4b38      	ldr	r3, [pc, #224]	; (8002750 <position_pid+0x290>)
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	4a37      	ldr	r2, [pc, #220]	; (8002750 <position_pid+0x290>)
 8002672:	f023 0301 	bic.w	r3, r3, #1
 8002676:	6153      	str	r3, [r2, #20]
		TIM3->CCR1 = p_PID;
 8002678:	4b2e      	ldr	r3, [pc, #184]	; (8002734 <position_pid+0x274>)
 800267a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267e:	4c35      	ldr	r4, [pc, #212]	; (8002754 <position_pid+0x294>)
 8002680:	4610      	mov	r0, r2
 8002682:	4619      	mov	r1, r3
 8002684:	f7fe faa0 	bl	8000bc8 <__aeabi_d2uiz>
 8002688:	4603      	mov	r3, r0
 800268a:	6363      	str	r3, [r4, #52]	; 0x34
	}




}
 800268c:	e036      	b.n	80026fc <position_pid+0x23c>
	else if (p_PID < 0)
 800268e:	4b29      	ldr	r3, [pc, #164]	; (8002734 <position_pid+0x274>)
 8002690:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002694:	f04f 0200 	mov.w	r2, #0
 8002698:	f04f 0300 	mov.w	r3, #0
 800269c:	f7fe fa2e 	bl	8000afc <__aeabi_dcmplt>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d019      	beq.n	80026da <position_pid+0x21a>
		GPIOE->ODR |= 1 << 0; // back
 80026a6:	4b2a      	ldr	r3, [pc, #168]	; (8002750 <position_pid+0x290>)
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	4a29      	ldr	r2, [pc, #164]	; (8002750 <position_pid+0x290>)
 80026ac:	f043 0301 	orr.w	r3, r3, #1
 80026b0:	6153      	str	r3, [r2, #20]
		p_PID = -p_PID;
 80026b2:	4b20      	ldr	r3, [pc, #128]	; (8002734 <position_pid+0x274>)
 80026b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b8:	4614      	mov	r4, r2
 80026ba:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80026be:	4b1d      	ldr	r3, [pc, #116]	; (8002734 <position_pid+0x274>)
 80026c0:	e9c3 4500 	strd	r4, r5, [r3]
		TIM3->CCR1 = p_PID;
 80026c4:	4b1b      	ldr	r3, [pc, #108]	; (8002734 <position_pid+0x274>)
 80026c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ca:	4c22      	ldr	r4, [pc, #136]	; (8002754 <position_pid+0x294>)
 80026cc:	4610      	mov	r0, r2
 80026ce:	4619      	mov	r1, r3
 80026d0:	f7fe fa7a 	bl	8000bc8 <__aeabi_d2uiz>
 80026d4:	4603      	mov	r3, r0
 80026d6:	6363      	str	r3, [r4, #52]	; 0x34
}
 80026d8:	e010      	b.n	80026fc <position_pid+0x23c>
		p_PID = 0;
 80026da:	4916      	ldr	r1, [pc, #88]	; (8002734 <position_pid+0x274>)
 80026dc:	f04f 0200 	mov.w	r2, #0
 80026e0:	f04f 0300 	mov.w	r3, #0
 80026e4:	e9c1 2300 	strd	r2, r3, [r1]
		TIM3->CCR1 = p_PID;
 80026e8:	4b12      	ldr	r3, [pc, #72]	; (8002734 <position_pid+0x274>)
 80026ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ee:	4c19      	ldr	r4, [pc, #100]	; (8002754 <position_pid+0x294>)
 80026f0:	4610      	mov	r0, r2
 80026f2:	4619      	mov	r1, r3
 80026f4:	f7fe fa68 	bl	8000bc8 <__aeabi_d2uiz>
 80026f8:	4603      	mov	r3, r0
 80026fa:	6363      	str	r3, [r4, #52]	; 0x34
}
 80026fc:	bf00      	nop
 80026fe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002702:	bf00      	nop
 8002704:	f3af 8000 	nop.w
 8002708:	eb1c432d 	.word	0xeb1c432d
 800270c:	3f1a36e2 	.word	0x3f1a36e2
 8002710:	20000e28 	.word	0x20000e28
 8002714:	20000e2c 	.word	0x20000e2c
 8002718:	20000e30 	.word	0x20000e30
 800271c:	3c23d70a 	.word	0x3c23d70a
 8002720:	20000e12 	.word	0x20000e12
 8002724:	20000000 	.word	0x20000000
 8002728:	20000e14 	.word	0x20000e14
 800272c:	20000e34 	.word	0x20000e34
 8002730:	20000e18 	.word	0x20000e18
 8002734:	20000e20 	.word	0x20000e20
 8002738:	20000e38 	.word	0x20000e38
 800273c:	20000e50 	.word	0x20000e50
 8002740:	20000e48 	.word	0x20000e48
 8002744:	20000e40 	.word	0x20000e40
 8002748:	40790000 	.word	0x40790000
 800274c:	c0790000 	.word	0xc0790000
 8002750:	40021000 	.word	0x40021000
 8002754:	40000400 	.word	0x40000400

08002758 <distance_sencor>:
uint16_t j=0;

extern TIM_HandleTypeDef htim1;

void distance_sencor (void)
{
 8002758:	b598      	push	{r3, r4, r7, lr}
 800275a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 800275c:	2201      	movs	r2, #1
 800275e:	2180      	movs	r1, #128	; 0x80
 8002760:	4849      	ldr	r0, [pc, #292]	; (8002888 <distance_sencor+0x130>)
 8002762:	f003 f8a1 	bl	80058a8 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002766:	4b49      	ldr	r3, [pc, #292]	; (800288c <distance_sencor+0x134>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2200      	movs	r2, #0
 800276c:	625a      	str	r2, [r3, #36]	; 0x24
    while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 800276e:	bf00      	nop
 8002770:	4b46      	ldr	r3, [pc, #280]	; (800288c <distance_sencor+0x134>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002776:	2b09      	cmp	r3, #9
 8002778:	d9fa      	bls.n	8002770 <distance_sencor+0x18>
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 800277a:	2200      	movs	r2, #0
 800277c:	2180      	movs	r1, #128	; 0x80
 800277e:	4842      	ldr	r0, [pc, #264]	; (8002888 <distance_sencor+0x130>)
 8002780:	f003 f892 	bl	80058a8 <HAL_GPIO_WritePin>

    pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8002784:	f001 f924 	bl	80039d0 <HAL_GetTick>
 8002788:	4603      	mov	r3, r0
 800278a:	4a41      	ldr	r2, [pc, #260]	; (8002890 <distance_sencor+0x138>)
 800278c:	6013      	str	r3, [r2, #0]
    // wait for the echo pin to go high
    while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 800278e:	bf00      	nop
 8002790:	2140      	movs	r1, #64	; 0x40
 8002792:	483d      	ldr	r0, [pc, #244]	; (8002888 <distance_sencor+0x130>)
 8002794:	f003 f870 	bl	8005878 <HAL_GPIO_ReadPin>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d108      	bne.n	80027b0 <distance_sencor+0x58>
 800279e:	4b3c      	ldr	r3, [pc, #240]	; (8002890 <distance_sencor+0x138>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f103 040a 	add.w	r4, r3, #10
 80027a6:	f001 f913 	bl	80039d0 <HAL_GetTick>
 80027aa:	4603      	mov	r3, r0
 80027ac:	429c      	cmp	r4, r3
 80027ae:	d8ef      	bhi.n	8002790 <distance_sencor+0x38>
    Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 80027b0:	4b36      	ldr	r3, [pc, #216]	; (800288c <distance_sencor+0x134>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b6:	4a37      	ldr	r2, [pc, #220]	; (8002894 <distance_sencor+0x13c>)
 80027b8:	6013      	str	r3, [r2, #0]

    pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 80027ba:	f001 f909 	bl	80039d0 <HAL_GetTick>
 80027be:	4603      	mov	r3, r0
 80027c0:	4a33      	ldr	r2, [pc, #204]	; (8002890 <distance_sencor+0x138>)
 80027c2:	6013      	str	r3, [r2, #0]
    // wait for the echo pin to go low
    while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 80027c4:	bf00      	nop
 80027c6:	2140      	movs	r1, #64	; 0x40
 80027c8:	482f      	ldr	r0, [pc, #188]	; (8002888 <distance_sencor+0x130>)
 80027ca:	f003 f855 	bl	8005878 <HAL_GPIO_ReadPin>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d008      	beq.n	80027e6 <distance_sencor+0x8e>
 80027d4:	4b2e      	ldr	r3, [pc, #184]	; (8002890 <distance_sencor+0x138>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f103 0432 	add.w	r4, r3, #50	; 0x32
 80027dc:	f001 f8f8 	bl	80039d0 <HAL_GetTick>
 80027e0:	4603      	mov	r3, r0
 80027e2:	429c      	cmp	r4, r3
 80027e4:	d8ef      	bhi.n	80027c6 <distance_sencor+0x6e>
    Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 80027e6:	4b29      	ldr	r3, [pc, #164]	; (800288c <distance_sencor+0x134>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ec:	4a2a      	ldr	r2, [pc, #168]	; (8002898 <distance_sencor+0x140>)
 80027ee:	6013      	str	r3, [r2, #0]

    Distance = (Value2-Value1)* 0.017/2;
 80027f0:	4b29      	ldr	r3, [pc, #164]	; (8002898 <distance_sencor+0x140>)
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	4b27      	ldr	r3, [pc, #156]	; (8002894 <distance_sencor+0x13c>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7fd fe92 	bl	8000524 <__aeabi_ui2d>
 8002800:	a31f      	add	r3, pc, #124	; (adr r3, 8002880 <distance_sencor+0x128>)
 8002802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002806:	f7fd ff07 	bl	8000618 <__aeabi_dmul>
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	4610      	mov	r0, r2
 8002810:	4619      	mov	r1, r3
 8002812:	f04f 0200 	mov.w	r2, #0
 8002816:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800281a:	f7fe f827 	bl	800086c <__aeabi_ddiv>
 800281e:	4602      	mov	r2, r0
 8002820:	460b      	mov	r3, r1
 8002822:	4610      	mov	r0, r2
 8002824:	4619      	mov	r1, r3
 8002826:	f7fe f9ef 	bl	8000c08 <__aeabi_d2f>
 800282a:	4603      	mov	r3, r0
 800282c:	4a1b      	ldr	r2, [pc, #108]	; (800289c <distance_sencor+0x144>)
 800282e:	6013      	str	r3, [r2, #0]

    Distance_Sum = Distance + Distance_Sum;
 8002830:	4b1a      	ldr	r3, [pc, #104]	; (800289c <distance_sencor+0x144>)
 8002832:	ed93 7a00 	vldr	s14, [r3]
 8002836:	4b1a      	ldr	r3, [pc, #104]	; (80028a0 <distance_sencor+0x148>)
 8002838:	edd3 7a00 	vldr	s15, [r3]
 800283c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002840:	4b17      	ldr	r3, [pc, #92]	; (80028a0 <distance_sencor+0x148>)
 8002842:	edc3 7a00 	vstr	s15, [r3]
    	  j++;
 8002846:	4b17      	ldr	r3, [pc, #92]	; (80028a4 <distance_sencor+0x14c>)
 8002848:	881b      	ldrh	r3, [r3, #0]
 800284a:	3301      	adds	r3, #1
 800284c:	b29a      	uxth	r2, r3
 800284e:	4b15      	ldr	r3, [pc, #84]	; (80028a4 <distance_sencor+0x14c>)
 8002850:	801a      	strh	r2, [r3, #0]
    	 	 if(j==200)
 8002852:	4b14      	ldr	r3, [pc, #80]	; (80028a4 <distance_sencor+0x14c>)
 8002854:	881b      	ldrh	r3, [r3, #0]
 8002856:	2bc8      	cmp	r3, #200	; 0xc8
 8002858:	d110      	bne.n	800287c <distance_sencor+0x124>
    	 	  {
    	 		Distance_Avg = Distance_Sum/201;
 800285a:	4b11      	ldr	r3, [pc, #68]	; (80028a0 <distance_sencor+0x148>)
 800285c:	ed93 7a00 	vldr	s14, [r3]
 8002860:	eddf 6a11 	vldr	s13, [pc, #68]	; 80028a8 <distance_sencor+0x150>
 8002864:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002868:	4b10      	ldr	r3, [pc, #64]	; (80028ac <distance_sencor+0x154>)
 800286a:	edc3 7a00 	vstr	s15, [r3]

    	 			  j=0;
 800286e:	4b0d      	ldr	r3, [pc, #52]	; (80028a4 <distance_sencor+0x14c>)
 8002870:	2200      	movs	r2, #0
 8002872:	801a      	strh	r2, [r3, #0]
    	 			 Distance_Sum=0;
 8002874:	4b0a      	ldr	r3, [pc, #40]	; (80028a0 <distance_sencor+0x148>)
 8002876:	f04f 0200 	mov.w	r2, #0
 800287a:	601a      	str	r2, [r3, #0]

    //     printf("Distance = %f \r\n",Distance);
	//      sprintf((char *)buffer, "%d \r\n",Distance);
		 //     HAL_UART_Transmit(&huart3, buffer, strlen((char *)buffer), 100);

}
 800287c:	bf00      	nop
 800287e:	bd98      	pop	{r3, r4, r7, pc}
 8002880:	b020c49c 	.word	0xb020c49c
 8002884:	3f916872 	.word	0x3f916872
 8002888:	40020c00 	.word	0x40020c00
 800288c:	20000688 	.word	0x20000688
 8002890:	20000e54 	.word	0x20000e54
 8002894:	20000e58 	.word	0x20000e58
 8002898:	20000e5c 	.word	0x20000e5c
 800289c:	20000e60 	.word	0x20000e60
 80028a0:	20000e64 	.word	0x20000e64
 80028a4:	20000e6c 	.word	0x20000e6c
 80028a8:	43490000 	.word	0x43490000
 80028ac:	20000e68 	.word	0x20000e68

080028b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	607b      	str	r3, [r7, #4]
 80028ba:	4b10      	ldr	r3, [pc, #64]	; (80028fc <HAL_MspInit+0x4c>)
 80028bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028be:	4a0f      	ldr	r2, [pc, #60]	; (80028fc <HAL_MspInit+0x4c>)
 80028c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028c4:	6453      	str	r3, [r2, #68]	; 0x44
 80028c6:	4b0d      	ldr	r3, [pc, #52]	; (80028fc <HAL_MspInit+0x4c>)
 80028c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ce:	607b      	str	r3, [r7, #4]
 80028d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	603b      	str	r3, [r7, #0]
 80028d6:	4b09      	ldr	r3, [pc, #36]	; (80028fc <HAL_MspInit+0x4c>)
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	4a08      	ldr	r2, [pc, #32]	; (80028fc <HAL_MspInit+0x4c>)
 80028dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028e0:	6413      	str	r3, [r2, #64]	; 0x40
 80028e2:	4b06      	ldr	r3, [pc, #24]	; (80028fc <HAL_MspInit+0x4c>)
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ea:	603b      	str	r3, [r7, #0]
 80028ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	40023800 	.word	0x40023800

08002900 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b08a      	sub	sp, #40	; 0x28
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002908:	f107 0314 	add.w	r3, r7, #20
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	605a      	str	r2, [r3, #4]
 8002912:	609a      	str	r2, [r3, #8]
 8002914:	60da      	str	r2, [r3, #12]
 8002916:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a40      	ldr	r2, [pc, #256]	; (8002a20 <HAL_ADC_MspInit+0x120>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d17a      	bne.n	8002a18 <HAL_ADC_MspInit+0x118>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	613b      	str	r3, [r7, #16]
 8002926:	4b3f      	ldr	r3, [pc, #252]	; (8002a24 <HAL_ADC_MspInit+0x124>)
 8002928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292a:	4a3e      	ldr	r2, [pc, #248]	; (8002a24 <HAL_ADC_MspInit+0x124>)
 800292c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002930:	6453      	str	r3, [r2, #68]	; 0x44
 8002932:	4b3c      	ldr	r3, [pc, #240]	; (8002a24 <HAL_ADC_MspInit+0x124>)
 8002934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002936:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800293a:	613b      	str	r3, [r7, #16]
 800293c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800293e:	2300      	movs	r3, #0
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	4b38      	ldr	r3, [pc, #224]	; (8002a24 <HAL_ADC_MspInit+0x124>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002946:	4a37      	ldr	r2, [pc, #220]	; (8002a24 <HAL_ADC_MspInit+0x124>)
 8002948:	f043 0320 	orr.w	r3, r3, #32
 800294c:	6313      	str	r3, [r2, #48]	; 0x30
 800294e:	4b35      	ldr	r3, [pc, #212]	; (8002a24 <HAL_ADC_MspInit+0x124>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	f003 0320 	and.w	r3, r3, #32
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	60bb      	str	r3, [r7, #8]
 800295e:	4b31      	ldr	r3, [pc, #196]	; (8002a24 <HAL_ADC_MspInit+0x124>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	4a30      	ldr	r2, [pc, #192]	; (8002a24 <HAL_ADC_MspInit+0x124>)
 8002964:	f043 0304 	orr.w	r3, r3, #4
 8002968:	6313      	str	r3, [r2, #48]	; 0x30
 800296a:	4b2e      	ldr	r3, [pc, #184]	; (8002a24 <HAL_ADC_MspInit+0x124>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	f003 0304 	and.w	r3, r3, #4
 8002972:	60bb      	str	r3, [r7, #8]
 8002974:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PF4     ------> ADC3_IN14
    PC2     ------> ADC3_IN12
    PC3     ------> ADC3_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002976:	2310      	movs	r3, #16
 8002978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800297a:	2303      	movs	r3, #3
 800297c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297e:	2300      	movs	r3, #0
 8002980:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002982:	f107 0314 	add.w	r3, r7, #20
 8002986:	4619      	mov	r1, r3
 8002988:	4827      	ldr	r0, [pc, #156]	; (8002a28 <HAL_ADC_MspInit+0x128>)
 800298a:	f002 fdc9 	bl	8005520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800298e:	230c      	movs	r3, #12
 8002990:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002992:	2303      	movs	r3, #3
 8002994:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002996:	2300      	movs	r3, #0
 8002998:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800299a:	f107 0314 	add.w	r3, r7, #20
 800299e:	4619      	mov	r1, r3
 80029a0:	4822      	ldr	r0, [pc, #136]	; (8002a2c <HAL_ADC_MspInit+0x12c>)
 80029a2:	f002 fdbd 	bl	8005520 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream1;
 80029a6:	4b22      	ldr	r3, [pc, #136]	; (8002a30 <HAL_ADC_MspInit+0x130>)
 80029a8:	4a22      	ldr	r2, [pc, #136]	; (8002a34 <HAL_ADC_MspInit+0x134>)
 80029aa:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 80029ac:	4b20      	ldr	r3, [pc, #128]	; (8002a30 <HAL_ADC_MspInit+0x130>)
 80029ae:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80029b2:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029b4:	4b1e      	ldr	r3, [pc, #120]	; (8002a30 <HAL_ADC_MspInit+0x130>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80029ba:	4b1d      	ldr	r3, [pc, #116]	; (8002a30 <HAL_ADC_MspInit+0x130>)
 80029bc:	2200      	movs	r2, #0
 80029be:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80029c0:	4b1b      	ldr	r3, [pc, #108]	; (8002a30 <HAL_ADC_MspInit+0x130>)
 80029c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029c6:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80029c8:	4b19      	ldr	r3, [pc, #100]	; (8002a30 <HAL_ADC_MspInit+0x130>)
 80029ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029ce:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80029d0:	4b17      	ldr	r3, [pc, #92]	; (8002a30 <HAL_ADC_MspInit+0x130>)
 80029d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029d6:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80029d8:	4b15      	ldr	r3, [pc, #84]	; (8002a30 <HAL_ADC_MspInit+0x130>)
 80029da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029de:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80029e0:	4b13      	ldr	r3, [pc, #76]	; (8002a30 <HAL_ADC_MspInit+0x130>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029e6:	4b12      	ldr	r3, [pc, #72]	; (8002a30 <HAL_ADC_MspInit+0x130>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80029ec:	4810      	ldr	r0, [pc, #64]	; (8002a30 <HAL_ADC_MspInit+0x130>)
 80029ee:	f001 fe6d 	bl	80046cc <HAL_DMA_Init>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 80029f8:	f7ff fd5a 	bl	80024b0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a0c      	ldr	r2, [pc, #48]	; (8002a30 <HAL_ADC_MspInit+0x130>)
 8002a00:	639a      	str	r2, [r3, #56]	; 0x38
 8002a02:	4a0b      	ldr	r2, [pc, #44]	; (8002a30 <HAL_ADC_MspInit+0x130>)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002a08:	2200      	movs	r2, #0
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	2012      	movs	r0, #18
 8002a0e:	f001 fe26 	bl	800465e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002a12:	2012      	movs	r0, #18
 8002a14:	f001 fe3f 	bl	8004696 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002a18:	bf00      	nop
 8002a1a:	3728      	adds	r7, #40	; 0x28
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40012200 	.word	0x40012200
 8002a24:	40023800 	.word	0x40023800
 8002a28:	40021400 	.word	0x40021400
 8002a2c:	40020800 	.word	0x40020800
 8002a30:	20000578 	.word	0x20000578
 8002a34:	40026428 	.word	0x40026428

08002a38 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b08e      	sub	sp, #56	; 0x38
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	605a      	str	r2, [r3, #4]
 8002a4a:	609a      	str	r2, [r3, #8]
 8002a4c:	60da      	str	r2, [r3, #12]
 8002a4e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a55      	ldr	r2, [pc, #340]	; (8002bac <HAL_ETH_MspInit+0x174>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	f040 80a4 	bne.w	8002ba4 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	623b      	str	r3, [r7, #32]
 8002a60:	4b53      	ldr	r3, [pc, #332]	; (8002bb0 <HAL_ETH_MspInit+0x178>)
 8002a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a64:	4a52      	ldr	r2, [pc, #328]	; (8002bb0 <HAL_ETH_MspInit+0x178>)
 8002a66:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a6a:	6313      	str	r3, [r2, #48]	; 0x30
 8002a6c:	4b50      	ldr	r3, [pc, #320]	; (8002bb0 <HAL_ETH_MspInit+0x178>)
 8002a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a74:	623b      	str	r3, [r7, #32]
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	2300      	movs	r3, #0
 8002a7a:	61fb      	str	r3, [r7, #28]
 8002a7c:	4b4c      	ldr	r3, [pc, #304]	; (8002bb0 <HAL_ETH_MspInit+0x178>)
 8002a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a80:	4a4b      	ldr	r2, [pc, #300]	; (8002bb0 <HAL_ETH_MspInit+0x178>)
 8002a82:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a86:	6313      	str	r3, [r2, #48]	; 0x30
 8002a88:	4b49      	ldr	r3, [pc, #292]	; (8002bb0 <HAL_ETH_MspInit+0x178>)
 8002a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a90:	61fb      	str	r3, [r7, #28]
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	2300      	movs	r3, #0
 8002a96:	61bb      	str	r3, [r7, #24]
 8002a98:	4b45      	ldr	r3, [pc, #276]	; (8002bb0 <HAL_ETH_MspInit+0x178>)
 8002a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9c:	4a44      	ldr	r2, [pc, #272]	; (8002bb0 <HAL_ETH_MspInit+0x178>)
 8002a9e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002aa2:	6313      	str	r3, [r2, #48]	; 0x30
 8002aa4:	4b42      	ldr	r3, [pc, #264]	; (8002bb0 <HAL_ETH_MspInit+0x178>)
 8002aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002aac:	61bb      	str	r3, [r7, #24]
 8002aae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	617b      	str	r3, [r7, #20]
 8002ab4:	4b3e      	ldr	r3, [pc, #248]	; (8002bb0 <HAL_ETH_MspInit+0x178>)
 8002ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab8:	4a3d      	ldr	r2, [pc, #244]	; (8002bb0 <HAL_ETH_MspInit+0x178>)
 8002aba:	f043 0304 	orr.w	r3, r3, #4
 8002abe:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac0:	4b3b      	ldr	r3, [pc, #236]	; (8002bb0 <HAL_ETH_MspInit+0x178>)
 8002ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	617b      	str	r3, [r7, #20]
 8002aca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002acc:	2300      	movs	r3, #0
 8002ace:	613b      	str	r3, [r7, #16]
 8002ad0:	4b37      	ldr	r3, [pc, #220]	; (8002bb0 <HAL_ETH_MspInit+0x178>)
 8002ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad4:	4a36      	ldr	r2, [pc, #216]	; (8002bb0 <HAL_ETH_MspInit+0x178>)
 8002ad6:	f043 0301 	orr.w	r3, r3, #1
 8002ada:	6313      	str	r3, [r2, #48]	; 0x30
 8002adc:	4b34      	ldr	r3, [pc, #208]	; (8002bb0 <HAL_ETH_MspInit+0x178>)
 8002ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	613b      	str	r3, [r7, #16]
 8002ae6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ae8:	2300      	movs	r3, #0
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	4b30      	ldr	r3, [pc, #192]	; (8002bb0 <HAL_ETH_MspInit+0x178>)
 8002aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af0:	4a2f      	ldr	r2, [pc, #188]	; (8002bb0 <HAL_ETH_MspInit+0x178>)
 8002af2:	f043 0302 	orr.w	r3, r3, #2
 8002af6:	6313      	str	r3, [r2, #48]	; 0x30
 8002af8:	4b2d      	ldr	r3, [pc, #180]	; (8002bb0 <HAL_ETH_MspInit+0x178>)
 8002afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	60fb      	str	r3, [r7, #12]
 8002b02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b04:	2300      	movs	r3, #0
 8002b06:	60bb      	str	r3, [r7, #8]
 8002b08:	4b29      	ldr	r3, [pc, #164]	; (8002bb0 <HAL_ETH_MspInit+0x178>)
 8002b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0c:	4a28      	ldr	r2, [pc, #160]	; (8002bb0 <HAL_ETH_MspInit+0x178>)
 8002b0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b12:	6313      	str	r3, [r2, #48]	; 0x30
 8002b14:	4b26      	ldr	r3, [pc, #152]	; (8002bb0 <HAL_ETH_MspInit+0x178>)
 8002b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1c:	60bb      	str	r3, [r7, #8]
 8002b1e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002b20:	2332      	movs	r3, #50	; 0x32
 8002b22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b24:	2302      	movs	r3, #2
 8002b26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002b30:	230b      	movs	r3, #11
 8002b32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b38:	4619      	mov	r1, r3
 8002b3a:	481e      	ldr	r0, [pc, #120]	; (8002bb4 <HAL_ETH_MspInit+0x17c>)
 8002b3c:	f002 fcf0 	bl	8005520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002b40:	2386      	movs	r3, #134	; 0x86
 8002b42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b44:	2302      	movs	r3, #2
 8002b46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002b50:	230b      	movs	r3, #11
 8002b52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4817      	ldr	r0, [pc, #92]	; (8002bb8 <HAL_ETH_MspInit+0x180>)
 8002b5c:	f002 fce0 	bl	8005520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002b60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b66:	2302      	movs	r3, #2
 8002b68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002b72:	230b      	movs	r3, #11
 8002b74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002b76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	480f      	ldr	r0, [pc, #60]	; (8002bbc <HAL_ETH_MspInit+0x184>)
 8002b7e:	f002 fccf 	bl	8005520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002b82:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002b86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b88:	2302      	movs	r3, #2
 8002b8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b90:	2303      	movs	r3, #3
 8002b92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002b94:	230b      	movs	r3, #11
 8002b96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4808      	ldr	r0, [pc, #32]	; (8002bc0 <HAL_ETH_MspInit+0x188>)
 8002ba0:	f002 fcbe 	bl	8005520 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002ba4:	bf00      	nop
 8002ba6:	3738      	adds	r7, #56	; 0x38
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40028000 	.word	0x40028000
 8002bb0:	40023800 	.word	0x40023800
 8002bb4:	40020800 	.word	0x40020800
 8002bb8:	40020000 	.word	0x40020000
 8002bbc:	40020400 	.word	0x40020400
 8002bc0:	40021800 	.word	0x40021800

08002bc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b088      	sub	sp, #32
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a54      	ldr	r2, [pc, #336]	; (8002d24 <HAL_TIM_Base_MspInit+0x160>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d10e      	bne.n	8002bf4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61fb      	str	r3, [r7, #28]
 8002bda:	4b53      	ldr	r3, [pc, #332]	; (8002d28 <HAL_TIM_Base_MspInit+0x164>)
 8002bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bde:	4a52      	ldr	r2, [pc, #328]	; (8002d28 <HAL_TIM_Base_MspInit+0x164>)
 8002be0:	f043 0301 	orr.w	r3, r3, #1
 8002be4:	6453      	str	r3, [r2, #68]	; 0x44
 8002be6:	4b50      	ldr	r3, [pc, #320]	; (8002d28 <HAL_TIM_Base_MspInit+0x164>)
 8002be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	61fb      	str	r3, [r7, #28]
 8002bf0:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002bf2:	e092      	b.n	8002d1a <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM3)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a4c      	ldr	r2, [pc, #304]	; (8002d2c <HAL_TIM_Base_MspInit+0x168>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d116      	bne.n	8002c2c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002bfe:	2300      	movs	r3, #0
 8002c00:	61bb      	str	r3, [r7, #24]
 8002c02:	4b49      	ldr	r3, [pc, #292]	; (8002d28 <HAL_TIM_Base_MspInit+0x164>)
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	4a48      	ldr	r2, [pc, #288]	; (8002d28 <HAL_TIM_Base_MspInit+0x164>)
 8002c08:	f043 0302 	orr.w	r3, r3, #2
 8002c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c0e:	4b46      	ldr	r3, [pc, #280]	; (8002d28 <HAL_TIM_Base_MspInit+0x164>)
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	61bb      	str	r3, [r7, #24]
 8002c18:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	201d      	movs	r0, #29
 8002c20:	f001 fd1d 	bl	800465e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002c24:	201d      	movs	r0, #29
 8002c26:	f001 fd36 	bl	8004696 <HAL_NVIC_EnableIRQ>
}
 8002c2a:	e076      	b.n	8002d1a <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM6)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a3f      	ldr	r2, [pc, #252]	; (8002d30 <HAL_TIM_Base_MspInit+0x16c>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d116      	bne.n	8002c64 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002c36:	2300      	movs	r3, #0
 8002c38:	617b      	str	r3, [r7, #20]
 8002c3a:	4b3b      	ldr	r3, [pc, #236]	; (8002d28 <HAL_TIM_Base_MspInit+0x164>)
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	4a3a      	ldr	r2, [pc, #232]	; (8002d28 <HAL_TIM_Base_MspInit+0x164>)
 8002c40:	f043 0310 	orr.w	r3, r3, #16
 8002c44:	6413      	str	r3, [r2, #64]	; 0x40
 8002c46:	4b38      	ldr	r3, [pc, #224]	; (8002d28 <HAL_TIM_Base_MspInit+0x164>)
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	f003 0310 	and.w	r3, r3, #16
 8002c4e:	617b      	str	r3, [r7, #20]
 8002c50:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8002c52:	2200      	movs	r2, #0
 8002c54:	2106      	movs	r1, #6
 8002c56:	2036      	movs	r0, #54	; 0x36
 8002c58:	f001 fd01 	bl	800465e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002c5c:	2036      	movs	r0, #54	; 0x36
 8002c5e:	f001 fd1a 	bl	8004696 <HAL_NVIC_EnableIRQ>
}
 8002c62:	e05a      	b.n	8002d1a <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM8)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a32      	ldr	r2, [pc, #200]	; (8002d34 <HAL_TIM_Base_MspInit+0x170>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d11e      	bne.n	8002cac <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002c6e:	2300      	movs	r3, #0
 8002c70:	613b      	str	r3, [r7, #16]
 8002c72:	4b2d      	ldr	r3, [pc, #180]	; (8002d28 <HAL_TIM_Base_MspInit+0x164>)
 8002c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c76:	4a2c      	ldr	r2, [pc, #176]	; (8002d28 <HAL_TIM_Base_MspInit+0x164>)
 8002c78:	f043 0302 	orr.w	r3, r3, #2
 8002c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c7e:	4b2a      	ldr	r3, [pc, #168]	; (8002d28 <HAL_TIM_Base_MspInit+0x164>)
 8002c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	613b      	str	r3, [r7, #16]
 8002c88:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	202c      	movs	r0, #44	; 0x2c
 8002c90:	f001 fce5 	bl	800465e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002c94:	202c      	movs	r0, #44	; 0x2c
 8002c96:	f001 fcfe 	bl	8004696 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	202d      	movs	r0, #45	; 0x2d
 8002ca0:	f001 fcdd 	bl	800465e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002ca4:	202d      	movs	r0, #45	; 0x2d
 8002ca6:	f001 fcf6 	bl	8004696 <HAL_NVIC_EnableIRQ>
}
 8002caa:	e036      	b.n	8002d1a <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM13)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a21      	ldr	r2, [pc, #132]	; (8002d38 <HAL_TIM_Base_MspInit+0x174>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d116      	bne.n	8002ce4 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60fb      	str	r3, [r7, #12]
 8002cba:	4b1b      	ldr	r3, [pc, #108]	; (8002d28 <HAL_TIM_Base_MspInit+0x164>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	4a1a      	ldr	r2, [pc, #104]	; (8002d28 <HAL_TIM_Base_MspInit+0x164>)
 8002cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cc6:	4b18      	ldr	r3, [pc, #96]	; (8002d28 <HAL_TIM_Base_MspInit+0x164>)
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	202c      	movs	r0, #44	; 0x2c
 8002cd8:	f001 fcc1 	bl	800465e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002cdc:	202c      	movs	r0, #44	; 0x2c
 8002cde:	f001 fcda 	bl	8004696 <HAL_NVIC_EnableIRQ>
}
 8002ce2:	e01a      	b.n	8002d1a <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM14)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a14      	ldr	r2, [pc, #80]	; (8002d3c <HAL_TIM_Base_MspInit+0x178>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d115      	bne.n	8002d1a <HAL_TIM_Base_MspInit+0x156>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60bb      	str	r3, [r7, #8]
 8002cf2:	4b0d      	ldr	r3, [pc, #52]	; (8002d28 <HAL_TIM_Base_MspInit+0x164>)
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	4a0c      	ldr	r2, [pc, #48]	; (8002d28 <HAL_TIM_Base_MspInit+0x164>)
 8002cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8002cfe:	4b0a      	ldr	r3, [pc, #40]	; (8002d28 <HAL_TIM_Base_MspInit+0x164>)
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d06:	60bb      	str	r3, [r7, #8]
 8002d08:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	202d      	movs	r0, #45	; 0x2d
 8002d10:	f001 fca5 	bl	800465e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002d14:	202d      	movs	r0, #45	; 0x2d
 8002d16:	f001 fcbe 	bl	8004696 <HAL_NVIC_EnableIRQ>
}
 8002d1a:	bf00      	nop
 8002d1c:	3720      	adds	r7, #32
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	40010000 	.word	0x40010000
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	40000400 	.word	0x40000400
 8002d30:	40001000 	.word	0x40001000
 8002d34:	40010400 	.word	0x40010400
 8002d38:	40001c00 	.word	0x40001c00
 8002d3c:	40002000 	.word	0x40002000

08002d40 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b08c      	sub	sp, #48	; 0x30
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d48:	f107 031c 	add.w	r3, r7, #28
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	605a      	str	r2, [r3, #4]
 8002d52:	609a      	str	r2, [r3, #8]
 8002d54:	60da      	str	r2, [r3, #12]
 8002d56:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d60:	d14b      	bne.n	8002dfa <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d62:	2300      	movs	r3, #0
 8002d64:	61bb      	str	r3, [r7, #24]
 8002d66:	4b58      	ldr	r3, [pc, #352]	; (8002ec8 <HAL_TIM_Encoder_MspInit+0x188>)
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	4a57      	ldr	r2, [pc, #348]	; (8002ec8 <HAL_TIM_Encoder_MspInit+0x188>)
 8002d6c:	f043 0301 	orr.w	r3, r3, #1
 8002d70:	6413      	str	r3, [r2, #64]	; 0x40
 8002d72:	4b55      	ldr	r3, [pc, #340]	; (8002ec8 <HAL_TIM_Encoder_MspInit+0x188>)
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	61bb      	str	r3, [r7, #24]
 8002d7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d7e:	2300      	movs	r3, #0
 8002d80:	617b      	str	r3, [r7, #20]
 8002d82:	4b51      	ldr	r3, [pc, #324]	; (8002ec8 <HAL_TIM_Encoder_MspInit+0x188>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	4a50      	ldr	r2, [pc, #320]	; (8002ec8 <HAL_TIM_Encoder_MspInit+0x188>)
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d8e:	4b4e      	ldr	r3, [pc, #312]	; (8002ec8 <HAL_TIM_Encoder_MspInit+0x188>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	617b      	str	r3, [r7, #20]
 8002d98:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	613b      	str	r3, [r7, #16]
 8002d9e:	4b4a      	ldr	r3, [pc, #296]	; (8002ec8 <HAL_TIM_Encoder_MspInit+0x188>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	4a49      	ldr	r2, [pc, #292]	; (8002ec8 <HAL_TIM_Encoder_MspInit+0x188>)
 8002da4:	f043 0302 	orr.w	r3, r3, #2
 8002da8:	6313      	str	r3, [r2, #48]	; 0x30
 8002daa:	4b47      	ldr	r3, [pc, #284]	; (8002ec8 <HAL_TIM_Encoder_MspInit+0x188>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	613b      	str	r3, [r7, #16]
 8002db4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002db6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dcc:	f107 031c 	add.w	r3, r7, #28
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	483e      	ldr	r0, [pc, #248]	; (8002ecc <HAL_TIM_Encoder_MspInit+0x18c>)
 8002dd4:	f002 fba4 	bl	8005520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002dd8:	2308      	movs	r3, #8
 8002dda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ddc:	2302      	movs	r3, #2
 8002dde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de0:	2300      	movs	r3, #0
 8002de2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de4:	2300      	movs	r3, #0
 8002de6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002de8:	2301      	movs	r3, #1
 8002dea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dec:	f107 031c 	add.w	r3, r7, #28
 8002df0:	4619      	mov	r1, r3
 8002df2:	4837      	ldr	r0, [pc, #220]	; (8002ed0 <HAL_TIM_Encoder_MspInit+0x190>)
 8002df4:	f002 fb94 	bl	8005520 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002df8:	e061      	b.n	8002ebe <HAL_TIM_Encoder_MspInit+0x17e>
  else if(htim_encoder->Instance==TIM4)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a35      	ldr	r2, [pc, #212]	; (8002ed4 <HAL_TIM_Encoder_MspInit+0x194>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d15c      	bne.n	8002ebe <HAL_TIM_Encoder_MspInit+0x17e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002e04:	2300      	movs	r3, #0
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	4b2f      	ldr	r3, [pc, #188]	; (8002ec8 <HAL_TIM_Encoder_MspInit+0x188>)
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0c:	4a2e      	ldr	r2, [pc, #184]	; (8002ec8 <HAL_TIM_Encoder_MspInit+0x188>)
 8002e0e:	f043 0304 	orr.w	r3, r3, #4
 8002e12:	6413      	str	r3, [r2, #64]	; 0x40
 8002e14:	4b2c      	ldr	r3, [pc, #176]	; (8002ec8 <HAL_TIM_Encoder_MspInit+0x188>)
 8002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e18:	f003 0304 	and.w	r3, r3, #4
 8002e1c:	60fb      	str	r3, [r7, #12]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e20:	2300      	movs	r3, #0
 8002e22:	60bb      	str	r3, [r7, #8]
 8002e24:	4b28      	ldr	r3, [pc, #160]	; (8002ec8 <HAL_TIM_Encoder_MspInit+0x188>)
 8002e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e28:	4a27      	ldr	r2, [pc, #156]	; (8002ec8 <HAL_TIM_Encoder_MspInit+0x188>)
 8002e2a:	f043 0308 	orr.w	r3, r3, #8
 8002e2e:	6313      	str	r3, [r2, #48]	; 0x30
 8002e30:	4b25      	ldr	r3, [pc, #148]	; (8002ec8 <HAL_TIM_Encoder_MspInit+0x188>)
 8002e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e34:	f003 0308 	and.w	r3, r3, #8
 8002e38:	60bb      	str	r3, [r7, #8]
 8002e3a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002e3c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002e40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e42:	2302      	movs	r3, #2
 8002e44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e46:	2300      	movs	r3, #0
 8002e48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002e4e:	2302      	movs	r3, #2
 8002e50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e52:	f107 031c 	add.w	r3, r7, #28
 8002e56:	4619      	mov	r1, r3
 8002e58:	481f      	ldr	r0, [pc, #124]	; (8002ed8 <HAL_TIM_Encoder_MspInit+0x198>)
 8002e5a:	f002 fb61 	bl	8005520 <HAL_GPIO_Init>
    hdma_tim4_up.Instance = DMA1_Stream6;
 8002e5e:	4b1f      	ldr	r3, [pc, #124]	; (8002edc <HAL_TIM_Encoder_MspInit+0x19c>)
 8002e60:	4a1f      	ldr	r2, [pc, #124]	; (8002ee0 <HAL_TIM_Encoder_MspInit+0x1a0>)
 8002e62:	601a      	str	r2, [r3, #0]
    hdma_tim4_up.Init.Channel = DMA_CHANNEL_2;
 8002e64:	4b1d      	ldr	r3, [pc, #116]	; (8002edc <HAL_TIM_Encoder_MspInit+0x19c>)
 8002e66:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002e6a:	605a      	str	r2, [r3, #4]
    hdma_tim4_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e6c:	4b1b      	ldr	r3, [pc, #108]	; (8002edc <HAL_TIM_Encoder_MspInit+0x19c>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	609a      	str	r2, [r3, #8]
    hdma_tim4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e72:	4b1a      	ldr	r3, [pc, #104]	; (8002edc <HAL_TIM_Encoder_MspInit+0x19c>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	60da      	str	r2, [r3, #12]
    hdma_tim4_up.Init.MemInc = DMA_MINC_ENABLE;
 8002e78:	4b18      	ldr	r3, [pc, #96]	; (8002edc <HAL_TIM_Encoder_MspInit+0x19c>)
 8002e7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e7e:	611a      	str	r2, [r3, #16]
    hdma_tim4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e80:	4b16      	ldr	r3, [pc, #88]	; (8002edc <HAL_TIM_Encoder_MspInit+0x19c>)
 8002e82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e86:	615a      	str	r2, [r3, #20]
    hdma_tim4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e88:	4b14      	ldr	r3, [pc, #80]	; (8002edc <HAL_TIM_Encoder_MspInit+0x19c>)
 8002e8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e8e:	619a      	str	r2, [r3, #24]
    hdma_tim4_up.Init.Mode = DMA_NORMAL;
 8002e90:	4b12      	ldr	r3, [pc, #72]	; (8002edc <HAL_TIM_Encoder_MspInit+0x19c>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	61da      	str	r2, [r3, #28]
    hdma_tim4_up.Init.Priority = DMA_PRIORITY_LOW;
 8002e96:	4b11      	ldr	r3, [pc, #68]	; (8002edc <HAL_TIM_Encoder_MspInit+0x19c>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	621a      	str	r2, [r3, #32]
    hdma_tim4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e9c:	4b0f      	ldr	r3, [pc, #60]	; (8002edc <HAL_TIM_Encoder_MspInit+0x19c>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_up) != HAL_OK)
 8002ea2:	480e      	ldr	r0, [pc, #56]	; (8002edc <HAL_TIM_Encoder_MspInit+0x19c>)
 8002ea4:	f001 fc12 	bl	80046cc <HAL_DMA_Init>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <HAL_TIM_Encoder_MspInit+0x172>
      Error_Handler();
 8002eae:	f7ff faff 	bl	80024b0 <Error_Handler>
    __HAL_LINKDMA(htim_encoder,hdma[TIM_DMA_ID_UPDATE],hdma_tim4_up);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a09      	ldr	r2, [pc, #36]	; (8002edc <HAL_TIM_Encoder_MspInit+0x19c>)
 8002eb6:	621a      	str	r2, [r3, #32]
 8002eb8:	4a08      	ldr	r2, [pc, #32]	; (8002edc <HAL_TIM_Encoder_MspInit+0x19c>)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002ebe:	bf00      	nop
 8002ec0:	3730      	adds	r7, #48	; 0x30
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	40020000 	.word	0x40020000
 8002ed0:	40020400 	.word	0x40020400
 8002ed4:	40000800 	.word	0x40000800
 8002ed8:	40020c00 	.word	0x40020c00
 8002edc:	200008c8 	.word	0x200008c8
 8002ee0:	400260a0 	.word	0x400260a0

08002ee4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b08a      	sub	sp, #40	; 0x28
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eec:	f107 0314 	add.w	r3, r7, #20
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	605a      	str	r2, [r3, #4]
 8002ef6:	609a      	str	r2, [r3, #8]
 8002ef8:	60da      	str	r2, [r3, #12]
 8002efa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a33      	ldr	r2, [pc, #204]	; (8002fd0 <HAL_TIM_MspPostInit+0xec>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d13c      	bne.n	8002f80 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f06:	2300      	movs	r3, #0
 8002f08:	613b      	str	r3, [r7, #16]
 8002f0a:	4b32      	ldr	r3, [pc, #200]	; (8002fd4 <HAL_TIM_MspPostInit+0xf0>)
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	4a31      	ldr	r2, [pc, #196]	; (8002fd4 <HAL_TIM_MspPostInit+0xf0>)
 8002f10:	f043 0301 	orr.w	r3, r3, #1
 8002f14:	6313      	str	r3, [r2, #48]	; 0x30
 8002f16:	4b2f      	ldr	r3, [pc, #188]	; (8002fd4 <HAL_TIM_MspPostInit+0xf0>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	613b      	str	r3, [r7, #16]
 8002f20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f22:	2300      	movs	r3, #0
 8002f24:	60fb      	str	r3, [r7, #12]
 8002f26:	4b2b      	ldr	r3, [pc, #172]	; (8002fd4 <HAL_TIM_MspPostInit+0xf0>)
 8002f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2a:	4a2a      	ldr	r2, [pc, #168]	; (8002fd4 <HAL_TIM_MspPostInit+0xf0>)
 8002f2c:	f043 0304 	orr.w	r3, r3, #4
 8002f30:	6313      	str	r3, [r2, #48]	; 0x30
 8002f32:	4b28      	ldr	r3, [pc, #160]	; (8002fd4 <HAL_TIM_MspPostInit+0xf0>)
 8002f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f36:	f003 0304 	and.w	r3, r3, #4
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002f3e:	2340      	movs	r3, #64	; 0x40
 8002f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f42:	2302      	movs	r3, #2
 8002f44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f46:	2300      	movs	r3, #0
 8002f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002f4e:	2302      	movs	r3, #2
 8002f50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f52:	f107 0314 	add.w	r3, r7, #20
 8002f56:	4619      	mov	r1, r3
 8002f58:	481f      	ldr	r0, [pc, #124]	; (8002fd8 <HAL_TIM_MspPostInit+0xf4>)
 8002f5a:	f002 fae1 	bl	8005520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002f5e:	2380      	movs	r3, #128	; 0x80
 8002f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f62:	2302      	movs	r3, #2
 8002f64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f66:	2300      	movs	r3, #0
 8002f68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002f6e:	2302      	movs	r3, #2
 8002f70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f72:	f107 0314 	add.w	r3, r7, #20
 8002f76:	4619      	mov	r1, r3
 8002f78:	4818      	ldr	r0, [pc, #96]	; (8002fdc <HAL_TIM_MspPostInit+0xf8>)
 8002f7a:	f002 fad1 	bl	8005520 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8002f7e:	e023      	b.n	8002fc8 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM13)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a16      	ldr	r2, [pc, #88]	; (8002fe0 <HAL_TIM_MspPostInit+0xfc>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d11e      	bne.n	8002fc8 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	60bb      	str	r3, [r7, #8]
 8002f8e:	4b11      	ldr	r3, [pc, #68]	; (8002fd4 <HAL_TIM_MspPostInit+0xf0>)
 8002f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f92:	4a10      	ldr	r2, [pc, #64]	; (8002fd4 <HAL_TIM_MspPostInit+0xf0>)
 8002f94:	f043 0320 	orr.w	r3, r3, #32
 8002f98:	6313      	str	r3, [r2, #48]	; 0x30
 8002f9a:	4b0e      	ldr	r3, [pc, #56]	; (8002fd4 <HAL_TIM_MspPostInit+0xf0>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	f003 0320 	and.w	r3, r3, #32
 8002fa2:	60bb      	str	r3, [r7, #8]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002fa6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fac:	2302      	movs	r3, #2
 8002fae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002fb8:	2309      	movs	r3, #9
 8002fba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002fbc:	f107 0314 	add.w	r3, r7, #20
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	4808      	ldr	r0, [pc, #32]	; (8002fe4 <HAL_TIM_MspPostInit+0x100>)
 8002fc4:	f002 faac 	bl	8005520 <HAL_GPIO_Init>
}
 8002fc8:	bf00      	nop
 8002fca:	3728      	adds	r7, #40	; 0x28
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	40000400 	.word	0x40000400
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	40020000 	.word	0x40020000
 8002fdc:	40020800 	.word	0x40020800
 8002fe0:	40001c00 	.word	0x40001c00
 8002fe4:	40021400 	.word	0x40021400

08002fe8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b08c      	sub	sp, #48	; 0x30
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff0:	f107 031c 	add.w	r3, r7, #28
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	605a      	str	r2, [r3, #4]
 8002ffa:	609a      	str	r2, [r3, #8]
 8002ffc:	60da      	str	r2, [r3, #12]
 8002ffe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a3b      	ldr	r2, [pc, #236]	; (80030f4 <HAL_UART_MspInit+0x10c>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d135      	bne.n	8003076 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800300a:	2300      	movs	r3, #0
 800300c:	61bb      	str	r3, [r7, #24]
 800300e:	4b3a      	ldr	r3, [pc, #232]	; (80030f8 <HAL_UART_MspInit+0x110>)
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	4a39      	ldr	r2, [pc, #228]	; (80030f8 <HAL_UART_MspInit+0x110>)
 8003014:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003018:	6413      	str	r3, [r2, #64]	; 0x40
 800301a:	4b37      	ldr	r3, [pc, #220]	; (80030f8 <HAL_UART_MspInit+0x110>)
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003022:	61bb      	str	r3, [r7, #24]
 8003024:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003026:	2300      	movs	r3, #0
 8003028:	617b      	str	r3, [r7, #20]
 800302a:	4b33      	ldr	r3, [pc, #204]	; (80030f8 <HAL_UART_MspInit+0x110>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302e:	4a32      	ldr	r2, [pc, #200]	; (80030f8 <HAL_UART_MspInit+0x110>)
 8003030:	f043 0304 	orr.w	r3, r3, #4
 8003034:	6313      	str	r3, [r2, #48]	; 0x30
 8003036:	4b30      	ldr	r3, [pc, #192]	; (80030f8 <HAL_UART_MspInit+0x110>)
 8003038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303a:	f003 0304 	and.w	r3, r3, #4
 800303e:	617b      	str	r3, [r7, #20]
 8003040:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003042:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003046:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003048:	2302      	movs	r3, #2
 800304a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304c:	2300      	movs	r3, #0
 800304e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003050:	2303      	movs	r3, #3
 8003052:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003054:	2308      	movs	r3, #8
 8003056:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003058:	f107 031c 	add.w	r3, r7, #28
 800305c:	4619      	mov	r1, r3
 800305e:	4827      	ldr	r0, [pc, #156]	; (80030fc <HAL_UART_MspInit+0x114>)
 8003060:	f002 fa5e 	bl	8005520 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003064:	2200      	movs	r2, #0
 8003066:	2100      	movs	r1, #0
 8003068:	2034      	movs	r0, #52	; 0x34
 800306a:	f001 faf8 	bl	800465e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800306e:	2034      	movs	r0, #52	; 0x34
 8003070:	f001 fb11 	bl	8004696 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003074:	e039      	b.n	80030ea <HAL_UART_MspInit+0x102>
  else if(huart->Instance==USART3)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a21      	ldr	r2, [pc, #132]	; (8003100 <HAL_UART_MspInit+0x118>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d134      	bne.n	80030ea <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003080:	2300      	movs	r3, #0
 8003082:	613b      	str	r3, [r7, #16]
 8003084:	4b1c      	ldr	r3, [pc, #112]	; (80030f8 <HAL_UART_MspInit+0x110>)
 8003086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003088:	4a1b      	ldr	r2, [pc, #108]	; (80030f8 <HAL_UART_MspInit+0x110>)
 800308a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800308e:	6413      	str	r3, [r2, #64]	; 0x40
 8003090:	4b19      	ldr	r3, [pc, #100]	; (80030f8 <HAL_UART_MspInit+0x110>)
 8003092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003094:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003098:	613b      	str	r3, [r7, #16]
 800309a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800309c:	2300      	movs	r3, #0
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	4b15      	ldr	r3, [pc, #84]	; (80030f8 <HAL_UART_MspInit+0x110>)
 80030a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a4:	4a14      	ldr	r2, [pc, #80]	; (80030f8 <HAL_UART_MspInit+0x110>)
 80030a6:	f043 0308 	orr.w	r3, r3, #8
 80030aa:	6313      	str	r3, [r2, #48]	; 0x30
 80030ac:	4b12      	ldr	r3, [pc, #72]	; (80030f8 <HAL_UART_MspInit+0x110>)
 80030ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b0:	f003 0308 	and.w	r3, r3, #8
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80030b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80030bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030be:	2302      	movs	r3, #2
 80030c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c2:	2300      	movs	r3, #0
 80030c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030c6:	2303      	movs	r3, #3
 80030c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80030ca:	2307      	movs	r3, #7
 80030cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030ce:	f107 031c 	add.w	r3, r7, #28
 80030d2:	4619      	mov	r1, r3
 80030d4:	480b      	ldr	r0, [pc, #44]	; (8003104 <HAL_UART_MspInit+0x11c>)
 80030d6:	f002 fa23 	bl	8005520 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80030da:	2200      	movs	r2, #0
 80030dc:	2100      	movs	r1, #0
 80030de:	2027      	movs	r0, #39	; 0x27
 80030e0:	f001 fabd 	bl	800465e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80030e4:	2027      	movs	r0, #39	; 0x27
 80030e6:	f001 fad6 	bl	8004696 <HAL_NVIC_EnableIRQ>
}
 80030ea:	bf00      	nop
 80030ec:	3730      	adds	r7, #48	; 0x30
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	40004c00 	.word	0x40004c00
 80030f8:	40023800 	.word	0x40023800
 80030fc:	40020800 	.word	0x40020800
 8003100:	40004800 	.word	0x40004800
 8003104:	40020c00 	.word	0x40020c00

08003108 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b08a      	sub	sp, #40	; 0x28
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003110:	f107 0314 	add.w	r3, r7, #20
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	605a      	str	r2, [r3, #4]
 800311a:	609a      	str	r2, [r3, #8]
 800311c:	60da      	str	r2, [r3, #12]
 800311e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003128:	d13f      	bne.n	80031aa <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800312a:	2300      	movs	r3, #0
 800312c:	613b      	str	r3, [r7, #16]
 800312e:	4b21      	ldr	r3, [pc, #132]	; (80031b4 <HAL_PCD_MspInit+0xac>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	4a20      	ldr	r2, [pc, #128]	; (80031b4 <HAL_PCD_MspInit+0xac>)
 8003134:	f043 0301 	orr.w	r3, r3, #1
 8003138:	6313      	str	r3, [r2, #48]	; 0x30
 800313a:	4b1e      	ldr	r3, [pc, #120]	; (80031b4 <HAL_PCD_MspInit+0xac>)
 800313c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	613b      	str	r3, [r7, #16]
 8003144:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003146:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800314a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314c:	2302      	movs	r3, #2
 800314e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003150:	2300      	movs	r3, #0
 8003152:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003154:	2303      	movs	r3, #3
 8003156:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003158:	230a      	movs	r3, #10
 800315a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800315c:	f107 0314 	add.w	r3, r7, #20
 8003160:	4619      	mov	r1, r3
 8003162:	4815      	ldr	r0, [pc, #84]	; (80031b8 <HAL_PCD_MspInit+0xb0>)
 8003164:	f002 f9dc 	bl	8005520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003168:	f44f 7300 	mov.w	r3, #512	; 0x200
 800316c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800316e:	2300      	movs	r3, #0
 8003170:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003172:	2300      	movs	r3, #0
 8003174:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003176:	f107 0314 	add.w	r3, r7, #20
 800317a:	4619      	mov	r1, r3
 800317c:	480e      	ldr	r0, [pc, #56]	; (80031b8 <HAL_PCD_MspInit+0xb0>)
 800317e:	f002 f9cf 	bl	8005520 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003182:	4b0c      	ldr	r3, [pc, #48]	; (80031b4 <HAL_PCD_MspInit+0xac>)
 8003184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003186:	4a0b      	ldr	r2, [pc, #44]	; (80031b4 <HAL_PCD_MspInit+0xac>)
 8003188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800318c:	6353      	str	r3, [r2, #52]	; 0x34
 800318e:	2300      	movs	r3, #0
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	4b08      	ldr	r3, [pc, #32]	; (80031b4 <HAL_PCD_MspInit+0xac>)
 8003194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003196:	4a07      	ldr	r2, [pc, #28]	; (80031b4 <HAL_PCD_MspInit+0xac>)
 8003198:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800319c:	6453      	str	r3, [r2, #68]	; 0x44
 800319e:	4b05      	ldr	r3, [pc, #20]	; (80031b4 <HAL_PCD_MspInit+0xac>)
 80031a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80031aa:	bf00      	nop
 80031ac:	3728      	adds	r7, #40	; 0x28
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	40023800 	.word	0x40023800
 80031b8:	40020000 	.word	0x40020000
 80031bc:	00000000 	.word	0x00000000

080031c0 <HAL_ADC_ConvCpltCallback>:




void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]

		if(hadc->Instance == hadc3.Instance)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	4b1a      	ldr	r3, [pc, #104]	; (8003238 <HAL_ADC_ConvCpltCallback+0x78>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d124      	bne.n	800321e <HAL_ADC_ConvCpltCallback+0x5e>

		{

		//	GPIOB->ODR ^= 1<<7;  ok

			battery_V=ADC3_value[2]/67.8*27.667  +1;
 80031d4:	4b19      	ldr	r3, [pc, #100]	; (800323c <HAL_ADC_ConvCpltCallback+0x7c>)
 80031d6:	889b      	ldrh	r3, [r3, #4]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7fd f9b3 	bl	8000544 <__aeabi_i2d>
 80031de:	a312      	add	r3, pc, #72	; (adr r3, 8003228 <HAL_ADC_ConvCpltCallback+0x68>)
 80031e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e4:	f7fd fb42 	bl	800086c <__aeabi_ddiv>
 80031e8:	4602      	mov	r2, r0
 80031ea:	460b      	mov	r3, r1
 80031ec:	4610      	mov	r0, r2
 80031ee:	4619      	mov	r1, r3
 80031f0:	a30f      	add	r3, pc, #60	; (adr r3, 8003230 <HAL_ADC_ConvCpltCallback+0x70>)
 80031f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f6:	f7fd fa0f 	bl	8000618 <__aeabi_dmul>
 80031fa:	4602      	mov	r2, r0
 80031fc:	460b      	mov	r3, r1
 80031fe:	4610      	mov	r0, r2
 8003200:	4619      	mov	r1, r3
 8003202:	f04f 0200 	mov.w	r2, #0
 8003206:	4b0e      	ldr	r3, [pc, #56]	; (8003240 <HAL_ADC_ConvCpltCallback+0x80>)
 8003208:	f7fd f850 	bl	80002ac <__adddf3>
 800320c:	4602      	mov	r2, r0
 800320e:	460b      	mov	r3, r1
 8003210:	4610      	mov	r0, r2
 8003212:	4619      	mov	r1, r3
 8003214:	f7fd fcf8 	bl	8000c08 <__aeabi_d2f>
 8003218:	4603      	mov	r3, r0
 800321a:	4a0a      	ldr	r2, [pc, #40]	; (8003244 <HAL_ADC_ConvCpltCallback+0x84>)
 800321c:	6013      	str	r3, [r2, #0]
		}

}
 800321e:	bf00      	nop
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	33333333 	.word	0x33333333
 800322c:	4050f333 	.word	0x4050f333
 8003230:	83126e98 	.word	0x83126e98
 8003234:	403baac0 	.word	0x403baac0
 8003238:	20000530 	.word	0x20000530
 800323c:	200003ac 	.word	0x200003ac
 8003240:	3ff00000 	.word	0x3ff00000
 8003244:	20000e70 	.word	0x20000e70

08003248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800324c:	e7fe      	b.n	800324c <NMI_Handler+0x4>

0800324e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800324e:	b480      	push	{r7}
 8003250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003252:	e7fe      	b.n	8003252 <HardFault_Handler+0x4>

08003254 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003258:	e7fe      	b.n	8003258 <MemManage_Handler+0x4>

0800325a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800325a:	b480      	push	{r7}
 800325c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800325e:	e7fe      	b.n	800325e <BusFault_Handler+0x4>

08003260 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003264:	e7fe      	b.n	8003264 <UsageFault_Handler+0x4>

08003266 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003266:	b480      	push	{r7}
 8003268:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800326a:	bf00      	nop
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003278:	bf00      	nop
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr

08003282 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003282:	b480      	push	{r7}
 8003284:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003286:	bf00      	nop
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003294:	f000 fb88 	bl	80039a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003298:	bf00      	nop
 800329a:	bd80      	pop	{r7, pc}

0800329c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_up);
 80032a0:	4802      	ldr	r0, [pc, #8]	; (80032ac <DMA1_Stream6_IRQHandler+0x10>)
 80032a2:	f001 fbab 	bl	80049fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80032a6:	bf00      	nop
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	200008c8 	.word	0x200008c8

080032b0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80032b0:	b5b0      	push	{r4, r5, r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80032b4:	4872      	ldr	r0, [pc, #456]	; (8003480 <ADC_IRQHandler+0x1d0>)
 80032b6:	f000 fbfe 	bl	8003ab6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */



  ADC3_IN12 = ADC3_value[0];
 80032ba:	4b72      	ldr	r3, [pc, #456]	; (8003484 <ADC_IRQHandler+0x1d4>)
 80032bc:	881a      	ldrh	r2, [r3, #0]
 80032be:	4b72      	ldr	r3, [pc, #456]	; (8003488 <ADC_IRQHandler+0x1d8>)
 80032c0:	801a      	strh	r2, [r3, #0]
  ADC3_IN13 = ADC3_value[1];
 80032c2:	4b70      	ldr	r3, [pc, #448]	; (8003484 <ADC_IRQHandler+0x1d4>)
 80032c4:	885a      	ldrh	r2, [r3, #2]
 80032c6:	4b71      	ldr	r3, [pc, #452]	; (800348c <ADC_IRQHandler+0x1dc>)
 80032c8:	801a      	strh	r2, [r3, #0]




  V=ADC1_0 * 0.6547877;  //3227 > 2113(ref)= 2.58V
 80032ca:	4b71      	ldr	r3, [pc, #452]	; (8003490 <ADC_IRQHandler+0x1e0>)
 80032cc:	881b      	ldrh	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7fd f938 	bl	8000544 <__aeabi_i2d>
 80032d4:	a364      	add	r3, pc, #400	; (adr r3, 8003468 <ADC_IRQHandler+0x1b8>)
 80032d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032da:	f7fd f99d 	bl	8000618 <__aeabi_dmul>
 80032de:	4602      	mov	r2, r0
 80032e0:	460b      	mov	r3, r1
 80032e2:	4610      	mov	r0, r2
 80032e4:	4619      	mov	r1, r3
 80032e6:	f7fd fc8f 	bl	8000c08 <__aeabi_d2f>
 80032ea:	4603      	mov	r3, r0
 80032ec:	4a69      	ldr	r2, [pc, #420]	; (8003494 <ADC_IRQHandler+0x1e4>)
 80032ee:	6013      	str	r3, [r2, #0]
  V1_mV = V *5000 / 4095.0; //[mV]
 80032f0:	4b68      	ldr	r3, [pc, #416]	; (8003494 <ADC_IRQHandler+0x1e4>)
 80032f2:	edd3 7a00 	vldr	s15, [r3]
 80032f6:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8003498 <ADC_IRQHandler+0x1e8>
 80032fa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80032fe:	eddf 6a67 	vldr	s13, [pc, #412]	; 800349c <ADC_IRQHandler+0x1ec>
 8003302:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003306:	4b66      	ldr	r3, [pc, #408]	; (80034a0 <ADC_IRQHandler+0x1f0>)
 8003308:	edc3 7a00 	vstr	s15, [r3]
  V1_V = V *5 / 4095.0; //[V]
 800330c:	4b61      	ldr	r3, [pc, #388]	; (8003494 <ADC_IRQHandler+0x1e4>)
 800330e:	edd3 7a00 	vldr	s15, [r3]
 8003312:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003316:	ee27 7a87 	vmul.f32	s14, s15, s14
 800331a:	eddf 6a60 	vldr	s13, [pc, #384]	; 800349c <ADC_IRQHandler+0x1ec>
 800331e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003322:	4b60      	ldr	r3, [pc, #384]	; (80034a4 <ADC_IRQHandler+0x1f4>)
 8003324:	edc3 7a00 	vstr	s15, [r3]


  if(V1_V - 2.58>=0)
 8003328:	4b5e      	ldr	r3, [pc, #376]	; (80034a4 <ADC_IRQHandler+0x1f4>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4618      	mov	r0, r3
 800332e:	f7fd f91b 	bl	8000568 <__aeabi_f2d>
 8003332:	a34f      	add	r3, pc, #316	; (adr r3, 8003470 <ADC_IRQHandler+0x1c0>)
 8003334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003338:	f7fc ffb6 	bl	80002a8 <__aeabi_dsub>
 800333c:	4602      	mov	r2, r0
 800333e:	460b      	mov	r3, r1
 8003340:	4610      	mov	r0, r2
 8003342:	4619      	mov	r1, r3
 8003344:	f04f 0200 	mov.w	r2, #0
 8003348:	f04f 0300 	mov.w	r3, #0
 800334c:	f7fd fbea 	bl	8000b24 <__aeabi_dcmpge>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d025      	beq.n	80033a2 <ADC_IRQHandler+0xf2>
  {
	  amp_A = (V1_V -2.58) /285*1000;
 8003356:	4b53      	ldr	r3, [pc, #332]	; (80034a4 <ADC_IRQHandler+0x1f4>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4618      	mov	r0, r3
 800335c:	f7fd f904 	bl	8000568 <__aeabi_f2d>
 8003360:	a343      	add	r3, pc, #268	; (adr r3, 8003470 <ADC_IRQHandler+0x1c0>)
 8003362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003366:	f7fc ff9f 	bl	80002a8 <__aeabi_dsub>
 800336a:	4602      	mov	r2, r0
 800336c:	460b      	mov	r3, r1
 800336e:	4610      	mov	r0, r2
 8003370:	4619      	mov	r1, r3
 8003372:	a341      	add	r3, pc, #260	; (adr r3, 8003478 <ADC_IRQHandler+0x1c8>)
 8003374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003378:	f7fd fa78 	bl	800086c <__aeabi_ddiv>
 800337c:	4602      	mov	r2, r0
 800337e:	460b      	mov	r3, r1
 8003380:	4610      	mov	r0, r2
 8003382:	4619      	mov	r1, r3
 8003384:	f04f 0200 	mov.w	r2, #0
 8003388:	4b47      	ldr	r3, [pc, #284]	; (80034a8 <ADC_IRQHandler+0x1f8>)
 800338a:	f7fd f945 	bl	8000618 <__aeabi_dmul>
 800338e:	4602      	mov	r2, r0
 8003390:	460b      	mov	r3, r1
 8003392:	4610      	mov	r0, r2
 8003394:	4619      	mov	r1, r3
 8003396:	f7fd fc37 	bl	8000c08 <__aeabi_d2f>
 800339a:	4603      	mov	r3, r0
 800339c:	4a43      	ldr	r2, [pc, #268]	; (80034ac <ADC_IRQHandler+0x1fc>)
 800339e:	6013      	str	r3, [r2, #0]
 80033a0:	e03e      	b.n	8003420 <ADC_IRQHandler+0x170>
  }
  else if(V1_V - 2.58 < 0)
 80033a2:	4b40      	ldr	r3, [pc, #256]	; (80034a4 <ADC_IRQHandler+0x1f4>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7fd f8de 	bl	8000568 <__aeabi_f2d>
 80033ac:	a330      	add	r3, pc, #192	; (adr r3, 8003470 <ADC_IRQHandler+0x1c0>)
 80033ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b2:	f7fc ff79 	bl	80002a8 <__aeabi_dsub>
 80033b6:	4602      	mov	r2, r0
 80033b8:	460b      	mov	r3, r1
 80033ba:	4610      	mov	r0, r2
 80033bc:	4619      	mov	r1, r3
 80033be:	f04f 0200 	mov.w	r2, #0
 80033c2:	f04f 0300 	mov.w	r3, #0
 80033c6:	f7fd fb99 	bl	8000afc <__aeabi_dcmplt>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d027      	beq.n	8003420 <ADC_IRQHandler+0x170>
  {
	  amp_A = -(V1_V - 2.58) /285*1000;
 80033d0:	4b34      	ldr	r3, [pc, #208]	; (80034a4 <ADC_IRQHandler+0x1f4>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7fd f8c7 	bl	8000568 <__aeabi_f2d>
 80033da:	a325      	add	r3, pc, #148	; (adr r3, 8003470 <ADC_IRQHandler+0x1c0>)
 80033dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e0:	f7fc ff62 	bl	80002a8 <__aeabi_dsub>
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	4614      	mov	r4, r2
 80033ea:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80033ee:	a322      	add	r3, pc, #136	; (adr r3, 8003478 <ADC_IRQHandler+0x1c8>)
 80033f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f4:	4620      	mov	r0, r4
 80033f6:	4629      	mov	r1, r5
 80033f8:	f7fd fa38 	bl	800086c <__aeabi_ddiv>
 80033fc:	4602      	mov	r2, r0
 80033fe:	460b      	mov	r3, r1
 8003400:	4610      	mov	r0, r2
 8003402:	4619      	mov	r1, r3
 8003404:	f04f 0200 	mov.w	r2, #0
 8003408:	4b27      	ldr	r3, [pc, #156]	; (80034a8 <ADC_IRQHandler+0x1f8>)
 800340a:	f7fd f905 	bl	8000618 <__aeabi_dmul>
 800340e:	4602      	mov	r2, r0
 8003410:	460b      	mov	r3, r1
 8003412:	4610      	mov	r0, r2
 8003414:	4619      	mov	r1, r3
 8003416:	f7fd fbf7 	bl	8000c08 <__aeabi_d2f>
 800341a:	4603      	mov	r3, r0
 800341c:	4a23      	ldr	r2, [pc, #140]	; (80034ac <ADC_IRQHandler+0x1fc>)
 800341e:	6013      	str	r3, [r2, #0]
  }


  amp_mA = amp_A * 1000;
 8003420:	4b22      	ldr	r3, [pc, #136]	; (80034ac <ADC_IRQHandler+0x1fc>)
 8003422:	edd3 7a00 	vldr	s15, [r3]
 8003426:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80034b0 <ADC_IRQHandler+0x200>
 800342a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800342e:	4b21      	ldr	r3, [pc, #132]	; (80034b4 <ADC_IRQHandler+0x204>)
 8003430:	edc3 7a00 	vstr	s15, [r3]

  sum=amp_mA + sum;
 8003434:	4b1f      	ldr	r3, [pc, #124]	; (80034b4 <ADC_IRQHandler+0x204>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4618      	mov	r0, r3
 800343a:	f7fd f895 	bl	8000568 <__aeabi_f2d>
 800343e:	4b1e      	ldr	r3, [pc, #120]	; (80034b8 <ADC_IRQHandler+0x208>)
 8003440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003444:	f7fc ff32 	bl	80002ac <__adddf3>
 8003448:	4602      	mov	r2, r0
 800344a:	460b      	mov	r3, r1
 800344c:	491a      	ldr	r1, [pc, #104]	; (80034b8 <ADC_IRQHandler+0x208>)
 800344e:	e9c1 2300 	strd	r2, r3, [r1]
 	  i++;
 8003452:	4b1a      	ldr	r3, [pc, #104]	; (80034bc <ADC_IRQHandler+0x20c>)
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	3301      	adds	r3, #1
 8003458:	b2da      	uxtb	r2, r3
 800345a:	4b18      	ldr	r3, [pc, #96]	; (80034bc <ADC_IRQHandler+0x20c>)
 800345c:	701a      	strb	r2, [r3, #0]
 	 	  }



  /* USER CODE END ADC_IRQn 1 */
}
 800345e:	bf00      	nop
 8003460:	bdb0      	pop	{r4, r5, r7, pc}
 8003462:	bf00      	nop
 8003464:	f3af 8000 	nop.w
 8003468:	55aa5680 	.word	0x55aa5680
 800346c:	3fe4f405 	.word	0x3fe4f405
 8003470:	0a3d70a4 	.word	0x0a3d70a4
 8003474:	4004a3d7 	.word	0x4004a3d7
 8003478:	00000000 	.word	0x00000000
 800347c:	4071d000 	.word	0x4071d000
 8003480:	20000530 	.word	0x20000530
 8003484:	200003ac 	.word	0x200003ac
 8003488:	20000e74 	.word	0x20000e74
 800348c:	20000e76 	.word	0x20000e76
 8003490:	200003a6 	.word	0x200003a6
 8003494:	20000e84 	.word	0x20000e84
 8003498:	459c4000 	.word	0x459c4000
 800349c:	457ff000 	.word	0x457ff000
 80034a0:	20000e88 	.word	0x20000e88
 80034a4:	20000e8c 	.word	0x20000e8c
 80034a8:	408f4000 	.word	0x408f4000
 80034ac:	20000e90 	.word	0x20000e90
 80034b0:	447a0000 	.word	0x447a0000
 80034b4:	20000e94 	.word	0x20000e94
 80034b8:	20000e98 	.word	0x20000e98
 80034bc:	20000ea0 	.word	0x20000ea0

080034c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80034c4:	4802      	ldr	r0, [pc, #8]	; (80034d0 <TIM3_IRQHandler+0x10>)
 80034c6:	f003 fbd3 	bl	8006c70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */


  /* USER CODE END TIM3_IRQn 1 */
}
 80034ca:	bf00      	nop
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	20000718 	.word	0x20000718

080034d4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80034d8:	4802      	ldr	r0, [pc, #8]	; (80034e4 <USART3_IRQHandler+0x10>)
 80034da:	f004 fbcf 	bl	8007c7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80034de:	bf00      	nop
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	20000248 	.word	0x20000248

080034e8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80034ec:	4805      	ldr	r0, [pc, #20]	; (8003504 <TIM8_UP_TIM13_IRQHandler+0x1c>)
 80034ee:	f003 fbbf 	bl	8006c70 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 80034f2:	4805      	ldr	r0, [pc, #20]	; (8003508 <TIM8_UP_TIM13_IRQHandler+0x20>)
 80034f4:	f003 fbbc 	bl	8006c70 <HAL_TIM_IRQHandler>
  //0.0001/4

  //GPIOB->ODR ^=1<<0;  //ok


  tim13_flag=1;
 80034f8:	4b04      	ldr	r3, [pc, #16]	; (800350c <TIM8_UP_TIM13_IRQHandler+0x24>)
 80034fa:	2201      	movs	r2, #1
 80034fc:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80034fe:	bf00      	nop
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	200007f0 	.word	0x200007f0
 8003508:	20000838 	.word	0x20000838
 800350c:	20000e80 	.word	0x20000e80

08003510 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003514:	4832      	ldr	r0, [pc, #200]	; (80035e0 <TIM8_TRG_COM_TIM14_IRQHandler+0xd0>)
 8003516:	f003 fbab 	bl	8006c70 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 800351a:	4832      	ldr	r0, [pc, #200]	; (80035e4 <TIM8_TRG_COM_TIM14_IRQHandler+0xd4>)
 800351c:	f003 fba8 	bl	8006c70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

 tim14_flag++;
 8003520:	4b31      	ldr	r3, [pc, #196]	; (80035e8 <TIM8_TRG_COM_TIM14_IRQHandler+0xd8>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	3301      	adds	r3, #1
 8003526:	4a30      	ldr	r2, [pc, #192]	; (80035e8 <TIM8_TRG_COM_TIM14_IRQHandler+0xd8>)
 8003528:	6013      	str	r3, [r2, #0]

//motor1
  ENCODER_OLD= ENCODER_NEW;
 800352a:	4b30      	ldr	r3, [pc, #192]	; (80035ec <TIM8_TRG_COM_TIM14_IRQHandler+0xdc>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a30      	ldr	r2, [pc, #192]	; (80035f0 <TIM8_TRG_COM_TIM14_IRQHandler+0xe0>)
 8003530:	6013      	str	r3, [r2, #0]
  ENCODER_NEW = TIM4->CNT;
 8003532:	4b30      	ldr	r3, [pc, #192]	; (80035f4 <TIM8_TRG_COM_TIM14_IRQHandler+0xe4>)
 8003534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003536:	4a2d      	ldr	r2, [pc, #180]	; (80035ec <TIM8_TRG_COM_TIM14_IRQHandler+0xdc>)
 8003538:	6013      	str	r3, [r2, #0]


   	RPM =  ((abs(ENCODER_NEW-ENCODER_OLD)*60))/512.0/0.1;	// ?��코더 ?��?��: 1 turn?�� 3 pulse 출력
 800353a:	4b2c      	ldr	r3, [pc, #176]	; (80035ec <TIM8_TRG_COM_TIM14_IRQHandler+0xdc>)
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	4b2c      	ldr	r3, [pc, #176]	; (80035f0 <TIM8_TRG_COM_TIM14_IRQHandler+0xe0>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003548:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800354c:	4613      	mov	r3, r2
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	1a9b      	subs	r3, r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	4618      	mov	r0, r3
 8003556:	f7fc fff5 	bl	8000544 <__aeabi_i2d>
 800355a:	f04f 0200 	mov.w	r2, #0
 800355e:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8003562:	f7fd f983 	bl	800086c <__aeabi_ddiv>
 8003566:	4602      	mov	r2, r0
 8003568:	460b      	mov	r3, r1
 800356a:	4610      	mov	r0, r2
 800356c:	4619      	mov	r1, r3
 800356e:	a318      	add	r3, pc, #96	; (adr r3, 80035d0 <TIM8_TRG_COM_TIM14_IRQHandler+0xc0>)
 8003570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003574:	f7fd f97a 	bl	800086c <__aeabi_ddiv>
 8003578:	4602      	mov	r2, r0
 800357a:	460b      	mov	r3, r1
 800357c:	4610      	mov	r0, r2
 800357e:	4619      	mov	r1, r3
 8003580:	f7fd fb42 	bl	8000c08 <__aeabi_d2f>
 8003584:	4603      	mov	r3, r0
 8003586:	4a1c      	ldr	r2, [pc, #112]	; (80035f8 <TIM8_TRG_COM_TIM14_IRQHandler+0xe8>)
 8003588:	6013      	str	r3, [r2, #0]
    	RPS=RPM/60;
 800358a:	4b1b      	ldr	r3, [pc, #108]	; (80035f8 <TIM8_TRG_COM_TIM14_IRQHandler+0xe8>)
 800358c:	ed93 7a00 	vldr	s14, [r3]
 8003590:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80035fc <TIM8_TRG_COM_TIM14_IRQHandler+0xec>
 8003594:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003598:	4b19      	ldr	r3, [pc, #100]	; (8003600 <TIM8_TRG_COM_TIM14_IRQHandler+0xf0>)
 800359a:	edc3 7a00 	vstr	s15, [r3]
    	Omega= RPS*2*M_PI;
 800359e:	4b18      	ldr	r3, [pc, #96]	; (8003600 <TIM8_TRG_COM_TIM14_IRQHandler+0xf0>)
 80035a0:	edd3 7a00 	vldr	s15, [r3]
 80035a4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80035a8:	ee17 0a90 	vmov	r0, s15
 80035ac:	f7fc ffdc 	bl	8000568 <__aeabi_f2d>
 80035b0:	a309      	add	r3, pc, #36	; (adr r3, 80035d8 <TIM8_TRG_COM_TIM14_IRQHandler+0xc8>)
 80035b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b6:	f7fd f82f 	bl	8000618 <__aeabi_dmul>
 80035ba:	4602      	mov	r2, r0
 80035bc:	460b      	mov	r3, r1
 80035be:	4610      	mov	r0, r2
 80035c0:	4619      	mov	r1, r3
 80035c2:	f7fd fb21 	bl	8000c08 <__aeabi_d2f>
 80035c6:	4603      	mov	r3, r0
 80035c8:	4a0e      	ldr	r2, [pc, #56]	; (8003604 <TIM8_TRG_COM_TIM14_IRQHandler+0xf4>)
 80035ca:	6013      	str	r3, [r2, #0]




  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80035cc:	bf00      	nop
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	9999999a 	.word	0x9999999a
 80035d4:	3fb99999 	.word	0x3fb99999
 80035d8:	54442d18 	.word	0x54442d18
 80035dc:	400921fb 	.word	0x400921fb
 80035e0:	200007f0 	.word	0x200007f0
 80035e4:	20000880 	.word	0x20000880
 80035e8:	20000e7c 	.word	0x20000e7c
 80035ec:	20000394 	.word	0x20000394
 80035f0:	20000398 	.word	0x20000398
 80035f4:	40000800 	.word	0x40000800
 80035f8:	2000039c 	.word	0x2000039c
 80035fc:	42700000 	.word	0x42700000
 8003600:	200003a0 	.word	0x200003a0
 8003604:	200003b4 	.word	0x200003b4

08003608 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800360c:	4802      	ldr	r0, [pc, #8]	; (8003618 <UART4_IRQHandler+0x10>)
 800360e:	f004 fb35 	bl	8007c7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003612:	bf00      	nop
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	20000200 	.word	0x20000200

0800361c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003620:	4837      	ldr	r0, [pc, #220]	; (8003700 <TIM6_DAC_IRQHandler+0xe4>)
 8003622:	f003 fb25 	bl	8006c70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  tim6_flag=1;
 8003626:	4b37      	ldr	r3, [pc, #220]	; (8003704 <TIM6_DAC_IRQHandler+0xe8>)
 8003628:	2201      	movs	r2, #1
 800362a:	601a      	str	r2, [r3, #0]





  encoder_count=TIM4->CNT;
 800362c:	4b36      	ldr	r3, [pc, #216]	; (8003708 <TIM6_DAC_IRQHandler+0xec>)
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	4a36      	ldr	r2, [pc, #216]	; (800370c <TIM6_DAC_IRQHandler+0xf0>)
 8003632:	6013      	str	r3, [r2, #0]



	if(key_flag==1)
 8003634:	4b36      	ldr	r3, [pc, #216]	; (8003710 <TIM6_DAC_IRQHandler+0xf4>)
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d12d      	bne.n	8003698 <TIM6_DAC_IRQHandler+0x7c>
	  {
		  GPIOE->ODR &= ~1<<0;  // forward
 800363c:	4b35      	ldr	r3, [pc, #212]	; (8003714 <TIM6_DAC_IRQHandler+0xf8>)
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	4a34      	ldr	r2, [pc, #208]	; (8003714 <TIM6_DAC_IRQHandler+0xf8>)
 8003642:	f023 0301 	bic.w	r3, r3, #1
 8003646:	6153      	str	r3, [r2, #20]

	      GPIOG->ODR &= ~1<<0;  //start
 8003648:	4b33      	ldr	r3, [pc, #204]	; (8003718 <TIM6_DAC_IRQHandler+0xfc>)
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	4a32      	ldr	r2, [pc, #200]	; (8003718 <TIM6_DAC_IRQHandler+0xfc>)
 800364e:	f023 0301 	bic.w	r3, r3, #1
 8003652:	6153      	str	r3, [r2, #20]

		  TIM3->CCR1 = 250;
 8003654:	4b31      	ldr	r3, [pc, #196]	; (800371c <TIM6_DAC_IRQHandler+0x100>)
 8003656:	22fa      	movs	r2, #250	; 0xfa
 8003658:	635a      	str	r2, [r3, #52]	; 0x34

		    if(TIM4->CNT>=10220)
 800365a:	4b2b      	ldr	r3, [pc, #172]	; (8003708 <TIM6_DAC_IRQHandler+0xec>)
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	f242 72eb 	movw	r2, #10219	; 0x27eb
 8003662:	4293      	cmp	r3, r2
 8003664:	d918      	bls.n	8003698 <TIM6_DAC_IRQHandler+0x7c>
			{
		    	TIM3->CCR1 = 100;
 8003666:	4b2d      	ldr	r3, [pc, #180]	; (800371c <TIM6_DAC_IRQHandler+0x100>)
 8003668:	2264      	movs	r2, #100	; 0x64
 800366a:	635a      	str	r2, [r3, #52]	; 0x34

		 		if(TIM4->CNT>=10512)
 800366c:	4b26      	ldr	r3, [pc, #152]	; (8003708 <TIM6_DAC_IRQHandler+0xec>)
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	f642 120f 	movw	r2, #10511	; 0x290f
 8003674:	4293      	cmp	r3, r2
 8003676:	d90f      	bls.n	8003698 <TIM6_DAC_IRQHandler+0x7c>
		  		{
			         GPIOG->ODR |= 1<<0;  //stop
 8003678:	4b27      	ldr	r3, [pc, #156]	; (8003718 <TIM6_DAC_IRQHandler+0xfc>)
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	4a26      	ldr	r2, [pc, #152]	; (8003718 <TIM6_DAC_IRQHandler+0xfc>)
 800367e:	f043 0301 	orr.w	r3, r3, #1
 8003682:	6153      	str	r3, [r2, #20]
			        //  key_flag=0;
			          stop_flag=1;
 8003684:	4b26      	ldr	r3, [pc, #152]	; (8003720 <TIM6_DAC_IRQHandler+0x104>)
 8003686:	2201      	movs	r2, #1
 8003688:	701a      	strb	r2, [r3, #0]
			          key_flag=0;
 800368a:	4b21      	ldr	r3, [pc, #132]	; (8003710 <TIM6_DAC_IRQHandler+0xf4>)
 800368c:	2200      	movs	r2, #0
 800368e:	701a      	strb	r2, [r3, #0]
			          HAL_Delay(2000);
 8003690:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003694:	f000 f9a8 	bl	80039e8 <HAL_Delay>


	  }


	  if(stop_flag==1)
 8003698:	4b21      	ldr	r3, [pc, #132]	; (8003720 <TIM6_DAC_IRQHandler+0x104>)
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d12c      	bne.n	80036fa <TIM6_DAC_IRQHandler+0xde>
	      	    {
	      	          GPIOE->ODR |= 1<<0;  //back
 80036a0:	4b1c      	ldr	r3, [pc, #112]	; (8003714 <TIM6_DAC_IRQHandler+0xf8>)
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	4a1b      	ldr	r2, [pc, #108]	; (8003714 <TIM6_DAC_IRQHandler+0xf8>)
 80036a6:	f043 0301 	orr.w	r3, r3, #1
 80036aa:	6153      	str	r3, [r2, #20]
	      	          GPIOG->ODR &= ~1<<0;  //start
 80036ac:	4b1a      	ldr	r3, [pc, #104]	; (8003718 <TIM6_DAC_IRQHandler+0xfc>)
 80036ae:	695b      	ldr	r3, [r3, #20]
 80036b0:	4a19      	ldr	r2, [pc, #100]	; (8003718 <TIM6_DAC_IRQHandler+0xfc>)
 80036b2:	f023 0301 	bic.w	r3, r3, #1
 80036b6:	6153      	str	r3, [r2, #20]
	      	          TIM3->CCR1 = 250;
 80036b8:	4b18      	ldr	r3, [pc, #96]	; (800371c <TIM6_DAC_IRQHandler+0x100>)
 80036ba:	22fa      	movs	r2, #250	; 0xfa
 80036bc:	635a      	str	r2, [r3, #52]	; 0x34


	      	            if(encoder_count<=10280)
 80036be:	4b13      	ldr	r3, [pc, #76]	; (800370c <TIM6_DAC_IRQHandler+0xf0>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f642 0228 	movw	r2, #10280	; 0x2828
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d817      	bhi.n	80036fa <TIM6_DAC_IRQHandler+0xde>
	      	            {
	      	            	  TIM3->CCR1 = 87;
 80036ca:	4b14      	ldr	r3, [pc, #80]	; (800371c <TIM6_DAC_IRQHandler+0x100>)
 80036cc:	2257      	movs	r2, #87	; 0x57
 80036ce:	635a      	str	r2, [r3, #52]	; 0x34
	      	             	  if(encoder_count<=10000)
 80036d0:	4b0e      	ldr	r3, [pc, #56]	; (800370c <TIM6_DAC_IRQHandler+0xf0>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f242 7210 	movw	r2, #10000	; 0x2710
 80036d8:	4293      	cmp	r3, r2
 80036da:	d80e      	bhi.n	80036fa <TIM6_DAC_IRQHandler+0xde>
	      	    	      	    {
	      	    	  		 		  GPIOG->ODR |= 1<<0;  //stop
 80036dc:	4b0e      	ldr	r3, [pc, #56]	; (8003718 <TIM6_DAC_IRQHandler+0xfc>)
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	4a0d      	ldr	r2, [pc, #52]	; (8003718 <TIM6_DAC_IRQHandler+0xfc>)
 80036e2:	f043 0301 	orr.w	r3, r3, #1
 80036e6:	6153      	str	r3, [r2, #20]
	      	    	          		  GPIOE->ODR &= ~1<<0;  //go
 80036e8:	4b0a      	ldr	r3, [pc, #40]	; (8003714 <TIM6_DAC_IRQHandler+0xf8>)
 80036ea:	695b      	ldr	r3, [r3, #20]
 80036ec:	4a09      	ldr	r2, [pc, #36]	; (8003714 <TIM6_DAC_IRQHandler+0xf8>)
 80036ee:	f023 0301 	bic.w	r3, r3, #1
 80036f2:	6153      	str	r3, [r2, #20]
	      	    	  		         stop_flag=0;
 80036f4:	4b0a      	ldr	r3, [pc, #40]	; (8003720 <TIM6_DAC_IRQHandler+0x104>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	701a      	strb	r2, [r3, #0]




  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80036fa:	bf00      	nop
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	200007a8 	.word	0x200007a8
 8003704:	20000e78 	.word	0x20000e78
 8003708:	40000800 	.word	0x40000800
 800370c:	20000000 	.word	0x20000000
 8003710:	200001fc 	.word	0x200001fc
 8003714:	40021000 	.word	0x40021000
 8003718:	40021800 	.word	0x40021800
 800371c:	40000400 	.word	0x40000400
 8003720:	20000ea1 	.word	0x20000ea1

08003724 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003728:	4802      	ldr	r0, [pc, #8]	; (8003734 <DMA2_Stream1_IRQHandler+0x10>)
 800372a:	f001 f967 	bl	80049fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800372e:	bf00      	nop
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	20000578 	.word	0x20000578

08003738 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  return 1;
 800373c:	2301      	movs	r3, #1
}
 800373e:	4618      	mov	r0, r3
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <_kill>:

int _kill(int pid, int sig)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003752:	f006 fad9 	bl	8009d08 <__errno>
 8003756:	4603      	mov	r3, r0
 8003758:	2216      	movs	r2, #22
 800375a:	601a      	str	r2, [r3, #0]
  return -1;
 800375c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003760:	4618      	mov	r0, r3
 8003762:	3708      	adds	r7, #8
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <_exit>:

void _exit (int status)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003770:	f04f 31ff 	mov.w	r1, #4294967295
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f7ff ffe7 	bl	8003748 <_kill>
  while (1) {}    /* Make sure we hang here */
 800377a:	e7fe      	b.n	800377a <_exit+0x12>

0800377c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003788:	2300      	movs	r3, #0
 800378a:	617b      	str	r3, [r7, #20]
 800378c:	e00a      	b.n	80037a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800378e:	f3af 8000 	nop.w
 8003792:	4601      	mov	r1, r0
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	1c5a      	adds	r2, r3, #1
 8003798:	60ba      	str	r2, [r7, #8]
 800379a:	b2ca      	uxtb	r2, r1
 800379c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	3301      	adds	r3, #1
 80037a2:	617b      	str	r3, [r7, #20]
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	dbf0      	blt.n	800378e <_read+0x12>
  }

  return len;
 80037ac:	687b      	ldr	r3, [r7, #4]
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3718      	adds	r7, #24
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80037b6:	b480      	push	{r7}
 80037b8:	b083      	sub	sp, #12
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80037be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr

080037ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80037ce:	b480      	push	{r7}
 80037d0:	b083      	sub	sp, #12
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
 80037d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80037de:	605a      	str	r2, [r3, #4]
  return 0;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr

080037ee <_isatty>:

int _isatty(int file)
{
 80037ee:	b480      	push	{r7}
 80037f0:	b083      	sub	sp, #12
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80037f6:	2301      	movs	r3, #1
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3714      	adds	r7, #20
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
	...

08003820 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003828:	4a14      	ldr	r2, [pc, #80]	; (800387c <_sbrk+0x5c>)
 800382a:	4b15      	ldr	r3, [pc, #84]	; (8003880 <_sbrk+0x60>)
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003834:	4b13      	ldr	r3, [pc, #76]	; (8003884 <_sbrk+0x64>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d102      	bne.n	8003842 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800383c:	4b11      	ldr	r3, [pc, #68]	; (8003884 <_sbrk+0x64>)
 800383e:	4a12      	ldr	r2, [pc, #72]	; (8003888 <_sbrk+0x68>)
 8003840:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003842:	4b10      	ldr	r3, [pc, #64]	; (8003884 <_sbrk+0x64>)
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4413      	add	r3, r2
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	429a      	cmp	r2, r3
 800384e:	d207      	bcs.n	8003860 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003850:	f006 fa5a 	bl	8009d08 <__errno>
 8003854:	4603      	mov	r3, r0
 8003856:	220c      	movs	r2, #12
 8003858:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800385a:	f04f 33ff 	mov.w	r3, #4294967295
 800385e:	e009      	b.n	8003874 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003860:	4b08      	ldr	r3, [pc, #32]	; (8003884 <_sbrk+0x64>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003866:	4b07      	ldr	r3, [pc, #28]	; (8003884 <_sbrk+0x64>)
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4413      	add	r3, r2
 800386e:	4a05      	ldr	r2, [pc, #20]	; (8003884 <_sbrk+0x64>)
 8003870:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003872:	68fb      	ldr	r3, [r7, #12]
}
 8003874:	4618      	mov	r0, r3
 8003876:	3718      	adds	r7, #24
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	20030000 	.word	0x20030000
 8003880:	00000400 	.word	0x00000400
 8003884:	20000ea4 	.word	0x20000ea4
 8003888:	20000ff8 	.word	0x20000ff8

0800388c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003890:	4b06      	ldr	r3, [pc, #24]	; (80038ac <SystemInit+0x20>)
 8003892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003896:	4a05      	ldr	r2, [pc, #20]	; (80038ac <SystemInit+0x20>)
 8003898:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800389c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80038a0:	bf00      	nop
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	e000ed00 	.word	0xe000ed00

080038b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80038b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80038e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80038b4:	f7ff ffea 	bl	800388c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80038b8:	480c      	ldr	r0, [pc, #48]	; (80038ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80038ba:	490d      	ldr	r1, [pc, #52]	; (80038f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80038bc:	4a0d      	ldr	r2, [pc, #52]	; (80038f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80038be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038c0:	e002      	b.n	80038c8 <LoopCopyDataInit>

080038c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038c6:	3304      	adds	r3, #4

080038c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038cc:	d3f9      	bcc.n	80038c2 <CopyDataInit>
  


/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038ce:	4a0a      	ldr	r2, [pc, #40]	; (80038f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80038d0:	4c0a      	ldr	r4, [pc, #40]	; (80038fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80038d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038d4:	e001      	b.n	80038da <LoopFillZerobss>

080038d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038d8:	3204      	adds	r2, #4

080038da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038dc:	d3fb      	bcc.n	80038d6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80038de:	f006 fa19 	bl	8009d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80038e2:	f7fd fddf 	bl	80014a4 <main>
  bx  lr    
 80038e6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80038e8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80038ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038f0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80038f4:	0800c234 	.word	0x0800c234
  ldr r2, =_sbss
 80038f8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80038fc:	20000ff8 	.word	0x20000ff8

08003900 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003900:	e7fe      	b.n	8003900 <CAN1_RX0_IRQHandler>
	...

08003904 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003908:	4b0e      	ldr	r3, [pc, #56]	; (8003944 <HAL_Init+0x40>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a0d      	ldr	r2, [pc, #52]	; (8003944 <HAL_Init+0x40>)
 800390e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003912:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003914:	4b0b      	ldr	r3, [pc, #44]	; (8003944 <HAL_Init+0x40>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a0a      	ldr	r2, [pc, #40]	; (8003944 <HAL_Init+0x40>)
 800391a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800391e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003920:	4b08      	ldr	r3, [pc, #32]	; (8003944 <HAL_Init+0x40>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a07      	ldr	r2, [pc, #28]	; (8003944 <HAL_Init+0x40>)
 8003926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800392a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800392c:	2003      	movs	r0, #3
 800392e:	f000 fe8b 	bl	8004648 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003932:	2000      	movs	r0, #0
 8003934:	f000 f808 	bl	8003948 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003938:	f7fe ffba 	bl	80028b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	40023c00 	.word	0x40023c00

08003948 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003950:	4b12      	ldr	r3, [pc, #72]	; (800399c <HAL_InitTick+0x54>)
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	4b12      	ldr	r3, [pc, #72]	; (80039a0 <HAL_InitTick+0x58>)
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	4619      	mov	r1, r3
 800395a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800395e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003962:	fbb2 f3f3 	udiv	r3, r2, r3
 8003966:	4618      	mov	r0, r3
 8003968:	f000 fea3 	bl	80046b2 <HAL_SYSTICK_Config>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e00e      	b.n	8003994 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2b0f      	cmp	r3, #15
 800397a:	d80a      	bhi.n	8003992 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800397c:	2200      	movs	r2, #0
 800397e:	6879      	ldr	r1, [r7, #4]
 8003980:	f04f 30ff 	mov.w	r0, #4294967295
 8003984:	f000 fe6b 	bl	800465e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003988:	4a06      	ldr	r2, [pc, #24]	; (80039a4 <HAL_InitTick+0x5c>)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800398e:	2300      	movs	r3, #0
 8003990:	e000      	b.n	8003994 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
}
 8003994:	4618      	mov	r0, r3
 8003996:	3708      	adds	r7, #8
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	20000004 	.word	0x20000004
 80039a0:	2000000c 	.word	0x2000000c
 80039a4:	20000008 	.word	0x20000008

080039a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039ac:	4b06      	ldr	r3, [pc, #24]	; (80039c8 <HAL_IncTick+0x20>)
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	461a      	mov	r2, r3
 80039b2:	4b06      	ldr	r3, [pc, #24]	; (80039cc <HAL_IncTick+0x24>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4413      	add	r3, r2
 80039b8:	4a04      	ldr	r2, [pc, #16]	; (80039cc <HAL_IncTick+0x24>)
 80039ba:	6013      	str	r3, [r2, #0]
}
 80039bc:	bf00      	nop
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	2000000c 	.word	0x2000000c
 80039cc:	20000ea8 	.word	0x20000ea8

080039d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039d0:	b480      	push	{r7}
 80039d2:	af00      	add	r7, sp, #0
  return uwTick;
 80039d4:	4b03      	ldr	r3, [pc, #12]	; (80039e4 <HAL_GetTick+0x14>)
 80039d6:	681b      	ldr	r3, [r3, #0]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	20000ea8 	.word	0x20000ea8

080039e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039f0:	f7ff ffee 	bl	80039d0 <HAL_GetTick>
 80039f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a00:	d005      	beq.n	8003a0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a02:	4b0a      	ldr	r3, [pc, #40]	; (8003a2c <HAL_Delay+0x44>)
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	461a      	mov	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003a0e:	bf00      	nop
 8003a10:	f7ff ffde 	bl	80039d0 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d8f7      	bhi.n	8003a10 <HAL_Delay+0x28>
  {
  }
}
 8003a20:	bf00      	nop
 8003a22:	bf00      	nop
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	2000000c 	.word	0x2000000c

08003a30 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e033      	b.n	8003aae <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d109      	bne.n	8003a62 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f7fe ff56 	bl	8002900 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	f003 0310 	and.w	r3, r3, #16
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d118      	bne.n	8003aa0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003a76:	f023 0302 	bic.w	r3, r3, #2
 8003a7a:	f043 0202 	orr.w	r2, r3, #2
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 fb88 	bl	8004198 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a92:	f023 0303 	bic.w	r3, r3, #3
 8003a96:	f043 0201 	orr.w	r2, r3, #1
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	641a      	str	r2, [r3, #64]	; 0x40
 8003a9e:	e001      	b.n	8003aa4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b086      	sub	sp, #24
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	617b      	str	r3, [r7, #20]
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	f003 0320 	and.w	r3, r3, #32
 8003ae4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d049      	beq.n	8003b80 <HAL_ADC_IRQHandler+0xca>
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d046      	beq.n	8003b80 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	f003 0310 	and.w	r3, r3, #16
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d105      	bne.n	8003b0a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b02:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d12b      	bne.n	8003b70 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d127      	bne.n	8003b70 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b26:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d006      	beq.n	8003b3c <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d119      	bne.n	8003b70 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 0220 	bic.w	r2, r2, #32
 8003b4a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d105      	bne.n	8003b70 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b68:	f043 0201 	orr.w	r2, r3, #1
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f7ff fb25 	bl	80031c0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f06f 0212 	mvn.w	r2, #18
 8003b7e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f003 0304 	and.w	r3, r3, #4
 8003b86:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b8e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d057      	beq.n	8003c46 <HAL_ADC_IRQHandler+0x190>
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d054      	beq.n	8003c46 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba0:	f003 0310 	and.w	r3, r3, #16
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d105      	bne.n	8003bb4 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bac:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d139      	bne.n	8003c36 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d006      	beq.n	8003bde <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d12b      	bne.n	8003c36 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d124      	bne.n	8003c36 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d11d      	bne.n	8003c36 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d119      	bne.n	8003c36 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c10:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d105      	bne.n	8003c36 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2e:	f043 0201 	orr.w	r2, r3, #1
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 fc2c 	bl	8004494 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f06f 020c 	mvn.w	r2, #12
 8003c44:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c54:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d017      	beq.n	8003c8c <HAL_ADC_IRQHandler+0x1d6>
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d014      	beq.n	8003c8c <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d10d      	bne.n	8003c8c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c74:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 f945 	bl	8003f0c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f06f 0201 	mvn.w	r2, #1
 8003c8a:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f003 0320 	and.w	r3, r3, #32
 8003c92:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c9a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d015      	beq.n	8003cce <HAL_ADC_IRQHandler+0x218>
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d012      	beq.n	8003cce <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cac:	f043 0202 	orr.w	r2, r3, #2
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f06f 0220 	mvn.w	r2, #32
 8003cbc:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 f92e 	bl	8003f20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f06f 0220 	mvn.w	r2, #32
 8003ccc:	601a      	str	r2, [r3, #0]
  }
}
 8003cce:	bf00      	nop
 8003cd0:	3718      	adds	r7, #24
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
	...

08003cd8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d101      	bne.n	8003cf6 <HAL_ADC_Start_DMA+0x1e>
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	e0e9      	b.n	8003eca <HAL_ADC_Start_DMA+0x1f2>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f003 0301 	and.w	r3, r3, #1
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d018      	beq.n	8003d3e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689a      	ldr	r2, [r3, #8]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f042 0201 	orr.w	r2, r2, #1
 8003d1a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003d1c:	4b6d      	ldr	r3, [pc, #436]	; (8003ed4 <HAL_ADC_Start_DMA+0x1fc>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a6d      	ldr	r2, [pc, #436]	; (8003ed8 <HAL_ADC_Start_DMA+0x200>)
 8003d22:	fba2 2303 	umull	r2, r3, r2, r3
 8003d26:	0c9a      	lsrs	r2, r3, #18
 8003d28:	4613      	mov	r3, r2
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	4413      	add	r3, r2
 8003d2e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003d30:	e002      	b.n	8003d38 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	3b01      	subs	r3, #1
 8003d36:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1f9      	bne.n	8003d32 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d4c:	d107      	bne.n	8003d5e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689a      	ldr	r2, [r3, #8]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d5c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	f040 80a1 	bne.w	8003eb0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003d76:	f023 0301 	bic.w	r3, r3, #1
 8003d7a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d007      	beq.n	8003da0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d94:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003d98:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003da8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dac:	d106      	bne.n	8003dbc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db2:	f023 0206 	bic.w	r2, r3, #6
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	645a      	str	r2, [r3, #68]	; 0x44
 8003dba:	e002      	b.n	8003dc2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003dca:	4b44      	ldr	r3, [pc, #272]	; (8003edc <HAL_ADC_Start_DMA+0x204>)
 8003dcc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd2:	4a43      	ldr	r2, [pc, #268]	; (8003ee0 <HAL_ADC_Start_DMA+0x208>)
 8003dd4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dda:	4a42      	ldr	r2, [pc, #264]	; (8003ee4 <HAL_ADC_Start_DMA+0x20c>)
 8003ddc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de2:	4a41      	ldr	r2, [pc, #260]	; (8003ee8 <HAL_ADC_Start_DMA+0x210>)
 8003de4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003dee:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003dfe:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689a      	ldr	r2, [r3, #8]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e0e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	334c      	adds	r3, #76	; 0x4c
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f000 fd02 	bl	8004828 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f003 031f 	and.w	r3, r3, #31
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d12a      	bne.n	8003e86 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a2d      	ldr	r2, [pc, #180]	; (8003eec <HAL_ADC_Start_DMA+0x214>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d015      	beq.n	8003e66 <HAL_ADC_Start_DMA+0x18e>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a2c      	ldr	r2, [pc, #176]	; (8003ef0 <HAL_ADC_Start_DMA+0x218>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d105      	bne.n	8003e50 <HAL_ADC_Start_DMA+0x178>
 8003e44:	4b25      	ldr	r3, [pc, #148]	; (8003edc <HAL_ADC_Start_DMA+0x204>)
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f003 031f 	and.w	r3, r3, #31
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00a      	beq.n	8003e66 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a27      	ldr	r2, [pc, #156]	; (8003ef4 <HAL_ADC_Start_DMA+0x21c>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d136      	bne.n	8003ec8 <HAL_ADC_Start_DMA+0x1f0>
 8003e5a:	4b20      	ldr	r3, [pc, #128]	; (8003edc <HAL_ADC_Start_DMA+0x204>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f003 0310 	and.w	r3, r3, #16
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d130      	bne.n	8003ec8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d129      	bne.n	8003ec8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	689a      	ldr	r2, [r3, #8]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e82:	609a      	str	r2, [r3, #8]
 8003e84:	e020      	b.n	8003ec8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a18      	ldr	r2, [pc, #96]	; (8003eec <HAL_ADC_Start_DMA+0x214>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d11b      	bne.n	8003ec8 <HAL_ADC_Start_DMA+0x1f0>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d114      	bne.n	8003ec8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003eac:	609a      	str	r2, [r3, #8]
 8003eae:	e00b      	b.n	8003ec8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb4:	f043 0210 	orr.w	r2, r3, #16
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec0:	f043 0201 	orr.w	r2, r3, #1
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3718      	adds	r7, #24
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	20000004 	.word	0x20000004
 8003ed8:	431bde83 	.word	0x431bde83
 8003edc:	40012300 	.word	0x40012300
 8003ee0:	08004391 	.word	0x08004391
 8003ee4:	0800444b 	.word	0x0800444b
 8003ee8:	08004467 	.word	0x08004467
 8003eec:	40012000 	.word	0x40012000
 8003ef0:	40012100 	.word	0x40012100
 8003ef4:	40012200 	.word	0x40012200

08003ef8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d101      	bne.n	8003f50 <HAL_ADC_ConfigChannel+0x1c>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	e113      	b.n	8004178 <HAL_ADC_ConfigChannel+0x244>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2b09      	cmp	r3, #9
 8003f5e:	d925      	bls.n	8003fac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68d9      	ldr	r1, [r3, #12]
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	4613      	mov	r3, r2
 8003f70:	005b      	lsls	r3, r3, #1
 8003f72:	4413      	add	r3, r2
 8003f74:	3b1e      	subs	r3, #30
 8003f76:	2207      	movs	r2, #7
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	43da      	mvns	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	400a      	ands	r2, r1
 8003f84:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68d9      	ldr	r1, [r3, #12]
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	4618      	mov	r0, r3
 8003f98:	4603      	mov	r3, r0
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	4403      	add	r3, r0
 8003f9e:	3b1e      	subs	r3, #30
 8003fa0:	409a      	lsls	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	60da      	str	r2, [r3, #12]
 8003faa:	e022      	b.n	8003ff2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6919      	ldr	r1, [r3, #16]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	461a      	mov	r2, r3
 8003fba:	4613      	mov	r3, r2
 8003fbc:	005b      	lsls	r3, r3, #1
 8003fbe:	4413      	add	r3, r2
 8003fc0:	2207      	movs	r2, #7
 8003fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc6:	43da      	mvns	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	400a      	ands	r2, r1
 8003fce:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6919      	ldr	r1, [r3, #16]
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	689a      	ldr	r2, [r3, #8]
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	4403      	add	r3, r0
 8003fe8:	409a      	lsls	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	2b06      	cmp	r3, #6
 8003ff8:	d824      	bhi.n	8004044 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	4613      	mov	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	4413      	add	r3, r2
 800400a:	3b05      	subs	r3, #5
 800400c:	221f      	movs	r2, #31
 800400e:	fa02 f303 	lsl.w	r3, r2, r3
 8004012:	43da      	mvns	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	400a      	ands	r2, r1
 800401a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	b29b      	uxth	r3, r3
 8004028:	4618      	mov	r0, r3
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	4613      	mov	r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	4413      	add	r3, r2
 8004034:	3b05      	subs	r3, #5
 8004036:	fa00 f203 	lsl.w	r2, r0, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	430a      	orrs	r2, r1
 8004040:	635a      	str	r2, [r3, #52]	; 0x34
 8004042:	e04c      	b.n	80040de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	2b0c      	cmp	r3, #12
 800404a:	d824      	bhi.n	8004096 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	4613      	mov	r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	4413      	add	r3, r2
 800405c:	3b23      	subs	r3, #35	; 0x23
 800405e:	221f      	movs	r2, #31
 8004060:	fa02 f303 	lsl.w	r3, r2, r3
 8004064:	43da      	mvns	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	400a      	ands	r2, r1
 800406c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	b29b      	uxth	r3, r3
 800407a:	4618      	mov	r0, r3
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	4613      	mov	r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4413      	add	r3, r2
 8004086:	3b23      	subs	r3, #35	; 0x23
 8004088:	fa00 f203 	lsl.w	r2, r0, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	430a      	orrs	r2, r1
 8004092:	631a      	str	r2, [r3, #48]	; 0x30
 8004094:	e023      	b.n	80040de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685a      	ldr	r2, [r3, #4]
 80040a0:	4613      	mov	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4413      	add	r3, r2
 80040a6:	3b41      	subs	r3, #65	; 0x41
 80040a8:	221f      	movs	r2, #31
 80040aa:	fa02 f303 	lsl.w	r3, r2, r3
 80040ae:	43da      	mvns	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	400a      	ands	r2, r1
 80040b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	4618      	mov	r0, r3
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	4613      	mov	r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	4413      	add	r3, r2
 80040d0:	3b41      	subs	r3, #65	; 0x41
 80040d2:	fa00 f203 	lsl.w	r2, r0, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80040de:	4b29      	ldr	r3, [pc, #164]	; (8004184 <HAL_ADC_ConfigChannel+0x250>)
 80040e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a28      	ldr	r2, [pc, #160]	; (8004188 <HAL_ADC_ConfigChannel+0x254>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d10f      	bne.n	800410c <HAL_ADC_ConfigChannel+0x1d8>
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2b12      	cmp	r3, #18
 80040f2:	d10b      	bne.n	800410c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a1d      	ldr	r2, [pc, #116]	; (8004188 <HAL_ADC_ConfigChannel+0x254>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d12b      	bne.n	800416e <HAL_ADC_ConfigChannel+0x23a>
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a1c      	ldr	r2, [pc, #112]	; (800418c <HAL_ADC_ConfigChannel+0x258>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d003      	beq.n	8004128 <HAL_ADC_ConfigChannel+0x1f4>
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2b11      	cmp	r3, #17
 8004126:	d122      	bne.n	800416e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a11      	ldr	r2, [pc, #68]	; (800418c <HAL_ADC_ConfigChannel+0x258>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d111      	bne.n	800416e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800414a:	4b11      	ldr	r3, [pc, #68]	; (8004190 <HAL_ADC_ConfigChannel+0x25c>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a11      	ldr	r2, [pc, #68]	; (8004194 <HAL_ADC_ConfigChannel+0x260>)
 8004150:	fba2 2303 	umull	r2, r3, r2, r3
 8004154:	0c9a      	lsrs	r2, r3, #18
 8004156:	4613      	mov	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4413      	add	r3, r2
 800415c:	005b      	lsls	r3, r3, #1
 800415e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004160:	e002      	b.n	8004168 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	3b01      	subs	r3, #1
 8004166:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1f9      	bne.n	8004162 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3714      	adds	r7, #20
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr
 8004184:	40012300 	.word	0x40012300
 8004188:	40012000 	.word	0x40012000
 800418c:	10000012 	.word	0x10000012
 8004190:	20000004 	.word	0x20000004
 8004194:	431bde83 	.word	0x431bde83

08004198 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80041a0:	4b79      	ldr	r3, [pc, #484]	; (8004388 <ADC_Init+0x1f0>)
 80041a2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	431a      	orrs	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	685a      	ldr	r2, [r3, #4]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	6859      	ldr	r1, [r3, #4]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	021a      	lsls	r2, r3, #8
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	430a      	orrs	r2, r1
 80041e0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80041f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	6859      	ldr	r1, [r3, #4]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689a      	ldr	r2, [r3, #8]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	430a      	orrs	r2, r1
 8004202:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	689a      	ldr	r2, [r3, #8]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004212:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6899      	ldr	r1, [r3, #8]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68da      	ldr	r2, [r3, #12]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	430a      	orrs	r2, r1
 8004224:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422a:	4a58      	ldr	r2, [pc, #352]	; (800438c <ADC_Init+0x1f4>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d022      	beq.n	8004276 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689a      	ldr	r2, [r3, #8]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800423e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6899      	ldr	r1, [r3, #8]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	689a      	ldr	r2, [r3, #8]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004260:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	6899      	ldr	r1, [r3, #8]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	430a      	orrs	r2, r1
 8004272:	609a      	str	r2, [r3, #8]
 8004274:	e00f      	b.n	8004296 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	689a      	ldr	r2, [r3, #8]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004284:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	689a      	ldr	r2, [r3, #8]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004294:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	689a      	ldr	r2, [r3, #8]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f022 0202 	bic.w	r2, r2, #2
 80042a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	6899      	ldr	r1, [r3, #8]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	7e1b      	ldrb	r3, [r3, #24]
 80042b0:	005a      	lsls	r2, r3, #1
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	430a      	orrs	r2, r1
 80042b8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d01b      	beq.n	80042fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042d2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80042e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6859      	ldr	r1, [r3, #4]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ee:	3b01      	subs	r3, #1
 80042f0:	035a      	lsls	r2, r3, #13
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	605a      	str	r2, [r3, #4]
 80042fa:	e007      	b.n	800430c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	685a      	ldr	r2, [r3, #4]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800430a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800431a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	3b01      	subs	r3, #1
 8004328:	051a      	lsls	r2, r3, #20
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	430a      	orrs	r2, r1
 8004330:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689a      	ldr	r2, [r3, #8]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004340:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6899      	ldr	r1, [r3, #8]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800434e:	025a      	lsls	r2, r3, #9
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	430a      	orrs	r2, r1
 8004356:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	689a      	ldr	r2, [r3, #8]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004366:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6899      	ldr	r1, [r3, #8]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	029a      	lsls	r2, r3, #10
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	430a      	orrs	r2, r1
 800437a:	609a      	str	r2, [r3, #8]
}
 800437c:	bf00      	nop
 800437e:	3714      	adds	r7, #20
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr
 8004388:	40012300 	.word	0x40012300
 800438c:	0f000001 	.word	0x0f000001

08004390 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d13c      	bne.n	8004424 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d12b      	bne.n	800441c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d127      	bne.n	800441c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d006      	beq.n	80043e8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d119      	bne.n	800441c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f022 0220 	bic.w	r2, r2, #32
 80043f6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004408:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d105      	bne.n	800441c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004414:	f043 0201 	orr.w	r2, r3, #1
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f7fe fecf 	bl	80031c0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004422:	e00e      	b.n	8004442 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004428:	f003 0310 	and.w	r3, r3, #16
 800442c:	2b00      	cmp	r3, #0
 800442e:	d003      	beq.n	8004438 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f7ff fd75 	bl	8003f20 <HAL_ADC_ErrorCallback>
}
 8004436:	e004      	b.n	8004442 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	4798      	blx	r3
}
 8004442:	bf00      	nop
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800444a:	b580      	push	{r7, lr}
 800444c:	b084      	sub	sp, #16
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004456:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f7ff fd4d 	bl	8003ef8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800445e:	bf00      	nop
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b084      	sub	sp, #16
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004472:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2240      	movs	r2, #64	; 0x40
 8004478:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800447e:	f043 0204 	orr.w	r2, r3, #4
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004486:	68f8      	ldr	r0, [r7, #12]
 8004488:	f7ff fd4a 	bl	8003f20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800448c:	bf00      	nop
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f003 0307 	and.w	r3, r3, #7
 80044b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044b8:	4b0c      	ldr	r3, [pc, #48]	; (80044ec <__NVIC_SetPriorityGrouping+0x44>)
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044c4:	4013      	ands	r3, r2
 80044c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044da:	4a04      	ldr	r2, [pc, #16]	; (80044ec <__NVIC_SetPriorityGrouping+0x44>)
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	60d3      	str	r3, [r2, #12]
}
 80044e0:	bf00      	nop
 80044e2:	3714      	adds	r7, #20
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr
 80044ec:	e000ed00 	.word	0xe000ed00

080044f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044f4:	4b04      	ldr	r3, [pc, #16]	; (8004508 <__NVIC_GetPriorityGrouping+0x18>)
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	0a1b      	lsrs	r3, r3, #8
 80044fa:	f003 0307 	and.w	r3, r3, #7
}
 80044fe:	4618      	mov	r0, r3
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr
 8004508:	e000ed00 	.word	0xe000ed00

0800450c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	4603      	mov	r3, r0
 8004514:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800451a:	2b00      	cmp	r3, #0
 800451c:	db0b      	blt.n	8004536 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800451e:	79fb      	ldrb	r3, [r7, #7]
 8004520:	f003 021f 	and.w	r2, r3, #31
 8004524:	4907      	ldr	r1, [pc, #28]	; (8004544 <__NVIC_EnableIRQ+0x38>)
 8004526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800452a:	095b      	lsrs	r3, r3, #5
 800452c:	2001      	movs	r0, #1
 800452e:	fa00 f202 	lsl.w	r2, r0, r2
 8004532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004536:	bf00      	nop
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	e000e100 	.word	0xe000e100

08004548 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	4603      	mov	r3, r0
 8004550:	6039      	str	r1, [r7, #0]
 8004552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004558:	2b00      	cmp	r3, #0
 800455a:	db0a      	blt.n	8004572 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	b2da      	uxtb	r2, r3
 8004560:	490c      	ldr	r1, [pc, #48]	; (8004594 <__NVIC_SetPriority+0x4c>)
 8004562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004566:	0112      	lsls	r2, r2, #4
 8004568:	b2d2      	uxtb	r2, r2
 800456a:	440b      	add	r3, r1
 800456c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004570:	e00a      	b.n	8004588 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	b2da      	uxtb	r2, r3
 8004576:	4908      	ldr	r1, [pc, #32]	; (8004598 <__NVIC_SetPriority+0x50>)
 8004578:	79fb      	ldrb	r3, [r7, #7]
 800457a:	f003 030f 	and.w	r3, r3, #15
 800457e:	3b04      	subs	r3, #4
 8004580:	0112      	lsls	r2, r2, #4
 8004582:	b2d2      	uxtb	r2, r2
 8004584:	440b      	add	r3, r1
 8004586:	761a      	strb	r2, [r3, #24]
}
 8004588:	bf00      	nop
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr
 8004594:	e000e100 	.word	0xe000e100
 8004598:	e000ed00 	.word	0xe000ed00

0800459c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800459c:	b480      	push	{r7}
 800459e:	b089      	sub	sp, #36	; 0x24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f003 0307 	and.w	r3, r3, #7
 80045ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	f1c3 0307 	rsb	r3, r3, #7
 80045b6:	2b04      	cmp	r3, #4
 80045b8:	bf28      	it	cs
 80045ba:	2304      	movcs	r3, #4
 80045bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	3304      	adds	r3, #4
 80045c2:	2b06      	cmp	r3, #6
 80045c4:	d902      	bls.n	80045cc <NVIC_EncodePriority+0x30>
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	3b03      	subs	r3, #3
 80045ca:	e000      	b.n	80045ce <NVIC_EncodePriority+0x32>
 80045cc:	2300      	movs	r3, #0
 80045ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045d0:	f04f 32ff 	mov.w	r2, #4294967295
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	fa02 f303 	lsl.w	r3, r2, r3
 80045da:	43da      	mvns	r2, r3
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	401a      	ands	r2, r3
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045e4:	f04f 31ff 	mov.w	r1, #4294967295
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	fa01 f303 	lsl.w	r3, r1, r3
 80045ee:	43d9      	mvns	r1, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045f4:	4313      	orrs	r3, r2
         );
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3724      	adds	r7, #36	; 0x24
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
	...

08004604 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	3b01      	subs	r3, #1
 8004610:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004614:	d301      	bcc.n	800461a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004616:	2301      	movs	r3, #1
 8004618:	e00f      	b.n	800463a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800461a:	4a0a      	ldr	r2, [pc, #40]	; (8004644 <SysTick_Config+0x40>)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	3b01      	subs	r3, #1
 8004620:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004622:	210f      	movs	r1, #15
 8004624:	f04f 30ff 	mov.w	r0, #4294967295
 8004628:	f7ff ff8e 	bl	8004548 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800462c:	4b05      	ldr	r3, [pc, #20]	; (8004644 <SysTick_Config+0x40>)
 800462e:	2200      	movs	r2, #0
 8004630:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004632:	4b04      	ldr	r3, [pc, #16]	; (8004644 <SysTick_Config+0x40>)
 8004634:	2207      	movs	r2, #7
 8004636:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3708      	adds	r7, #8
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	e000e010 	.word	0xe000e010

08004648 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f7ff ff29 	bl	80044a8 <__NVIC_SetPriorityGrouping>
}
 8004656:	bf00      	nop
 8004658:	3708      	adds	r7, #8
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800465e:	b580      	push	{r7, lr}
 8004660:	b086      	sub	sp, #24
 8004662:	af00      	add	r7, sp, #0
 8004664:	4603      	mov	r3, r0
 8004666:	60b9      	str	r1, [r7, #8]
 8004668:	607a      	str	r2, [r7, #4]
 800466a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800466c:	2300      	movs	r3, #0
 800466e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004670:	f7ff ff3e 	bl	80044f0 <__NVIC_GetPriorityGrouping>
 8004674:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	68b9      	ldr	r1, [r7, #8]
 800467a:	6978      	ldr	r0, [r7, #20]
 800467c:	f7ff ff8e 	bl	800459c <NVIC_EncodePriority>
 8004680:	4602      	mov	r2, r0
 8004682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004686:	4611      	mov	r1, r2
 8004688:	4618      	mov	r0, r3
 800468a:	f7ff ff5d 	bl	8004548 <__NVIC_SetPriority>
}
 800468e:	bf00      	nop
 8004690:	3718      	adds	r7, #24
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b082      	sub	sp, #8
 800469a:	af00      	add	r7, sp, #0
 800469c:	4603      	mov	r3, r0
 800469e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7ff ff31 	bl	800450c <__NVIC_EnableIRQ>
}
 80046aa:	bf00      	nop
 80046ac:	3708      	adds	r7, #8
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b082      	sub	sp, #8
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7ff ffa2 	bl	8004604 <SysTick_Config>
 80046c0:	4603      	mov	r3, r0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
	...

080046cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80046d4:	2300      	movs	r3, #0
 80046d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80046d8:	f7ff f97a 	bl	80039d0 <HAL_GetTick>
 80046dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d101      	bne.n	80046e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e099      	b.n	800481c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2202      	movs	r2, #2
 80046ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f022 0201 	bic.w	r2, r2, #1
 8004706:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004708:	e00f      	b.n	800472a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800470a:	f7ff f961 	bl	80039d0 <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	2b05      	cmp	r3, #5
 8004716:	d908      	bls.n	800472a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2220      	movs	r2, #32
 800471c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2203      	movs	r2, #3
 8004722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e078      	b.n	800481c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0301 	and.w	r3, r3, #1
 8004734:	2b00      	cmp	r3, #0
 8004736:	d1e8      	bne.n	800470a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	4b38      	ldr	r3, [pc, #224]	; (8004824 <HAL_DMA_Init+0x158>)
 8004744:	4013      	ands	r3, r2
 8004746:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004756:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004762:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800476e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	4313      	orrs	r3, r2
 800477a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004780:	2b04      	cmp	r3, #4
 8004782:	d107      	bne.n	8004794 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478c:	4313      	orrs	r3, r2
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	4313      	orrs	r3, r2
 8004792:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	f023 0307 	bic.w	r3, r3, #7
 80047aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ba:	2b04      	cmp	r3, #4
 80047bc:	d117      	bne.n	80047ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00e      	beq.n	80047ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 fb01 	bl	8004dd8 <DMA_CheckFifoParam>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d008      	beq.n	80047ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2240      	movs	r2, #64	; 0x40
 80047e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80047ea:	2301      	movs	r3, #1
 80047ec:	e016      	b.n	800481c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 fab8 	bl	8004d6c <DMA_CalcBaseAndBitshift>
 80047fc:	4603      	mov	r3, r0
 80047fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004804:	223f      	movs	r2, #63	; 0x3f
 8004806:	409a      	lsls	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3718      	adds	r7, #24
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	f010803f 	.word	0xf010803f

08004828 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b086      	sub	sp, #24
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	607a      	str	r2, [r7, #4]
 8004834:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004836:	2300      	movs	r3, #0
 8004838:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800483e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004846:	2b01      	cmp	r3, #1
 8004848:	d101      	bne.n	800484e <HAL_DMA_Start_IT+0x26>
 800484a:	2302      	movs	r3, #2
 800484c:	e040      	b.n	80048d0 <HAL_DMA_Start_IT+0xa8>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b01      	cmp	r3, #1
 8004860:	d12f      	bne.n	80048c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2202      	movs	r2, #2
 8004866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	68b9      	ldr	r1, [r7, #8]
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f000 fa4a 	bl	8004d10 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004880:	223f      	movs	r2, #63	; 0x3f
 8004882:	409a      	lsls	r2, r3
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f042 0216 	orr.w	r2, r2, #22
 8004896:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489c:	2b00      	cmp	r3, #0
 800489e:	d007      	beq.n	80048b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f042 0208 	orr.w	r2, r2, #8
 80048ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f042 0201 	orr.w	r2, r2, #1
 80048be:	601a      	str	r2, [r3, #0]
 80048c0:	e005      	b.n	80048ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80048ca:	2302      	movs	r3, #2
 80048cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80048ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3718      	adds	r7, #24
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80048e6:	f7ff f873 	bl	80039d0 <HAL_GetTick>
 80048ea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d008      	beq.n	800490a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2280      	movs	r2, #128	; 0x80
 80048fc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e052      	b.n	80049b0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f022 0216 	bic.w	r2, r2, #22
 8004918:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	695a      	ldr	r2, [r3, #20]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004928:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492e:	2b00      	cmp	r3, #0
 8004930:	d103      	bne.n	800493a <HAL_DMA_Abort+0x62>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004936:	2b00      	cmp	r3, #0
 8004938:	d007      	beq.n	800494a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f022 0208 	bic.w	r2, r2, #8
 8004948:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f022 0201 	bic.w	r2, r2, #1
 8004958:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800495a:	e013      	b.n	8004984 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800495c:	f7ff f838 	bl	80039d0 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	2b05      	cmp	r3, #5
 8004968:	d90c      	bls.n	8004984 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2220      	movs	r2, #32
 800496e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2203      	movs	r2, #3
 8004974:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e015      	b.n	80049b0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1e4      	bne.n	800495c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004996:	223f      	movs	r2, #63	; 0x3f
 8004998:	409a      	lsls	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3710      	adds	r7, #16
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d004      	beq.n	80049d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2280      	movs	r2, #128	; 0x80
 80049d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e00c      	b.n	80049f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2205      	movs	r2, #5
 80049da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f022 0201 	bic.w	r2, r2, #1
 80049ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004a04:	2300      	movs	r3, #0
 8004a06:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004a08:	4b8e      	ldr	r3, [pc, #568]	; (8004c44 <HAL_DMA_IRQHandler+0x248>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a8e      	ldr	r2, [pc, #568]	; (8004c48 <HAL_DMA_IRQHandler+0x24c>)
 8004a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a12:	0a9b      	lsrs	r3, r3, #10
 8004a14:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a1a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a26:	2208      	movs	r2, #8
 8004a28:	409a      	lsls	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d01a      	beq.n	8004a68 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0304 	and.w	r3, r3, #4
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d013      	beq.n	8004a68 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f022 0204 	bic.w	r2, r2, #4
 8004a4e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a54:	2208      	movs	r2, #8
 8004a56:	409a      	lsls	r2, r3
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a60:	f043 0201 	orr.w	r2, r3, #1
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	409a      	lsls	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4013      	ands	r3, r2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d012      	beq.n	8004a9e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00b      	beq.n	8004a9e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	409a      	lsls	r2, r3
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a96:	f043 0202 	orr.w	r2, r3, #2
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aa2:	2204      	movs	r2, #4
 8004aa4:	409a      	lsls	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d012      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0302 	and.w	r3, r3, #2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00b      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac0:	2204      	movs	r2, #4
 8004ac2:	409a      	lsls	r2, r3
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004acc:	f043 0204 	orr.w	r2, r3, #4
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ad8:	2210      	movs	r2, #16
 8004ada:	409a      	lsls	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	4013      	ands	r3, r2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d043      	beq.n	8004b6c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0308 	and.w	r3, r3, #8
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d03c      	beq.n	8004b6c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af6:	2210      	movs	r2, #16
 8004af8:	409a      	lsls	r2, r3
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d018      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d108      	bne.n	8004b2c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d024      	beq.n	8004b6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	4798      	blx	r3
 8004b2a:	e01f      	b.n	8004b6c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d01b      	beq.n	8004b6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	4798      	blx	r3
 8004b3c:	e016      	b.n	8004b6c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d107      	bne.n	8004b5c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 0208 	bic.w	r2, r2, #8
 8004b5a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d003      	beq.n	8004b6c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b70:	2220      	movs	r2, #32
 8004b72:	409a      	lsls	r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	4013      	ands	r3, r2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f000 808f 	beq.w	8004c9c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0310 	and.w	r3, r3, #16
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f000 8087 	beq.w	8004c9c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b92:	2220      	movs	r2, #32
 8004b94:	409a      	lsls	r2, r3
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	2b05      	cmp	r3, #5
 8004ba4:	d136      	bne.n	8004c14 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f022 0216 	bic.w	r2, r2, #22
 8004bb4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	695a      	ldr	r2, [r3, #20]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bc4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d103      	bne.n	8004bd6 <HAL_DMA_IRQHandler+0x1da>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d007      	beq.n	8004be6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 0208 	bic.w	r2, r2, #8
 8004be4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bea:	223f      	movs	r2, #63	; 0x3f
 8004bec:	409a      	lsls	r2, r3
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d07e      	beq.n	8004d08 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	4798      	blx	r3
        }
        return;
 8004c12:	e079      	b.n	8004d08 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d01d      	beq.n	8004c5e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d10d      	bne.n	8004c4c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d031      	beq.n	8004c9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	4798      	blx	r3
 8004c40:	e02c      	b.n	8004c9c <HAL_DMA_IRQHandler+0x2a0>
 8004c42:	bf00      	nop
 8004c44:	20000004 	.word	0x20000004
 8004c48:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d023      	beq.n	8004c9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	4798      	blx	r3
 8004c5c:	e01e      	b.n	8004c9c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d10f      	bne.n	8004c8c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f022 0210 	bic.w	r2, r2, #16
 8004c7a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d003      	beq.n	8004c9c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d032      	beq.n	8004d0a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca8:	f003 0301 	and.w	r3, r3, #1
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d022      	beq.n	8004cf6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2205      	movs	r2, #5
 8004cb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f022 0201 	bic.w	r2, r2, #1
 8004cc6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	60bb      	str	r3, [r7, #8]
 8004cce:	697a      	ldr	r2, [r7, #20]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d307      	bcc.n	8004ce4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1f2      	bne.n	8004cc8 <HAL_DMA_IRQHandler+0x2cc>
 8004ce2:	e000      	b.n	8004ce6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004ce4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d005      	beq.n	8004d0a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	4798      	blx	r3
 8004d06:	e000      	b.n	8004d0a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004d08:	bf00      	nop
    }
  }
}
 8004d0a:	3718      	adds	r7, #24
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
 8004d1c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004d2c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	683a      	ldr	r2, [r7, #0]
 8004d34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	2b40      	cmp	r3, #64	; 0x40
 8004d3c:	d108      	bne.n	8004d50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004d4e:	e007      	b.n	8004d60 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68ba      	ldr	r2, [r7, #8]
 8004d56:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	60da      	str	r2, [r3, #12]
}
 8004d60:	bf00      	nop
 8004d62:	3714      	adds	r7, #20
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	3b10      	subs	r3, #16
 8004d7c:	4a14      	ldr	r2, [pc, #80]	; (8004dd0 <DMA_CalcBaseAndBitshift+0x64>)
 8004d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d82:	091b      	lsrs	r3, r3, #4
 8004d84:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004d86:	4a13      	ldr	r2, [pc, #76]	; (8004dd4 <DMA_CalcBaseAndBitshift+0x68>)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	461a      	mov	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2b03      	cmp	r3, #3
 8004d98:	d909      	bls.n	8004dae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004da2:	f023 0303 	bic.w	r3, r3, #3
 8004da6:	1d1a      	adds	r2, r3, #4
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	659a      	str	r2, [r3, #88]	; 0x58
 8004dac:	e007      	b.n	8004dbe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004db6:	f023 0303 	bic.w	r3, r3, #3
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	aaaaaaab 	.word	0xaaaaaaab
 8004dd4:	0800beac 	.word	0x0800beac

08004dd8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004de0:	2300      	movs	r3, #0
 8004de2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d11f      	bne.n	8004e32 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	2b03      	cmp	r3, #3
 8004df6:	d856      	bhi.n	8004ea6 <DMA_CheckFifoParam+0xce>
 8004df8:	a201      	add	r2, pc, #4	; (adr r2, 8004e00 <DMA_CheckFifoParam+0x28>)
 8004dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfe:	bf00      	nop
 8004e00:	08004e11 	.word	0x08004e11
 8004e04:	08004e23 	.word	0x08004e23
 8004e08:	08004e11 	.word	0x08004e11
 8004e0c:	08004ea7 	.word	0x08004ea7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d046      	beq.n	8004eaa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e20:	e043      	b.n	8004eaa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e26:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e2a:	d140      	bne.n	8004eae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e30:	e03d      	b.n	8004eae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e3a:	d121      	bne.n	8004e80 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	2b03      	cmp	r3, #3
 8004e40:	d837      	bhi.n	8004eb2 <DMA_CheckFifoParam+0xda>
 8004e42:	a201      	add	r2, pc, #4	; (adr r2, 8004e48 <DMA_CheckFifoParam+0x70>)
 8004e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e48:	08004e59 	.word	0x08004e59
 8004e4c:	08004e5f 	.word	0x08004e5f
 8004e50:	08004e59 	.word	0x08004e59
 8004e54:	08004e71 	.word	0x08004e71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e5c:	e030      	b.n	8004ec0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d025      	beq.n	8004eb6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e6e:	e022      	b.n	8004eb6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e74:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e78:	d11f      	bne.n	8004eba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004e7e:	e01c      	b.n	8004eba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d903      	bls.n	8004e8e <DMA_CheckFifoParam+0xb6>
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	2b03      	cmp	r3, #3
 8004e8a:	d003      	beq.n	8004e94 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004e8c:	e018      	b.n	8004ec0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	73fb      	strb	r3, [r7, #15]
      break;
 8004e92:	e015      	b.n	8004ec0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00e      	beq.n	8004ebe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ea4:	e00b      	b.n	8004ebe <DMA_CheckFifoParam+0xe6>
      break;
 8004ea6:	bf00      	nop
 8004ea8:	e00a      	b.n	8004ec0 <DMA_CheckFifoParam+0xe8>
      break;
 8004eaa:	bf00      	nop
 8004eac:	e008      	b.n	8004ec0 <DMA_CheckFifoParam+0xe8>
      break;
 8004eae:	bf00      	nop
 8004eb0:	e006      	b.n	8004ec0 <DMA_CheckFifoParam+0xe8>
      break;
 8004eb2:	bf00      	nop
 8004eb4:	e004      	b.n	8004ec0 <DMA_CheckFifoParam+0xe8>
      break;
 8004eb6:	bf00      	nop
 8004eb8:	e002      	b.n	8004ec0 <DMA_CheckFifoParam+0xe8>
      break;   
 8004eba:	bf00      	nop
 8004ebc:	e000      	b.n	8004ec0 <DMA_CheckFifoParam+0xe8>
      break;
 8004ebe:	bf00      	nop
    }
  } 
  
  return status; 
 8004ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3714      	adds	r7, #20
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop

08004ed0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e06c      	b.n	8004fbc <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d106      	bne.n	8004efa <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2223      	movs	r2, #35	; 0x23
 8004ef0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f7fd fd9f 	bl	8002a38 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004efa:	2300      	movs	r3, #0
 8004efc:	60bb      	str	r3, [r7, #8]
 8004efe:	4b31      	ldr	r3, [pc, #196]	; (8004fc4 <HAL_ETH_Init+0xf4>)
 8004f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f02:	4a30      	ldr	r2, [pc, #192]	; (8004fc4 <HAL_ETH_Init+0xf4>)
 8004f04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f08:	6453      	str	r3, [r2, #68]	; 0x44
 8004f0a:	4b2e      	ldr	r3, [pc, #184]	; (8004fc4 <HAL_ETH_Init+0xf4>)
 8004f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f12:	60bb      	str	r3, [r7, #8]
 8004f14:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004f16:	4b2c      	ldr	r3, [pc, #176]	; (8004fc8 <HAL_ETH_Init+0xf8>)
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	4a2b      	ldr	r2, [pc, #172]	; (8004fc8 <HAL_ETH_Init+0xf8>)
 8004f1c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004f20:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004f22:	4b29      	ldr	r3, [pc, #164]	; (8004fc8 <HAL_ETH_Init+0xf8>)
 8004f24:	685a      	ldr	r2, [r3, #4]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	4927      	ldr	r1, [pc, #156]	; (8004fc8 <HAL_ETH_Init+0xf8>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8004f30:	4b25      	ldr	r3, [pc, #148]	; (8004fc8 <HAL_ETH_Init+0xf8>)
 8004f32:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	6812      	ldr	r2, [r2, #0]
 8004f42:	f043 0301 	orr.w	r3, r3, #1
 8004f46:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004f4a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f4c:	f7fe fd40 	bl	80039d0 <HAL_GetTick>
 8004f50:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004f52:	e011      	b.n	8004f78 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004f54:	f7fe fd3c 	bl	80039d0 <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004f62:	d909      	bls.n	8004f78 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2204      	movs	r2, #4
 8004f68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	22e0      	movs	r2, #224	; 0xe0
 8004f70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e021      	b.n	8004fbc <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0301 	and.w	r3, r3, #1
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1e4      	bne.n	8004f54 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 f958 	bl	8005240 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 f9ff 	bl	8005394 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 fa55 	bl	8005446 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	2100      	movs	r1, #0
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 f9bd 	bl	8005324 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2210      	movs	r2, #16
 8004fb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3710      	adds	r7, #16
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	40023800 	.word	0x40023800
 8004fc8:	40013800 	.word	0x40013800

08004fcc <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	4b51      	ldr	r3, [pc, #324]	; (8005128 <ETH_SetMACConfig+0x15c>)
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	7c1b      	ldrb	r3, [r3, #16]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d102      	bne.n	8004ff4 <ETH_SetMACConfig+0x28>
 8004fee:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004ff2:	e000      	b.n	8004ff6 <ETH_SetMACConfig+0x2a>
 8004ff4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	7c5b      	ldrb	r3, [r3, #17]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d102      	bne.n	8005004 <ETH_SetMACConfig+0x38>
 8004ffe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005002:	e000      	b.n	8005006 <ETH_SetMACConfig+0x3a>
 8005004:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8005006:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800500c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	7fdb      	ldrb	r3, [r3, #31]
 8005012:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8005014:	431a      	orrs	r2, r3
                        macconf->Speed |
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800501a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800501c:	683a      	ldr	r2, [r7, #0]
 800501e:	7f92      	ldrb	r2, [r2, #30]
 8005020:	2a00      	cmp	r2, #0
 8005022:	d102      	bne.n	800502a <ETH_SetMACConfig+0x5e>
 8005024:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005028:	e000      	b.n	800502c <ETH_SetMACConfig+0x60>
 800502a:	2200      	movs	r2, #0
                        macconf->Speed |
 800502c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	7f1b      	ldrb	r3, [r3, #28]
 8005032:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8005034:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800503a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	791b      	ldrb	r3, [r3, #4]
 8005040:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8005042:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8005044:	683a      	ldr	r2, [r7, #0]
 8005046:	f892 2020 	ldrb.w	r2, [r2, #32]
 800504a:	2a00      	cmp	r2, #0
 800504c:	d102      	bne.n	8005054 <ETH_SetMACConfig+0x88>
 800504e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005052:	e000      	b.n	8005056 <ETH_SetMACConfig+0x8a>
 8005054:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8005056:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	7bdb      	ldrb	r3, [r3, #15]
 800505c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800505e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8005064:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800506c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800506e:	4313      	orrs	r3, r2
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	4313      	orrs	r3, r2
 8005074:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005086:	2001      	movs	r0, #1
 8005088:	f7fe fcae 	bl	80039e8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	f64f 7341 	movw	r3, #65345	; 0xff41
 80050a2:	4013      	ands	r3, r2
 80050a4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050aa:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80050ac:	683a      	ldr	r2, [r7, #0]
 80050ae:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80050b2:	2a00      	cmp	r2, #0
 80050b4:	d101      	bne.n	80050ba <ETH_SetMACConfig+0xee>
 80050b6:	2280      	movs	r2, #128	; 0x80
 80050b8:	e000      	b.n	80050bc <ETH_SetMACConfig+0xf0>
 80050ba:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80050bc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80050c2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80050c4:	683a      	ldr	r2, [r7, #0]
 80050c6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80050ca:	2a01      	cmp	r2, #1
 80050cc:	d101      	bne.n	80050d2 <ETH_SetMACConfig+0x106>
 80050ce:	2208      	movs	r2, #8
 80050d0:	e000      	b.n	80050d4 <ETH_SetMACConfig+0x108>
 80050d2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80050d4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80050d6:	683a      	ldr	r2, [r7, #0]
 80050d8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80050dc:	2a01      	cmp	r2, #1
 80050de:	d101      	bne.n	80050e4 <ETH_SetMACConfig+0x118>
 80050e0:	2204      	movs	r2, #4
 80050e2:	e000      	b.n	80050e6 <ETH_SetMACConfig+0x11a>
 80050e4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80050e6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80050e8:	683a      	ldr	r2, [r7, #0]
 80050ea:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80050ee:	2a01      	cmp	r2, #1
 80050f0:	d101      	bne.n	80050f6 <ETH_SetMACConfig+0x12a>
 80050f2:	2202      	movs	r2, #2
 80050f4:	e000      	b.n	80050f8 <ETH_SetMACConfig+0x12c>
 80050f6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80050f8:	4313      	orrs	r3, r2
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005110:	2001      	movs	r0, #1
 8005112:	f7fe fc69 	bl	80039e8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	619a      	str	r2, [r3, #24]
}
 800511e:	bf00      	nop
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	ff20810f 	.word	0xff20810f

0800512c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800513e:	699b      	ldr	r3, [r3, #24]
 8005140:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	4b3d      	ldr	r3, [pc, #244]	; (800523c <ETH_SetDMAConfig+0x110>)
 8005146:	4013      	ands	r3, r2
 8005148:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	7b1b      	ldrb	r3, [r3, #12]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d102      	bne.n	8005158 <ETH_SetDMAConfig+0x2c>
 8005152:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005156:	e000      	b.n	800515a <ETH_SetDMAConfig+0x2e>
 8005158:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	7b5b      	ldrb	r3, [r3, #13]
 800515e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005160:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8005162:	683a      	ldr	r2, [r7, #0]
 8005164:	7f52      	ldrb	r2, [r2, #29]
 8005166:	2a00      	cmp	r2, #0
 8005168:	d102      	bne.n	8005170 <ETH_SetDMAConfig+0x44>
 800516a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800516e:	e000      	b.n	8005172 <ETH_SetDMAConfig+0x46>
 8005170:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8005172:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	7b9b      	ldrb	r3, [r3, #14]
 8005178:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800517a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005180:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	7f1b      	ldrb	r3, [r3, #28]
 8005186:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8005188:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	7f9b      	ldrb	r3, [r3, #30]
 800518e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8005190:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005196:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800519e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80051a0:	4313      	orrs	r3, r2
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051b0:	461a      	mov	r2, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80051c2:	2001      	movs	r0, #1
 80051c4:	f7fe fc10 	bl	80039e8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051d0:	461a      	mov	r2, r3
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	791b      	ldrb	r3, [r3, #4]
 80051da:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80051e0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80051e6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80051ec:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80051f4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80051f6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80051fe:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005204:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	6812      	ldr	r2, [r2, #0]
 800520a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800520e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005212:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005220:	2001      	movs	r0, #1
 8005222:	f7fe fbe1 	bl	80039e8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800522e:	461a      	mov	r2, r3
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6013      	str	r3, [r2, #0]
}
 8005234:	bf00      	nop
 8005236:	3710      	adds	r7, #16
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	f8de3f23 	.word	0xf8de3f23

08005240 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b0a6      	sub	sp, #152	; 0x98
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8005248:	2301      	movs	r3, #1
 800524a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800524e:	2301      	movs	r3, #1
 8005250:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8005254:	2300      	movs	r3, #0
 8005256:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005258:	2300      	movs	r3, #0
 800525a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800525e:	2301      	movs	r3, #1
 8005260:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8005264:	2300      	movs	r3, #0
 8005266:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800526a:	2301      	movs	r3, #1
 800526c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8005270:	2300      	movs	r3, #0
 8005272:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8005276:	2300      	movs	r3, #0
 8005278:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800527c:	2300      	movs	r3, #0
 800527e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8005280:	2300      	movs	r3, #0
 8005282:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8005286:	2300      	movs	r3, #0
 8005288:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800528a:	2300      	movs	r3, #0
 800528c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8005290:	2300      	movs	r3, #0
 8005292:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005296:	2300      	movs	r3, #0
 8005298:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800529c:	2300      	movs	r3, #0
 800529e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80052a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80052a6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80052a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80052ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80052ae:	2300      	movs	r3, #0
 80052b0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80052b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80052b8:	4619      	mov	r1, r3
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f7ff fe86 	bl	8004fcc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80052c0:	2301      	movs	r3, #1
 80052c2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80052c4:	2301      	movs	r3, #1
 80052c6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80052c8:	2301      	movs	r3, #1
 80052ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80052ce:	2301      	movs	r3, #1
 80052d0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80052d2:	2300      	movs	r3, #0
 80052d4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80052d6:	2300      	movs	r3, #0
 80052d8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80052dc:	2300      	movs	r3, #0
 80052de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80052e2:	2300      	movs	r3, #0
 80052e4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80052e6:	2301      	movs	r3, #1
 80052e8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80052ec:	2301      	movs	r3, #1
 80052ee:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80052f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80052f4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80052f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80052fa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80052fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005300:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8005302:	2301      	movs	r3, #1
 8005304:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8005308:	2300      	movs	r3, #0
 800530a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800530c:	2300      	movs	r3, #0
 800530e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005310:	f107 0308 	add.w	r3, r7, #8
 8005314:	4619      	mov	r1, r3
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f7ff ff08 	bl	800512c <ETH_SetDMAConfig>
}
 800531c:	bf00      	nop
 800531e:	3798      	adds	r7, #152	; 0x98
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005324:	b480      	push	{r7}
 8005326:	b087      	sub	sp, #28
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	3305      	adds	r3, #5
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	021b      	lsls	r3, r3, #8
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	3204      	adds	r2, #4
 800533c:	7812      	ldrb	r2, [r2, #0]
 800533e:	4313      	orrs	r3, r2
 8005340:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	4b11      	ldr	r3, [pc, #68]	; (800538c <ETH_MACAddressConfig+0x68>)
 8005346:	4413      	add	r3, r2
 8005348:	461a      	mov	r2, r3
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	3303      	adds	r3, #3
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	061a      	lsls	r2, r3, #24
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	3302      	adds	r3, #2
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	041b      	lsls	r3, r3, #16
 800535e:	431a      	orrs	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	3301      	adds	r3, #1
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	021b      	lsls	r3, r3, #8
 8005368:	4313      	orrs	r3, r2
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	7812      	ldrb	r2, [r2, #0]
 800536e:	4313      	orrs	r3, r2
 8005370:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8005372:	68ba      	ldr	r2, [r7, #8]
 8005374:	4b06      	ldr	r3, [pc, #24]	; (8005390 <ETH_MACAddressConfig+0x6c>)
 8005376:	4413      	add	r3, r2
 8005378:	461a      	mov	r2, r3
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	6013      	str	r3, [r2, #0]
}
 800537e:	bf00      	nop
 8005380:	371c      	adds	r7, #28
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	40028040 	.word	0x40028040
 8005390:	40028044 	.word	0x40028044

08005394 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800539c:	2300      	movs	r3, #0
 800539e:	60fb      	str	r3, [r7, #12]
 80053a0:	e03e      	b.n	8005420 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	68d9      	ldr	r1, [r3, #12]
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	4613      	mov	r3, r2
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	4413      	add	r3, r2
 80053ae:	00db      	lsls	r3, r3, #3
 80053b0:	440b      	add	r3, r1
 80053b2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	2200      	movs	r2, #0
 80053b8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	2200      	movs	r2, #0
 80053be:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	2200      	movs	r2, #0
 80053c4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	2200      	movs	r2, #0
 80053ca:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80053cc:	68b9      	ldr	r1, [r7, #8]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	3206      	adds	r2, #6
 80053d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d80c      	bhi.n	8005404 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	68d9      	ldr	r1, [r3, #12]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	1c5a      	adds	r2, r3, #1
 80053f2:	4613      	mov	r3, r2
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	4413      	add	r3, r2
 80053f8:	00db      	lsls	r3, r3, #3
 80053fa:	440b      	add	r3, r1
 80053fc:	461a      	mov	r2, r3
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	60da      	str	r2, [r3, #12]
 8005402:	e004      	b.n	800540e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	461a      	mov	r2, r3
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	3301      	adds	r3, #1
 800541e:	60fb      	str	r3, [r7, #12]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2b03      	cmp	r3, #3
 8005424:	d9bd      	bls.n	80053a2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	68da      	ldr	r2, [r3, #12]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005438:	611a      	str	r2, [r3, #16]
}
 800543a:	bf00      	nop
 800543c:	3714      	adds	r7, #20
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr

08005446 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005446:	b480      	push	{r7}
 8005448:	b085      	sub	sp, #20
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800544e:	2300      	movs	r3, #0
 8005450:	60fb      	str	r3, [r7, #12]
 8005452:	e046      	b.n	80054e2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6919      	ldr	r1, [r3, #16]
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	4613      	mov	r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	4413      	add	r3, r2
 8005460:	00db      	lsls	r3, r3, #3
 8005462:	440b      	add	r3, r1
 8005464:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	2200      	movs	r2, #0
 800546a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	2200      	movs	r2, #0
 8005470:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	2200      	movs	r2, #0
 8005476:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	2200      	movs	r2, #0
 800547c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	2200      	movs	r2, #0
 8005482:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	2200      	movs	r2, #0
 8005488:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005490:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8005498:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80054a6:	68b9      	ldr	r1, [r7, #8]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	3212      	adds	r2, #18
 80054ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d80c      	bhi.n	80054d2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6919      	ldr	r1, [r3, #16]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	1c5a      	adds	r2, r3, #1
 80054c0:	4613      	mov	r3, r2
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	4413      	add	r3, r2
 80054c6:	00db      	lsls	r3, r3, #3
 80054c8:	440b      	add	r3, r1
 80054ca:	461a      	mov	r2, r3
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	60da      	str	r2, [r3, #12]
 80054d0:	e004      	b.n	80054dc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	461a      	mov	r2, r3
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	3301      	adds	r3, #1
 80054e0:	60fb      	str	r3, [r7, #12]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2b03      	cmp	r3, #3
 80054e6:	d9b5      	bls.n	8005454 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	691a      	ldr	r2, [r3, #16]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005512:	60da      	str	r2, [r3, #12]
}
 8005514:	bf00      	nop
 8005516:	3714      	adds	r7, #20
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005520:	b480      	push	{r7}
 8005522:	b089      	sub	sp, #36	; 0x24
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800552a:	2300      	movs	r3, #0
 800552c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800552e:	2300      	movs	r3, #0
 8005530:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005532:	2300      	movs	r3, #0
 8005534:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005536:	2300      	movs	r3, #0
 8005538:	61fb      	str	r3, [r7, #28]
 800553a:	e177      	b.n	800582c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800553c:	2201      	movs	r2, #1
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	fa02 f303 	lsl.w	r3, r2, r3
 8005544:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	4013      	ands	r3, r2
 800554e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	429a      	cmp	r2, r3
 8005556:	f040 8166 	bne.w	8005826 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f003 0303 	and.w	r3, r3, #3
 8005562:	2b01      	cmp	r3, #1
 8005564:	d005      	beq.n	8005572 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800556e:	2b02      	cmp	r3, #2
 8005570:	d130      	bne.n	80055d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	005b      	lsls	r3, r3, #1
 800557c:	2203      	movs	r2, #3
 800557e:	fa02 f303 	lsl.w	r3, r2, r3
 8005582:	43db      	mvns	r3, r3
 8005584:	69ba      	ldr	r2, [r7, #24]
 8005586:	4013      	ands	r3, r2
 8005588:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	68da      	ldr	r2, [r3, #12]
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	005b      	lsls	r3, r3, #1
 8005592:	fa02 f303 	lsl.w	r3, r2, r3
 8005596:	69ba      	ldr	r2, [r7, #24]
 8005598:	4313      	orrs	r3, r2
 800559a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	69ba      	ldr	r2, [r7, #24]
 80055a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80055a8:	2201      	movs	r2, #1
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	fa02 f303 	lsl.w	r3, r2, r3
 80055b0:	43db      	mvns	r3, r3
 80055b2:	69ba      	ldr	r2, [r7, #24]
 80055b4:	4013      	ands	r3, r2
 80055b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	091b      	lsrs	r3, r3, #4
 80055be:	f003 0201 	and.w	r2, r3, #1
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	fa02 f303 	lsl.w	r3, r2, r3
 80055c8:	69ba      	ldr	r2, [r7, #24]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	69ba      	ldr	r2, [r7, #24]
 80055d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	f003 0303 	and.w	r3, r3, #3
 80055dc:	2b03      	cmp	r3, #3
 80055de:	d017      	beq.n	8005610 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	005b      	lsls	r3, r3, #1
 80055ea:	2203      	movs	r2, #3
 80055ec:	fa02 f303 	lsl.w	r3, r2, r3
 80055f0:	43db      	mvns	r3, r3
 80055f2:	69ba      	ldr	r2, [r7, #24]
 80055f4:	4013      	ands	r3, r2
 80055f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	689a      	ldr	r2, [r3, #8]
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	005b      	lsls	r3, r3, #1
 8005600:	fa02 f303 	lsl.w	r3, r2, r3
 8005604:	69ba      	ldr	r2, [r7, #24]
 8005606:	4313      	orrs	r3, r2
 8005608:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	69ba      	ldr	r2, [r7, #24]
 800560e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	f003 0303 	and.w	r3, r3, #3
 8005618:	2b02      	cmp	r3, #2
 800561a:	d123      	bne.n	8005664 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	08da      	lsrs	r2, r3, #3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	3208      	adds	r2, #8
 8005624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005628:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	f003 0307 	and.w	r3, r3, #7
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	220f      	movs	r2, #15
 8005634:	fa02 f303 	lsl.w	r3, r2, r3
 8005638:	43db      	mvns	r3, r3
 800563a:	69ba      	ldr	r2, [r7, #24]
 800563c:	4013      	ands	r3, r2
 800563e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	691a      	ldr	r2, [r3, #16]
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	f003 0307 	and.w	r3, r3, #7
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	fa02 f303 	lsl.w	r3, r2, r3
 8005650:	69ba      	ldr	r2, [r7, #24]
 8005652:	4313      	orrs	r3, r2
 8005654:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	08da      	lsrs	r2, r3, #3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	3208      	adds	r2, #8
 800565e:	69b9      	ldr	r1, [r7, #24]
 8005660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	005b      	lsls	r3, r3, #1
 800566e:	2203      	movs	r2, #3
 8005670:	fa02 f303 	lsl.w	r3, r2, r3
 8005674:	43db      	mvns	r3, r3
 8005676:	69ba      	ldr	r2, [r7, #24]
 8005678:	4013      	ands	r3, r2
 800567a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f003 0203 	and.w	r2, r3, #3
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	005b      	lsls	r3, r3, #1
 8005688:	fa02 f303 	lsl.w	r3, r2, r3
 800568c:	69ba      	ldr	r2, [r7, #24]
 800568e:	4313      	orrs	r3, r2
 8005690:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	69ba      	ldr	r2, [r7, #24]
 8005696:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f000 80c0 	beq.w	8005826 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056a6:	2300      	movs	r3, #0
 80056a8:	60fb      	str	r3, [r7, #12]
 80056aa:	4b66      	ldr	r3, [pc, #408]	; (8005844 <HAL_GPIO_Init+0x324>)
 80056ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ae:	4a65      	ldr	r2, [pc, #404]	; (8005844 <HAL_GPIO_Init+0x324>)
 80056b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80056b4:	6453      	str	r3, [r2, #68]	; 0x44
 80056b6:	4b63      	ldr	r3, [pc, #396]	; (8005844 <HAL_GPIO_Init+0x324>)
 80056b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056be:	60fb      	str	r3, [r7, #12]
 80056c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80056c2:	4a61      	ldr	r2, [pc, #388]	; (8005848 <HAL_GPIO_Init+0x328>)
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	089b      	lsrs	r3, r3, #2
 80056c8:	3302      	adds	r3, #2
 80056ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	f003 0303 	and.w	r3, r3, #3
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	220f      	movs	r2, #15
 80056da:	fa02 f303 	lsl.w	r3, r2, r3
 80056de:	43db      	mvns	r3, r3
 80056e0:	69ba      	ldr	r2, [r7, #24]
 80056e2:	4013      	ands	r3, r2
 80056e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a58      	ldr	r2, [pc, #352]	; (800584c <HAL_GPIO_Init+0x32c>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d037      	beq.n	800575e <HAL_GPIO_Init+0x23e>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a57      	ldr	r2, [pc, #348]	; (8005850 <HAL_GPIO_Init+0x330>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d031      	beq.n	800575a <HAL_GPIO_Init+0x23a>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a56      	ldr	r2, [pc, #344]	; (8005854 <HAL_GPIO_Init+0x334>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d02b      	beq.n	8005756 <HAL_GPIO_Init+0x236>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a55      	ldr	r2, [pc, #340]	; (8005858 <HAL_GPIO_Init+0x338>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d025      	beq.n	8005752 <HAL_GPIO_Init+0x232>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a54      	ldr	r2, [pc, #336]	; (800585c <HAL_GPIO_Init+0x33c>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d01f      	beq.n	800574e <HAL_GPIO_Init+0x22e>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a53      	ldr	r2, [pc, #332]	; (8005860 <HAL_GPIO_Init+0x340>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d019      	beq.n	800574a <HAL_GPIO_Init+0x22a>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a52      	ldr	r2, [pc, #328]	; (8005864 <HAL_GPIO_Init+0x344>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d013      	beq.n	8005746 <HAL_GPIO_Init+0x226>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a51      	ldr	r2, [pc, #324]	; (8005868 <HAL_GPIO_Init+0x348>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d00d      	beq.n	8005742 <HAL_GPIO_Init+0x222>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a50      	ldr	r2, [pc, #320]	; (800586c <HAL_GPIO_Init+0x34c>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d007      	beq.n	800573e <HAL_GPIO_Init+0x21e>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a4f      	ldr	r2, [pc, #316]	; (8005870 <HAL_GPIO_Init+0x350>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d101      	bne.n	800573a <HAL_GPIO_Init+0x21a>
 8005736:	2309      	movs	r3, #9
 8005738:	e012      	b.n	8005760 <HAL_GPIO_Init+0x240>
 800573a:	230a      	movs	r3, #10
 800573c:	e010      	b.n	8005760 <HAL_GPIO_Init+0x240>
 800573e:	2308      	movs	r3, #8
 8005740:	e00e      	b.n	8005760 <HAL_GPIO_Init+0x240>
 8005742:	2307      	movs	r3, #7
 8005744:	e00c      	b.n	8005760 <HAL_GPIO_Init+0x240>
 8005746:	2306      	movs	r3, #6
 8005748:	e00a      	b.n	8005760 <HAL_GPIO_Init+0x240>
 800574a:	2305      	movs	r3, #5
 800574c:	e008      	b.n	8005760 <HAL_GPIO_Init+0x240>
 800574e:	2304      	movs	r3, #4
 8005750:	e006      	b.n	8005760 <HAL_GPIO_Init+0x240>
 8005752:	2303      	movs	r3, #3
 8005754:	e004      	b.n	8005760 <HAL_GPIO_Init+0x240>
 8005756:	2302      	movs	r3, #2
 8005758:	e002      	b.n	8005760 <HAL_GPIO_Init+0x240>
 800575a:	2301      	movs	r3, #1
 800575c:	e000      	b.n	8005760 <HAL_GPIO_Init+0x240>
 800575e:	2300      	movs	r3, #0
 8005760:	69fa      	ldr	r2, [r7, #28]
 8005762:	f002 0203 	and.w	r2, r2, #3
 8005766:	0092      	lsls	r2, r2, #2
 8005768:	4093      	lsls	r3, r2
 800576a:	69ba      	ldr	r2, [r7, #24]
 800576c:	4313      	orrs	r3, r2
 800576e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005770:	4935      	ldr	r1, [pc, #212]	; (8005848 <HAL_GPIO_Init+0x328>)
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	089b      	lsrs	r3, r3, #2
 8005776:	3302      	adds	r3, #2
 8005778:	69ba      	ldr	r2, [r7, #24]
 800577a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800577e:	4b3d      	ldr	r3, [pc, #244]	; (8005874 <HAL_GPIO_Init+0x354>)
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	43db      	mvns	r3, r3
 8005788:	69ba      	ldr	r2, [r7, #24]
 800578a:	4013      	ands	r3, r2
 800578c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d003      	beq.n	80057a2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800579a:	69ba      	ldr	r2, [r7, #24]
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	4313      	orrs	r3, r2
 80057a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80057a2:	4a34      	ldr	r2, [pc, #208]	; (8005874 <HAL_GPIO_Init+0x354>)
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80057a8:	4b32      	ldr	r3, [pc, #200]	; (8005874 <HAL_GPIO_Init+0x354>)
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	43db      	mvns	r3, r3
 80057b2:	69ba      	ldr	r2, [r7, #24]
 80057b4:	4013      	ands	r3, r2
 80057b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d003      	beq.n	80057cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80057c4:	69ba      	ldr	r2, [r7, #24]
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80057cc:	4a29      	ldr	r2, [pc, #164]	; (8005874 <HAL_GPIO_Init+0x354>)
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80057d2:	4b28      	ldr	r3, [pc, #160]	; (8005874 <HAL_GPIO_Init+0x354>)
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	43db      	mvns	r3, r3
 80057dc:	69ba      	ldr	r2, [r7, #24]
 80057de:	4013      	ands	r3, r2
 80057e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d003      	beq.n	80057f6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80057ee:	69ba      	ldr	r2, [r7, #24]
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80057f6:	4a1f      	ldr	r2, [pc, #124]	; (8005874 <HAL_GPIO_Init+0x354>)
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80057fc:	4b1d      	ldr	r3, [pc, #116]	; (8005874 <HAL_GPIO_Init+0x354>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	43db      	mvns	r3, r3
 8005806:	69ba      	ldr	r2, [r7, #24]
 8005808:	4013      	ands	r3, r2
 800580a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d003      	beq.n	8005820 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005818:	69ba      	ldr	r2, [r7, #24]
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	4313      	orrs	r3, r2
 800581e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005820:	4a14      	ldr	r2, [pc, #80]	; (8005874 <HAL_GPIO_Init+0x354>)
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	3301      	adds	r3, #1
 800582a:	61fb      	str	r3, [r7, #28]
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	2b0f      	cmp	r3, #15
 8005830:	f67f ae84 	bls.w	800553c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005834:	bf00      	nop
 8005836:	bf00      	nop
 8005838:	3724      	adds	r7, #36	; 0x24
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	40023800 	.word	0x40023800
 8005848:	40013800 	.word	0x40013800
 800584c:	40020000 	.word	0x40020000
 8005850:	40020400 	.word	0x40020400
 8005854:	40020800 	.word	0x40020800
 8005858:	40020c00 	.word	0x40020c00
 800585c:	40021000 	.word	0x40021000
 8005860:	40021400 	.word	0x40021400
 8005864:	40021800 	.word	0x40021800
 8005868:	40021c00 	.word	0x40021c00
 800586c:	40022000 	.word	0x40022000
 8005870:	40022400 	.word	0x40022400
 8005874:	40013c00 	.word	0x40013c00

08005878 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	460b      	mov	r3, r1
 8005882:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	691a      	ldr	r2, [r3, #16]
 8005888:	887b      	ldrh	r3, [r7, #2]
 800588a:	4013      	ands	r3, r2
 800588c:	2b00      	cmp	r3, #0
 800588e:	d002      	beq.n	8005896 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005890:	2301      	movs	r3, #1
 8005892:	73fb      	strb	r3, [r7, #15]
 8005894:	e001      	b.n	800589a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005896:	2300      	movs	r3, #0
 8005898:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800589a:	7bfb      	ldrb	r3, [r7, #15]
}
 800589c:	4618      	mov	r0, r3
 800589e:	3714      	adds	r7, #20
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	460b      	mov	r3, r1
 80058b2:	807b      	strh	r3, [r7, #2]
 80058b4:	4613      	mov	r3, r2
 80058b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80058b8:	787b      	ldrb	r3, [r7, #1]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d003      	beq.n	80058c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80058be:	887a      	ldrh	r2, [r7, #2]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80058c4:	e003      	b.n	80058ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80058c6:	887b      	ldrh	r3, [r7, #2]
 80058c8:	041a      	lsls	r2, r3, #16
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	619a      	str	r2, [r3, #24]
}
 80058ce:	bf00      	nop
 80058d0:	370c      	adds	r7, #12
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr

080058da <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80058da:	b580      	push	{r7, lr}
 80058dc:	b086      	sub	sp, #24
 80058de:	af02      	add	r7, sp, #8
 80058e0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d101      	bne.n	80058ec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e101      	b.n	8005af0 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d106      	bne.n	800590c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f7fd fbfe 	bl	8003108 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2203      	movs	r2, #3
 8005910:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800591a:	d102      	bne.n	8005922 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4618      	mov	r0, r3
 8005928:	f003 f962 	bl	8008bf0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6818      	ldr	r0, [r3, #0]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	7c1a      	ldrb	r2, [r3, #16]
 8005934:	f88d 2000 	strb.w	r2, [sp]
 8005938:	3304      	adds	r3, #4
 800593a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800593c:	f003 f8f4 	bl	8008b28 <USB_CoreInit>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d005      	beq.n	8005952 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2202      	movs	r2, #2
 800594a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e0ce      	b.n	8005af0 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2100      	movs	r1, #0
 8005958:	4618      	mov	r0, r3
 800595a:	f003 f95a 	bl	8008c12 <USB_SetCurrentMode>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d005      	beq.n	8005970 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2202      	movs	r2, #2
 8005968:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e0bf      	b.n	8005af0 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005970:	2300      	movs	r3, #0
 8005972:	73fb      	strb	r3, [r7, #15]
 8005974:	e04a      	b.n	8005a0c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005976:	7bfa      	ldrb	r2, [r7, #15]
 8005978:	6879      	ldr	r1, [r7, #4]
 800597a:	4613      	mov	r3, r2
 800597c:	00db      	lsls	r3, r3, #3
 800597e:	4413      	add	r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	440b      	add	r3, r1
 8005984:	3315      	adds	r3, #21
 8005986:	2201      	movs	r2, #1
 8005988:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800598a:	7bfa      	ldrb	r2, [r7, #15]
 800598c:	6879      	ldr	r1, [r7, #4]
 800598e:	4613      	mov	r3, r2
 8005990:	00db      	lsls	r3, r3, #3
 8005992:	4413      	add	r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	440b      	add	r3, r1
 8005998:	3314      	adds	r3, #20
 800599a:	7bfa      	ldrb	r2, [r7, #15]
 800599c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800599e:	7bfa      	ldrb	r2, [r7, #15]
 80059a0:	7bfb      	ldrb	r3, [r7, #15]
 80059a2:	b298      	uxth	r0, r3
 80059a4:	6879      	ldr	r1, [r7, #4]
 80059a6:	4613      	mov	r3, r2
 80059a8:	00db      	lsls	r3, r3, #3
 80059aa:	4413      	add	r3, r2
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	440b      	add	r3, r1
 80059b0:	332e      	adds	r3, #46	; 0x2e
 80059b2:	4602      	mov	r2, r0
 80059b4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80059b6:	7bfa      	ldrb	r2, [r7, #15]
 80059b8:	6879      	ldr	r1, [r7, #4]
 80059ba:	4613      	mov	r3, r2
 80059bc:	00db      	lsls	r3, r3, #3
 80059be:	4413      	add	r3, r2
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	440b      	add	r3, r1
 80059c4:	3318      	adds	r3, #24
 80059c6:	2200      	movs	r2, #0
 80059c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80059ca:	7bfa      	ldrb	r2, [r7, #15]
 80059cc:	6879      	ldr	r1, [r7, #4]
 80059ce:	4613      	mov	r3, r2
 80059d0:	00db      	lsls	r3, r3, #3
 80059d2:	4413      	add	r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	440b      	add	r3, r1
 80059d8:	331c      	adds	r3, #28
 80059da:	2200      	movs	r2, #0
 80059dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80059de:	7bfa      	ldrb	r2, [r7, #15]
 80059e0:	6879      	ldr	r1, [r7, #4]
 80059e2:	4613      	mov	r3, r2
 80059e4:	00db      	lsls	r3, r3, #3
 80059e6:	4413      	add	r3, r2
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	440b      	add	r3, r1
 80059ec:	3320      	adds	r3, #32
 80059ee:	2200      	movs	r2, #0
 80059f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80059f2:	7bfa      	ldrb	r2, [r7, #15]
 80059f4:	6879      	ldr	r1, [r7, #4]
 80059f6:	4613      	mov	r3, r2
 80059f8:	00db      	lsls	r3, r3, #3
 80059fa:	4413      	add	r3, r2
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	440b      	add	r3, r1
 8005a00:	3324      	adds	r3, #36	; 0x24
 8005a02:	2200      	movs	r2, #0
 8005a04:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a06:	7bfb      	ldrb	r3, [r7, #15]
 8005a08:	3301      	adds	r3, #1
 8005a0a:	73fb      	strb	r3, [r7, #15]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	791b      	ldrb	r3, [r3, #4]
 8005a10:	7bfa      	ldrb	r2, [r7, #15]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d3af      	bcc.n	8005976 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a16:	2300      	movs	r3, #0
 8005a18:	73fb      	strb	r3, [r7, #15]
 8005a1a:	e044      	b.n	8005aa6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005a1c:	7bfa      	ldrb	r2, [r7, #15]
 8005a1e:	6879      	ldr	r1, [r7, #4]
 8005a20:	4613      	mov	r3, r2
 8005a22:	00db      	lsls	r3, r3, #3
 8005a24:	4413      	add	r3, r2
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	440b      	add	r3, r1
 8005a2a:	f203 2355 	addw	r3, r3, #597	; 0x255
 8005a2e:	2200      	movs	r2, #0
 8005a30:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005a32:	7bfa      	ldrb	r2, [r7, #15]
 8005a34:	6879      	ldr	r1, [r7, #4]
 8005a36:	4613      	mov	r3, r2
 8005a38:	00db      	lsls	r3, r3, #3
 8005a3a:	4413      	add	r3, r2
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	440b      	add	r3, r1
 8005a40:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8005a44:	7bfa      	ldrb	r2, [r7, #15]
 8005a46:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005a48:	7bfa      	ldrb	r2, [r7, #15]
 8005a4a:	6879      	ldr	r1, [r7, #4]
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	00db      	lsls	r3, r3, #3
 8005a50:	4413      	add	r3, r2
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	440b      	add	r3, r1
 8005a56:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005a5e:	7bfa      	ldrb	r2, [r7, #15]
 8005a60:	6879      	ldr	r1, [r7, #4]
 8005a62:	4613      	mov	r3, r2
 8005a64:	00db      	lsls	r3, r3, #3
 8005a66:	4413      	add	r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	440b      	add	r3, r1
 8005a6c:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8005a70:	2200      	movs	r2, #0
 8005a72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005a74:	7bfa      	ldrb	r2, [r7, #15]
 8005a76:	6879      	ldr	r1, [r7, #4]
 8005a78:	4613      	mov	r3, r2
 8005a7a:	00db      	lsls	r3, r3, #3
 8005a7c:	4413      	add	r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	440b      	add	r3, r1
 8005a82:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8005a86:	2200      	movs	r2, #0
 8005a88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005a8a:	7bfa      	ldrb	r2, [r7, #15]
 8005a8c:	6879      	ldr	r1, [r7, #4]
 8005a8e:	4613      	mov	r3, r2
 8005a90:	00db      	lsls	r3, r3, #3
 8005a92:	4413      	add	r3, r2
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	440b      	add	r3, r1
 8005a98:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005aa0:	7bfb      	ldrb	r3, [r7, #15]
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	73fb      	strb	r3, [r7, #15]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	791b      	ldrb	r3, [r3, #4]
 8005aaa:	7bfa      	ldrb	r2, [r7, #15]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d3b5      	bcc.n	8005a1c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6818      	ldr	r0, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	7c1a      	ldrb	r2, [r3, #16]
 8005ab8:	f88d 2000 	strb.w	r2, [sp]
 8005abc:	3304      	adds	r3, #4
 8005abe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ac0:	f003 f8f4 	bl	8008cac <USB_DevInit>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d005      	beq.n	8005ad6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2202      	movs	r2, #2
 8005ace:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e00c      	b.n	8005af0 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f003 fabc 	bl	8009066 <USB_DevDisconnect>

  return HAL_OK;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3710      	adds	r7, #16
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b086      	sub	sp, #24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d101      	bne.n	8005b0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e267      	b.n	8005fda <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0301 	and.w	r3, r3, #1
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d075      	beq.n	8005c02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b16:	4b88      	ldr	r3, [pc, #544]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f003 030c 	and.w	r3, r3, #12
 8005b1e:	2b04      	cmp	r3, #4
 8005b20:	d00c      	beq.n	8005b3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b22:	4b85      	ldr	r3, [pc, #532]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b2a:	2b08      	cmp	r3, #8
 8005b2c:	d112      	bne.n	8005b54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b2e:	4b82      	ldr	r3, [pc, #520]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b3a:	d10b      	bne.n	8005b54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b3c:	4b7e      	ldr	r3, [pc, #504]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d05b      	beq.n	8005c00 <HAL_RCC_OscConfig+0x108>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d157      	bne.n	8005c00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	e242      	b.n	8005fda <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b5c:	d106      	bne.n	8005b6c <HAL_RCC_OscConfig+0x74>
 8005b5e:	4b76      	ldr	r3, [pc, #472]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a75      	ldr	r2, [pc, #468]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b68:	6013      	str	r3, [r2, #0]
 8005b6a:	e01d      	b.n	8005ba8 <HAL_RCC_OscConfig+0xb0>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b74:	d10c      	bne.n	8005b90 <HAL_RCC_OscConfig+0x98>
 8005b76:	4b70      	ldr	r3, [pc, #448]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a6f      	ldr	r2, [pc, #444]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005b7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b80:	6013      	str	r3, [r2, #0]
 8005b82:	4b6d      	ldr	r3, [pc, #436]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a6c      	ldr	r2, [pc, #432]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b8c:	6013      	str	r3, [r2, #0]
 8005b8e:	e00b      	b.n	8005ba8 <HAL_RCC_OscConfig+0xb0>
 8005b90:	4b69      	ldr	r3, [pc, #420]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a68      	ldr	r2, [pc, #416]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b9a:	6013      	str	r3, [r2, #0]
 8005b9c:	4b66      	ldr	r3, [pc, #408]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a65      	ldr	r2, [pc, #404]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005ba2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ba6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d013      	beq.n	8005bd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bb0:	f7fd ff0e 	bl	80039d0 <HAL_GetTick>
 8005bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bb6:	e008      	b.n	8005bca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bb8:	f7fd ff0a 	bl	80039d0 <HAL_GetTick>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	2b64      	cmp	r3, #100	; 0x64
 8005bc4:	d901      	bls.n	8005bca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	e207      	b.n	8005fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bca:	4b5b      	ldr	r3, [pc, #364]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d0f0      	beq.n	8005bb8 <HAL_RCC_OscConfig+0xc0>
 8005bd6:	e014      	b.n	8005c02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bd8:	f7fd fefa 	bl	80039d0 <HAL_GetTick>
 8005bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bde:	e008      	b.n	8005bf2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005be0:	f7fd fef6 	bl	80039d0 <HAL_GetTick>
 8005be4:	4602      	mov	r2, r0
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	2b64      	cmp	r3, #100	; 0x64
 8005bec:	d901      	bls.n	8005bf2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e1f3      	b.n	8005fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bf2:	4b51      	ldr	r3, [pc, #324]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1f0      	bne.n	8005be0 <HAL_RCC_OscConfig+0xe8>
 8005bfe:	e000      	b.n	8005c02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 0302 	and.w	r3, r3, #2
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d063      	beq.n	8005cd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c0e:	4b4a      	ldr	r3, [pc, #296]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	f003 030c 	and.w	r3, r3, #12
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00b      	beq.n	8005c32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c1a:	4b47      	ldr	r3, [pc, #284]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c22:	2b08      	cmp	r3, #8
 8005c24:	d11c      	bne.n	8005c60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c26:	4b44      	ldr	r3, [pc, #272]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d116      	bne.n	8005c60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c32:	4b41      	ldr	r3, [pc, #260]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0302 	and.w	r3, r3, #2
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d005      	beq.n	8005c4a <HAL_RCC_OscConfig+0x152>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d001      	beq.n	8005c4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e1c7      	b.n	8005fda <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c4a:	4b3b      	ldr	r3, [pc, #236]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	00db      	lsls	r3, r3, #3
 8005c58:	4937      	ldr	r1, [pc, #220]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c5e:	e03a      	b.n	8005cd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d020      	beq.n	8005caa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c68:	4b34      	ldr	r3, [pc, #208]	; (8005d3c <HAL_RCC_OscConfig+0x244>)
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c6e:	f7fd feaf 	bl	80039d0 <HAL_GetTick>
 8005c72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c74:	e008      	b.n	8005c88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c76:	f7fd feab 	bl	80039d0 <HAL_GetTick>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d901      	bls.n	8005c88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	e1a8      	b.n	8005fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c88:	4b2b      	ldr	r3, [pc, #172]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0302 	and.w	r3, r3, #2
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d0f0      	beq.n	8005c76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c94:	4b28      	ldr	r3, [pc, #160]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	00db      	lsls	r3, r3, #3
 8005ca2:	4925      	ldr	r1, [pc, #148]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	600b      	str	r3, [r1, #0]
 8005ca8:	e015      	b.n	8005cd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005caa:	4b24      	ldr	r3, [pc, #144]	; (8005d3c <HAL_RCC_OscConfig+0x244>)
 8005cac:	2200      	movs	r2, #0
 8005cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cb0:	f7fd fe8e 	bl	80039d0 <HAL_GetTick>
 8005cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cb6:	e008      	b.n	8005cca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cb8:	f7fd fe8a 	bl	80039d0 <HAL_GetTick>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	d901      	bls.n	8005cca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e187      	b.n	8005fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cca:	4b1b      	ldr	r3, [pc, #108]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0302 	and.w	r3, r3, #2
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d1f0      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 0308 	and.w	r3, r3, #8
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d036      	beq.n	8005d50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	695b      	ldr	r3, [r3, #20]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d016      	beq.n	8005d18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cea:	4b15      	ldr	r3, [pc, #84]	; (8005d40 <HAL_RCC_OscConfig+0x248>)
 8005cec:	2201      	movs	r2, #1
 8005cee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cf0:	f7fd fe6e 	bl	80039d0 <HAL_GetTick>
 8005cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cf6:	e008      	b.n	8005d0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cf8:	f7fd fe6a 	bl	80039d0 <HAL_GetTick>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d901      	bls.n	8005d0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e167      	b.n	8005fda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d0a:	4b0b      	ldr	r3, [pc, #44]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005d0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d0e:	f003 0302 	and.w	r3, r3, #2
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d0f0      	beq.n	8005cf8 <HAL_RCC_OscConfig+0x200>
 8005d16:	e01b      	b.n	8005d50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d18:	4b09      	ldr	r3, [pc, #36]	; (8005d40 <HAL_RCC_OscConfig+0x248>)
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d1e:	f7fd fe57 	bl	80039d0 <HAL_GetTick>
 8005d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d24:	e00e      	b.n	8005d44 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d26:	f7fd fe53 	bl	80039d0 <HAL_GetTick>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d907      	bls.n	8005d44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e150      	b.n	8005fda <HAL_RCC_OscConfig+0x4e2>
 8005d38:	40023800 	.word	0x40023800
 8005d3c:	42470000 	.word	0x42470000
 8005d40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d44:	4b88      	ldr	r3, [pc, #544]	; (8005f68 <HAL_RCC_OscConfig+0x470>)
 8005d46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d48:	f003 0302 	and.w	r3, r3, #2
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1ea      	bne.n	8005d26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 0304 	and.w	r3, r3, #4
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	f000 8097 	beq.w	8005e8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d62:	4b81      	ldr	r3, [pc, #516]	; (8005f68 <HAL_RCC_OscConfig+0x470>)
 8005d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d10f      	bne.n	8005d8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d6e:	2300      	movs	r3, #0
 8005d70:	60bb      	str	r3, [r7, #8]
 8005d72:	4b7d      	ldr	r3, [pc, #500]	; (8005f68 <HAL_RCC_OscConfig+0x470>)
 8005d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d76:	4a7c      	ldr	r2, [pc, #496]	; (8005f68 <HAL_RCC_OscConfig+0x470>)
 8005d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8005d7e:	4b7a      	ldr	r3, [pc, #488]	; (8005f68 <HAL_RCC_OscConfig+0x470>)
 8005d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d86:	60bb      	str	r3, [r7, #8]
 8005d88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d8e:	4b77      	ldr	r3, [pc, #476]	; (8005f6c <HAL_RCC_OscConfig+0x474>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d118      	bne.n	8005dcc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d9a:	4b74      	ldr	r3, [pc, #464]	; (8005f6c <HAL_RCC_OscConfig+0x474>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a73      	ldr	r2, [pc, #460]	; (8005f6c <HAL_RCC_OscConfig+0x474>)
 8005da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005da4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005da6:	f7fd fe13 	bl	80039d0 <HAL_GetTick>
 8005daa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dac:	e008      	b.n	8005dc0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dae:	f7fd fe0f 	bl	80039d0 <HAL_GetTick>
 8005db2:	4602      	mov	r2, r0
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	d901      	bls.n	8005dc0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	e10c      	b.n	8005fda <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dc0:	4b6a      	ldr	r3, [pc, #424]	; (8005f6c <HAL_RCC_OscConfig+0x474>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d0f0      	beq.n	8005dae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d106      	bne.n	8005de2 <HAL_RCC_OscConfig+0x2ea>
 8005dd4:	4b64      	ldr	r3, [pc, #400]	; (8005f68 <HAL_RCC_OscConfig+0x470>)
 8005dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd8:	4a63      	ldr	r2, [pc, #396]	; (8005f68 <HAL_RCC_OscConfig+0x470>)
 8005dda:	f043 0301 	orr.w	r3, r3, #1
 8005dde:	6713      	str	r3, [r2, #112]	; 0x70
 8005de0:	e01c      	b.n	8005e1c <HAL_RCC_OscConfig+0x324>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	2b05      	cmp	r3, #5
 8005de8:	d10c      	bne.n	8005e04 <HAL_RCC_OscConfig+0x30c>
 8005dea:	4b5f      	ldr	r3, [pc, #380]	; (8005f68 <HAL_RCC_OscConfig+0x470>)
 8005dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dee:	4a5e      	ldr	r2, [pc, #376]	; (8005f68 <HAL_RCC_OscConfig+0x470>)
 8005df0:	f043 0304 	orr.w	r3, r3, #4
 8005df4:	6713      	str	r3, [r2, #112]	; 0x70
 8005df6:	4b5c      	ldr	r3, [pc, #368]	; (8005f68 <HAL_RCC_OscConfig+0x470>)
 8005df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dfa:	4a5b      	ldr	r2, [pc, #364]	; (8005f68 <HAL_RCC_OscConfig+0x470>)
 8005dfc:	f043 0301 	orr.w	r3, r3, #1
 8005e00:	6713      	str	r3, [r2, #112]	; 0x70
 8005e02:	e00b      	b.n	8005e1c <HAL_RCC_OscConfig+0x324>
 8005e04:	4b58      	ldr	r3, [pc, #352]	; (8005f68 <HAL_RCC_OscConfig+0x470>)
 8005e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e08:	4a57      	ldr	r2, [pc, #348]	; (8005f68 <HAL_RCC_OscConfig+0x470>)
 8005e0a:	f023 0301 	bic.w	r3, r3, #1
 8005e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8005e10:	4b55      	ldr	r3, [pc, #340]	; (8005f68 <HAL_RCC_OscConfig+0x470>)
 8005e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e14:	4a54      	ldr	r2, [pc, #336]	; (8005f68 <HAL_RCC_OscConfig+0x470>)
 8005e16:	f023 0304 	bic.w	r3, r3, #4
 8005e1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d015      	beq.n	8005e50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e24:	f7fd fdd4 	bl	80039d0 <HAL_GetTick>
 8005e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e2a:	e00a      	b.n	8005e42 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e2c:	f7fd fdd0 	bl	80039d0 <HAL_GetTick>
 8005e30:	4602      	mov	r2, r0
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d901      	bls.n	8005e42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e0cb      	b.n	8005fda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e42:	4b49      	ldr	r3, [pc, #292]	; (8005f68 <HAL_RCC_OscConfig+0x470>)
 8005e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e46:	f003 0302 	and.w	r3, r3, #2
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d0ee      	beq.n	8005e2c <HAL_RCC_OscConfig+0x334>
 8005e4e:	e014      	b.n	8005e7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e50:	f7fd fdbe 	bl	80039d0 <HAL_GetTick>
 8005e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e56:	e00a      	b.n	8005e6e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e58:	f7fd fdba 	bl	80039d0 <HAL_GetTick>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d901      	bls.n	8005e6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	e0b5      	b.n	8005fda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e6e:	4b3e      	ldr	r3, [pc, #248]	; (8005f68 <HAL_RCC_OscConfig+0x470>)
 8005e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e72:	f003 0302 	and.w	r3, r3, #2
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d1ee      	bne.n	8005e58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e7a:	7dfb      	ldrb	r3, [r7, #23]
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d105      	bne.n	8005e8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e80:	4b39      	ldr	r3, [pc, #228]	; (8005f68 <HAL_RCC_OscConfig+0x470>)
 8005e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e84:	4a38      	ldr	r2, [pc, #224]	; (8005f68 <HAL_RCC_OscConfig+0x470>)
 8005e86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f000 80a1 	beq.w	8005fd8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e96:	4b34      	ldr	r3, [pc, #208]	; (8005f68 <HAL_RCC_OscConfig+0x470>)
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	f003 030c 	and.w	r3, r3, #12
 8005e9e:	2b08      	cmp	r3, #8
 8005ea0:	d05c      	beq.n	8005f5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d141      	bne.n	8005f2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005eaa:	4b31      	ldr	r3, [pc, #196]	; (8005f70 <HAL_RCC_OscConfig+0x478>)
 8005eac:	2200      	movs	r2, #0
 8005eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eb0:	f7fd fd8e 	bl	80039d0 <HAL_GetTick>
 8005eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005eb6:	e008      	b.n	8005eca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005eb8:	f7fd fd8a 	bl	80039d0 <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d901      	bls.n	8005eca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	e087      	b.n	8005fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005eca:	4b27      	ldr	r3, [pc, #156]	; (8005f68 <HAL_RCC_OscConfig+0x470>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d1f0      	bne.n	8005eb8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	69da      	ldr	r2, [r3, #28]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	431a      	orrs	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee4:	019b      	lsls	r3, r3, #6
 8005ee6:	431a      	orrs	r2, r3
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eec:	085b      	lsrs	r3, r3, #1
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	041b      	lsls	r3, r3, #16
 8005ef2:	431a      	orrs	r2, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef8:	061b      	lsls	r3, r3, #24
 8005efa:	491b      	ldr	r1, [pc, #108]	; (8005f68 <HAL_RCC_OscConfig+0x470>)
 8005efc:	4313      	orrs	r3, r2
 8005efe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f00:	4b1b      	ldr	r3, [pc, #108]	; (8005f70 <HAL_RCC_OscConfig+0x478>)
 8005f02:	2201      	movs	r2, #1
 8005f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f06:	f7fd fd63 	bl	80039d0 <HAL_GetTick>
 8005f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f0c:	e008      	b.n	8005f20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f0e:	f7fd fd5f 	bl	80039d0 <HAL_GetTick>
 8005f12:	4602      	mov	r2, r0
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d901      	bls.n	8005f20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e05c      	b.n	8005fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f20:	4b11      	ldr	r3, [pc, #68]	; (8005f68 <HAL_RCC_OscConfig+0x470>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d0f0      	beq.n	8005f0e <HAL_RCC_OscConfig+0x416>
 8005f2c:	e054      	b.n	8005fd8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f2e:	4b10      	ldr	r3, [pc, #64]	; (8005f70 <HAL_RCC_OscConfig+0x478>)
 8005f30:	2200      	movs	r2, #0
 8005f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f34:	f7fd fd4c 	bl	80039d0 <HAL_GetTick>
 8005f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f3a:	e008      	b.n	8005f4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f3c:	f7fd fd48 	bl	80039d0 <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	d901      	bls.n	8005f4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e045      	b.n	8005fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f4e:	4b06      	ldr	r3, [pc, #24]	; (8005f68 <HAL_RCC_OscConfig+0x470>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1f0      	bne.n	8005f3c <HAL_RCC_OscConfig+0x444>
 8005f5a:	e03d      	b.n	8005fd8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d107      	bne.n	8005f74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e038      	b.n	8005fda <HAL_RCC_OscConfig+0x4e2>
 8005f68:	40023800 	.word	0x40023800
 8005f6c:	40007000 	.word	0x40007000
 8005f70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005f74:	4b1b      	ldr	r3, [pc, #108]	; (8005fe4 <HAL_RCC_OscConfig+0x4ec>)
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	699b      	ldr	r3, [r3, #24]
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d028      	beq.n	8005fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d121      	bne.n	8005fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d11a      	bne.n	8005fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005faa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d111      	bne.n	8005fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fba:	085b      	lsrs	r3, r3, #1
 8005fbc:	3b01      	subs	r3, #1
 8005fbe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d107      	bne.n	8005fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d001      	beq.n	8005fd8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e000      	b.n	8005fda <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3718      	adds	r7, #24
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	40023800 	.word	0x40023800

08005fe8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d101      	bne.n	8005ffc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e0cc      	b.n	8006196 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ffc:	4b68      	ldr	r3, [pc, #416]	; (80061a0 <HAL_RCC_ClockConfig+0x1b8>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 030f 	and.w	r3, r3, #15
 8006004:	683a      	ldr	r2, [r7, #0]
 8006006:	429a      	cmp	r2, r3
 8006008:	d90c      	bls.n	8006024 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800600a:	4b65      	ldr	r3, [pc, #404]	; (80061a0 <HAL_RCC_ClockConfig+0x1b8>)
 800600c:	683a      	ldr	r2, [r7, #0]
 800600e:	b2d2      	uxtb	r2, r2
 8006010:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006012:	4b63      	ldr	r3, [pc, #396]	; (80061a0 <HAL_RCC_ClockConfig+0x1b8>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 030f 	and.w	r3, r3, #15
 800601a:	683a      	ldr	r2, [r7, #0]
 800601c:	429a      	cmp	r2, r3
 800601e:	d001      	beq.n	8006024 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e0b8      	b.n	8006196 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 0302 	and.w	r3, r3, #2
 800602c:	2b00      	cmp	r3, #0
 800602e:	d020      	beq.n	8006072 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 0304 	and.w	r3, r3, #4
 8006038:	2b00      	cmp	r3, #0
 800603a:	d005      	beq.n	8006048 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800603c:	4b59      	ldr	r3, [pc, #356]	; (80061a4 <HAL_RCC_ClockConfig+0x1bc>)
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	4a58      	ldr	r2, [pc, #352]	; (80061a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006042:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006046:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 0308 	and.w	r3, r3, #8
 8006050:	2b00      	cmp	r3, #0
 8006052:	d005      	beq.n	8006060 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006054:	4b53      	ldr	r3, [pc, #332]	; (80061a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	4a52      	ldr	r2, [pc, #328]	; (80061a4 <HAL_RCC_ClockConfig+0x1bc>)
 800605a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800605e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006060:	4b50      	ldr	r3, [pc, #320]	; (80061a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	494d      	ldr	r1, [pc, #308]	; (80061a4 <HAL_RCC_ClockConfig+0x1bc>)
 800606e:	4313      	orrs	r3, r2
 8006070:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0301 	and.w	r3, r3, #1
 800607a:	2b00      	cmp	r3, #0
 800607c:	d044      	beq.n	8006108 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	2b01      	cmp	r3, #1
 8006084:	d107      	bne.n	8006096 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006086:	4b47      	ldr	r3, [pc, #284]	; (80061a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d119      	bne.n	80060c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e07f      	b.n	8006196 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	2b02      	cmp	r3, #2
 800609c:	d003      	beq.n	80060a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060a2:	2b03      	cmp	r3, #3
 80060a4:	d107      	bne.n	80060b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060a6:	4b3f      	ldr	r3, [pc, #252]	; (80061a4 <HAL_RCC_ClockConfig+0x1bc>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d109      	bne.n	80060c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e06f      	b.n	8006196 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060b6:	4b3b      	ldr	r3, [pc, #236]	; (80061a4 <HAL_RCC_ClockConfig+0x1bc>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 0302 	and.w	r3, r3, #2
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d101      	bne.n	80060c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e067      	b.n	8006196 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80060c6:	4b37      	ldr	r3, [pc, #220]	; (80061a4 <HAL_RCC_ClockConfig+0x1bc>)
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	f023 0203 	bic.w	r2, r3, #3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	4934      	ldr	r1, [pc, #208]	; (80061a4 <HAL_RCC_ClockConfig+0x1bc>)
 80060d4:	4313      	orrs	r3, r2
 80060d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80060d8:	f7fd fc7a 	bl	80039d0 <HAL_GetTick>
 80060dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060de:	e00a      	b.n	80060f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060e0:	f7fd fc76 	bl	80039d0 <HAL_GetTick>
 80060e4:	4602      	mov	r2, r0
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d901      	bls.n	80060f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e04f      	b.n	8006196 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060f6:	4b2b      	ldr	r3, [pc, #172]	; (80061a4 <HAL_RCC_ClockConfig+0x1bc>)
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	f003 020c 	and.w	r2, r3, #12
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	429a      	cmp	r2, r3
 8006106:	d1eb      	bne.n	80060e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006108:	4b25      	ldr	r3, [pc, #148]	; (80061a0 <HAL_RCC_ClockConfig+0x1b8>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 030f 	and.w	r3, r3, #15
 8006110:	683a      	ldr	r2, [r7, #0]
 8006112:	429a      	cmp	r2, r3
 8006114:	d20c      	bcs.n	8006130 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006116:	4b22      	ldr	r3, [pc, #136]	; (80061a0 <HAL_RCC_ClockConfig+0x1b8>)
 8006118:	683a      	ldr	r2, [r7, #0]
 800611a:	b2d2      	uxtb	r2, r2
 800611c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800611e:	4b20      	ldr	r3, [pc, #128]	; (80061a0 <HAL_RCC_ClockConfig+0x1b8>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 030f 	and.w	r3, r3, #15
 8006126:	683a      	ldr	r2, [r7, #0]
 8006128:	429a      	cmp	r2, r3
 800612a:	d001      	beq.n	8006130 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e032      	b.n	8006196 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0304 	and.w	r3, r3, #4
 8006138:	2b00      	cmp	r3, #0
 800613a:	d008      	beq.n	800614e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800613c:	4b19      	ldr	r3, [pc, #100]	; (80061a4 <HAL_RCC_ClockConfig+0x1bc>)
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	4916      	ldr	r1, [pc, #88]	; (80061a4 <HAL_RCC_ClockConfig+0x1bc>)
 800614a:	4313      	orrs	r3, r2
 800614c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 0308 	and.w	r3, r3, #8
 8006156:	2b00      	cmp	r3, #0
 8006158:	d009      	beq.n	800616e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800615a:	4b12      	ldr	r3, [pc, #72]	; (80061a4 <HAL_RCC_ClockConfig+0x1bc>)
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	00db      	lsls	r3, r3, #3
 8006168:	490e      	ldr	r1, [pc, #56]	; (80061a4 <HAL_RCC_ClockConfig+0x1bc>)
 800616a:	4313      	orrs	r3, r2
 800616c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800616e:	f000 f821 	bl	80061b4 <HAL_RCC_GetSysClockFreq>
 8006172:	4602      	mov	r2, r0
 8006174:	4b0b      	ldr	r3, [pc, #44]	; (80061a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	091b      	lsrs	r3, r3, #4
 800617a:	f003 030f 	and.w	r3, r3, #15
 800617e:	490a      	ldr	r1, [pc, #40]	; (80061a8 <HAL_RCC_ClockConfig+0x1c0>)
 8006180:	5ccb      	ldrb	r3, [r1, r3]
 8006182:	fa22 f303 	lsr.w	r3, r2, r3
 8006186:	4a09      	ldr	r2, [pc, #36]	; (80061ac <HAL_RCC_ClockConfig+0x1c4>)
 8006188:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800618a:	4b09      	ldr	r3, [pc, #36]	; (80061b0 <HAL_RCC_ClockConfig+0x1c8>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4618      	mov	r0, r3
 8006190:	f7fd fbda 	bl	8003948 <HAL_InitTick>

  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3710      	adds	r7, #16
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	40023c00 	.word	0x40023c00
 80061a4:	40023800 	.word	0x40023800
 80061a8:	0800be94 	.word	0x0800be94
 80061ac:	20000004 	.word	0x20000004
 80061b0:	20000008 	.word	0x20000008

080061b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061b8:	b094      	sub	sp, #80	; 0x50
 80061ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80061bc:	2300      	movs	r3, #0
 80061be:	647b      	str	r3, [r7, #68]	; 0x44
 80061c0:	2300      	movs	r3, #0
 80061c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061c4:	2300      	movs	r3, #0
 80061c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80061c8:	2300      	movs	r3, #0
 80061ca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80061cc:	4b79      	ldr	r3, [pc, #484]	; (80063b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	f003 030c 	and.w	r3, r3, #12
 80061d4:	2b08      	cmp	r3, #8
 80061d6:	d00d      	beq.n	80061f4 <HAL_RCC_GetSysClockFreq+0x40>
 80061d8:	2b08      	cmp	r3, #8
 80061da:	f200 80e1 	bhi.w	80063a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d002      	beq.n	80061e8 <HAL_RCC_GetSysClockFreq+0x34>
 80061e2:	2b04      	cmp	r3, #4
 80061e4:	d003      	beq.n	80061ee <HAL_RCC_GetSysClockFreq+0x3a>
 80061e6:	e0db      	b.n	80063a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80061e8:	4b73      	ldr	r3, [pc, #460]	; (80063b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80061ea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80061ec:	e0db      	b.n	80063a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80061ee:	4b73      	ldr	r3, [pc, #460]	; (80063bc <HAL_RCC_GetSysClockFreq+0x208>)
 80061f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80061f2:	e0d8      	b.n	80063a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80061f4:	4b6f      	ldr	r3, [pc, #444]	; (80063b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061fc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80061fe:	4b6d      	ldr	r3, [pc, #436]	; (80063b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006206:	2b00      	cmp	r3, #0
 8006208:	d063      	beq.n	80062d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800620a:	4b6a      	ldr	r3, [pc, #424]	; (80063b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	099b      	lsrs	r3, r3, #6
 8006210:	2200      	movs	r2, #0
 8006212:	63bb      	str	r3, [r7, #56]	; 0x38
 8006214:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006218:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800621c:	633b      	str	r3, [r7, #48]	; 0x30
 800621e:	2300      	movs	r3, #0
 8006220:	637b      	str	r3, [r7, #52]	; 0x34
 8006222:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006226:	4622      	mov	r2, r4
 8006228:	462b      	mov	r3, r5
 800622a:	f04f 0000 	mov.w	r0, #0
 800622e:	f04f 0100 	mov.w	r1, #0
 8006232:	0159      	lsls	r1, r3, #5
 8006234:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006238:	0150      	lsls	r0, r2, #5
 800623a:	4602      	mov	r2, r0
 800623c:	460b      	mov	r3, r1
 800623e:	4621      	mov	r1, r4
 8006240:	1a51      	subs	r1, r2, r1
 8006242:	6139      	str	r1, [r7, #16]
 8006244:	4629      	mov	r1, r5
 8006246:	eb63 0301 	sbc.w	r3, r3, r1
 800624a:	617b      	str	r3, [r7, #20]
 800624c:	f04f 0200 	mov.w	r2, #0
 8006250:	f04f 0300 	mov.w	r3, #0
 8006254:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006258:	4659      	mov	r1, fp
 800625a:	018b      	lsls	r3, r1, #6
 800625c:	4651      	mov	r1, sl
 800625e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006262:	4651      	mov	r1, sl
 8006264:	018a      	lsls	r2, r1, #6
 8006266:	4651      	mov	r1, sl
 8006268:	ebb2 0801 	subs.w	r8, r2, r1
 800626c:	4659      	mov	r1, fp
 800626e:	eb63 0901 	sbc.w	r9, r3, r1
 8006272:	f04f 0200 	mov.w	r2, #0
 8006276:	f04f 0300 	mov.w	r3, #0
 800627a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800627e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006282:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006286:	4690      	mov	r8, r2
 8006288:	4699      	mov	r9, r3
 800628a:	4623      	mov	r3, r4
 800628c:	eb18 0303 	adds.w	r3, r8, r3
 8006290:	60bb      	str	r3, [r7, #8]
 8006292:	462b      	mov	r3, r5
 8006294:	eb49 0303 	adc.w	r3, r9, r3
 8006298:	60fb      	str	r3, [r7, #12]
 800629a:	f04f 0200 	mov.w	r2, #0
 800629e:	f04f 0300 	mov.w	r3, #0
 80062a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80062a6:	4629      	mov	r1, r5
 80062a8:	024b      	lsls	r3, r1, #9
 80062aa:	4621      	mov	r1, r4
 80062ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80062b0:	4621      	mov	r1, r4
 80062b2:	024a      	lsls	r2, r1, #9
 80062b4:	4610      	mov	r0, r2
 80062b6:	4619      	mov	r1, r3
 80062b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062ba:	2200      	movs	r2, #0
 80062bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80062be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80062c4:	f7fa fcf0 	bl	8000ca8 <__aeabi_uldivmod>
 80062c8:	4602      	mov	r2, r0
 80062ca:	460b      	mov	r3, r1
 80062cc:	4613      	mov	r3, r2
 80062ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062d0:	e058      	b.n	8006384 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062d2:	4b38      	ldr	r3, [pc, #224]	; (80063b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	099b      	lsrs	r3, r3, #6
 80062d8:	2200      	movs	r2, #0
 80062da:	4618      	mov	r0, r3
 80062dc:	4611      	mov	r1, r2
 80062de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80062e2:	623b      	str	r3, [r7, #32]
 80062e4:	2300      	movs	r3, #0
 80062e6:	627b      	str	r3, [r7, #36]	; 0x24
 80062e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80062ec:	4642      	mov	r2, r8
 80062ee:	464b      	mov	r3, r9
 80062f0:	f04f 0000 	mov.w	r0, #0
 80062f4:	f04f 0100 	mov.w	r1, #0
 80062f8:	0159      	lsls	r1, r3, #5
 80062fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80062fe:	0150      	lsls	r0, r2, #5
 8006300:	4602      	mov	r2, r0
 8006302:	460b      	mov	r3, r1
 8006304:	4641      	mov	r1, r8
 8006306:	ebb2 0a01 	subs.w	sl, r2, r1
 800630a:	4649      	mov	r1, r9
 800630c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006310:	f04f 0200 	mov.w	r2, #0
 8006314:	f04f 0300 	mov.w	r3, #0
 8006318:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800631c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006320:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006324:	ebb2 040a 	subs.w	r4, r2, sl
 8006328:	eb63 050b 	sbc.w	r5, r3, fp
 800632c:	f04f 0200 	mov.w	r2, #0
 8006330:	f04f 0300 	mov.w	r3, #0
 8006334:	00eb      	lsls	r3, r5, #3
 8006336:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800633a:	00e2      	lsls	r2, r4, #3
 800633c:	4614      	mov	r4, r2
 800633e:	461d      	mov	r5, r3
 8006340:	4643      	mov	r3, r8
 8006342:	18e3      	adds	r3, r4, r3
 8006344:	603b      	str	r3, [r7, #0]
 8006346:	464b      	mov	r3, r9
 8006348:	eb45 0303 	adc.w	r3, r5, r3
 800634c:	607b      	str	r3, [r7, #4]
 800634e:	f04f 0200 	mov.w	r2, #0
 8006352:	f04f 0300 	mov.w	r3, #0
 8006356:	e9d7 4500 	ldrd	r4, r5, [r7]
 800635a:	4629      	mov	r1, r5
 800635c:	028b      	lsls	r3, r1, #10
 800635e:	4621      	mov	r1, r4
 8006360:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006364:	4621      	mov	r1, r4
 8006366:	028a      	lsls	r2, r1, #10
 8006368:	4610      	mov	r0, r2
 800636a:	4619      	mov	r1, r3
 800636c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800636e:	2200      	movs	r2, #0
 8006370:	61bb      	str	r3, [r7, #24]
 8006372:	61fa      	str	r2, [r7, #28]
 8006374:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006378:	f7fa fc96 	bl	8000ca8 <__aeabi_uldivmod>
 800637c:	4602      	mov	r2, r0
 800637e:	460b      	mov	r3, r1
 8006380:	4613      	mov	r3, r2
 8006382:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006384:	4b0b      	ldr	r3, [pc, #44]	; (80063b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	0c1b      	lsrs	r3, r3, #16
 800638a:	f003 0303 	and.w	r3, r3, #3
 800638e:	3301      	adds	r3, #1
 8006390:	005b      	lsls	r3, r3, #1
 8006392:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006394:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006396:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006398:	fbb2 f3f3 	udiv	r3, r2, r3
 800639c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800639e:	e002      	b.n	80063a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80063a0:	4b05      	ldr	r3, [pc, #20]	; (80063b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80063a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80063a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80063a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3750      	adds	r7, #80	; 0x50
 80063ac:	46bd      	mov	sp, r7
 80063ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063b2:	bf00      	nop
 80063b4:	40023800 	.word	0x40023800
 80063b8:	00f42400 	.word	0x00f42400
 80063bc:	007a1200 	.word	0x007a1200

080063c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063c0:	b480      	push	{r7}
 80063c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063c4:	4b03      	ldr	r3, [pc, #12]	; (80063d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80063c6:	681b      	ldr	r3, [r3, #0]
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop
 80063d4:	20000004 	.word	0x20000004

080063d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80063dc:	f7ff fff0 	bl	80063c0 <HAL_RCC_GetHCLKFreq>
 80063e0:	4602      	mov	r2, r0
 80063e2:	4b05      	ldr	r3, [pc, #20]	; (80063f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	0a9b      	lsrs	r3, r3, #10
 80063e8:	f003 0307 	and.w	r3, r3, #7
 80063ec:	4903      	ldr	r1, [pc, #12]	; (80063fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80063ee:	5ccb      	ldrb	r3, [r1, r3]
 80063f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	40023800 	.word	0x40023800
 80063fc:	0800bea4 	.word	0x0800bea4

08006400 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006404:	f7ff ffdc 	bl	80063c0 <HAL_RCC_GetHCLKFreq>
 8006408:	4602      	mov	r2, r0
 800640a:	4b05      	ldr	r3, [pc, #20]	; (8006420 <HAL_RCC_GetPCLK2Freq+0x20>)
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	0b5b      	lsrs	r3, r3, #13
 8006410:	f003 0307 	and.w	r3, r3, #7
 8006414:	4903      	ldr	r1, [pc, #12]	; (8006424 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006416:	5ccb      	ldrb	r3, [r1, r3]
 8006418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800641c:	4618      	mov	r0, r3
 800641e:	bd80      	pop	{r7, pc}
 8006420:	40023800 	.word	0x40023800
 8006424:	0800bea4 	.word	0x0800bea4

08006428 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d101      	bne.n	800643a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e041      	b.n	80064be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006440:	b2db      	uxtb	r3, r3
 8006442:	2b00      	cmp	r3, #0
 8006444:	d106      	bne.n	8006454 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f7fc fbb8 	bl	8002bc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2202      	movs	r2, #2
 8006458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	3304      	adds	r3, #4
 8006464:	4619      	mov	r1, r3
 8006466:	4610      	mov	r0, r2
 8006468:	f000 ff0a 	bl	8007280 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3708      	adds	r7, #8
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
	...

080064c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d001      	beq.n	80064e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	e046      	b.n	800656e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2202      	movs	r2, #2
 80064e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a23      	ldr	r2, [pc, #140]	; (800657c <HAL_TIM_Base_Start+0xb4>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d022      	beq.n	8006538 <HAL_TIM_Base_Start+0x70>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064fa:	d01d      	beq.n	8006538 <HAL_TIM_Base_Start+0x70>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a1f      	ldr	r2, [pc, #124]	; (8006580 <HAL_TIM_Base_Start+0xb8>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d018      	beq.n	8006538 <HAL_TIM_Base_Start+0x70>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a1e      	ldr	r2, [pc, #120]	; (8006584 <HAL_TIM_Base_Start+0xbc>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d013      	beq.n	8006538 <HAL_TIM_Base_Start+0x70>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a1c      	ldr	r2, [pc, #112]	; (8006588 <HAL_TIM_Base_Start+0xc0>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d00e      	beq.n	8006538 <HAL_TIM_Base_Start+0x70>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a1b      	ldr	r2, [pc, #108]	; (800658c <HAL_TIM_Base_Start+0xc4>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d009      	beq.n	8006538 <HAL_TIM_Base_Start+0x70>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a19      	ldr	r2, [pc, #100]	; (8006590 <HAL_TIM_Base_Start+0xc8>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d004      	beq.n	8006538 <HAL_TIM_Base_Start+0x70>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a18      	ldr	r2, [pc, #96]	; (8006594 <HAL_TIM_Base_Start+0xcc>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d111      	bne.n	800655c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	f003 0307 	and.w	r3, r3, #7
 8006542:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2b06      	cmp	r3, #6
 8006548:	d010      	beq.n	800656c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f042 0201 	orr.w	r2, r2, #1
 8006558:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800655a:	e007      	b.n	800656c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f042 0201 	orr.w	r2, r2, #1
 800656a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	3714      	adds	r7, #20
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr
 800657a:	bf00      	nop
 800657c:	40010000 	.word	0x40010000
 8006580:	40000400 	.word	0x40000400
 8006584:	40000800 	.word	0x40000800
 8006588:	40000c00 	.word	0x40000c00
 800658c:	40010400 	.word	0x40010400
 8006590:	40014000 	.word	0x40014000
 8006594:	40001800 	.word	0x40001800

08006598 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006598:	b480      	push	{r7}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d001      	beq.n	80065b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	e04e      	b.n	800664e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2202      	movs	r2, #2
 80065b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68da      	ldr	r2, [r3, #12]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f042 0201 	orr.w	r2, r2, #1
 80065c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a23      	ldr	r2, [pc, #140]	; (800665c <HAL_TIM_Base_Start_IT+0xc4>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d022      	beq.n	8006618 <HAL_TIM_Base_Start_IT+0x80>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065da:	d01d      	beq.n	8006618 <HAL_TIM_Base_Start_IT+0x80>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a1f      	ldr	r2, [pc, #124]	; (8006660 <HAL_TIM_Base_Start_IT+0xc8>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d018      	beq.n	8006618 <HAL_TIM_Base_Start_IT+0x80>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a1e      	ldr	r2, [pc, #120]	; (8006664 <HAL_TIM_Base_Start_IT+0xcc>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d013      	beq.n	8006618 <HAL_TIM_Base_Start_IT+0x80>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a1c      	ldr	r2, [pc, #112]	; (8006668 <HAL_TIM_Base_Start_IT+0xd0>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d00e      	beq.n	8006618 <HAL_TIM_Base_Start_IT+0x80>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a1b      	ldr	r2, [pc, #108]	; (800666c <HAL_TIM_Base_Start_IT+0xd4>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d009      	beq.n	8006618 <HAL_TIM_Base_Start_IT+0x80>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a19      	ldr	r2, [pc, #100]	; (8006670 <HAL_TIM_Base_Start_IT+0xd8>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d004      	beq.n	8006618 <HAL_TIM_Base_Start_IT+0x80>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a18      	ldr	r2, [pc, #96]	; (8006674 <HAL_TIM_Base_Start_IT+0xdc>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d111      	bne.n	800663c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	f003 0307 	and.w	r3, r3, #7
 8006622:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2b06      	cmp	r3, #6
 8006628:	d010      	beq.n	800664c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f042 0201 	orr.w	r2, r2, #1
 8006638:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800663a:	e007      	b.n	800664c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f042 0201 	orr.w	r2, r2, #1
 800664a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800664c:	2300      	movs	r3, #0
}
 800664e:	4618      	mov	r0, r3
 8006650:	3714      	adds	r7, #20
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	40010000 	.word	0x40010000
 8006660:	40000400 	.word	0x40000400
 8006664:	40000800 	.word	0x40000800
 8006668:	40000c00 	.word	0x40000c00
 800666c:	40010400 	.word	0x40010400
 8006670:	40014000 	.word	0x40014000
 8006674:	40001800 	.word	0x40001800

08006678 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d101      	bne.n	800668a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	e041      	b.n	800670e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006690:	b2db      	uxtb	r3, r3
 8006692:	2b00      	cmp	r3, #0
 8006694:	d106      	bne.n	80066a4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 f839 	bl	8006716 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2202      	movs	r2, #2
 80066a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	3304      	adds	r3, #4
 80066b4:	4619      	mov	r1, r3
 80066b6:	4610      	mov	r0, r2
 80066b8:	f000 fde2 	bl	8007280 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800670c:	2300      	movs	r3, #0
}
 800670e:	4618      	mov	r0, r3
 8006710:	3708      	adds	r7, #8
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006716:	b480      	push	{r7}
 8006718:	b083      	sub	sp, #12
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800671e:	bf00      	nop
 8006720:	370c      	adds	r7, #12
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr

0800672a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800672a:	b580      	push	{r7, lr}
 800672c:	b082      	sub	sp, #8
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d101      	bne.n	800673c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e041      	b.n	80067c0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006742:	b2db      	uxtb	r3, r3
 8006744:	2b00      	cmp	r3, #0
 8006746:	d106      	bne.n	8006756 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 f839 	bl	80067c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2202      	movs	r2, #2
 800675a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	3304      	adds	r3, #4
 8006766:	4619      	mov	r1, r3
 8006768:	4610      	mov	r0, r2
 800676a:	f000 fd89 	bl	8007280 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2201      	movs	r2, #1
 8006772:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2201      	movs	r2, #1
 800677a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2201      	movs	r2, #1
 8006782:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2201      	movs	r2, #1
 800678a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2201      	movs	r2, #1
 8006792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2201      	movs	r2, #1
 800679a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2201      	movs	r2, #1
 80067a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2201      	movs	r2, #1
 80067aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2201      	movs	r2, #1
 80067b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2201      	movs	r2, #1
 80067ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3708      	adds	r7, #8
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80067d0:	bf00      	nop
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067e6:	2300      	movs	r3, #0
 80067e8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d109      	bne.n	8006804 <HAL_TIM_PWM_Start_IT+0x28>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	bf14      	ite	ne
 80067fc:	2301      	movne	r3, #1
 80067fe:	2300      	moveq	r3, #0
 8006800:	b2db      	uxtb	r3, r3
 8006802:	e022      	b.n	800684a <HAL_TIM_PWM_Start_IT+0x6e>
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	2b04      	cmp	r3, #4
 8006808:	d109      	bne.n	800681e <HAL_TIM_PWM_Start_IT+0x42>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006810:	b2db      	uxtb	r3, r3
 8006812:	2b01      	cmp	r3, #1
 8006814:	bf14      	ite	ne
 8006816:	2301      	movne	r3, #1
 8006818:	2300      	moveq	r3, #0
 800681a:	b2db      	uxtb	r3, r3
 800681c:	e015      	b.n	800684a <HAL_TIM_PWM_Start_IT+0x6e>
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	2b08      	cmp	r3, #8
 8006822:	d109      	bne.n	8006838 <HAL_TIM_PWM_Start_IT+0x5c>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800682a:	b2db      	uxtb	r3, r3
 800682c:	2b01      	cmp	r3, #1
 800682e:	bf14      	ite	ne
 8006830:	2301      	movne	r3, #1
 8006832:	2300      	moveq	r3, #0
 8006834:	b2db      	uxtb	r3, r3
 8006836:	e008      	b.n	800684a <HAL_TIM_PWM_Start_IT+0x6e>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800683e:	b2db      	uxtb	r3, r3
 8006840:	2b01      	cmp	r3, #1
 8006842:	bf14      	ite	ne
 8006844:	2301      	movne	r3, #1
 8006846:	2300      	moveq	r3, #0
 8006848:	b2db      	uxtb	r3, r3
 800684a:	2b00      	cmp	r3, #0
 800684c:	d001      	beq.n	8006852 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e0c7      	b.n	80069e2 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d104      	bne.n	8006862 <HAL_TIM_PWM_Start_IT+0x86>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2202      	movs	r2, #2
 800685c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006860:	e013      	b.n	800688a <HAL_TIM_PWM_Start_IT+0xae>
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	2b04      	cmp	r3, #4
 8006866:	d104      	bne.n	8006872 <HAL_TIM_PWM_Start_IT+0x96>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2202      	movs	r2, #2
 800686c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006870:	e00b      	b.n	800688a <HAL_TIM_PWM_Start_IT+0xae>
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	2b08      	cmp	r3, #8
 8006876:	d104      	bne.n	8006882 <HAL_TIM_PWM_Start_IT+0xa6>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2202      	movs	r2, #2
 800687c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006880:	e003      	b.n	800688a <HAL_TIM_PWM_Start_IT+0xae>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2202      	movs	r2, #2
 8006886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	2b0c      	cmp	r3, #12
 800688e:	d841      	bhi.n	8006914 <HAL_TIM_PWM_Start_IT+0x138>
 8006890:	a201      	add	r2, pc, #4	; (adr r2, 8006898 <HAL_TIM_PWM_Start_IT+0xbc>)
 8006892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006896:	bf00      	nop
 8006898:	080068cd 	.word	0x080068cd
 800689c:	08006915 	.word	0x08006915
 80068a0:	08006915 	.word	0x08006915
 80068a4:	08006915 	.word	0x08006915
 80068a8:	080068df 	.word	0x080068df
 80068ac:	08006915 	.word	0x08006915
 80068b0:	08006915 	.word	0x08006915
 80068b4:	08006915 	.word	0x08006915
 80068b8:	080068f1 	.word	0x080068f1
 80068bc:	08006915 	.word	0x08006915
 80068c0:	08006915 	.word	0x08006915
 80068c4:	08006915 	.word	0x08006915
 80068c8:	08006903 	.word	0x08006903
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68da      	ldr	r2, [r3, #12]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f042 0202 	orr.w	r2, r2, #2
 80068da:	60da      	str	r2, [r3, #12]
      break;
 80068dc:	e01d      	b.n	800691a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68da      	ldr	r2, [r3, #12]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f042 0204 	orr.w	r2, r2, #4
 80068ec:	60da      	str	r2, [r3, #12]
      break;
 80068ee:	e014      	b.n	800691a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68da      	ldr	r2, [r3, #12]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f042 0208 	orr.w	r2, r2, #8
 80068fe:	60da      	str	r2, [r3, #12]
      break;
 8006900:	e00b      	b.n	800691a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68da      	ldr	r2, [r3, #12]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f042 0210 	orr.w	r2, r2, #16
 8006910:	60da      	str	r2, [r3, #12]
      break;
 8006912:	e002      	b.n	800691a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	73fb      	strb	r3, [r7, #15]
      break;
 8006918:	bf00      	nop
  }

  if (status == HAL_OK)
 800691a:	7bfb      	ldrb	r3, [r7, #15]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d15f      	bne.n	80069e0 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2201      	movs	r2, #1
 8006926:	6839      	ldr	r1, [r7, #0]
 8006928:	4618      	mov	r0, r3
 800692a:	f000 ff9f 	bl	800786c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a2e      	ldr	r2, [pc, #184]	; (80069ec <HAL_TIM_PWM_Start_IT+0x210>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d004      	beq.n	8006942 <HAL_TIM_PWM_Start_IT+0x166>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a2c      	ldr	r2, [pc, #176]	; (80069f0 <HAL_TIM_PWM_Start_IT+0x214>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d101      	bne.n	8006946 <HAL_TIM_PWM_Start_IT+0x16a>
 8006942:	2301      	movs	r3, #1
 8006944:	e000      	b.n	8006948 <HAL_TIM_PWM_Start_IT+0x16c>
 8006946:	2300      	movs	r3, #0
 8006948:	2b00      	cmp	r3, #0
 800694a:	d007      	beq.n	800695c <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800695a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a22      	ldr	r2, [pc, #136]	; (80069ec <HAL_TIM_PWM_Start_IT+0x210>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d022      	beq.n	80069ac <HAL_TIM_PWM_Start_IT+0x1d0>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800696e:	d01d      	beq.n	80069ac <HAL_TIM_PWM_Start_IT+0x1d0>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a1f      	ldr	r2, [pc, #124]	; (80069f4 <HAL_TIM_PWM_Start_IT+0x218>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d018      	beq.n	80069ac <HAL_TIM_PWM_Start_IT+0x1d0>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a1e      	ldr	r2, [pc, #120]	; (80069f8 <HAL_TIM_PWM_Start_IT+0x21c>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d013      	beq.n	80069ac <HAL_TIM_PWM_Start_IT+0x1d0>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a1c      	ldr	r2, [pc, #112]	; (80069fc <HAL_TIM_PWM_Start_IT+0x220>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d00e      	beq.n	80069ac <HAL_TIM_PWM_Start_IT+0x1d0>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a17      	ldr	r2, [pc, #92]	; (80069f0 <HAL_TIM_PWM_Start_IT+0x214>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d009      	beq.n	80069ac <HAL_TIM_PWM_Start_IT+0x1d0>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a18      	ldr	r2, [pc, #96]	; (8006a00 <HAL_TIM_PWM_Start_IT+0x224>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d004      	beq.n	80069ac <HAL_TIM_PWM_Start_IT+0x1d0>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a17      	ldr	r2, [pc, #92]	; (8006a04 <HAL_TIM_PWM_Start_IT+0x228>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d111      	bne.n	80069d0 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	f003 0307 	and.w	r3, r3, #7
 80069b6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	2b06      	cmp	r3, #6
 80069bc:	d010      	beq.n	80069e0 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f042 0201 	orr.w	r2, r2, #1
 80069cc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069ce:	e007      	b.n	80069e0 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f042 0201 	orr.w	r2, r2, #1
 80069de:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80069e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3710      	adds	r7, #16
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	40010000 	.word	0x40010000
 80069f0:	40010400 	.word	0x40010400
 80069f4:	40000400 	.word	0x40000400
 80069f8:	40000800 	.word	0x40000800
 80069fc:	40000c00 	.word	0x40000c00
 8006a00:	40014000 	.word	0x40014000
 8006a04:	40001800 	.word	0x40001800

08006a08 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b086      	sub	sp, #24
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d101      	bne.n	8006a1c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e097      	b.n	8006b4c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d106      	bne.n	8006a36 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f7fc f985 	bl	8002d40 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2202      	movs	r2, #2
 8006a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	6812      	ldr	r2, [r2, #0]
 8006a48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a4c:	f023 0307 	bic.w	r3, r3, #7
 8006a50:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	3304      	adds	r3, #4
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	4610      	mov	r0, r2
 8006a5e:	f000 fc0f 	bl	8007280 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	699b      	ldr	r3, [r3, #24]
 8006a70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	6a1b      	ldr	r3, [r3, #32]
 8006a78:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	697a      	ldr	r2, [r7, #20]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a8a:	f023 0303 	bic.w	r3, r3, #3
 8006a8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	689a      	ldr	r2, [r3, #8]
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	699b      	ldr	r3, [r3, #24]
 8006a98:	021b      	lsls	r3, r3, #8
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	693a      	ldr	r2, [r7, #16]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006aa8:	f023 030c 	bic.w	r3, r3, #12
 8006aac:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ab4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ab8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	68da      	ldr	r2, [r3, #12]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	69db      	ldr	r3, [r3, #28]
 8006ac2:	021b      	lsls	r3, r3, #8
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	693a      	ldr	r2, [r7, #16]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	011a      	lsls	r2, r3, #4
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	6a1b      	ldr	r3, [r3, #32]
 8006ad6:	031b      	lsls	r3, r3, #12
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	693a      	ldr	r2, [r7, #16]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006ae6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006aee:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	685a      	ldr	r2, [r3, #4]
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	695b      	ldr	r3, [r3, #20]
 8006af8:	011b      	lsls	r3, r3, #4
 8006afa:	4313      	orrs	r3, r2
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	693a      	ldr	r2, [r7, #16]
 8006b10:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2201      	movs	r2, #1
 8006b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2201      	movs	r2, #1
 8006b36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2201      	movs	r2, #1
 8006b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3718      	adds	r7, #24
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b64:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006b6c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b74:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006b7c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d110      	bne.n	8006ba6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b84:	7bfb      	ldrb	r3, [r7, #15]
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d102      	bne.n	8006b90 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006b8a:	7b7b      	ldrb	r3, [r7, #13]
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d001      	beq.n	8006b94 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	e069      	b.n	8006c68 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2202      	movs	r2, #2
 8006b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2202      	movs	r2, #2
 8006ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ba4:	e031      	b.n	8006c0a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	2b04      	cmp	r3, #4
 8006baa:	d110      	bne.n	8006bce <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006bac:	7bbb      	ldrb	r3, [r7, #14]
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d102      	bne.n	8006bb8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006bb2:	7b3b      	ldrb	r3, [r7, #12]
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d001      	beq.n	8006bbc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e055      	b.n	8006c68 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2202      	movs	r2, #2
 8006bc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006bcc:	e01d      	b.n	8006c0a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006bce:	7bfb      	ldrb	r3, [r7, #15]
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d108      	bne.n	8006be6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006bd4:	7bbb      	ldrb	r3, [r7, #14]
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d105      	bne.n	8006be6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006bda:	7b7b      	ldrb	r3, [r7, #13]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d102      	bne.n	8006be6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006be0:	7b3b      	ldrb	r3, [r7, #12]
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d001      	beq.n	8006bea <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	e03e      	b.n	8006c68 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2202      	movs	r2, #2
 8006bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2202      	movs	r2, #2
 8006bf6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2202      	movs	r2, #2
 8006bfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2202      	movs	r2, #2
 8006c06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d003      	beq.n	8006c18 <HAL_TIM_Encoder_Start+0xc4>
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	2b04      	cmp	r3, #4
 8006c14:	d008      	beq.n	8006c28 <HAL_TIM_Encoder_Start+0xd4>
 8006c16:	e00f      	b.n	8006c38 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	2100      	movs	r1, #0
 8006c20:	4618      	mov	r0, r3
 8006c22:	f000 fe23 	bl	800786c <TIM_CCxChannelCmd>
      break;
 8006c26:	e016      	b.n	8006c56 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	2104      	movs	r1, #4
 8006c30:	4618      	mov	r0, r3
 8006c32:	f000 fe1b 	bl	800786c <TIM_CCxChannelCmd>
      break;
 8006c36:	e00e      	b.n	8006c56 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	2100      	movs	r1, #0
 8006c40:	4618      	mov	r0, r3
 8006c42:	f000 fe13 	bl	800786c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	2104      	movs	r1, #4
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f000 fe0c 	bl	800786c <TIM_CCxChannelCmd>
      break;
 8006c54:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f042 0201 	orr.w	r2, r2, #1
 8006c64:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3710      	adds	r7, #16
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	f003 0302 	and.w	r3, r3, #2
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d020      	beq.n	8006cd4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f003 0302 	and.w	r3, r3, #2
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d01b      	beq.n	8006cd4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f06f 0202 	mvn.w	r2, #2
 8006ca4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	699b      	ldr	r3, [r3, #24]
 8006cb2:	f003 0303 	and.w	r3, r3, #3
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d003      	beq.n	8006cc2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 fac1 	bl	8007242 <HAL_TIM_IC_CaptureCallback>
 8006cc0:	e005      	b.n	8006cce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 fab3 	bl	800722e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 fac4 	bl	8007256 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	f003 0304 	and.w	r3, r3, #4
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d020      	beq.n	8006d20 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f003 0304 	and.w	r3, r3, #4
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d01b      	beq.n	8006d20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f06f 0204 	mvn.w	r2, #4
 8006cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2202      	movs	r2, #2
 8006cf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	699b      	ldr	r3, [r3, #24]
 8006cfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d003      	beq.n	8006d0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 fa9b 	bl	8007242 <HAL_TIM_IC_CaptureCallback>
 8006d0c:	e005      	b.n	8006d1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 fa8d 	bl	800722e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 fa9e 	bl	8007256 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	f003 0308 	and.w	r3, r3, #8
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d020      	beq.n	8006d6c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f003 0308 	and.w	r3, r3, #8
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d01b      	beq.n	8006d6c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f06f 0208 	mvn.w	r2, #8
 8006d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2204      	movs	r2, #4
 8006d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	69db      	ldr	r3, [r3, #28]
 8006d4a:	f003 0303 	and.w	r3, r3, #3
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d003      	beq.n	8006d5a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 fa75 	bl	8007242 <HAL_TIM_IC_CaptureCallback>
 8006d58:	e005      	b.n	8006d66 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 fa67 	bl	800722e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 fa78 	bl	8007256 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	f003 0310 	and.w	r3, r3, #16
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d020      	beq.n	8006db8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f003 0310 	and.w	r3, r3, #16
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d01b      	beq.n	8006db8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f06f 0210 	mvn.w	r2, #16
 8006d88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2208      	movs	r2, #8
 8006d8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	69db      	ldr	r3, [r3, #28]
 8006d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d003      	beq.n	8006da6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fa4f 	bl	8007242 <HAL_TIM_IC_CaptureCallback>
 8006da4:	e005      	b.n	8006db2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 fa41 	bl	800722e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 fa52 	bl	8007256 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	f003 0301 	and.w	r3, r3, #1
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00c      	beq.n	8006ddc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f003 0301 	and.w	r3, r3, #1
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d007      	beq.n	8006ddc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f06f 0201 	mvn.w	r2, #1
 8006dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 fa1f 	bl	800721a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d00c      	beq.n	8006e00 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d007      	beq.n	8006e00 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 fe34 	bl	8007a68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d00c      	beq.n	8006e24 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d007      	beq.n	8006e24 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 fa23 	bl	800726a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	f003 0320 	and.w	r3, r3, #32
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00c      	beq.n	8006e48 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f003 0320 	and.w	r3, r3, #32
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d007      	beq.n	8006e48 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f06f 0220 	mvn.w	r2, #32
 8006e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 fe06 	bl	8007a54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e48:	bf00      	nop
 8006e4a:	3710      	adds	r7, #16
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b086      	sub	sp, #24
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d101      	bne.n	8006e6e <HAL_TIM_OC_ConfigChannel+0x1e>
 8006e6a:	2302      	movs	r3, #2
 8006e6c:	e048      	b.n	8006f00 <HAL_TIM_OC_ConfigChannel+0xb0>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2201      	movs	r2, #1
 8006e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2b0c      	cmp	r3, #12
 8006e7a:	d839      	bhi.n	8006ef0 <HAL_TIM_OC_ConfigChannel+0xa0>
 8006e7c:	a201      	add	r2, pc, #4	; (adr r2, 8006e84 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e82:	bf00      	nop
 8006e84:	08006eb9 	.word	0x08006eb9
 8006e88:	08006ef1 	.word	0x08006ef1
 8006e8c:	08006ef1 	.word	0x08006ef1
 8006e90:	08006ef1 	.word	0x08006ef1
 8006e94:	08006ec7 	.word	0x08006ec7
 8006e98:	08006ef1 	.word	0x08006ef1
 8006e9c:	08006ef1 	.word	0x08006ef1
 8006ea0:	08006ef1 	.word	0x08006ef1
 8006ea4:	08006ed5 	.word	0x08006ed5
 8006ea8:	08006ef1 	.word	0x08006ef1
 8006eac:	08006ef1 	.word	0x08006ef1
 8006eb0:	08006ef1 	.word	0x08006ef1
 8006eb4:	08006ee3 	.word	0x08006ee3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68b9      	ldr	r1, [r7, #8]
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f000 fa8a 	bl	80073d8 <TIM_OC1_SetConfig>
      break;
 8006ec4:	e017      	b.n	8006ef6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68b9      	ldr	r1, [r7, #8]
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f000 faf3 	bl	80074b8 <TIM_OC2_SetConfig>
      break;
 8006ed2:	e010      	b.n	8006ef6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68b9      	ldr	r1, [r7, #8]
 8006eda:	4618      	mov	r0, r3
 8006edc:	f000 fb62 	bl	80075a4 <TIM_OC3_SetConfig>
      break;
 8006ee0:	e009      	b.n	8006ef6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68b9      	ldr	r1, [r7, #8]
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f000 fbcf 	bl	800768c <TIM_OC4_SetConfig>
      break;
 8006eee:	e002      	b.n	8006ef6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ef4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3718      	adds	r7, #24
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b086      	sub	sp, #24
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f14:	2300      	movs	r3, #0
 8006f16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d101      	bne.n	8006f26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006f22:	2302      	movs	r3, #2
 8006f24:	e0ae      	b.n	8007084 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2b0c      	cmp	r3, #12
 8006f32:	f200 809f 	bhi.w	8007074 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006f36:	a201      	add	r2, pc, #4	; (adr r2, 8006f3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f3c:	08006f71 	.word	0x08006f71
 8006f40:	08007075 	.word	0x08007075
 8006f44:	08007075 	.word	0x08007075
 8006f48:	08007075 	.word	0x08007075
 8006f4c:	08006fb1 	.word	0x08006fb1
 8006f50:	08007075 	.word	0x08007075
 8006f54:	08007075 	.word	0x08007075
 8006f58:	08007075 	.word	0x08007075
 8006f5c:	08006ff3 	.word	0x08006ff3
 8006f60:	08007075 	.word	0x08007075
 8006f64:	08007075 	.word	0x08007075
 8006f68:	08007075 	.word	0x08007075
 8006f6c:	08007033 	.word	0x08007033
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68b9      	ldr	r1, [r7, #8]
 8006f76:	4618      	mov	r0, r3
 8006f78:	f000 fa2e 	bl	80073d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	699a      	ldr	r2, [r3, #24]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f042 0208 	orr.w	r2, r2, #8
 8006f8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	699a      	ldr	r2, [r3, #24]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f022 0204 	bic.w	r2, r2, #4
 8006f9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	6999      	ldr	r1, [r3, #24]
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	691a      	ldr	r2, [r3, #16]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	430a      	orrs	r2, r1
 8006fac:	619a      	str	r2, [r3, #24]
      break;
 8006fae:	e064      	b.n	800707a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68b9      	ldr	r1, [r7, #8]
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f000 fa7e 	bl	80074b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	699a      	ldr	r2, [r3, #24]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006fca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	699a      	ldr	r2, [r3, #24]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	6999      	ldr	r1, [r3, #24]
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	021a      	lsls	r2, r3, #8
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	430a      	orrs	r2, r1
 8006fee:	619a      	str	r2, [r3, #24]
      break;
 8006ff0:	e043      	b.n	800707a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68b9      	ldr	r1, [r7, #8]
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f000 fad3 	bl	80075a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	69da      	ldr	r2, [r3, #28]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f042 0208 	orr.w	r2, r2, #8
 800700c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	69da      	ldr	r2, [r3, #28]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f022 0204 	bic.w	r2, r2, #4
 800701c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	69d9      	ldr	r1, [r3, #28]
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	691a      	ldr	r2, [r3, #16]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	430a      	orrs	r2, r1
 800702e:	61da      	str	r2, [r3, #28]
      break;
 8007030:	e023      	b.n	800707a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	68b9      	ldr	r1, [r7, #8]
 8007038:	4618      	mov	r0, r3
 800703a:	f000 fb27 	bl	800768c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	69da      	ldr	r2, [r3, #28]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800704c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	69da      	ldr	r2, [r3, #28]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800705c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	69d9      	ldr	r1, [r3, #28]
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	691b      	ldr	r3, [r3, #16]
 8007068:	021a      	lsls	r2, r3, #8
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	430a      	orrs	r2, r1
 8007070:	61da      	str	r2, [r3, #28]
      break;
 8007072:	e002      	b.n	800707a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	75fb      	strb	r3, [r7, #23]
      break;
 8007078:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007082:	7dfb      	ldrb	r3, [r7, #23]
}
 8007084:	4618      	mov	r0, r3
 8007086:	3718      	adds	r7, #24
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007096:	2300      	movs	r3, #0
 8007098:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d101      	bne.n	80070a8 <HAL_TIM_ConfigClockSource+0x1c>
 80070a4:	2302      	movs	r3, #2
 80070a6:	e0b4      	b.n	8007212 <HAL_TIM_ConfigClockSource+0x186>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2202      	movs	r2, #2
 80070b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80070c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	68ba      	ldr	r2, [r7, #8]
 80070d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070e0:	d03e      	beq.n	8007160 <HAL_TIM_ConfigClockSource+0xd4>
 80070e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070e6:	f200 8087 	bhi.w	80071f8 <HAL_TIM_ConfigClockSource+0x16c>
 80070ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070ee:	f000 8086 	beq.w	80071fe <HAL_TIM_ConfigClockSource+0x172>
 80070f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070f6:	d87f      	bhi.n	80071f8 <HAL_TIM_ConfigClockSource+0x16c>
 80070f8:	2b70      	cmp	r3, #112	; 0x70
 80070fa:	d01a      	beq.n	8007132 <HAL_TIM_ConfigClockSource+0xa6>
 80070fc:	2b70      	cmp	r3, #112	; 0x70
 80070fe:	d87b      	bhi.n	80071f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007100:	2b60      	cmp	r3, #96	; 0x60
 8007102:	d050      	beq.n	80071a6 <HAL_TIM_ConfigClockSource+0x11a>
 8007104:	2b60      	cmp	r3, #96	; 0x60
 8007106:	d877      	bhi.n	80071f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007108:	2b50      	cmp	r3, #80	; 0x50
 800710a:	d03c      	beq.n	8007186 <HAL_TIM_ConfigClockSource+0xfa>
 800710c:	2b50      	cmp	r3, #80	; 0x50
 800710e:	d873      	bhi.n	80071f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007110:	2b40      	cmp	r3, #64	; 0x40
 8007112:	d058      	beq.n	80071c6 <HAL_TIM_ConfigClockSource+0x13a>
 8007114:	2b40      	cmp	r3, #64	; 0x40
 8007116:	d86f      	bhi.n	80071f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007118:	2b30      	cmp	r3, #48	; 0x30
 800711a:	d064      	beq.n	80071e6 <HAL_TIM_ConfigClockSource+0x15a>
 800711c:	2b30      	cmp	r3, #48	; 0x30
 800711e:	d86b      	bhi.n	80071f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007120:	2b20      	cmp	r3, #32
 8007122:	d060      	beq.n	80071e6 <HAL_TIM_ConfigClockSource+0x15a>
 8007124:	2b20      	cmp	r3, #32
 8007126:	d867      	bhi.n	80071f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007128:	2b00      	cmp	r3, #0
 800712a:	d05c      	beq.n	80071e6 <HAL_TIM_ConfigClockSource+0x15a>
 800712c:	2b10      	cmp	r3, #16
 800712e:	d05a      	beq.n	80071e6 <HAL_TIM_ConfigClockSource+0x15a>
 8007130:	e062      	b.n	80071f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007142:	f000 fb73 	bl	800782c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007154:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	68ba      	ldr	r2, [r7, #8]
 800715c:	609a      	str	r2, [r3, #8]
      break;
 800715e:	e04f      	b.n	8007200 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007170:	f000 fb5c 	bl	800782c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	689a      	ldr	r2, [r3, #8]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007182:	609a      	str	r2, [r3, #8]
      break;
 8007184:	e03c      	b.n	8007200 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007192:	461a      	mov	r2, r3
 8007194:	f000 fad0 	bl	8007738 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2150      	movs	r1, #80	; 0x50
 800719e:	4618      	mov	r0, r3
 80071a0:	f000 fb29 	bl	80077f6 <TIM_ITRx_SetConfig>
      break;
 80071a4:	e02c      	b.n	8007200 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80071b2:	461a      	mov	r2, r3
 80071b4:	f000 faef 	bl	8007796 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	2160      	movs	r1, #96	; 0x60
 80071be:	4618      	mov	r0, r3
 80071c0:	f000 fb19 	bl	80077f6 <TIM_ITRx_SetConfig>
      break;
 80071c4:	e01c      	b.n	8007200 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071d2:	461a      	mov	r2, r3
 80071d4:	f000 fab0 	bl	8007738 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2140      	movs	r1, #64	; 0x40
 80071de:	4618      	mov	r0, r3
 80071e0:	f000 fb09 	bl	80077f6 <TIM_ITRx_SetConfig>
      break;
 80071e4:	e00c      	b.n	8007200 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4619      	mov	r1, r3
 80071f0:	4610      	mov	r0, r2
 80071f2:	f000 fb00 	bl	80077f6 <TIM_ITRx_SetConfig>
      break;
 80071f6:	e003      	b.n	8007200 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	73fb      	strb	r3, [r7, #15]
      break;
 80071fc:	e000      	b.n	8007200 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80071fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007210:	7bfb      	ldrb	r3, [r7, #15]
}
 8007212:	4618      	mov	r0, r3
 8007214:	3710      	adds	r7, #16
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800721a:	b480      	push	{r7}
 800721c:	b083      	sub	sp, #12
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007222:	bf00      	nop
 8007224:	370c      	adds	r7, #12
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr

0800722e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800722e:	b480      	push	{r7}
 8007230:	b083      	sub	sp, #12
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007236:	bf00      	nop
 8007238:	370c      	adds	r7, #12
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr

08007242 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007242:	b480      	push	{r7}
 8007244:	b083      	sub	sp, #12
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800724a:	bf00      	nop
 800724c:	370c      	adds	r7, #12
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr

08007256 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007256:	b480      	push	{r7}
 8007258:	b083      	sub	sp, #12
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800725e:	bf00      	nop
 8007260:	370c      	adds	r7, #12
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr

0800726a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800726a:	b480      	push	{r7}
 800726c:	b083      	sub	sp, #12
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007272:	bf00      	nop
 8007274:	370c      	adds	r7, #12
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr
	...

08007280 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007280:	b480      	push	{r7}
 8007282:	b085      	sub	sp, #20
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	4a46      	ldr	r2, [pc, #280]	; (80073ac <TIM_Base_SetConfig+0x12c>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d013      	beq.n	80072c0 <TIM_Base_SetConfig+0x40>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800729e:	d00f      	beq.n	80072c0 <TIM_Base_SetConfig+0x40>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	4a43      	ldr	r2, [pc, #268]	; (80073b0 <TIM_Base_SetConfig+0x130>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d00b      	beq.n	80072c0 <TIM_Base_SetConfig+0x40>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a42      	ldr	r2, [pc, #264]	; (80073b4 <TIM_Base_SetConfig+0x134>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d007      	beq.n	80072c0 <TIM_Base_SetConfig+0x40>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4a41      	ldr	r2, [pc, #260]	; (80073b8 <TIM_Base_SetConfig+0x138>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d003      	beq.n	80072c0 <TIM_Base_SetConfig+0x40>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4a40      	ldr	r2, [pc, #256]	; (80073bc <TIM_Base_SetConfig+0x13c>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d108      	bne.n	80072d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	4313      	orrs	r3, r2
 80072d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4a35      	ldr	r2, [pc, #212]	; (80073ac <TIM_Base_SetConfig+0x12c>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d02b      	beq.n	8007332 <TIM_Base_SetConfig+0xb2>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072e0:	d027      	beq.n	8007332 <TIM_Base_SetConfig+0xb2>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4a32      	ldr	r2, [pc, #200]	; (80073b0 <TIM_Base_SetConfig+0x130>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d023      	beq.n	8007332 <TIM_Base_SetConfig+0xb2>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4a31      	ldr	r2, [pc, #196]	; (80073b4 <TIM_Base_SetConfig+0x134>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d01f      	beq.n	8007332 <TIM_Base_SetConfig+0xb2>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	4a30      	ldr	r2, [pc, #192]	; (80073b8 <TIM_Base_SetConfig+0x138>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d01b      	beq.n	8007332 <TIM_Base_SetConfig+0xb2>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4a2f      	ldr	r2, [pc, #188]	; (80073bc <TIM_Base_SetConfig+0x13c>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d017      	beq.n	8007332 <TIM_Base_SetConfig+0xb2>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4a2e      	ldr	r2, [pc, #184]	; (80073c0 <TIM_Base_SetConfig+0x140>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d013      	beq.n	8007332 <TIM_Base_SetConfig+0xb2>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4a2d      	ldr	r2, [pc, #180]	; (80073c4 <TIM_Base_SetConfig+0x144>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d00f      	beq.n	8007332 <TIM_Base_SetConfig+0xb2>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	4a2c      	ldr	r2, [pc, #176]	; (80073c8 <TIM_Base_SetConfig+0x148>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d00b      	beq.n	8007332 <TIM_Base_SetConfig+0xb2>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	4a2b      	ldr	r2, [pc, #172]	; (80073cc <TIM_Base_SetConfig+0x14c>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d007      	beq.n	8007332 <TIM_Base_SetConfig+0xb2>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4a2a      	ldr	r2, [pc, #168]	; (80073d0 <TIM_Base_SetConfig+0x150>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d003      	beq.n	8007332 <TIM_Base_SetConfig+0xb2>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	4a29      	ldr	r2, [pc, #164]	; (80073d4 <TIM_Base_SetConfig+0x154>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d108      	bne.n	8007344 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007338:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	4313      	orrs	r3, r2
 8007342:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	695b      	ldr	r3, [r3, #20]
 800734e:	4313      	orrs	r3, r2
 8007350:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	68fa      	ldr	r2, [r7, #12]
 8007356:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	689a      	ldr	r2, [r3, #8]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4a10      	ldr	r2, [pc, #64]	; (80073ac <TIM_Base_SetConfig+0x12c>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d003      	beq.n	8007378 <TIM_Base_SetConfig+0xf8>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a12      	ldr	r2, [pc, #72]	; (80073bc <TIM_Base_SetConfig+0x13c>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d103      	bne.n	8007380 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	691a      	ldr	r2, [r3, #16]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	691b      	ldr	r3, [r3, #16]
 800738a:	f003 0301 	and.w	r3, r3, #1
 800738e:	2b01      	cmp	r3, #1
 8007390:	d105      	bne.n	800739e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	f023 0201 	bic.w	r2, r3, #1
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	611a      	str	r2, [r3, #16]
  }
}
 800739e:	bf00      	nop
 80073a0:	3714      	adds	r7, #20
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr
 80073aa:	bf00      	nop
 80073ac:	40010000 	.word	0x40010000
 80073b0:	40000400 	.word	0x40000400
 80073b4:	40000800 	.word	0x40000800
 80073b8:	40000c00 	.word	0x40000c00
 80073bc:	40010400 	.word	0x40010400
 80073c0:	40014000 	.word	0x40014000
 80073c4:	40014400 	.word	0x40014400
 80073c8:	40014800 	.word	0x40014800
 80073cc:	40001800 	.word	0x40001800
 80073d0:	40001c00 	.word	0x40001c00
 80073d4:	40002000 	.word	0x40002000

080073d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80073d8:	b480      	push	{r7}
 80073da:	b087      	sub	sp, #28
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6a1b      	ldr	r3, [r3, #32]
 80073e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6a1b      	ldr	r3, [r3, #32]
 80073ec:	f023 0201 	bic.w	r2, r3, #1
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	699b      	ldr	r3, [r3, #24]
 80073fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f023 0303 	bic.w	r3, r3, #3
 800740e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	4313      	orrs	r3, r2
 8007418:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	f023 0302 	bic.w	r3, r3, #2
 8007420:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	697a      	ldr	r2, [r7, #20]
 8007428:	4313      	orrs	r3, r2
 800742a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4a20      	ldr	r2, [pc, #128]	; (80074b0 <TIM_OC1_SetConfig+0xd8>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d003      	beq.n	800743c <TIM_OC1_SetConfig+0x64>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4a1f      	ldr	r2, [pc, #124]	; (80074b4 <TIM_OC1_SetConfig+0xdc>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d10c      	bne.n	8007456 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	f023 0308 	bic.w	r3, r3, #8
 8007442:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	697a      	ldr	r2, [r7, #20]
 800744a:	4313      	orrs	r3, r2
 800744c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	f023 0304 	bic.w	r3, r3, #4
 8007454:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4a15      	ldr	r2, [pc, #84]	; (80074b0 <TIM_OC1_SetConfig+0xd8>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d003      	beq.n	8007466 <TIM_OC1_SetConfig+0x8e>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	4a14      	ldr	r2, [pc, #80]	; (80074b4 <TIM_OC1_SetConfig+0xdc>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d111      	bne.n	800748a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800746c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007474:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	695b      	ldr	r3, [r3, #20]
 800747a:	693a      	ldr	r2, [r7, #16]
 800747c:	4313      	orrs	r3, r2
 800747e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	699b      	ldr	r3, [r3, #24]
 8007484:	693a      	ldr	r2, [r7, #16]
 8007486:	4313      	orrs	r3, r2
 8007488:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	693a      	ldr	r2, [r7, #16]
 800748e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	68fa      	ldr	r2, [r7, #12]
 8007494:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	685a      	ldr	r2, [r3, #4]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	697a      	ldr	r2, [r7, #20]
 80074a2:	621a      	str	r2, [r3, #32]
}
 80074a4:	bf00      	nop
 80074a6:	371c      	adds	r7, #28
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr
 80074b0:	40010000 	.word	0x40010000
 80074b4:	40010400 	.word	0x40010400

080074b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b087      	sub	sp, #28
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6a1b      	ldr	r3, [r3, #32]
 80074c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6a1b      	ldr	r3, [r3, #32]
 80074cc:	f023 0210 	bic.w	r2, r3, #16
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	699b      	ldr	r3, [r3, #24]
 80074de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	021b      	lsls	r3, r3, #8
 80074f6:	68fa      	ldr	r2, [r7, #12]
 80074f8:	4313      	orrs	r3, r2
 80074fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	f023 0320 	bic.w	r3, r3, #32
 8007502:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	011b      	lsls	r3, r3, #4
 800750a:	697a      	ldr	r2, [r7, #20]
 800750c:	4313      	orrs	r3, r2
 800750e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4a22      	ldr	r2, [pc, #136]	; (800759c <TIM_OC2_SetConfig+0xe4>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d003      	beq.n	8007520 <TIM_OC2_SetConfig+0x68>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4a21      	ldr	r2, [pc, #132]	; (80075a0 <TIM_OC2_SetConfig+0xe8>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d10d      	bne.n	800753c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007526:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	011b      	lsls	r3, r3, #4
 800752e:	697a      	ldr	r2, [r7, #20]
 8007530:	4313      	orrs	r3, r2
 8007532:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800753a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	4a17      	ldr	r2, [pc, #92]	; (800759c <TIM_OC2_SetConfig+0xe4>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d003      	beq.n	800754c <TIM_OC2_SetConfig+0x94>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4a16      	ldr	r2, [pc, #88]	; (80075a0 <TIM_OC2_SetConfig+0xe8>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d113      	bne.n	8007574 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007552:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800755a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	695b      	ldr	r3, [r3, #20]
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	693a      	ldr	r2, [r7, #16]
 8007564:	4313      	orrs	r3, r2
 8007566:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	699b      	ldr	r3, [r3, #24]
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	693a      	ldr	r2, [r7, #16]
 8007570:	4313      	orrs	r3, r2
 8007572:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	693a      	ldr	r2, [r7, #16]
 8007578:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	685a      	ldr	r2, [r3, #4]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	697a      	ldr	r2, [r7, #20]
 800758c:	621a      	str	r2, [r3, #32]
}
 800758e:	bf00      	nop
 8007590:	371c      	adds	r7, #28
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	40010000 	.word	0x40010000
 80075a0:	40010400 	.word	0x40010400

080075a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b087      	sub	sp, #28
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6a1b      	ldr	r3, [r3, #32]
 80075b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6a1b      	ldr	r3, [r3, #32]
 80075b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	69db      	ldr	r3, [r3, #28]
 80075ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f023 0303 	bic.w	r3, r3, #3
 80075da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	68fa      	ldr	r2, [r7, #12]
 80075e2:	4313      	orrs	r3, r2
 80075e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80075ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	021b      	lsls	r3, r3, #8
 80075f4:	697a      	ldr	r2, [r7, #20]
 80075f6:	4313      	orrs	r3, r2
 80075f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4a21      	ldr	r2, [pc, #132]	; (8007684 <TIM_OC3_SetConfig+0xe0>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d003      	beq.n	800760a <TIM_OC3_SetConfig+0x66>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4a20      	ldr	r2, [pc, #128]	; (8007688 <TIM_OC3_SetConfig+0xe4>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d10d      	bne.n	8007626 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007610:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	021b      	lsls	r3, r3, #8
 8007618:	697a      	ldr	r2, [r7, #20]
 800761a:	4313      	orrs	r3, r2
 800761c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007624:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	4a16      	ldr	r2, [pc, #88]	; (8007684 <TIM_OC3_SetConfig+0xe0>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d003      	beq.n	8007636 <TIM_OC3_SetConfig+0x92>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	4a15      	ldr	r2, [pc, #84]	; (8007688 <TIM_OC3_SetConfig+0xe4>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d113      	bne.n	800765e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800763c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007644:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	695b      	ldr	r3, [r3, #20]
 800764a:	011b      	lsls	r3, r3, #4
 800764c:	693a      	ldr	r2, [r7, #16]
 800764e:	4313      	orrs	r3, r2
 8007650:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	699b      	ldr	r3, [r3, #24]
 8007656:	011b      	lsls	r3, r3, #4
 8007658:	693a      	ldr	r2, [r7, #16]
 800765a:	4313      	orrs	r3, r2
 800765c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	693a      	ldr	r2, [r7, #16]
 8007662:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	68fa      	ldr	r2, [r7, #12]
 8007668:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	685a      	ldr	r2, [r3, #4]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	697a      	ldr	r2, [r7, #20]
 8007676:	621a      	str	r2, [r3, #32]
}
 8007678:	bf00      	nop
 800767a:	371c      	adds	r7, #28
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr
 8007684:	40010000 	.word	0x40010000
 8007688:	40010400 	.word	0x40010400

0800768c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800768c:	b480      	push	{r7}
 800768e:	b087      	sub	sp, #28
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a1b      	ldr	r3, [r3, #32]
 800769a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6a1b      	ldr	r3, [r3, #32]
 80076a0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	69db      	ldr	r3, [r3, #28]
 80076b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	021b      	lsls	r3, r3, #8
 80076ca:	68fa      	ldr	r2, [r7, #12]
 80076cc:	4313      	orrs	r3, r2
 80076ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80076d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	031b      	lsls	r3, r3, #12
 80076de:	693a      	ldr	r2, [r7, #16]
 80076e0:	4313      	orrs	r3, r2
 80076e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	4a12      	ldr	r2, [pc, #72]	; (8007730 <TIM_OC4_SetConfig+0xa4>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d003      	beq.n	80076f4 <TIM_OC4_SetConfig+0x68>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	4a11      	ldr	r2, [pc, #68]	; (8007734 <TIM_OC4_SetConfig+0xa8>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d109      	bne.n	8007708 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	695b      	ldr	r3, [r3, #20]
 8007700:	019b      	lsls	r3, r3, #6
 8007702:	697a      	ldr	r2, [r7, #20]
 8007704:	4313      	orrs	r3, r2
 8007706:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	697a      	ldr	r2, [r7, #20]
 800770c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	68fa      	ldr	r2, [r7, #12]
 8007712:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	685a      	ldr	r2, [r3, #4]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	693a      	ldr	r2, [r7, #16]
 8007720:	621a      	str	r2, [r3, #32]
}
 8007722:	bf00      	nop
 8007724:	371c      	adds	r7, #28
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop
 8007730:	40010000 	.word	0x40010000
 8007734:	40010400 	.word	0x40010400

08007738 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007738:	b480      	push	{r7}
 800773a:	b087      	sub	sp, #28
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6a1b      	ldr	r3, [r3, #32]
 8007748:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	6a1b      	ldr	r3, [r3, #32]
 800774e:	f023 0201 	bic.w	r2, r3, #1
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	699b      	ldr	r3, [r3, #24]
 800775a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007762:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	011b      	lsls	r3, r3, #4
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	4313      	orrs	r3, r2
 800776c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	f023 030a 	bic.w	r3, r3, #10
 8007774:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007776:	697a      	ldr	r2, [r7, #20]
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	4313      	orrs	r3, r2
 800777c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	693a      	ldr	r2, [r7, #16]
 8007782:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	697a      	ldr	r2, [r7, #20]
 8007788:	621a      	str	r2, [r3, #32]
}
 800778a:	bf00      	nop
 800778c:	371c      	adds	r7, #28
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr

08007796 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007796:	b480      	push	{r7}
 8007798:	b087      	sub	sp, #28
 800779a:	af00      	add	r7, sp, #0
 800779c:	60f8      	str	r0, [r7, #12]
 800779e:	60b9      	str	r1, [r7, #8]
 80077a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6a1b      	ldr	r3, [r3, #32]
 80077a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	6a1b      	ldr	r3, [r3, #32]
 80077ac:	f023 0210 	bic.w	r2, r3, #16
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	699b      	ldr	r3, [r3, #24]
 80077b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80077c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	031b      	lsls	r3, r3, #12
 80077c6:	693a      	ldr	r2, [r7, #16]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80077d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	011b      	lsls	r3, r3, #4
 80077d8:	697a      	ldr	r2, [r7, #20]
 80077da:	4313      	orrs	r3, r2
 80077dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	693a      	ldr	r2, [r7, #16]
 80077e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	697a      	ldr	r2, [r7, #20]
 80077e8:	621a      	str	r2, [r3, #32]
}
 80077ea:	bf00      	nop
 80077ec:	371c      	adds	r7, #28
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr

080077f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80077f6:	b480      	push	{r7}
 80077f8:	b085      	sub	sp, #20
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
 80077fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800780c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800780e:	683a      	ldr	r2, [r7, #0]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	4313      	orrs	r3, r2
 8007814:	f043 0307 	orr.w	r3, r3, #7
 8007818:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	609a      	str	r2, [r3, #8]
}
 8007820:	bf00      	nop
 8007822:	3714      	adds	r7, #20
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800782c:	b480      	push	{r7}
 800782e:	b087      	sub	sp, #28
 8007830:	af00      	add	r7, sp, #0
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	607a      	str	r2, [r7, #4]
 8007838:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007846:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	021a      	lsls	r2, r3, #8
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	431a      	orrs	r2, r3
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	4313      	orrs	r3, r2
 8007854:	697a      	ldr	r2, [r7, #20]
 8007856:	4313      	orrs	r3, r2
 8007858:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	697a      	ldr	r2, [r7, #20]
 800785e:	609a      	str	r2, [r3, #8]
}
 8007860:	bf00      	nop
 8007862:	371c      	adds	r7, #28
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800786c:	b480      	push	{r7}
 800786e:	b087      	sub	sp, #28
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	f003 031f 	and.w	r3, r3, #31
 800787e:	2201      	movs	r2, #1
 8007880:	fa02 f303 	lsl.w	r3, r2, r3
 8007884:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6a1a      	ldr	r2, [r3, #32]
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	43db      	mvns	r3, r3
 800788e:	401a      	ands	r2, r3
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	6a1a      	ldr	r2, [r3, #32]
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	f003 031f 	and.w	r3, r3, #31
 800789e:	6879      	ldr	r1, [r7, #4]
 80078a0:	fa01 f303 	lsl.w	r3, r1, r3
 80078a4:	431a      	orrs	r2, r3
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	621a      	str	r2, [r3, #32]
}
 80078aa:	bf00      	nop
 80078ac:	371c      	adds	r7, #28
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr
	...

080078b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b085      	sub	sp, #20
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d101      	bne.n	80078d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80078cc:	2302      	movs	r3, #2
 80078ce:	e05a      	b.n	8007986 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2201      	movs	r2, #1
 80078d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2202      	movs	r2, #2
 80078dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	4313      	orrs	r3, r2
 8007900:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	68fa      	ldr	r2, [r7, #12]
 8007908:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a21      	ldr	r2, [pc, #132]	; (8007994 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d022      	beq.n	800795a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800791c:	d01d      	beq.n	800795a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a1d      	ldr	r2, [pc, #116]	; (8007998 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d018      	beq.n	800795a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a1b      	ldr	r2, [pc, #108]	; (800799c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d013      	beq.n	800795a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a1a      	ldr	r2, [pc, #104]	; (80079a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d00e      	beq.n	800795a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a18      	ldr	r2, [pc, #96]	; (80079a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d009      	beq.n	800795a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a17      	ldr	r2, [pc, #92]	; (80079a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d004      	beq.n	800795a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a15      	ldr	r2, [pc, #84]	; (80079ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d10c      	bne.n	8007974 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007960:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	68ba      	ldr	r2, [r7, #8]
 8007968:	4313      	orrs	r3, r2
 800796a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	68ba      	ldr	r2, [r7, #8]
 8007972:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	3714      	adds	r7, #20
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop
 8007994:	40010000 	.word	0x40010000
 8007998:	40000400 	.word	0x40000400
 800799c:	40000800 	.word	0x40000800
 80079a0:	40000c00 	.word	0x40000c00
 80079a4:	40010400 	.word	0x40010400
 80079a8:	40014000 	.word	0x40014000
 80079ac:	40001800 	.word	0x40001800

080079b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b085      	sub	sp, #20
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80079ba:	2300      	movs	r3, #0
 80079bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d101      	bne.n	80079cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80079c8:	2302      	movs	r3, #2
 80079ca:	e03d      	b.n	8007a48 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	68db      	ldr	r3, [r3, #12]
 80079de:	4313      	orrs	r3, r2
 80079e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	4313      	orrs	r3, r2
 80079ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	4313      	orrs	r3, r2
 80079fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	691b      	ldr	r3, [r3, #16]
 8007a16:	4313      	orrs	r3, r2
 8007a18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	695b      	ldr	r3, [r3, #20]
 8007a24:	4313      	orrs	r3, r2
 8007a26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	69db      	ldr	r3, [r3, #28]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	68fa      	ldr	r2, [r7, #12]
 8007a3c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3714      	adds	r7, #20
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a5c:	bf00      	nop
 8007a5e:	370c      	adds	r7, #12
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a70:	bf00      	nop
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr

08007a7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d101      	bne.n	8007a8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e042      	b.n	8007b14 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d106      	bne.n	8007aa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f7fb faa0 	bl	8002fe8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2224      	movs	r2, #36	; 0x24
 8007aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	68da      	ldr	r2, [r3, #12]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007abe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 fdbd 	bl	8008640 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	691a      	ldr	r2, [r3, #16]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ad4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	695a      	ldr	r2, [r3, #20]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ae4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	68da      	ldr	r2, [r3, #12]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007af4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2220      	movs	r2, #32
 8007b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2220      	movs	r2, #32
 8007b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007b12:	2300      	movs	r3, #0
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3708      	adds	r7, #8
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b08a      	sub	sp, #40	; 0x28
 8007b20:	af02      	add	r7, sp, #8
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	603b      	str	r3, [r7, #0]
 8007b28:	4613      	mov	r3, r2
 8007b2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	2b20      	cmp	r3, #32
 8007b3a:	d175      	bne.n	8007c28 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d002      	beq.n	8007b48 <HAL_UART_Transmit+0x2c>
 8007b42:	88fb      	ldrh	r3, [r7, #6]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d101      	bne.n	8007b4c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	e06e      	b.n	8007c2a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2221      	movs	r2, #33	; 0x21
 8007b56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b5a:	f7fb ff39 	bl	80039d0 <HAL_GetTick>
 8007b5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	88fa      	ldrh	r2, [r7, #6]
 8007b64:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	88fa      	ldrh	r2, [r7, #6]
 8007b6a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b74:	d108      	bne.n	8007b88 <HAL_UART_Transmit+0x6c>
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	691b      	ldr	r3, [r3, #16]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d104      	bne.n	8007b88 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	61bb      	str	r3, [r7, #24]
 8007b86:	e003      	b.n	8007b90 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007b90:	e02e      	b.n	8007bf0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	9300      	str	r3, [sp, #0]
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	2180      	movs	r1, #128	; 0x80
 8007b9c:	68f8      	ldr	r0, [r7, #12]
 8007b9e:	f000 fb1f 	bl	80081e0 <UART_WaitOnFlagUntilTimeout>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d005      	beq.n	8007bb4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2220      	movs	r2, #32
 8007bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8007bb0:	2303      	movs	r3, #3
 8007bb2:	e03a      	b.n	8007c2a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007bb4:	69fb      	ldr	r3, [r7, #28]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d10b      	bne.n	8007bd2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007bba:	69bb      	ldr	r3, [r7, #24]
 8007bbc:	881b      	ldrh	r3, [r3, #0]
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bc8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007bca:	69bb      	ldr	r3, [r7, #24]
 8007bcc:	3302      	adds	r3, #2
 8007bce:	61bb      	str	r3, [r7, #24]
 8007bd0:	e007      	b.n	8007be2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007bd2:	69fb      	ldr	r3, [r7, #28]
 8007bd4:	781a      	ldrb	r2, [r3, #0]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	3301      	adds	r3, #1
 8007be0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	3b01      	subs	r3, #1
 8007bea:	b29a      	uxth	r2, r3
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d1cb      	bne.n	8007b92 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	9300      	str	r3, [sp, #0]
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	2200      	movs	r2, #0
 8007c02:	2140      	movs	r1, #64	; 0x40
 8007c04:	68f8      	ldr	r0, [r7, #12]
 8007c06:	f000 faeb 	bl	80081e0 <UART_WaitOnFlagUntilTimeout>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d005      	beq.n	8007c1c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2220      	movs	r2, #32
 8007c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8007c18:	2303      	movs	r3, #3
 8007c1a:	e006      	b.n	8007c2a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2220      	movs	r2, #32
 8007c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8007c24:	2300      	movs	r3, #0
 8007c26:	e000      	b.n	8007c2a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007c28:	2302      	movs	r3, #2
  }
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3720      	adds	r7, #32
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b084      	sub	sp, #16
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	60f8      	str	r0, [r7, #12]
 8007c3a:	60b9      	str	r1, [r7, #8]
 8007c3c:	4613      	mov	r3, r2
 8007c3e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	2b20      	cmp	r3, #32
 8007c4a:	d112      	bne.n	8007c72 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d002      	beq.n	8007c58 <HAL_UART_Receive_IT+0x26>
 8007c52:	88fb      	ldrh	r3, [r7, #6]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d101      	bne.n	8007c5c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e00b      	b.n	8007c74 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007c62:	88fb      	ldrh	r3, [r7, #6]
 8007c64:	461a      	mov	r2, r3
 8007c66:	68b9      	ldr	r1, [r7, #8]
 8007c68:	68f8      	ldr	r0, [r7, #12]
 8007c6a:	f000 fb12 	bl	8008292 <UART_Start_Receive_IT>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	e000      	b.n	8007c74 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007c72:	2302      	movs	r3, #2
  }
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3710      	adds	r7, #16
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b0ba      	sub	sp, #232	; 0xe8
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	695b      	ldr	r3, [r3, #20]
 8007c9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cb2:	f003 030f 	and.w	r3, r3, #15
 8007cb6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007cba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d10f      	bne.n	8007ce2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cc6:	f003 0320 	and.w	r3, r3, #32
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d009      	beq.n	8007ce2 <HAL_UART_IRQHandler+0x66>
 8007cce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cd2:	f003 0320 	and.w	r3, r3, #32
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d003      	beq.n	8007ce2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 fbf2 	bl	80084c4 <UART_Receive_IT>
      return;
 8007ce0:	e25b      	b.n	800819a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007ce2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	f000 80de 	beq.w	8007ea8 <HAL_UART_IRQHandler+0x22c>
 8007cec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cf0:	f003 0301 	and.w	r3, r3, #1
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d106      	bne.n	8007d06 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cfc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	f000 80d1 	beq.w	8007ea8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d0a:	f003 0301 	and.w	r3, r3, #1
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d00b      	beq.n	8007d2a <HAL_UART_IRQHandler+0xae>
 8007d12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d005      	beq.n	8007d2a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d22:	f043 0201 	orr.w	r2, r3, #1
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d2e:	f003 0304 	and.w	r3, r3, #4
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d00b      	beq.n	8007d4e <HAL_UART_IRQHandler+0xd2>
 8007d36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d3a:	f003 0301 	and.w	r3, r3, #1
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d005      	beq.n	8007d4e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d46:	f043 0202 	orr.w	r2, r3, #2
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d52:	f003 0302 	and.w	r3, r3, #2
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d00b      	beq.n	8007d72 <HAL_UART_IRQHandler+0xf6>
 8007d5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d5e:	f003 0301 	and.w	r3, r3, #1
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d005      	beq.n	8007d72 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d6a:	f043 0204 	orr.w	r2, r3, #4
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d76:	f003 0308 	and.w	r3, r3, #8
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d011      	beq.n	8007da2 <HAL_UART_IRQHandler+0x126>
 8007d7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d82:	f003 0320 	and.w	r3, r3, #32
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d105      	bne.n	8007d96 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007d8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d8e:	f003 0301 	and.w	r3, r3, #1
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d005      	beq.n	8007da2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d9a:	f043 0208 	orr.w	r2, r3, #8
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	f000 81f2 	beq.w	8008190 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007dac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007db0:	f003 0320 	and.w	r3, r3, #32
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d008      	beq.n	8007dca <HAL_UART_IRQHandler+0x14e>
 8007db8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dbc:	f003 0320 	and.w	r3, r3, #32
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d002      	beq.n	8007dca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 fb7d 	bl	80084c4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	695b      	ldr	r3, [r3, #20]
 8007dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dd4:	2b40      	cmp	r3, #64	; 0x40
 8007dd6:	bf0c      	ite	eq
 8007dd8:	2301      	moveq	r3, #1
 8007dda:	2300      	movne	r3, #0
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007de6:	f003 0308 	and.w	r3, r3, #8
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d103      	bne.n	8007df6 <HAL_UART_IRQHandler+0x17a>
 8007dee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d04f      	beq.n	8007e96 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 fa85 	bl	8008306 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	695b      	ldr	r3, [r3, #20]
 8007e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e06:	2b40      	cmp	r3, #64	; 0x40
 8007e08:	d141      	bne.n	8007e8e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	3314      	adds	r3, #20
 8007e10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e18:	e853 3f00 	ldrex	r3, [r3]
 8007e1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007e20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	3314      	adds	r3, #20
 8007e32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007e36:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007e3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007e42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007e46:	e841 2300 	strex	r3, r2, [r1]
 8007e4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007e4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d1d9      	bne.n	8007e0a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d013      	beq.n	8007e86 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e62:	4a7e      	ldr	r2, [pc, #504]	; (800805c <HAL_UART_IRQHandler+0x3e0>)
 8007e64:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7fc fda4 	bl	80049b8 <HAL_DMA_Abort_IT>
 8007e70:	4603      	mov	r3, r0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d016      	beq.n	8007ea4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007e80:	4610      	mov	r0, r2
 8007e82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e84:	e00e      	b.n	8007ea4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 f994 	bl	80081b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e8c:	e00a      	b.n	8007ea4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 f990 	bl	80081b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e94:	e006      	b.n	8007ea4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 f98c 	bl	80081b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8007ea2:	e175      	b.n	8008190 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ea4:	bf00      	nop
    return;
 8007ea6:	e173      	b.n	8008190 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	f040 814f 	bne.w	8008150 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eb6:	f003 0310 	and.w	r3, r3, #16
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	f000 8148 	beq.w	8008150 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ec4:	f003 0310 	and.w	r3, r3, #16
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	f000 8141 	beq.w	8008150 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ece:	2300      	movs	r3, #0
 8007ed0:	60bb      	str	r3, [r7, #8]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	60bb      	str	r3, [r7, #8]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	60bb      	str	r3, [r7, #8]
 8007ee2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	695b      	ldr	r3, [r3, #20]
 8007eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eee:	2b40      	cmp	r3, #64	; 0x40
 8007ef0:	f040 80b6 	bne.w	8008060 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007f00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	f000 8145 	beq.w	8008194 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007f0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007f12:	429a      	cmp	r2, r3
 8007f14:	f080 813e 	bcs.w	8008194 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007f1e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f24:	69db      	ldr	r3, [r3, #28]
 8007f26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f2a:	f000 8088 	beq.w	800803e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	330c      	adds	r3, #12
 8007f34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007f3c:	e853 3f00 	ldrex	r3, [r3]
 8007f40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007f44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007f48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	330c      	adds	r3, #12
 8007f56:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007f5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007f5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f62:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007f66:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007f6a:	e841 2300 	strex	r3, r2, [r1]
 8007f6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007f72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d1d9      	bne.n	8007f2e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	3314      	adds	r3, #20
 8007f80:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f84:	e853 3f00 	ldrex	r3, [r3]
 8007f88:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007f8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f8c:	f023 0301 	bic.w	r3, r3, #1
 8007f90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	3314      	adds	r3, #20
 8007f9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007f9e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007fa2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007fa6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007faa:	e841 2300 	strex	r3, r2, [r1]
 8007fae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007fb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d1e1      	bne.n	8007f7a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	3314      	adds	r3, #20
 8007fbc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007fc0:	e853 3f00 	ldrex	r3, [r3]
 8007fc4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007fc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fcc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	3314      	adds	r3, #20
 8007fd6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007fda:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007fdc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fde:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007fe0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007fe2:	e841 2300 	strex	r3, r2, [r1]
 8007fe6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007fe8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d1e3      	bne.n	8007fb6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2220      	movs	r2, #32
 8007ff2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	330c      	adds	r3, #12
 8008002:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008004:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008006:	e853 3f00 	ldrex	r3, [r3]
 800800a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800800c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800800e:	f023 0310 	bic.w	r3, r3, #16
 8008012:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	330c      	adds	r3, #12
 800801c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008020:	65ba      	str	r2, [r7, #88]	; 0x58
 8008022:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008024:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008026:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008028:	e841 2300 	strex	r3, r2, [r1]
 800802c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800802e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008030:	2b00      	cmp	r3, #0
 8008032:	d1e3      	bne.n	8007ffc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008038:	4618      	mov	r0, r3
 800803a:	f7fc fc4d 	bl	80048d8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2202      	movs	r2, #2
 8008042:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800804c:	b29b      	uxth	r3, r3
 800804e:	1ad3      	subs	r3, r2, r3
 8008050:	b29b      	uxth	r3, r3
 8008052:	4619      	mov	r1, r3
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 f8b7 	bl	80081c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800805a:	e09b      	b.n	8008194 <HAL_UART_IRQHandler+0x518>
 800805c:	080083cd 	.word	0x080083cd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008068:	b29b      	uxth	r3, r3
 800806a:	1ad3      	subs	r3, r2, r3
 800806c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008074:	b29b      	uxth	r3, r3
 8008076:	2b00      	cmp	r3, #0
 8008078:	f000 808e 	beq.w	8008198 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800807c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008080:	2b00      	cmp	r3, #0
 8008082:	f000 8089 	beq.w	8008198 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	330c      	adds	r3, #12
 800808c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800808e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008090:	e853 3f00 	ldrex	r3, [r3]
 8008094:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008098:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800809c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	330c      	adds	r3, #12
 80080a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80080aa:	647a      	str	r2, [r7, #68]	; 0x44
 80080ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80080b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80080b2:	e841 2300 	strex	r3, r2, [r1]
 80080b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80080b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d1e3      	bne.n	8008086 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	3314      	adds	r3, #20
 80080c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c8:	e853 3f00 	ldrex	r3, [r3]
 80080cc:	623b      	str	r3, [r7, #32]
   return(result);
 80080ce:	6a3b      	ldr	r3, [r7, #32]
 80080d0:	f023 0301 	bic.w	r3, r3, #1
 80080d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	3314      	adds	r3, #20
 80080de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80080e2:	633a      	str	r2, [r7, #48]	; 0x30
 80080e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080ea:	e841 2300 	strex	r3, r2, [r1]
 80080ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80080f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d1e3      	bne.n	80080be <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2220      	movs	r2, #32
 80080fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2200      	movs	r2, #0
 8008102:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	330c      	adds	r3, #12
 800810a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	e853 3f00 	ldrex	r3, [r3]
 8008112:	60fb      	str	r3, [r7, #12]
   return(result);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f023 0310 	bic.w	r3, r3, #16
 800811a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	330c      	adds	r3, #12
 8008124:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008128:	61fa      	str	r2, [r7, #28]
 800812a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800812c:	69b9      	ldr	r1, [r7, #24]
 800812e:	69fa      	ldr	r2, [r7, #28]
 8008130:	e841 2300 	strex	r3, r2, [r1]
 8008134:	617b      	str	r3, [r7, #20]
   return(result);
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d1e3      	bne.n	8008104 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2202      	movs	r2, #2
 8008140:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008142:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008146:	4619      	mov	r1, r3
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 f83d 	bl	80081c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800814e:	e023      	b.n	8008198 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008158:	2b00      	cmp	r3, #0
 800815a:	d009      	beq.n	8008170 <HAL_UART_IRQHandler+0x4f4>
 800815c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008164:	2b00      	cmp	r3, #0
 8008166:	d003      	beq.n	8008170 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 f943 	bl	80083f4 <UART_Transmit_IT>
    return;
 800816e:	e014      	b.n	800819a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008178:	2b00      	cmp	r3, #0
 800817a:	d00e      	beq.n	800819a <HAL_UART_IRQHandler+0x51e>
 800817c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008184:	2b00      	cmp	r3, #0
 8008186:	d008      	beq.n	800819a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 f983 	bl	8008494 <UART_EndTransmit_IT>
    return;
 800818e:	e004      	b.n	800819a <HAL_UART_IRQHandler+0x51e>
    return;
 8008190:	bf00      	nop
 8008192:	e002      	b.n	800819a <HAL_UART_IRQHandler+0x51e>
      return;
 8008194:	bf00      	nop
 8008196:	e000      	b.n	800819a <HAL_UART_IRQHandler+0x51e>
      return;
 8008198:	bf00      	nop
  }
}
 800819a:	37e8      	adds	r7, #232	; 0xe8
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}

080081a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80081a8:	bf00      	nop
 80081aa:	370c      	adds	r7, #12
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80081bc:	bf00      	nop
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b083      	sub	sp, #12
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	460b      	mov	r3, r1
 80081d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80081d4:	bf00      	nop
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr

080081e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b086      	sub	sp, #24
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	603b      	str	r3, [r7, #0]
 80081ec:	4613      	mov	r3, r2
 80081ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081f0:	e03b      	b.n	800826a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081f2:	6a3b      	ldr	r3, [r7, #32]
 80081f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081f8:	d037      	beq.n	800826a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081fa:	f7fb fbe9 	bl	80039d0 <HAL_GetTick>
 80081fe:	4602      	mov	r2, r0
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	1ad3      	subs	r3, r2, r3
 8008204:	6a3a      	ldr	r2, [r7, #32]
 8008206:	429a      	cmp	r2, r3
 8008208:	d302      	bcc.n	8008210 <UART_WaitOnFlagUntilTimeout+0x30>
 800820a:	6a3b      	ldr	r3, [r7, #32]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d101      	bne.n	8008214 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008210:	2303      	movs	r3, #3
 8008212:	e03a      	b.n	800828a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	f003 0304 	and.w	r3, r3, #4
 800821e:	2b00      	cmp	r3, #0
 8008220:	d023      	beq.n	800826a <UART_WaitOnFlagUntilTimeout+0x8a>
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	2b80      	cmp	r3, #128	; 0x80
 8008226:	d020      	beq.n	800826a <UART_WaitOnFlagUntilTimeout+0x8a>
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	2b40      	cmp	r3, #64	; 0x40
 800822c:	d01d      	beq.n	800826a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f003 0308 	and.w	r3, r3, #8
 8008238:	2b08      	cmp	r3, #8
 800823a:	d116      	bne.n	800826a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800823c:	2300      	movs	r3, #0
 800823e:	617b      	str	r3, [r7, #20]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	617b      	str	r3, [r7, #20]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	617b      	str	r3, [r7, #20]
 8008250:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008252:	68f8      	ldr	r0, [r7, #12]
 8008254:	f000 f857 	bl	8008306 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2208      	movs	r2, #8
 800825c:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2200      	movs	r2, #0
 8008262:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	e00f      	b.n	800828a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	4013      	ands	r3, r2
 8008274:	68ba      	ldr	r2, [r7, #8]
 8008276:	429a      	cmp	r2, r3
 8008278:	bf0c      	ite	eq
 800827a:	2301      	moveq	r3, #1
 800827c:	2300      	movne	r3, #0
 800827e:	b2db      	uxtb	r3, r3
 8008280:	461a      	mov	r2, r3
 8008282:	79fb      	ldrb	r3, [r7, #7]
 8008284:	429a      	cmp	r2, r3
 8008286:	d0b4      	beq.n	80081f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008288:	2300      	movs	r3, #0
}
 800828a:	4618      	mov	r0, r3
 800828c:	3718      	adds	r7, #24
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}

08008292 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008292:	b480      	push	{r7}
 8008294:	b085      	sub	sp, #20
 8008296:	af00      	add	r7, sp, #0
 8008298:	60f8      	str	r0, [r7, #12]
 800829a:	60b9      	str	r1, [r7, #8]
 800829c:	4613      	mov	r3, r2
 800829e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	68ba      	ldr	r2, [r7, #8]
 80082a4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	88fa      	ldrh	r2, [r7, #6]
 80082aa:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	88fa      	ldrh	r2, [r7, #6]
 80082b0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2200      	movs	r2, #0
 80082b6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2222      	movs	r2, #34	; 0x22
 80082bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	691b      	ldr	r3, [r3, #16]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d007      	beq.n	80082d8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	68da      	ldr	r2, [r3, #12]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082d6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	695a      	ldr	r2, [r3, #20]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f042 0201 	orr.w	r2, r2, #1
 80082e6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	68da      	ldr	r2, [r3, #12]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f042 0220 	orr.w	r2, r2, #32
 80082f6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80082f8:	2300      	movs	r3, #0
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3714      	adds	r7, #20
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr

08008306 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008306:	b480      	push	{r7}
 8008308:	b095      	sub	sp, #84	; 0x54
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	330c      	adds	r3, #12
 8008314:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008318:	e853 3f00 	ldrex	r3, [r3]
 800831c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800831e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008320:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008324:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	330c      	adds	r3, #12
 800832c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800832e:	643a      	str	r2, [r7, #64]	; 0x40
 8008330:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008332:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008334:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008336:	e841 2300 	strex	r3, r2, [r1]
 800833a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800833c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800833e:	2b00      	cmp	r3, #0
 8008340:	d1e5      	bne.n	800830e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	3314      	adds	r3, #20
 8008348:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800834a:	6a3b      	ldr	r3, [r7, #32]
 800834c:	e853 3f00 	ldrex	r3, [r3]
 8008350:	61fb      	str	r3, [r7, #28]
   return(result);
 8008352:	69fb      	ldr	r3, [r7, #28]
 8008354:	f023 0301 	bic.w	r3, r3, #1
 8008358:	64bb      	str	r3, [r7, #72]	; 0x48
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	3314      	adds	r3, #20
 8008360:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008362:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008364:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008366:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008368:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800836a:	e841 2300 	strex	r3, r2, [r1]
 800836e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008372:	2b00      	cmp	r3, #0
 8008374:	d1e5      	bne.n	8008342 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800837a:	2b01      	cmp	r3, #1
 800837c:	d119      	bne.n	80083b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	330c      	adds	r3, #12
 8008384:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	e853 3f00 	ldrex	r3, [r3]
 800838c:	60bb      	str	r3, [r7, #8]
   return(result);
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	f023 0310 	bic.w	r3, r3, #16
 8008394:	647b      	str	r3, [r7, #68]	; 0x44
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	330c      	adds	r3, #12
 800839c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800839e:	61ba      	str	r2, [r7, #24]
 80083a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a2:	6979      	ldr	r1, [r7, #20]
 80083a4:	69ba      	ldr	r2, [r7, #24]
 80083a6:	e841 2300 	strex	r3, r2, [r1]
 80083aa:	613b      	str	r3, [r7, #16]
   return(result);
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d1e5      	bne.n	800837e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2220      	movs	r2, #32
 80083b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2200      	movs	r2, #0
 80083be:	631a      	str	r2, [r3, #48]	; 0x30
}
 80083c0:	bf00      	nop
 80083c2:	3754      	adds	r7, #84	; 0x54
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr

080083cc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2200      	movs	r2, #0
 80083de:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2200      	movs	r2, #0
 80083e4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80083e6:	68f8      	ldr	r0, [r7, #12]
 80083e8:	f7ff fee4 	bl	80081b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083ec:	bf00      	nop
 80083ee:	3710      	adds	r7, #16
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b085      	sub	sp, #20
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008402:	b2db      	uxtb	r3, r3
 8008404:	2b21      	cmp	r3, #33	; 0x21
 8008406:	d13e      	bne.n	8008486 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008410:	d114      	bne.n	800843c <UART_Transmit_IT+0x48>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	691b      	ldr	r3, [r3, #16]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d110      	bne.n	800843c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6a1b      	ldr	r3, [r3, #32]
 800841e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	881b      	ldrh	r3, [r3, #0]
 8008424:	461a      	mov	r2, r3
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800842e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6a1b      	ldr	r3, [r3, #32]
 8008434:	1c9a      	adds	r2, r3, #2
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	621a      	str	r2, [r3, #32]
 800843a:	e008      	b.n	800844e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6a1b      	ldr	r3, [r3, #32]
 8008440:	1c59      	adds	r1, r3, #1
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	6211      	str	r1, [r2, #32]
 8008446:	781a      	ldrb	r2, [r3, #0]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008452:	b29b      	uxth	r3, r3
 8008454:	3b01      	subs	r3, #1
 8008456:	b29b      	uxth	r3, r3
 8008458:	687a      	ldr	r2, [r7, #4]
 800845a:	4619      	mov	r1, r3
 800845c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800845e:	2b00      	cmp	r3, #0
 8008460:	d10f      	bne.n	8008482 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	68da      	ldr	r2, [r3, #12]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008470:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	68da      	ldr	r2, [r3, #12]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008480:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008482:	2300      	movs	r3, #0
 8008484:	e000      	b.n	8008488 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008486:	2302      	movs	r3, #2
  }
}
 8008488:	4618      	mov	r0, r3
 800848a:	3714      	adds	r7, #20
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr

08008494 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b082      	sub	sp, #8
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	68da      	ldr	r2, [r3, #12]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084aa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2220      	movs	r2, #32
 80084b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f7ff fe73 	bl	80081a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80084ba:	2300      	movs	r3, #0
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3708      	adds	r7, #8
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b08c      	sub	sp, #48	; 0x30
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80084d2:	b2db      	uxtb	r3, r3
 80084d4:	2b22      	cmp	r3, #34	; 0x22
 80084d6:	f040 80ae 	bne.w	8008636 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084e2:	d117      	bne.n	8008514 <UART_Receive_IT+0x50>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	691b      	ldr	r3, [r3, #16]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d113      	bne.n	8008514 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80084ec:	2300      	movs	r3, #0
 80084ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084f4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008502:	b29a      	uxth	r2, r3
 8008504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008506:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800850c:	1c9a      	adds	r2, r3, #2
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	629a      	str	r2, [r3, #40]	; 0x28
 8008512:	e026      	b.n	8008562 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008518:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800851a:	2300      	movs	r3, #0
 800851c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008526:	d007      	beq.n	8008538 <UART_Receive_IT+0x74>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d10a      	bne.n	8008546 <UART_Receive_IT+0x82>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	691b      	ldr	r3, [r3, #16]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d106      	bne.n	8008546 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	b2da      	uxtb	r2, r3
 8008540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008542:	701a      	strb	r2, [r3, #0]
 8008544:	e008      	b.n	8008558 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	b2db      	uxtb	r3, r3
 800854e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008552:	b2da      	uxtb	r2, r3
 8008554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008556:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800855c:	1c5a      	adds	r2, r3, #1
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008566:	b29b      	uxth	r3, r3
 8008568:	3b01      	subs	r3, #1
 800856a:	b29b      	uxth	r3, r3
 800856c:	687a      	ldr	r2, [r7, #4]
 800856e:	4619      	mov	r1, r3
 8008570:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008572:	2b00      	cmp	r3, #0
 8008574:	d15d      	bne.n	8008632 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	68da      	ldr	r2, [r3, #12]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f022 0220 	bic.w	r2, r2, #32
 8008584:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	68da      	ldr	r2, [r3, #12]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008594:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	695a      	ldr	r2, [r3, #20]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f022 0201 	bic.w	r2, r2, #1
 80085a4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2220      	movs	r2, #32
 80085aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2200      	movs	r2, #0
 80085b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d135      	bne.n	8008628 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2200      	movs	r2, #0
 80085c0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	330c      	adds	r3, #12
 80085c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	e853 3f00 	ldrex	r3, [r3]
 80085d0:	613b      	str	r3, [r7, #16]
   return(result);
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	f023 0310 	bic.w	r3, r3, #16
 80085d8:	627b      	str	r3, [r7, #36]	; 0x24
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	330c      	adds	r3, #12
 80085e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085e2:	623a      	str	r2, [r7, #32]
 80085e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e6:	69f9      	ldr	r1, [r7, #28]
 80085e8:	6a3a      	ldr	r2, [r7, #32]
 80085ea:	e841 2300 	strex	r3, r2, [r1]
 80085ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80085f0:	69bb      	ldr	r3, [r7, #24]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d1e5      	bne.n	80085c2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f003 0310 	and.w	r3, r3, #16
 8008600:	2b10      	cmp	r3, #16
 8008602:	d10a      	bne.n	800861a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008604:	2300      	movs	r3, #0
 8008606:	60fb      	str	r3, [r7, #12]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	60fb      	str	r3, [r7, #12]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	60fb      	str	r3, [r7, #12]
 8008618:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800861e:	4619      	mov	r1, r3
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f7ff fdd1 	bl	80081c8 <HAL_UARTEx_RxEventCallback>
 8008626:	e002      	b.n	800862e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f7f8 fcff 	bl	800102c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800862e:	2300      	movs	r3, #0
 8008630:	e002      	b.n	8008638 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008632:	2300      	movs	r3, #0
 8008634:	e000      	b.n	8008638 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008636:	2302      	movs	r3, #2
  }
}
 8008638:	4618      	mov	r0, r3
 800863a:	3730      	adds	r7, #48	; 0x30
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008640:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008644:	b0c0      	sub	sp, #256	; 0x100
 8008646:	af00      	add	r7, sp, #0
 8008648:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800864c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	691b      	ldr	r3, [r3, #16]
 8008654:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800865c:	68d9      	ldr	r1, [r3, #12]
 800865e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008662:	681a      	ldr	r2, [r3, #0]
 8008664:	ea40 0301 	orr.w	r3, r0, r1
 8008668:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800866a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800866e:	689a      	ldr	r2, [r3, #8]
 8008670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008674:	691b      	ldr	r3, [r3, #16]
 8008676:	431a      	orrs	r2, r3
 8008678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800867c:	695b      	ldr	r3, [r3, #20]
 800867e:	431a      	orrs	r2, r3
 8008680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008684:	69db      	ldr	r3, [r3, #28]
 8008686:	4313      	orrs	r3, r2
 8008688:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800868c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	68db      	ldr	r3, [r3, #12]
 8008694:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008698:	f021 010c 	bic.w	r1, r1, #12
 800869c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086a0:	681a      	ldr	r2, [r3, #0]
 80086a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80086a6:	430b      	orrs	r3, r1
 80086a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80086aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	695b      	ldr	r3, [r3, #20]
 80086b2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80086b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086ba:	6999      	ldr	r1, [r3, #24]
 80086bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	ea40 0301 	orr.w	r3, r0, r1
 80086c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80086c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086cc:	681a      	ldr	r2, [r3, #0]
 80086ce:	4b8f      	ldr	r3, [pc, #572]	; (800890c <UART_SetConfig+0x2cc>)
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d005      	beq.n	80086e0 <UART_SetConfig+0xa0>
 80086d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	4b8d      	ldr	r3, [pc, #564]	; (8008910 <UART_SetConfig+0x2d0>)
 80086dc:	429a      	cmp	r2, r3
 80086de:	d104      	bne.n	80086ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80086e0:	f7fd fe8e 	bl	8006400 <HAL_RCC_GetPCLK2Freq>
 80086e4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80086e8:	e003      	b.n	80086f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80086ea:	f7fd fe75 	bl	80063d8 <HAL_RCC_GetPCLK1Freq>
 80086ee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80086f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086f6:	69db      	ldr	r3, [r3, #28]
 80086f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086fc:	f040 810c 	bne.w	8008918 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008700:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008704:	2200      	movs	r2, #0
 8008706:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800870a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800870e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008712:	4622      	mov	r2, r4
 8008714:	462b      	mov	r3, r5
 8008716:	1891      	adds	r1, r2, r2
 8008718:	65b9      	str	r1, [r7, #88]	; 0x58
 800871a:	415b      	adcs	r3, r3
 800871c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800871e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008722:	4621      	mov	r1, r4
 8008724:	eb12 0801 	adds.w	r8, r2, r1
 8008728:	4629      	mov	r1, r5
 800872a:	eb43 0901 	adc.w	r9, r3, r1
 800872e:	f04f 0200 	mov.w	r2, #0
 8008732:	f04f 0300 	mov.w	r3, #0
 8008736:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800873a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800873e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008742:	4690      	mov	r8, r2
 8008744:	4699      	mov	r9, r3
 8008746:	4623      	mov	r3, r4
 8008748:	eb18 0303 	adds.w	r3, r8, r3
 800874c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008750:	462b      	mov	r3, r5
 8008752:	eb49 0303 	adc.w	r3, r9, r3
 8008756:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800875a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	2200      	movs	r2, #0
 8008762:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008766:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800876a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800876e:	460b      	mov	r3, r1
 8008770:	18db      	adds	r3, r3, r3
 8008772:	653b      	str	r3, [r7, #80]	; 0x50
 8008774:	4613      	mov	r3, r2
 8008776:	eb42 0303 	adc.w	r3, r2, r3
 800877a:	657b      	str	r3, [r7, #84]	; 0x54
 800877c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008780:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008784:	f7f8 fa90 	bl	8000ca8 <__aeabi_uldivmod>
 8008788:	4602      	mov	r2, r0
 800878a:	460b      	mov	r3, r1
 800878c:	4b61      	ldr	r3, [pc, #388]	; (8008914 <UART_SetConfig+0x2d4>)
 800878e:	fba3 2302 	umull	r2, r3, r3, r2
 8008792:	095b      	lsrs	r3, r3, #5
 8008794:	011c      	lsls	r4, r3, #4
 8008796:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800879a:	2200      	movs	r2, #0
 800879c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80087a0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80087a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80087a8:	4642      	mov	r2, r8
 80087aa:	464b      	mov	r3, r9
 80087ac:	1891      	adds	r1, r2, r2
 80087ae:	64b9      	str	r1, [r7, #72]	; 0x48
 80087b0:	415b      	adcs	r3, r3
 80087b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80087b8:	4641      	mov	r1, r8
 80087ba:	eb12 0a01 	adds.w	sl, r2, r1
 80087be:	4649      	mov	r1, r9
 80087c0:	eb43 0b01 	adc.w	fp, r3, r1
 80087c4:	f04f 0200 	mov.w	r2, #0
 80087c8:	f04f 0300 	mov.w	r3, #0
 80087cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80087d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80087d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80087d8:	4692      	mov	sl, r2
 80087da:	469b      	mov	fp, r3
 80087dc:	4643      	mov	r3, r8
 80087de:	eb1a 0303 	adds.w	r3, sl, r3
 80087e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80087e6:	464b      	mov	r3, r9
 80087e8:	eb4b 0303 	adc.w	r3, fp, r3
 80087ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80087f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	2200      	movs	r2, #0
 80087f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80087fc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008800:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008804:	460b      	mov	r3, r1
 8008806:	18db      	adds	r3, r3, r3
 8008808:	643b      	str	r3, [r7, #64]	; 0x40
 800880a:	4613      	mov	r3, r2
 800880c:	eb42 0303 	adc.w	r3, r2, r3
 8008810:	647b      	str	r3, [r7, #68]	; 0x44
 8008812:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008816:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800881a:	f7f8 fa45 	bl	8000ca8 <__aeabi_uldivmod>
 800881e:	4602      	mov	r2, r0
 8008820:	460b      	mov	r3, r1
 8008822:	4611      	mov	r1, r2
 8008824:	4b3b      	ldr	r3, [pc, #236]	; (8008914 <UART_SetConfig+0x2d4>)
 8008826:	fba3 2301 	umull	r2, r3, r3, r1
 800882a:	095b      	lsrs	r3, r3, #5
 800882c:	2264      	movs	r2, #100	; 0x64
 800882e:	fb02 f303 	mul.w	r3, r2, r3
 8008832:	1acb      	subs	r3, r1, r3
 8008834:	00db      	lsls	r3, r3, #3
 8008836:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800883a:	4b36      	ldr	r3, [pc, #216]	; (8008914 <UART_SetConfig+0x2d4>)
 800883c:	fba3 2302 	umull	r2, r3, r3, r2
 8008840:	095b      	lsrs	r3, r3, #5
 8008842:	005b      	lsls	r3, r3, #1
 8008844:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008848:	441c      	add	r4, r3
 800884a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800884e:	2200      	movs	r2, #0
 8008850:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008854:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008858:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800885c:	4642      	mov	r2, r8
 800885e:	464b      	mov	r3, r9
 8008860:	1891      	adds	r1, r2, r2
 8008862:	63b9      	str	r1, [r7, #56]	; 0x38
 8008864:	415b      	adcs	r3, r3
 8008866:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008868:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800886c:	4641      	mov	r1, r8
 800886e:	1851      	adds	r1, r2, r1
 8008870:	6339      	str	r1, [r7, #48]	; 0x30
 8008872:	4649      	mov	r1, r9
 8008874:	414b      	adcs	r3, r1
 8008876:	637b      	str	r3, [r7, #52]	; 0x34
 8008878:	f04f 0200 	mov.w	r2, #0
 800887c:	f04f 0300 	mov.w	r3, #0
 8008880:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008884:	4659      	mov	r1, fp
 8008886:	00cb      	lsls	r3, r1, #3
 8008888:	4651      	mov	r1, sl
 800888a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800888e:	4651      	mov	r1, sl
 8008890:	00ca      	lsls	r2, r1, #3
 8008892:	4610      	mov	r0, r2
 8008894:	4619      	mov	r1, r3
 8008896:	4603      	mov	r3, r0
 8008898:	4642      	mov	r2, r8
 800889a:	189b      	adds	r3, r3, r2
 800889c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80088a0:	464b      	mov	r3, r9
 80088a2:	460a      	mov	r2, r1
 80088a4:	eb42 0303 	adc.w	r3, r2, r3
 80088a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80088ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80088b8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80088bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80088c0:	460b      	mov	r3, r1
 80088c2:	18db      	adds	r3, r3, r3
 80088c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80088c6:	4613      	mov	r3, r2
 80088c8:	eb42 0303 	adc.w	r3, r2, r3
 80088cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80088d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80088d6:	f7f8 f9e7 	bl	8000ca8 <__aeabi_uldivmod>
 80088da:	4602      	mov	r2, r0
 80088dc:	460b      	mov	r3, r1
 80088de:	4b0d      	ldr	r3, [pc, #52]	; (8008914 <UART_SetConfig+0x2d4>)
 80088e0:	fba3 1302 	umull	r1, r3, r3, r2
 80088e4:	095b      	lsrs	r3, r3, #5
 80088e6:	2164      	movs	r1, #100	; 0x64
 80088e8:	fb01 f303 	mul.w	r3, r1, r3
 80088ec:	1ad3      	subs	r3, r2, r3
 80088ee:	00db      	lsls	r3, r3, #3
 80088f0:	3332      	adds	r3, #50	; 0x32
 80088f2:	4a08      	ldr	r2, [pc, #32]	; (8008914 <UART_SetConfig+0x2d4>)
 80088f4:	fba2 2303 	umull	r2, r3, r2, r3
 80088f8:	095b      	lsrs	r3, r3, #5
 80088fa:	f003 0207 	and.w	r2, r3, #7
 80088fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4422      	add	r2, r4
 8008906:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008908:	e106      	b.n	8008b18 <UART_SetConfig+0x4d8>
 800890a:	bf00      	nop
 800890c:	40011000 	.word	0x40011000
 8008910:	40011400 	.word	0x40011400
 8008914:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008918:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800891c:	2200      	movs	r2, #0
 800891e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008922:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008926:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800892a:	4642      	mov	r2, r8
 800892c:	464b      	mov	r3, r9
 800892e:	1891      	adds	r1, r2, r2
 8008930:	6239      	str	r1, [r7, #32]
 8008932:	415b      	adcs	r3, r3
 8008934:	627b      	str	r3, [r7, #36]	; 0x24
 8008936:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800893a:	4641      	mov	r1, r8
 800893c:	1854      	adds	r4, r2, r1
 800893e:	4649      	mov	r1, r9
 8008940:	eb43 0501 	adc.w	r5, r3, r1
 8008944:	f04f 0200 	mov.w	r2, #0
 8008948:	f04f 0300 	mov.w	r3, #0
 800894c:	00eb      	lsls	r3, r5, #3
 800894e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008952:	00e2      	lsls	r2, r4, #3
 8008954:	4614      	mov	r4, r2
 8008956:	461d      	mov	r5, r3
 8008958:	4643      	mov	r3, r8
 800895a:	18e3      	adds	r3, r4, r3
 800895c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008960:	464b      	mov	r3, r9
 8008962:	eb45 0303 	adc.w	r3, r5, r3
 8008966:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800896a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	2200      	movs	r2, #0
 8008972:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008976:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800897a:	f04f 0200 	mov.w	r2, #0
 800897e:	f04f 0300 	mov.w	r3, #0
 8008982:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008986:	4629      	mov	r1, r5
 8008988:	008b      	lsls	r3, r1, #2
 800898a:	4621      	mov	r1, r4
 800898c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008990:	4621      	mov	r1, r4
 8008992:	008a      	lsls	r2, r1, #2
 8008994:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008998:	f7f8 f986 	bl	8000ca8 <__aeabi_uldivmod>
 800899c:	4602      	mov	r2, r0
 800899e:	460b      	mov	r3, r1
 80089a0:	4b60      	ldr	r3, [pc, #384]	; (8008b24 <UART_SetConfig+0x4e4>)
 80089a2:	fba3 2302 	umull	r2, r3, r3, r2
 80089a6:	095b      	lsrs	r3, r3, #5
 80089a8:	011c      	lsls	r4, r3, #4
 80089aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089ae:	2200      	movs	r2, #0
 80089b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80089b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80089b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80089bc:	4642      	mov	r2, r8
 80089be:	464b      	mov	r3, r9
 80089c0:	1891      	adds	r1, r2, r2
 80089c2:	61b9      	str	r1, [r7, #24]
 80089c4:	415b      	adcs	r3, r3
 80089c6:	61fb      	str	r3, [r7, #28]
 80089c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80089cc:	4641      	mov	r1, r8
 80089ce:	1851      	adds	r1, r2, r1
 80089d0:	6139      	str	r1, [r7, #16]
 80089d2:	4649      	mov	r1, r9
 80089d4:	414b      	adcs	r3, r1
 80089d6:	617b      	str	r3, [r7, #20]
 80089d8:	f04f 0200 	mov.w	r2, #0
 80089dc:	f04f 0300 	mov.w	r3, #0
 80089e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80089e4:	4659      	mov	r1, fp
 80089e6:	00cb      	lsls	r3, r1, #3
 80089e8:	4651      	mov	r1, sl
 80089ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80089ee:	4651      	mov	r1, sl
 80089f0:	00ca      	lsls	r2, r1, #3
 80089f2:	4610      	mov	r0, r2
 80089f4:	4619      	mov	r1, r3
 80089f6:	4603      	mov	r3, r0
 80089f8:	4642      	mov	r2, r8
 80089fa:	189b      	adds	r3, r3, r2
 80089fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008a00:	464b      	mov	r3, r9
 8008a02:	460a      	mov	r2, r1
 8008a04:	eb42 0303 	adc.w	r3, r2, r3
 8008a08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	2200      	movs	r2, #0
 8008a14:	67bb      	str	r3, [r7, #120]	; 0x78
 8008a16:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008a18:	f04f 0200 	mov.w	r2, #0
 8008a1c:	f04f 0300 	mov.w	r3, #0
 8008a20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008a24:	4649      	mov	r1, r9
 8008a26:	008b      	lsls	r3, r1, #2
 8008a28:	4641      	mov	r1, r8
 8008a2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008a2e:	4641      	mov	r1, r8
 8008a30:	008a      	lsls	r2, r1, #2
 8008a32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008a36:	f7f8 f937 	bl	8000ca8 <__aeabi_uldivmod>
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	4611      	mov	r1, r2
 8008a40:	4b38      	ldr	r3, [pc, #224]	; (8008b24 <UART_SetConfig+0x4e4>)
 8008a42:	fba3 2301 	umull	r2, r3, r3, r1
 8008a46:	095b      	lsrs	r3, r3, #5
 8008a48:	2264      	movs	r2, #100	; 0x64
 8008a4a:	fb02 f303 	mul.w	r3, r2, r3
 8008a4e:	1acb      	subs	r3, r1, r3
 8008a50:	011b      	lsls	r3, r3, #4
 8008a52:	3332      	adds	r3, #50	; 0x32
 8008a54:	4a33      	ldr	r2, [pc, #204]	; (8008b24 <UART_SetConfig+0x4e4>)
 8008a56:	fba2 2303 	umull	r2, r3, r2, r3
 8008a5a:	095b      	lsrs	r3, r3, #5
 8008a5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a60:	441c      	add	r4, r3
 8008a62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a66:	2200      	movs	r2, #0
 8008a68:	673b      	str	r3, [r7, #112]	; 0x70
 8008a6a:	677a      	str	r2, [r7, #116]	; 0x74
 8008a6c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008a70:	4642      	mov	r2, r8
 8008a72:	464b      	mov	r3, r9
 8008a74:	1891      	adds	r1, r2, r2
 8008a76:	60b9      	str	r1, [r7, #8]
 8008a78:	415b      	adcs	r3, r3
 8008a7a:	60fb      	str	r3, [r7, #12]
 8008a7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008a80:	4641      	mov	r1, r8
 8008a82:	1851      	adds	r1, r2, r1
 8008a84:	6039      	str	r1, [r7, #0]
 8008a86:	4649      	mov	r1, r9
 8008a88:	414b      	adcs	r3, r1
 8008a8a:	607b      	str	r3, [r7, #4]
 8008a8c:	f04f 0200 	mov.w	r2, #0
 8008a90:	f04f 0300 	mov.w	r3, #0
 8008a94:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008a98:	4659      	mov	r1, fp
 8008a9a:	00cb      	lsls	r3, r1, #3
 8008a9c:	4651      	mov	r1, sl
 8008a9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008aa2:	4651      	mov	r1, sl
 8008aa4:	00ca      	lsls	r2, r1, #3
 8008aa6:	4610      	mov	r0, r2
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	4603      	mov	r3, r0
 8008aac:	4642      	mov	r2, r8
 8008aae:	189b      	adds	r3, r3, r2
 8008ab0:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ab2:	464b      	mov	r3, r9
 8008ab4:	460a      	mov	r2, r1
 8008ab6:	eb42 0303 	adc.w	r3, r2, r3
 8008aba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	663b      	str	r3, [r7, #96]	; 0x60
 8008ac6:	667a      	str	r2, [r7, #100]	; 0x64
 8008ac8:	f04f 0200 	mov.w	r2, #0
 8008acc:	f04f 0300 	mov.w	r3, #0
 8008ad0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008ad4:	4649      	mov	r1, r9
 8008ad6:	008b      	lsls	r3, r1, #2
 8008ad8:	4641      	mov	r1, r8
 8008ada:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ade:	4641      	mov	r1, r8
 8008ae0:	008a      	lsls	r2, r1, #2
 8008ae2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008ae6:	f7f8 f8df 	bl	8000ca8 <__aeabi_uldivmod>
 8008aea:	4602      	mov	r2, r0
 8008aec:	460b      	mov	r3, r1
 8008aee:	4b0d      	ldr	r3, [pc, #52]	; (8008b24 <UART_SetConfig+0x4e4>)
 8008af0:	fba3 1302 	umull	r1, r3, r3, r2
 8008af4:	095b      	lsrs	r3, r3, #5
 8008af6:	2164      	movs	r1, #100	; 0x64
 8008af8:	fb01 f303 	mul.w	r3, r1, r3
 8008afc:	1ad3      	subs	r3, r2, r3
 8008afe:	011b      	lsls	r3, r3, #4
 8008b00:	3332      	adds	r3, #50	; 0x32
 8008b02:	4a08      	ldr	r2, [pc, #32]	; (8008b24 <UART_SetConfig+0x4e4>)
 8008b04:	fba2 2303 	umull	r2, r3, r2, r3
 8008b08:	095b      	lsrs	r3, r3, #5
 8008b0a:	f003 020f 	and.w	r2, r3, #15
 8008b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4422      	add	r2, r4
 8008b16:	609a      	str	r2, [r3, #8]
}
 8008b18:	bf00      	nop
 8008b1a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b24:	51eb851f 	.word	0x51eb851f

08008b28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008b28:	b084      	sub	sp, #16
 8008b2a:	b580      	push	{r7, lr}
 8008b2c:	b084      	sub	sp, #16
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
 8008b32:	f107 001c 	add.w	r0, r7, #28
 8008b36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008b3a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	d123      	bne.n	8008b8a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b46:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	68db      	ldr	r3, [r3, #12]
 8008b52:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008b56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b5a:	687a      	ldr	r2, [r7, #4]
 8008b5c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	68db      	ldr	r3, [r3, #12]
 8008b62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008b6a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008b6e:	2b01      	cmp	r3, #1
 8008b70:	d105      	bne.n	8008b7e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	68db      	ldr	r3, [r3, #12]
 8008b76:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 faa0 	bl	80090c4 <USB_CoreReset>
 8008b84:	4603      	mov	r3, r0
 8008b86:	73fb      	strb	r3, [r7, #15]
 8008b88:	e01b      	b.n	8008bc2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	68db      	ldr	r3, [r3, #12]
 8008b8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 fa94 	bl	80090c4 <USB_CoreReset>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008ba0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d106      	bne.n	8008bb6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	639a      	str	r2, [r3, #56]	; 0x38
 8008bb4:	e005      	b.n	8008bc2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008bc2:	7fbb      	ldrb	r3, [r7, #30]
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	d10b      	bne.n	8008be0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	f043 0206 	orr.w	r2, r3, #6
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	f043 0220 	orr.w	r2, r3, #32
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3710      	adds	r7, #16
 8008be6:	46bd      	mov	sp, r7
 8008be8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008bec:	b004      	add	sp, #16
 8008bee:	4770      	bx	lr

08008bf0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b083      	sub	sp, #12
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	689b      	ldr	r3, [r3, #8]
 8008bfc:	f023 0201 	bic.w	r2, r3, #1
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c04:	2300      	movs	r3, #0
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	370c      	adds	r7, #12
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr

08008c12 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008c12:	b580      	push	{r7, lr}
 8008c14:	b084      	sub	sp, #16
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	6078      	str	r0, [r7, #4]
 8008c1a:	460b      	mov	r3, r1
 8008c1c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	68db      	ldr	r3, [r3, #12]
 8008c26:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008c2e:	78fb      	ldrb	r3, [r7, #3]
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	d115      	bne.n	8008c60 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	68db      	ldr	r3, [r3, #12]
 8008c38:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008c40:	200a      	movs	r0, #10
 8008c42:	f7fa fed1 	bl	80039e8 <HAL_Delay>
      ms += 10U;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	330a      	adds	r3, #10
 8008c4a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 fa2b 	bl	80090a8 <USB_GetMode>
 8008c52:	4603      	mov	r3, r0
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d01e      	beq.n	8008c96 <USB_SetCurrentMode+0x84>
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2bc7      	cmp	r3, #199	; 0xc7
 8008c5c:	d9f0      	bls.n	8008c40 <USB_SetCurrentMode+0x2e>
 8008c5e:	e01a      	b.n	8008c96 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008c60:	78fb      	ldrb	r3, [r7, #3]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d115      	bne.n	8008c92 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	68db      	ldr	r3, [r3, #12]
 8008c6a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008c72:	200a      	movs	r0, #10
 8008c74:	f7fa feb8 	bl	80039e8 <HAL_Delay>
      ms += 10U;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	330a      	adds	r3, #10
 8008c7c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 fa12 	bl	80090a8 <USB_GetMode>
 8008c84:	4603      	mov	r3, r0
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d005      	beq.n	8008c96 <USB_SetCurrentMode+0x84>
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2bc7      	cmp	r3, #199	; 0xc7
 8008c8e:	d9f0      	bls.n	8008c72 <USB_SetCurrentMode+0x60>
 8008c90:	e001      	b.n	8008c96 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008c92:	2301      	movs	r3, #1
 8008c94:	e005      	b.n	8008ca2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2bc8      	cmp	r3, #200	; 0xc8
 8008c9a:	d101      	bne.n	8008ca0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	e000      	b.n	8008ca2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008ca0:	2300      	movs	r3, #0
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3710      	adds	r7, #16
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
	...

08008cac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008cac:	b084      	sub	sp, #16
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b086      	sub	sp, #24
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
 8008cb6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008cba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	613b      	str	r3, [r7, #16]
 8008cca:	e009      	b.n	8008ce0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	3340      	adds	r3, #64	; 0x40
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	4413      	add	r3, r2
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	3301      	adds	r3, #1
 8008cde:	613b      	str	r3, [r7, #16]
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	2b0e      	cmp	r3, #14
 8008ce4:	d9f2      	bls.n	8008ccc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008ce6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d11c      	bne.n	8008d28 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	68fa      	ldr	r2, [r7, #12]
 8008cf8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008cfc:	f043 0302 	orr.w	r3, r3, #2
 8008d00:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d06:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d12:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d1e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	639a      	str	r2, [r3, #56]	; 0x38
 8008d26:	e00b      	b.n	8008d40 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d2c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d38:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d46:	461a      	mov	r2, r3
 8008d48:	2300      	movs	r3, #0
 8008d4a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008d4c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d10d      	bne.n	8008d70 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008d54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d104      	bne.n	8008d66 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008d5c:	2100      	movs	r1, #0
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 f968 	bl	8009034 <USB_SetDevSpeed>
 8008d64:	e008      	b.n	8008d78 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008d66:	2101      	movs	r1, #1
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f000 f963 	bl	8009034 <USB_SetDevSpeed>
 8008d6e:	e003      	b.n	8008d78 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008d70:	2103      	movs	r1, #3
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 f95e 	bl	8009034 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008d78:	2110      	movs	r1, #16
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 f8fa 	bl	8008f74 <USB_FlushTxFifo>
 8008d80:	4603      	mov	r3, r0
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d001      	beq.n	8008d8a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8008d86:	2301      	movs	r3, #1
 8008d88:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 f924 	bl	8008fd8 <USB_FlushRxFifo>
 8008d90:	4603      	mov	r3, r0
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d001      	beq.n	8008d9a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8008d96:	2301      	movs	r3, #1
 8008d98:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008da0:	461a      	mov	r2, r3
 8008da2:	2300      	movs	r3, #0
 8008da4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dac:	461a      	mov	r2, r3
 8008dae:	2300      	movs	r3, #0
 8008db0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008db8:	461a      	mov	r2, r3
 8008dba:	2300      	movs	r3, #0
 8008dbc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	613b      	str	r3, [r7, #16]
 8008dc2:	e043      	b.n	8008e4c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	015a      	lsls	r2, r3, #5
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	4413      	add	r3, r2
 8008dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008dd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008dda:	d118      	bne.n	8008e0e <USB_DevInit+0x162>
    {
      if (i == 0U)
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d10a      	bne.n	8008df8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	015a      	lsls	r2, r3, #5
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	4413      	add	r3, r2
 8008dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dee:	461a      	mov	r2, r3
 8008df0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008df4:	6013      	str	r3, [r2, #0]
 8008df6:	e013      	b.n	8008e20 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	015a      	lsls	r2, r3, #5
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	4413      	add	r3, r2
 8008e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e04:	461a      	mov	r2, r3
 8008e06:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008e0a:	6013      	str	r3, [r2, #0]
 8008e0c:	e008      	b.n	8008e20 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	015a      	lsls	r2, r3, #5
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	4413      	add	r3, r2
 8008e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	015a      	lsls	r2, r3, #5
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	4413      	add	r3, r2
 8008e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	2300      	movs	r3, #0
 8008e30:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	015a      	lsls	r2, r3, #5
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	4413      	add	r3, r2
 8008e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e3e:	461a      	mov	r2, r3
 8008e40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008e44:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	3301      	adds	r3, #1
 8008e4a:	613b      	str	r3, [r7, #16]
 8008e4c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008e50:	461a      	mov	r2, r3
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d3b5      	bcc.n	8008dc4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e58:	2300      	movs	r3, #0
 8008e5a:	613b      	str	r3, [r7, #16]
 8008e5c:	e043      	b.n	8008ee6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	015a      	lsls	r2, r3, #5
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	4413      	add	r3, r2
 8008e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e74:	d118      	bne.n	8008ea8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d10a      	bne.n	8008e92 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	015a      	lsls	r2, r3, #5
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	4413      	add	r3, r2
 8008e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e88:	461a      	mov	r2, r3
 8008e8a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008e8e:	6013      	str	r3, [r2, #0]
 8008e90:	e013      	b.n	8008eba <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	015a      	lsls	r2, r3, #5
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	4413      	add	r3, r2
 8008e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008ea4:	6013      	str	r3, [r2, #0]
 8008ea6:	e008      	b.n	8008eba <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	015a      	lsls	r2, r3, #5
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	4413      	add	r3, r2
 8008eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	015a      	lsls	r2, r3, #5
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	4413      	add	r3, r2
 8008ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	2300      	movs	r3, #0
 8008eca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	015a      	lsls	r2, r3, #5
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	4413      	add	r3, r2
 8008ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ed8:	461a      	mov	r2, r3
 8008eda:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008ede:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	613b      	str	r3, [r7, #16]
 8008ee6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008eea:	461a      	mov	r2, r3
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d3b5      	bcc.n	8008e5e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ef8:	691b      	ldr	r3, [r3, #16]
 8008efa:	68fa      	ldr	r2, [r7, #12]
 8008efc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f04:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008f12:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008f14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d105      	bne.n	8008f28 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	699b      	ldr	r3, [r3, #24]
 8008f20:	f043 0210 	orr.w	r2, r3, #16
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	699a      	ldr	r2, [r3, #24]
 8008f2c:	4b10      	ldr	r3, [pc, #64]	; (8008f70 <USB_DevInit+0x2c4>)
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008f34:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d005      	beq.n	8008f48 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	699b      	ldr	r3, [r3, #24]
 8008f40:	f043 0208 	orr.w	r2, r3, #8
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008f48:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d107      	bne.n	8008f60 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	699b      	ldr	r3, [r3, #24]
 8008f54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f58:	f043 0304 	orr.w	r3, r3, #4
 8008f5c:	687a      	ldr	r2, [r7, #4]
 8008f5e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008f60:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3718      	adds	r7, #24
 8008f66:	46bd      	mov	sp, r7
 8008f68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f6c:	b004      	add	sp, #16
 8008f6e:	4770      	bx	lr
 8008f70:	803c3800 	.word	0x803c3800

08008f74 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b085      	sub	sp, #20
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	3301      	adds	r3, #1
 8008f86:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008f8e:	d901      	bls.n	8008f94 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008f90:	2303      	movs	r3, #3
 8008f92:	e01b      	b.n	8008fcc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	691b      	ldr	r3, [r3, #16]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	daf2      	bge.n	8008f82 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	019b      	lsls	r3, r3, #6
 8008fa4:	f043 0220 	orr.w	r2, r3, #32
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	3301      	adds	r3, #1
 8008fb0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008fb8:	d901      	bls.n	8008fbe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008fba:	2303      	movs	r3, #3
 8008fbc:	e006      	b.n	8008fcc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	691b      	ldr	r3, [r3, #16]
 8008fc2:	f003 0320 	and.w	r3, r3, #32
 8008fc6:	2b20      	cmp	r3, #32
 8008fc8:	d0f0      	beq.n	8008fac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008fca:	2300      	movs	r3, #0
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3714      	adds	r7, #20
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr

08008fd8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b085      	sub	sp, #20
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008ff0:	d901      	bls.n	8008ff6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008ff2:	2303      	movs	r3, #3
 8008ff4:	e018      	b.n	8009028 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	691b      	ldr	r3, [r3, #16]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	daf2      	bge.n	8008fe4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008ffe:	2300      	movs	r3, #0
 8009000:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2210      	movs	r2, #16
 8009006:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	3301      	adds	r3, #1
 800900c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009014:	d901      	bls.n	800901a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009016:	2303      	movs	r3, #3
 8009018:	e006      	b.n	8009028 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	691b      	ldr	r3, [r3, #16]
 800901e:	f003 0310 	and.w	r3, r3, #16
 8009022:	2b10      	cmp	r3, #16
 8009024:	d0f0      	beq.n	8009008 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009026:	2300      	movs	r3, #0
}
 8009028:	4618      	mov	r0, r3
 800902a:	3714      	adds	r7, #20
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr

08009034 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009034:	b480      	push	{r7}
 8009036:	b085      	sub	sp, #20
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	460b      	mov	r3, r1
 800903e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	78fb      	ldrb	r3, [r7, #3]
 800904e:	68f9      	ldr	r1, [r7, #12]
 8009050:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009054:	4313      	orrs	r3, r2
 8009056:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009058:	2300      	movs	r3, #0
}
 800905a:	4618      	mov	r0, r3
 800905c:	3714      	adds	r7, #20
 800905e:	46bd      	mov	sp, r7
 8009060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009064:	4770      	bx	lr

08009066 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009066:	b480      	push	{r7}
 8009068:	b085      	sub	sp, #20
 800906a:	af00      	add	r7, sp, #0
 800906c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	68fa      	ldr	r2, [r7, #12]
 800907c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009080:	f023 0303 	bic.w	r3, r3, #3
 8009084:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	68fa      	ldr	r2, [r7, #12]
 8009090:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009094:	f043 0302 	orr.w	r3, r3, #2
 8009098:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800909a:	2300      	movs	r3, #0
}
 800909c:	4618      	mov	r0, r3
 800909e:	3714      	adds	r7, #20
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr

080090a8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b083      	sub	sp, #12
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	695b      	ldr	r3, [r3, #20]
 80090b4:	f003 0301 	and.w	r3, r3, #1
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	370c      	adds	r7, #12
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr

080090c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b085      	sub	sp, #20
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80090cc:	2300      	movs	r3, #0
 80090ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	3301      	adds	r3, #1
 80090d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80090dc:	d901      	bls.n	80090e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80090de:	2303      	movs	r3, #3
 80090e0:	e01b      	b.n	800911a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	691b      	ldr	r3, [r3, #16]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	daf2      	bge.n	80090d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80090ea:	2300      	movs	r3, #0
 80090ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	691b      	ldr	r3, [r3, #16]
 80090f2:	f043 0201 	orr.w	r2, r3, #1
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	3301      	adds	r3, #1
 80090fe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009106:	d901      	bls.n	800910c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009108:	2303      	movs	r3, #3
 800910a:	e006      	b.n	800911a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	691b      	ldr	r3, [r3, #16]
 8009110:	f003 0301 	and.w	r3, r3, #1
 8009114:	2b01      	cmp	r3, #1
 8009116:	d0f0      	beq.n	80090fa <USB_CoreReset+0x36>

  return HAL_OK;
 8009118:	2300      	movs	r3, #0
}
 800911a:	4618      	mov	r0, r3
 800911c:	3714      	adds	r7, #20
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr

08009126 <__cvt>:
 8009126:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800912a:	ec55 4b10 	vmov	r4, r5, d0
 800912e:	2d00      	cmp	r5, #0
 8009130:	460e      	mov	r6, r1
 8009132:	4619      	mov	r1, r3
 8009134:	462b      	mov	r3, r5
 8009136:	bfbb      	ittet	lt
 8009138:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800913c:	461d      	movlt	r5, r3
 800913e:	2300      	movge	r3, #0
 8009140:	232d      	movlt	r3, #45	; 0x2d
 8009142:	700b      	strb	r3, [r1, #0]
 8009144:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009146:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800914a:	4691      	mov	r9, r2
 800914c:	f023 0820 	bic.w	r8, r3, #32
 8009150:	bfbc      	itt	lt
 8009152:	4622      	movlt	r2, r4
 8009154:	4614      	movlt	r4, r2
 8009156:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800915a:	d005      	beq.n	8009168 <__cvt+0x42>
 800915c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009160:	d100      	bne.n	8009164 <__cvt+0x3e>
 8009162:	3601      	adds	r6, #1
 8009164:	2102      	movs	r1, #2
 8009166:	e000      	b.n	800916a <__cvt+0x44>
 8009168:	2103      	movs	r1, #3
 800916a:	ab03      	add	r3, sp, #12
 800916c:	9301      	str	r3, [sp, #4]
 800916e:	ab02      	add	r3, sp, #8
 8009170:	9300      	str	r3, [sp, #0]
 8009172:	ec45 4b10 	vmov	d0, r4, r5
 8009176:	4653      	mov	r3, sl
 8009178:	4632      	mov	r2, r6
 800917a:	f000 fe7d 	bl	8009e78 <_dtoa_r>
 800917e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009182:	4607      	mov	r7, r0
 8009184:	d102      	bne.n	800918c <__cvt+0x66>
 8009186:	f019 0f01 	tst.w	r9, #1
 800918a:	d022      	beq.n	80091d2 <__cvt+0xac>
 800918c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009190:	eb07 0906 	add.w	r9, r7, r6
 8009194:	d110      	bne.n	80091b8 <__cvt+0x92>
 8009196:	783b      	ldrb	r3, [r7, #0]
 8009198:	2b30      	cmp	r3, #48	; 0x30
 800919a:	d10a      	bne.n	80091b2 <__cvt+0x8c>
 800919c:	2200      	movs	r2, #0
 800919e:	2300      	movs	r3, #0
 80091a0:	4620      	mov	r0, r4
 80091a2:	4629      	mov	r1, r5
 80091a4:	f7f7 fca0 	bl	8000ae8 <__aeabi_dcmpeq>
 80091a8:	b918      	cbnz	r0, 80091b2 <__cvt+0x8c>
 80091aa:	f1c6 0601 	rsb	r6, r6, #1
 80091ae:	f8ca 6000 	str.w	r6, [sl]
 80091b2:	f8da 3000 	ldr.w	r3, [sl]
 80091b6:	4499      	add	r9, r3
 80091b8:	2200      	movs	r2, #0
 80091ba:	2300      	movs	r3, #0
 80091bc:	4620      	mov	r0, r4
 80091be:	4629      	mov	r1, r5
 80091c0:	f7f7 fc92 	bl	8000ae8 <__aeabi_dcmpeq>
 80091c4:	b108      	cbz	r0, 80091ca <__cvt+0xa4>
 80091c6:	f8cd 900c 	str.w	r9, [sp, #12]
 80091ca:	2230      	movs	r2, #48	; 0x30
 80091cc:	9b03      	ldr	r3, [sp, #12]
 80091ce:	454b      	cmp	r3, r9
 80091d0:	d307      	bcc.n	80091e2 <__cvt+0xbc>
 80091d2:	9b03      	ldr	r3, [sp, #12]
 80091d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80091d6:	1bdb      	subs	r3, r3, r7
 80091d8:	4638      	mov	r0, r7
 80091da:	6013      	str	r3, [r2, #0]
 80091dc:	b004      	add	sp, #16
 80091de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091e2:	1c59      	adds	r1, r3, #1
 80091e4:	9103      	str	r1, [sp, #12]
 80091e6:	701a      	strb	r2, [r3, #0]
 80091e8:	e7f0      	b.n	80091cc <__cvt+0xa6>

080091ea <__exponent>:
 80091ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091ec:	4603      	mov	r3, r0
 80091ee:	2900      	cmp	r1, #0
 80091f0:	bfb8      	it	lt
 80091f2:	4249      	neglt	r1, r1
 80091f4:	f803 2b02 	strb.w	r2, [r3], #2
 80091f8:	bfb4      	ite	lt
 80091fa:	222d      	movlt	r2, #45	; 0x2d
 80091fc:	222b      	movge	r2, #43	; 0x2b
 80091fe:	2909      	cmp	r1, #9
 8009200:	7042      	strb	r2, [r0, #1]
 8009202:	dd2a      	ble.n	800925a <__exponent+0x70>
 8009204:	f10d 0207 	add.w	r2, sp, #7
 8009208:	4617      	mov	r7, r2
 800920a:	260a      	movs	r6, #10
 800920c:	4694      	mov	ip, r2
 800920e:	fb91 f5f6 	sdiv	r5, r1, r6
 8009212:	fb06 1415 	mls	r4, r6, r5, r1
 8009216:	3430      	adds	r4, #48	; 0x30
 8009218:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800921c:	460c      	mov	r4, r1
 800921e:	2c63      	cmp	r4, #99	; 0x63
 8009220:	f102 32ff 	add.w	r2, r2, #4294967295
 8009224:	4629      	mov	r1, r5
 8009226:	dcf1      	bgt.n	800920c <__exponent+0x22>
 8009228:	3130      	adds	r1, #48	; 0x30
 800922a:	f1ac 0402 	sub.w	r4, ip, #2
 800922e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009232:	1c41      	adds	r1, r0, #1
 8009234:	4622      	mov	r2, r4
 8009236:	42ba      	cmp	r2, r7
 8009238:	d30a      	bcc.n	8009250 <__exponent+0x66>
 800923a:	f10d 0209 	add.w	r2, sp, #9
 800923e:	eba2 020c 	sub.w	r2, r2, ip
 8009242:	42bc      	cmp	r4, r7
 8009244:	bf88      	it	hi
 8009246:	2200      	movhi	r2, #0
 8009248:	4413      	add	r3, r2
 800924a:	1a18      	subs	r0, r3, r0
 800924c:	b003      	add	sp, #12
 800924e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009250:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009254:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009258:	e7ed      	b.n	8009236 <__exponent+0x4c>
 800925a:	2330      	movs	r3, #48	; 0x30
 800925c:	3130      	adds	r1, #48	; 0x30
 800925e:	7083      	strb	r3, [r0, #2]
 8009260:	70c1      	strb	r1, [r0, #3]
 8009262:	1d03      	adds	r3, r0, #4
 8009264:	e7f1      	b.n	800924a <__exponent+0x60>
	...

08009268 <_printf_float>:
 8009268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800926c:	ed2d 8b02 	vpush	{d8}
 8009270:	b08d      	sub	sp, #52	; 0x34
 8009272:	460c      	mov	r4, r1
 8009274:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009278:	4616      	mov	r6, r2
 800927a:	461f      	mov	r7, r3
 800927c:	4605      	mov	r5, r0
 800927e:	f000 fcf9 	bl	8009c74 <_localeconv_r>
 8009282:	f8d0 a000 	ldr.w	sl, [r0]
 8009286:	4650      	mov	r0, sl
 8009288:	f7f7 f802 	bl	8000290 <strlen>
 800928c:	2300      	movs	r3, #0
 800928e:	930a      	str	r3, [sp, #40]	; 0x28
 8009290:	6823      	ldr	r3, [r4, #0]
 8009292:	9305      	str	r3, [sp, #20]
 8009294:	f8d8 3000 	ldr.w	r3, [r8]
 8009298:	f894 b018 	ldrb.w	fp, [r4, #24]
 800929c:	3307      	adds	r3, #7
 800929e:	f023 0307 	bic.w	r3, r3, #7
 80092a2:	f103 0208 	add.w	r2, r3, #8
 80092a6:	f8c8 2000 	str.w	r2, [r8]
 80092aa:	e9d3 8900 	ldrd	r8, r9, [r3]
 80092ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80092b2:	9307      	str	r3, [sp, #28]
 80092b4:	f8cd 8018 	str.w	r8, [sp, #24]
 80092b8:	ee08 0a10 	vmov	s16, r0
 80092bc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80092c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80092c4:	4b9e      	ldr	r3, [pc, #632]	; (8009540 <_printf_float+0x2d8>)
 80092c6:	f04f 32ff 	mov.w	r2, #4294967295
 80092ca:	f7f7 fc3f 	bl	8000b4c <__aeabi_dcmpun>
 80092ce:	bb88      	cbnz	r0, 8009334 <_printf_float+0xcc>
 80092d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80092d4:	4b9a      	ldr	r3, [pc, #616]	; (8009540 <_printf_float+0x2d8>)
 80092d6:	f04f 32ff 	mov.w	r2, #4294967295
 80092da:	f7f7 fc19 	bl	8000b10 <__aeabi_dcmple>
 80092de:	bb48      	cbnz	r0, 8009334 <_printf_float+0xcc>
 80092e0:	2200      	movs	r2, #0
 80092e2:	2300      	movs	r3, #0
 80092e4:	4640      	mov	r0, r8
 80092e6:	4649      	mov	r1, r9
 80092e8:	f7f7 fc08 	bl	8000afc <__aeabi_dcmplt>
 80092ec:	b110      	cbz	r0, 80092f4 <_printf_float+0x8c>
 80092ee:	232d      	movs	r3, #45	; 0x2d
 80092f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092f4:	4a93      	ldr	r2, [pc, #588]	; (8009544 <_printf_float+0x2dc>)
 80092f6:	4b94      	ldr	r3, [pc, #592]	; (8009548 <_printf_float+0x2e0>)
 80092f8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80092fc:	bf94      	ite	ls
 80092fe:	4690      	movls	r8, r2
 8009300:	4698      	movhi	r8, r3
 8009302:	2303      	movs	r3, #3
 8009304:	6123      	str	r3, [r4, #16]
 8009306:	9b05      	ldr	r3, [sp, #20]
 8009308:	f023 0304 	bic.w	r3, r3, #4
 800930c:	6023      	str	r3, [r4, #0]
 800930e:	f04f 0900 	mov.w	r9, #0
 8009312:	9700      	str	r7, [sp, #0]
 8009314:	4633      	mov	r3, r6
 8009316:	aa0b      	add	r2, sp, #44	; 0x2c
 8009318:	4621      	mov	r1, r4
 800931a:	4628      	mov	r0, r5
 800931c:	f000 f9da 	bl	80096d4 <_printf_common>
 8009320:	3001      	adds	r0, #1
 8009322:	f040 8090 	bne.w	8009446 <_printf_float+0x1de>
 8009326:	f04f 30ff 	mov.w	r0, #4294967295
 800932a:	b00d      	add	sp, #52	; 0x34
 800932c:	ecbd 8b02 	vpop	{d8}
 8009330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009334:	4642      	mov	r2, r8
 8009336:	464b      	mov	r3, r9
 8009338:	4640      	mov	r0, r8
 800933a:	4649      	mov	r1, r9
 800933c:	f7f7 fc06 	bl	8000b4c <__aeabi_dcmpun>
 8009340:	b140      	cbz	r0, 8009354 <_printf_float+0xec>
 8009342:	464b      	mov	r3, r9
 8009344:	2b00      	cmp	r3, #0
 8009346:	bfbc      	itt	lt
 8009348:	232d      	movlt	r3, #45	; 0x2d
 800934a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800934e:	4a7f      	ldr	r2, [pc, #508]	; (800954c <_printf_float+0x2e4>)
 8009350:	4b7f      	ldr	r3, [pc, #508]	; (8009550 <_printf_float+0x2e8>)
 8009352:	e7d1      	b.n	80092f8 <_printf_float+0x90>
 8009354:	6863      	ldr	r3, [r4, #4]
 8009356:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800935a:	9206      	str	r2, [sp, #24]
 800935c:	1c5a      	adds	r2, r3, #1
 800935e:	d13f      	bne.n	80093e0 <_printf_float+0x178>
 8009360:	2306      	movs	r3, #6
 8009362:	6063      	str	r3, [r4, #4]
 8009364:	9b05      	ldr	r3, [sp, #20]
 8009366:	6861      	ldr	r1, [r4, #4]
 8009368:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800936c:	2300      	movs	r3, #0
 800936e:	9303      	str	r3, [sp, #12]
 8009370:	ab0a      	add	r3, sp, #40	; 0x28
 8009372:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009376:	ab09      	add	r3, sp, #36	; 0x24
 8009378:	ec49 8b10 	vmov	d0, r8, r9
 800937c:	9300      	str	r3, [sp, #0]
 800937e:	6022      	str	r2, [r4, #0]
 8009380:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009384:	4628      	mov	r0, r5
 8009386:	f7ff fece 	bl	8009126 <__cvt>
 800938a:	9b06      	ldr	r3, [sp, #24]
 800938c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800938e:	2b47      	cmp	r3, #71	; 0x47
 8009390:	4680      	mov	r8, r0
 8009392:	d108      	bne.n	80093a6 <_printf_float+0x13e>
 8009394:	1cc8      	adds	r0, r1, #3
 8009396:	db02      	blt.n	800939e <_printf_float+0x136>
 8009398:	6863      	ldr	r3, [r4, #4]
 800939a:	4299      	cmp	r1, r3
 800939c:	dd41      	ble.n	8009422 <_printf_float+0x1ba>
 800939e:	f1ab 0302 	sub.w	r3, fp, #2
 80093a2:	fa5f fb83 	uxtb.w	fp, r3
 80093a6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80093aa:	d820      	bhi.n	80093ee <_printf_float+0x186>
 80093ac:	3901      	subs	r1, #1
 80093ae:	465a      	mov	r2, fp
 80093b0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80093b4:	9109      	str	r1, [sp, #36]	; 0x24
 80093b6:	f7ff ff18 	bl	80091ea <__exponent>
 80093ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093bc:	1813      	adds	r3, r2, r0
 80093be:	2a01      	cmp	r2, #1
 80093c0:	4681      	mov	r9, r0
 80093c2:	6123      	str	r3, [r4, #16]
 80093c4:	dc02      	bgt.n	80093cc <_printf_float+0x164>
 80093c6:	6822      	ldr	r2, [r4, #0]
 80093c8:	07d2      	lsls	r2, r2, #31
 80093ca:	d501      	bpl.n	80093d0 <_printf_float+0x168>
 80093cc:	3301      	adds	r3, #1
 80093ce:	6123      	str	r3, [r4, #16]
 80093d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d09c      	beq.n	8009312 <_printf_float+0xaa>
 80093d8:	232d      	movs	r3, #45	; 0x2d
 80093da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093de:	e798      	b.n	8009312 <_printf_float+0xaa>
 80093e0:	9a06      	ldr	r2, [sp, #24]
 80093e2:	2a47      	cmp	r2, #71	; 0x47
 80093e4:	d1be      	bne.n	8009364 <_printf_float+0xfc>
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d1bc      	bne.n	8009364 <_printf_float+0xfc>
 80093ea:	2301      	movs	r3, #1
 80093ec:	e7b9      	b.n	8009362 <_printf_float+0xfa>
 80093ee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80093f2:	d118      	bne.n	8009426 <_printf_float+0x1be>
 80093f4:	2900      	cmp	r1, #0
 80093f6:	6863      	ldr	r3, [r4, #4]
 80093f8:	dd0b      	ble.n	8009412 <_printf_float+0x1aa>
 80093fa:	6121      	str	r1, [r4, #16]
 80093fc:	b913      	cbnz	r3, 8009404 <_printf_float+0x19c>
 80093fe:	6822      	ldr	r2, [r4, #0]
 8009400:	07d0      	lsls	r0, r2, #31
 8009402:	d502      	bpl.n	800940a <_printf_float+0x1a2>
 8009404:	3301      	adds	r3, #1
 8009406:	440b      	add	r3, r1
 8009408:	6123      	str	r3, [r4, #16]
 800940a:	65a1      	str	r1, [r4, #88]	; 0x58
 800940c:	f04f 0900 	mov.w	r9, #0
 8009410:	e7de      	b.n	80093d0 <_printf_float+0x168>
 8009412:	b913      	cbnz	r3, 800941a <_printf_float+0x1b2>
 8009414:	6822      	ldr	r2, [r4, #0]
 8009416:	07d2      	lsls	r2, r2, #31
 8009418:	d501      	bpl.n	800941e <_printf_float+0x1b6>
 800941a:	3302      	adds	r3, #2
 800941c:	e7f4      	b.n	8009408 <_printf_float+0x1a0>
 800941e:	2301      	movs	r3, #1
 8009420:	e7f2      	b.n	8009408 <_printf_float+0x1a0>
 8009422:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009428:	4299      	cmp	r1, r3
 800942a:	db05      	blt.n	8009438 <_printf_float+0x1d0>
 800942c:	6823      	ldr	r3, [r4, #0]
 800942e:	6121      	str	r1, [r4, #16]
 8009430:	07d8      	lsls	r0, r3, #31
 8009432:	d5ea      	bpl.n	800940a <_printf_float+0x1a2>
 8009434:	1c4b      	adds	r3, r1, #1
 8009436:	e7e7      	b.n	8009408 <_printf_float+0x1a0>
 8009438:	2900      	cmp	r1, #0
 800943a:	bfd4      	ite	le
 800943c:	f1c1 0202 	rsble	r2, r1, #2
 8009440:	2201      	movgt	r2, #1
 8009442:	4413      	add	r3, r2
 8009444:	e7e0      	b.n	8009408 <_printf_float+0x1a0>
 8009446:	6823      	ldr	r3, [r4, #0]
 8009448:	055a      	lsls	r2, r3, #21
 800944a:	d407      	bmi.n	800945c <_printf_float+0x1f4>
 800944c:	6923      	ldr	r3, [r4, #16]
 800944e:	4642      	mov	r2, r8
 8009450:	4631      	mov	r1, r6
 8009452:	4628      	mov	r0, r5
 8009454:	47b8      	blx	r7
 8009456:	3001      	adds	r0, #1
 8009458:	d12c      	bne.n	80094b4 <_printf_float+0x24c>
 800945a:	e764      	b.n	8009326 <_printf_float+0xbe>
 800945c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009460:	f240 80e0 	bls.w	8009624 <_printf_float+0x3bc>
 8009464:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009468:	2200      	movs	r2, #0
 800946a:	2300      	movs	r3, #0
 800946c:	f7f7 fb3c 	bl	8000ae8 <__aeabi_dcmpeq>
 8009470:	2800      	cmp	r0, #0
 8009472:	d034      	beq.n	80094de <_printf_float+0x276>
 8009474:	4a37      	ldr	r2, [pc, #220]	; (8009554 <_printf_float+0x2ec>)
 8009476:	2301      	movs	r3, #1
 8009478:	4631      	mov	r1, r6
 800947a:	4628      	mov	r0, r5
 800947c:	47b8      	blx	r7
 800947e:	3001      	adds	r0, #1
 8009480:	f43f af51 	beq.w	8009326 <_printf_float+0xbe>
 8009484:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009488:	429a      	cmp	r2, r3
 800948a:	db02      	blt.n	8009492 <_printf_float+0x22a>
 800948c:	6823      	ldr	r3, [r4, #0]
 800948e:	07d8      	lsls	r0, r3, #31
 8009490:	d510      	bpl.n	80094b4 <_printf_float+0x24c>
 8009492:	ee18 3a10 	vmov	r3, s16
 8009496:	4652      	mov	r2, sl
 8009498:	4631      	mov	r1, r6
 800949a:	4628      	mov	r0, r5
 800949c:	47b8      	blx	r7
 800949e:	3001      	adds	r0, #1
 80094a0:	f43f af41 	beq.w	8009326 <_printf_float+0xbe>
 80094a4:	f04f 0800 	mov.w	r8, #0
 80094a8:	f104 091a 	add.w	r9, r4, #26
 80094ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094ae:	3b01      	subs	r3, #1
 80094b0:	4543      	cmp	r3, r8
 80094b2:	dc09      	bgt.n	80094c8 <_printf_float+0x260>
 80094b4:	6823      	ldr	r3, [r4, #0]
 80094b6:	079b      	lsls	r3, r3, #30
 80094b8:	f100 8107 	bmi.w	80096ca <_printf_float+0x462>
 80094bc:	68e0      	ldr	r0, [r4, #12]
 80094be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094c0:	4298      	cmp	r0, r3
 80094c2:	bfb8      	it	lt
 80094c4:	4618      	movlt	r0, r3
 80094c6:	e730      	b.n	800932a <_printf_float+0xc2>
 80094c8:	2301      	movs	r3, #1
 80094ca:	464a      	mov	r2, r9
 80094cc:	4631      	mov	r1, r6
 80094ce:	4628      	mov	r0, r5
 80094d0:	47b8      	blx	r7
 80094d2:	3001      	adds	r0, #1
 80094d4:	f43f af27 	beq.w	8009326 <_printf_float+0xbe>
 80094d8:	f108 0801 	add.w	r8, r8, #1
 80094dc:	e7e6      	b.n	80094ac <_printf_float+0x244>
 80094de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	dc39      	bgt.n	8009558 <_printf_float+0x2f0>
 80094e4:	4a1b      	ldr	r2, [pc, #108]	; (8009554 <_printf_float+0x2ec>)
 80094e6:	2301      	movs	r3, #1
 80094e8:	4631      	mov	r1, r6
 80094ea:	4628      	mov	r0, r5
 80094ec:	47b8      	blx	r7
 80094ee:	3001      	adds	r0, #1
 80094f0:	f43f af19 	beq.w	8009326 <_printf_float+0xbe>
 80094f4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80094f8:	4313      	orrs	r3, r2
 80094fa:	d102      	bne.n	8009502 <_printf_float+0x29a>
 80094fc:	6823      	ldr	r3, [r4, #0]
 80094fe:	07d9      	lsls	r1, r3, #31
 8009500:	d5d8      	bpl.n	80094b4 <_printf_float+0x24c>
 8009502:	ee18 3a10 	vmov	r3, s16
 8009506:	4652      	mov	r2, sl
 8009508:	4631      	mov	r1, r6
 800950a:	4628      	mov	r0, r5
 800950c:	47b8      	blx	r7
 800950e:	3001      	adds	r0, #1
 8009510:	f43f af09 	beq.w	8009326 <_printf_float+0xbe>
 8009514:	f04f 0900 	mov.w	r9, #0
 8009518:	f104 0a1a 	add.w	sl, r4, #26
 800951c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800951e:	425b      	negs	r3, r3
 8009520:	454b      	cmp	r3, r9
 8009522:	dc01      	bgt.n	8009528 <_printf_float+0x2c0>
 8009524:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009526:	e792      	b.n	800944e <_printf_float+0x1e6>
 8009528:	2301      	movs	r3, #1
 800952a:	4652      	mov	r2, sl
 800952c:	4631      	mov	r1, r6
 800952e:	4628      	mov	r0, r5
 8009530:	47b8      	blx	r7
 8009532:	3001      	adds	r0, #1
 8009534:	f43f aef7 	beq.w	8009326 <_printf_float+0xbe>
 8009538:	f109 0901 	add.w	r9, r9, #1
 800953c:	e7ee      	b.n	800951c <_printf_float+0x2b4>
 800953e:	bf00      	nop
 8009540:	7fefffff 	.word	0x7fefffff
 8009544:	0800beb4 	.word	0x0800beb4
 8009548:	0800beb8 	.word	0x0800beb8
 800954c:	0800bebc 	.word	0x0800bebc
 8009550:	0800bec0 	.word	0x0800bec0
 8009554:	0800bec4 	.word	0x0800bec4
 8009558:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800955a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800955c:	429a      	cmp	r2, r3
 800955e:	bfa8      	it	ge
 8009560:	461a      	movge	r2, r3
 8009562:	2a00      	cmp	r2, #0
 8009564:	4691      	mov	r9, r2
 8009566:	dc37      	bgt.n	80095d8 <_printf_float+0x370>
 8009568:	f04f 0b00 	mov.w	fp, #0
 800956c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009570:	f104 021a 	add.w	r2, r4, #26
 8009574:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009576:	9305      	str	r3, [sp, #20]
 8009578:	eba3 0309 	sub.w	r3, r3, r9
 800957c:	455b      	cmp	r3, fp
 800957e:	dc33      	bgt.n	80095e8 <_printf_float+0x380>
 8009580:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009584:	429a      	cmp	r2, r3
 8009586:	db3b      	blt.n	8009600 <_printf_float+0x398>
 8009588:	6823      	ldr	r3, [r4, #0]
 800958a:	07da      	lsls	r2, r3, #31
 800958c:	d438      	bmi.n	8009600 <_printf_float+0x398>
 800958e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009592:	eba2 0903 	sub.w	r9, r2, r3
 8009596:	9b05      	ldr	r3, [sp, #20]
 8009598:	1ad2      	subs	r2, r2, r3
 800959a:	4591      	cmp	r9, r2
 800959c:	bfa8      	it	ge
 800959e:	4691      	movge	r9, r2
 80095a0:	f1b9 0f00 	cmp.w	r9, #0
 80095a4:	dc35      	bgt.n	8009612 <_printf_float+0x3aa>
 80095a6:	f04f 0800 	mov.w	r8, #0
 80095aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80095ae:	f104 0a1a 	add.w	sl, r4, #26
 80095b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80095b6:	1a9b      	subs	r3, r3, r2
 80095b8:	eba3 0309 	sub.w	r3, r3, r9
 80095bc:	4543      	cmp	r3, r8
 80095be:	f77f af79 	ble.w	80094b4 <_printf_float+0x24c>
 80095c2:	2301      	movs	r3, #1
 80095c4:	4652      	mov	r2, sl
 80095c6:	4631      	mov	r1, r6
 80095c8:	4628      	mov	r0, r5
 80095ca:	47b8      	blx	r7
 80095cc:	3001      	adds	r0, #1
 80095ce:	f43f aeaa 	beq.w	8009326 <_printf_float+0xbe>
 80095d2:	f108 0801 	add.w	r8, r8, #1
 80095d6:	e7ec      	b.n	80095b2 <_printf_float+0x34a>
 80095d8:	4613      	mov	r3, r2
 80095da:	4631      	mov	r1, r6
 80095dc:	4642      	mov	r2, r8
 80095de:	4628      	mov	r0, r5
 80095e0:	47b8      	blx	r7
 80095e2:	3001      	adds	r0, #1
 80095e4:	d1c0      	bne.n	8009568 <_printf_float+0x300>
 80095e6:	e69e      	b.n	8009326 <_printf_float+0xbe>
 80095e8:	2301      	movs	r3, #1
 80095ea:	4631      	mov	r1, r6
 80095ec:	4628      	mov	r0, r5
 80095ee:	9205      	str	r2, [sp, #20]
 80095f0:	47b8      	blx	r7
 80095f2:	3001      	adds	r0, #1
 80095f4:	f43f ae97 	beq.w	8009326 <_printf_float+0xbe>
 80095f8:	9a05      	ldr	r2, [sp, #20]
 80095fa:	f10b 0b01 	add.w	fp, fp, #1
 80095fe:	e7b9      	b.n	8009574 <_printf_float+0x30c>
 8009600:	ee18 3a10 	vmov	r3, s16
 8009604:	4652      	mov	r2, sl
 8009606:	4631      	mov	r1, r6
 8009608:	4628      	mov	r0, r5
 800960a:	47b8      	blx	r7
 800960c:	3001      	adds	r0, #1
 800960e:	d1be      	bne.n	800958e <_printf_float+0x326>
 8009610:	e689      	b.n	8009326 <_printf_float+0xbe>
 8009612:	9a05      	ldr	r2, [sp, #20]
 8009614:	464b      	mov	r3, r9
 8009616:	4442      	add	r2, r8
 8009618:	4631      	mov	r1, r6
 800961a:	4628      	mov	r0, r5
 800961c:	47b8      	blx	r7
 800961e:	3001      	adds	r0, #1
 8009620:	d1c1      	bne.n	80095a6 <_printf_float+0x33e>
 8009622:	e680      	b.n	8009326 <_printf_float+0xbe>
 8009624:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009626:	2a01      	cmp	r2, #1
 8009628:	dc01      	bgt.n	800962e <_printf_float+0x3c6>
 800962a:	07db      	lsls	r3, r3, #31
 800962c:	d53a      	bpl.n	80096a4 <_printf_float+0x43c>
 800962e:	2301      	movs	r3, #1
 8009630:	4642      	mov	r2, r8
 8009632:	4631      	mov	r1, r6
 8009634:	4628      	mov	r0, r5
 8009636:	47b8      	blx	r7
 8009638:	3001      	adds	r0, #1
 800963a:	f43f ae74 	beq.w	8009326 <_printf_float+0xbe>
 800963e:	ee18 3a10 	vmov	r3, s16
 8009642:	4652      	mov	r2, sl
 8009644:	4631      	mov	r1, r6
 8009646:	4628      	mov	r0, r5
 8009648:	47b8      	blx	r7
 800964a:	3001      	adds	r0, #1
 800964c:	f43f ae6b 	beq.w	8009326 <_printf_float+0xbe>
 8009650:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009654:	2200      	movs	r2, #0
 8009656:	2300      	movs	r3, #0
 8009658:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800965c:	f7f7 fa44 	bl	8000ae8 <__aeabi_dcmpeq>
 8009660:	b9d8      	cbnz	r0, 800969a <_printf_float+0x432>
 8009662:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009666:	f108 0201 	add.w	r2, r8, #1
 800966a:	4631      	mov	r1, r6
 800966c:	4628      	mov	r0, r5
 800966e:	47b8      	blx	r7
 8009670:	3001      	adds	r0, #1
 8009672:	d10e      	bne.n	8009692 <_printf_float+0x42a>
 8009674:	e657      	b.n	8009326 <_printf_float+0xbe>
 8009676:	2301      	movs	r3, #1
 8009678:	4652      	mov	r2, sl
 800967a:	4631      	mov	r1, r6
 800967c:	4628      	mov	r0, r5
 800967e:	47b8      	blx	r7
 8009680:	3001      	adds	r0, #1
 8009682:	f43f ae50 	beq.w	8009326 <_printf_float+0xbe>
 8009686:	f108 0801 	add.w	r8, r8, #1
 800968a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800968c:	3b01      	subs	r3, #1
 800968e:	4543      	cmp	r3, r8
 8009690:	dcf1      	bgt.n	8009676 <_printf_float+0x40e>
 8009692:	464b      	mov	r3, r9
 8009694:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009698:	e6da      	b.n	8009450 <_printf_float+0x1e8>
 800969a:	f04f 0800 	mov.w	r8, #0
 800969e:	f104 0a1a 	add.w	sl, r4, #26
 80096a2:	e7f2      	b.n	800968a <_printf_float+0x422>
 80096a4:	2301      	movs	r3, #1
 80096a6:	4642      	mov	r2, r8
 80096a8:	e7df      	b.n	800966a <_printf_float+0x402>
 80096aa:	2301      	movs	r3, #1
 80096ac:	464a      	mov	r2, r9
 80096ae:	4631      	mov	r1, r6
 80096b0:	4628      	mov	r0, r5
 80096b2:	47b8      	blx	r7
 80096b4:	3001      	adds	r0, #1
 80096b6:	f43f ae36 	beq.w	8009326 <_printf_float+0xbe>
 80096ba:	f108 0801 	add.w	r8, r8, #1
 80096be:	68e3      	ldr	r3, [r4, #12]
 80096c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80096c2:	1a5b      	subs	r3, r3, r1
 80096c4:	4543      	cmp	r3, r8
 80096c6:	dcf0      	bgt.n	80096aa <_printf_float+0x442>
 80096c8:	e6f8      	b.n	80094bc <_printf_float+0x254>
 80096ca:	f04f 0800 	mov.w	r8, #0
 80096ce:	f104 0919 	add.w	r9, r4, #25
 80096d2:	e7f4      	b.n	80096be <_printf_float+0x456>

080096d4 <_printf_common>:
 80096d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096d8:	4616      	mov	r6, r2
 80096da:	4699      	mov	r9, r3
 80096dc:	688a      	ldr	r2, [r1, #8]
 80096de:	690b      	ldr	r3, [r1, #16]
 80096e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80096e4:	4293      	cmp	r3, r2
 80096e6:	bfb8      	it	lt
 80096e8:	4613      	movlt	r3, r2
 80096ea:	6033      	str	r3, [r6, #0]
 80096ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80096f0:	4607      	mov	r7, r0
 80096f2:	460c      	mov	r4, r1
 80096f4:	b10a      	cbz	r2, 80096fa <_printf_common+0x26>
 80096f6:	3301      	adds	r3, #1
 80096f8:	6033      	str	r3, [r6, #0]
 80096fa:	6823      	ldr	r3, [r4, #0]
 80096fc:	0699      	lsls	r1, r3, #26
 80096fe:	bf42      	ittt	mi
 8009700:	6833      	ldrmi	r3, [r6, #0]
 8009702:	3302      	addmi	r3, #2
 8009704:	6033      	strmi	r3, [r6, #0]
 8009706:	6825      	ldr	r5, [r4, #0]
 8009708:	f015 0506 	ands.w	r5, r5, #6
 800970c:	d106      	bne.n	800971c <_printf_common+0x48>
 800970e:	f104 0a19 	add.w	sl, r4, #25
 8009712:	68e3      	ldr	r3, [r4, #12]
 8009714:	6832      	ldr	r2, [r6, #0]
 8009716:	1a9b      	subs	r3, r3, r2
 8009718:	42ab      	cmp	r3, r5
 800971a:	dc26      	bgt.n	800976a <_printf_common+0x96>
 800971c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009720:	1e13      	subs	r3, r2, #0
 8009722:	6822      	ldr	r2, [r4, #0]
 8009724:	bf18      	it	ne
 8009726:	2301      	movne	r3, #1
 8009728:	0692      	lsls	r2, r2, #26
 800972a:	d42b      	bmi.n	8009784 <_printf_common+0xb0>
 800972c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009730:	4649      	mov	r1, r9
 8009732:	4638      	mov	r0, r7
 8009734:	47c0      	blx	r8
 8009736:	3001      	adds	r0, #1
 8009738:	d01e      	beq.n	8009778 <_printf_common+0xa4>
 800973a:	6823      	ldr	r3, [r4, #0]
 800973c:	6922      	ldr	r2, [r4, #16]
 800973e:	f003 0306 	and.w	r3, r3, #6
 8009742:	2b04      	cmp	r3, #4
 8009744:	bf02      	ittt	eq
 8009746:	68e5      	ldreq	r5, [r4, #12]
 8009748:	6833      	ldreq	r3, [r6, #0]
 800974a:	1aed      	subeq	r5, r5, r3
 800974c:	68a3      	ldr	r3, [r4, #8]
 800974e:	bf0c      	ite	eq
 8009750:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009754:	2500      	movne	r5, #0
 8009756:	4293      	cmp	r3, r2
 8009758:	bfc4      	itt	gt
 800975a:	1a9b      	subgt	r3, r3, r2
 800975c:	18ed      	addgt	r5, r5, r3
 800975e:	2600      	movs	r6, #0
 8009760:	341a      	adds	r4, #26
 8009762:	42b5      	cmp	r5, r6
 8009764:	d11a      	bne.n	800979c <_printf_common+0xc8>
 8009766:	2000      	movs	r0, #0
 8009768:	e008      	b.n	800977c <_printf_common+0xa8>
 800976a:	2301      	movs	r3, #1
 800976c:	4652      	mov	r2, sl
 800976e:	4649      	mov	r1, r9
 8009770:	4638      	mov	r0, r7
 8009772:	47c0      	blx	r8
 8009774:	3001      	adds	r0, #1
 8009776:	d103      	bne.n	8009780 <_printf_common+0xac>
 8009778:	f04f 30ff 	mov.w	r0, #4294967295
 800977c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009780:	3501      	adds	r5, #1
 8009782:	e7c6      	b.n	8009712 <_printf_common+0x3e>
 8009784:	18e1      	adds	r1, r4, r3
 8009786:	1c5a      	adds	r2, r3, #1
 8009788:	2030      	movs	r0, #48	; 0x30
 800978a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800978e:	4422      	add	r2, r4
 8009790:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009794:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009798:	3302      	adds	r3, #2
 800979a:	e7c7      	b.n	800972c <_printf_common+0x58>
 800979c:	2301      	movs	r3, #1
 800979e:	4622      	mov	r2, r4
 80097a0:	4649      	mov	r1, r9
 80097a2:	4638      	mov	r0, r7
 80097a4:	47c0      	blx	r8
 80097a6:	3001      	adds	r0, #1
 80097a8:	d0e6      	beq.n	8009778 <_printf_common+0xa4>
 80097aa:	3601      	adds	r6, #1
 80097ac:	e7d9      	b.n	8009762 <_printf_common+0x8e>
	...

080097b0 <_printf_i>:
 80097b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80097b4:	7e0f      	ldrb	r7, [r1, #24]
 80097b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80097b8:	2f78      	cmp	r7, #120	; 0x78
 80097ba:	4691      	mov	r9, r2
 80097bc:	4680      	mov	r8, r0
 80097be:	460c      	mov	r4, r1
 80097c0:	469a      	mov	sl, r3
 80097c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80097c6:	d807      	bhi.n	80097d8 <_printf_i+0x28>
 80097c8:	2f62      	cmp	r7, #98	; 0x62
 80097ca:	d80a      	bhi.n	80097e2 <_printf_i+0x32>
 80097cc:	2f00      	cmp	r7, #0
 80097ce:	f000 80d4 	beq.w	800997a <_printf_i+0x1ca>
 80097d2:	2f58      	cmp	r7, #88	; 0x58
 80097d4:	f000 80c0 	beq.w	8009958 <_printf_i+0x1a8>
 80097d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80097e0:	e03a      	b.n	8009858 <_printf_i+0xa8>
 80097e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80097e6:	2b15      	cmp	r3, #21
 80097e8:	d8f6      	bhi.n	80097d8 <_printf_i+0x28>
 80097ea:	a101      	add	r1, pc, #4	; (adr r1, 80097f0 <_printf_i+0x40>)
 80097ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80097f0:	08009849 	.word	0x08009849
 80097f4:	0800985d 	.word	0x0800985d
 80097f8:	080097d9 	.word	0x080097d9
 80097fc:	080097d9 	.word	0x080097d9
 8009800:	080097d9 	.word	0x080097d9
 8009804:	080097d9 	.word	0x080097d9
 8009808:	0800985d 	.word	0x0800985d
 800980c:	080097d9 	.word	0x080097d9
 8009810:	080097d9 	.word	0x080097d9
 8009814:	080097d9 	.word	0x080097d9
 8009818:	080097d9 	.word	0x080097d9
 800981c:	08009961 	.word	0x08009961
 8009820:	08009889 	.word	0x08009889
 8009824:	0800991b 	.word	0x0800991b
 8009828:	080097d9 	.word	0x080097d9
 800982c:	080097d9 	.word	0x080097d9
 8009830:	08009983 	.word	0x08009983
 8009834:	080097d9 	.word	0x080097d9
 8009838:	08009889 	.word	0x08009889
 800983c:	080097d9 	.word	0x080097d9
 8009840:	080097d9 	.word	0x080097d9
 8009844:	08009923 	.word	0x08009923
 8009848:	682b      	ldr	r3, [r5, #0]
 800984a:	1d1a      	adds	r2, r3, #4
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	602a      	str	r2, [r5, #0]
 8009850:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009854:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009858:	2301      	movs	r3, #1
 800985a:	e09f      	b.n	800999c <_printf_i+0x1ec>
 800985c:	6820      	ldr	r0, [r4, #0]
 800985e:	682b      	ldr	r3, [r5, #0]
 8009860:	0607      	lsls	r7, r0, #24
 8009862:	f103 0104 	add.w	r1, r3, #4
 8009866:	6029      	str	r1, [r5, #0]
 8009868:	d501      	bpl.n	800986e <_printf_i+0xbe>
 800986a:	681e      	ldr	r6, [r3, #0]
 800986c:	e003      	b.n	8009876 <_printf_i+0xc6>
 800986e:	0646      	lsls	r6, r0, #25
 8009870:	d5fb      	bpl.n	800986a <_printf_i+0xba>
 8009872:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009876:	2e00      	cmp	r6, #0
 8009878:	da03      	bge.n	8009882 <_printf_i+0xd2>
 800987a:	232d      	movs	r3, #45	; 0x2d
 800987c:	4276      	negs	r6, r6
 800987e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009882:	485a      	ldr	r0, [pc, #360]	; (80099ec <_printf_i+0x23c>)
 8009884:	230a      	movs	r3, #10
 8009886:	e012      	b.n	80098ae <_printf_i+0xfe>
 8009888:	682b      	ldr	r3, [r5, #0]
 800988a:	6820      	ldr	r0, [r4, #0]
 800988c:	1d19      	adds	r1, r3, #4
 800988e:	6029      	str	r1, [r5, #0]
 8009890:	0605      	lsls	r5, r0, #24
 8009892:	d501      	bpl.n	8009898 <_printf_i+0xe8>
 8009894:	681e      	ldr	r6, [r3, #0]
 8009896:	e002      	b.n	800989e <_printf_i+0xee>
 8009898:	0641      	lsls	r1, r0, #25
 800989a:	d5fb      	bpl.n	8009894 <_printf_i+0xe4>
 800989c:	881e      	ldrh	r6, [r3, #0]
 800989e:	4853      	ldr	r0, [pc, #332]	; (80099ec <_printf_i+0x23c>)
 80098a0:	2f6f      	cmp	r7, #111	; 0x6f
 80098a2:	bf0c      	ite	eq
 80098a4:	2308      	moveq	r3, #8
 80098a6:	230a      	movne	r3, #10
 80098a8:	2100      	movs	r1, #0
 80098aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80098ae:	6865      	ldr	r5, [r4, #4]
 80098b0:	60a5      	str	r5, [r4, #8]
 80098b2:	2d00      	cmp	r5, #0
 80098b4:	bfa2      	ittt	ge
 80098b6:	6821      	ldrge	r1, [r4, #0]
 80098b8:	f021 0104 	bicge.w	r1, r1, #4
 80098bc:	6021      	strge	r1, [r4, #0]
 80098be:	b90e      	cbnz	r6, 80098c4 <_printf_i+0x114>
 80098c0:	2d00      	cmp	r5, #0
 80098c2:	d04b      	beq.n	800995c <_printf_i+0x1ac>
 80098c4:	4615      	mov	r5, r2
 80098c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80098ca:	fb03 6711 	mls	r7, r3, r1, r6
 80098ce:	5dc7      	ldrb	r7, [r0, r7]
 80098d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80098d4:	4637      	mov	r7, r6
 80098d6:	42bb      	cmp	r3, r7
 80098d8:	460e      	mov	r6, r1
 80098da:	d9f4      	bls.n	80098c6 <_printf_i+0x116>
 80098dc:	2b08      	cmp	r3, #8
 80098de:	d10b      	bne.n	80098f8 <_printf_i+0x148>
 80098e0:	6823      	ldr	r3, [r4, #0]
 80098e2:	07de      	lsls	r6, r3, #31
 80098e4:	d508      	bpl.n	80098f8 <_printf_i+0x148>
 80098e6:	6923      	ldr	r3, [r4, #16]
 80098e8:	6861      	ldr	r1, [r4, #4]
 80098ea:	4299      	cmp	r1, r3
 80098ec:	bfde      	ittt	le
 80098ee:	2330      	movle	r3, #48	; 0x30
 80098f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80098f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80098f8:	1b52      	subs	r2, r2, r5
 80098fa:	6122      	str	r2, [r4, #16]
 80098fc:	f8cd a000 	str.w	sl, [sp]
 8009900:	464b      	mov	r3, r9
 8009902:	aa03      	add	r2, sp, #12
 8009904:	4621      	mov	r1, r4
 8009906:	4640      	mov	r0, r8
 8009908:	f7ff fee4 	bl	80096d4 <_printf_common>
 800990c:	3001      	adds	r0, #1
 800990e:	d14a      	bne.n	80099a6 <_printf_i+0x1f6>
 8009910:	f04f 30ff 	mov.w	r0, #4294967295
 8009914:	b004      	add	sp, #16
 8009916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800991a:	6823      	ldr	r3, [r4, #0]
 800991c:	f043 0320 	orr.w	r3, r3, #32
 8009920:	6023      	str	r3, [r4, #0]
 8009922:	4833      	ldr	r0, [pc, #204]	; (80099f0 <_printf_i+0x240>)
 8009924:	2778      	movs	r7, #120	; 0x78
 8009926:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800992a:	6823      	ldr	r3, [r4, #0]
 800992c:	6829      	ldr	r1, [r5, #0]
 800992e:	061f      	lsls	r7, r3, #24
 8009930:	f851 6b04 	ldr.w	r6, [r1], #4
 8009934:	d402      	bmi.n	800993c <_printf_i+0x18c>
 8009936:	065f      	lsls	r7, r3, #25
 8009938:	bf48      	it	mi
 800993a:	b2b6      	uxthmi	r6, r6
 800993c:	07df      	lsls	r7, r3, #31
 800993e:	bf48      	it	mi
 8009940:	f043 0320 	orrmi.w	r3, r3, #32
 8009944:	6029      	str	r1, [r5, #0]
 8009946:	bf48      	it	mi
 8009948:	6023      	strmi	r3, [r4, #0]
 800994a:	b91e      	cbnz	r6, 8009954 <_printf_i+0x1a4>
 800994c:	6823      	ldr	r3, [r4, #0]
 800994e:	f023 0320 	bic.w	r3, r3, #32
 8009952:	6023      	str	r3, [r4, #0]
 8009954:	2310      	movs	r3, #16
 8009956:	e7a7      	b.n	80098a8 <_printf_i+0xf8>
 8009958:	4824      	ldr	r0, [pc, #144]	; (80099ec <_printf_i+0x23c>)
 800995a:	e7e4      	b.n	8009926 <_printf_i+0x176>
 800995c:	4615      	mov	r5, r2
 800995e:	e7bd      	b.n	80098dc <_printf_i+0x12c>
 8009960:	682b      	ldr	r3, [r5, #0]
 8009962:	6826      	ldr	r6, [r4, #0]
 8009964:	6961      	ldr	r1, [r4, #20]
 8009966:	1d18      	adds	r0, r3, #4
 8009968:	6028      	str	r0, [r5, #0]
 800996a:	0635      	lsls	r5, r6, #24
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	d501      	bpl.n	8009974 <_printf_i+0x1c4>
 8009970:	6019      	str	r1, [r3, #0]
 8009972:	e002      	b.n	800997a <_printf_i+0x1ca>
 8009974:	0670      	lsls	r0, r6, #25
 8009976:	d5fb      	bpl.n	8009970 <_printf_i+0x1c0>
 8009978:	8019      	strh	r1, [r3, #0]
 800997a:	2300      	movs	r3, #0
 800997c:	6123      	str	r3, [r4, #16]
 800997e:	4615      	mov	r5, r2
 8009980:	e7bc      	b.n	80098fc <_printf_i+0x14c>
 8009982:	682b      	ldr	r3, [r5, #0]
 8009984:	1d1a      	adds	r2, r3, #4
 8009986:	602a      	str	r2, [r5, #0]
 8009988:	681d      	ldr	r5, [r3, #0]
 800998a:	6862      	ldr	r2, [r4, #4]
 800998c:	2100      	movs	r1, #0
 800998e:	4628      	mov	r0, r5
 8009990:	f7f6 fc2e 	bl	80001f0 <memchr>
 8009994:	b108      	cbz	r0, 800999a <_printf_i+0x1ea>
 8009996:	1b40      	subs	r0, r0, r5
 8009998:	6060      	str	r0, [r4, #4]
 800999a:	6863      	ldr	r3, [r4, #4]
 800999c:	6123      	str	r3, [r4, #16]
 800999e:	2300      	movs	r3, #0
 80099a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099a4:	e7aa      	b.n	80098fc <_printf_i+0x14c>
 80099a6:	6923      	ldr	r3, [r4, #16]
 80099a8:	462a      	mov	r2, r5
 80099aa:	4649      	mov	r1, r9
 80099ac:	4640      	mov	r0, r8
 80099ae:	47d0      	blx	sl
 80099b0:	3001      	adds	r0, #1
 80099b2:	d0ad      	beq.n	8009910 <_printf_i+0x160>
 80099b4:	6823      	ldr	r3, [r4, #0]
 80099b6:	079b      	lsls	r3, r3, #30
 80099b8:	d413      	bmi.n	80099e2 <_printf_i+0x232>
 80099ba:	68e0      	ldr	r0, [r4, #12]
 80099bc:	9b03      	ldr	r3, [sp, #12]
 80099be:	4298      	cmp	r0, r3
 80099c0:	bfb8      	it	lt
 80099c2:	4618      	movlt	r0, r3
 80099c4:	e7a6      	b.n	8009914 <_printf_i+0x164>
 80099c6:	2301      	movs	r3, #1
 80099c8:	4632      	mov	r2, r6
 80099ca:	4649      	mov	r1, r9
 80099cc:	4640      	mov	r0, r8
 80099ce:	47d0      	blx	sl
 80099d0:	3001      	adds	r0, #1
 80099d2:	d09d      	beq.n	8009910 <_printf_i+0x160>
 80099d4:	3501      	adds	r5, #1
 80099d6:	68e3      	ldr	r3, [r4, #12]
 80099d8:	9903      	ldr	r1, [sp, #12]
 80099da:	1a5b      	subs	r3, r3, r1
 80099dc:	42ab      	cmp	r3, r5
 80099de:	dcf2      	bgt.n	80099c6 <_printf_i+0x216>
 80099e0:	e7eb      	b.n	80099ba <_printf_i+0x20a>
 80099e2:	2500      	movs	r5, #0
 80099e4:	f104 0619 	add.w	r6, r4, #25
 80099e8:	e7f5      	b.n	80099d6 <_printf_i+0x226>
 80099ea:	bf00      	nop
 80099ec:	0800bec6 	.word	0x0800bec6
 80099f0:	0800bed7 	.word	0x0800bed7

080099f4 <std>:
 80099f4:	2300      	movs	r3, #0
 80099f6:	b510      	push	{r4, lr}
 80099f8:	4604      	mov	r4, r0
 80099fa:	e9c0 3300 	strd	r3, r3, [r0]
 80099fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a02:	6083      	str	r3, [r0, #8]
 8009a04:	8181      	strh	r1, [r0, #12]
 8009a06:	6643      	str	r3, [r0, #100]	; 0x64
 8009a08:	81c2      	strh	r2, [r0, #14]
 8009a0a:	6183      	str	r3, [r0, #24]
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	2208      	movs	r2, #8
 8009a10:	305c      	adds	r0, #92	; 0x5c
 8009a12:	f000 f926 	bl	8009c62 <memset>
 8009a16:	4b0d      	ldr	r3, [pc, #52]	; (8009a4c <std+0x58>)
 8009a18:	6263      	str	r3, [r4, #36]	; 0x24
 8009a1a:	4b0d      	ldr	r3, [pc, #52]	; (8009a50 <std+0x5c>)
 8009a1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009a1e:	4b0d      	ldr	r3, [pc, #52]	; (8009a54 <std+0x60>)
 8009a20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009a22:	4b0d      	ldr	r3, [pc, #52]	; (8009a58 <std+0x64>)
 8009a24:	6323      	str	r3, [r4, #48]	; 0x30
 8009a26:	4b0d      	ldr	r3, [pc, #52]	; (8009a5c <std+0x68>)
 8009a28:	6224      	str	r4, [r4, #32]
 8009a2a:	429c      	cmp	r4, r3
 8009a2c:	d006      	beq.n	8009a3c <std+0x48>
 8009a2e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009a32:	4294      	cmp	r4, r2
 8009a34:	d002      	beq.n	8009a3c <std+0x48>
 8009a36:	33d0      	adds	r3, #208	; 0xd0
 8009a38:	429c      	cmp	r4, r3
 8009a3a:	d105      	bne.n	8009a48 <std+0x54>
 8009a3c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a44:	f000 b98a 	b.w	8009d5c <__retarget_lock_init_recursive>
 8009a48:	bd10      	pop	{r4, pc}
 8009a4a:	bf00      	nop
 8009a4c:	08009bdd 	.word	0x08009bdd
 8009a50:	08009bff 	.word	0x08009bff
 8009a54:	08009c37 	.word	0x08009c37
 8009a58:	08009c5b 	.word	0x08009c5b
 8009a5c:	20000eac 	.word	0x20000eac

08009a60 <stdio_exit_handler>:
 8009a60:	4a02      	ldr	r2, [pc, #8]	; (8009a6c <stdio_exit_handler+0xc>)
 8009a62:	4903      	ldr	r1, [pc, #12]	; (8009a70 <stdio_exit_handler+0x10>)
 8009a64:	4803      	ldr	r0, [pc, #12]	; (8009a74 <stdio_exit_handler+0x14>)
 8009a66:	f000 b869 	b.w	8009b3c <_fwalk_sglue>
 8009a6a:	bf00      	nop
 8009a6c:	20000010 	.word	0x20000010
 8009a70:	0800b999 	.word	0x0800b999
 8009a74:	2000001c 	.word	0x2000001c

08009a78 <cleanup_stdio>:
 8009a78:	6841      	ldr	r1, [r0, #4]
 8009a7a:	4b0c      	ldr	r3, [pc, #48]	; (8009aac <cleanup_stdio+0x34>)
 8009a7c:	4299      	cmp	r1, r3
 8009a7e:	b510      	push	{r4, lr}
 8009a80:	4604      	mov	r4, r0
 8009a82:	d001      	beq.n	8009a88 <cleanup_stdio+0x10>
 8009a84:	f001 ff88 	bl	800b998 <_fflush_r>
 8009a88:	68a1      	ldr	r1, [r4, #8]
 8009a8a:	4b09      	ldr	r3, [pc, #36]	; (8009ab0 <cleanup_stdio+0x38>)
 8009a8c:	4299      	cmp	r1, r3
 8009a8e:	d002      	beq.n	8009a96 <cleanup_stdio+0x1e>
 8009a90:	4620      	mov	r0, r4
 8009a92:	f001 ff81 	bl	800b998 <_fflush_r>
 8009a96:	68e1      	ldr	r1, [r4, #12]
 8009a98:	4b06      	ldr	r3, [pc, #24]	; (8009ab4 <cleanup_stdio+0x3c>)
 8009a9a:	4299      	cmp	r1, r3
 8009a9c:	d004      	beq.n	8009aa8 <cleanup_stdio+0x30>
 8009a9e:	4620      	mov	r0, r4
 8009aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009aa4:	f001 bf78 	b.w	800b998 <_fflush_r>
 8009aa8:	bd10      	pop	{r4, pc}
 8009aaa:	bf00      	nop
 8009aac:	20000eac 	.word	0x20000eac
 8009ab0:	20000f14 	.word	0x20000f14
 8009ab4:	20000f7c 	.word	0x20000f7c

08009ab8 <global_stdio_init.part.0>:
 8009ab8:	b510      	push	{r4, lr}
 8009aba:	4b0b      	ldr	r3, [pc, #44]	; (8009ae8 <global_stdio_init.part.0+0x30>)
 8009abc:	4c0b      	ldr	r4, [pc, #44]	; (8009aec <global_stdio_init.part.0+0x34>)
 8009abe:	4a0c      	ldr	r2, [pc, #48]	; (8009af0 <global_stdio_init.part.0+0x38>)
 8009ac0:	601a      	str	r2, [r3, #0]
 8009ac2:	4620      	mov	r0, r4
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	2104      	movs	r1, #4
 8009ac8:	f7ff ff94 	bl	80099f4 <std>
 8009acc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	2109      	movs	r1, #9
 8009ad4:	f7ff ff8e 	bl	80099f4 <std>
 8009ad8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009adc:	2202      	movs	r2, #2
 8009ade:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ae2:	2112      	movs	r1, #18
 8009ae4:	f7ff bf86 	b.w	80099f4 <std>
 8009ae8:	20000fe4 	.word	0x20000fe4
 8009aec:	20000eac 	.word	0x20000eac
 8009af0:	08009a61 	.word	0x08009a61

08009af4 <__sfp_lock_acquire>:
 8009af4:	4801      	ldr	r0, [pc, #4]	; (8009afc <__sfp_lock_acquire+0x8>)
 8009af6:	f000 b932 	b.w	8009d5e <__retarget_lock_acquire_recursive>
 8009afa:	bf00      	nop
 8009afc:	20000fed 	.word	0x20000fed

08009b00 <__sfp_lock_release>:
 8009b00:	4801      	ldr	r0, [pc, #4]	; (8009b08 <__sfp_lock_release+0x8>)
 8009b02:	f000 b92d 	b.w	8009d60 <__retarget_lock_release_recursive>
 8009b06:	bf00      	nop
 8009b08:	20000fed 	.word	0x20000fed

08009b0c <__sinit>:
 8009b0c:	b510      	push	{r4, lr}
 8009b0e:	4604      	mov	r4, r0
 8009b10:	f7ff fff0 	bl	8009af4 <__sfp_lock_acquire>
 8009b14:	6a23      	ldr	r3, [r4, #32]
 8009b16:	b11b      	cbz	r3, 8009b20 <__sinit+0x14>
 8009b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b1c:	f7ff bff0 	b.w	8009b00 <__sfp_lock_release>
 8009b20:	4b04      	ldr	r3, [pc, #16]	; (8009b34 <__sinit+0x28>)
 8009b22:	6223      	str	r3, [r4, #32]
 8009b24:	4b04      	ldr	r3, [pc, #16]	; (8009b38 <__sinit+0x2c>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d1f5      	bne.n	8009b18 <__sinit+0xc>
 8009b2c:	f7ff ffc4 	bl	8009ab8 <global_stdio_init.part.0>
 8009b30:	e7f2      	b.n	8009b18 <__sinit+0xc>
 8009b32:	bf00      	nop
 8009b34:	08009a79 	.word	0x08009a79
 8009b38:	20000fe4 	.word	0x20000fe4

08009b3c <_fwalk_sglue>:
 8009b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b40:	4607      	mov	r7, r0
 8009b42:	4688      	mov	r8, r1
 8009b44:	4614      	mov	r4, r2
 8009b46:	2600      	movs	r6, #0
 8009b48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b4c:	f1b9 0901 	subs.w	r9, r9, #1
 8009b50:	d505      	bpl.n	8009b5e <_fwalk_sglue+0x22>
 8009b52:	6824      	ldr	r4, [r4, #0]
 8009b54:	2c00      	cmp	r4, #0
 8009b56:	d1f7      	bne.n	8009b48 <_fwalk_sglue+0xc>
 8009b58:	4630      	mov	r0, r6
 8009b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b5e:	89ab      	ldrh	r3, [r5, #12]
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d907      	bls.n	8009b74 <_fwalk_sglue+0x38>
 8009b64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b68:	3301      	adds	r3, #1
 8009b6a:	d003      	beq.n	8009b74 <_fwalk_sglue+0x38>
 8009b6c:	4629      	mov	r1, r5
 8009b6e:	4638      	mov	r0, r7
 8009b70:	47c0      	blx	r8
 8009b72:	4306      	orrs	r6, r0
 8009b74:	3568      	adds	r5, #104	; 0x68
 8009b76:	e7e9      	b.n	8009b4c <_fwalk_sglue+0x10>

08009b78 <iprintf>:
 8009b78:	b40f      	push	{r0, r1, r2, r3}
 8009b7a:	b507      	push	{r0, r1, r2, lr}
 8009b7c:	4906      	ldr	r1, [pc, #24]	; (8009b98 <iprintf+0x20>)
 8009b7e:	ab04      	add	r3, sp, #16
 8009b80:	6808      	ldr	r0, [r1, #0]
 8009b82:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b86:	6881      	ldr	r1, [r0, #8]
 8009b88:	9301      	str	r3, [sp, #4]
 8009b8a:	f001 fd65 	bl	800b658 <_vfiprintf_r>
 8009b8e:	b003      	add	sp, #12
 8009b90:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b94:	b004      	add	sp, #16
 8009b96:	4770      	bx	lr
 8009b98:	20000068 	.word	0x20000068

08009b9c <siprintf>:
 8009b9c:	b40e      	push	{r1, r2, r3}
 8009b9e:	b500      	push	{lr}
 8009ba0:	b09c      	sub	sp, #112	; 0x70
 8009ba2:	ab1d      	add	r3, sp, #116	; 0x74
 8009ba4:	9002      	str	r0, [sp, #8]
 8009ba6:	9006      	str	r0, [sp, #24]
 8009ba8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009bac:	4809      	ldr	r0, [pc, #36]	; (8009bd4 <siprintf+0x38>)
 8009bae:	9107      	str	r1, [sp, #28]
 8009bb0:	9104      	str	r1, [sp, #16]
 8009bb2:	4909      	ldr	r1, [pc, #36]	; (8009bd8 <siprintf+0x3c>)
 8009bb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bb8:	9105      	str	r1, [sp, #20]
 8009bba:	6800      	ldr	r0, [r0, #0]
 8009bbc:	9301      	str	r3, [sp, #4]
 8009bbe:	a902      	add	r1, sp, #8
 8009bc0:	f001 fc22 	bl	800b408 <_svfiprintf_r>
 8009bc4:	9b02      	ldr	r3, [sp, #8]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	701a      	strb	r2, [r3, #0]
 8009bca:	b01c      	add	sp, #112	; 0x70
 8009bcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009bd0:	b003      	add	sp, #12
 8009bd2:	4770      	bx	lr
 8009bd4:	20000068 	.word	0x20000068
 8009bd8:	ffff0208 	.word	0xffff0208

08009bdc <__sread>:
 8009bdc:	b510      	push	{r4, lr}
 8009bde:	460c      	mov	r4, r1
 8009be0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009be4:	f000 f86c 	bl	8009cc0 <_read_r>
 8009be8:	2800      	cmp	r0, #0
 8009bea:	bfab      	itete	ge
 8009bec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009bee:	89a3      	ldrhlt	r3, [r4, #12]
 8009bf0:	181b      	addge	r3, r3, r0
 8009bf2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009bf6:	bfac      	ite	ge
 8009bf8:	6563      	strge	r3, [r4, #84]	; 0x54
 8009bfa:	81a3      	strhlt	r3, [r4, #12]
 8009bfc:	bd10      	pop	{r4, pc}

08009bfe <__swrite>:
 8009bfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c02:	461f      	mov	r7, r3
 8009c04:	898b      	ldrh	r3, [r1, #12]
 8009c06:	05db      	lsls	r3, r3, #23
 8009c08:	4605      	mov	r5, r0
 8009c0a:	460c      	mov	r4, r1
 8009c0c:	4616      	mov	r6, r2
 8009c0e:	d505      	bpl.n	8009c1c <__swrite+0x1e>
 8009c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c14:	2302      	movs	r3, #2
 8009c16:	2200      	movs	r2, #0
 8009c18:	f000 f840 	bl	8009c9c <_lseek_r>
 8009c1c:	89a3      	ldrh	r3, [r4, #12]
 8009c1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c26:	81a3      	strh	r3, [r4, #12]
 8009c28:	4632      	mov	r2, r6
 8009c2a:	463b      	mov	r3, r7
 8009c2c:	4628      	mov	r0, r5
 8009c2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c32:	f000 b857 	b.w	8009ce4 <_write_r>

08009c36 <__sseek>:
 8009c36:	b510      	push	{r4, lr}
 8009c38:	460c      	mov	r4, r1
 8009c3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c3e:	f000 f82d 	bl	8009c9c <_lseek_r>
 8009c42:	1c43      	adds	r3, r0, #1
 8009c44:	89a3      	ldrh	r3, [r4, #12]
 8009c46:	bf15      	itete	ne
 8009c48:	6560      	strne	r0, [r4, #84]	; 0x54
 8009c4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009c4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009c52:	81a3      	strheq	r3, [r4, #12]
 8009c54:	bf18      	it	ne
 8009c56:	81a3      	strhne	r3, [r4, #12]
 8009c58:	bd10      	pop	{r4, pc}

08009c5a <__sclose>:
 8009c5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c5e:	f000 b80d 	b.w	8009c7c <_close_r>

08009c62 <memset>:
 8009c62:	4402      	add	r2, r0
 8009c64:	4603      	mov	r3, r0
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d100      	bne.n	8009c6c <memset+0xa>
 8009c6a:	4770      	bx	lr
 8009c6c:	f803 1b01 	strb.w	r1, [r3], #1
 8009c70:	e7f9      	b.n	8009c66 <memset+0x4>
	...

08009c74 <_localeconv_r>:
 8009c74:	4800      	ldr	r0, [pc, #0]	; (8009c78 <_localeconv_r+0x4>)
 8009c76:	4770      	bx	lr
 8009c78:	2000015c 	.word	0x2000015c

08009c7c <_close_r>:
 8009c7c:	b538      	push	{r3, r4, r5, lr}
 8009c7e:	4d06      	ldr	r5, [pc, #24]	; (8009c98 <_close_r+0x1c>)
 8009c80:	2300      	movs	r3, #0
 8009c82:	4604      	mov	r4, r0
 8009c84:	4608      	mov	r0, r1
 8009c86:	602b      	str	r3, [r5, #0]
 8009c88:	f7f9 fd95 	bl	80037b6 <_close>
 8009c8c:	1c43      	adds	r3, r0, #1
 8009c8e:	d102      	bne.n	8009c96 <_close_r+0x1a>
 8009c90:	682b      	ldr	r3, [r5, #0]
 8009c92:	b103      	cbz	r3, 8009c96 <_close_r+0x1a>
 8009c94:	6023      	str	r3, [r4, #0]
 8009c96:	bd38      	pop	{r3, r4, r5, pc}
 8009c98:	20000fe8 	.word	0x20000fe8

08009c9c <_lseek_r>:
 8009c9c:	b538      	push	{r3, r4, r5, lr}
 8009c9e:	4d07      	ldr	r5, [pc, #28]	; (8009cbc <_lseek_r+0x20>)
 8009ca0:	4604      	mov	r4, r0
 8009ca2:	4608      	mov	r0, r1
 8009ca4:	4611      	mov	r1, r2
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	602a      	str	r2, [r5, #0]
 8009caa:	461a      	mov	r2, r3
 8009cac:	f7f9 fdaa 	bl	8003804 <_lseek>
 8009cb0:	1c43      	adds	r3, r0, #1
 8009cb2:	d102      	bne.n	8009cba <_lseek_r+0x1e>
 8009cb4:	682b      	ldr	r3, [r5, #0]
 8009cb6:	b103      	cbz	r3, 8009cba <_lseek_r+0x1e>
 8009cb8:	6023      	str	r3, [r4, #0]
 8009cba:	bd38      	pop	{r3, r4, r5, pc}
 8009cbc:	20000fe8 	.word	0x20000fe8

08009cc0 <_read_r>:
 8009cc0:	b538      	push	{r3, r4, r5, lr}
 8009cc2:	4d07      	ldr	r5, [pc, #28]	; (8009ce0 <_read_r+0x20>)
 8009cc4:	4604      	mov	r4, r0
 8009cc6:	4608      	mov	r0, r1
 8009cc8:	4611      	mov	r1, r2
 8009cca:	2200      	movs	r2, #0
 8009ccc:	602a      	str	r2, [r5, #0]
 8009cce:	461a      	mov	r2, r3
 8009cd0:	f7f9 fd54 	bl	800377c <_read>
 8009cd4:	1c43      	adds	r3, r0, #1
 8009cd6:	d102      	bne.n	8009cde <_read_r+0x1e>
 8009cd8:	682b      	ldr	r3, [r5, #0]
 8009cda:	b103      	cbz	r3, 8009cde <_read_r+0x1e>
 8009cdc:	6023      	str	r3, [r4, #0]
 8009cde:	bd38      	pop	{r3, r4, r5, pc}
 8009ce0:	20000fe8 	.word	0x20000fe8

08009ce4 <_write_r>:
 8009ce4:	b538      	push	{r3, r4, r5, lr}
 8009ce6:	4d07      	ldr	r5, [pc, #28]	; (8009d04 <_write_r+0x20>)
 8009ce8:	4604      	mov	r4, r0
 8009cea:	4608      	mov	r0, r1
 8009cec:	4611      	mov	r1, r2
 8009cee:	2200      	movs	r2, #0
 8009cf0:	602a      	str	r2, [r5, #0]
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	f7f7 f956 	bl	8000fa4 <_write>
 8009cf8:	1c43      	adds	r3, r0, #1
 8009cfa:	d102      	bne.n	8009d02 <_write_r+0x1e>
 8009cfc:	682b      	ldr	r3, [r5, #0]
 8009cfe:	b103      	cbz	r3, 8009d02 <_write_r+0x1e>
 8009d00:	6023      	str	r3, [r4, #0]
 8009d02:	bd38      	pop	{r3, r4, r5, pc}
 8009d04:	20000fe8 	.word	0x20000fe8

08009d08 <__errno>:
 8009d08:	4b01      	ldr	r3, [pc, #4]	; (8009d10 <__errno+0x8>)
 8009d0a:	6818      	ldr	r0, [r3, #0]
 8009d0c:	4770      	bx	lr
 8009d0e:	bf00      	nop
 8009d10:	20000068 	.word	0x20000068

08009d14 <__libc_init_array>:
 8009d14:	b570      	push	{r4, r5, r6, lr}
 8009d16:	4d0d      	ldr	r5, [pc, #52]	; (8009d4c <__libc_init_array+0x38>)
 8009d18:	4c0d      	ldr	r4, [pc, #52]	; (8009d50 <__libc_init_array+0x3c>)
 8009d1a:	1b64      	subs	r4, r4, r5
 8009d1c:	10a4      	asrs	r4, r4, #2
 8009d1e:	2600      	movs	r6, #0
 8009d20:	42a6      	cmp	r6, r4
 8009d22:	d109      	bne.n	8009d38 <__libc_init_array+0x24>
 8009d24:	4d0b      	ldr	r5, [pc, #44]	; (8009d54 <__libc_init_array+0x40>)
 8009d26:	4c0c      	ldr	r4, [pc, #48]	; (8009d58 <__libc_init_array+0x44>)
 8009d28:	f002 f898 	bl	800be5c <_init>
 8009d2c:	1b64      	subs	r4, r4, r5
 8009d2e:	10a4      	asrs	r4, r4, #2
 8009d30:	2600      	movs	r6, #0
 8009d32:	42a6      	cmp	r6, r4
 8009d34:	d105      	bne.n	8009d42 <__libc_init_array+0x2e>
 8009d36:	bd70      	pop	{r4, r5, r6, pc}
 8009d38:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d3c:	4798      	blx	r3
 8009d3e:	3601      	adds	r6, #1
 8009d40:	e7ee      	b.n	8009d20 <__libc_init_array+0xc>
 8009d42:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d46:	4798      	blx	r3
 8009d48:	3601      	adds	r6, #1
 8009d4a:	e7f2      	b.n	8009d32 <__libc_init_array+0x1e>
 8009d4c:	0800c22c 	.word	0x0800c22c
 8009d50:	0800c22c 	.word	0x0800c22c
 8009d54:	0800c22c 	.word	0x0800c22c
 8009d58:	0800c230 	.word	0x0800c230

08009d5c <__retarget_lock_init_recursive>:
 8009d5c:	4770      	bx	lr

08009d5e <__retarget_lock_acquire_recursive>:
 8009d5e:	4770      	bx	lr

08009d60 <__retarget_lock_release_recursive>:
 8009d60:	4770      	bx	lr

08009d62 <quorem>:
 8009d62:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d66:	6903      	ldr	r3, [r0, #16]
 8009d68:	690c      	ldr	r4, [r1, #16]
 8009d6a:	42a3      	cmp	r3, r4
 8009d6c:	4607      	mov	r7, r0
 8009d6e:	db7e      	blt.n	8009e6e <quorem+0x10c>
 8009d70:	3c01      	subs	r4, #1
 8009d72:	f101 0814 	add.w	r8, r1, #20
 8009d76:	f100 0514 	add.w	r5, r0, #20
 8009d7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d7e:	9301      	str	r3, [sp, #4]
 8009d80:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009d84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d88:	3301      	adds	r3, #1
 8009d8a:	429a      	cmp	r2, r3
 8009d8c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009d90:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009d94:	fbb2 f6f3 	udiv	r6, r2, r3
 8009d98:	d331      	bcc.n	8009dfe <quorem+0x9c>
 8009d9a:	f04f 0e00 	mov.w	lr, #0
 8009d9e:	4640      	mov	r0, r8
 8009da0:	46ac      	mov	ip, r5
 8009da2:	46f2      	mov	sl, lr
 8009da4:	f850 2b04 	ldr.w	r2, [r0], #4
 8009da8:	b293      	uxth	r3, r2
 8009daa:	fb06 e303 	mla	r3, r6, r3, lr
 8009dae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009db2:	0c1a      	lsrs	r2, r3, #16
 8009db4:	b29b      	uxth	r3, r3
 8009db6:	ebaa 0303 	sub.w	r3, sl, r3
 8009dba:	f8dc a000 	ldr.w	sl, [ip]
 8009dbe:	fa13 f38a 	uxtah	r3, r3, sl
 8009dc2:	fb06 220e 	mla	r2, r6, lr, r2
 8009dc6:	9300      	str	r3, [sp, #0]
 8009dc8:	9b00      	ldr	r3, [sp, #0]
 8009dca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009dce:	b292      	uxth	r2, r2
 8009dd0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009dd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009dd8:	f8bd 3000 	ldrh.w	r3, [sp]
 8009ddc:	4581      	cmp	r9, r0
 8009dde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009de2:	f84c 3b04 	str.w	r3, [ip], #4
 8009de6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009dea:	d2db      	bcs.n	8009da4 <quorem+0x42>
 8009dec:	f855 300b 	ldr.w	r3, [r5, fp]
 8009df0:	b92b      	cbnz	r3, 8009dfe <quorem+0x9c>
 8009df2:	9b01      	ldr	r3, [sp, #4]
 8009df4:	3b04      	subs	r3, #4
 8009df6:	429d      	cmp	r5, r3
 8009df8:	461a      	mov	r2, r3
 8009dfa:	d32c      	bcc.n	8009e56 <quorem+0xf4>
 8009dfc:	613c      	str	r4, [r7, #16]
 8009dfe:	4638      	mov	r0, r7
 8009e00:	f001 f9a8 	bl	800b154 <__mcmp>
 8009e04:	2800      	cmp	r0, #0
 8009e06:	db22      	blt.n	8009e4e <quorem+0xec>
 8009e08:	3601      	adds	r6, #1
 8009e0a:	4629      	mov	r1, r5
 8009e0c:	2000      	movs	r0, #0
 8009e0e:	f858 2b04 	ldr.w	r2, [r8], #4
 8009e12:	f8d1 c000 	ldr.w	ip, [r1]
 8009e16:	b293      	uxth	r3, r2
 8009e18:	1ac3      	subs	r3, r0, r3
 8009e1a:	0c12      	lsrs	r2, r2, #16
 8009e1c:	fa13 f38c 	uxtah	r3, r3, ip
 8009e20:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009e24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e2e:	45c1      	cmp	r9, r8
 8009e30:	f841 3b04 	str.w	r3, [r1], #4
 8009e34:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009e38:	d2e9      	bcs.n	8009e0e <quorem+0xac>
 8009e3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e42:	b922      	cbnz	r2, 8009e4e <quorem+0xec>
 8009e44:	3b04      	subs	r3, #4
 8009e46:	429d      	cmp	r5, r3
 8009e48:	461a      	mov	r2, r3
 8009e4a:	d30a      	bcc.n	8009e62 <quorem+0x100>
 8009e4c:	613c      	str	r4, [r7, #16]
 8009e4e:	4630      	mov	r0, r6
 8009e50:	b003      	add	sp, #12
 8009e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e56:	6812      	ldr	r2, [r2, #0]
 8009e58:	3b04      	subs	r3, #4
 8009e5a:	2a00      	cmp	r2, #0
 8009e5c:	d1ce      	bne.n	8009dfc <quorem+0x9a>
 8009e5e:	3c01      	subs	r4, #1
 8009e60:	e7c9      	b.n	8009df6 <quorem+0x94>
 8009e62:	6812      	ldr	r2, [r2, #0]
 8009e64:	3b04      	subs	r3, #4
 8009e66:	2a00      	cmp	r2, #0
 8009e68:	d1f0      	bne.n	8009e4c <quorem+0xea>
 8009e6a:	3c01      	subs	r4, #1
 8009e6c:	e7eb      	b.n	8009e46 <quorem+0xe4>
 8009e6e:	2000      	movs	r0, #0
 8009e70:	e7ee      	b.n	8009e50 <quorem+0xee>
 8009e72:	0000      	movs	r0, r0
 8009e74:	0000      	movs	r0, r0
	...

08009e78 <_dtoa_r>:
 8009e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e7c:	ed2d 8b04 	vpush	{d8-d9}
 8009e80:	69c5      	ldr	r5, [r0, #28]
 8009e82:	b093      	sub	sp, #76	; 0x4c
 8009e84:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009e88:	ec57 6b10 	vmov	r6, r7, d0
 8009e8c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009e90:	9107      	str	r1, [sp, #28]
 8009e92:	4604      	mov	r4, r0
 8009e94:	920a      	str	r2, [sp, #40]	; 0x28
 8009e96:	930d      	str	r3, [sp, #52]	; 0x34
 8009e98:	b975      	cbnz	r5, 8009eb8 <_dtoa_r+0x40>
 8009e9a:	2010      	movs	r0, #16
 8009e9c:	f000 fe2a 	bl	800aaf4 <malloc>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	61e0      	str	r0, [r4, #28]
 8009ea4:	b920      	cbnz	r0, 8009eb0 <_dtoa_r+0x38>
 8009ea6:	4bae      	ldr	r3, [pc, #696]	; (800a160 <_dtoa_r+0x2e8>)
 8009ea8:	21ef      	movs	r1, #239	; 0xef
 8009eaa:	48ae      	ldr	r0, [pc, #696]	; (800a164 <_dtoa_r+0x2ec>)
 8009eac:	f001 fe6a 	bl	800bb84 <__assert_func>
 8009eb0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009eb4:	6005      	str	r5, [r0, #0]
 8009eb6:	60c5      	str	r5, [r0, #12]
 8009eb8:	69e3      	ldr	r3, [r4, #28]
 8009eba:	6819      	ldr	r1, [r3, #0]
 8009ebc:	b151      	cbz	r1, 8009ed4 <_dtoa_r+0x5c>
 8009ebe:	685a      	ldr	r2, [r3, #4]
 8009ec0:	604a      	str	r2, [r1, #4]
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	4093      	lsls	r3, r2
 8009ec6:	608b      	str	r3, [r1, #8]
 8009ec8:	4620      	mov	r0, r4
 8009eca:	f000 ff07 	bl	800acdc <_Bfree>
 8009ece:	69e3      	ldr	r3, [r4, #28]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	601a      	str	r2, [r3, #0]
 8009ed4:	1e3b      	subs	r3, r7, #0
 8009ed6:	bfbb      	ittet	lt
 8009ed8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009edc:	9303      	strlt	r3, [sp, #12]
 8009ede:	2300      	movge	r3, #0
 8009ee0:	2201      	movlt	r2, #1
 8009ee2:	bfac      	ite	ge
 8009ee4:	f8c8 3000 	strge.w	r3, [r8]
 8009ee8:	f8c8 2000 	strlt.w	r2, [r8]
 8009eec:	4b9e      	ldr	r3, [pc, #632]	; (800a168 <_dtoa_r+0x2f0>)
 8009eee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009ef2:	ea33 0308 	bics.w	r3, r3, r8
 8009ef6:	d11b      	bne.n	8009f30 <_dtoa_r+0xb8>
 8009ef8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009efa:	f242 730f 	movw	r3, #9999	; 0x270f
 8009efe:	6013      	str	r3, [r2, #0]
 8009f00:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009f04:	4333      	orrs	r3, r6
 8009f06:	f000 8593 	beq.w	800aa30 <_dtoa_r+0xbb8>
 8009f0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f0c:	b963      	cbnz	r3, 8009f28 <_dtoa_r+0xb0>
 8009f0e:	4b97      	ldr	r3, [pc, #604]	; (800a16c <_dtoa_r+0x2f4>)
 8009f10:	e027      	b.n	8009f62 <_dtoa_r+0xea>
 8009f12:	4b97      	ldr	r3, [pc, #604]	; (800a170 <_dtoa_r+0x2f8>)
 8009f14:	9300      	str	r3, [sp, #0]
 8009f16:	3308      	adds	r3, #8
 8009f18:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009f1a:	6013      	str	r3, [r2, #0]
 8009f1c:	9800      	ldr	r0, [sp, #0]
 8009f1e:	b013      	add	sp, #76	; 0x4c
 8009f20:	ecbd 8b04 	vpop	{d8-d9}
 8009f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f28:	4b90      	ldr	r3, [pc, #576]	; (800a16c <_dtoa_r+0x2f4>)
 8009f2a:	9300      	str	r3, [sp, #0]
 8009f2c:	3303      	adds	r3, #3
 8009f2e:	e7f3      	b.n	8009f18 <_dtoa_r+0xa0>
 8009f30:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009f34:	2200      	movs	r2, #0
 8009f36:	ec51 0b17 	vmov	r0, r1, d7
 8009f3a:	eeb0 8a47 	vmov.f32	s16, s14
 8009f3e:	eef0 8a67 	vmov.f32	s17, s15
 8009f42:	2300      	movs	r3, #0
 8009f44:	f7f6 fdd0 	bl	8000ae8 <__aeabi_dcmpeq>
 8009f48:	4681      	mov	r9, r0
 8009f4a:	b160      	cbz	r0, 8009f66 <_dtoa_r+0xee>
 8009f4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f4e:	2301      	movs	r3, #1
 8009f50:	6013      	str	r3, [r2, #0]
 8009f52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	f000 8568 	beq.w	800aa2a <_dtoa_r+0xbb2>
 8009f5a:	4b86      	ldr	r3, [pc, #536]	; (800a174 <_dtoa_r+0x2fc>)
 8009f5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009f5e:	6013      	str	r3, [r2, #0]
 8009f60:	3b01      	subs	r3, #1
 8009f62:	9300      	str	r3, [sp, #0]
 8009f64:	e7da      	b.n	8009f1c <_dtoa_r+0xa4>
 8009f66:	aa10      	add	r2, sp, #64	; 0x40
 8009f68:	a911      	add	r1, sp, #68	; 0x44
 8009f6a:	4620      	mov	r0, r4
 8009f6c:	eeb0 0a48 	vmov.f32	s0, s16
 8009f70:	eef0 0a68 	vmov.f32	s1, s17
 8009f74:	f001 f994 	bl	800b2a0 <__d2b>
 8009f78:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009f7c:	4682      	mov	sl, r0
 8009f7e:	2d00      	cmp	r5, #0
 8009f80:	d07f      	beq.n	800a082 <_dtoa_r+0x20a>
 8009f82:	ee18 3a90 	vmov	r3, s17
 8009f86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f8a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009f8e:	ec51 0b18 	vmov	r0, r1, d8
 8009f92:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009f96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009f9a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009f9e:	4619      	mov	r1, r3
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	4b75      	ldr	r3, [pc, #468]	; (800a178 <_dtoa_r+0x300>)
 8009fa4:	f7f6 f980 	bl	80002a8 <__aeabi_dsub>
 8009fa8:	a367      	add	r3, pc, #412	; (adr r3, 800a148 <_dtoa_r+0x2d0>)
 8009faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fae:	f7f6 fb33 	bl	8000618 <__aeabi_dmul>
 8009fb2:	a367      	add	r3, pc, #412	; (adr r3, 800a150 <_dtoa_r+0x2d8>)
 8009fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb8:	f7f6 f978 	bl	80002ac <__adddf3>
 8009fbc:	4606      	mov	r6, r0
 8009fbe:	4628      	mov	r0, r5
 8009fc0:	460f      	mov	r7, r1
 8009fc2:	f7f6 fabf 	bl	8000544 <__aeabi_i2d>
 8009fc6:	a364      	add	r3, pc, #400	; (adr r3, 800a158 <_dtoa_r+0x2e0>)
 8009fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fcc:	f7f6 fb24 	bl	8000618 <__aeabi_dmul>
 8009fd0:	4602      	mov	r2, r0
 8009fd2:	460b      	mov	r3, r1
 8009fd4:	4630      	mov	r0, r6
 8009fd6:	4639      	mov	r1, r7
 8009fd8:	f7f6 f968 	bl	80002ac <__adddf3>
 8009fdc:	4606      	mov	r6, r0
 8009fde:	460f      	mov	r7, r1
 8009fe0:	f7f6 fdca 	bl	8000b78 <__aeabi_d2iz>
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	4683      	mov	fp, r0
 8009fe8:	2300      	movs	r3, #0
 8009fea:	4630      	mov	r0, r6
 8009fec:	4639      	mov	r1, r7
 8009fee:	f7f6 fd85 	bl	8000afc <__aeabi_dcmplt>
 8009ff2:	b148      	cbz	r0, 800a008 <_dtoa_r+0x190>
 8009ff4:	4658      	mov	r0, fp
 8009ff6:	f7f6 faa5 	bl	8000544 <__aeabi_i2d>
 8009ffa:	4632      	mov	r2, r6
 8009ffc:	463b      	mov	r3, r7
 8009ffe:	f7f6 fd73 	bl	8000ae8 <__aeabi_dcmpeq>
 800a002:	b908      	cbnz	r0, 800a008 <_dtoa_r+0x190>
 800a004:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a008:	f1bb 0f16 	cmp.w	fp, #22
 800a00c:	d857      	bhi.n	800a0be <_dtoa_r+0x246>
 800a00e:	4b5b      	ldr	r3, [pc, #364]	; (800a17c <_dtoa_r+0x304>)
 800a010:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a018:	ec51 0b18 	vmov	r0, r1, d8
 800a01c:	f7f6 fd6e 	bl	8000afc <__aeabi_dcmplt>
 800a020:	2800      	cmp	r0, #0
 800a022:	d04e      	beq.n	800a0c2 <_dtoa_r+0x24a>
 800a024:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a028:	2300      	movs	r3, #0
 800a02a:	930c      	str	r3, [sp, #48]	; 0x30
 800a02c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a02e:	1b5b      	subs	r3, r3, r5
 800a030:	1e5a      	subs	r2, r3, #1
 800a032:	bf45      	ittet	mi
 800a034:	f1c3 0301 	rsbmi	r3, r3, #1
 800a038:	9305      	strmi	r3, [sp, #20]
 800a03a:	2300      	movpl	r3, #0
 800a03c:	2300      	movmi	r3, #0
 800a03e:	9206      	str	r2, [sp, #24]
 800a040:	bf54      	ite	pl
 800a042:	9305      	strpl	r3, [sp, #20]
 800a044:	9306      	strmi	r3, [sp, #24]
 800a046:	f1bb 0f00 	cmp.w	fp, #0
 800a04a:	db3c      	blt.n	800a0c6 <_dtoa_r+0x24e>
 800a04c:	9b06      	ldr	r3, [sp, #24]
 800a04e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a052:	445b      	add	r3, fp
 800a054:	9306      	str	r3, [sp, #24]
 800a056:	2300      	movs	r3, #0
 800a058:	9308      	str	r3, [sp, #32]
 800a05a:	9b07      	ldr	r3, [sp, #28]
 800a05c:	2b09      	cmp	r3, #9
 800a05e:	d868      	bhi.n	800a132 <_dtoa_r+0x2ba>
 800a060:	2b05      	cmp	r3, #5
 800a062:	bfc4      	itt	gt
 800a064:	3b04      	subgt	r3, #4
 800a066:	9307      	strgt	r3, [sp, #28]
 800a068:	9b07      	ldr	r3, [sp, #28]
 800a06a:	f1a3 0302 	sub.w	r3, r3, #2
 800a06e:	bfcc      	ite	gt
 800a070:	2500      	movgt	r5, #0
 800a072:	2501      	movle	r5, #1
 800a074:	2b03      	cmp	r3, #3
 800a076:	f200 8085 	bhi.w	800a184 <_dtoa_r+0x30c>
 800a07a:	e8df f003 	tbb	[pc, r3]
 800a07e:	3b2e      	.short	0x3b2e
 800a080:	5839      	.short	0x5839
 800a082:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a086:	441d      	add	r5, r3
 800a088:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a08c:	2b20      	cmp	r3, #32
 800a08e:	bfc1      	itttt	gt
 800a090:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a094:	fa08 f803 	lslgt.w	r8, r8, r3
 800a098:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a09c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a0a0:	bfd6      	itet	le
 800a0a2:	f1c3 0320 	rsble	r3, r3, #32
 800a0a6:	ea48 0003 	orrgt.w	r0, r8, r3
 800a0aa:	fa06 f003 	lslle.w	r0, r6, r3
 800a0ae:	f7f6 fa39 	bl	8000524 <__aeabi_ui2d>
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a0b8:	3d01      	subs	r5, #1
 800a0ba:	920e      	str	r2, [sp, #56]	; 0x38
 800a0bc:	e76f      	b.n	8009f9e <_dtoa_r+0x126>
 800a0be:	2301      	movs	r3, #1
 800a0c0:	e7b3      	b.n	800a02a <_dtoa_r+0x1b2>
 800a0c2:	900c      	str	r0, [sp, #48]	; 0x30
 800a0c4:	e7b2      	b.n	800a02c <_dtoa_r+0x1b4>
 800a0c6:	9b05      	ldr	r3, [sp, #20]
 800a0c8:	eba3 030b 	sub.w	r3, r3, fp
 800a0cc:	9305      	str	r3, [sp, #20]
 800a0ce:	f1cb 0300 	rsb	r3, fp, #0
 800a0d2:	9308      	str	r3, [sp, #32]
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0d8:	e7bf      	b.n	800a05a <_dtoa_r+0x1e2>
 800a0da:	2300      	movs	r3, #0
 800a0dc:	9309      	str	r3, [sp, #36]	; 0x24
 800a0de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	dc52      	bgt.n	800a18a <_dtoa_r+0x312>
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	9301      	str	r3, [sp, #4]
 800a0e8:	9304      	str	r3, [sp, #16]
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	920a      	str	r2, [sp, #40]	; 0x28
 800a0ee:	e00b      	b.n	800a108 <_dtoa_r+0x290>
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	e7f3      	b.n	800a0dc <_dtoa_r+0x264>
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	9309      	str	r3, [sp, #36]	; 0x24
 800a0f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0fa:	445b      	add	r3, fp
 800a0fc:	9301      	str	r3, [sp, #4]
 800a0fe:	3301      	adds	r3, #1
 800a100:	2b01      	cmp	r3, #1
 800a102:	9304      	str	r3, [sp, #16]
 800a104:	bfb8      	it	lt
 800a106:	2301      	movlt	r3, #1
 800a108:	69e0      	ldr	r0, [r4, #28]
 800a10a:	2100      	movs	r1, #0
 800a10c:	2204      	movs	r2, #4
 800a10e:	f102 0614 	add.w	r6, r2, #20
 800a112:	429e      	cmp	r6, r3
 800a114:	d93d      	bls.n	800a192 <_dtoa_r+0x31a>
 800a116:	6041      	str	r1, [r0, #4]
 800a118:	4620      	mov	r0, r4
 800a11a:	f000 fd9f 	bl	800ac5c <_Balloc>
 800a11e:	9000      	str	r0, [sp, #0]
 800a120:	2800      	cmp	r0, #0
 800a122:	d139      	bne.n	800a198 <_dtoa_r+0x320>
 800a124:	4b16      	ldr	r3, [pc, #88]	; (800a180 <_dtoa_r+0x308>)
 800a126:	4602      	mov	r2, r0
 800a128:	f240 11af 	movw	r1, #431	; 0x1af
 800a12c:	e6bd      	b.n	8009eaa <_dtoa_r+0x32>
 800a12e:	2301      	movs	r3, #1
 800a130:	e7e1      	b.n	800a0f6 <_dtoa_r+0x27e>
 800a132:	2501      	movs	r5, #1
 800a134:	2300      	movs	r3, #0
 800a136:	9307      	str	r3, [sp, #28]
 800a138:	9509      	str	r5, [sp, #36]	; 0x24
 800a13a:	f04f 33ff 	mov.w	r3, #4294967295
 800a13e:	9301      	str	r3, [sp, #4]
 800a140:	9304      	str	r3, [sp, #16]
 800a142:	2200      	movs	r2, #0
 800a144:	2312      	movs	r3, #18
 800a146:	e7d1      	b.n	800a0ec <_dtoa_r+0x274>
 800a148:	636f4361 	.word	0x636f4361
 800a14c:	3fd287a7 	.word	0x3fd287a7
 800a150:	8b60c8b3 	.word	0x8b60c8b3
 800a154:	3fc68a28 	.word	0x3fc68a28
 800a158:	509f79fb 	.word	0x509f79fb
 800a15c:	3fd34413 	.word	0x3fd34413
 800a160:	0800bef5 	.word	0x0800bef5
 800a164:	0800bf0c 	.word	0x0800bf0c
 800a168:	7ff00000 	.word	0x7ff00000
 800a16c:	0800bef1 	.word	0x0800bef1
 800a170:	0800bee8 	.word	0x0800bee8
 800a174:	0800bec5 	.word	0x0800bec5
 800a178:	3ff80000 	.word	0x3ff80000
 800a17c:	0800bff8 	.word	0x0800bff8
 800a180:	0800bf64 	.word	0x0800bf64
 800a184:	2301      	movs	r3, #1
 800a186:	9309      	str	r3, [sp, #36]	; 0x24
 800a188:	e7d7      	b.n	800a13a <_dtoa_r+0x2c2>
 800a18a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a18c:	9301      	str	r3, [sp, #4]
 800a18e:	9304      	str	r3, [sp, #16]
 800a190:	e7ba      	b.n	800a108 <_dtoa_r+0x290>
 800a192:	3101      	adds	r1, #1
 800a194:	0052      	lsls	r2, r2, #1
 800a196:	e7ba      	b.n	800a10e <_dtoa_r+0x296>
 800a198:	69e3      	ldr	r3, [r4, #28]
 800a19a:	9a00      	ldr	r2, [sp, #0]
 800a19c:	601a      	str	r2, [r3, #0]
 800a19e:	9b04      	ldr	r3, [sp, #16]
 800a1a0:	2b0e      	cmp	r3, #14
 800a1a2:	f200 80a8 	bhi.w	800a2f6 <_dtoa_r+0x47e>
 800a1a6:	2d00      	cmp	r5, #0
 800a1a8:	f000 80a5 	beq.w	800a2f6 <_dtoa_r+0x47e>
 800a1ac:	f1bb 0f00 	cmp.w	fp, #0
 800a1b0:	dd38      	ble.n	800a224 <_dtoa_r+0x3ac>
 800a1b2:	4bc0      	ldr	r3, [pc, #768]	; (800a4b4 <_dtoa_r+0x63c>)
 800a1b4:	f00b 020f 	and.w	r2, fp, #15
 800a1b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a1bc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a1c0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a1c4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a1c8:	d019      	beq.n	800a1fe <_dtoa_r+0x386>
 800a1ca:	4bbb      	ldr	r3, [pc, #748]	; (800a4b8 <_dtoa_r+0x640>)
 800a1cc:	ec51 0b18 	vmov	r0, r1, d8
 800a1d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a1d4:	f7f6 fb4a 	bl	800086c <__aeabi_ddiv>
 800a1d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1dc:	f008 080f 	and.w	r8, r8, #15
 800a1e0:	2503      	movs	r5, #3
 800a1e2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a4b8 <_dtoa_r+0x640>
 800a1e6:	f1b8 0f00 	cmp.w	r8, #0
 800a1ea:	d10a      	bne.n	800a202 <_dtoa_r+0x38a>
 800a1ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1f0:	4632      	mov	r2, r6
 800a1f2:	463b      	mov	r3, r7
 800a1f4:	f7f6 fb3a 	bl	800086c <__aeabi_ddiv>
 800a1f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1fc:	e02b      	b.n	800a256 <_dtoa_r+0x3de>
 800a1fe:	2502      	movs	r5, #2
 800a200:	e7ef      	b.n	800a1e2 <_dtoa_r+0x36a>
 800a202:	f018 0f01 	tst.w	r8, #1
 800a206:	d008      	beq.n	800a21a <_dtoa_r+0x3a2>
 800a208:	4630      	mov	r0, r6
 800a20a:	4639      	mov	r1, r7
 800a20c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a210:	f7f6 fa02 	bl	8000618 <__aeabi_dmul>
 800a214:	3501      	adds	r5, #1
 800a216:	4606      	mov	r6, r0
 800a218:	460f      	mov	r7, r1
 800a21a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a21e:	f109 0908 	add.w	r9, r9, #8
 800a222:	e7e0      	b.n	800a1e6 <_dtoa_r+0x36e>
 800a224:	f000 809f 	beq.w	800a366 <_dtoa_r+0x4ee>
 800a228:	f1cb 0600 	rsb	r6, fp, #0
 800a22c:	4ba1      	ldr	r3, [pc, #644]	; (800a4b4 <_dtoa_r+0x63c>)
 800a22e:	4fa2      	ldr	r7, [pc, #648]	; (800a4b8 <_dtoa_r+0x640>)
 800a230:	f006 020f 	and.w	r2, r6, #15
 800a234:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a23c:	ec51 0b18 	vmov	r0, r1, d8
 800a240:	f7f6 f9ea 	bl	8000618 <__aeabi_dmul>
 800a244:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a248:	1136      	asrs	r6, r6, #4
 800a24a:	2300      	movs	r3, #0
 800a24c:	2502      	movs	r5, #2
 800a24e:	2e00      	cmp	r6, #0
 800a250:	d17e      	bne.n	800a350 <_dtoa_r+0x4d8>
 800a252:	2b00      	cmp	r3, #0
 800a254:	d1d0      	bne.n	800a1f8 <_dtoa_r+0x380>
 800a256:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a258:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	f000 8084 	beq.w	800a36a <_dtoa_r+0x4f2>
 800a262:	4b96      	ldr	r3, [pc, #600]	; (800a4bc <_dtoa_r+0x644>)
 800a264:	2200      	movs	r2, #0
 800a266:	4640      	mov	r0, r8
 800a268:	4649      	mov	r1, r9
 800a26a:	f7f6 fc47 	bl	8000afc <__aeabi_dcmplt>
 800a26e:	2800      	cmp	r0, #0
 800a270:	d07b      	beq.n	800a36a <_dtoa_r+0x4f2>
 800a272:	9b04      	ldr	r3, [sp, #16]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d078      	beq.n	800a36a <_dtoa_r+0x4f2>
 800a278:	9b01      	ldr	r3, [sp, #4]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	dd39      	ble.n	800a2f2 <_dtoa_r+0x47a>
 800a27e:	4b90      	ldr	r3, [pc, #576]	; (800a4c0 <_dtoa_r+0x648>)
 800a280:	2200      	movs	r2, #0
 800a282:	4640      	mov	r0, r8
 800a284:	4649      	mov	r1, r9
 800a286:	f7f6 f9c7 	bl	8000618 <__aeabi_dmul>
 800a28a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a28e:	9e01      	ldr	r6, [sp, #4]
 800a290:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a294:	3501      	adds	r5, #1
 800a296:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a29a:	4628      	mov	r0, r5
 800a29c:	f7f6 f952 	bl	8000544 <__aeabi_i2d>
 800a2a0:	4642      	mov	r2, r8
 800a2a2:	464b      	mov	r3, r9
 800a2a4:	f7f6 f9b8 	bl	8000618 <__aeabi_dmul>
 800a2a8:	4b86      	ldr	r3, [pc, #536]	; (800a4c4 <_dtoa_r+0x64c>)
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	f7f5 fffe 	bl	80002ac <__adddf3>
 800a2b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a2b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2b8:	9303      	str	r3, [sp, #12]
 800a2ba:	2e00      	cmp	r6, #0
 800a2bc:	d158      	bne.n	800a370 <_dtoa_r+0x4f8>
 800a2be:	4b82      	ldr	r3, [pc, #520]	; (800a4c8 <_dtoa_r+0x650>)
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	4640      	mov	r0, r8
 800a2c4:	4649      	mov	r1, r9
 800a2c6:	f7f5 ffef 	bl	80002a8 <__aeabi_dsub>
 800a2ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a2ce:	4680      	mov	r8, r0
 800a2d0:	4689      	mov	r9, r1
 800a2d2:	f7f6 fc31 	bl	8000b38 <__aeabi_dcmpgt>
 800a2d6:	2800      	cmp	r0, #0
 800a2d8:	f040 8296 	bne.w	800a808 <_dtoa_r+0x990>
 800a2dc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a2e0:	4640      	mov	r0, r8
 800a2e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a2e6:	4649      	mov	r1, r9
 800a2e8:	f7f6 fc08 	bl	8000afc <__aeabi_dcmplt>
 800a2ec:	2800      	cmp	r0, #0
 800a2ee:	f040 8289 	bne.w	800a804 <_dtoa_r+0x98c>
 800a2f2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a2f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	f2c0 814e 	blt.w	800a59a <_dtoa_r+0x722>
 800a2fe:	f1bb 0f0e 	cmp.w	fp, #14
 800a302:	f300 814a 	bgt.w	800a59a <_dtoa_r+0x722>
 800a306:	4b6b      	ldr	r3, [pc, #428]	; (800a4b4 <_dtoa_r+0x63c>)
 800a308:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a30c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a310:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a312:	2b00      	cmp	r3, #0
 800a314:	f280 80dc 	bge.w	800a4d0 <_dtoa_r+0x658>
 800a318:	9b04      	ldr	r3, [sp, #16]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	f300 80d8 	bgt.w	800a4d0 <_dtoa_r+0x658>
 800a320:	f040 826f 	bne.w	800a802 <_dtoa_r+0x98a>
 800a324:	4b68      	ldr	r3, [pc, #416]	; (800a4c8 <_dtoa_r+0x650>)
 800a326:	2200      	movs	r2, #0
 800a328:	4640      	mov	r0, r8
 800a32a:	4649      	mov	r1, r9
 800a32c:	f7f6 f974 	bl	8000618 <__aeabi_dmul>
 800a330:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a334:	f7f6 fbf6 	bl	8000b24 <__aeabi_dcmpge>
 800a338:	9e04      	ldr	r6, [sp, #16]
 800a33a:	4637      	mov	r7, r6
 800a33c:	2800      	cmp	r0, #0
 800a33e:	f040 8245 	bne.w	800a7cc <_dtoa_r+0x954>
 800a342:	9d00      	ldr	r5, [sp, #0]
 800a344:	2331      	movs	r3, #49	; 0x31
 800a346:	f805 3b01 	strb.w	r3, [r5], #1
 800a34a:	f10b 0b01 	add.w	fp, fp, #1
 800a34e:	e241      	b.n	800a7d4 <_dtoa_r+0x95c>
 800a350:	07f2      	lsls	r2, r6, #31
 800a352:	d505      	bpl.n	800a360 <_dtoa_r+0x4e8>
 800a354:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a358:	f7f6 f95e 	bl	8000618 <__aeabi_dmul>
 800a35c:	3501      	adds	r5, #1
 800a35e:	2301      	movs	r3, #1
 800a360:	1076      	asrs	r6, r6, #1
 800a362:	3708      	adds	r7, #8
 800a364:	e773      	b.n	800a24e <_dtoa_r+0x3d6>
 800a366:	2502      	movs	r5, #2
 800a368:	e775      	b.n	800a256 <_dtoa_r+0x3de>
 800a36a:	9e04      	ldr	r6, [sp, #16]
 800a36c:	465f      	mov	r7, fp
 800a36e:	e792      	b.n	800a296 <_dtoa_r+0x41e>
 800a370:	9900      	ldr	r1, [sp, #0]
 800a372:	4b50      	ldr	r3, [pc, #320]	; (800a4b4 <_dtoa_r+0x63c>)
 800a374:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a378:	4431      	add	r1, r6
 800a37a:	9102      	str	r1, [sp, #8]
 800a37c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a37e:	eeb0 9a47 	vmov.f32	s18, s14
 800a382:	eef0 9a67 	vmov.f32	s19, s15
 800a386:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a38a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a38e:	2900      	cmp	r1, #0
 800a390:	d044      	beq.n	800a41c <_dtoa_r+0x5a4>
 800a392:	494e      	ldr	r1, [pc, #312]	; (800a4cc <_dtoa_r+0x654>)
 800a394:	2000      	movs	r0, #0
 800a396:	f7f6 fa69 	bl	800086c <__aeabi_ddiv>
 800a39a:	ec53 2b19 	vmov	r2, r3, d9
 800a39e:	f7f5 ff83 	bl	80002a8 <__aeabi_dsub>
 800a3a2:	9d00      	ldr	r5, [sp, #0]
 800a3a4:	ec41 0b19 	vmov	d9, r0, r1
 800a3a8:	4649      	mov	r1, r9
 800a3aa:	4640      	mov	r0, r8
 800a3ac:	f7f6 fbe4 	bl	8000b78 <__aeabi_d2iz>
 800a3b0:	4606      	mov	r6, r0
 800a3b2:	f7f6 f8c7 	bl	8000544 <__aeabi_i2d>
 800a3b6:	4602      	mov	r2, r0
 800a3b8:	460b      	mov	r3, r1
 800a3ba:	4640      	mov	r0, r8
 800a3bc:	4649      	mov	r1, r9
 800a3be:	f7f5 ff73 	bl	80002a8 <__aeabi_dsub>
 800a3c2:	3630      	adds	r6, #48	; 0x30
 800a3c4:	f805 6b01 	strb.w	r6, [r5], #1
 800a3c8:	ec53 2b19 	vmov	r2, r3, d9
 800a3cc:	4680      	mov	r8, r0
 800a3ce:	4689      	mov	r9, r1
 800a3d0:	f7f6 fb94 	bl	8000afc <__aeabi_dcmplt>
 800a3d4:	2800      	cmp	r0, #0
 800a3d6:	d164      	bne.n	800a4a2 <_dtoa_r+0x62a>
 800a3d8:	4642      	mov	r2, r8
 800a3da:	464b      	mov	r3, r9
 800a3dc:	4937      	ldr	r1, [pc, #220]	; (800a4bc <_dtoa_r+0x644>)
 800a3de:	2000      	movs	r0, #0
 800a3e0:	f7f5 ff62 	bl	80002a8 <__aeabi_dsub>
 800a3e4:	ec53 2b19 	vmov	r2, r3, d9
 800a3e8:	f7f6 fb88 	bl	8000afc <__aeabi_dcmplt>
 800a3ec:	2800      	cmp	r0, #0
 800a3ee:	f040 80b6 	bne.w	800a55e <_dtoa_r+0x6e6>
 800a3f2:	9b02      	ldr	r3, [sp, #8]
 800a3f4:	429d      	cmp	r5, r3
 800a3f6:	f43f af7c 	beq.w	800a2f2 <_dtoa_r+0x47a>
 800a3fa:	4b31      	ldr	r3, [pc, #196]	; (800a4c0 <_dtoa_r+0x648>)
 800a3fc:	ec51 0b19 	vmov	r0, r1, d9
 800a400:	2200      	movs	r2, #0
 800a402:	f7f6 f909 	bl	8000618 <__aeabi_dmul>
 800a406:	4b2e      	ldr	r3, [pc, #184]	; (800a4c0 <_dtoa_r+0x648>)
 800a408:	ec41 0b19 	vmov	d9, r0, r1
 800a40c:	2200      	movs	r2, #0
 800a40e:	4640      	mov	r0, r8
 800a410:	4649      	mov	r1, r9
 800a412:	f7f6 f901 	bl	8000618 <__aeabi_dmul>
 800a416:	4680      	mov	r8, r0
 800a418:	4689      	mov	r9, r1
 800a41a:	e7c5      	b.n	800a3a8 <_dtoa_r+0x530>
 800a41c:	ec51 0b17 	vmov	r0, r1, d7
 800a420:	f7f6 f8fa 	bl	8000618 <__aeabi_dmul>
 800a424:	9b02      	ldr	r3, [sp, #8]
 800a426:	9d00      	ldr	r5, [sp, #0]
 800a428:	930f      	str	r3, [sp, #60]	; 0x3c
 800a42a:	ec41 0b19 	vmov	d9, r0, r1
 800a42e:	4649      	mov	r1, r9
 800a430:	4640      	mov	r0, r8
 800a432:	f7f6 fba1 	bl	8000b78 <__aeabi_d2iz>
 800a436:	4606      	mov	r6, r0
 800a438:	f7f6 f884 	bl	8000544 <__aeabi_i2d>
 800a43c:	3630      	adds	r6, #48	; 0x30
 800a43e:	4602      	mov	r2, r0
 800a440:	460b      	mov	r3, r1
 800a442:	4640      	mov	r0, r8
 800a444:	4649      	mov	r1, r9
 800a446:	f7f5 ff2f 	bl	80002a8 <__aeabi_dsub>
 800a44a:	f805 6b01 	strb.w	r6, [r5], #1
 800a44e:	9b02      	ldr	r3, [sp, #8]
 800a450:	429d      	cmp	r5, r3
 800a452:	4680      	mov	r8, r0
 800a454:	4689      	mov	r9, r1
 800a456:	f04f 0200 	mov.w	r2, #0
 800a45a:	d124      	bne.n	800a4a6 <_dtoa_r+0x62e>
 800a45c:	4b1b      	ldr	r3, [pc, #108]	; (800a4cc <_dtoa_r+0x654>)
 800a45e:	ec51 0b19 	vmov	r0, r1, d9
 800a462:	f7f5 ff23 	bl	80002ac <__adddf3>
 800a466:	4602      	mov	r2, r0
 800a468:	460b      	mov	r3, r1
 800a46a:	4640      	mov	r0, r8
 800a46c:	4649      	mov	r1, r9
 800a46e:	f7f6 fb63 	bl	8000b38 <__aeabi_dcmpgt>
 800a472:	2800      	cmp	r0, #0
 800a474:	d173      	bne.n	800a55e <_dtoa_r+0x6e6>
 800a476:	ec53 2b19 	vmov	r2, r3, d9
 800a47a:	4914      	ldr	r1, [pc, #80]	; (800a4cc <_dtoa_r+0x654>)
 800a47c:	2000      	movs	r0, #0
 800a47e:	f7f5 ff13 	bl	80002a8 <__aeabi_dsub>
 800a482:	4602      	mov	r2, r0
 800a484:	460b      	mov	r3, r1
 800a486:	4640      	mov	r0, r8
 800a488:	4649      	mov	r1, r9
 800a48a:	f7f6 fb37 	bl	8000afc <__aeabi_dcmplt>
 800a48e:	2800      	cmp	r0, #0
 800a490:	f43f af2f 	beq.w	800a2f2 <_dtoa_r+0x47a>
 800a494:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a496:	1e6b      	subs	r3, r5, #1
 800a498:	930f      	str	r3, [sp, #60]	; 0x3c
 800a49a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a49e:	2b30      	cmp	r3, #48	; 0x30
 800a4a0:	d0f8      	beq.n	800a494 <_dtoa_r+0x61c>
 800a4a2:	46bb      	mov	fp, r7
 800a4a4:	e04a      	b.n	800a53c <_dtoa_r+0x6c4>
 800a4a6:	4b06      	ldr	r3, [pc, #24]	; (800a4c0 <_dtoa_r+0x648>)
 800a4a8:	f7f6 f8b6 	bl	8000618 <__aeabi_dmul>
 800a4ac:	4680      	mov	r8, r0
 800a4ae:	4689      	mov	r9, r1
 800a4b0:	e7bd      	b.n	800a42e <_dtoa_r+0x5b6>
 800a4b2:	bf00      	nop
 800a4b4:	0800bff8 	.word	0x0800bff8
 800a4b8:	0800bfd0 	.word	0x0800bfd0
 800a4bc:	3ff00000 	.word	0x3ff00000
 800a4c0:	40240000 	.word	0x40240000
 800a4c4:	401c0000 	.word	0x401c0000
 800a4c8:	40140000 	.word	0x40140000
 800a4cc:	3fe00000 	.word	0x3fe00000
 800a4d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a4d4:	9d00      	ldr	r5, [sp, #0]
 800a4d6:	4642      	mov	r2, r8
 800a4d8:	464b      	mov	r3, r9
 800a4da:	4630      	mov	r0, r6
 800a4dc:	4639      	mov	r1, r7
 800a4de:	f7f6 f9c5 	bl	800086c <__aeabi_ddiv>
 800a4e2:	f7f6 fb49 	bl	8000b78 <__aeabi_d2iz>
 800a4e6:	9001      	str	r0, [sp, #4]
 800a4e8:	f7f6 f82c 	bl	8000544 <__aeabi_i2d>
 800a4ec:	4642      	mov	r2, r8
 800a4ee:	464b      	mov	r3, r9
 800a4f0:	f7f6 f892 	bl	8000618 <__aeabi_dmul>
 800a4f4:	4602      	mov	r2, r0
 800a4f6:	460b      	mov	r3, r1
 800a4f8:	4630      	mov	r0, r6
 800a4fa:	4639      	mov	r1, r7
 800a4fc:	f7f5 fed4 	bl	80002a8 <__aeabi_dsub>
 800a500:	9e01      	ldr	r6, [sp, #4]
 800a502:	9f04      	ldr	r7, [sp, #16]
 800a504:	3630      	adds	r6, #48	; 0x30
 800a506:	f805 6b01 	strb.w	r6, [r5], #1
 800a50a:	9e00      	ldr	r6, [sp, #0]
 800a50c:	1bae      	subs	r6, r5, r6
 800a50e:	42b7      	cmp	r7, r6
 800a510:	4602      	mov	r2, r0
 800a512:	460b      	mov	r3, r1
 800a514:	d134      	bne.n	800a580 <_dtoa_r+0x708>
 800a516:	f7f5 fec9 	bl	80002ac <__adddf3>
 800a51a:	4642      	mov	r2, r8
 800a51c:	464b      	mov	r3, r9
 800a51e:	4606      	mov	r6, r0
 800a520:	460f      	mov	r7, r1
 800a522:	f7f6 fb09 	bl	8000b38 <__aeabi_dcmpgt>
 800a526:	b9c8      	cbnz	r0, 800a55c <_dtoa_r+0x6e4>
 800a528:	4642      	mov	r2, r8
 800a52a:	464b      	mov	r3, r9
 800a52c:	4630      	mov	r0, r6
 800a52e:	4639      	mov	r1, r7
 800a530:	f7f6 fada 	bl	8000ae8 <__aeabi_dcmpeq>
 800a534:	b110      	cbz	r0, 800a53c <_dtoa_r+0x6c4>
 800a536:	9b01      	ldr	r3, [sp, #4]
 800a538:	07db      	lsls	r3, r3, #31
 800a53a:	d40f      	bmi.n	800a55c <_dtoa_r+0x6e4>
 800a53c:	4651      	mov	r1, sl
 800a53e:	4620      	mov	r0, r4
 800a540:	f000 fbcc 	bl	800acdc <_Bfree>
 800a544:	2300      	movs	r3, #0
 800a546:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a548:	702b      	strb	r3, [r5, #0]
 800a54a:	f10b 0301 	add.w	r3, fp, #1
 800a54e:	6013      	str	r3, [r2, #0]
 800a550:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a552:	2b00      	cmp	r3, #0
 800a554:	f43f ace2 	beq.w	8009f1c <_dtoa_r+0xa4>
 800a558:	601d      	str	r5, [r3, #0]
 800a55a:	e4df      	b.n	8009f1c <_dtoa_r+0xa4>
 800a55c:	465f      	mov	r7, fp
 800a55e:	462b      	mov	r3, r5
 800a560:	461d      	mov	r5, r3
 800a562:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a566:	2a39      	cmp	r2, #57	; 0x39
 800a568:	d106      	bne.n	800a578 <_dtoa_r+0x700>
 800a56a:	9a00      	ldr	r2, [sp, #0]
 800a56c:	429a      	cmp	r2, r3
 800a56e:	d1f7      	bne.n	800a560 <_dtoa_r+0x6e8>
 800a570:	9900      	ldr	r1, [sp, #0]
 800a572:	2230      	movs	r2, #48	; 0x30
 800a574:	3701      	adds	r7, #1
 800a576:	700a      	strb	r2, [r1, #0]
 800a578:	781a      	ldrb	r2, [r3, #0]
 800a57a:	3201      	adds	r2, #1
 800a57c:	701a      	strb	r2, [r3, #0]
 800a57e:	e790      	b.n	800a4a2 <_dtoa_r+0x62a>
 800a580:	4ba3      	ldr	r3, [pc, #652]	; (800a810 <_dtoa_r+0x998>)
 800a582:	2200      	movs	r2, #0
 800a584:	f7f6 f848 	bl	8000618 <__aeabi_dmul>
 800a588:	2200      	movs	r2, #0
 800a58a:	2300      	movs	r3, #0
 800a58c:	4606      	mov	r6, r0
 800a58e:	460f      	mov	r7, r1
 800a590:	f7f6 faaa 	bl	8000ae8 <__aeabi_dcmpeq>
 800a594:	2800      	cmp	r0, #0
 800a596:	d09e      	beq.n	800a4d6 <_dtoa_r+0x65e>
 800a598:	e7d0      	b.n	800a53c <_dtoa_r+0x6c4>
 800a59a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a59c:	2a00      	cmp	r2, #0
 800a59e:	f000 80ca 	beq.w	800a736 <_dtoa_r+0x8be>
 800a5a2:	9a07      	ldr	r2, [sp, #28]
 800a5a4:	2a01      	cmp	r2, #1
 800a5a6:	f300 80ad 	bgt.w	800a704 <_dtoa_r+0x88c>
 800a5aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a5ac:	2a00      	cmp	r2, #0
 800a5ae:	f000 80a5 	beq.w	800a6fc <_dtoa_r+0x884>
 800a5b2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a5b6:	9e08      	ldr	r6, [sp, #32]
 800a5b8:	9d05      	ldr	r5, [sp, #20]
 800a5ba:	9a05      	ldr	r2, [sp, #20]
 800a5bc:	441a      	add	r2, r3
 800a5be:	9205      	str	r2, [sp, #20]
 800a5c0:	9a06      	ldr	r2, [sp, #24]
 800a5c2:	2101      	movs	r1, #1
 800a5c4:	441a      	add	r2, r3
 800a5c6:	4620      	mov	r0, r4
 800a5c8:	9206      	str	r2, [sp, #24]
 800a5ca:	f000 fc3d 	bl	800ae48 <__i2b>
 800a5ce:	4607      	mov	r7, r0
 800a5d0:	b165      	cbz	r5, 800a5ec <_dtoa_r+0x774>
 800a5d2:	9b06      	ldr	r3, [sp, #24]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	dd09      	ble.n	800a5ec <_dtoa_r+0x774>
 800a5d8:	42ab      	cmp	r3, r5
 800a5da:	9a05      	ldr	r2, [sp, #20]
 800a5dc:	bfa8      	it	ge
 800a5de:	462b      	movge	r3, r5
 800a5e0:	1ad2      	subs	r2, r2, r3
 800a5e2:	9205      	str	r2, [sp, #20]
 800a5e4:	9a06      	ldr	r2, [sp, #24]
 800a5e6:	1aed      	subs	r5, r5, r3
 800a5e8:	1ad3      	subs	r3, r2, r3
 800a5ea:	9306      	str	r3, [sp, #24]
 800a5ec:	9b08      	ldr	r3, [sp, #32]
 800a5ee:	b1f3      	cbz	r3, 800a62e <_dtoa_r+0x7b6>
 800a5f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	f000 80a3 	beq.w	800a73e <_dtoa_r+0x8c6>
 800a5f8:	2e00      	cmp	r6, #0
 800a5fa:	dd10      	ble.n	800a61e <_dtoa_r+0x7a6>
 800a5fc:	4639      	mov	r1, r7
 800a5fe:	4632      	mov	r2, r6
 800a600:	4620      	mov	r0, r4
 800a602:	f000 fce1 	bl	800afc8 <__pow5mult>
 800a606:	4652      	mov	r2, sl
 800a608:	4601      	mov	r1, r0
 800a60a:	4607      	mov	r7, r0
 800a60c:	4620      	mov	r0, r4
 800a60e:	f000 fc31 	bl	800ae74 <__multiply>
 800a612:	4651      	mov	r1, sl
 800a614:	4680      	mov	r8, r0
 800a616:	4620      	mov	r0, r4
 800a618:	f000 fb60 	bl	800acdc <_Bfree>
 800a61c:	46c2      	mov	sl, r8
 800a61e:	9b08      	ldr	r3, [sp, #32]
 800a620:	1b9a      	subs	r2, r3, r6
 800a622:	d004      	beq.n	800a62e <_dtoa_r+0x7b6>
 800a624:	4651      	mov	r1, sl
 800a626:	4620      	mov	r0, r4
 800a628:	f000 fcce 	bl	800afc8 <__pow5mult>
 800a62c:	4682      	mov	sl, r0
 800a62e:	2101      	movs	r1, #1
 800a630:	4620      	mov	r0, r4
 800a632:	f000 fc09 	bl	800ae48 <__i2b>
 800a636:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a638:	2b00      	cmp	r3, #0
 800a63a:	4606      	mov	r6, r0
 800a63c:	f340 8081 	ble.w	800a742 <_dtoa_r+0x8ca>
 800a640:	461a      	mov	r2, r3
 800a642:	4601      	mov	r1, r0
 800a644:	4620      	mov	r0, r4
 800a646:	f000 fcbf 	bl	800afc8 <__pow5mult>
 800a64a:	9b07      	ldr	r3, [sp, #28]
 800a64c:	2b01      	cmp	r3, #1
 800a64e:	4606      	mov	r6, r0
 800a650:	dd7a      	ble.n	800a748 <_dtoa_r+0x8d0>
 800a652:	f04f 0800 	mov.w	r8, #0
 800a656:	6933      	ldr	r3, [r6, #16]
 800a658:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a65c:	6918      	ldr	r0, [r3, #16]
 800a65e:	f000 fba5 	bl	800adac <__hi0bits>
 800a662:	f1c0 0020 	rsb	r0, r0, #32
 800a666:	9b06      	ldr	r3, [sp, #24]
 800a668:	4418      	add	r0, r3
 800a66a:	f010 001f 	ands.w	r0, r0, #31
 800a66e:	f000 8094 	beq.w	800a79a <_dtoa_r+0x922>
 800a672:	f1c0 0320 	rsb	r3, r0, #32
 800a676:	2b04      	cmp	r3, #4
 800a678:	f340 8085 	ble.w	800a786 <_dtoa_r+0x90e>
 800a67c:	9b05      	ldr	r3, [sp, #20]
 800a67e:	f1c0 001c 	rsb	r0, r0, #28
 800a682:	4403      	add	r3, r0
 800a684:	9305      	str	r3, [sp, #20]
 800a686:	9b06      	ldr	r3, [sp, #24]
 800a688:	4403      	add	r3, r0
 800a68a:	4405      	add	r5, r0
 800a68c:	9306      	str	r3, [sp, #24]
 800a68e:	9b05      	ldr	r3, [sp, #20]
 800a690:	2b00      	cmp	r3, #0
 800a692:	dd05      	ble.n	800a6a0 <_dtoa_r+0x828>
 800a694:	4651      	mov	r1, sl
 800a696:	461a      	mov	r2, r3
 800a698:	4620      	mov	r0, r4
 800a69a:	f000 fcef 	bl	800b07c <__lshift>
 800a69e:	4682      	mov	sl, r0
 800a6a0:	9b06      	ldr	r3, [sp, #24]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	dd05      	ble.n	800a6b2 <_dtoa_r+0x83a>
 800a6a6:	4631      	mov	r1, r6
 800a6a8:	461a      	mov	r2, r3
 800a6aa:	4620      	mov	r0, r4
 800a6ac:	f000 fce6 	bl	800b07c <__lshift>
 800a6b0:	4606      	mov	r6, r0
 800a6b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d072      	beq.n	800a79e <_dtoa_r+0x926>
 800a6b8:	4631      	mov	r1, r6
 800a6ba:	4650      	mov	r0, sl
 800a6bc:	f000 fd4a 	bl	800b154 <__mcmp>
 800a6c0:	2800      	cmp	r0, #0
 800a6c2:	da6c      	bge.n	800a79e <_dtoa_r+0x926>
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	4651      	mov	r1, sl
 800a6c8:	220a      	movs	r2, #10
 800a6ca:	4620      	mov	r0, r4
 800a6cc:	f000 fb28 	bl	800ad20 <__multadd>
 800a6d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a6d6:	4682      	mov	sl, r0
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	f000 81b0 	beq.w	800aa3e <_dtoa_r+0xbc6>
 800a6de:	2300      	movs	r3, #0
 800a6e0:	4639      	mov	r1, r7
 800a6e2:	220a      	movs	r2, #10
 800a6e4:	4620      	mov	r0, r4
 800a6e6:	f000 fb1b 	bl	800ad20 <__multadd>
 800a6ea:	9b01      	ldr	r3, [sp, #4]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	4607      	mov	r7, r0
 800a6f0:	f300 8096 	bgt.w	800a820 <_dtoa_r+0x9a8>
 800a6f4:	9b07      	ldr	r3, [sp, #28]
 800a6f6:	2b02      	cmp	r3, #2
 800a6f8:	dc59      	bgt.n	800a7ae <_dtoa_r+0x936>
 800a6fa:	e091      	b.n	800a820 <_dtoa_r+0x9a8>
 800a6fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a6fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a702:	e758      	b.n	800a5b6 <_dtoa_r+0x73e>
 800a704:	9b04      	ldr	r3, [sp, #16]
 800a706:	1e5e      	subs	r6, r3, #1
 800a708:	9b08      	ldr	r3, [sp, #32]
 800a70a:	42b3      	cmp	r3, r6
 800a70c:	bfbf      	itttt	lt
 800a70e:	9b08      	ldrlt	r3, [sp, #32]
 800a710:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a712:	9608      	strlt	r6, [sp, #32]
 800a714:	1af3      	sublt	r3, r6, r3
 800a716:	bfb4      	ite	lt
 800a718:	18d2      	addlt	r2, r2, r3
 800a71a:	1b9e      	subge	r6, r3, r6
 800a71c:	9b04      	ldr	r3, [sp, #16]
 800a71e:	bfbc      	itt	lt
 800a720:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a722:	2600      	movlt	r6, #0
 800a724:	2b00      	cmp	r3, #0
 800a726:	bfb7      	itett	lt
 800a728:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a72c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a730:	1a9d      	sublt	r5, r3, r2
 800a732:	2300      	movlt	r3, #0
 800a734:	e741      	b.n	800a5ba <_dtoa_r+0x742>
 800a736:	9e08      	ldr	r6, [sp, #32]
 800a738:	9d05      	ldr	r5, [sp, #20]
 800a73a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a73c:	e748      	b.n	800a5d0 <_dtoa_r+0x758>
 800a73e:	9a08      	ldr	r2, [sp, #32]
 800a740:	e770      	b.n	800a624 <_dtoa_r+0x7ac>
 800a742:	9b07      	ldr	r3, [sp, #28]
 800a744:	2b01      	cmp	r3, #1
 800a746:	dc19      	bgt.n	800a77c <_dtoa_r+0x904>
 800a748:	9b02      	ldr	r3, [sp, #8]
 800a74a:	b9bb      	cbnz	r3, 800a77c <_dtoa_r+0x904>
 800a74c:	9b03      	ldr	r3, [sp, #12]
 800a74e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a752:	b99b      	cbnz	r3, 800a77c <_dtoa_r+0x904>
 800a754:	9b03      	ldr	r3, [sp, #12]
 800a756:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a75a:	0d1b      	lsrs	r3, r3, #20
 800a75c:	051b      	lsls	r3, r3, #20
 800a75e:	b183      	cbz	r3, 800a782 <_dtoa_r+0x90a>
 800a760:	9b05      	ldr	r3, [sp, #20]
 800a762:	3301      	adds	r3, #1
 800a764:	9305      	str	r3, [sp, #20]
 800a766:	9b06      	ldr	r3, [sp, #24]
 800a768:	3301      	adds	r3, #1
 800a76a:	9306      	str	r3, [sp, #24]
 800a76c:	f04f 0801 	mov.w	r8, #1
 800a770:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a772:	2b00      	cmp	r3, #0
 800a774:	f47f af6f 	bne.w	800a656 <_dtoa_r+0x7de>
 800a778:	2001      	movs	r0, #1
 800a77a:	e774      	b.n	800a666 <_dtoa_r+0x7ee>
 800a77c:	f04f 0800 	mov.w	r8, #0
 800a780:	e7f6      	b.n	800a770 <_dtoa_r+0x8f8>
 800a782:	4698      	mov	r8, r3
 800a784:	e7f4      	b.n	800a770 <_dtoa_r+0x8f8>
 800a786:	d082      	beq.n	800a68e <_dtoa_r+0x816>
 800a788:	9a05      	ldr	r2, [sp, #20]
 800a78a:	331c      	adds	r3, #28
 800a78c:	441a      	add	r2, r3
 800a78e:	9205      	str	r2, [sp, #20]
 800a790:	9a06      	ldr	r2, [sp, #24]
 800a792:	441a      	add	r2, r3
 800a794:	441d      	add	r5, r3
 800a796:	9206      	str	r2, [sp, #24]
 800a798:	e779      	b.n	800a68e <_dtoa_r+0x816>
 800a79a:	4603      	mov	r3, r0
 800a79c:	e7f4      	b.n	800a788 <_dtoa_r+0x910>
 800a79e:	9b04      	ldr	r3, [sp, #16]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	dc37      	bgt.n	800a814 <_dtoa_r+0x99c>
 800a7a4:	9b07      	ldr	r3, [sp, #28]
 800a7a6:	2b02      	cmp	r3, #2
 800a7a8:	dd34      	ble.n	800a814 <_dtoa_r+0x99c>
 800a7aa:	9b04      	ldr	r3, [sp, #16]
 800a7ac:	9301      	str	r3, [sp, #4]
 800a7ae:	9b01      	ldr	r3, [sp, #4]
 800a7b0:	b963      	cbnz	r3, 800a7cc <_dtoa_r+0x954>
 800a7b2:	4631      	mov	r1, r6
 800a7b4:	2205      	movs	r2, #5
 800a7b6:	4620      	mov	r0, r4
 800a7b8:	f000 fab2 	bl	800ad20 <__multadd>
 800a7bc:	4601      	mov	r1, r0
 800a7be:	4606      	mov	r6, r0
 800a7c0:	4650      	mov	r0, sl
 800a7c2:	f000 fcc7 	bl	800b154 <__mcmp>
 800a7c6:	2800      	cmp	r0, #0
 800a7c8:	f73f adbb 	bgt.w	800a342 <_dtoa_r+0x4ca>
 800a7cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7ce:	9d00      	ldr	r5, [sp, #0]
 800a7d0:	ea6f 0b03 	mvn.w	fp, r3
 800a7d4:	f04f 0800 	mov.w	r8, #0
 800a7d8:	4631      	mov	r1, r6
 800a7da:	4620      	mov	r0, r4
 800a7dc:	f000 fa7e 	bl	800acdc <_Bfree>
 800a7e0:	2f00      	cmp	r7, #0
 800a7e2:	f43f aeab 	beq.w	800a53c <_dtoa_r+0x6c4>
 800a7e6:	f1b8 0f00 	cmp.w	r8, #0
 800a7ea:	d005      	beq.n	800a7f8 <_dtoa_r+0x980>
 800a7ec:	45b8      	cmp	r8, r7
 800a7ee:	d003      	beq.n	800a7f8 <_dtoa_r+0x980>
 800a7f0:	4641      	mov	r1, r8
 800a7f2:	4620      	mov	r0, r4
 800a7f4:	f000 fa72 	bl	800acdc <_Bfree>
 800a7f8:	4639      	mov	r1, r7
 800a7fa:	4620      	mov	r0, r4
 800a7fc:	f000 fa6e 	bl	800acdc <_Bfree>
 800a800:	e69c      	b.n	800a53c <_dtoa_r+0x6c4>
 800a802:	2600      	movs	r6, #0
 800a804:	4637      	mov	r7, r6
 800a806:	e7e1      	b.n	800a7cc <_dtoa_r+0x954>
 800a808:	46bb      	mov	fp, r7
 800a80a:	4637      	mov	r7, r6
 800a80c:	e599      	b.n	800a342 <_dtoa_r+0x4ca>
 800a80e:	bf00      	nop
 800a810:	40240000 	.word	0x40240000
 800a814:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a816:	2b00      	cmp	r3, #0
 800a818:	f000 80c8 	beq.w	800a9ac <_dtoa_r+0xb34>
 800a81c:	9b04      	ldr	r3, [sp, #16]
 800a81e:	9301      	str	r3, [sp, #4]
 800a820:	2d00      	cmp	r5, #0
 800a822:	dd05      	ble.n	800a830 <_dtoa_r+0x9b8>
 800a824:	4639      	mov	r1, r7
 800a826:	462a      	mov	r2, r5
 800a828:	4620      	mov	r0, r4
 800a82a:	f000 fc27 	bl	800b07c <__lshift>
 800a82e:	4607      	mov	r7, r0
 800a830:	f1b8 0f00 	cmp.w	r8, #0
 800a834:	d05b      	beq.n	800a8ee <_dtoa_r+0xa76>
 800a836:	6879      	ldr	r1, [r7, #4]
 800a838:	4620      	mov	r0, r4
 800a83a:	f000 fa0f 	bl	800ac5c <_Balloc>
 800a83e:	4605      	mov	r5, r0
 800a840:	b928      	cbnz	r0, 800a84e <_dtoa_r+0x9d6>
 800a842:	4b83      	ldr	r3, [pc, #524]	; (800aa50 <_dtoa_r+0xbd8>)
 800a844:	4602      	mov	r2, r0
 800a846:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a84a:	f7ff bb2e 	b.w	8009eaa <_dtoa_r+0x32>
 800a84e:	693a      	ldr	r2, [r7, #16]
 800a850:	3202      	adds	r2, #2
 800a852:	0092      	lsls	r2, r2, #2
 800a854:	f107 010c 	add.w	r1, r7, #12
 800a858:	300c      	adds	r0, #12
 800a85a:	f001 f985 	bl	800bb68 <memcpy>
 800a85e:	2201      	movs	r2, #1
 800a860:	4629      	mov	r1, r5
 800a862:	4620      	mov	r0, r4
 800a864:	f000 fc0a 	bl	800b07c <__lshift>
 800a868:	9b00      	ldr	r3, [sp, #0]
 800a86a:	3301      	adds	r3, #1
 800a86c:	9304      	str	r3, [sp, #16]
 800a86e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a872:	4413      	add	r3, r2
 800a874:	9308      	str	r3, [sp, #32]
 800a876:	9b02      	ldr	r3, [sp, #8]
 800a878:	f003 0301 	and.w	r3, r3, #1
 800a87c:	46b8      	mov	r8, r7
 800a87e:	9306      	str	r3, [sp, #24]
 800a880:	4607      	mov	r7, r0
 800a882:	9b04      	ldr	r3, [sp, #16]
 800a884:	4631      	mov	r1, r6
 800a886:	3b01      	subs	r3, #1
 800a888:	4650      	mov	r0, sl
 800a88a:	9301      	str	r3, [sp, #4]
 800a88c:	f7ff fa69 	bl	8009d62 <quorem>
 800a890:	4641      	mov	r1, r8
 800a892:	9002      	str	r0, [sp, #8]
 800a894:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a898:	4650      	mov	r0, sl
 800a89a:	f000 fc5b 	bl	800b154 <__mcmp>
 800a89e:	463a      	mov	r2, r7
 800a8a0:	9005      	str	r0, [sp, #20]
 800a8a2:	4631      	mov	r1, r6
 800a8a4:	4620      	mov	r0, r4
 800a8a6:	f000 fc71 	bl	800b18c <__mdiff>
 800a8aa:	68c2      	ldr	r2, [r0, #12]
 800a8ac:	4605      	mov	r5, r0
 800a8ae:	bb02      	cbnz	r2, 800a8f2 <_dtoa_r+0xa7a>
 800a8b0:	4601      	mov	r1, r0
 800a8b2:	4650      	mov	r0, sl
 800a8b4:	f000 fc4e 	bl	800b154 <__mcmp>
 800a8b8:	4602      	mov	r2, r0
 800a8ba:	4629      	mov	r1, r5
 800a8bc:	4620      	mov	r0, r4
 800a8be:	9209      	str	r2, [sp, #36]	; 0x24
 800a8c0:	f000 fa0c 	bl	800acdc <_Bfree>
 800a8c4:	9b07      	ldr	r3, [sp, #28]
 800a8c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8c8:	9d04      	ldr	r5, [sp, #16]
 800a8ca:	ea43 0102 	orr.w	r1, r3, r2
 800a8ce:	9b06      	ldr	r3, [sp, #24]
 800a8d0:	4319      	orrs	r1, r3
 800a8d2:	d110      	bne.n	800a8f6 <_dtoa_r+0xa7e>
 800a8d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a8d8:	d029      	beq.n	800a92e <_dtoa_r+0xab6>
 800a8da:	9b05      	ldr	r3, [sp, #20]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	dd02      	ble.n	800a8e6 <_dtoa_r+0xa6e>
 800a8e0:	9b02      	ldr	r3, [sp, #8]
 800a8e2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a8e6:	9b01      	ldr	r3, [sp, #4]
 800a8e8:	f883 9000 	strb.w	r9, [r3]
 800a8ec:	e774      	b.n	800a7d8 <_dtoa_r+0x960>
 800a8ee:	4638      	mov	r0, r7
 800a8f0:	e7ba      	b.n	800a868 <_dtoa_r+0x9f0>
 800a8f2:	2201      	movs	r2, #1
 800a8f4:	e7e1      	b.n	800a8ba <_dtoa_r+0xa42>
 800a8f6:	9b05      	ldr	r3, [sp, #20]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	db04      	blt.n	800a906 <_dtoa_r+0xa8e>
 800a8fc:	9907      	ldr	r1, [sp, #28]
 800a8fe:	430b      	orrs	r3, r1
 800a900:	9906      	ldr	r1, [sp, #24]
 800a902:	430b      	orrs	r3, r1
 800a904:	d120      	bne.n	800a948 <_dtoa_r+0xad0>
 800a906:	2a00      	cmp	r2, #0
 800a908:	dded      	ble.n	800a8e6 <_dtoa_r+0xa6e>
 800a90a:	4651      	mov	r1, sl
 800a90c:	2201      	movs	r2, #1
 800a90e:	4620      	mov	r0, r4
 800a910:	f000 fbb4 	bl	800b07c <__lshift>
 800a914:	4631      	mov	r1, r6
 800a916:	4682      	mov	sl, r0
 800a918:	f000 fc1c 	bl	800b154 <__mcmp>
 800a91c:	2800      	cmp	r0, #0
 800a91e:	dc03      	bgt.n	800a928 <_dtoa_r+0xab0>
 800a920:	d1e1      	bne.n	800a8e6 <_dtoa_r+0xa6e>
 800a922:	f019 0f01 	tst.w	r9, #1
 800a926:	d0de      	beq.n	800a8e6 <_dtoa_r+0xa6e>
 800a928:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a92c:	d1d8      	bne.n	800a8e0 <_dtoa_r+0xa68>
 800a92e:	9a01      	ldr	r2, [sp, #4]
 800a930:	2339      	movs	r3, #57	; 0x39
 800a932:	7013      	strb	r3, [r2, #0]
 800a934:	462b      	mov	r3, r5
 800a936:	461d      	mov	r5, r3
 800a938:	3b01      	subs	r3, #1
 800a93a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a93e:	2a39      	cmp	r2, #57	; 0x39
 800a940:	d06c      	beq.n	800aa1c <_dtoa_r+0xba4>
 800a942:	3201      	adds	r2, #1
 800a944:	701a      	strb	r2, [r3, #0]
 800a946:	e747      	b.n	800a7d8 <_dtoa_r+0x960>
 800a948:	2a00      	cmp	r2, #0
 800a94a:	dd07      	ble.n	800a95c <_dtoa_r+0xae4>
 800a94c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a950:	d0ed      	beq.n	800a92e <_dtoa_r+0xab6>
 800a952:	9a01      	ldr	r2, [sp, #4]
 800a954:	f109 0301 	add.w	r3, r9, #1
 800a958:	7013      	strb	r3, [r2, #0]
 800a95a:	e73d      	b.n	800a7d8 <_dtoa_r+0x960>
 800a95c:	9b04      	ldr	r3, [sp, #16]
 800a95e:	9a08      	ldr	r2, [sp, #32]
 800a960:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a964:	4293      	cmp	r3, r2
 800a966:	d043      	beq.n	800a9f0 <_dtoa_r+0xb78>
 800a968:	4651      	mov	r1, sl
 800a96a:	2300      	movs	r3, #0
 800a96c:	220a      	movs	r2, #10
 800a96e:	4620      	mov	r0, r4
 800a970:	f000 f9d6 	bl	800ad20 <__multadd>
 800a974:	45b8      	cmp	r8, r7
 800a976:	4682      	mov	sl, r0
 800a978:	f04f 0300 	mov.w	r3, #0
 800a97c:	f04f 020a 	mov.w	r2, #10
 800a980:	4641      	mov	r1, r8
 800a982:	4620      	mov	r0, r4
 800a984:	d107      	bne.n	800a996 <_dtoa_r+0xb1e>
 800a986:	f000 f9cb 	bl	800ad20 <__multadd>
 800a98a:	4680      	mov	r8, r0
 800a98c:	4607      	mov	r7, r0
 800a98e:	9b04      	ldr	r3, [sp, #16]
 800a990:	3301      	adds	r3, #1
 800a992:	9304      	str	r3, [sp, #16]
 800a994:	e775      	b.n	800a882 <_dtoa_r+0xa0a>
 800a996:	f000 f9c3 	bl	800ad20 <__multadd>
 800a99a:	4639      	mov	r1, r7
 800a99c:	4680      	mov	r8, r0
 800a99e:	2300      	movs	r3, #0
 800a9a0:	220a      	movs	r2, #10
 800a9a2:	4620      	mov	r0, r4
 800a9a4:	f000 f9bc 	bl	800ad20 <__multadd>
 800a9a8:	4607      	mov	r7, r0
 800a9aa:	e7f0      	b.n	800a98e <_dtoa_r+0xb16>
 800a9ac:	9b04      	ldr	r3, [sp, #16]
 800a9ae:	9301      	str	r3, [sp, #4]
 800a9b0:	9d00      	ldr	r5, [sp, #0]
 800a9b2:	4631      	mov	r1, r6
 800a9b4:	4650      	mov	r0, sl
 800a9b6:	f7ff f9d4 	bl	8009d62 <quorem>
 800a9ba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a9be:	9b00      	ldr	r3, [sp, #0]
 800a9c0:	f805 9b01 	strb.w	r9, [r5], #1
 800a9c4:	1aea      	subs	r2, r5, r3
 800a9c6:	9b01      	ldr	r3, [sp, #4]
 800a9c8:	4293      	cmp	r3, r2
 800a9ca:	dd07      	ble.n	800a9dc <_dtoa_r+0xb64>
 800a9cc:	4651      	mov	r1, sl
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	220a      	movs	r2, #10
 800a9d2:	4620      	mov	r0, r4
 800a9d4:	f000 f9a4 	bl	800ad20 <__multadd>
 800a9d8:	4682      	mov	sl, r0
 800a9da:	e7ea      	b.n	800a9b2 <_dtoa_r+0xb3a>
 800a9dc:	9b01      	ldr	r3, [sp, #4]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	bfc8      	it	gt
 800a9e2:	461d      	movgt	r5, r3
 800a9e4:	9b00      	ldr	r3, [sp, #0]
 800a9e6:	bfd8      	it	le
 800a9e8:	2501      	movle	r5, #1
 800a9ea:	441d      	add	r5, r3
 800a9ec:	f04f 0800 	mov.w	r8, #0
 800a9f0:	4651      	mov	r1, sl
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	4620      	mov	r0, r4
 800a9f6:	f000 fb41 	bl	800b07c <__lshift>
 800a9fa:	4631      	mov	r1, r6
 800a9fc:	4682      	mov	sl, r0
 800a9fe:	f000 fba9 	bl	800b154 <__mcmp>
 800aa02:	2800      	cmp	r0, #0
 800aa04:	dc96      	bgt.n	800a934 <_dtoa_r+0xabc>
 800aa06:	d102      	bne.n	800aa0e <_dtoa_r+0xb96>
 800aa08:	f019 0f01 	tst.w	r9, #1
 800aa0c:	d192      	bne.n	800a934 <_dtoa_r+0xabc>
 800aa0e:	462b      	mov	r3, r5
 800aa10:	461d      	mov	r5, r3
 800aa12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa16:	2a30      	cmp	r2, #48	; 0x30
 800aa18:	d0fa      	beq.n	800aa10 <_dtoa_r+0xb98>
 800aa1a:	e6dd      	b.n	800a7d8 <_dtoa_r+0x960>
 800aa1c:	9a00      	ldr	r2, [sp, #0]
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d189      	bne.n	800a936 <_dtoa_r+0xabe>
 800aa22:	f10b 0b01 	add.w	fp, fp, #1
 800aa26:	2331      	movs	r3, #49	; 0x31
 800aa28:	e796      	b.n	800a958 <_dtoa_r+0xae0>
 800aa2a:	4b0a      	ldr	r3, [pc, #40]	; (800aa54 <_dtoa_r+0xbdc>)
 800aa2c:	f7ff ba99 	b.w	8009f62 <_dtoa_r+0xea>
 800aa30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	f47f aa6d 	bne.w	8009f12 <_dtoa_r+0x9a>
 800aa38:	4b07      	ldr	r3, [pc, #28]	; (800aa58 <_dtoa_r+0xbe0>)
 800aa3a:	f7ff ba92 	b.w	8009f62 <_dtoa_r+0xea>
 800aa3e:	9b01      	ldr	r3, [sp, #4]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	dcb5      	bgt.n	800a9b0 <_dtoa_r+0xb38>
 800aa44:	9b07      	ldr	r3, [sp, #28]
 800aa46:	2b02      	cmp	r3, #2
 800aa48:	f73f aeb1 	bgt.w	800a7ae <_dtoa_r+0x936>
 800aa4c:	e7b0      	b.n	800a9b0 <_dtoa_r+0xb38>
 800aa4e:	bf00      	nop
 800aa50:	0800bf64 	.word	0x0800bf64
 800aa54:	0800bec4 	.word	0x0800bec4
 800aa58:	0800bee8 	.word	0x0800bee8

0800aa5c <_free_r>:
 800aa5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa5e:	2900      	cmp	r1, #0
 800aa60:	d044      	beq.n	800aaec <_free_r+0x90>
 800aa62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa66:	9001      	str	r0, [sp, #4]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	f1a1 0404 	sub.w	r4, r1, #4
 800aa6e:	bfb8      	it	lt
 800aa70:	18e4      	addlt	r4, r4, r3
 800aa72:	f000 f8e7 	bl	800ac44 <__malloc_lock>
 800aa76:	4a1e      	ldr	r2, [pc, #120]	; (800aaf0 <_free_r+0x94>)
 800aa78:	9801      	ldr	r0, [sp, #4]
 800aa7a:	6813      	ldr	r3, [r2, #0]
 800aa7c:	b933      	cbnz	r3, 800aa8c <_free_r+0x30>
 800aa7e:	6063      	str	r3, [r4, #4]
 800aa80:	6014      	str	r4, [r2, #0]
 800aa82:	b003      	add	sp, #12
 800aa84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa88:	f000 b8e2 	b.w	800ac50 <__malloc_unlock>
 800aa8c:	42a3      	cmp	r3, r4
 800aa8e:	d908      	bls.n	800aaa2 <_free_r+0x46>
 800aa90:	6825      	ldr	r5, [r4, #0]
 800aa92:	1961      	adds	r1, r4, r5
 800aa94:	428b      	cmp	r3, r1
 800aa96:	bf01      	itttt	eq
 800aa98:	6819      	ldreq	r1, [r3, #0]
 800aa9a:	685b      	ldreq	r3, [r3, #4]
 800aa9c:	1949      	addeq	r1, r1, r5
 800aa9e:	6021      	streq	r1, [r4, #0]
 800aaa0:	e7ed      	b.n	800aa7e <_free_r+0x22>
 800aaa2:	461a      	mov	r2, r3
 800aaa4:	685b      	ldr	r3, [r3, #4]
 800aaa6:	b10b      	cbz	r3, 800aaac <_free_r+0x50>
 800aaa8:	42a3      	cmp	r3, r4
 800aaaa:	d9fa      	bls.n	800aaa2 <_free_r+0x46>
 800aaac:	6811      	ldr	r1, [r2, #0]
 800aaae:	1855      	adds	r5, r2, r1
 800aab0:	42a5      	cmp	r5, r4
 800aab2:	d10b      	bne.n	800aacc <_free_r+0x70>
 800aab4:	6824      	ldr	r4, [r4, #0]
 800aab6:	4421      	add	r1, r4
 800aab8:	1854      	adds	r4, r2, r1
 800aaba:	42a3      	cmp	r3, r4
 800aabc:	6011      	str	r1, [r2, #0]
 800aabe:	d1e0      	bne.n	800aa82 <_free_r+0x26>
 800aac0:	681c      	ldr	r4, [r3, #0]
 800aac2:	685b      	ldr	r3, [r3, #4]
 800aac4:	6053      	str	r3, [r2, #4]
 800aac6:	440c      	add	r4, r1
 800aac8:	6014      	str	r4, [r2, #0]
 800aaca:	e7da      	b.n	800aa82 <_free_r+0x26>
 800aacc:	d902      	bls.n	800aad4 <_free_r+0x78>
 800aace:	230c      	movs	r3, #12
 800aad0:	6003      	str	r3, [r0, #0]
 800aad2:	e7d6      	b.n	800aa82 <_free_r+0x26>
 800aad4:	6825      	ldr	r5, [r4, #0]
 800aad6:	1961      	adds	r1, r4, r5
 800aad8:	428b      	cmp	r3, r1
 800aada:	bf04      	itt	eq
 800aadc:	6819      	ldreq	r1, [r3, #0]
 800aade:	685b      	ldreq	r3, [r3, #4]
 800aae0:	6063      	str	r3, [r4, #4]
 800aae2:	bf04      	itt	eq
 800aae4:	1949      	addeq	r1, r1, r5
 800aae6:	6021      	streq	r1, [r4, #0]
 800aae8:	6054      	str	r4, [r2, #4]
 800aaea:	e7ca      	b.n	800aa82 <_free_r+0x26>
 800aaec:	b003      	add	sp, #12
 800aaee:	bd30      	pop	{r4, r5, pc}
 800aaf0:	20000ff0 	.word	0x20000ff0

0800aaf4 <malloc>:
 800aaf4:	4b02      	ldr	r3, [pc, #8]	; (800ab00 <malloc+0xc>)
 800aaf6:	4601      	mov	r1, r0
 800aaf8:	6818      	ldr	r0, [r3, #0]
 800aafa:	f000 b823 	b.w	800ab44 <_malloc_r>
 800aafe:	bf00      	nop
 800ab00:	20000068 	.word	0x20000068

0800ab04 <sbrk_aligned>:
 800ab04:	b570      	push	{r4, r5, r6, lr}
 800ab06:	4e0e      	ldr	r6, [pc, #56]	; (800ab40 <sbrk_aligned+0x3c>)
 800ab08:	460c      	mov	r4, r1
 800ab0a:	6831      	ldr	r1, [r6, #0]
 800ab0c:	4605      	mov	r5, r0
 800ab0e:	b911      	cbnz	r1, 800ab16 <sbrk_aligned+0x12>
 800ab10:	f001 f81a 	bl	800bb48 <_sbrk_r>
 800ab14:	6030      	str	r0, [r6, #0]
 800ab16:	4621      	mov	r1, r4
 800ab18:	4628      	mov	r0, r5
 800ab1a:	f001 f815 	bl	800bb48 <_sbrk_r>
 800ab1e:	1c43      	adds	r3, r0, #1
 800ab20:	d00a      	beq.n	800ab38 <sbrk_aligned+0x34>
 800ab22:	1cc4      	adds	r4, r0, #3
 800ab24:	f024 0403 	bic.w	r4, r4, #3
 800ab28:	42a0      	cmp	r0, r4
 800ab2a:	d007      	beq.n	800ab3c <sbrk_aligned+0x38>
 800ab2c:	1a21      	subs	r1, r4, r0
 800ab2e:	4628      	mov	r0, r5
 800ab30:	f001 f80a 	bl	800bb48 <_sbrk_r>
 800ab34:	3001      	adds	r0, #1
 800ab36:	d101      	bne.n	800ab3c <sbrk_aligned+0x38>
 800ab38:	f04f 34ff 	mov.w	r4, #4294967295
 800ab3c:	4620      	mov	r0, r4
 800ab3e:	bd70      	pop	{r4, r5, r6, pc}
 800ab40:	20000ff4 	.word	0x20000ff4

0800ab44 <_malloc_r>:
 800ab44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab48:	1ccd      	adds	r5, r1, #3
 800ab4a:	f025 0503 	bic.w	r5, r5, #3
 800ab4e:	3508      	adds	r5, #8
 800ab50:	2d0c      	cmp	r5, #12
 800ab52:	bf38      	it	cc
 800ab54:	250c      	movcc	r5, #12
 800ab56:	2d00      	cmp	r5, #0
 800ab58:	4607      	mov	r7, r0
 800ab5a:	db01      	blt.n	800ab60 <_malloc_r+0x1c>
 800ab5c:	42a9      	cmp	r1, r5
 800ab5e:	d905      	bls.n	800ab6c <_malloc_r+0x28>
 800ab60:	230c      	movs	r3, #12
 800ab62:	603b      	str	r3, [r7, #0]
 800ab64:	2600      	movs	r6, #0
 800ab66:	4630      	mov	r0, r6
 800ab68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab6c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ac40 <_malloc_r+0xfc>
 800ab70:	f000 f868 	bl	800ac44 <__malloc_lock>
 800ab74:	f8d8 3000 	ldr.w	r3, [r8]
 800ab78:	461c      	mov	r4, r3
 800ab7a:	bb5c      	cbnz	r4, 800abd4 <_malloc_r+0x90>
 800ab7c:	4629      	mov	r1, r5
 800ab7e:	4638      	mov	r0, r7
 800ab80:	f7ff ffc0 	bl	800ab04 <sbrk_aligned>
 800ab84:	1c43      	adds	r3, r0, #1
 800ab86:	4604      	mov	r4, r0
 800ab88:	d155      	bne.n	800ac36 <_malloc_r+0xf2>
 800ab8a:	f8d8 4000 	ldr.w	r4, [r8]
 800ab8e:	4626      	mov	r6, r4
 800ab90:	2e00      	cmp	r6, #0
 800ab92:	d145      	bne.n	800ac20 <_malloc_r+0xdc>
 800ab94:	2c00      	cmp	r4, #0
 800ab96:	d048      	beq.n	800ac2a <_malloc_r+0xe6>
 800ab98:	6823      	ldr	r3, [r4, #0]
 800ab9a:	4631      	mov	r1, r6
 800ab9c:	4638      	mov	r0, r7
 800ab9e:	eb04 0903 	add.w	r9, r4, r3
 800aba2:	f000 ffd1 	bl	800bb48 <_sbrk_r>
 800aba6:	4581      	cmp	r9, r0
 800aba8:	d13f      	bne.n	800ac2a <_malloc_r+0xe6>
 800abaa:	6821      	ldr	r1, [r4, #0]
 800abac:	1a6d      	subs	r5, r5, r1
 800abae:	4629      	mov	r1, r5
 800abb0:	4638      	mov	r0, r7
 800abb2:	f7ff ffa7 	bl	800ab04 <sbrk_aligned>
 800abb6:	3001      	adds	r0, #1
 800abb8:	d037      	beq.n	800ac2a <_malloc_r+0xe6>
 800abba:	6823      	ldr	r3, [r4, #0]
 800abbc:	442b      	add	r3, r5
 800abbe:	6023      	str	r3, [r4, #0]
 800abc0:	f8d8 3000 	ldr.w	r3, [r8]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d038      	beq.n	800ac3a <_malloc_r+0xf6>
 800abc8:	685a      	ldr	r2, [r3, #4]
 800abca:	42a2      	cmp	r2, r4
 800abcc:	d12b      	bne.n	800ac26 <_malloc_r+0xe2>
 800abce:	2200      	movs	r2, #0
 800abd0:	605a      	str	r2, [r3, #4]
 800abd2:	e00f      	b.n	800abf4 <_malloc_r+0xb0>
 800abd4:	6822      	ldr	r2, [r4, #0]
 800abd6:	1b52      	subs	r2, r2, r5
 800abd8:	d41f      	bmi.n	800ac1a <_malloc_r+0xd6>
 800abda:	2a0b      	cmp	r2, #11
 800abdc:	d917      	bls.n	800ac0e <_malloc_r+0xca>
 800abde:	1961      	adds	r1, r4, r5
 800abe0:	42a3      	cmp	r3, r4
 800abe2:	6025      	str	r5, [r4, #0]
 800abe4:	bf18      	it	ne
 800abe6:	6059      	strne	r1, [r3, #4]
 800abe8:	6863      	ldr	r3, [r4, #4]
 800abea:	bf08      	it	eq
 800abec:	f8c8 1000 	streq.w	r1, [r8]
 800abf0:	5162      	str	r2, [r4, r5]
 800abf2:	604b      	str	r3, [r1, #4]
 800abf4:	4638      	mov	r0, r7
 800abf6:	f104 060b 	add.w	r6, r4, #11
 800abfa:	f000 f829 	bl	800ac50 <__malloc_unlock>
 800abfe:	f026 0607 	bic.w	r6, r6, #7
 800ac02:	1d23      	adds	r3, r4, #4
 800ac04:	1af2      	subs	r2, r6, r3
 800ac06:	d0ae      	beq.n	800ab66 <_malloc_r+0x22>
 800ac08:	1b9b      	subs	r3, r3, r6
 800ac0a:	50a3      	str	r3, [r4, r2]
 800ac0c:	e7ab      	b.n	800ab66 <_malloc_r+0x22>
 800ac0e:	42a3      	cmp	r3, r4
 800ac10:	6862      	ldr	r2, [r4, #4]
 800ac12:	d1dd      	bne.n	800abd0 <_malloc_r+0x8c>
 800ac14:	f8c8 2000 	str.w	r2, [r8]
 800ac18:	e7ec      	b.n	800abf4 <_malloc_r+0xb0>
 800ac1a:	4623      	mov	r3, r4
 800ac1c:	6864      	ldr	r4, [r4, #4]
 800ac1e:	e7ac      	b.n	800ab7a <_malloc_r+0x36>
 800ac20:	4634      	mov	r4, r6
 800ac22:	6876      	ldr	r6, [r6, #4]
 800ac24:	e7b4      	b.n	800ab90 <_malloc_r+0x4c>
 800ac26:	4613      	mov	r3, r2
 800ac28:	e7cc      	b.n	800abc4 <_malloc_r+0x80>
 800ac2a:	230c      	movs	r3, #12
 800ac2c:	603b      	str	r3, [r7, #0]
 800ac2e:	4638      	mov	r0, r7
 800ac30:	f000 f80e 	bl	800ac50 <__malloc_unlock>
 800ac34:	e797      	b.n	800ab66 <_malloc_r+0x22>
 800ac36:	6025      	str	r5, [r4, #0]
 800ac38:	e7dc      	b.n	800abf4 <_malloc_r+0xb0>
 800ac3a:	605b      	str	r3, [r3, #4]
 800ac3c:	deff      	udf	#255	; 0xff
 800ac3e:	bf00      	nop
 800ac40:	20000ff0 	.word	0x20000ff0

0800ac44 <__malloc_lock>:
 800ac44:	4801      	ldr	r0, [pc, #4]	; (800ac4c <__malloc_lock+0x8>)
 800ac46:	f7ff b88a 	b.w	8009d5e <__retarget_lock_acquire_recursive>
 800ac4a:	bf00      	nop
 800ac4c:	20000fec 	.word	0x20000fec

0800ac50 <__malloc_unlock>:
 800ac50:	4801      	ldr	r0, [pc, #4]	; (800ac58 <__malloc_unlock+0x8>)
 800ac52:	f7ff b885 	b.w	8009d60 <__retarget_lock_release_recursive>
 800ac56:	bf00      	nop
 800ac58:	20000fec 	.word	0x20000fec

0800ac5c <_Balloc>:
 800ac5c:	b570      	push	{r4, r5, r6, lr}
 800ac5e:	69c6      	ldr	r6, [r0, #28]
 800ac60:	4604      	mov	r4, r0
 800ac62:	460d      	mov	r5, r1
 800ac64:	b976      	cbnz	r6, 800ac84 <_Balloc+0x28>
 800ac66:	2010      	movs	r0, #16
 800ac68:	f7ff ff44 	bl	800aaf4 <malloc>
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	61e0      	str	r0, [r4, #28]
 800ac70:	b920      	cbnz	r0, 800ac7c <_Balloc+0x20>
 800ac72:	4b18      	ldr	r3, [pc, #96]	; (800acd4 <_Balloc+0x78>)
 800ac74:	4818      	ldr	r0, [pc, #96]	; (800acd8 <_Balloc+0x7c>)
 800ac76:	216b      	movs	r1, #107	; 0x6b
 800ac78:	f000 ff84 	bl	800bb84 <__assert_func>
 800ac7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac80:	6006      	str	r6, [r0, #0]
 800ac82:	60c6      	str	r6, [r0, #12]
 800ac84:	69e6      	ldr	r6, [r4, #28]
 800ac86:	68f3      	ldr	r3, [r6, #12]
 800ac88:	b183      	cbz	r3, 800acac <_Balloc+0x50>
 800ac8a:	69e3      	ldr	r3, [r4, #28]
 800ac8c:	68db      	ldr	r3, [r3, #12]
 800ac8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ac92:	b9b8      	cbnz	r0, 800acc4 <_Balloc+0x68>
 800ac94:	2101      	movs	r1, #1
 800ac96:	fa01 f605 	lsl.w	r6, r1, r5
 800ac9a:	1d72      	adds	r2, r6, #5
 800ac9c:	0092      	lsls	r2, r2, #2
 800ac9e:	4620      	mov	r0, r4
 800aca0:	f000 ff8e 	bl	800bbc0 <_calloc_r>
 800aca4:	b160      	cbz	r0, 800acc0 <_Balloc+0x64>
 800aca6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800acaa:	e00e      	b.n	800acca <_Balloc+0x6e>
 800acac:	2221      	movs	r2, #33	; 0x21
 800acae:	2104      	movs	r1, #4
 800acb0:	4620      	mov	r0, r4
 800acb2:	f000 ff85 	bl	800bbc0 <_calloc_r>
 800acb6:	69e3      	ldr	r3, [r4, #28]
 800acb8:	60f0      	str	r0, [r6, #12]
 800acba:	68db      	ldr	r3, [r3, #12]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d1e4      	bne.n	800ac8a <_Balloc+0x2e>
 800acc0:	2000      	movs	r0, #0
 800acc2:	bd70      	pop	{r4, r5, r6, pc}
 800acc4:	6802      	ldr	r2, [r0, #0]
 800acc6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800acca:	2300      	movs	r3, #0
 800accc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800acd0:	e7f7      	b.n	800acc2 <_Balloc+0x66>
 800acd2:	bf00      	nop
 800acd4:	0800bef5 	.word	0x0800bef5
 800acd8:	0800bf75 	.word	0x0800bf75

0800acdc <_Bfree>:
 800acdc:	b570      	push	{r4, r5, r6, lr}
 800acde:	69c6      	ldr	r6, [r0, #28]
 800ace0:	4605      	mov	r5, r0
 800ace2:	460c      	mov	r4, r1
 800ace4:	b976      	cbnz	r6, 800ad04 <_Bfree+0x28>
 800ace6:	2010      	movs	r0, #16
 800ace8:	f7ff ff04 	bl	800aaf4 <malloc>
 800acec:	4602      	mov	r2, r0
 800acee:	61e8      	str	r0, [r5, #28]
 800acf0:	b920      	cbnz	r0, 800acfc <_Bfree+0x20>
 800acf2:	4b09      	ldr	r3, [pc, #36]	; (800ad18 <_Bfree+0x3c>)
 800acf4:	4809      	ldr	r0, [pc, #36]	; (800ad1c <_Bfree+0x40>)
 800acf6:	218f      	movs	r1, #143	; 0x8f
 800acf8:	f000 ff44 	bl	800bb84 <__assert_func>
 800acfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad00:	6006      	str	r6, [r0, #0]
 800ad02:	60c6      	str	r6, [r0, #12]
 800ad04:	b13c      	cbz	r4, 800ad16 <_Bfree+0x3a>
 800ad06:	69eb      	ldr	r3, [r5, #28]
 800ad08:	6862      	ldr	r2, [r4, #4]
 800ad0a:	68db      	ldr	r3, [r3, #12]
 800ad0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ad10:	6021      	str	r1, [r4, #0]
 800ad12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ad16:	bd70      	pop	{r4, r5, r6, pc}
 800ad18:	0800bef5 	.word	0x0800bef5
 800ad1c:	0800bf75 	.word	0x0800bf75

0800ad20 <__multadd>:
 800ad20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad24:	690d      	ldr	r5, [r1, #16]
 800ad26:	4607      	mov	r7, r0
 800ad28:	460c      	mov	r4, r1
 800ad2a:	461e      	mov	r6, r3
 800ad2c:	f101 0c14 	add.w	ip, r1, #20
 800ad30:	2000      	movs	r0, #0
 800ad32:	f8dc 3000 	ldr.w	r3, [ip]
 800ad36:	b299      	uxth	r1, r3
 800ad38:	fb02 6101 	mla	r1, r2, r1, r6
 800ad3c:	0c1e      	lsrs	r6, r3, #16
 800ad3e:	0c0b      	lsrs	r3, r1, #16
 800ad40:	fb02 3306 	mla	r3, r2, r6, r3
 800ad44:	b289      	uxth	r1, r1
 800ad46:	3001      	adds	r0, #1
 800ad48:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ad4c:	4285      	cmp	r5, r0
 800ad4e:	f84c 1b04 	str.w	r1, [ip], #4
 800ad52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ad56:	dcec      	bgt.n	800ad32 <__multadd+0x12>
 800ad58:	b30e      	cbz	r6, 800ad9e <__multadd+0x7e>
 800ad5a:	68a3      	ldr	r3, [r4, #8]
 800ad5c:	42ab      	cmp	r3, r5
 800ad5e:	dc19      	bgt.n	800ad94 <__multadd+0x74>
 800ad60:	6861      	ldr	r1, [r4, #4]
 800ad62:	4638      	mov	r0, r7
 800ad64:	3101      	adds	r1, #1
 800ad66:	f7ff ff79 	bl	800ac5c <_Balloc>
 800ad6a:	4680      	mov	r8, r0
 800ad6c:	b928      	cbnz	r0, 800ad7a <__multadd+0x5a>
 800ad6e:	4602      	mov	r2, r0
 800ad70:	4b0c      	ldr	r3, [pc, #48]	; (800ada4 <__multadd+0x84>)
 800ad72:	480d      	ldr	r0, [pc, #52]	; (800ada8 <__multadd+0x88>)
 800ad74:	21ba      	movs	r1, #186	; 0xba
 800ad76:	f000 ff05 	bl	800bb84 <__assert_func>
 800ad7a:	6922      	ldr	r2, [r4, #16]
 800ad7c:	3202      	adds	r2, #2
 800ad7e:	f104 010c 	add.w	r1, r4, #12
 800ad82:	0092      	lsls	r2, r2, #2
 800ad84:	300c      	adds	r0, #12
 800ad86:	f000 feef 	bl	800bb68 <memcpy>
 800ad8a:	4621      	mov	r1, r4
 800ad8c:	4638      	mov	r0, r7
 800ad8e:	f7ff ffa5 	bl	800acdc <_Bfree>
 800ad92:	4644      	mov	r4, r8
 800ad94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ad98:	3501      	adds	r5, #1
 800ad9a:	615e      	str	r6, [r3, #20]
 800ad9c:	6125      	str	r5, [r4, #16]
 800ad9e:	4620      	mov	r0, r4
 800ada0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ada4:	0800bf64 	.word	0x0800bf64
 800ada8:	0800bf75 	.word	0x0800bf75

0800adac <__hi0bits>:
 800adac:	0c03      	lsrs	r3, r0, #16
 800adae:	041b      	lsls	r3, r3, #16
 800adb0:	b9d3      	cbnz	r3, 800ade8 <__hi0bits+0x3c>
 800adb2:	0400      	lsls	r0, r0, #16
 800adb4:	2310      	movs	r3, #16
 800adb6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800adba:	bf04      	itt	eq
 800adbc:	0200      	lsleq	r0, r0, #8
 800adbe:	3308      	addeq	r3, #8
 800adc0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800adc4:	bf04      	itt	eq
 800adc6:	0100      	lsleq	r0, r0, #4
 800adc8:	3304      	addeq	r3, #4
 800adca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800adce:	bf04      	itt	eq
 800add0:	0080      	lsleq	r0, r0, #2
 800add2:	3302      	addeq	r3, #2
 800add4:	2800      	cmp	r0, #0
 800add6:	db05      	blt.n	800ade4 <__hi0bits+0x38>
 800add8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800addc:	f103 0301 	add.w	r3, r3, #1
 800ade0:	bf08      	it	eq
 800ade2:	2320      	moveq	r3, #32
 800ade4:	4618      	mov	r0, r3
 800ade6:	4770      	bx	lr
 800ade8:	2300      	movs	r3, #0
 800adea:	e7e4      	b.n	800adb6 <__hi0bits+0xa>

0800adec <__lo0bits>:
 800adec:	6803      	ldr	r3, [r0, #0]
 800adee:	f013 0207 	ands.w	r2, r3, #7
 800adf2:	d00c      	beq.n	800ae0e <__lo0bits+0x22>
 800adf4:	07d9      	lsls	r1, r3, #31
 800adf6:	d422      	bmi.n	800ae3e <__lo0bits+0x52>
 800adf8:	079a      	lsls	r2, r3, #30
 800adfa:	bf49      	itett	mi
 800adfc:	085b      	lsrmi	r3, r3, #1
 800adfe:	089b      	lsrpl	r3, r3, #2
 800ae00:	6003      	strmi	r3, [r0, #0]
 800ae02:	2201      	movmi	r2, #1
 800ae04:	bf5c      	itt	pl
 800ae06:	6003      	strpl	r3, [r0, #0]
 800ae08:	2202      	movpl	r2, #2
 800ae0a:	4610      	mov	r0, r2
 800ae0c:	4770      	bx	lr
 800ae0e:	b299      	uxth	r1, r3
 800ae10:	b909      	cbnz	r1, 800ae16 <__lo0bits+0x2a>
 800ae12:	0c1b      	lsrs	r3, r3, #16
 800ae14:	2210      	movs	r2, #16
 800ae16:	b2d9      	uxtb	r1, r3
 800ae18:	b909      	cbnz	r1, 800ae1e <__lo0bits+0x32>
 800ae1a:	3208      	adds	r2, #8
 800ae1c:	0a1b      	lsrs	r3, r3, #8
 800ae1e:	0719      	lsls	r1, r3, #28
 800ae20:	bf04      	itt	eq
 800ae22:	091b      	lsreq	r3, r3, #4
 800ae24:	3204      	addeq	r2, #4
 800ae26:	0799      	lsls	r1, r3, #30
 800ae28:	bf04      	itt	eq
 800ae2a:	089b      	lsreq	r3, r3, #2
 800ae2c:	3202      	addeq	r2, #2
 800ae2e:	07d9      	lsls	r1, r3, #31
 800ae30:	d403      	bmi.n	800ae3a <__lo0bits+0x4e>
 800ae32:	085b      	lsrs	r3, r3, #1
 800ae34:	f102 0201 	add.w	r2, r2, #1
 800ae38:	d003      	beq.n	800ae42 <__lo0bits+0x56>
 800ae3a:	6003      	str	r3, [r0, #0]
 800ae3c:	e7e5      	b.n	800ae0a <__lo0bits+0x1e>
 800ae3e:	2200      	movs	r2, #0
 800ae40:	e7e3      	b.n	800ae0a <__lo0bits+0x1e>
 800ae42:	2220      	movs	r2, #32
 800ae44:	e7e1      	b.n	800ae0a <__lo0bits+0x1e>
	...

0800ae48 <__i2b>:
 800ae48:	b510      	push	{r4, lr}
 800ae4a:	460c      	mov	r4, r1
 800ae4c:	2101      	movs	r1, #1
 800ae4e:	f7ff ff05 	bl	800ac5c <_Balloc>
 800ae52:	4602      	mov	r2, r0
 800ae54:	b928      	cbnz	r0, 800ae62 <__i2b+0x1a>
 800ae56:	4b05      	ldr	r3, [pc, #20]	; (800ae6c <__i2b+0x24>)
 800ae58:	4805      	ldr	r0, [pc, #20]	; (800ae70 <__i2b+0x28>)
 800ae5a:	f240 1145 	movw	r1, #325	; 0x145
 800ae5e:	f000 fe91 	bl	800bb84 <__assert_func>
 800ae62:	2301      	movs	r3, #1
 800ae64:	6144      	str	r4, [r0, #20]
 800ae66:	6103      	str	r3, [r0, #16]
 800ae68:	bd10      	pop	{r4, pc}
 800ae6a:	bf00      	nop
 800ae6c:	0800bf64 	.word	0x0800bf64
 800ae70:	0800bf75 	.word	0x0800bf75

0800ae74 <__multiply>:
 800ae74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae78:	4691      	mov	r9, r2
 800ae7a:	690a      	ldr	r2, [r1, #16]
 800ae7c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ae80:	429a      	cmp	r2, r3
 800ae82:	bfb8      	it	lt
 800ae84:	460b      	movlt	r3, r1
 800ae86:	460c      	mov	r4, r1
 800ae88:	bfbc      	itt	lt
 800ae8a:	464c      	movlt	r4, r9
 800ae8c:	4699      	movlt	r9, r3
 800ae8e:	6927      	ldr	r7, [r4, #16]
 800ae90:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ae94:	68a3      	ldr	r3, [r4, #8]
 800ae96:	6861      	ldr	r1, [r4, #4]
 800ae98:	eb07 060a 	add.w	r6, r7, sl
 800ae9c:	42b3      	cmp	r3, r6
 800ae9e:	b085      	sub	sp, #20
 800aea0:	bfb8      	it	lt
 800aea2:	3101      	addlt	r1, #1
 800aea4:	f7ff feda 	bl	800ac5c <_Balloc>
 800aea8:	b930      	cbnz	r0, 800aeb8 <__multiply+0x44>
 800aeaa:	4602      	mov	r2, r0
 800aeac:	4b44      	ldr	r3, [pc, #272]	; (800afc0 <__multiply+0x14c>)
 800aeae:	4845      	ldr	r0, [pc, #276]	; (800afc4 <__multiply+0x150>)
 800aeb0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800aeb4:	f000 fe66 	bl	800bb84 <__assert_func>
 800aeb8:	f100 0514 	add.w	r5, r0, #20
 800aebc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aec0:	462b      	mov	r3, r5
 800aec2:	2200      	movs	r2, #0
 800aec4:	4543      	cmp	r3, r8
 800aec6:	d321      	bcc.n	800af0c <__multiply+0x98>
 800aec8:	f104 0314 	add.w	r3, r4, #20
 800aecc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800aed0:	f109 0314 	add.w	r3, r9, #20
 800aed4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800aed8:	9202      	str	r2, [sp, #8]
 800aeda:	1b3a      	subs	r2, r7, r4
 800aedc:	3a15      	subs	r2, #21
 800aede:	f022 0203 	bic.w	r2, r2, #3
 800aee2:	3204      	adds	r2, #4
 800aee4:	f104 0115 	add.w	r1, r4, #21
 800aee8:	428f      	cmp	r7, r1
 800aeea:	bf38      	it	cc
 800aeec:	2204      	movcc	r2, #4
 800aeee:	9201      	str	r2, [sp, #4]
 800aef0:	9a02      	ldr	r2, [sp, #8]
 800aef2:	9303      	str	r3, [sp, #12]
 800aef4:	429a      	cmp	r2, r3
 800aef6:	d80c      	bhi.n	800af12 <__multiply+0x9e>
 800aef8:	2e00      	cmp	r6, #0
 800aefa:	dd03      	ble.n	800af04 <__multiply+0x90>
 800aefc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800af00:	2b00      	cmp	r3, #0
 800af02:	d05b      	beq.n	800afbc <__multiply+0x148>
 800af04:	6106      	str	r6, [r0, #16]
 800af06:	b005      	add	sp, #20
 800af08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af0c:	f843 2b04 	str.w	r2, [r3], #4
 800af10:	e7d8      	b.n	800aec4 <__multiply+0x50>
 800af12:	f8b3 a000 	ldrh.w	sl, [r3]
 800af16:	f1ba 0f00 	cmp.w	sl, #0
 800af1a:	d024      	beq.n	800af66 <__multiply+0xf2>
 800af1c:	f104 0e14 	add.w	lr, r4, #20
 800af20:	46a9      	mov	r9, r5
 800af22:	f04f 0c00 	mov.w	ip, #0
 800af26:	f85e 2b04 	ldr.w	r2, [lr], #4
 800af2a:	f8d9 1000 	ldr.w	r1, [r9]
 800af2e:	fa1f fb82 	uxth.w	fp, r2
 800af32:	b289      	uxth	r1, r1
 800af34:	fb0a 110b 	mla	r1, sl, fp, r1
 800af38:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800af3c:	f8d9 2000 	ldr.w	r2, [r9]
 800af40:	4461      	add	r1, ip
 800af42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800af46:	fb0a c20b 	mla	r2, sl, fp, ip
 800af4a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800af4e:	b289      	uxth	r1, r1
 800af50:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800af54:	4577      	cmp	r7, lr
 800af56:	f849 1b04 	str.w	r1, [r9], #4
 800af5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800af5e:	d8e2      	bhi.n	800af26 <__multiply+0xb2>
 800af60:	9a01      	ldr	r2, [sp, #4]
 800af62:	f845 c002 	str.w	ip, [r5, r2]
 800af66:	9a03      	ldr	r2, [sp, #12]
 800af68:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800af6c:	3304      	adds	r3, #4
 800af6e:	f1b9 0f00 	cmp.w	r9, #0
 800af72:	d021      	beq.n	800afb8 <__multiply+0x144>
 800af74:	6829      	ldr	r1, [r5, #0]
 800af76:	f104 0c14 	add.w	ip, r4, #20
 800af7a:	46ae      	mov	lr, r5
 800af7c:	f04f 0a00 	mov.w	sl, #0
 800af80:	f8bc b000 	ldrh.w	fp, [ip]
 800af84:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800af88:	fb09 220b 	mla	r2, r9, fp, r2
 800af8c:	4452      	add	r2, sl
 800af8e:	b289      	uxth	r1, r1
 800af90:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800af94:	f84e 1b04 	str.w	r1, [lr], #4
 800af98:	f85c 1b04 	ldr.w	r1, [ip], #4
 800af9c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800afa0:	f8be 1000 	ldrh.w	r1, [lr]
 800afa4:	fb09 110a 	mla	r1, r9, sl, r1
 800afa8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800afac:	4567      	cmp	r7, ip
 800afae:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800afb2:	d8e5      	bhi.n	800af80 <__multiply+0x10c>
 800afb4:	9a01      	ldr	r2, [sp, #4]
 800afb6:	50a9      	str	r1, [r5, r2]
 800afb8:	3504      	adds	r5, #4
 800afba:	e799      	b.n	800aef0 <__multiply+0x7c>
 800afbc:	3e01      	subs	r6, #1
 800afbe:	e79b      	b.n	800aef8 <__multiply+0x84>
 800afc0:	0800bf64 	.word	0x0800bf64
 800afc4:	0800bf75 	.word	0x0800bf75

0800afc8 <__pow5mult>:
 800afc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afcc:	4615      	mov	r5, r2
 800afce:	f012 0203 	ands.w	r2, r2, #3
 800afd2:	4606      	mov	r6, r0
 800afd4:	460f      	mov	r7, r1
 800afd6:	d007      	beq.n	800afe8 <__pow5mult+0x20>
 800afd8:	4c25      	ldr	r4, [pc, #148]	; (800b070 <__pow5mult+0xa8>)
 800afda:	3a01      	subs	r2, #1
 800afdc:	2300      	movs	r3, #0
 800afde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800afe2:	f7ff fe9d 	bl	800ad20 <__multadd>
 800afe6:	4607      	mov	r7, r0
 800afe8:	10ad      	asrs	r5, r5, #2
 800afea:	d03d      	beq.n	800b068 <__pow5mult+0xa0>
 800afec:	69f4      	ldr	r4, [r6, #28]
 800afee:	b97c      	cbnz	r4, 800b010 <__pow5mult+0x48>
 800aff0:	2010      	movs	r0, #16
 800aff2:	f7ff fd7f 	bl	800aaf4 <malloc>
 800aff6:	4602      	mov	r2, r0
 800aff8:	61f0      	str	r0, [r6, #28]
 800affa:	b928      	cbnz	r0, 800b008 <__pow5mult+0x40>
 800affc:	4b1d      	ldr	r3, [pc, #116]	; (800b074 <__pow5mult+0xac>)
 800affe:	481e      	ldr	r0, [pc, #120]	; (800b078 <__pow5mult+0xb0>)
 800b000:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b004:	f000 fdbe 	bl	800bb84 <__assert_func>
 800b008:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b00c:	6004      	str	r4, [r0, #0]
 800b00e:	60c4      	str	r4, [r0, #12]
 800b010:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b014:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b018:	b94c      	cbnz	r4, 800b02e <__pow5mult+0x66>
 800b01a:	f240 2171 	movw	r1, #625	; 0x271
 800b01e:	4630      	mov	r0, r6
 800b020:	f7ff ff12 	bl	800ae48 <__i2b>
 800b024:	2300      	movs	r3, #0
 800b026:	f8c8 0008 	str.w	r0, [r8, #8]
 800b02a:	4604      	mov	r4, r0
 800b02c:	6003      	str	r3, [r0, #0]
 800b02e:	f04f 0900 	mov.w	r9, #0
 800b032:	07eb      	lsls	r3, r5, #31
 800b034:	d50a      	bpl.n	800b04c <__pow5mult+0x84>
 800b036:	4639      	mov	r1, r7
 800b038:	4622      	mov	r2, r4
 800b03a:	4630      	mov	r0, r6
 800b03c:	f7ff ff1a 	bl	800ae74 <__multiply>
 800b040:	4639      	mov	r1, r7
 800b042:	4680      	mov	r8, r0
 800b044:	4630      	mov	r0, r6
 800b046:	f7ff fe49 	bl	800acdc <_Bfree>
 800b04a:	4647      	mov	r7, r8
 800b04c:	106d      	asrs	r5, r5, #1
 800b04e:	d00b      	beq.n	800b068 <__pow5mult+0xa0>
 800b050:	6820      	ldr	r0, [r4, #0]
 800b052:	b938      	cbnz	r0, 800b064 <__pow5mult+0x9c>
 800b054:	4622      	mov	r2, r4
 800b056:	4621      	mov	r1, r4
 800b058:	4630      	mov	r0, r6
 800b05a:	f7ff ff0b 	bl	800ae74 <__multiply>
 800b05e:	6020      	str	r0, [r4, #0]
 800b060:	f8c0 9000 	str.w	r9, [r0]
 800b064:	4604      	mov	r4, r0
 800b066:	e7e4      	b.n	800b032 <__pow5mult+0x6a>
 800b068:	4638      	mov	r0, r7
 800b06a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b06e:	bf00      	nop
 800b070:	0800c0c0 	.word	0x0800c0c0
 800b074:	0800bef5 	.word	0x0800bef5
 800b078:	0800bf75 	.word	0x0800bf75

0800b07c <__lshift>:
 800b07c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b080:	460c      	mov	r4, r1
 800b082:	6849      	ldr	r1, [r1, #4]
 800b084:	6923      	ldr	r3, [r4, #16]
 800b086:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b08a:	68a3      	ldr	r3, [r4, #8]
 800b08c:	4607      	mov	r7, r0
 800b08e:	4691      	mov	r9, r2
 800b090:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b094:	f108 0601 	add.w	r6, r8, #1
 800b098:	42b3      	cmp	r3, r6
 800b09a:	db0b      	blt.n	800b0b4 <__lshift+0x38>
 800b09c:	4638      	mov	r0, r7
 800b09e:	f7ff fddd 	bl	800ac5c <_Balloc>
 800b0a2:	4605      	mov	r5, r0
 800b0a4:	b948      	cbnz	r0, 800b0ba <__lshift+0x3e>
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	4b28      	ldr	r3, [pc, #160]	; (800b14c <__lshift+0xd0>)
 800b0aa:	4829      	ldr	r0, [pc, #164]	; (800b150 <__lshift+0xd4>)
 800b0ac:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b0b0:	f000 fd68 	bl	800bb84 <__assert_func>
 800b0b4:	3101      	adds	r1, #1
 800b0b6:	005b      	lsls	r3, r3, #1
 800b0b8:	e7ee      	b.n	800b098 <__lshift+0x1c>
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	f100 0114 	add.w	r1, r0, #20
 800b0c0:	f100 0210 	add.w	r2, r0, #16
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	4553      	cmp	r3, sl
 800b0c8:	db33      	blt.n	800b132 <__lshift+0xb6>
 800b0ca:	6920      	ldr	r0, [r4, #16]
 800b0cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b0d0:	f104 0314 	add.w	r3, r4, #20
 800b0d4:	f019 091f 	ands.w	r9, r9, #31
 800b0d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b0dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b0e0:	d02b      	beq.n	800b13a <__lshift+0xbe>
 800b0e2:	f1c9 0e20 	rsb	lr, r9, #32
 800b0e6:	468a      	mov	sl, r1
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	6818      	ldr	r0, [r3, #0]
 800b0ec:	fa00 f009 	lsl.w	r0, r0, r9
 800b0f0:	4310      	orrs	r0, r2
 800b0f2:	f84a 0b04 	str.w	r0, [sl], #4
 800b0f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0fa:	459c      	cmp	ip, r3
 800b0fc:	fa22 f20e 	lsr.w	r2, r2, lr
 800b100:	d8f3      	bhi.n	800b0ea <__lshift+0x6e>
 800b102:	ebac 0304 	sub.w	r3, ip, r4
 800b106:	3b15      	subs	r3, #21
 800b108:	f023 0303 	bic.w	r3, r3, #3
 800b10c:	3304      	adds	r3, #4
 800b10e:	f104 0015 	add.w	r0, r4, #21
 800b112:	4584      	cmp	ip, r0
 800b114:	bf38      	it	cc
 800b116:	2304      	movcc	r3, #4
 800b118:	50ca      	str	r2, [r1, r3]
 800b11a:	b10a      	cbz	r2, 800b120 <__lshift+0xa4>
 800b11c:	f108 0602 	add.w	r6, r8, #2
 800b120:	3e01      	subs	r6, #1
 800b122:	4638      	mov	r0, r7
 800b124:	612e      	str	r6, [r5, #16]
 800b126:	4621      	mov	r1, r4
 800b128:	f7ff fdd8 	bl	800acdc <_Bfree>
 800b12c:	4628      	mov	r0, r5
 800b12e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b132:	f842 0f04 	str.w	r0, [r2, #4]!
 800b136:	3301      	adds	r3, #1
 800b138:	e7c5      	b.n	800b0c6 <__lshift+0x4a>
 800b13a:	3904      	subs	r1, #4
 800b13c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b140:	f841 2f04 	str.w	r2, [r1, #4]!
 800b144:	459c      	cmp	ip, r3
 800b146:	d8f9      	bhi.n	800b13c <__lshift+0xc0>
 800b148:	e7ea      	b.n	800b120 <__lshift+0xa4>
 800b14a:	bf00      	nop
 800b14c:	0800bf64 	.word	0x0800bf64
 800b150:	0800bf75 	.word	0x0800bf75

0800b154 <__mcmp>:
 800b154:	b530      	push	{r4, r5, lr}
 800b156:	6902      	ldr	r2, [r0, #16]
 800b158:	690c      	ldr	r4, [r1, #16]
 800b15a:	1b12      	subs	r2, r2, r4
 800b15c:	d10e      	bne.n	800b17c <__mcmp+0x28>
 800b15e:	f100 0314 	add.w	r3, r0, #20
 800b162:	3114      	adds	r1, #20
 800b164:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b168:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b16c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b170:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b174:	42a5      	cmp	r5, r4
 800b176:	d003      	beq.n	800b180 <__mcmp+0x2c>
 800b178:	d305      	bcc.n	800b186 <__mcmp+0x32>
 800b17a:	2201      	movs	r2, #1
 800b17c:	4610      	mov	r0, r2
 800b17e:	bd30      	pop	{r4, r5, pc}
 800b180:	4283      	cmp	r3, r0
 800b182:	d3f3      	bcc.n	800b16c <__mcmp+0x18>
 800b184:	e7fa      	b.n	800b17c <__mcmp+0x28>
 800b186:	f04f 32ff 	mov.w	r2, #4294967295
 800b18a:	e7f7      	b.n	800b17c <__mcmp+0x28>

0800b18c <__mdiff>:
 800b18c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b190:	460c      	mov	r4, r1
 800b192:	4606      	mov	r6, r0
 800b194:	4611      	mov	r1, r2
 800b196:	4620      	mov	r0, r4
 800b198:	4690      	mov	r8, r2
 800b19a:	f7ff ffdb 	bl	800b154 <__mcmp>
 800b19e:	1e05      	subs	r5, r0, #0
 800b1a0:	d110      	bne.n	800b1c4 <__mdiff+0x38>
 800b1a2:	4629      	mov	r1, r5
 800b1a4:	4630      	mov	r0, r6
 800b1a6:	f7ff fd59 	bl	800ac5c <_Balloc>
 800b1aa:	b930      	cbnz	r0, 800b1ba <__mdiff+0x2e>
 800b1ac:	4b3a      	ldr	r3, [pc, #232]	; (800b298 <__mdiff+0x10c>)
 800b1ae:	4602      	mov	r2, r0
 800b1b0:	f240 2137 	movw	r1, #567	; 0x237
 800b1b4:	4839      	ldr	r0, [pc, #228]	; (800b29c <__mdiff+0x110>)
 800b1b6:	f000 fce5 	bl	800bb84 <__assert_func>
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b1c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1c4:	bfa4      	itt	ge
 800b1c6:	4643      	movge	r3, r8
 800b1c8:	46a0      	movge	r8, r4
 800b1ca:	4630      	mov	r0, r6
 800b1cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b1d0:	bfa6      	itte	ge
 800b1d2:	461c      	movge	r4, r3
 800b1d4:	2500      	movge	r5, #0
 800b1d6:	2501      	movlt	r5, #1
 800b1d8:	f7ff fd40 	bl	800ac5c <_Balloc>
 800b1dc:	b920      	cbnz	r0, 800b1e8 <__mdiff+0x5c>
 800b1de:	4b2e      	ldr	r3, [pc, #184]	; (800b298 <__mdiff+0x10c>)
 800b1e0:	4602      	mov	r2, r0
 800b1e2:	f240 2145 	movw	r1, #581	; 0x245
 800b1e6:	e7e5      	b.n	800b1b4 <__mdiff+0x28>
 800b1e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b1ec:	6926      	ldr	r6, [r4, #16]
 800b1ee:	60c5      	str	r5, [r0, #12]
 800b1f0:	f104 0914 	add.w	r9, r4, #20
 800b1f4:	f108 0514 	add.w	r5, r8, #20
 800b1f8:	f100 0e14 	add.w	lr, r0, #20
 800b1fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b200:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b204:	f108 0210 	add.w	r2, r8, #16
 800b208:	46f2      	mov	sl, lr
 800b20a:	2100      	movs	r1, #0
 800b20c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b210:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b214:	fa11 f88b 	uxtah	r8, r1, fp
 800b218:	b299      	uxth	r1, r3
 800b21a:	0c1b      	lsrs	r3, r3, #16
 800b21c:	eba8 0801 	sub.w	r8, r8, r1
 800b220:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b224:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b228:	fa1f f888 	uxth.w	r8, r8
 800b22c:	1419      	asrs	r1, r3, #16
 800b22e:	454e      	cmp	r6, r9
 800b230:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b234:	f84a 3b04 	str.w	r3, [sl], #4
 800b238:	d8e8      	bhi.n	800b20c <__mdiff+0x80>
 800b23a:	1b33      	subs	r3, r6, r4
 800b23c:	3b15      	subs	r3, #21
 800b23e:	f023 0303 	bic.w	r3, r3, #3
 800b242:	3304      	adds	r3, #4
 800b244:	3415      	adds	r4, #21
 800b246:	42a6      	cmp	r6, r4
 800b248:	bf38      	it	cc
 800b24a:	2304      	movcc	r3, #4
 800b24c:	441d      	add	r5, r3
 800b24e:	4473      	add	r3, lr
 800b250:	469e      	mov	lr, r3
 800b252:	462e      	mov	r6, r5
 800b254:	4566      	cmp	r6, ip
 800b256:	d30e      	bcc.n	800b276 <__mdiff+0xea>
 800b258:	f10c 0203 	add.w	r2, ip, #3
 800b25c:	1b52      	subs	r2, r2, r5
 800b25e:	f022 0203 	bic.w	r2, r2, #3
 800b262:	3d03      	subs	r5, #3
 800b264:	45ac      	cmp	ip, r5
 800b266:	bf38      	it	cc
 800b268:	2200      	movcc	r2, #0
 800b26a:	4413      	add	r3, r2
 800b26c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b270:	b17a      	cbz	r2, 800b292 <__mdiff+0x106>
 800b272:	6107      	str	r7, [r0, #16]
 800b274:	e7a4      	b.n	800b1c0 <__mdiff+0x34>
 800b276:	f856 8b04 	ldr.w	r8, [r6], #4
 800b27a:	fa11 f288 	uxtah	r2, r1, r8
 800b27e:	1414      	asrs	r4, r2, #16
 800b280:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b284:	b292      	uxth	r2, r2
 800b286:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b28a:	f84e 2b04 	str.w	r2, [lr], #4
 800b28e:	1421      	asrs	r1, r4, #16
 800b290:	e7e0      	b.n	800b254 <__mdiff+0xc8>
 800b292:	3f01      	subs	r7, #1
 800b294:	e7ea      	b.n	800b26c <__mdiff+0xe0>
 800b296:	bf00      	nop
 800b298:	0800bf64 	.word	0x0800bf64
 800b29c:	0800bf75 	.word	0x0800bf75

0800b2a0 <__d2b>:
 800b2a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b2a4:	460f      	mov	r7, r1
 800b2a6:	2101      	movs	r1, #1
 800b2a8:	ec59 8b10 	vmov	r8, r9, d0
 800b2ac:	4616      	mov	r6, r2
 800b2ae:	f7ff fcd5 	bl	800ac5c <_Balloc>
 800b2b2:	4604      	mov	r4, r0
 800b2b4:	b930      	cbnz	r0, 800b2c4 <__d2b+0x24>
 800b2b6:	4602      	mov	r2, r0
 800b2b8:	4b24      	ldr	r3, [pc, #144]	; (800b34c <__d2b+0xac>)
 800b2ba:	4825      	ldr	r0, [pc, #148]	; (800b350 <__d2b+0xb0>)
 800b2bc:	f240 310f 	movw	r1, #783	; 0x30f
 800b2c0:	f000 fc60 	bl	800bb84 <__assert_func>
 800b2c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b2c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b2cc:	bb2d      	cbnz	r5, 800b31a <__d2b+0x7a>
 800b2ce:	9301      	str	r3, [sp, #4]
 800b2d0:	f1b8 0300 	subs.w	r3, r8, #0
 800b2d4:	d026      	beq.n	800b324 <__d2b+0x84>
 800b2d6:	4668      	mov	r0, sp
 800b2d8:	9300      	str	r3, [sp, #0]
 800b2da:	f7ff fd87 	bl	800adec <__lo0bits>
 800b2de:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b2e2:	b1e8      	cbz	r0, 800b320 <__d2b+0x80>
 800b2e4:	f1c0 0320 	rsb	r3, r0, #32
 800b2e8:	fa02 f303 	lsl.w	r3, r2, r3
 800b2ec:	430b      	orrs	r3, r1
 800b2ee:	40c2      	lsrs	r2, r0
 800b2f0:	6163      	str	r3, [r4, #20]
 800b2f2:	9201      	str	r2, [sp, #4]
 800b2f4:	9b01      	ldr	r3, [sp, #4]
 800b2f6:	61a3      	str	r3, [r4, #24]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	bf14      	ite	ne
 800b2fc:	2202      	movne	r2, #2
 800b2fe:	2201      	moveq	r2, #1
 800b300:	6122      	str	r2, [r4, #16]
 800b302:	b1bd      	cbz	r5, 800b334 <__d2b+0x94>
 800b304:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b308:	4405      	add	r5, r0
 800b30a:	603d      	str	r5, [r7, #0]
 800b30c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b310:	6030      	str	r0, [r6, #0]
 800b312:	4620      	mov	r0, r4
 800b314:	b003      	add	sp, #12
 800b316:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b31a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b31e:	e7d6      	b.n	800b2ce <__d2b+0x2e>
 800b320:	6161      	str	r1, [r4, #20]
 800b322:	e7e7      	b.n	800b2f4 <__d2b+0x54>
 800b324:	a801      	add	r0, sp, #4
 800b326:	f7ff fd61 	bl	800adec <__lo0bits>
 800b32a:	9b01      	ldr	r3, [sp, #4]
 800b32c:	6163      	str	r3, [r4, #20]
 800b32e:	3020      	adds	r0, #32
 800b330:	2201      	movs	r2, #1
 800b332:	e7e5      	b.n	800b300 <__d2b+0x60>
 800b334:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b338:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b33c:	6038      	str	r0, [r7, #0]
 800b33e:	6918      	ldr	r0, [r3, #16]
 800b340:	f7ff fd34 	bl	800adac <__hi0bits>
 800b344:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b348:	e7e2      	b.n	800b310 <__d2b+0x70>
 800b34a:	bf00      	nop
 800b34c:	0800bf64 	.word	0x0800bf64
 800b350:	0800bf75 	.word	0x0800bf75

0800b354 <__ssputs_r>:
 800b354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b358:	688e      	ldr	r6, [r1, #8]
 800b35a:	461f      	mov	r7, r3
 800b35c:	42be      	cmp	r6, r7
 800b35e:	680b      	ldr	r3, [r1, #0]
 800b360:	4682      	mov	sl, r0
 800b362:	460c      	mov	r4, r1
 800b364:	4690      	mov	r8, r2
 800b366:	d82c      	bhi.n	800b3c2 <__ssputs_r+0x6e>
 800b368:	898a      	ldrh	r2, [r1, #12]
 800b36a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b36e:	d026      	beq.n	800b3be <__ssputs_r+0x6a>
 800b370:	6965      	ldr	r5, [r4, #20]
 800b372:	6909      	ldr	r1, [r1, #16]
 800b374:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b378:	eba3 0901 	sub.w	r9, r3, r1
 800b37c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b380:	1c7b      	adds	r3, r7, #1
 800b382:	444b      	add	r3, r9
 800b384:	106d      	asrs	r5, r5, #1
 800b386:	429d      	cmp	r5, r3
 800b388:	bf38      	it	cc
 800b38a:	461d      	movcc	r5, r3
 800b38c:	0553      	lsls	r3, r2, #21
 800b38e:	d527      	bpl.n	800b3e0 <__ssputs_r+0x8c>
 800b390:	4629      	mov	r1, r5
 800b392:	f7ff fbd7 	bl	800ab44 <_malloc_r>
 800b396:	4606      	mov	r6, r0
 800b398:	b360      	cbz	r0, 800b3f4 <__ssputs_r+0xa0>
 800b39a:	6921      	ldr	r1, [r4, #16]
 800b39c:	464a      	mov	r2, r9
 800b39e:	f000 fbe3 	bl	800bb68 <memcpy>
 800b3a2:	89a3      	ldrh	r3, [r4, #12]
 800b3a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b3a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3ac:	81a3      	strh	r3, [r4, #12]
 800b3ae:	6126      	str	r6, [r4, #16]
 800b3b0:	6165      	str	r5, [r4, #20]
 800b3b2:	444e      	add	r6, r9
 800b3b4:	eba5 0509 	sub.w	r5, r5, r9
 800b3b8:	6026      	str	r6, [r4, #0]
 800b3ba:	60a5      	str	r5, [r4, #8]
 800b3bc:	463e      	mov	r6, r7
 800b3be:	42be      	cmp	r6, r7
 800b3c0:	d900      	bls.n	800b3c4 <__ssputs_r+0x70>
 800b3c2:	463e      	mov	r6, r7
 800b3c4:	6820      	ldr	r0, [r4, #0]
 800b3c6:	4632      	mov	r2, r6
 800b3c8:	4641      	mov	r1, r8
 800b3ca:	f000 fba3 	bl	800bb14 <memmove>
 800b3ce:	68a3      	ldr	r3, [r4, #8]
 800b3d0:	1b9b      	subs	r3, r3, r6
 800b3d2:	60a3      	str	r3, [r4, #8]
 800b3d4:	6823      	ldr	r3, [r4, #0]
 800b3d6:	4433      	add	r3, r6
 800b3d8:	6023      	str	r3, [r4, #0]
 800b3da:	2000      	movs	r0, #0
 800b3dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3e0:	462a      	mov	r2, r5
 800b3e2:	f000 fc15 	bl	800bc10 <_realloc_r>
 800b3e6:	4606      	mov	r6, r0
 800b3e8:	2800      	cmp	r0, #0
 800b3ea:	d1e0      	bne.n	800b3ae <__ssputs_r+0x5a>
 800b3ec:	6921      	ldr	r1, [r4, #16]
 800b3ee:	4650      	mov	r0, sl
 800b3f0:	f7ff fb34 	bl	800aa5c <_free_r>
 800b3f4:	230c      	movs	r3, #12
 800b3f6:	f8ca 3000 	str.w	r3, [sl]
 800b3fa:	89a3      	ldrh	r3, [r4, #12]
 800b3fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b400:	81a3      	strh	r3, [r4, #12]
 800b402:	f04f 30ff 	mov.w	r0, #4294967295
 800b406:	e7e9      	b.n	800b3dc <__ssputs_r+0x88>

0800b408 <_svfiprintf_r>:
 800b408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b40c:	4698      	mov	r8, r3
 800b40e:	898b      	ldrh	r3, [r1, #12]
 800b410:	061b      	lsls	r3, r3, #24
 800b412:	b09d      	sub	sp, #116	; 0x74
 800b414:	4607      	mov	r7, r0
 800b416:	460d      	mov	r5, r1
 800b418:	4614      	mov	r4, r2
 800b41a:	d50e      	bpl.n	800b43a <_svfiprintf_r+0x32>
 800b41c:	690b      	ldr	r3, [r1, #16]
 800b41e:	b963      	cbnz	r3, 800b43a <_svfiprintf_r+0x32>
 800b420:	2140      	movs	r1, #64	; 0x40
 800b422:	f7ff fb8f 	bl	800ab44 <_malloc_r>
 800b426:	6028      	str	r0, [r5, #0]
 800b428:	6128      	str	r0, [r5, #16]
 800b42a:	b920      	cbnz	r0, 800b436 <_svfiprintf_r+0x2e>
 800b42c:	230c      	movs	r3, #12
 800b42e:	603b      	str	r3, [r7, #0]
 800b430:	f04f 30ff 	mov.w	r0, #4294967295
 800b434:	e0d0      	b.n	800b5d8 <_svfiprintf_r+0x1d0>
 800b436:	2340      	movs	r3, #64	; 0x40
 800b438:	616b      	str	r3, [r5, #20]
 800b43a:	2300      	movs	r3, #0
 800b43c:	9309      	str	r3, [sp, #36]	; 0x24
 800b43e:	2320      	movs	r3, #32
 800b440:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b444:	f8cd 800c 	str.w	r8, [sp, #12]
 800b448:	2330      	movs	r3, #48	; 0x30
 800b44a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b5f0 <_svfiprintf_r+0x1e8>
 800b44e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b452:	f04f 0901 	mov.w	r9, #1
 800b456:	4623      	mov	r3, r4
 800b458:	469a      	mov	sl, r3
 800b45a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b45e:	b10a      	cbz	r2, 800b464 <_svfiprintf_r+0x5c>
 800b460:	2a25      	cmp	r2, #37	; 0x25
 800b462:	d1f9      	bne.n	800b458 <_svfiprintf_r+0x50>
 800b464:	ebba 0b04 	subs.w	fp, sl, r4
 800b468:	d00b      	beq.n	800b482 <_svfiprintf_r+0x7a>
 800b46a:	465b      	mov	r3, fp
 800b46c:	4622      	mov	r2, r4
 800b46e:	4629      	mov	r1, r5
 800b470:	4638      	mov	r0, r7
 800b472:	f7ff ff6f 	bl	800b354 <__ssputs_r>
 800b476:	3001      	adds	r0, #1
 800b478:	f000 80a9 	beq.w	800b5ce <_svfiprintf_r+0x1c6>
 800b47c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b47e:	445a      	add	r2, fp
 800b480:	9209      	str	r2, [sp, #36]	; 0x24
 800b482:	f89a 3000 	ldrb.w	r3, [sl]
 800b486:	2b00      	cmp	r3, #0
 800b488:	f000 80a1 	beq.w	800b5ce <_svfiprintf_r+0x1c6>
 800b48c:	2300      	movs	r3, #0
 800b48e:	f04f 32ff 	mov.w	r2, #4294967295
 800b492:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b496:	f10a 0a01 	add.w	sl, sl, #1
 800b49a:	9304      	str	r3, [sp, #16]
 800b49c:	9307      	str	r3, [sp, #28]
 800b49e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4a2:	931a      	str	r3, [sp, #104]	; 0x68
 800b4a4:	4654      	mov	r4, sl
 800b4a6:	2205      	movs	r2, #5
 800b4a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4ac:	4850      	ldr	r0, [pc, #320]	; (800b5f0 <_svfiprintf_r+0x1e8>)
 800b4ae:	f7f4 fe9f 	bl	80001f0 <memchr>
 800b4b2:	9a04      	ldr	r2, [sp, #16]
 800b4b4:	b9d8      	cbnz	r0, 800b4ee <_svfiprintf_r+0xe6>
 800b4b6:	06d0      	lsls	r0, r2, #27
 800b4b8:	bf44      	itt	mi
 800b4ba:	2320      	movmi	r3, #32
 800b4bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4c0:	0711      	lsls	r1, r2, #28
 800b4c2:	bf44      	itt	mi
 800b4c4:	232b      	movmi	r3, #43	; 0x2b
 800b4c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4ca:	f89a 3000 	ldrb.w	r3, [sl]
 800b4ce:	2b2a      	cmp	r3, #42	; 0x2a
 800b4d0:	d015      	beq.n	800b4fe <_svfiprintf_r+0xf6>
 800b4d2:	9a07      	ldr	r2, [sp, #28]
 800b4d4:	4654      	mov	r4, sl
 800b4d6:	2000      	movs	r0, #0
 800b4d8:	f04f 0c0a 	mov.w	ip, #10
 800b4dc:	4621      	mov	r1, r4
 800b4de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4e2:	3b30      	subs	r3, #48	; 0x30
 800b4e4:	2b09      	cmp	r3, #9
 800b4e6:	d94d      	bls.n	800b584 <_svfiprintf_r+0x17c>
 800b4e8:	b1b0      	cbz	r0, 800b518 <_svfiprintf_r+0x110>
 800b4ea:	9207      	str	r2, [sp, #28]
 800b4ec:	e014      	b.n	800b518 <_svfiprintf_r+0x110>
 800b4ee:	eba0 0308 	sub.w	r3, r0, r8
 800b4f2:	fa09 f303 	lsl.w	r3, r9, r3
 800b4f6:	4313      	orrs	r3, r2
 800b4f8:	9304      	str	r3, [sp, #16]
 800b4fa:	46a2      	mov	sl, r4
 800b4fc:	e7d2      	b.n	800b4a4 <_svfiprintf_r+0x9c>
 800b4fe:	9b03      	ldr	r3, [sp, #12]
 800b500:	1d19      	adds	r1, r3, #4
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	9103      	str	r1, [sp, #12]
 800b506:	2b00      	cmp	r3, #0
 800b508:	bfbb      	ittet	lt
 800b50a:	425b      	neglt	r3, r3
 800b50c:	f042 0202 	orrlt.w	r2, r2, #2
 800b510:	9307      	strge	r3, [sp, #28]
 800b512:	9307      	strlt	r3, [sp, #28]
 800b514:	bfb8      	it	lt
 800b516:	9204      	strlt	r2, [sp, #16]
 800b518:	7823      	ldrb	r3, [r4, #0]
 800b51a:	2b2e      	cmp	r3, #46	; 0x2e
 800b51c:	d10c      	bne.n	800b538 <_svfiprintf_r+0x130>
 800b51e:	7863      	ldrb	r3, [r4, #1]
 800b520:	2b2a      	cmp	r3, #42	; 0x2a
 800b522:	d134      	bne.n	800b58e <_svfiprintf_r+0x186>
 800b524:	9b03      	ldr	r3, [sp, #12]
 800b526:	1d1a      	adds	r2, r3, #4
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	9203      	str	r2, [sp, #12]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	bfb8      	it	lt
 800b530:	f04f 33ff 	movlt.w	r3, #4294967295
 800b534:	3402      	adds	r4, #2
 800b536:	9305      	str	r3, [sp, #20]
 800b538:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b600 <_svfiprintf_r+0x1f8>
 800b53c:	7821      	ldrb	r1, [r4, #0]
 800b53e:	2203      	movs	r2, #3
 800b540:	4650      	mov	r0, sl
 800b542:	f7f4 fe55 	bl	80001f0 <memchr>
 800b546:	b138      	cbz	r0, 800b558 <_svfiprintf_r+0x150>
 800b548:	9b04      	ldr	r3, [sp, #16]
 800b54a:	eba0 000a 	sub.w	r0, r0, sl
 800b54e:	2240      	movs	r2, #64	; 0x40
 800b550:	4082      	lsls	r2, r0
 800b552:	4313      	orrs	r3, r2
 800b554:	3401      	adds	r4, #1
 800b556:	9304      	str	r3, [sp, #16]
 800b558:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b55c:	4825      	ldr	r0, [pc, #148]	; (800b5f4 <_svfiprintf_r+0x1ec>)
 800b55e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b562:	2206      	movs	r2, #6
 800b564:	f7f4 fe44 	bl	80001f0 <memchr>
 800b568:	2800      	cmp	r0, #0
 800b56a:	d038      	beq.n	800b5de <_svfiprintf_r+0x1d6>
 800b56c:	4b22      	ldr	r3, [pc, #136]	; (800b5f8 <_svfiprintf_r+0x1f0>)
 800b56e:	bb1b      	cbnz	r3, 800b5b8 <_svfiprintf_r+0x1b0>
 800b570:	9b03      	ldr	r3, [sp, #12]
 800b572:	3307      	adds	r3, #7
 800b574:	f023 0307 	bic.w	r3, r3, #7
 800b578:	3308      	adds	r3, #8
 800b57a:	9303      	str	r3, [sp, #12]
 800b57c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b57e:	4433      	add	r3, r6
 800b580:	9309      	str	r3, [sp, #36]	; 0x24
 800b582:	e768      	b.n	800b456 <_svfiprintf_r+0x4e>
 800b584:	fb0c 3202 	mla	r2, ip, r2, r3
 800b588:	460c      	mov	r4, r1
 800b58a:	2001      	movs	r0, #1
 800b58c:	e7a6      	b.n	800b4dc <_svfiprintf_r+0xd4>
 800b58e:	2300      	movs	r3, #0
 800b590:	3401      	adds	r4, #1
 800b592:	9305      	str	r3, [sp, #20]
 800b594:	4619      	mov	r1, r3
 800b596:	f04f 0c0a 	mov.w	ip, #10
 800b59a:	4620      	mov	r0, r4
 800b59c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5a0:	3a30      	subs	r2, #48	; 0x30
 800b5a2:	2a09      	cmp	r2, #9
 800b5a4:	d903      	bls.n	800b5ae <_svfiprintf_r+0x1a6>
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d0c6      	beq.n	800b538 <_svfiprintf_r+0x130>
 800b5aa:	9105      	str	r1, [sp, #20]
 800b5ac:	e7c4      	b.n	800b538 <_svfiprintf_r+0x130>
 800b5ae:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5b2:	4604      	mov	r4, r0
 800b5b4:	2301      	movs	r3, #1
 800b5b6:	e7f0      	b.n	800b59a <_svfiprintf_r+0x192>
 800b5b8:	ab03      	add	r3, sp, #12
 800b5ba:	9300      	str	r3, [sp, #0]
 800b5bc:	462a      	mov	r2, r5
 800b5be:	4b0f      	ldr	r3, [pc, #60]	; (800b5fc <_svfiprintf_r+0x1f4>)
 800b5c0:	a904      	add	r1, sp, #16
 800b5c2:	4638      	mov	r0, r7
 800b5c4:	f7fd fe50 	bl	8009268 <_printf_float>
 800b5c8:	1c42      	adds	r2, r0, #1
 800b5ca:	4606      	mov	r6, r0
 800b5cc:	d1d6      	bne.n	800b57c <_svfiprintf_r+0x174>
 800b5ce:	89ab      	ldrh	r3, [r5, #12]
 800b5d0:	065b      	lsls	r3, r3, #25
 800b5d2:	f53f af2d 	bmi.w	800b430 <_svfiprintf_r+0x28>
 800b5d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5d8:	b01d      	add	sp, #116	; 0x74
 800b5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5de:	ab03      	add	r3, sp, #12
 800b5e0:	9300      	str	r3, [sp, #0]
 800b5e2:	462a      	mov	r2, r5
 800b5e4:	4b05      	ldr	r3, [pc, #20]	; (800b5fc <_svfiprintf_r+0x1f4>)
 800b5e6:	a904      	add	r1, sp, #16
 800b5e8:	4638      	mov	r0, r7
 800b5ea:	f7fe f8e1 	bl	80097b0 <_printf_i>
 800b5ee:	e7eb      	b.n	800b5c8 <_svfiprintf_r+0x1c0>
 800b5f0:	0800c0cc 	.word	0x0800c0cc
 800b5f4:	0800c0d6 	.word	0x0800c0d6
 800b5f8:	08009269 	.word	0x08009269
 800b5fc:	0800b355 	.word	0x0800b355
 800b600:	0800c0d2 	.word	0x0800c0d2

0800b604 <__sfputc_r>:
 800b604:	6893      	ldr	r3, [r2, #8]
 800b606:	3b01      	subs	r3, #1
 800b608:	2b00      	cmp	r3, #0
 800b60a:	b410      	push	{r4}
 800b60c:	6093      	str	r3, [r2, #8]
 800b60e:	da08      	bge.n	800b622 <__sfputc_r+0x1e>
 800b610:	6994      	ldr	r4, [r2, #24]
 800b612:	42a3      	cmp	r3, r4
 800b614:	db01      	blt.n	800b61a <__sfputc_r+0x16>
 800b616:	290a      	cmp	r1, #10
 800b618:	d103      	bne.n	800b622 <__sfputc_r+0x1e>
 800b61a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b61e:	f000 b9e3 	b.w	800b9e8 <__swbuf_r>
 800b622:	6813      	ldr	r3, [r2, #0]
 800b624:	1c58      	adds	r0, r3, #1
 800b626:	6010      	str	r0, [r2, #0]
 800b628:	7019      	strb	r1, [r3, #0]
 800b62a:	4608      	mov	r0, r1
 800b62c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b630:	4770      	bx	lr

0800b632 <__sfputs_r>:
 800b632:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b634:	4606      	mov	r6, r0
 800b636:	460f      	mov	r7, r1
 800b638:	4614      	mov	r4, r2
 800b63a:	18d5      	adds	r5, r2, r3
 800b63c:	42ac      	cmp	r4, r5
 800b63e:	d101      	bne.n	800b644 <__sfputs_r+0x12>
 800b640:	2000      	movs	r0, #0
 800b642:	e007      	b.n	800b654 <__sfputs_r+0x22>
 800b644:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b648:	463a      	mov	r2, r7
 800b64a:	4630      	mov	r0, r6
 800b64c:	f7ff ffda 	bl	800b604 <__sfputc_r>
 800b650:	1c43      	adds	r3, r0, #1
 800b652:	d1f3      	bne.n	800b63c <__sfputs_r+0xa>
 800b654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b658 <_vfiprintf_r>:
 800b658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b65c:	460d      	mov	r5, r1
 800b65e:	b09d      	sub	sp, #116	; 0x74
 800b660:	4614      	mov	r4, r2
 800b662:	4698      	mov	r8, r3
 800b664:	4606      	mov	r6, r0
 800b666:	b118      	cbz	r0, 800b670 <_vfiprintf_r+0x18>
 800b668:	6a03      	ldr	r3, [r0, #32]
 800b66a:	b90b      	cbnz	r3, 800b670 <_vfiprintf_r+0x18>
 800b66c:	f7fe fa4e 	bl	8009b0c <__sinit>
 800b670:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b672:	07d9      	lsls	r1, r3, #31
 800b674:	d405      	bmi.n	800b682 <_vfiprintf_r+0x2a>
 800b676:	89ab      	ldrh	r3, [r5, #12]
 800b678:	059a      	lsls	r2, r3, #22
 800b67a:	d402      	bmi.n	800b682 <_vfiprintf_r+0x2a>
 800b67c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b67e:	f7fe fb6e 	bl	8009d5e <__retarget_lock_acquire_recursive>
 800b682:	89ab      	ldrh	r3, [r5, #12]
 800b684:	071b      	lsls	r3, r3, #28
 800b686:	d501      	bpl.n	800b68c <_vfiprintf_r+0x34>
 800b688:	692b      	ldr	r3, [r5, #16]
 800b68a:	b99b      	cbnz	r3, 800b6b4 <_vfiprintf_r+0x5c>
 800b68c:	4629      	mov	r1, r5
 800b68e:	4630      	mov	r0, r6
 800b690:	f000 f9e8 	bl	800ba64 <__swsetup_r>
 800b694:	b170      	cbz	r0, 800b6b4 <_vfiprintf_r+0x5c>
 800b696:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b698:	07dc      	lsls	r4, r3, #31
 800b69a:	d504      	bpl.n	800b6a6 <_vfiprintf_r+0x4e>
 800b69c:	f04f 30ff 	mov.w	r0, #4294967295
 800b6a0:	b01d      	add	sp, #116	; 0x74
 800b6a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6a6:	89ab      	ldrh	r3, [r5, #12]
 800b6a8:	0598      	lsls	r0, r3, #22
 800b6aa:	d4f7      	bmi.n	800b69c <_vfiprintf_r+0x44>
 800b6ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b6ae:	f7fe fb57 	bl	8009d60 <__retarget_lock_release_recursive>
 800b6b2:	e7f3      	b.n	800b69c <_vfiprintf_r+0x44>
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	9309      	str	r3, [sp, #36]	; 0x24
 800b6b8:	2320      	movs	r3, #32
 800b6ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b6be:	f8cd 800c 	str.w	r8, [sp, #12]
 800b6c2:	2330      	movs	r3, #48	; 0x30
 800b6c4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b878 <_vfiprintf_r+0x220>
 800b6c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b6cc:	f04f 0901 	mov.w	r9, #1
 800b6d0:	4623      	mov	r3, r4
 800b6d2:	469a      	mov	sl, r3
 800b6d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6d8:	b10a      	cbz	r2, 800b6de <_vfiprintf_r+0x86>
 800b6da:	2a25      	cmp	r2, #37	; 0x25
 800b6dc:	d1f9      	bne.n	800b6d2 <_vfiprintf_r+0x7a>
 800b6de:	ebba 0b04 	subs.w	fp, sl, r4
 800b6e2:	d00b      	beq.n	800b6fc <_vfiprintf_r+0xa4>
 800b6e4:	465b      	mov	r3, fp
 800b6e6:	4622      	mov	r2, r4
 800b6e8:	4629      	mov	r1, r5
 800b6ea:	4630      	mov	r0, r6
 800b6ec:	f7ff ffa1 	bl	800b632 <__sfputs_r>
 800b6f0:	3001      	adds	r0, #1
 800b6f2:	f000 80a9 	beq.w	800b848 <_vfiprintf_r+0x1f0>
 800b6f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6f8:	445a      	add	r2, fp
 800b6fa:	9209      	str	r2, [sp, #36]	; 0x24
 800b6fc:	f89a 3000 	ldrb.w	r3, [sl]
 800b700:	2b00      	cmp	r3, #0
 800b702:	f000 80a1 	beq.w	800b848 <_vfiprintf_r+0x1f0>
 800b706:	2300      	movs	r3, #0
 800b708:	f04f 32ff 	mov.w	r2, #4294967295
 800b70c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b710:	f10a 0a01 	add.w	sl, sl, #1
 800b714:	9304      	str	r3, [sp, #16]
 800b716:	9307      	str	r3, [sp, #28]
 800b718:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b71c:	931a      	str	r3, [sp, #104]	; 0x68
 800b71e:	4654      	mov	r4, sl
 800b720:	2205      	movs	r2, #5
 800b722:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b726:	4854      	ldr	r0, [pc, #336]	; (800b878 <_vfiprintf_r+0x220>)
 800b728:	f7f4 fd62 	bl	80001f0 <memchr>
 800b72c:	9a04      	ldr	r2, [sp, #16]
 800b72e:	b9d8      	cbnz	r0, 800b768 <_vfiprintf_r+0x110>
 800b730:	06d1      	lsls	r1, r2, #27
 800b732:	bf44      	itt	mi
 800b734:	2320      	movmi	r3, #32
 800b736:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b73a:	0713      	lsls	r3, r2, #28
 800b73c:	bf44      	itt	mi
 800b73e:	232b      	movmi	r3, #43	; 0x2b
 800b740:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b744:	f89a 3000 	ldrb.w	r3, [sl]
 800b748:	2b2a      	cmp	r3, #42	; 0x2a
 800b74a:	d015      	beq.n	800b778 <_vfiprintf_r+0x120>
 800b74c:	9a07      	ldr	r2, [sp, #28]
 800b74e:	4654      	mov	r4, sl
 800b750:	2000      	movs	r0, #0
 800b752:	f04f 0c0a 	mov.w	ip, #10
 800b756:	4621      	mov	r1, r4
 800b758:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b75c:	3b30      	subs	r3, #48	; 0x30
 800b75e:	2b09      	cmp	r3, #9
 800b760:	d94d      	bls.n	800b7fe <_vfiprintf_r+0x1a6>
 800b762:	b1b0      	cbz	r0, 800b792 <_vfiprintf_r+0x13a>
 800b764:	9207      	str	r2, [sp, #28]
 800b766:	e014      	b.n	800b792 <_vfiprintf_r+0x13a>
 800b768:	eba0 0308 	sub.w	r3, r0, r8
 800b76c:	fa09 f303 	lsl.w	r3, r9, r3
 800b770:	4313      	orrs	r3, r2
 800b772:	9304      	str	r3, [sp, #16]
 800b774:	46a2      	mov	sl, r4
 800b776:	e7d2      	b.n	800b71e <_vfiprintf_r+0xc6>
 800b778:	9b03      	ldr	r3, [sp, #12]
 800b77a:	1d19      	adds	r1, r3, #4
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	9103      	str	r1, [sp, #12]
 800b780:	2b00      	cmp	r3, #0
 800b782:	bfbb      	ittet	lt
 800b784:	425b      	neglt	r3, r3
 800b786:	f042 0202 	orrlt.w	r2, r2, #2
 800b78a:	9307      	strge	r3, [sp, #28]
 800b78c:	9307      	strlt	r3, [sp, #28]
 800b78e:	bfb8      	it	lt
 800b790:	9204      	strlt	r2, [sp, #16]
 800b792:	7823      	ldrb	r3, [r4, #0]
 800b794:	2b2e      	cmp	r3, #46	; 0x2e
 800b796:	d10c      	bne.n	800b7b2 <_vfiprintf_r+0x15a>
 800b798:	7863      	ldrb	r3, [r4, #1]
 800b79a:	2b2a      	cmp	r3, #42	; 0x2a
 800b79c:	d134      	bne.n	800b808 <_vfiprintf_r+0x1b0>
 800b79e:	9b03      	ldr	r3, [sp, #12]
 800b7a0:	1d1a      	adds	r2, r3, #4
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	9203      	str	r2, [sp, #12]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	bfb8      	it	lt
 800b7aa:	f04f 33ff 	movlt.w	r3, #4294967295
 800b7ae:	3402      	adds	r4, #2
 800b7b0:	9305      	str	r3, [sp, #20]
 800b7b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b888 <_vfiprintf_r+0x230>
 800b7b6:	7821      	ldrb	r1, [r4, #0]
 800b7b8:	2203      	movs	r2, #3
 800b7ba:	4650      	mov	r0, sl
 800b7bc:	f7f4 fd18 	bl	80001f0 <memchr>
 800b7c0:	b138      	cbz	r0, 800b7d2 <_vfiprintf_r+0x17a>
 800b7c2:	9b04      	ldr	r3, [sp, #16]
 800b7c4:	eba0 000a 	sub.w	r0, r0, sl
 800b7c8:	2240      	movs	r2, #64	; 0x40
 800b7ca:	4082      	lsls	r2, r0
 800b7cc:	4313      	orrs	r3, r2
 800b7ce:	3401      	adds	r4, #1
 800b7d0:	9304      	str	r3, [sp, #16]
 800b7d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7d6:	4829      	ldr	r0, [pc, #164]	; (800b87c <_vfiprintf_r+0x224>)
 800b7d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b7dc:	2206      	movs	r2, #6
 800b7de:	f7f4 fd07 	bl	80001f0 <memchr>
 800b7e2:	2800      	cmp	r0, #0
 800b7e4:	d03f      	beq.n	800b866 <_vfiprintf_r+0x20e>
 800b7e6:	4b26      	ldr	r3, [pc, #152]	; (800b880 <_vfiprintf_r+0x228>)
 800b7e8:	bb1b      	cbnz	r3, 800b832 <_vfiprintf_r+0x1da>
 800b7ea:	9b03      	ldr	r3, [sp, #12]
 800b7ec:	3307      	adds	r3, #7
 800b7ee:	f023 0307 	bic.w	r3, r3, #7
 800b7f2:	3308      	adds	r3, #8
 800b7f4:	9303      	str	r3, [sp, #12]
 800b7f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7f8:	443b      	add	r3, r7
 800b7fa:	9309      	str	r3, [sp, #36]	; 0x24
 800b7fc:	e768      	b.n	800b6d0 <_vfiprintf_r+0x78>
 800b7fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800b802:	460c      	mov	r4, r1
 800b804:	2001      	movs	r0, #1
 800b806:	e7a6      	b.n	800b756 <_vfiprintf_r+0xfe>
 800b808:	2300      	movs	r3, #0
 800b80a:	3401      	adds	r4, #1
 800b80c:	9305      	str	r3, [sp, #20]
 800b80e:	4619      	mov	r1, r3
 800b810:	f04f 0c0a 	mov.w	ip, #10
 800b814:	4620      	mov	r0, r4
 800b816:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b81a:	3a30      	subs	r2, #48	; 0x30
 800b81c:	2a09      	cmp	r2, #9
 800b81e:	d903      	bls.n	800b828 <_vfiprintf_r+0x1d0>
 800b820:	2b00      	cmp	r3, #0
 800b822:	d0c6      	beq.n	800b7b2 <_vfiprintf_r+0x15a>
 800b824:	9105      	str	r1, [sp, #20]
 800b826:	e7c4      	b.n	800b7b2 <_vfiprintf_r+0x15a>
 800b828:	fb0c 2101 	mla	r1, ip, r1, r2
 800b82c:	4604      	mov	r4, r0
 800b82e:	2301      	movs	r3, #1
 800b830:	e7f0      	b.n	800b814 <_vfiprintf_r+0x1bc>
 800b832:	ab03      	add	r3, sp, #12
 800b834:	9300      	str	r3, [sp, #0]
 800b836:	462a      	mov	r2, r5
 800b838:	4b12      	ldr	r3, [pc, #72]	; (800b884 <_vfiprintf_r+0x22c>)
 800b83a:	a904      	add	r1, sp, #16
 800b83c:	4630      	mov	r0, r6
 800b83e:	f7fd fd13 	bl	8009268 <_printf_float>
 800b842:	4607      	mov	r7, r0
 800b844:	1c78      	adds	r0, r7, #1
 800b846:	d1d6      	bne.n	800b7f6 <_vfiprintf_r+0x19e>
 800b848:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b84a:	07d9      	lsls	r1, r3, #31
 800b84c:	d405      	bmi.n	800b85a <_vfiprintf_r+0x202>
 800b84e:	89ab      	ldrh	r3, [r5, #12]
 800b850:	059a      	lsls	r2, r3, #22
 800b852:	d402      	bmi.n	800b85a <_vfiprintf_r+0x202>
 800b854:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b856:	f7fe fa83 	bl	8009d60 <__retarget_lock_release_recursive>
 800b85a:	89ab      	ldrh	r3, [r5, #12]
 800b85c:	065b      	lsls	r3, r3, #25
 800b85e:	f53f af1d 	bmi.w	800b69c <_vfiprintf_r+0x44>
 800b862:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b864:	e71c      	b.n	800b6a0 <_vfiprintf_r+0x48>
 800b866:	ab03      	add	r3, sp, #12
 800b868:	9300      	str	r3, [sp, #0]
 800b86a:	462a      	mov	r2, r5
 800b86c:	4b05      	ldr	r3, [pc, #20]	; (800b884 <_vfiprintf_r+0x22c>)
 800b86e:	a904      	add	r1, sp, #16
 800b870:	4630      	mov	r0, r6
 800b872:	f7fd ff9d 	bl	80097b0 <_printf_i>
 800b876:	e7e4      	b.n	800b842 <_vfiprintf_r+0x1ea>
 800b878:	0800c0cc 	.word	0x0800c0cc
 800b87c:	0800c0d6 	.word	0x0800c0d6
 800b880:	08009269 	.word	0x08009269
 800b884:	0800b633 	.word	0x0800b633
 800b888:	0800c0d2 	.word	0x0800c0d2

0800b88c <__sflush_r>:
 800b88c:	898a      	ldrh	r2, [r1, #12]
 800b88e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b892:	4605      	mov	r5, r0
 800b894:	0710      	lsls	r0, r2, #28
 800b896:	460c      	mov	r4, r1
 800b898:	d458      	bmi.n	800b94c <__sflush_r+0xc0>
 800b89a:	684b      	ldr	r3, [r1, #4]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	dc05      	bgt.n	800b8ac <__sflush_r+0x20>
 800b8a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	dc02      	bgt.n	800b8ac <__sflush_r+0x20>
 800b8a6:	2000      	movs	r0, #0
 800b8a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b8ae:	2e00      	cmp	r6, #0
 800b8b0:	d0f9      	beq.n	800b8a6 <__sflush_r+0x1a>
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b8b8:	682f      	ldr	r7, [r5, #0]
 800b8ba:	6a21      	ldr	r1, [r4, #32]
 800b8bc:	602b      	str	r3, [r5, #0]
 800b8be:	d032      	beq.n	800b926 <__sflush_r+0x9a>
 800b8c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b8c2:	89a3      	ldrh	r3, [r4, #12]
 800b8c4:	075a      	lsls	r2, r3, #29
 800b8c6:	d505      	bpl.n	800b8d4 <__sflush_r+0x48>
 800b8c8:	6863      	ldr	r3, [r4, #4]
 800b8ca:	1ac0      	subs	r0, r0, r3
 800b8cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b8ce:	b10b      	cbz	r3, 800b8d4 <__sflush_r+0x48>
 800b8d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b8d2:	1ac0      	subs	r0, r0, r3
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	4602      	mov	r2, r0
 800b8d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b8da:	6a21      	ldr	r1, [r4, #32]
 800b8dc:	4628      	mov	r0, r5
 800b8de:	47b0      	blx	r6
 800b8e0:	1c43      	adds	r3, r0, #1
 800b8e2:	89a3      	ldrh	r3, [r4, #12]
 800b8e4:	d106      	bne.n	800b8f4 <__sflush_r+0x68>
 800b8e6:	6829      	ldr	r1, [r5, #0]
 800b8e8:	291d      	cmp	r1, #29
 800b8ea:	d82b      	bhi.n	800b944 <__sflush_r+0xb8>
 800b8ec:	4a29      	ldr	r2, [pc, #164]	; (800b994 <__sflush_r+0x108>)
 800b8ee:	410a      	asrs	r2, r1
 800b8f0:	07d6      	lsls	r6, r2, #31
 800b8f2:	d427      	bmi.n	800b944 <__sflush_r+0xb8>
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	6062      	str	r2, [r4, #4]
 800b8f8:	04d9      	lsls	r1, r3, #19
 800b8fa:	6922      	ldr	r2, [r4, #16]
 800b8fc:	6022      	str	r2, [r4, #0]
 800b8fe:	d504      	bpl.n	800b90a <__sflush_r+0x7e>
 800b900:	1c42      	adds	r2, r0, #1
 800b902:	d101      	bne.n	800b908 <__sflush_r+0x7c>
 800b904:	682b      	ldr	r3, [r5, #0]
 800b906:	b903      	cbnz	r3, 800b90a <__sflush_r+0x7e>
 800b908:	6560      	str	r0, [r4, #84]	; 0x54
 800b90a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b90c:	602f      	str	r7, [r5, #0]
 800b90e:	2900      	cmp	r1, #0
 800b910:	d0c9      	beq.n	800b8a6 <__sflush_r+0x1a>
 800b912:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b916:	4299      	cmp	r1, r3
 800b918:	d002      	beq.n	800b920 <__sflush_r+0x94>
 800b91a:	4628      	mov	r0, r5
 800b91c:	f7ff f89e 	bl	800aa5c <_free_r>
 800b920:	2000      	movs	r0, #0
 800b922:	6360      	str	r0, [r4, #52]	; 0x34
 800b924:	e7c0      	b.n	800b8a8 <__sflush_r+0x1c>
 800b926:	2301      	movs	r3, #1
 800b928:	4628      	mov	r0, r5
 800b92a:	47b0      	blx	r6
 800b92c:	1c41      	adds	r1, r0, #1
 800b92e:	d1c8      	bne.n	800b8c2 <__sflush_r+0x36>
 800b930:	682b      	ldr	r3, [r5, #0]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d0c5      	beq.n	800b8c2 <__sflush_r+0x36>
 800b936:	2b1d      	cmp	r3, #29
 800b938:	d001      	beq.n	800b93e <__sflush_r+0xb2>
 800b93a:	2b16      	cmp	r3, #22
 800b93c:	d101      	bne.n	800b942 <__sflush_r+0xb6>
 800b93e:	602f      	str	r7, [r5, #0]
 800b940:	e7b1      	b.n	800b8a6 <__sflush_r+0x1a>
 800b942:	89a3      	ldrh	r3, [r4, #12]
 800b944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b948:	81a3      	strh	r3, [r4, #12]
 800b94a:	e7ad      	b.n	800b8a8 <__sflush_r+0x1c>
 800b94c:	690f      	ldr	r7, [r1, #16]
 800b94e:	2f00      	cmp	r7, #0
 800b950:	d0a9      	beq.n	800b8a6 <__sflush_r+0x1a>
 800b952:	0793      	lsls	r3, r2, #30
 800b954:	680e      	ldr	r6, [r1, #0]
 800b956:	bf08      	it	eq
 800b958:	694b      	ldreq	r3, [r1, #20]
 800b95a:	600f      	str	r7, [r1, #0]
 800b95c:	bf18      	it	ne
 800b95e:	2300      	movne	r3, #0
 800b960:	eba6 0807 	sub.w	r8, r6, r7
 800b964:	608b      	str	r3, [r1, #8]
 800b966:	f1b8 0f00 	cmp.w	r8, #0
 800b96a:	dd9c      	ble.n	800b8a6 <__sflush_r+0x1a>
 800b96c:	6a21      	ldr	r1, [r4, #32]
 800b96e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b970:	4643      	mov	r3, r8
 800b972:	463a      	mov	r2, r7
 800b974:	4628      	mov	r0, r5
 800b976:	47b0      	blx	r6
 800b978:	2800      	cmp	r0, #0
 800b97a:	dc06      	bgt.n	800b98a <__sflush_r+0xfe>
 800b97c:	89a3      	ldrh	r3, [r4, #12]
 800b97e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b982:	81a3      	strh	r3, [r4, #12]
 800b984:	f04f 30ff 	mov.w	r0, #4294967295
 800b988:	e78e      	b.n	800b8a8 <__sflush_r+0x1c>
 800b98a:	4407      	add	r7, r0
 800b98c:	eba8 0800 	sub.w	r8, r8, r0
 800b990:	e7e9      	b.n	800b966 <__sflush_r+0xda>
 800b992:	bf00      	nop
 800b994:	dfbffffe 	.word	0xdfbffffe

0800b998 <_fflush_r>:
 800b998:	b538      	push	{r3, r4, r5, lr}
 800b99a:	690b      	ldr	r3, [r1, #16]
 800b99c:	4605      	mov	r5, r0
 800b99e:	460c      	mov	r4, r1
 800b9a0:	b913      	cbnz	r3, 800b9a8 <_fflush_r+0x10>
 800b9a2:	2500      	movs	r5, #0
 800b9a4:	4628      	mov	r0, r5
 800b9a6:	bd38      	pop	{r3, r4, r5, pc}
 800b9a8:	b118      	cbz	r0, 800b9b2 <_fflush_r+0x1a>
 800b9aa:	6a03      	ldr	r3, [r0, #32]
 800b9ac:	b90b      	cbnz	r3, 800b9b2 <_fflush_r+0x1a>
 800b9ae:	f7fe f8ad 	bl	8009b0c <__sinit>
 800b9b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d0f3      	beq.n	800b9a2 <_fflush_r+0xa>
 800b9ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b9bc:	07d0      	lsls	r0, r2, #31
 800b9be:	d404      	bmi.n	800b9ca <_fflush_r+0x32>
 800b9c0:	0599      	lsls	r1, r3, #22
 800b9c2:	d402      	bmi.n	800b9ca <_fflush_r+0x32>
 800b9c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b9c6:	f7fe f9ca 	bl	8009d5e <__retarget_lock_acquire_recursive>
 800b9ca:	4628      	mov	r0, r5
 800b9cc:	4621      	mov	r1, r4
 800b9ce:	f7ff ff5d 	bl	800b88c <__sflush_r>
 800b9d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b9d4:	07da      	lsls	r2, r3, #31
 800b9d6:	4605      	mov	r5, r0
 800b9d8:	d4e4      	bmi.n	800b9a4 <_fflush_r+0xc>
 800b9da:	89a3      	ldrh	r3, [r4, #12]
 800b9dc:	059b      	lsls	r3, r3, #22
 800b9de:	d4e1      	bmi.n	800b9a4 <_fflush_r+0xc>
 800b9e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b9e2:	f7fe f9bd 	bl	8009d60 <__retarget_lock_release_recursive>
 800b9e6:	e7dd      	b.n	800b9a4 <_fflush_r+0xc>

0800b9e8 <__swbuf_r>:
 800b9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ea:	460e      	mov	r6, r1
 800b9ec:	4614      	mov	r4, r2
 800b9ee:	4605      	mov	r5, r0
 800b9f0:	b118      	cbz	r0, 800b9fa <__swbuf_r+0x12>
 800b9f2:	6a03      	ldr	r3, [r0, #32]
 800b9f4:	b90b      	cbnz	r3, 800b9fa <__swbuf_r+0x12>
 800b9f6:	f7fe f889 	bl	8009b0c <__sinit>
 800b9fa:	69a3      	ldr	r3, [r4, #24]
 800b9fc:	60a3      	str	r3, [r4, #8]
 800b9fe:	89a3      	ldrh	r3, [r4, #12]
 800ba00:	071a      	lsls	r2, r3, #28
 800ba02:	d525      	bpl.n	800ba50 <__swbuf_r+0x68>
 800ba04:	6923      	ldr	r3, [r4, #16]
 800ba06:	b31b      	cbz	r3, 800ba50 <__swbuf_r+0x68>
 800ba08:	6823      	ldr	r3, [r4, #0]
 800ba0a:	6922      	ldr	r2, [r4, #16]
 800ba0c:	1a98      	subs	r0, r3, r2
 800ba0e:	6963      	ldr	r3, [r4, #20]
 800ba10:	b2f6      	uxtb	r6, r6
 800ba12:	4283      	cmp	r3, r0
 800ba14:	4637      	mov	r7, r6
 800ba16:	dc04      	bgt.n	800ba22 <__swbuf_r+0x3a>
 800ba18:	4621      	mov	r1, r4
 800ba1a:	4628      	mov	r0, r5
 800ba1c:	f7ff ffbc 	bl	800b998 <_fflush_r>
 800ba20:	b9e0      	cbnz	r0, 800ba5c <__swbuf_r+0x74>
 800ba22:	68a3      	ldr	r3, [r4, #8]
 800ba24:	3b01      	subs	r3, #1
 800ba26:	60a3      	str	r3, [r4, #8]
 800ba28:	6823      	ldr	r3, [r4, #0]
 800ba2a:	1c5a      	adds	r2, r3, #1
 800ba2c:	6022      	str	r2, [r4, #0]
 800ba2e:	701e      	strb	r6, [r3, #0]
 800ba30:	6962      	ldr	r2, [r4, #20]
 800ba32:	1c43      	adds	r3, r0, #1
 800ba34:	429a      	cmp	r2, r3
 800ba36:	d004      	beq.n	800ba42 <__swbuf_r+0x5a>
 800ba38:	89a3      	ldrh	r3, [r4, #12]
 800ba3a:	07db      	lsls	r3, r3, #31
 800ba3c:	d506      	bpl.n	800ba4c <__swbuf_r+0x64>
 800ba3e:	2e0a      	cmp	r6, #10
 800ba40:	d104      	bne.n	800ba4c <__swbuf_r+0x64>
 800ba42:	4621      	mov	r1, r4
 800ba44:	4628      	mov	r0, r5
 800ba46:	f7ff ffa7 	bl	800b998 <_fflush_r>
 800ba4a:	b938      	cbnz	r0, 800ba5c <__swbuf_r+0x74>
 800ba4c:	4638      	mov	r0, r7
 800ba4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba50:	4621      	mov	r1, r4
 800ba52:	4628      	mov	r0, r5
 800ba54:	f000 f806 	bl	800ba64 <__swsetup_r>
 800ba58:	2800      	cmp	r0, #0
 800ba5a:	d0d5      	beq.n	800ba08 <__swbuf_r+0x20>
 800ba5c:	f04f 37ff 	mov.w	r7, #4294967295
 800ba60:	e7f4      	b.n	800ba4c <__swbuf_r+0x64>
	...

0800ba64 <__swsetup_r>:
 800ba64:	b538      	push	{r3, r4, r5, lr}
 800ba66:	4b2a      	ldr	r3, [pc, #168]	; (800bb10 <__swsetup_r+0xac>)
 800ba68:	4605      	mov	r5, r0
 800ba6a:	6818      	ldr	r0, [r3, #0]
 800ba6c:	460c      	mov	r4, r1
 800ba6e:	b118      	cbz	r0, 800ba78 <__swsetup_r+0x14>
 800ba70:	6a03      	ldr	r3, [r0, #32]
 800ba72:	b90b      	cbnz	r3, 800ba78 <__swsetup_r+0x14>
 800ba74:	f7fe f84a 	bl	8009b0c <__sinit>
 800ba78:	89a3      	ldrh	r3, [r4, #12]
 800ba7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba7e:	0718      	lsls	r0, r3, #28
 800ba80:	d422      	bmi.n	800bac8 <__swsetup_r+0x64>
 800ba82:	06d9      	lsls	r1, r3, #27
 800ba84:	d407      	bmi.n	800ba96 <__swsetup_r+0x32>
 800ba86:	2309      	movs	r3, #9
 800ba88:	602b      	str	r3, [r5, #0]
 800ba8a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ba8e:	81a3      	strh	r3, [r4, #12]
 800ba90:	f04f 30ff 	mov.w	r0, #4294967295
 800ba94:	e034      	b.n	800bb00 <__swsetup_r+0x9c>
 800ba96:	0758      	lsls	r0, r3, #29
 800ba98:	d512      	bpl.n	800bac0 <__swsetup_r+0x5c>
 800ba9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba9c:	b141      	cbz	r1, 800bab0 <__swsetup_r+0x4c>
 800ba9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800baa2:	4299      	cmp	r1, r3
 800baa4:	d002      	beq.n	800baac <__swsetup_r+0x48>
 800baa6:	4628      	mov	r0, r5
 800baa8:	f7fe ffd8 	bl	800aa5c <_free_r>
 800baac:	2300      	movs	r3, #0
 800baae:	6363      	str	r3, [r4, #52]	; 0x34
 800bab0:	89a3      	ldrh	r3, [r4, #12]
 800bab2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bab6:	81a3      	strh	r3, [r4, #12]
 800bab8:	2300      	movs	r3, #0
 800baba:	6063      	str	r3, [r4, #4]
 800babc:	6923      	ldr	r3, [r4, #16]
 800babe:	6023      	str	r3, [r4, #0]
 800bac0:	89a3      	ldrh	r3, [r4, #12]
 800bac2:	f043 0308 	orr.w	r3, r3, #8
 800bac6:	81a3      	strh	r3, [r4, #12]
 800bac8:	6923      	ldr	r3, [r4, #16]
 800baca:	b94b      	cbnz	r3, 800bae0 <__swsetup_r+0x7c>
 800bacc:	89a3      	ldrh	r3, [r4, #12]
 800bace:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bad2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bad6:	d003      	beq.n	800bae0 <__swsetup_r+0x7c>
 800bad8:	4621      	mov	r1, r4
 800bada:	4628      	mov	r0, r5
 800badc:	f000 f90c 	bl	800bcf8 <__smakebuf_r>
 800bae0:	89a0      	ldrh	r0, [r4, #12]
 800bae2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bae6:	f010 0301 	ands.w	r3, r0, #1
 800baea:	d00a      	beq.n	800bb02 <__swsetup_r+0x9e>
 800baec:	2300      	movs	r3, #0
 800baee:	60a3      	str	r3, [r4, #8]
 800baf0:	6963      	ldr	r3, [r4, #20]
 800baf2:	425b      	negs	r3, r3
 800baf4:	61a3      	str	r3, [r4, #24]
 800baf6:	6923      	ldr	r3, [r4, #16]
 800baf8:	b943      	cbnz	r3, 800bb0c <__swsetup_r+0xa8>
 800bafa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bafe:	d1c4      	bne.n	800ba8a <__swsetup_r+0x26>
 800bb00:	bd38      	pop	{r3, r4, r5, pc}
 800bb02:	0781      	lsls	r1, r0, #30
 800bb04:	bf58      	it	pl
 800bb06:	6963      	ldrpl	r3, [r4, #20]
 800bb08:	60a3      	str	r3, [r4, #8]
 800bb0a:	e7f4      	b.n	800baf6 <__swsetup_r+0x92>
 800bb0c:	2000      	movs	r0, #0
 800bb0e:	e7f7      	b.n	800bb00 <__swsetup_r+0x9c>
 800bb10:	20000068 	.word	0x20000068

0800bb14 <memmove>:
 800bb14:	4288      	cmp	r0, r1
 800bb16:	b510      	push	{r4, lr}
 800bb18:	eb01 0402 	add.w	r4, r1, r2
 800bb1c:	d902      	bls.n	800bb24 <memmove+0x10>
 800bb1e:	4284      	cmp	r4, r0
 800bb20:	4623      	mov	r3, r4
 800bb22:	d807      	bhi.n	800bb34 <memmove+0x20>
 800bb24:	1e43      	subs	r3, r0, #1
 800bb26:	42a1      	cmp	r1, r4
 800bb28:	d008      	beq.n	800bb3c <memmove+0x28>
 800bb2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bb32:	e7f8      	b.n	800bb26 <memmove+0x12>
 800bb34:	4402      	add	r2, r0
 800bb36:	4601      	mov	r1, r0
 800bb38:	428a      	cmp	r2, r1
 800bb3a:	d100      	bne.n	800bb3e <memmove+0x2a>
 800bb3c:	bd10      	pop	{r4, pc}
 800bb3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bb42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bb46:	e7f7      	b.n	800bb38 <memmove+0x24>

0800bb48 <_sbrk_r>:
 800bb48:	b538      	push	{r3, r4, r5, lr}
 800bb4a:	4d06      	ldr	r5, [pc, #24]	; (800bb64 <_sbrk_r+0x1c>)
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	4604      	mov	r4, r0
 800bb50:	4608      	mov	r0, r1
 800bb52:	602b      	str	r3, [r5, #0]
 800bb54:	f7f7 fe64 	bl	8003820 <_sbrk>
 800bb58:	1c43      	adds	r3, r0, #1
 800bb5a:	d102      	bne.n	800bb62 <_sbrk_r+0x1a>
 800bb5c:	682b      	ldr	r3, [r5, #0]
 800bb5e:	b103      	cbz	r3, 800bb62 <_sbrk_r+0x1a>
 800bb60:	6023      	str	r3, [r4, #0]
 800bb62:	bd38      	pop	{r3, r4, r5, pc}
 800bb64:	20000fe8 	.word	0x20000fe8

0800bb68 <memcpy>:
 800bb68:	440a      	add	r2, r1
 800bb6a:	4291      	cmp	r1, r2
 800bb6c:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb70:	d100      	bne.n	800bb74 <memcpy+0xc>
 800bb72:	4770      	bx	lr
 800bb74:	b510      	push	{r4, lr}
 800bb76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb7e:	4291      	cmp	r1, r2
 800bb80:	d1f9      	bne.n	800bb76 <memcpy+0xe>
 800bb82:	bd10      	pop	{r4, pc}

0800bb84 <__assert_func>:
 800bb84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb86:	4614      	mov	r4, r2
 800bb88:	461a      	mov	r2, r3
 800bb8a:	4b09      	ldr	r3, [pc, #36]	; (800bbb0 <__assert_func+0x2c>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	4605      	mov	r5, r0
 800bb90:	68d8      	ldr	r0, [r3, #12]
 800bb92:	b14c      	cbz	r4, 800bba8 <__assert_func+0x24>
 800bb94:	4b07      	ldr	r3, [pc, #28]	; (800bbb4 <__assert_func+0x30>)
 800bb96:	9100      	str	r1, [sp, #0]
 800bb98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bb9c:	4906      	ldr	r1, [pc, #24]	; (800bbb8 <__assert_func+0x34>)
 800bb9e:	462b      	mov	r3, r5
 800bba0:	f000 f872 	bl	800bc88 <fiprintf>
 800bba4:	f000 f906 	bl	800bdb4 <abort>
 800bba8:	4b04      	ldr	r3, [pc, #16]	; (800bbbc <__assert_func+0x38>)
 800bbaa:	461c      	mov	r4, r3
 800bbac:	e7f3      	b.n	800bb96 <__assert_func+0x12>
 800bbae:	bf00      	nop
 800bbb0:	20000068 	.word	0x20000068
 800bbb4:	0800c0e7 	.word	0x0800c0e7
 800bbb8:	0800c0f4 	.word	0x0800c0f4
 800bbbc:	0800c122 	.word	0x0800c122

0800bbc0 <_calloc_r>:
 800bbc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bbc2:	fba1 2402 	umull	r2, r4, r1, r2
 800bbc6:	b94c      	cbnz	r4, 800bbdc <_calloc_r+0x1c>
 800bbc8:	4611      	mov	r1, r2
 800bbca:	9201      	str	r2, [sp, #4]
 800bbcc:	f7fe ffba 	bl	800ab44 <_malloc_r>
 800bbd0:	9a01      	ldr	r2, [sp, #4]
 800bbd2:	4605      	mov	r5, r0
 800bbd4:	b930      	cbnz	r0, 800bbe4 <_calloc_r+0x24>
 800bbd6:	4628      	mov	r0, r5
 800bbd8:	b003      	add	sp, #12
 800bbda:	bd30      	pop	{r4, r5, pc}
 800bbdc:	220c      	movs	r2, #12
 800bbde:	6002      	str	r2, [r0, #0]
 800bbe0:	2500      	movs	r5, #0
 800bbe2:	e7f8      	b.n	800bbd6 <_calloc_r+0x16>
 800bbe4:	4621      	mov	r1, r4
 800bbe6:	f7fe f83c 	bl	8009c62 <memset>
 800bbea:	e7f4      	b.n	800bbd6 <_calloc_r+0x16>

0800bbec <__ascii_mbtowc>:
 800bbec:	b082      	sub	sp, #8
 800bbee:	b901      	cbnz	r1, 800bbf2 <__ascii_mbtowc+0x6>
 800bbf0:	a901      	add	r1, sp, #4
 800bbf2:	b142      	cbz	r2, 800bc06 <__ascii_mbtowc+0x1a>
 800bbf4:	b14b      	cbz	r3, 800bc0a <__ascii_mbtowc+0x1e>
 800bbf6:	7813      	ldrb	r3, [r2, #0]
 800bbf8:	600b      	str	r3, [r1, #0]
 800bbfa:	7812      	ldrb	r2, [r2, #0]
 800bbfc:	1e10      	subs	r0, r2, #0
 800bbfe:	bf18      	it	ne
 800bc00:	2001      	movne	r0, #1
 800bc02:	b002      	add	sp, #8
 800bc04:	4770      	bx	lr
 800bc06:	4610      	mov	r0, r2
 800bc08:	e7fb      	b.n	800bc02 <__ascii_mbtowc+0x16>
 800bc0a:	f06f 0001 	mvn.w	r0, #1
 800bc0e:	e7f8      	b.n	800bc02 <__ascii_mbtowc+0x16>

0800bc10 <_realloc_r>:
 800bc10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc14:	4680      	mov	r8, r0
 800bc16:	4614      	mov	r4, r2
 800bc18:	460e      	mov	r6, r1
 800bc1a:	b921      	cbnz	r1, 800bc26 <_realloc_r+0x16>
 800bc1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc20:	4611      	mov	r1, r2
 800bc22:	f7fe bf8f 	b.w	800ab44 <_malloc_r>
 800bc26:	b92a      	cbnz	r2, 800bc34 <_realloc_r+0x24>
 800bc28:	f7fe ff18 	bl	800aa5c <_free_r>
 800bc2c:	4625      	mov	r5, r4
 800bc2e:	4628      	mov	r0, r5
 800bc30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc34:	f000 f8c5 	bl	800bdc2 <_malloc_usable_size_r>
 800bc38:	4284      	cmp	r4, r0
 800bc3a:	4607      	mov	r7, r0
 800bc3c:	d802      	bhi.n	800bc44 <_realloc_r+0x34>
 800bc3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bc42:	d812      	bhi.n	800bc6a <_realloc_r+0x5a>
 800bc44:	4621      	mov	r1, r4
 800bc46:	4640      	mov	r0, r8
 800bc48:	f7fe ff7c 	bl	800ab44 <_malloc_r>
 800bc4c:	4605      	mov	r5, r0
 800bc4e:	2800      	cmp	r0, #0
 800bc50:	d0ed      	beq.n	800bc2e <_realloc_r+0x1e>
 800bc52:	42bc      	cmp	r4, r7
 800bc54:	4622      	mov	r2, r4
 800bc56:	4631      	mov	r1, r6
 800bc58:	bf28      	it	cs
 800bc5a:	463a      	movcs	r2, r7
 800bc5c:	f7ff ff84 	bl	800bb68 <memcpy>
 800bc60:	4631      	mov	r1, r6
 800bc62:	4640      	mov	r0, r8
 800bc64:	f7fe fefa 	bl	800aa5c <_free_r>
 800bc68:	e7e1      	b.n	800bc2e <_realloc_r+0x1e>
 800bc6a:	4635      	mov	r5, r6
 800bc6c:	e7df      	b.n	800bc2e <_realloc_r+0x1e>

0800bc6e <__ascii_wctomb>:
 800bc6e:	b149      	cbz	r1, 800bc84 <__ascii_wctomb+0x16>
 800bc70:	2aff      	cmp	r2, #255	; 0xff
 800bc72:	bf85      	ittet	hi
 800bc74:	238a      	movhi	r3, #138	; 0x8a
 800bc76:	6003      	strhi	r3, [r0, #0]
 800bc78:	700a      	strbls	r2, [r1, #0]
 800bc7a:	f04f 30ff 	movhi.w	r0, #4294967295
 800bc7e:	bf98      	it	ls
 800bc80:	2001      	movls	r0, #1
 800bc82:	4770      	bx	lr
 800bc84:	4608      	mov	r0, r1
 800bc86:	4770      	bx	lr

0800bc88 <fiprintf>:
 800bc88:	b40e      	push	{r1, r2, r3}
 800bc8a:	b503      	push	{r0, r1, lr}
 800bc8c:	4601      	mov	r1, r0
 800bc8e:	ab03      	add	r3, sp, #12
 800bc90:	4805      	ldr	r0, [pc, #20]	; (800bca8 <fiprintf+0x20>)
 800bc92:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc96:	6800      	ldr	r0, [r0, #0]
 800bc98:	9301      	str	r3, [sp, #4]
 800bc9a:	f7ff fcdd 	bl	800b658 <_vfiprintf_r>
 800bc9e:	b002      	add	sp, #8
 800bca0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bca4:	b003      	add	sp, #12
 800bca6:	4770      	bx	lr
 800bca8:	20000068 	.word	0x20000068

0800bcac <__swhatbuf_r>:
 800bcac:	b570      	push	{r4, r5, r6, lr}
 800bcae:	460c      	mov	r4, r1
 800bcb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcb4:	2900      	cmp	r1, #0
 800bcb6:	b096      	sub	sp, #88	; 0x58
 800bcb8:	4615      	mov	r5, r2
 800bcba:	461e      	mov	r6, r3
 800bcbc:	da0d      	bge.n	800bcda <__swhatbuf_r+0x2e>
 800bcbe:	89a3      	ldrh	r3, [r4, #12]
 800bcc0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bcc4:	f04f 0100 	mov.w	r1, #0
 800bcc8:	bf0c      	ite	eq
 800bcca:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bcce:	2340      	movne	r3, #64	; 0x40
 800bcd0:	2000      	movs	r0, #0
 800bcd2:	6031      	str	r1, [r6, #0]
 800bcd4:	602b      	str	r3, [r5, #0]
 800bcd6:	b016      	add	sp, #88	; 0x58
 800bcd8:	bd70      	pop	{r4, r5, r6, pc}
 800bcda:	466a      	mov	r2, sp
 800bcdc:	f000 f848 	bl	800bd70 <_fstat_r>
 800bce0:	2800      	cmp	r0, #0
 800bce2:	dbec      	blt.n	800bcbe <__swhatbuf_r+0x12>
 800bce4:	9901      	ldr	r1, [sp, #4]
 800bce6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bcea:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bcee:	4259      	negs	r1, r3
 800bcf0:	4159      	adcs	r1, r3
 800bcf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bcf6:	e7eb      	b.n	800bcd0 <__swhatbuf_r+0x24>

0800bcf8 <__smakebuf_r>:
 800bcf8:	898b      	ldrh	r3, [r1, #12]
 800bcfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bcfc:	079d      	lsls	r5, r3, #30
 800bcfe:	4606      	mov	r6, r0
 800bd00:	460c      	mov	r4, r1
 800bd02:	d507      	bpl.n	800bd14 <__smakebuf_r+0x1c>
 800bd04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bd08:	6023      	str	r3, [r4, #0]
 800bd0a:	6123      	str	r3, [r4, #16]
 800bd0c:	2301      	movs	r3, #1
 800bd0e:	6163      	str	r3, [r4, #20]
 800bd10:	b002      	add	sp, #8
 800bd12:	bd70      	pop	{r4, r5, r6, pc}
 800bd14:	ab01      	add	r3, sp, #4
 800bd16:	466a      	mov	r2, sp
 800bd18:	f7ff ffc8 	bl	800bcac <__swhatbuf_r>
 800bd1c:	9900      	ldr	r1, [sp, #0]
 800bd1e:	4605      	mov	r5, r0
 800bd20:	4630      	mov	r0, r6
 800bd22:	f7fe ff0f 	bl	800ab44 <_malloc_r>
 800bd26:	b948      	cbnz	r0, 800bd3c <__smakebuf_r+0x44>
 800bd28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd2c:	059a      	lsls	r2, r3, #22
 800bd2e:	d4ef      	bmi.n	800bd10 <__smakebuf_r+0x18>
 800bd30:	f023 0303 	bic.w	r3, r3, #3
 800bd34:	f043 0302 	orr.w	r3, r3, #2
 800bd38:	81a3      	strh	r3, [r4, #12]
 800bd3a:	e7e3      	b.n	800bd04 <__smakebuf_r+0xc>
 800bd3c:	89a3      	ldrh	r3, [r4, #12]
 800bd3e:	6020      	str	r0, [r4, #0]
 800bd40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd44:	81a3      	strh	r3, [r4, #12]
 800bd46:	9b00      	ldr	r3, [sp, #0]
 800bd48:	6163      	str	r3, [r4, #20]
 800bd4a:	9b01      	ldr	r3, [sp, #4]
 800bd4c:	6120      	str	r0, [r4, #16]
 800bd4e:	b15b      	cbz	r3, 800bd68 <__smakebuf_r+0x70>
 800bd50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd54:	4630      	mov	r0, r6
 800bd56:	f000 f81d 	bl	800bd94 <_isatty_r>
 800bd5a:	b128      	cbz	r0, 800bd68 <__smakebuf_r+0x70>
 800bd5c:	89a3      	ldrh	r3, [r4, #12]
 800bd5e:	f023 0303 	bic.w	r3, r3, #3
 800bd62:	f043 0301 	orr.w	r3, r3, #1
 800bd66:	81a3      	strh	r3, [r4, #12]
 800bd68:	89a3      	ldrh	r3, [r4, #12]
 800bd6a:	431d      	orrs	r5, r3
 800bd6c:	81a5      	strh	r5, [r4, #12]
 800bd6e:	e7cf      	b.n	800bd10 <__smakebuf_r+0x18>

0800bd70 <_fstat_r>:
 800bd70:	b538      	push	{r3, r4, r5, lr}
 800bd72:	4d07      	ldr	r5, [pc, #28]	; (800bd90 <_fstat_r+0x20>)
 800bd74:	2300      	movs	r3, #0
 800bd76:	4604      	mov	r4, r0
 800bd78:	4608      	mov	r0, r1
 800bd7a:	4611      	mov	r1, r2
 800bd7c:	602b      	str	r3, [r5, #0]
 800bd7e:	f7f7 fd26 	bl	80037ce <_fstat>
 800bd82:	1c43      	adds	r3, r0, #1
 800bd84:	d102      	bne.n	800bd8c <_fstat_r+0x1c>
 800bd86:	682b      	ldr	r3, [r5, #0]
 800bd88:	b103      	cbz	r3, 800bd8c <_fstat_r+0x1c>
 800bd8a:	6023      	str	r3, [r4, #0]
 800bd8c:	bd38      	pop	{r3, r4, r5, pc}
 800bd8e:	bf00      	nop
 800bd90:	20000fe8 	.word	0x20000fe8

0800bd94 <_isatty_r>:
 800bd94:	b538      	push	{r3, r4, r5, lr}
 800bd96:	4d06      	ldr	r5, [pc, #24]	; (800bdb0 <_isatty_r+0x1c>)
 800bd98:	2300      	movs	r3, #0
 800bd9a:	4604      	mov	r4, r0
 800bd9c:	4608      	mov	r0, r1
 800bd9e:	602b      	str	r3, [r5, #0]
 800bda0:	f7f7 fd25 	bl	80037ee <_isatty>
 800bda4:	1c43      	adds	r3, r0, #1
 800bda6:	d102      	bne.n	800bdae <_isatty_r+0x1a>
 800bda8:	682b      	ldr	r3, [r5, #0]
 800bdaa:	b103      	cbz	r3, 800bdae <_isatty_r+0x1a>
 800bdac:	6023      	str	r3, [r4, #0]
 800bdae:	bd38      	pop	{r3, r4, r5, pc}
 800bdb0:	20000fe8 	.word	0x20000fe8

0800bdb4 <abort>:
 800bdb4:	b508      	push	{r3, lr}
 800bdb6:	2006      	movs	r0, #6
 800bdb8:	f000 f834 	bl	800be24 <raise>
 800bdbc:	2001      	movs	r0, #1
 800bdbe:	f7f7 fcd3 	bl	8003768 <_exit>

0800bdc2 <_malloc_usable_size_r>:
 800bdc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bdc6:	1f18      	subs	r0, r3, #4
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	bfbc      	itt	lt
 800bdcc:	580b      	ldrlt	r3, [r1, r0]
 800bdce:	18c0      	addlt	r0, r0, r3
 800bdd0:	4770      	bx	lr

0800bdd2 <_raise_r>:
 800bdd2:	291f      	cmp	r1, #31
 800bdd4:	b538      	push	{r3, r4, r5, lr}
 800bdd6:	4604      	mov	r4, r0
 800bdd8:	460d      	mov	r5, r1
 800bdda:	d904      	bls.n	800bde6 <_raise_r+0x14>
 800bddc:	2316      	movs	r3, #22
 800bdde:	6003      	str	r3, [r0, #0]
 800bde0:	f04f 30ff 	mov.w	r0, #4294967295
 800bde4:	bd38      	pop	{r3, r4, r5, pc}
 800bde6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800bde8:	b112      	cbz	r2, 800bdf0 <_raise_r+0x1e>
 800bdea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bdee:	b94b      	cbnz	r3, 800be04 <_raise_r+0x32>
 800bdf0:	4620      	mov	r0, r4
 800bdf2:	f000 f831 	bl	800be58 <_getpid_r>
 800bdf6:	462a      	mov	r2, r5
 800bdf8:	4601      	mov	r1, r0
 800bdfa:	4620      	mov	r0, r4
 800bdfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be00:	f000 b818 	b.w	800be34 <_kill_r>
 800be04:	2b01      	cmp	r3, #1
 800be06:	d00a      	beq.n	800be1e <_raise_r+0x4c>
 800be08:	1c59      	adds	r1, r3, #1
 800be0a:	d103      	bne.n	800be14 <_raise_r+0x42>
 800be0c:	2316      	movs	r3, #22
 800be0e:	6003      	str	r3, [r0, #0]
 800be10:	2001      	movs	r0, #1
 800be12:	e7e7      	b.n	800bde4 <_raise_r+0x12>
 800be14:	2400      	movs	r4, #0
 800be16:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800be1a:	4628      	mov	r0, r5
 800be1c:	4798      	blx	r3
 800be1e:	2000      	movs	r0, #0
 800be20:	e7e0      	b.n	800bde4 <_raise_r+0x12>
	...

0800be24 <raise>:
 800be24:	4b02      	ldr	r3, [pc, #8]	; (800be30 <raise+0xc>)
 800be26:	4601      	mov	r1, r0
 800be28:	6818      	ldr	r0, [r3, #0]
 800be2a:	f7ff bfd2 	b.w	800bdd2 <_raise_r>
 800be2e:	bf00      	nop
 800be30:	20000068 	.word	0x20000068

0800be34 <_kill_r>:
 800be34:	b538      	push	{r3, r4, r5, lr}
 800be36:	4d07      	ldr	r5, [pc, #28]	; (800be54 <_kill_r+0x20>)
 800be38:	2300      	movs	r3, #0
 800be3a:	4604      	mov	r4, r0
 800be3c:	4608      	mov	r0, r1
 800be3e:	4611      	mov	r1, r2
 800be40:	602b      	str	r3, [r5, #0]
 800be42:	f7f7 fc81 	bl	8003748 <_kill>
 800be46:	1c43      	adds	r3, r0, #1
 800be48:	d102      	bne.n	800be50 <_kill_r+0x1c>
 800be4a:	682b      	ldr	r3, [r5, #0]
 800be4c:	b103      	cbz	r3, 800be50 <_kill_r+0x1c>
 800be4e:	6023      	str	r3, [r4, #0]
 800be50:	bd38      	pop	{r3, r4, r5, pc}
 800be52:	bf00      	nop
 800be54:	20000fe8 	.word	0x20000fe8

0800be58 <_getpid_r>:
 800be58:	f7f7 bc6e 	b.w	8003738 <_getpid>

0800be5c <_init>:
 800be5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be5e:	bf00      	nop
 800be60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be62:	bc08      	pop	{r3}
 800be64:	469e      	mov	lr, r3
 800be66:	4770      	bx	lr

0800be68 <_fini>:
 800be68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be6a:	bf00      	nop
 800be6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be6e:	bc08      	pop	{r3}
 800be70:	469e      	mov	lr, r3
 800be72:	4770      	bx	lr
