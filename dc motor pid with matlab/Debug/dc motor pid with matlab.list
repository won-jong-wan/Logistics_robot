
dc motor pid with matlab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db48  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  0800dcf8  0800dcf8  0001dcf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e160  0800e160  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e160  0800e160  0001e160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e168  0800e168  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e168  0800e168  0001e168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e16c  0800e16c  0001e16c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800e170  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          00000ec8  200001e8  200001e8  000201e8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200010b0  200010b0  000201e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001a71f  00000000  00000000  00020257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000030f9  00000000  00000000  0003a976  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000014b0  00000000  00000000  0003da70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001378  00000000  00000000  0003ef20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002848a  00000000  00000000  00040298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001910b  00000000  00000000  00068722  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f292b  00000000  00000000  0008182d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006df0  00000000  00000000  00174158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800dce0 	.word	0x0800dce0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001ec 	.word	0x200001ec
 80001ec:	0800dce0 	.word	0x0800dce0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a6 	b.w	800100c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9e08      	ldr	r6, [sp, #32]
 8000d4a:	460d      	mov	r5, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	460f      	mov	r7, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4694      	mov	ip, r2
 8000d58:	d965      	bls.n	8000e26 <__udivmoddi4+0xe2>
 8000d5a:	fab2 f382 	clz	r3, r2
 8000d5e:	b143      	cbz	r3, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d64:	f1c3 0220 	rsb	r2, r3, #32
 8000d68:	409f      	lsls	r7, r3
 8000d6a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6e:	4317      	orrs	r7, r2
 8000d70:	409c      	lsls	r4, r3
 8000d72:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d76:	fa1f f58c 	uxth.w	r5, ip
 8000d7a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d7e:	0c22      	lsrs	r2, r4, #16
 8000d80:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d84:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d88:	fb01 f005 	mul.w	r0, r1, r5
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d90:	eb1c 0202 	adds.w	r2, ip, r2
 8000d94:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d98:	f080 811c 	bcs.w	8000fd4 <__udivmoddi4+0x290>
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	f240 8119 	bls.w	8000fd4 <__udivmoddi4+0x290>
 8000da2:	3902      	subs	r1, #2
 8000da4:	4462      	add	r2, ip
 8000da6:	1a12      	subs	r2, r2, r0
 8000da8:	b2a4      	uxth	r4, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000db6:	fb00 f505 	mul.w	r5, r0, r5
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	d90a      	bls.n	8000dd4 <__udivmoddi4+0x90>
 8000dbe:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc6:	f080 8107 	bcs.w	8000fd8 <__udivmoddi4+0x294>
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	f240 8104 	bls.w	8000fd8 <__udivmoddi4+0x294>
 8000dd0:	4464      	add	r4, ip
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11e      	cbz	r6, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40dc      	lsrs	r4, r3
 8000de0:	2300      	movs	r3, #0
 8000de2:	e9c6 4300 	strd	r4, r3, [r6]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0xbc>
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	f000 80ed 	beq.w	8000fce <__udivmoddi4+0x28a>
 8000df4:	2100      	movs	r1, #0
 8000df6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e00:	fab3 f183 	clz	r1, r3
 8000e04:	2900      	cmp	r1, #0
 8000e06:	d149      	bne.n	8000e9c <__udivmoddi4+0x158>
 8000e08:	42ab      	cmp	r3, r5
 8000e0a:	d302      	bcc.n	8000e12 <__udivmoddi4+0xce>
 8000e0c:	4282      	cmp	r2, r0
 8000e0e:	f200 80f8 	bhi.w	8001002 <__udivmoddi4+0x2be>
 8000e12:	1a84      	subs	r4, r0, r2
 8000e14:	eb65 0203 	sbc.w	r2, r5, r3
 8000e18:	2001      	movs	r0, #1
 8000e1a:	4617      	mov	r7, r2
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d0e2      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	e9c6 4700 	strd	r4, r7, [r6]
 8000e24:	e7df      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e26:	b902      	cbnz	r2, 8000e2a <__udivmoddi4+0xe6>
 8000e28:	deff      	udf	#255	; 0xff
 8000e2a:	fab2 f382 	clz	r3, r2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f040 8090 	bne.w	8000f54 <__udivmoddi4+0x210>
 8000e34:	1a8a      	subs	r2, r1, r2
 8000e36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e3a:	fa1f fe8c 	uxth.w	lr, ip
 8000e3e:	2101      	movs	r1, #1
 8000e40:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e44:	fb07 2015 	mls	r0, r7, r5, r2
 8000e48:	0c22      	lsrs	r2, r4, #16
 8000e4a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e4e:	fb0e f005 	mul.w	r0, lr, r5
 8000e52:	4290      	cmp	r0, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x124>
 8000e56:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x122>
 8000e60:	4290      	cmp	r0, r2
 8000e62:	f200 80cb 	bhi.w	8000ffc <__udivmoddi4+0x2b8>
 8000e66:	4645      	mov	r5, r8
 8000e68:	1a12      	subs	r2, r2, r0
 8000e6a:	b2a4      	uxth	r4, r4
 8000e6c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e70:	fb07 2210 	mls	r2, r7, r0, r2
 8000e74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e78:	fb0e fe00 	mul.w	lr, lr, r0
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x14e>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x14c>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	f200 80bb 	bhi.w	8001006 <__udivmoddi4+0x2c2>
 8000e90:	4610      	mov	r0, r2
 8000e92:	eba4 040e 	sub.w	r4, r4, lr
 8000e96:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e9a:	e79f      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e9c:	f1c1 0720 	rsb	r7, r1, #32
 8000ea0:	408b      	lsls	r3, r1
 8000ea2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ea6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eaa:	fa05 f401 	lsl.w	r4, r5, r1
 8000eae:	fa20 f307 	lsr.w	r3, r0, r7
 8000eb2:	40fd      	lsrs	r5, r7
 8000eb4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb8:	4323      	orrs	r3, r4
 8000eba:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ebe:	fa1f fe8c 	uxth.w	lr, ip
 8000ec2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ec6:	0c1c      	lsrs	r4, r3, #16
 8000ec8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ecc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ed0:	42a5      	cmp	r5, r4
 8000ed2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eda:	d90b      	bls.n	8000ef4 <__udivmoddi4+0x1b0>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ee4:	f080 8088 	bcs.w	8000ff8 <__udivmoddi4+0x2b4>
 8000ee8:	42a5      	cmp	r5, r4
 8000eea:	f240 8085 	bls.w	8000ff8 <__udivmoddi4+0x2b4>
 8000eee:	f1a8 0802 	sub.w	r8, r8, #2
 8000ef2:	4464      	add	r4, ip
 8000ef4:	1b64      	subs	r4, r4, r5
 8000ef6:	b29d      	uxth	r5, r3
 8000ef8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000efc:	fb09 4413 	mls	r4, r9, r3, r4
 8000f00:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f04:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f08:	45a6      	cmp	lr, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x1da>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f14:	d26c      	bcs.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f16:	45a6      	cmp	lr, r4
 8000f18:	d96a      	bls.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f1a:	3b02      	subs	r3, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f22:	fba3 9502 	umull	r9, r5, r3, r2
 8000f26:	eba4 040e 	sub.w	r4, r4, lr
 8000f2a:	42ac      	cmp	r4, r5
 8000f2c:	46c8      	mov	r8, r9
 8000f2e:	46ae      	mov	lr, r5
 8000f30:	d356      	bcc.n	8000fe0 <__udivmoddi4+0x29c>
 8000f32:	d053      	beq.n	8000fdc <__udivmoddi4+0x298>
 8000f34:	b156      	cbz	r6, 8000f4c <__udivmoddi4+0x208>
 8000f36:	ebb0 0208 	subs.w	r2, r0, r8
 8000f3a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f42:	40ca      	lsrs	r2, r1
 8000f44:	40cc      	lsrs	r4, r1
 8000f46:	4317      	orrs	r7, r2
 8000f48:	e9c6 7400 	strd	r7, r4, [r6]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	2100      	movs	r1, #0
 8000f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f54:	f1c3 0120 	rsb	r1, r3, #32
 8000f58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f5c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f60:	fa25 f101 	lsr.w	r1, r5, r1
 8000f64:	409d      	lsls	r5, r3
 8000f66:	432a      	orrs	r2, r5
 8000f68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f6c:	fa1f fe8c 	uxth.w	lr, ip
 8000f70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f74:	fb07 1510 	mls	r5, r7, r0, r1
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f7e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f82:	428d      	cmp	r5, r1
 8000f84:	fa04 f403 	lsl.w	r4, r4, r3
 8000f88:	d908      	bls.n	8000f9c <__udivmoddi4+0x258>
 8000f8a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f92:	d22f      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f94:	428d      	cmp	r5, r1
 8000f96:	d92d      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f98:	3802      	subs	r0, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	1b49      	subs	r1, r1, r5
 8000f9e:	b292      	uxth	r2, r2
 8000fa0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fa4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fa8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fac:	fb05 f10e 	mul.w	r1, r5, lr
 8000fb0:	4291      	cmp	r1, r2
 8000fb2:	d908      	bls.n	8000fc6 <__udivmoddi4+0x282>
 8000fb4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fb8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fbc:	d216      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000fbe:	4291      	cmp	r1, r2
 8000fc0:	d914      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000fc2:	3d02      	subs	r5, #2
 8000fc4:	4462      	add	r2, ip
 8000fc6:	1a52      	subs	r2, r2, r1
 8000fc8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fcc:	e738      	b.n	8000e40 <__udivmoddi4+0xfc>
 8000fce:	4631      	mov	r1, r6
 8000fd0:	4630      	mov	r0, r6
 8000fd2:	e708      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000fd4:	4639      	mov	r1, r7
 8000fd6:	e6e6      	b.n	8000da6 <__udivmoddi4+0x62>
 8000fd8:	4610      	mov	r0, r2
 8000fda:	e6fb      	b.n	8000dd4 <__udivmoddi4+0x90>
 8000fdc:	4548      	cmp	r0, r9
 8000fde:	d2a9      	bcs.n	8000f34 <__udivmoddi4+0x1f0>
 8000fe0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fe4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	e7a3      	b.n	8000f34 <__udivmoddi4+0x1f0>
 8000fec:	4645      	mov	r5, r8
 8000fee:	e7ea      	b.n	8000fc6 <__udivmoddi4+0x282>
 8000ff0:	462b      	mov	r3, r5
 8000ff2:	e794      	b.n	8000f1e <__udivmoddi4+0x1da>
 8000ff4:	4640      	mov	r0, r8
 8000ff6:	e7d1      	b.n	8000f9c <__udivmoddi4+0x258>
 8000ff8:	46d0      	mov	r8, sl
 8000ffa:	e77b      	b.n	8000ef4 <__udivmoddi4+0x1b0>
 8000ffc:	3d02      	subs	r5, #2
 8000ffe:	4462      	add	r2, ip
 8001000:	e732      	b.n	8000e68 <__udivmoddi4+0x124>
 8001002:	4608      	mov	r0, r1
 8001004:	e70a      	b.n	8000e1c <__udivmoddi4+0xd8>
 8001006:	4464      	add	r4, ip
 8001008:	3802      	subs	r0, #2
 800100a:	e742      	b.n	8000e92 <__udivmoddi4+0x14e>

0800100c <__aeabi_idiv0>:
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop

08001010 <_write>:
{
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
  return ch;
}

int _write(int file, char* p, int len){        //테라텀
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, p, len, 10);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	b29a      	uxth	r2, r3
 8001020:	230a      	movs	r3, #10
 8001022:	68b9      	ldr	r1, [r7, #8]
 8001024:	4803      	ldr	r0, [pc, #12]	; (8001034 <_write+0x24>)
 8001026:	f006 febd 	bl	8007da4 <HAL_UART_Transmit>
	return len;
 800102a:	687b      	ldr	r3, [r7, #4]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000314 	.word	0x20000314

08001038 <SerialSendChar_WIFI>:
	while((USART3->SR & 1<<7) == RESET);
	USART3->DR = (Ch1 & 0x01FF);	// 전송 (최대 9bit 이므로 0x01FF과 masking)
}

void SerialSendChar_WIFI(uint8_t Ch2) // 1문자 보내기 함수
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
	while((UART4->SR & 1<<7) == RESET);
 8001042:	bf00      	nop
 8001044:	4b07      	ldr	r3, [pc, #28]	; (8001064 <SerialSendChar_WIFI+0x2c>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800104c:	2b00      	cmp	r3, #0
 800104e:	d0f9      	beq.n	8001044 <SerialSendChar_WIFI+0xc>
	UART4->DR = (Ch2 & 0x01FF);
 8001050:	4a04      	ldr	r2, [pc, #16]	; (8001064 <SerialSendChar_WIFI+0x2c>)
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	6053      	str	r3, [r2, #4]
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	40004c00 	.word	0x40004c00

08001068 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	encoder_count=TIM4->CNT;
 8001070:	4bb8      	ldr	r3, [pc, #736]	; (8001354 <HAL_UART_RxCpltCallback+0x2ec>)
 8001072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001074:	4ab8      	ldr	r2, [pc, #736]	; (8001358 <HAL_UART_RxCpltCallback+0x2f0>)
 8001076:	6013      	str	r3, [r2, #0]

  if(huart->Instance == USART3)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4ab7      	ldr	r2, [pc, #732]	; (800135c <HAL_UART_RxCpltCallback+0x2f4>)
 800107e:	4293      	cmp	r3, r2
 8001080:	f040 819c 	bne.w	80013bc <HAL_UART_RxCpltCallback+0x354>
  {

	  HAL_UART_Receive_IT(&huart3, &key_value, 1);
 8001084:	2201      	movs	r2, #1
 8001086:	49b6      	ldr	r1, [pc, #728]	; (8001360 <HAL_UART_RxCpltCallback+0x2f8>)
 8001088:	48b6      	ldr	r0, [pc, #728]	; (8001364 <HAL_UART_RxCpltCallback+0x2fc>)
 800108a:	f006 ff16 	bl	8007eba <HAL_UART_Receive_IT>
	  printf("%d,^^ %c \r\n", key_value,key_value);
 800108e:	4bb4      	ldr	r3, [pc, #720]	; (8001360 <HAL_UART_RxCpltCallback+0x2f8>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	4619      	mov	r1, r3
 8001094:	4bb2      	ldr	r3, [pc, #712]	; (8001360 <HAL_UART_RxCpltCallback+0x2f8>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	461a      	mov	r2, r3
 800109a:	48b3      	ldr	r0, [pc, #716]	; (8001368 <HAL_UART_RxCpltCallback+0x300>)
 800109c:	f009 f8c0 	bl	800a220 <iprintf>

	  switch(key_value)
 80010a0:	4baf      	ldr	r3, [pc, #700]	; (8001360 <HAL_UART_RxCpltCallback+0x2f8>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	3b2c      	subs	r3, #44	; 0x2c
 80010a6:	2b4b      	cmp	r3, #75	; 0x4b
 80010a8:	f200 8188 	bhi.w	80013bc <HAL_UART_RxCpltCallback+0x354>
 80010ac:	a201      	add	r2, pc, #4	; (adr r2, 80010b4 <HAL_UART_RxCpltCallback+0x4c>)
 80010ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b2:	bf00      	nop
 80010b4:	0800131f 	.word	0x0800131f
 80010b8:	080013bd 	.word	0x080013bd
 80010bc:	0800132d 	.word	0x0800132d
 80010c0:	0800133b 	.word	0x0800133b
 80010c4:	080013bd 	.word	0x080013bd
 80010c8:	08001219 	.word	0x08001219
 80010cc:	08001227 	.word	0x08001227
 80010d0:	08001235 	.word	0x08001235
 80010d4:	0800123d 	.word	0x0800123d
 80010d8:	08001245 	.word	0x08001245
 80010dc:	0800124f 	.word	0x0800124f
 80010e0:	08001259 	.word	0x08001259
 80010e4:	080013bd 	.word	0x080013bd
 80010e8:	080013bd 	.word	0x080013bd
 80010ec:	080013bd 	.word	0x080013bd
 80010f0:	080013bd 	.word	0x080013bd
 80010f4:	080013bd 	.word	0x080013bd
 80010f8:	080013bd 	.word	0x080013bd
 80010fc:	080013bd 	.word	0x080013bd
 8001100:	0800139d 	.word	0x0800139d
 8001104:	080013bd 	.word	0x080013bd
 8001108:	080013bd 	.word	0x080013bd
 800110c:	080013bd 	.word	0x080013bd
 8001110:	080013bd 	.word	0x080013bd
 8001114:	080013bd 	.word	0x080013bd
 8001118:	080013bd 	.word	0x080013bd
 800111c:	080013bd 	.word	0x080013bd
 8001120:	080013bd 	.word	0x080013bd
 8001124:	080013bd 	.word	0x080013bd
 8001128:	080013bd 	.word	0x080013bd
 800112c:	080013bd 	.word	0x080013bd
 8001130:	080013bd 	.word	0x080013bd
 8001134:	080013bd 	.word	0x080013bd
 8001138:	080013bd 	.word	0x080013bd
 800113c:	080013bd 	.word	0x080013bd
 8001140:	080013bd 	.word	0x080013bd
 8001144:	080013bd 	.word	0x080013bd
 8001148:	080013bd 	.word	0x080013bd
 800114c:	080013bd 	.word	0x080013bd
 8001150:	080013bd 	.word	0x080013bd
 8001154:	080013bd 	.word	0x080013bd
 8001158:	080013bd 	.word	0x080013bd
 800115c:	080013bd 	.word	0x080013bd
 8001160:	080013bd 	.word	0x080013bd
 8001164:	080013bd 	.word	0x080013bd
 8001168:	080013bd 	.word	0x080013bd
 800116c:	080013bd 	.word	0x080013bd
 8001170:	080013bd 	.word	0x080013bd
 8001174:	080013bd 	.word	0x080013bd
 8001178:	080013bd 	.word	0x080013bd
 800117c:	080013bd 	.word	0x080013bd
 8001180:	080013bd 	.word	0x080013bd
 8001184:	080013bd 	.word	0x080013bd
 8001188:	08001263 	.word	0x08001263
 800118c:	080012e3 	.word	0x080012e3
 8001190:	080013bd 	.word	0x080013bd
 8001194:	080013bd 	.word	0x080013bd
 8001198:	080013bd 	.word	0x080013bd
 800119c:	080013bd 	.word	0x080013bd
 80011a0:	080013bd 	.word	0x080013bd
 80011a4:	080013bd 	.word	0x080013bd
 80011a8:	08001295 	.word	0x08001295
 80011ac:	080013bd 	.word	0x080013bd
 80011b0:	080013bd 	.word	0x080013bd
 80011b4:	080013bd 	.word	0x080013bd
 80011b8:	08001311 	.word	0x08001311
 80011bc:	08001303 	.word	0x08001303
 80011c0:	080012af 	.word	0x080012af
 80011c4:	080012c9 	.word	0x080012c9
 80011c8:	080011e5 	.word	0x080011e5
 80011cc:	080013bd 	.word	0x080013bd
 80011d0:	080013bd 	.word	0x080013bd
 80011d4:	080013bd 	.word	0x080013bd
 80011d8:	08001273 	.word	0x08001273
 80011dc:	080013bd 	.word	0x080013bd
 80011e0:	080011ff 	.word	0x080011ff
	  	{
	  		case 'q':  // forward
	  			GPIOE->ODR |= 1<<0;  // back
 80011e4:	4b61      	ldr	r3, [pc, #388]	; (800136c <HAL_UART_RxCpltCallback+0x304>)
 80011e6:	695b      	ldr	r3, [r3, #20]
 80011e8:	4a60      	ldr	r2, [pc, #384]	; (800136c <HAL_UART_RxCpltCallback+0x304>)
 80011ea:	f043 0301 	orr.w	r3, r3, #1
 80011ee:	6153      	str	r3, [r2, #20]
	  	  	 	GPIOB->ODR |= 1<<0;  //LD1
 80011f0:	4b5f      	ldr	r3, [pc, #380]	; (8001370 <HAL_UART_RxCpltCallback+0x308>)
 80011f2:	695b      	ldr	r3, [r3, #20]
 80011f4:	4a5e      	ldr	r2, [pc, #376]	; (8001370 <HAL_UART_RxCpltCallback+0x308>)
 80011f6:	f043 0301 	orr.w	r3, r3, #1
 80011fa:	6153      	str	r3, [r2, #20]

	  			break;
 80011fc:	e0de      	b.n	80013bc <HAL_UART_RxCpltCallback+0x354>

	  		case 'w':  // back
	  			GPIOE->ODR &= ~1<<0;  // go
 80011fe:	4b5b      	ldr	r3, [pc, #364]	; (800136c <HAL_UART_RxCpltCallback+0x304>)
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	4a5a      	ldr	r2, [pc, #360]	; (800136c <HAL_UART_RxCpltCallback+0x304>)
 8001204:	f023 0301 	bic.w	r3, r3, #1
 8001208:	6153      	str	r3, [r2, #20]
	  		    GPIOB->ODR &= ~1<<0;  //LD1
 800120a:	4b59      	ldr	r3, [pc, #356]	; (8001370 <HAL_UART_RxCpltCallback+0x308>)
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	4a58      	ldr	r2, [pc, #352]	; (8001370 <HAL_UART_RxCpltCallback+0x308>)
 8001210:	f023 0301 	bic.w	r3, r3, #1
 8001214:	6153      	str	r3, [r2, #20]

	  			break;
 8001216:	e0d1      	b.n	80013bc <HAL_UART_RxCpltCallback+0x354>

	  		case '1':
	  			GPIOG->ODR |= 1<<0;  //stop
 8001218:	4b56      	ldr	r3, [pc, #344]	; (8001374 <HAL_UART_RxCpltCallback+0x30c>)
 800121a:	695b      	ldr	r3, [r3, #20]
 800121c:	4a55      	ldr	r2, [pc, #340]	; (8001374 <HAL_UART_RxCpltCallback+0x30c>)
 800121e:	f043 0301 	orr.w	r3, r3, #1
 8001222:	6153      	str	r3, [r2, #20]

	  			break;
 8001224:	e0ca      	b.n	80013bc <HAL_UART_RxCpltCallback+0x354>

	  		case '2':
	  			  GPIOG->ODR &= ~1<<0;  //start
 8001226:	4b53      	ldr	r3, [pc, #332]	; (8001374 <HAL_UART_RxCpltCallback+0x30c>)
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	4a52      	ldr	r2, [pc, #328]	; (8001374 <HAL_UART_RxCpltCallback+0x30c>)
 800122c:	f023 0301 	bic.w	r3, r3, #1
 8001230:	6153      	str	r3, [r2, #20]

	  			break;
 8001232:	e0c3      	b.n	80013bc <HAL_UART_RxCpltCallback+0x354>

	  		case '3':
	  			TIM3->CCR1 = 50;
 8001234:	4b50      	ldr	r3, [pc, #320]	; (8001378 <HAL_UART_RxCpltCallback+0x310>)
 8001236:	2232      	movs	r2, #50	; 0x32
 8001238:	635a      	str	r2, [r3, #52]	; 0x34
	  		//	TIM3->CCR2 = 50;

	  			break;
 800123a:	e0bf      	b.n	80013bc <HAL_UART_RxCpltCallback+0x354>

	  		case '4':
	  			TIM3->CCR1 = 100;
 800123c:	4b4e      	ldr	r3, [pc, #312]	; (8001378 <HAL_UART_RxCpltCallback+0x310>)
 800123e:	2264      	movs	r2, #100	; 0x64
 8001240:	635a      	str	r2, [r3, #52]	; 0x34
	  	  		//	TIM3->CCR2 = 100;

	  			break;
 8001242:	e0bb      	b.n	80013bc <HAL_UART_RxCpltCallback+0x354>

	  		case '5':
	  			TIM3->CCR1 = 500;
 8001244:	4b4c      	ldr	r3, [pc, #304]	; (8001378 <HAL_UART_RxCpltCallback+0x310>)
 8001246:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800124a:	635a      	str	r2, [r3, #52]	; 0x34
	  	  	  	//	TIM3->CCR2 = 500;

	  			break;
 800124c:	e0b6      	b.n	80013bc <HAL_UART_RxCpltCallback+0x354>

	  		case '6':
	  			TIM3->CCR1 = 800;
 800124e:	4b4a      	ldr	r3, [pc, #296]	; (8001378 <HAL_UART_RxCpltCallback+0x310>)
 8001250:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001254:	635a      	str	r2, [r3, #52]	; 0x34
	  	  	  	//	TIM3->CCR2 = 800;
	  			break;
 8001256:	e0b1      	b.n	80013bc <HAL_UART_RxCpltCallback+0x354>

	  		case '7':
	  			TIM3->CCR1 = 1000;
 8001258:	4b47      	ldr	r3, [pc, #284]	; (8001378 <HAL_UART_RxCpltCallback+0x310>)
 800125a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800125e:	635a      	str	r2, [r3, #52]	; 0x34
	  	  	//  		TIM3->CCR2 = 1000;

	  			break;
 8001260:	e0ac      	b.n	80013bc <HAL_UART_RxCpltCallback+0x354>

	  		case 'a':
	  			  TIM4->CNT=10000;
 8001262:	4b3c      	ldr	r3, [pc, #240]	; (8001354 <HAL_UART_RxCpltCallback+0x2ec>)
 8001264:	f242 7210 	movw	r2, #10000	; 0x2710
 8001268:	625a      	str	r2, [r3, #36]	; 0x24

	  		  key_flag=1;
 800126a:	4b44      	ldr	r3, [pc, #272]	; (800137c <HAL_UART_RxCpltCallback+0x314>)
 800126c:	2201      	movs	r2, #1
 800126e:	701a      	strb	r2, [r3, #0]

	  			break;
 8001270:	e0a4      	b.n	80013bc <HAL_UART_RxCpltCallback+0x354>


	  		case 'u':
	  			if(position_start==0)
 8001272:	4b43      	ldr	r3, [pc, #268]	; (8001380 <HAL_UART_RxCpltCallback+0x318>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d103      	bne.n	8001282 <HAL_UART_RxCpltCallback+0x21a>
	  			{
	  				position_start=1;
 800127a:	4b41      	ldr	r3, [pc, #260]	; (8001380 <HAL_UART_RxCpltCallback+0x318>)
 800127c:	2201      	movs	r2, #1
 800127e:	601a      	str	r2, [r3, #0]
	  			else if(position_start==1)
	  		    {
	  				position_start=0;

	  			}
	  			  			 break;
 8001280:	e099      	b.n	80013b6 <HAL_UART_RxCpltCallback+0x34e>
	  			else if(position_start==1)
 8001282:	4b3f      	ldr	r3, [pc, #252]	; (8001380 <HAL_UART_RxCpltCallback+0x318>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2b01      	cmp	r3, #1
 8001288:	f040 8095 	bne.w	80013b6 <HAL_UART_RxCpltCallback+0x34e>
	  				position_start=0;
 800128c:	4b3c      	ldr	r3, [pc, #240]	; (8001380 <HAL_UART_RxCpltCallback+0x318>)
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
	  			  			 break;
 8001292:	e090      	b.n	80013b6 <HAL_UART_RxCpltCallback+0x34e>
	  			case 'i':
	  			      TIM4->CNT=10000;
 8001294:	4b2f      	ldr	r3, [pc, #188]	; (8001354 <HAL_UART_RxCpltCallback+0x2ec>)
 8001296:	f242 7210 	movw	r2, #10000	; 0x2710
 800129a:	625a      	str	r2, [r3, #36]	; 0x24
	  			    input_position=10000+500*1;
 800129c:	4b39      	ldr	r3, [pc, #228]	; (8001384 <HAL_UART_RxCpltCallback+0x31c>)
 800129e:	f642 1204 	movw	r2, #10500	; 0x2904
 80012a2:	801a      	strh	r2, [r3, #0]
	  			  	  err_sum=0;
 80012a4:	4b38      	ldr	r3, [pc, #224]	; (8001388 <HAL_UART_RxCpltCallback+0x320>)
 80012a6:	f04f 0200 	mov.w	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
	  			 break;
 80012ac:	e086      	b.n	80013bc <HAL_UART_RxCpltCallback+0x354>
	  			case 'o':
	  				  TIM4->CNT=10000;
 80012ae:	4b29      	ldr	r3, [pc, #164]	; (8001354 <HAL_UART_RxCpltCallback+0x2ec>)
 80012b0:	f242 7210 	movw	r2, #10000	; 0x2710
 80012b4:	625a      	str	r2, [r3, #36]	; 0x24
	  				input_position=10000+512*2;
 80012b6:	4b33      	ldr	r3, [pc, #204]	; (8001384 <HAL_UART_RxCpltCallback+0x31c>)
 80012b8:	f642 3210 	movw	r2, #11024	; 0x2b10
 80012bc:	801a      	strh	r2, [r3, #0]
	  				  err_sum=0;
 80012be:	4b32      	ldr	r3, [pc, #200]	; (8001388 <HAL_UART_RxCpltCallback+0x320>)
 80012c0:	f04f 0200 	mov.w	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
	  			break;
 80012c6:	e079      	b.n	80013bc <HAL_UART_RxCpltCallback+0x354>
	  			case 'p':
	  				   TIM4->CNT=10000;
 80012c8:	4b22      	ldr	r3, [pc, #136]	; (8001354 <HAL_UART_RxCpltCallback+0x2ec>)
 80012ca:	f242 7210 	movw	r2, #10000	; 0x2710
 80012ce:	625a      	str	r2, [r3, #36]	; 0x24
	  				 input_position=10000-500*1;
 80012d0:	4b2c      	ldr	r3, [pc, #176]	; (8001384 <HAL_UART_RxCpltCallback+0x31c>)
 80012d2:	f242 521c 	movw	r2, #9500	; 0x251c
 80012d6:	801a      	strh	r2, [r3, #0]
	  			 	   err_sum=0;
 80012d8:	4b2b      	ldr	r3, [pc, #172]	; (8001388 <HAL_UART_RxCpltCallback+0x320>)
 80012da:	f04f 0200 	mov.w	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
	  			 break;
 80012e0:	e06c      	b.n	80013bc <HAL_UART_RxCpltCallback+0x354>

	  			case 'b':

	  				if(step_enable==0)
 80012e2:	4b2a      	ldr	r3, [pc, #168]	; (800138c <HAL_UART_RxCpltCallback+0x324>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d103      	bne.n	80012f2 <HAL_UART_RxCpltCallback+0x28a>
	     			{
	  					step_enable=1;
 80012ea:	4b28      	ldr	r3, [pc, #160]	; (800138c <HAL_UART_RxCpltCallback+0x324>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	601a      	str	r2, [r3, #0]
	  			 	}
	  				else if(step_enable==1)
	  			   {
	  					step_enable=0;
                    }
	  			  break;
 80012f0:	e063      	b.n	80013ba <HAL_UART_RxCpltCallback+0x352>
	  				else if(step_enable==1)
 80012f2:	4b26      	ldr	r3, [pc, #152]	; (800138c <HAL_UART_RxCpltCallback+0x324>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d15f      	bne.n	80013ba <HAL_UART_RxCpltCallback+0x352>
	  					step_enable=0;
 80012fa:	4b24      	ldr	r3, [pc, #144]	; (800138c <HAL_UART_RxCpltCallback+0x324>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
	  			  break;
 8001300:	e05b      	b.n	80013ba <HAL_UART_RxCpltCallback+0x352>
	  			case 'n':
	  			 HAL_GPIO_WritePin(GPIOF,  GPIO_PIN_13, 1);  //정지
 8001302:	2201      	movs	r2, #1
 8001304:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001308:	4821      	ldr	r0, [pc, #132]	; (8001390 <HAL_UART_RxCpltCallback+0x328>)
 800130a:	f004 fc11 	bl	8005b30 <HAL_GPIO_WritePin>

	  				  	break;
 800130e:	e055      	b.n	80013bc <HAL_UART_RxCpltCallback+0x354>

	  			case 'm':
	  				 HAL_GPIO_WritePin(GPIOF,  GPIO_PIN_13, 0);  //출발
 8001310:	2200      	movs	r2, #0
 8001312:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001316:	481e      	ldr	r0, [pc, #120]	; (8001390 <HAL_UART_RxCpltCallback+0x328>)
 8001318:	f004 fc0a 	bl	8005b30 <HAL_GPIO_WritePin>

	  		  	break;
 800131c:	e04e      	b.n	80013bc <HAL_UART_RxCpltCallback+0x354>
	  			case ',':
	  				 HAL_GPIO_WritePin(GPIOF,  GPIO_PIN_14, 0);  //방향
 800131e:	2200      	movs	r2, #0
 8001320:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001324:	481a      	ldr	r0, [pc, #104]	; (8001390 <HAL_UART_RxCpltCallback+0x328>)
 8001326:	f004 fc03 	bl	8005b30 <HAL_GPIO_WritePin>

	  				  	break;
 800132a:	e047      	b.n	80013bc <HAL_UART_RxCpltCallback+0x354>
	  			case '.':
	  				 HAL_GPIO_WritePin(GPIOF,  GPIO_PIN_14, 1);  //방향
 800132c:	2201      	movs	r2, #1
 800132e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001332:	4817      	ldr	r0, [pc, #92]	; (8001390 <HAL_UART_RxCpltCallback+0x328>)
 8001334:	f004 fbfc 	bl	8005b30 <HAL_GPIO_WritePin>

	  				   break;
 8001338:	e040      	b.n	80013bc <HAL_UART_RxCpltCallback+0x354>
	  			case '/': //
	  				rev10_flag=1;
 800133a:	4b16      	ldr	r3, [pc, #88]	; (8001394 <HAL_UART_RxCpltCallback+0x32c>)
 800133c:	2201      	movs	r2, #1
 800133e:	701a      	strb	r2, [r3, #0]
	  				step_count=0;
 8001340:	4b15      	ldr	r3, [pc, #84]	; (8001398 <HAL_UART_RxCpltCallback+0x330>)
 8001342:	2200      	movs	r2, #0
 8001344:	801a      	strh	r2, [r3, #0]
	  				HAL_GPIO_WritePin(GPIOF,  GPIO_PIN_13, 0);  //출발
 8001346:	2200      	movs	r2, #0
 8001348:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800134c:	4810      	ldr	r0, [pc, #64]	; (8001390 <HAL_UART_RxCpltCallback+0x328>)
 800134e:	f004 fbef 	bl	8005b30 <HAL_GPIO_WritePin>

	  				   break;
 8001352:	e033      	b.n	80013bc <HAL_UART_RxCpltCallback+0x354>
 8001354:	40000800 	.word	0x40000800
 8001358:	20000000 	.word	0x20000000
 800135c:	40004800 	.word	0x40004800
 8001360:	20000310 	.word	0x20000310
 8001364:	20000314 	.word	0x20000314
 8001368:	0800dcf8 	.word	0x0800dcf8
 800136c:	40021000 	.word	0x40021000
 8001370:	40020400 	.word	0x40020400
 8001374:	40021800 	.word	0x40021800
 8001378:	40000400 	.word	0x40000400
 800137c:	20000208 	.word	0x20000208
 8001380:	20000204 	.word	0x20000204
 8001384:	20000ebe 	.word	0x20000ebe
 8001388:	20000ec4 	.word	0x20000ec4
 800138c:	2000020c 	.word	0x2000020c
 8001390:	40021400 	.word	0x40021400
 8001394:	20000209 	.word	0x20000209
 8001398:	200003d0 	.word	0x200003d0
	  			case '?': //
	  		     	rev1_flag=1;
 800139c:	4b64      	ldr	r3, [pc, #400]	; (8001530 <HAL_UART_RxCpltCallback+0x4c8>)
 800139e:	2201      	movs	r2, #1
 80013a0:	701a      	strb	r2, [r3, #0]
	  				step_count=0;
 80013a2:	4b64      	ldr	r3, [pc, #400]	; (8001534 <HAL_UART_RxCpltCallback+0x4cc>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	801a      	strh	r2, [r3, #0]
	  				HAL_GPIO_WritePin(GPIOF,  GPIO_PIN_13, 0);  //출발
 80013a8:	2200      	movs	r2, #0
 80013aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013ae:	4862      	ldr	r0, [pc, #392]	; (8001538 <HAL_UART_RxCpltCallback+0x4d0>)
 80013b0:	f004 fbbe 	bl	8005b30 <HAL_GPIO_WritePin>
             		   break;
 80013b4:	e002      	b.n	80013bc <HAL_UART_RxCpltCallback+0x354>
	  			  			 break;
 80013b6:	bf00      	nop
 80013b8:	e000      	b.n	80013bc <HAL_UART_RxCpltCallback+0x354>
	  			  break;
 80013ba:	bf00      	nop




  }
  if(huart->Instance == UART4)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a5e      	ldr	r2, [pc, #376]	; (800153c <HAL_UART_RxCpltCallback+0x4d4>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	f040 80af 	bne.w	8001526 <HAL_UART_RxCpltCallback+0x4be>
    {
	  HAL_UART_Receive_IT(&huart4, &data, 1);
 80013c8:	2201      	movs	r2, #1
 80013ca:	495d      	ldr	r1, [pc, #372]	; (8001540 <HAL_UART_RxCpltCallback+0x4d8>)
 80013cc:	485d      	ldr	r0, [pc, #372]	; (8001544 <HAL_UART_RxCpltCallback+0x4dc>)
 80013ce:	f006 fd74 	bl	8007eba <HAL_UART_Receive_IT>

	  printf("%d -- %c \r\n", data,data);
 80013d2:	4b5b      	ldr	r3, [pc, #364]	; (8001540 <HAL_UART_RxCpltCallback+0x4d8>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	4619      	mov	r1, r3
 80013d8:	4b59      	ldr	r3, [pc, #356]	; (8001540 <HAL_UART_RxCpltCallback+0x4d8>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	485a      	ldr	r0, [pc, #360]	; (8001548 <HAL_UART_RxCpltCallback+0x4e0>)
 80013e0:	f008 ff1e 	bl	800a220 <iprintf>
		switch(data)
 80013e4:	4b56      	ldr	r3, [pc, #344]	; (8001540 <HAL_UART_RxCpltCallback+0x4d8>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	3b21      	subs	r3, #33	; 0x21
 80013ea:	2b20      	cmp	r3, #32
 80013ec:	f200 809b 	bhi.w	8001526 <HAL_UART_RxCpltCallback+0x4be>
 80013f0:	a201      	add	r2, pc, #4	; (adr r2, 80013f8 <HAL_UART_RxCpltCallback+0x390>)
 80013f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013f6:	bf00      	nop
 80013f8:	08001509 	.word	0x08001509
 80013fc:	08001527 	.word	0x08001527
 8001400:	08001527 	.word	0x08001527
 8001404:	08001527 	.word	0x08001527
 8001408:	08001527 	.word	0x08001527
 800140c:	08001527 	.word	0x08001527
 8001410:	08001527 	.word	0x08001527
 8001414:	08001527 	.word	0x08001527
 8001418:	08001527 	.word	0x08001527
 800141c:	08001527 	.word	0x08001527
 8001420:	08001527 	.word	0x08001527
 8001424:	08001527 	.word	0x08001527
 8001428:	08001527 	.word	0x08001527
 800142c:	08001527 	.word	0x08001527
 8001430:	08001527 	.word	0x08001527
 8001434:	0800147d 	.word	0x0800147d
 8001438:	08001497 	.word	0x08001497
 800143c:	080014b1 	.word	0x080014b1
 8001440:	080014bf 	.word	0x080014bf
 8001444:	080014cd 	.word	0x080014cd
 8001448:	080014db 	.word	0x080014db
 800144c:	080014e9 	.word	0x080014e9
 8001450:	080014f7 	.word	0x080014f7
 8001454:	08001527 	.word	0x08001527
 8001458:	08001527 	.word	0x08001527
 800145c:	08001527 	.word	0x08001527
 8001460:	08001527 	.word	0x08001527
 8001464:	08001527 	.word	0x08001527
 8001468:	08001527 	.word	0x08001527
 800146c:	08001527 	.word	0x08001527
 8001470:	08001527 	.word	0x08001527
 8001474:	08001527 	.word	0x08001527
 8001478:	0800151f 	.word	0x0800151f
		{
		case '0':
			 GPIOB->ODR |= 1<<0;
 800147c:	4b33      	ldr	r3, [pc, #204]	; (800154c <HAL_UART_RxCpltCallback+0x4e4>)
 800147e:	695b      	ldr	r3, [r3, #20]
 8001480:	4a32      	ldr	r2, [pc, #200]	; (800154c <HAL_UART_RxCpltCallback+0x4e4>)
 8001482:	f043 0301 	orr.w	r3, r3, #1
 8001486:	6153      	str	r3, [r2, #20]
			GPIOG->ODR &= ~1<<0;// start
 8001488:	4b31      	ldr	r3, [pc, #196]	; (8001550 <HAL_UART_RxCpltCallback+0x4e8>)
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	4a30      	ldr	r2, [pc, #192]	; (8001550 <HAL_UART_RxCpltCallback+0x4e8>)
 800148e:	f023 0301 	bic.w	r3, r3, #1
 8001492:	6153      	str	r3, [r2, #20]

			break;
 8001494:	e047      	b.n	8001526 <HAL_UART_RxCpltCallback+0x4be>

		case '1':  //stop
			  GPIOB->ODR &= ~1<<0;
 8001496:	4b2d      	ldr	r3, [pc, #180]	; (800154c <HAL_UART_RxCpltCallback+0x4e4>)
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	4a2c      	ldr	r2, [pc, #176]	; (800154c <HAL_UART_RxCpltCallback+0x4e4>)
 800149c:	f023 0301 	bic.w	r3, r3, #1
 80014a0:	6153      	str	r3, [r2, #20]
	          GPIOG->ODR |= 1<<0;
 80014a2:	4b2b      	ldr	r3, [pc, #172]	; (8001550 <HAL_UART_RxCpltCallback+0x4e8>)
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	4a2a      	ldr	r2, [pc, #168]	; (8001550 <HAL_UART_RxCpltCallback+0x4e8>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	6153      	str	r3, [r2, #20]
			break;
 80014ae:	e03a      	b.n	8001526 <HAL_UART_RxCpltCallback+0x4be>

		case '2':  //dir
			  GPIOE->ODR |= 1<<0;  // back
 80014b0:	4b28      	ldr	r3, [pc, #160]	; (8001554 <HAL_UART_RxCpltCallback+0x4ec>)
 80014b2:	695b      	ldr	r3, [r3, #20]
 80014b4:	4a27      	ldr	r2, [pc, #156]	; (8001554 <HAL_UART_RxCpltCallback+0x4ec>)
 80014b6:	f043 0301 	orr.w	r3, r3, #1
 80014ba:	6153      	str	r3, [r2, #20]
			break;
 80014bc:	e033      	b.n	8001526 <HAL_UART_RxCpltCallback+0x4be>

		case '3'://dir
			 GPIOE->ODR &= ~1<<0; // go
 80014be:	4b25      	ldr	r3, [pc, #148]	; (8001554 <HAL_UART_RxCpltCallback+0x4ec>)
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	4a24      	ldr	r2, [pc, #144]	; (8001554 <HAL_UART_RxCpltCallback+0x4ec>)
 80014c4:	f023 0301 	bic.w	r3, r3, #1
 80014c8:	6153      	str	r3, [r2, #20]
			break;
 80014ca:	e02c      	b.n	8001526 <HAL_UART_RxCpltCallback+0x4be>

		case '4':

		    TIM3->CCR1 = 0;
 80014cc:	4b22      	ldr	r3, [pc, #136]	; (8001558 <HAL_UART_RxCpltCallback+0x4f0>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 0;
 80014d2:	4b21      	ldr	r3, [pc, #132]	; (8001558 <HAL_UART_RxCpltCallback+0x4f0>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	639a      	str	r2, [r3, #56]	; 0x38

			break;
 80014d8:	e025      	b.n	8001526 <HAL_UART_RxCpltCallback+0x4be>

		case '5':
			TIM3->CCR1 = 50;
 80014da:	4b1f      	ldr	r3, [pc, #124]	; (8001558 <HAL_UART_RxCpltCallback+0x4f0>)
 80014dc:	2232      	movs	r2, #50	; 0x32
 80014de:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 50;
 80014e0:	4b1d      	ldr	r3, [pc, #116]	; (8001558 <HAL_UART_RxCpltCallback+0x4f0>)
 80014e2:	2232      	movs	r2, #50	; 0x32
 80014e4:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 80014e6:	e01e      	b.n	8001526 <HAL_UART_RxCpltCallback+0x4be>

		case '6':
			TIM3->CCR1 = 200;
 80014e8:	4b1b      	ldr	r3, [pc, #108]	; (8001558 <HAL_UART_RxCpltCallback+0x4f0>)
 80014ea:	22c8      	movs	r2, #200	; 0xc8
 80014ec:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 200;
 80014ee:	4b1a      	ldr	r3, [pc, #104]	; (8001558 <HAL_UART_RxCpltCallback+0x4f0>)
 80014f0:	22c8      	movs	r2, #200	; 0xc8
 80014f2:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 80014f4:	e017      	b.n	8001526 <HAL_UART_RxCpltCallback+0x4be>

		case '7':
			TIM3->CCR1 = 1000;
 80014f6:	4b18      	ldr	r3, [pc, #96]	; (8001558 <HAL_UART_RxCpltCallback+0x4f0>)
 80014f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014fc:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 1000;
 80014fe:	4b16      	ldr	r3, [pc, #88]	; (8001558 <HAL_UART_RxCpltCallback+0x4f0>)
 8001500:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001504:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8001506:	e00e      	b.n	8001526 <HAL_UART_RxCpltCallback+0x4be>

		case '!':
			RX_flag=1;
 8001508:	4b14      	ldr	r3, [pc, #80]	; (800155c <HAL_UART_RxCpltCallback+0x4f4>)
 800150a:	2201      	movs	r2, #1
 800150c:	701a      	strb	r2, [r3, #0]
			 TIM2->CNT=0;
 800150e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001512:	2200      	movs	r2, #0
 8001514:	625a      	str	r2, [r3, #36]	; 0x24
			 TIM4->CNT=0;
 8001516:	4b12      	ldr	r3, [pc, #72]	; (8001560 <HAL_UART_RxCpltCallback+0x4f8>)
 8001518:	2200      	movs	r2, #0
 800151a:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 800151c:	e003      	b.n	8001526 <HAL_UART_RxCpltCallback+0x4be>
		case 'A':  //Tx

			RX_flag=2;
 800151e:	4b0f      	ldr	r3, [pc, #60]	; (800155c <HAL_UART_RxCpltCallback+0x4f4>)
 8001520:	2202      	movs	r2, #2
 8001522:	701a      	strb	r2, [r3, #0]
				break;
 8001524:	bf00      	nop



    }

}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	2000020a 	.word	0x2000020a
 8001534:	200003d0 	.word	0x200003d0
 8001538:	40021400 	.word	0x40021400
 800153c:	40004c00 	.word	0x40004c00
 8001540:	2000035c 	.word	0x2000035c
 8001544:	20000360 	.word	0x20000360
 8001548:	0800dd04 	.word	0x0800dd04
 800154c:	40020400 	.word	0x40020400
 8001550:	40021800 	.word	0x40021800
 8001554:	40021000 	.word	0x40021000
 8001558:	40000400 	.word	0x40000400
 800155c:	200003a8 	.word	0x200003a8
 8001560:	40000800 	.word	0x40000800

08001564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001568:	f002 fb10 	bl	8003b8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800156c:	f000 f978 	bl	8001860 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001570:	f000 fed8 	bl	8002324 <MX_GPIO_Init>
  MX_DMA_Init();
 8001574:	f000 fea0 	bl	80022b8 <MX_DMA_Init>
  MX_ETH_Init();
 8001578:	f000 fa4c 	bl	8001a14 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800157c:	f000 fe44 	bl	8002208 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001580:	f000 fe6c 	bl	800225c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 8001584:	f000 fb3c 	bl	8001c00 <MX_TIM3_Init>
  MX_TIM14_Init();
 8001588:	f000 fddc 	bl	8002144 <MX_TIM14_Init>
  MX_TIM4_Init();
 800158c:	f000 fbe8 	bl	8001d60 <MX_TIM4_Init>
  MX_UART4_Init();
 8001590:	f000 fe10 	bl	80021b4 <MX_UART4_Init>
  MX_TIM2_Init();
 8001594:	f000 fadc 	bl	8001b50 <MX_TIM2_Init>
  MX_TIM8_Init();
 8001598:	f000 fcaa 	bl	8001ef0 <MX_TIM8_Init>
  MX_TIM6_Init();
 800159c:	f000 fc3a 	bl	8001e14 <MX_TIM6_Init>
  MX_TIM13_Init();
 80015a0:	f000 fd80 	bl	80020a4 <MX_TIM13_Init>
  MX_TIM1_Init();
 80015a4:	f000 fa84 	bl	8001ab0 <MX_TIM1_Init>
  MX_ADC3_Init();
 80015a8:	f000 f9c4 	bl	8001934 <MX_ADC3_Init>
  MX_TIM7_Init();
 80015ac:	f000 fc6a 	bl	8001e84 <MX_TIM7_Init>
  MX_TIM12_Init();
 80015b0:	f000 fd3e 	bl	8002030 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */


  HAL_UART_Receive_IT(&huart3, &key_value, 1);
 80015b4:	2201      	movs	r2, #1
 80015b6:	498a      	ldr	r1, [pc, #552]	; (80017e0 <main+0x27c>)
 80015b8:	488a      	ldr	r0, [pc, #552]	; (80017e4 <main+0x280>)
 80015ba:	f006 fc7e 	bl	8007eba <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart4, &data, 1);
 80015be:	2201      	movs	r2, #1
 80015c0:	4989      	ldr	r1, [pc, #548]	; (80017e8 <main+0x284>)
 80015c2:	488a      	ldr	r0, [pc, #552]	; (80017ec <main+0x288>)
 80015c4:	f006 fc79 	bl	8007eba <HAL_UART_Receive_IT>


  HAL_ADC_Start_DMA(&hadc3, (uint32_t*)ADC3_value, 3);
 80015c8:	2203      	movs	r2, #3
 80015ca:	4989      	ldr	r1, [pc, #548]	; (80017f0 <main+0x28c>)
 80015cc:	4889      	ldr	r0, [pc, #548]	; (80017f4 <main+0x290>)
 80015ce:	f002 fcc7 	bl	8003f60 <HAL_ADC_Start_DMA>




   HAL_TIM_Base_Start_IT(&htim6);
 80015d2:	4889      	ldr	r0, [pc, #548]	; (80017f8 <main+0x294>)
 80015d4:	f005 f924 	bl	8006820 <HAL_TIM_Base_Start_IT>
   HAL_TIM_Base_Start_IT(&htim7);
 80015d8:	4888      	ldr	r0, [pc, #544]	; (80017fc <main+0x298>)
 80015da:	f005 f921 	bl	8006820 <HAL_TIM_Base_Start_IT>

   HAL_TIM_Base_Start(&htim1);
 80015de:	4888      	ldr	r0, [pc, #544]	; (8001800 <main+0x29c>)
 80015e0:	f005 f8b6 	bl	8006750 <HAL_TIM_Base_Start>
   HAL_TIM_Base_Start_IT(&htim12);
 80015e4:	4887      	ldr	r0, [pc, #540]	; (8001804 <main+0x2a0>)
 80015e6:	f005 f91b 	bl	8006820 <HAL_TIM_Base_Start_IT>
   setvbuf(stdin, NULL, _IONBF, 0);
 80015ea:	4b87      	ldr	r3, [pc, #540]	; (8001808 <main+0x2a4>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6858      	ldr	r0, [r3, #4]
 80015f0:	2300      	movs	r3, #0
 80015f2:	2202      	movs	r2, #2
 80015f4:	2100      	movs	r1, #0
 80015f6:	f008 fe25 	bl	800a244 <setvbuf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  encoder_count=TIM4->CNT;
 80015fa:	4b84      	ldr	r3, [pc, #528]	; (800180c <main+0x2a8>)
 80015fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fe:	4a84      	ldr	r2, [pc, #528]	; (8001810 <main+0x2ac>)
 8001600:	6013      	str	r3, [r2, #0]


	  if(step_enable==1)
 8001602:	4b84      	ldr	r3, [pc, #528]	; (8001814 <main+0x2b0>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d149      	bne.n	800169e <main+0x13a>
	  {
		 // step_motor();

		   for(step_count=0; step_count<40000; step_count++) //40000은 별 의미 없음
 800160a:	4b83      	ldr	r3, [pc, #524]	; (8001818 <main+0x2b4>)
 800160c:	2200      	movs	r2, #0
 800160e:	801a      	strh	r2, [r3, #0]
 8001610:	e03f      	b.n	8001692 <main+0x12e>
	     {
	     HAL_GPIO_WritePin(GPIOF,  GPIO_PIN_15, 0);  //펄스
 8001612:	2200      	movs	r2, #0
 8001614:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001618:	4880      	ldr	r0, [pc, #512]	; (800181c <main+0x2b8>)
 800161a:	f004 fa89 	bl	8005b30 <HAL_GPIO_WritePin>
	     microDelay(delay_us);
 800161e:	4b80      	ldr	r3, [pc, #512]	; (8001820 <main+0x2bc>)
 8001620:	881b      	ldrh	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f001 f8e6 	bl	80027f4 <microDelay>
	     HAL_GPIO_WritePin(GPIOF,  GPIO_PIN_15, 1);
 8001628:	2201      	movs	r2, #1
 800162a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800162e:	487b      	ldr	r0, [pc, #492]	; (800181c <main+0x2b8>)
 8001630:	f004 fa7e 	bl	8005b30 <HAL_GPIO_WritePin>
	     microDelay(delay_us);
 8001634:	4b7a      	ldr	r3, [pc, #488]	; (8001820 <main+0x2bc>)
 8001636:	881b      	ldrh	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f001 f8db 	bl	80027f4 <microDelay>
	     if(step_count==200*10 && rev10_flag==1)  //10회전 정지
 800163e:	4b76      	ldr	r3, [pc, #472]	; (8001818 <main+0x2b4>)
 8001640:	881b      	ldrh	r3, [r3, #0]
 8001642:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001646:	d10d      	bne.n	8001664 <main+0x100>
 8001648:	4b76      	ldr	r3, [pc, #472]	; (8001824 <main+0x2c0>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d109      	bne.n	8001664 <main+0x100>
	     {
	    	 HAL_GPIO_WritePin(GPIOF,  GPIO_PIN_13, 1);  //정지
 8001650:	2201      	movs	r2, #1
 8001652:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001656:	4871      	ldr	r0, [pc, #452]	; (800181c <main+0x2b8>)
 8001658:	f004 fa6a 	bl	8005b30 <HAL_GPIO_WritePin>
	    	 rev10_flag=0;
 800165c:	4b71      	ldr	r3, [pc, #452]	; (8001824 <main+0x2c0>)
 800165e:	2200      	movs	r2, #0
 8001660:	701a      	strb	r2, [r3, #0]
 8001662:	e010      	b.n	8001686 <main+0x122>
	     }
	     else if(step_count==200*1 && rev1_flag==1) //1회전 정지
 8001664:	4b6c      	ldr	r3, [pc, #432]	; (8001818 <main+0x2b4>)
 8001666:	881b      	ldrh	r3, [r3, #0]
 8001668:	2bc8      	cmp	r3, #200	; 0xc8
 800166a:	d10c      	bne.n	8001686 <main+0x122>
 800166c:	4b6e      	ldr	r3, [pc, #440]	; (8001828 <main+0x2c4>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d108      	bne.n	8001686 <main+0x122>
	     {
	      	 HAL_GPIO_WritePin(GPIOF,  GPIO_PIN_13, 1);  //정지
 8001674:	2201      	movs	r2, #1
 8001676:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800167a:	4868      	ldr	r0, [pc, #416]	; (800181c <main+0x2b8>)
 800167c:	f004 fa58 	bl	8005b30 <HAL_GPIO_WritePin>
	      	 rev1_flag=0;
 8001680:	4b69      	ldr	r3, [pc, #420]	; (8001828 <main+0x2c4>)
 8001682:	2200      	movs	r2, #0
 8001684:	701a      	strb	r2, [r3, #0]
		   for(step_count=0; step_count<40000; step_count++) //40000은 별 의미 없음
 8001686:	4b64      	ldr	r3, [pc, #400]	; (8001818 <main+0x2b4>)
 8001688:	881b      	ldrh	r3, [r3, #0]
 800168a:	3301      	adds	r3, #1
 800168c:	b29a      	uxth	r2, r3
 800168e:	4b62      	ldr	r3, [pc, #392]	; (8001818 <main+0x2b4>)
 8001690:	801a      	strh	r2, [r3, #0]
 8001692:	4b61      	ldr	r3, [pc, #388]	; (8001818 <main+0x2b4>)
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800169a:	4293      	cmp	r3, r2
 800169c:	d9b9      	bls.n	8001612 <main+0xae>
	    }
	  }



	  if(tim6_flag==1)
 800169e:	4b63      	ldr	r3, [pc, #396]	; (800182c <main+0x2c8>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d104      	bne.n	80016b0 <main+0x14c>
	  {
		  distance_sensor();  //거리 센서
 80016a6:	f001 f8bf 	bl	8002828 <distance_sensor>

	       tim6_flag=0;
 80016aa:	4b60      	ldr	r3, [pc, #384]	; (800182c <main+0x2c8>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
	  }
	  if(tim14_flag==20) //2초
 80016b0:	4b5f      	ldr	r3, [pc, #380]	; (8001830 <main+0x2cc>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b14      	cmp	r3, #20
 80016b6:	d14f      	bne.n	8001758 <main+0x1f4>
	  {
		  //  RPM_uint16=RPM*100;    // float를 uint로 변경
		  RPM_uint16=ADC3_value[0]*10;  //나중에 rpm으로 변경
 80016b8:	4b4d      	ldr	r3, [pc, #308]	; (80017f0 <main+0x28c>)
 80016ba:	881b      	ldrh	r3, [r3, #0]
 80016bc:	461a      	mov	r2, r3
 80016be:	0092      	lsls	r2, r2, #2
 80016c0:	4413      	add	r3, r2
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	4b5b      	ldr	r3, [pc, #364]	; (8001834 <main+0x2d0>)
 80016c8:	801a      	strh	r2, [r3, #0]
		  battery_uint16 = battery_V*100;
 80016ca:	4b5b      	ldr	r3, [pc, #364]	; (8001838 <main+0x2d4>)
 80016cc:	edd3 7a00 	vldr	s15, [r3]
 80016d0:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 800183c <main+0x2d8>
 80016d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016dc:	ee17 3a90 	vmov	r3, s15
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	4b57      	ldr	r3, [pc, #348]	; (8001840 <main+0x2dc>)
 80016e4:	801a      	strh	r2, [r3, #0]
	/*	    ENC[3]=RPM_uint16 / 1000;		// 10000 ?���???????????????????????????????????????
    	    ENC[2]=RPM_uint16 % 1000/100;	// 1000 ?���???????????????????????????????????????
			ENC[1]= RPM_uint16 % 100/10;	// 100 ?���???????????????????????????????????????
		 	ENC[0]=RPM_uint16 % 10/1;		// 10 ?���???????????????????????????????????????
*/
		   	SerialSendChar_WIFI('?');
 80016e6:	203f      	movs	r0, #63	; 0x3f
 80016e8:	f7ff fca6 	bl	8001038 <SerialSendChar_WIFI>
  	 sprintf((char *)buffer, "%d \r\n",RPM_uint16);
  	HAL_UART_Transmit(&huart3, buffer, strlen((char *)buffer), 100);
*/

//배터리, 속도 전송
	  sprintf((char *)buffer, "%d",battery_uint16);
 80016ec:	4b54      	ldr	r3, [pc, #336]	; (8001840 <main+0x2dc>)
 80016ee:	881b      	ldrh	r3, [r3, #0]
 80016f0:	461a      	mov	r2, r3
 80016f2:	4954      	ldr	r1, [pc, #336]	; (8001844 <main+0x2e0>)
 80016f4:	4854      	ldr	r0, [pc, #336]	; (8001848 <main+0x2e4>)
 80016f6:	f008 fe53 	bl	800a3a0 <siprintf>
	HAL_UART_Transmit(&huart4, buffer, strlen((char *)buffer), 100);
 80016fa:	4853      	ldr	r0, [pc, #332]	; (8001848 <main+0x2e4>)
 80016fc:	f7fe fdc8 	bl	8000290 <strlen>
 8001700:	4603      	mov	r3, r0
 8001702:	b29a      	uxth	r2, r3
 8001704:	2364      	movs	r3, #100	; 0x64
 8001706:	4950      	ldr	r1, [pc, #320]	; (8001848 <main+0x2e4>)
 8001708:	4838      	ldr	r0, [pc, #224]	; (80017ec <main+0x288>)
 800170a:	f006 fb4b 	bl	8007da4 <HAL_UART_Transmit>
  	sprintf((char *)buffer, "%d",RPM_uint16);
 800170e:	4b49      	ldr	r3, [pc, #292]	; (8001834 <main+0x2d0>)
 8001710:	881b      	ldrh	r3, [r3, #0]
 8001712:	461a      	mov	r2, r3
 8001714:	494b      	ldr	r1, [pc, #300]	; (8001844 <main+0x2e0>)
 8001716:	484c      	ldr	r0, [pc, #304]	; (8001848 <main+0x2e4>)
 8001718:	f008 fe42 	bl	800a3a0 <siprintf>
  	HAL_UART_Transmit(&huart4, buffer, strlen((char *)buffer), 100);
 800171c:	484a      	ldr	r0, [pc, #296]	; (8001848 <main+0x2e4>)
 800171e:	f7fe fdb7 	bl	8000290 <strlen>
 8001722:	4603      	mov	r3, r0
 8001724:	b29a      	uxth	r2, r3
 8001726:	2364      	movs	r3, #100	; 0x64
 8001728:	4947      	ldr	r1, [pc, #284]	; (8001848 <main+0x2e4>)
 800172a:	4830      	ldr	r0, [pc, #192]	; (80017ec <main+0x288>)
 800172c:	f006 fb3a 	bl	8007da4 <HAL_UART_Transmit>
  	  sprintf((char *)buffer, "%d",battery_uint16);
 8001730:	4b43      	ldr	r3, [pc, #268]	; (8001840 <main+0x2dc>)
 8001732:	881b      	ldrh	r3, [r3, #0]
 8001734:	461a      	mov	r2, r3
 8001736:	4943      	ldr	r1, [pc, #268]	; (8001844 <main+0x2e0>)
 8001738:	4843      	ldr	r0, [pc, #268]	; (8001848 <main+0x2e4>)
 800173a:	f008 fe31 	bl	800a3a0 <siprintf>
  	HAL_UART_Transmit(&huart4, buffer, strlen((char *)buffer), 100);
 800173e:	4842      	ldr	r0, [pc, #264]	; (8001848 <main+0x2e4>)
 8001740:	f7fe fda6 	bl	8000290 <strlen>
 8001744:	4603      	mov	r3, r0
 8001746:	b29a      	uxth	r2, r3
 8001748:	2364      	movs	r3, #100	; 0x64
 800174a:	493f      	ldr	r1, [pc, #252]	; (8001848 <main+0x2e4>)
 800174c:	4827      	ldr	r0, [pc, #156]	; (80017ec <main+0x288>)
 800174e:	f006 fb29 	bl	8007da4 <HAL_UART_Transmit>

	 	 //  	  HAL_Delay(2000);

		  tim14_flag=0;
 8001752:	4b37      	ldr	r3, [pc, #220]	; (8001830 <main+0x2cc>)
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
	  }
	  if(tim7_flag==1)
 8001758:	4b3c      	ldr	r3, [pc, #240]	; (800184c <main+0x2e8>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d108      	bne.n	8001772 <main+0x20e>
	  {
		  if(position_start==1)
 8001760:	4b3b      	ldr	r3, [pc, #236]	; (8001850 <main+0x2ec>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d104      	bne.n	8001772 <main+0x20e>
		  	{
			  position_pid();
 8001768:	f000 ff06 	bl	8002578 <position_pid>

			  tim7_flag=0;
 800176c:	4b37      	ldr	r3, [pc, #220]	; (800184c <main+0x2e8>)
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]





	  if(RX_flag==1)
 8001772:	4b38      	ldr	r3, [pc, #224]	; (8001854 <main+0x2f0>)
 8001774:	f993 3000 	ldrsb.w	r3, [r3]
 8001778:	2b01      	cmp	r3, #1
 800177a:	f47f af3e 	bne.w	80015fa <main+0x96>
	  {
		 // RX_flag=0;
		//  TIM4->CNT=0;
	  	 		TIM3->CCR1 = 1000;
 800177e:	4b36      	ldr	r3, [pc, #216]	; (8001858 <main+0x2f4>)
 8001780:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001784:	635a      	str	r2, [r3, #52]	; 0x34
	  	 		TIM3->CCR2 = 1000;
 8001786:	4b34      	ldr	r3, [pc, #208]	; (8001858 <main+0x2f4>)
 8001788:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800178c:	639a      	str	r2, [r3, #56]	; 0x38
	  	 			if(encoder_count>=1200)
 800178e:	4b20      	ldr	r3, [pc, #128]	; (8001810 <main+0x2ac>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001796:	f4ff af30 	bcc.w	80015fa <main+0x96>
	  		 		{
	  	 				TIM3->CCR1 = 50;
 800179a:	4b2f      	ldr	r3, [pc, #188]	; (8001858 <main+0x2f4>)
 800179c:	2232      	movs	r2, #50	; 0x32
 800179e:	635a      	str	r2, [r3, #52]	; 0x34

	  	 				GPIOG->ODR |= 1<<0;
 80017a0:	4b2e      	ldr	r3, [pc, #184]	; (800185c <main+0x2f8>)
 80017a2:	695b      	ldr	r3, [r3, #20]
 80017a4:	4a2d      	ldr	r2, [pc, #180]	; (800185c <main+0x2f8>)
 80017a6:	f043 0301 	orr.w	r3, r3, #1
 80017aa:	6153      	str	r3, [r2, #20]
	  	 				HAL_Delay(100);
 80017ac:	2064      	movs	r0, #100	; 0x64
 80017ae:	f002 fa5f 	bl	8003c70 <HAL_Delay>
	  	 				GPIOG->ODR &= ~1<<0;
 80017b2:	4b2a      	ldr	r3, [pc, #168]	; (800185c <main+0x2f8>)
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	4a29      	ldr	r2, [pc, #164]	; (800185c <main+0x2f8>)
 80017b8:	f023 0301 	bic.w	r3, r3, #1
 80017bc:	6153      	str	r3, [r2, #20]
	  	 				TIM3->CCR1 = 50;
 80017be:	4b26      	ldr	r3, [pc, #152]	; (8001858 <main+0x2f4>)
 80017c0:	2232      	movs	r2, #50	; 0x32
 80017c2:	635a      	str	r2, [r3, #52]	; 0x34
	  	 				if(encoder_count>=512*3)
 80017c4:	4b12      	ldr	r3, [pc, #72]	; (8001810 <main+0x2ac>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80017cc:	f4ff af15 	bcc.w	80015fa <main+0x96>
	  	 				{
	  	 					TIM3->CCR1 = 0;
 80017d0:	4b21      	ldr	r3, [pc, #132]	; (8001858 <main+0x2f4>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	635a      	str	r2, [r3, #52]	; 0x34
	  	 					RX_flag=0;
 80017d6:	4b1f      	ldr	r3, [pc, #124]	; (8001854 <main+0x2f0>)
 80017d8:	2200      	movs	r2, #0
 80017da:	701a      	strb	r2, [r3, #0]
	  encoder_count=TIM4->CNT;
 80017dc:	e70d      	b.n	80015fa <main+0x96>
 80017de:	bf00      	nop
 80017e0:	20000310 	.word	0x20000310
 80017e4:	20000314 	.word	0x20000314
 80017e8:	2000035c 	.word	0x2000035c
 80017ec:	20000360 	.word	0x20000360
 80017f0:	200003c4 	.word	0x200003c4
 80017f4:	2000054c 	.word	0x2000054c
 80017f8:	200007c4 	.word	0x200007c4
 80017fc:	2000080c 	.word	0x2000080c
 8001800:	200006a4 	.word	0x200006a4
 8001804:	2000089c 	.word	0x2000089c
 8001808:	20000074 	.word	0x20000074
 800180c:	40000800 	.word	0x40000800
 8001810:	20000000 	.word	0x20000000
 8001814:	2000020c 	.word	0x2000020c
 8001818:	200003d0 	.word	0x200003d0
 800181c:	40021400 	.word	0x40021400
 8001820:	20000004 	.word	0x20000004
 8001824:	20000209 	.word	0x20000209
 8001828:	2000020a 	.word	0x2000020a
 800182c:	20000f2c 	.word	0x20000f2c
 8001830:	20000f30 	.word	0x20000f30
 8001834:	200003bc 	.word	0x200003bc
 8001838:	20000f18 	.word	0x20000f18
 800183c:	42c80000 	.word	0x42c80000
 8001840:	200003be 	.word	0x200003be
 8001844:	0800dd10 	.word	0x0800dd10
 8001848:	20000210 	.word	0x20000210
 800184c:	20000f28 	.word	0x20000f28
 8001850:	20000204 	.word	0x20000204
 8001854:	200003a8 	.word	0x200003a8
 8001858:	40000400 	.word	0x40000400
 800185c:	40021800 	.word	0x40021800

08001860 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b094      	sub	sp, #80	; 0x50
 8001864:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001866:	f107 0320 	add.w	r3, r7, #32
 800186a:	2230      	movs	r2, #48	; 0x30
 800186c:	2100      	movs	r1, #0
 800186e:	4618      	mov	r0, r3
 8001870:	f008 fdf9 	bl	800a466 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001874:	f107 030c 	add.w	r3, r7, #12
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001884:	2300      	movs	r3, #0
 8001886:	60bb      	str	r3, [r7, #8]
 8001888:	4b28      	ldr	r3, [pc, #160]	; (800192c <SystemClock_Config+0xcc>)
 800188a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188c:	4a27      	ldr	r2, [pc, #156]	; (800192c <SystemClock_Config+0xcc>)
 800188e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001892:	6413      	str	r3, [r2, #64]	; 0x40
 8001894:	4b25      	ldr	r3, [pc, #148]	; (800192c <SystemClock_Config+0xcc>)
 8001896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001898:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189c:	60bb      	str	r3, [r7, #8]
 800189e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018a0:	2300      	movs	r3, #0
 80018a2:	607b      	str	r3, [r7, #4]
 80018a4:	4b22      	ldr	r3, [pc, #136]	; (8001930 <SystemClock_Config+0xd0>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a21      	ldr	r2, [pc, #132]	; (8001930 <SystemClock_Config+0xd0>)
 80018aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018ae:	6013      	str	r3, [r2, #0]
 80018b0:	4b1f      	ldr	r3, [pc, #124]	; (8001930 <SystemClock_Config+0xd0>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018b8:	607b      	str	r3, [r7, #4]
 80018ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018bc:	2301      	movs	r3, #1
 80018be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80018c0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018c6:	2302      	movs	r3, #2
 80018c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018d0:	2304      	movs	r3, #4
 80018d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80018d4:	23a8      	movs	r3, #168	; 0xa8
 80018d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018d8:	2302      	movs	r3, #2
 80018da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80018dc:	2307      	movs	r3, #7
 80018de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018e0:	f107 0320 	add.w	r3, r7, #32
 80018e4:	4618      	mov	r0, r3
 80018e6:	f004 fa4b 	bl	8005d80 <HAL_RCC_OscConfig>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80018f0:	f000 fe3c 	bl	800256c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018f4:	230f      	movs	r3, #15
 80018f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018f8:	2302      	movs	r3, #2
 80018fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001900:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001904:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001906:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800190a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800190c:	f107 030c 	add.w	r3, r7, #12
 8001910:	2105      	movs	r1, #5
 8001912:	4618      	mov	r0, r3
 8001914:	f004 fcac 	bl	8006270 <HAL_RCC_ClockConfig>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800191e:	f000 fe25 	bl	800256c <Error_Handler>
  }
}
 8001922:	bf00      	nop
 8001924:	3750      	adds	r7, #80	; 0x50
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40023800 	.word	0x40023800
 8001930:	40007000 	.word	0x40007000

08001934 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800193a:	463b      	mov	r3, r7
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001946:	4b31      	ldr	r3, [pc, #196]	; (8001a0c <MX_ADC3_Init+0xd8>)
 8001948:	4a31      	ldr	r2, [pc, #196]	; (8001a10 <MX_ADC3_Init+0xdc>)
 800194a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800194c:	4b2f      	ldr	r3, [pc, #188]	; (8001a0c <MX_ADC3_Init+0xd8>)
 800194e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001952:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_10B;
 8001954:	4b2d      	ldr	r3, [pc, #180]	; (8001a0c <MX_ADC3_Init+0xd8>)
 8001956:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800195a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 800195c:	4b2b      	ldr	r3, [pc, #172]	; (8001a0c <MX_ADC3_Init+0xd8>)
 800195e:	2201      	movs	r2, #1
 8001960:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001962:	4b2a      	ldr	r3, [pc, #168]	; (8001a0c <MX_ADC3_Init+0xd8>)
 8001964:	2200      	movs	r2, #0
 8001966:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001968:	4b28      	ldr	r3, [pc, #160]	; (8001a0c <MX_ADC3_Init+0xd8>)
 800196a:	2200      	movs	r2, #0
 800196c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001970:	4b26      	ldr	r3, [pc, #152]	; (8001a0c <MX_ADC3_Init+0xd8>)
 8001972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001976:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8001978:	4b24      	ldr	r3, [pc, #144]	; (8001a0c <MX_ADC3_Init+0xd8>)
 800197a:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800197e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001980:	4b22      	ldr	r3, [pc, #136]	; (8001a0c <MX_ADC3_Init+0xd8>)
 8001982:	2200      	movs	r2, #0
 8001984:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 3;
 8001986:	4b21      	ldr	r3, [pc, #132]	; (8001a0c <MX_ADC3_Init+0xd8>)
 8001988:	2203      	movs	r2, #3
 800198a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800198c:	4b1f      	ldr	r3, [pc, #124]	; (8001a0c <MX_ADC3_Init+0xd8>)
 800198e:	2201      	movs	r2, #1
 8001990:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001994:	4b1d      	ldr	r3, [pc, #116]	; (8001a0c <MX_ADC3_Init+0xd8>)
 8001996:	2201      	movs	r2, #1
 8001998:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800199a:	481c      	ldr	r0, [pc, #112]	; (8001a0c <MX_ADC3_Init+0xd8>)
 800199c:	f002 f98c 	bl	8003cb8 <HAL_ADC_Init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_ADC3_Init+0x76>
  {
    Error_Handler();
 80019a6:	f000 fde1 	bl	800256c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80019aa:	230c      	movs	r3, #12
 80019ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80019ae:	2301      	movs	r3, #1
 80019b0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80019b2:	2307      	movs	r3, #7
 80019b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80019b6:	463b      	mov	r3, r7
 80019b8:	4619      	mov	r1, r3
 80019ba:	4814      	ldr	r0, [pc, #80]	; (8001a0c <MX_ADC3_Init+0xd8>)
 80019bc:	f002 fbfe 	bl	80041bc <HAL_ADC_ConfigChannel>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 80019c6:	f000 fdd1 	bl	800256c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80019ca:	230d      	movs	r3, #13
 80019cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80019ce:	2302      	movs	r3, #2
 80019d0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80019d2:	463b      	mov	r3, r7
 80019d4:	4619      	mov	r1, r3
 80019d6:	480d      	ldr	r0, [pc, #52]	; (8001a0c <MX_ADC3_Init+0xd8>)
 80019d8:	f002 fbf0 	bl	80041bc <HAL_ADC_ConfigChannel>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80019e2:	f000 fdc3 	bl	800256c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80019e6:	230e      	movs	r3, #14
 80019e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80019ea:	2303      	movs	r3, #3
 80019ec:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80019ee:	463b      	mov	r3, r7
 80019f0:	4619      	mov	r1, r3
 80019f2:	4806      	ldr	r0, [pc, #24]	; (8001a0c <MX_ADC3_Init+0xd8>)
 80019f4:	f002 fbe2 	bl	80041bc <HAL_ADC_ConfigChannel>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80019fe:	f000 fdb5 	bl	800256c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001a02:	bf00      	nop
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	2000054c 	.word	0x2000054c
 8001a10:	40012200 	.word	0x40012200

08001a14 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001a18:	4b1f      	ldr	r3, [pc, #124]	; (8001a98 <MX_ETH_Init+0x84>)
 8001a1a:	4a20      	ldr	r2, [pc, #128]	; (8001a9c <MX_ETH_Init+0x88>)
 8001a1c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001a1e:	4b20      	ldr	r3, [pc, #128]	; (8001aa0 <MX_ETH_Init+0x8c>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001a24:	4b1e      	ldr	r3, [pc, #120]	; (8001aa0 <MX_ETH_Init+0x8c>)
 8001a26:	2280      	movs	r2, #128	; 0x80
 8001a28:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001a2a:	4b1d      	ldr	r3, [pc, #116]	; (8001aa0 <MX_ETH_Init+0x8c>)
 8001a2c:	22e1      	movs	r2, #225	; 0xe1
 8001a2e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001a30:	4b1b      	ldr	r3, [pc, #108]	; (8001aa0 <MX_ETH_Init+0x8c>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001a36:	4b1a      	ldr	r3, [pc, #104]	; (8001aa0 <MX_ETH_Init+0x8c>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001a3c:	4b18      	ldr	r3, [pc, #96]	; (8001aa0 <MX_ETH_Init+0x8c>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001a42:	4b15      	ldr	r3, [pc, #84]	; (8001a98 <MX_ETH_Init+0x84>)
 8001a44:	4a16      	ldr	r2, [pc, #88]	; (8001aa0 <MX_ETH_Init+0x8c>)
 8001a46:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001a48:	4b13      	ldr	r3, [pc, #76]	; (8001a98 <MX_ETH_Init+0x84>)
 8001a4a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001a4e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001a50:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <MX_ETH_Init+0x84>)
 8001a52:	4a14      	ldr	r2, [pc, #80]	; (8001aa4 <MX_ETH_Init+0x90>)
 8001a54:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001a56:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <MX_ETH_Init+0x84>)
 8001a58:	4a13      	ldr	r2, [pc, #76]	; (8001aa8 <MX_ETH_Init+0x94>)
 8001a5a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001a5c:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <MX_ETH_Init+0x84>)
 8001a5e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001a62:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001a64:	480c      	ldr	r0, [pc, #48]	; (8001a98 <MX_ETH_Init+0x84>)
 8001a66:	f003 fb77 	bl	8005158 <HAL_ETH_Init>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001a70:	f000 fd7c 	bl	800256c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001a74:	2238      	movs	r2, #56	; 0x38
 8001a76:	2100      	movs	r1, #0
 8001a78:	480c      	ldr	r0, [pc, #48]	; (8001aac <MX_ETH_Init+0x98>)
 8001a7a:	f008 fcf4 	bl	800a466 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001a7e:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <MX_ETH_Init+0x98>)
 8001a80:	2221      	movs	r2, #33	; 0x21
 8001a82:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001a84:	4b09      	ldr	r3, [pc, #36]	; (8001aac <MX_ETH_Init+0x98>)
 8001a86:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001a8a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001a8c:	4b07      	ldr	r3, [pc, #28]	; (8001aac <MX_ETH_Init+0x98>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	200005f4 	.word	0x200005f4
 8001a9c:	40028000 	.word	0x40028000
 8001aa0:	20000eb8 	.word	0x20000eb8
 8001aa4:	200004ac 	.word	0x200004ac
 8001aa8:	2000040c 	.word	0x2000040c
 8001aac:	200003d4 	.word	0x200003d4

08001ab0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ab6:	f107 0308 	add.w	r3, r7, #8
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	605a      	str	r2, [r3, #4]
 8001ac0:	609a      	str	r2, [r3, #8]
 8001ac2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac4:	463b      	mov	r3, r7
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001acc:	4b1e      	ldr	r3, [pc, #120]	; (8001b48 <MX_TIM1_Init+0x98>)
 8001ace:	4a1f      	ldr	r2, [pc, #124]	; (8001b4c <MX_TIM1_Init+0x9c>)
 8001ad0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001ad2:	4b1d      	ldr	r3, [pc, #116]	; (8001b48 <MX_TIM1_Init+0x98>)
 8001ad4:	2253      	movs	r2, #83	; 0x53
 8001ad6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ad8:	4b1b      	ldr	r3, [pc, #108]	; (8001b48 <MX_TIM1_Init+0x98>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ade:	4b1a      	ldr	r3, [pc, #104]	; (8001b48 <MX_TIM1_Init+0x98>)
 8001ae0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ae4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae6:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <MX_TIM1_Init+0x98>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001aec:	4b16      	ldr	r3, [pc, #88]	; (8001b48 <MX_TIM1_Init+0x98>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af2:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <MX_TIM1_Init+0x98>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001af8:	4813      	ldr	r0, [pc, #76]	; (8001b48 <MX_TIM1_Init+0x98>)
 8001afa:	f004 fdd9 	bl	80066b0 <HAL_TIM_Base_Init>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001b04:	f000 fd32 	bl	800256c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b0e:	f107 0308 	add.w	r3, r7, #8
 8001b12:	4619      	mov	r1, r3
 8001b14:	480c      	ldr	r0, [pc, #48]	; (8001b48 <MX_TIM1_Init+0x98>)
 8001b16:	f005 fbfd 	bl	8007314 <HAL_TIM_ConfigClockSource>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001b20:	f000 fd24 	bl	800256c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b24:	2300      	movs	r3, #0
 8001b26:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b2c:	463b      	mov	r3, r7
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4805      	ldr	r0, [pc, #20]	; (8001b48 <MX_TIM1_Init+0x98>)
 8001b32:	f006 f805 	bl	8007b40 <HAL_TIMEx_MasterConfigSynchronization>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001b3c:	f000 fd16 	bl	800256c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b40:	bf00      	nop
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	200006a4 	.word	0x200006a4
 8001b4c:	40010000 	.word	0x40010000

08001b50 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08c      	sub	sp, #48	; 0x30
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b56:	f107 030c 	add.w	r3, r7, #12
 8001b5a:	2224      	movs	r2, #36	; 0x24
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f008 fc81 	bl	800a466 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b64:	1d3b      	adds	r3, r7, #4
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b6c:	4b23      	ldr	r3, [pc, #140]	; (8001bfc <MX_TIM2_Init+0xac>)
 8001b6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 340;
 8001b74:	4b21      	ldr	r3, [pc, #132]	; (8001bfc <MX_TIM2_Init+0xac>)
 8001b76:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8001b7a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b7c:	4b1f      	ldr	r3, [pc, #124]	; (8001bfc <MX_TIM2_Init+0xac>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65000;
 8001b82:	4b1e      	ldr	r3, [pc, #120]	; (8001bfc <MX_TIM2_Init+0xac>)
 8001b84:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001b88:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b8a:	4b1c      	ldr	r3, [pc, #112]	; (8001bfc <MX_TIM2_Init+0xac>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b90:	4b1a      	ldr	r3, [pc, #104]	; (8001bfc <MX_TIM2_Init+0xac>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b96:	2303      	movs	r3, #3
 8001b98:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001baa:	2300      	movs	r3, #0
 8001bac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001bba:	f107 030c 	add.w	r3, r7, #12
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	480e      	ldr	r0, [pc, #56]	; (8001bfc <MX_TIM2_Init+0xac>)
 8001bc2:	f005 f865 	bl	8006c90 <HAL_TIM_Encoder_Init>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001bcc:	f000 fcce 	bl	800256c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bd8:	1d3b      	adds	r3, r7, #4
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4807      	ldr	r0, [pc, #28]	; (8001bfc <MX_TIM2_Init+0xac>)
 8001bde:	f005 ffaf 	bl	8007b40 <HAL_TIMEx_MasterConfigSynchronization>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001be8:	f000 fcc0 	bl	800256c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001bec:	213c      	movs	r1, #60	; 0x3c
 8001bee:	4803      	ldr	r0, [pc, #12]	; (8001bfc <MX_TIM2_Init+0xac>)
 8001bf0:	f005 f8f4 	bl	8006ddc <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM2_Init 2 */

}
 8001bf4:	bf00      	nop
 8001bf6:	3730      	adds	r7, #48	; 0x30
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	200006ec 	.word	0x200006ec

08001c00 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b08e      	sub	sp, #56	; 0x38
 8001c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	605a      	str	r2, [r3, #4]
 8001c10:	609a      	str	r2, [r3, #8]
 8001c12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c14:	f107 0320 	add.w	r3, r7, #32
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c1e:	1d3b      	adds	r3, r7, #4
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	60da      	str	r2, [r3, #12]
 8001c2a:	611a      	str	r2, [r3, #16]
 8001c2c:	615a      	str	r2, [r3, #20]
 8001c2e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c30:	4b48      	ldr	r3, [pc, #288]	; (8001d54 <MX_TIM3_Init+0x154>)
 8001c32:	4a49      	ldr	r2, [pc, #292]	; (8001d58 <MX_TIM3_Init+0x158>)
 8001c34:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 840-1;
 8001c36:	4b47      	ldr	r3, [pc, #284]	; (8001d54 <MX_TIM3_Init+0x154>)
 8001c38:	f240 3247 	movw	r2, #839	; 0x347
 8001c3c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c3e:	4b45      	ldr	r3, [pc, #276]	; (8001d54 <MX_TIM3_Init+0x154>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001c44:	4b43      	ldr	r3, [pc, #268]	; (8001d54 <MX_TIM3_Init+0x154>)
 8001c46:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c4a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c4c:	4b41      	ldr	r3, [pc, #260]	; (8001d54 <MX_TIM3_Init+0x154>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c52:	4b40      	ldr	r3, [pc, #256]	; (8001d54 <MX_TIM3_Init+0x154>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c58:	483e      	ldr	r0, [pc, #248]	; (8001d54 <MX_TIM3_Init+0x154>)
 8001c5a:	f004 fd29 	bl	80066b0 <HAL_TIM_Base_Init>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001c64:	f000 fc82 	bl	800256c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c72:	4619      	mov	r1, r3
 8001c74:	4837      	ldr	r0, [pc, #220]	; (8001d54 <MX_TIM3_Init+0x154>)
 8001c76:	f005 fb4d 	bl	8007314 <HAL_TIM_ConfigClockSource>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001c80:	f000 fc74 	bl	800256c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c84:	4833      	ldr	r0, [pc, #204]	; (8001d54 <MX_TIM3_Init+0x154>)
 8001c86:	f004 fe94 	bl	80069b2 <HAL_TIM_PWM_Init>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001c90:	f000 fc6c 	bl	800256c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c94:	2300      	movs	r3, #0
 8001c96:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c9c:	f107 0320 	add.w	r3, r7, #32
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	482c      	ldr	r0, [pc, #176]	; (8001d54 <MX_TIM3_Init+0x154>)
 8001ca4:	f005 ff4c 	bl	8007b40 <HAL_TIMEx_MasterConfigSynchronization>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001cae:	f000 fc5d 	bl	800256c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cb2:	2360      	movs	r3, #96	; 0x60
 8001cb4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8001cb6:	2364      	movs	r3, #100	; 0x64
 8001cb8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cc2:	1d3b      	adds	r3, r7, #4
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4822      	ldr	r0, [pc, #136]	; (8001d54 <MX_TIM3_Init+0x154>)
 8001cca:	f005 fa61 	bl	8007190 <HAL_TIM_PWM_ConfigChannel>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001cd4:	f000 fc4a 	bl	800256c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 8001cd8:	4b1e      	ldr	r3, [pc, #120]	; (8001d54 <MX_TIM3_Init+0x154>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	699a      	ldr	r2, [r3, #24]
 8001cde:	4b1d      	ldr	r3, [pc, #116]	; (8001d54 <MX_TIM3_Init+0x154>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f022 0208 	bic.w	r2, r2, #8
 8001ce6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ce8:	1d3b      	adds	r3, r7, #4
 8001cea:	2204      	movs	r2, #4
 8001cec:	4619      	mov	r1, r3
 8001cee:	4819      	ldr	r0, [pc, #100]	; (8001d54 <MX_TIM3_Init+0x154>)
 8001cf0:	f005 fa4e 	bl	8007190 <HAL_TIM_PWM_ConfigChannel>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_TIM3_Init+0xfe>
  {
    Error_Handler();
 8001cfa:	f000 fc37 	bl	800256c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_2);
 8001cfe:	4b15      	ldr	r3, [pc, #84]	; (8001d54 <MX_TIM3_Init+0x154>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	699a      	ldr	r2, [r3, #24]
 8001d04:	4b13      	ldr	r3, [pc, #76]	; (8001d54 <MX_TIM3_Init+0x154>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d0c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM3_Init 2 */
  TIM3->DIER |= (1<<1);   // CC1IE: Enable the Tim3 CC1 interrupt
 8001d0e:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <MX_TIM3_Init+0x158>)
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	4a11      	ldr	r2, [pc, #68]	; (8001d58 <MX_TIM3_Init+0x158>)
 8001d14:	f043 0302 	orr.w	r3, r3, #2
 8001d18:	60d3      	str	r3, [r2, #12]
   NVIC->ISER[0] |= (1<<29); // TIM3_CC
 8001d1a:	4b10      	ldr	r3, [pc, #64]	; (8001d5c <MX_TIM3_Init+0x15c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a0f      	ldr	r2, [pc, #60]	; (8001d5c <MX_TIM3_Init+0x15c>)
 8001d20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001d24:	6013      	str	r3, [r2, #0]
   TIM3->CCER	|= (1<<0);	// CC1E=1: OC1(TIM5_CH1) Active(Capture/Compare 1 output enable)
 8001d26:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <MX_TIM3_Init+0x158>)
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	4a0b      	ldr	r2, [pc, #44]	; (8001d58 <MX_TIM3_Init+0x158>)
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	6213      	str	r3, [r2, #32]
    					// ?��?��??(40�??????????????????????????????????????????)?�� ?��?�� ?��?��출력
   TIM3->CR1	|= (1<<0);	// CEN: Counter TIM3 enable
 8001d32:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <MX_TIM3_Init+0x158>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a08      	ldr	r2, [pc, #32]	; (8001d58 <MX_TIM3_Init+0x158>)
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	6013      	str	r3, [r2, #0]

  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8001d3e:	2100      	movs	r1, #0
 8001d40:	4804      	ldr	r0, [pc, #16]	; (8001d54 <MX_TIM3_Init+0x154>)
 8001d42:	f004 fe8f 	bl	8006a64 <HAL_TIM_PWM_Start_IT>

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d46:	4803      	ldr	r0, [pc, #12]	; (8001d54 <MX_TIM3_Init+0x154>)
 8001d48:	f001 f984 	bl	8003054 <HAL_TIM_MspPostInit>

}
 8001d4c:	bf00      	nop
 8001d4e:	3738      	adds	r7, #56	; 0x38
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	20000734 	.word	0x20000734
 8001d58:	40000400 	.word	0x40000400
 8001d5c:	e000e100 	.word	0xe000e100

08001d60 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08c      	sub	sp, #48	; 0x30
 8001d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d66:	f107 030c 	add.w	r3, r7, #12
 8001d6a:	2224      	movs	r2, #36	; 0x24
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f008 fb79 	bl	800a466 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d74:	1d3b      	adds	r3, r7, #4
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d7c:	4b23      	ldr	r3, [pc, #140]	; (8001e0c <MX_TIM4_Init+0xac>)
 8001d7e:	4a24      	ldr	r2, [pc, #144]	; (8001e10 <MX_TIM4_Init+0xb0>)
 8001d80:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 340;
 8001d82:	4b22      	ldr	r3, [pc, #136]	; (8001e0c <MX_TIM4_Init+0xac>)
 8001d84:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8001d88:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d8a:	4b20      	ldr	r3, [pc, #128]	; (8001e0c <MX_TIM4_Init+0xac>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65000;
 8001d90:	4b1e      	ldr	r3, [pc, #120]	; (8001e0c <MX_TIM4_Init+0xac>)
 8001d92:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001d96:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d98:	4b1c      	ldr	r3, [pc, #112]	; (8001e0c <MX_TIM4_Init+0xac>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d9e:	4b1b      	ldr	r3, [pc, #108]	; (8001e0c <MX_TIM4_Init+0xac>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001da4:	2303      	movs	r3, #3
 8001da6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001da8:	2300      	movs	r3, #0
 8001daa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001dac:	2301      	movs	r3, #1
 8001dae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001db0:	2300      	movs	r3, #0
 8001db2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001db4:	2300      	movs	r3, #0
 8001db6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001db8:	2300      	movs	r3, #0
 8001dba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001dc8:	f107 030c 	add.w	r3, r7, #12
 8001dcc:	4619      	mov	r1, r3
 8001dce:	480f      	ldr	r0, [pc, #60]	; (8001e0c <MX_TIM4_Init+0xac>)
 8001dd0:	f004 ff5e 	bl	8006c90 <HAL_TIM_Encoder_Init>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001dda:	f000 fbc7 	bl	800256c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dde:	2300      	movs	r3, #0
 8001de0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001de2:	2300      	movs	r3, #0
 8001de4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001de6:	1d3b      	adds	r3, r7, #4
 8001de8:	4619      	mov	r1, r3
 8001dea:	4808      	ldr	r0, [pc, #32]	; (8001e0c <MX_TIM4_Init+0xac>)
 8001dec:	f005 fea8 	bl	8007b40 <HAL_TIMEx_MasterConfigSynchronization>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001df6:	f000 fbb9 	bl	800256c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001dfa:	213c      	movs	r1, #60	; 0x3c
 8001dfc:	4803      	ldr	r0, [pc, #12]	; (8001e0c <MX_TIM4_Init+0xac>)
 8001dfe:	f004 ffed 	bl	8006ddc <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM4_Init 2 */

}
 8001e02:	bf00      	nop
 8001e04:	3730      	adds	r7, #48	; 0x30
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	2000077c 	.word	0x2000077c
 8001e10:	40000800 	.word	0x40000800

08001e14 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e1a:	463b      	mov	r3, r7
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001e22:	4b16      	ldr	r3, [pc, #88]	; (8001e7c <MX_TIM6_Init+0x68>)
 8001e24:	4a16      	ldr	r2, [pc, #88]	; (8001e80 <MX_TIM6_Init+0x6c>)
 8001e26:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 8001e28:	4b14      	ldr	r3, [pc, #80]	; (8001e7c <MX_TIM6_Init+0x68>)
 8001e2a:	2253      	movs	r2, #83	; 0x53
 8001e2c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e2e:	4b13      	ldr	r3, [pc, #76]	; (8001e7c <MX_TIM6_Init+0x68>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 8001e34:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <MX_TIM6_Init+0x68>)
 8001e36:	2263      	movs	r2, #99	; 0x63
 8001e38:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e3a:	4b10      	ldr	r3, [pc, #64]	; (8001e7c <MX_TIM6_Init+0x68>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001e40:	480e      	ldr	r0, [pc, #56]	; (8001e7c <MX_TIM6_Init+0x68>)
 8001e42:	f004 fc35 	bl	80066b0 <HAL_TIM_Base_Init>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8001e4c:	f000 fb8e 	bl	800256c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e50:	2300      	movs	r3, #0
 8001e52:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e54:	2300      	movs	r3, #0
 8001e56:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001e58:	463b      	mov	r3, r7
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4807      	ldr	r0, [pc, #28]	; (8001e7c <MX_TIM6_Init+0x68>)
 8001e5e:	f005 fe6f 	bl	8007b40 <HAL_TIMEx_MasterConfigSynchronization>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8001e68:	f000 fb80 	bl	800256c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8001e6c:	4803      	ldr	r0, [pc, #12]	; (8001e7c <MX_TIM6_Init+0x68>)
 8001e6e:	f004 fcd7 	bl	8006820 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM6_Init 2 */

}
 8001e72:	bf00      	nop
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	200007c4 	.word	0x200007c4
 8001e80:	40001000 	.word	0x40001000

08001e84 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e8a:	463b      	mov	r3, r7
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001e92:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <MX_TIM7_Init+0x64>)
 8001e94:	4a15      	ldr	r2, [pc, #84]	; (8001eec <MX_TIM7_Init+0x68>)
 8001e96:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 84-1;
 8001e98:	4b13      	ldr	r3, [pc, #76]	; (8001ee8 <MX_TIM7_Init+0x64>)
 8001e9a:	2253      	movs	r2, #83	; 0x53
 8001e9c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e9e:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <MX_TIM7_Init+0x64>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8001ea4:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <MX_TIM7_Init+0x64>)
 8001ea6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001eaa:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eac:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <MX_TIM7_Init+0x64>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001eb2:	480d      	ldr	r0, [pc, #52]	; (8001ee8 <MX_TIM7_Init+0x64>)
 8001eb4:	f004 fbfc 	bl	80066b0 <HAL_TIM_Base_Init>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001ebe:	f000 fb55 	bl	800256c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001eca:	463b      	mov	r3, r7
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4806      	ldr	r0, [pc, #24]	; (8001ee8 <MX_TIM7_Init+0x64>)
 8001ed0:	f005 fe36 	bl	8007b40 <HAL_TIMEx_MasterConfigSynchronization>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001eda:	f000 fb47 	bl	800256c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001ede:	bf00      	nop
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	2000080c 	.word	0x2000080c
 8001eec:	40001400 	.word	0x40001400

08001ef0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b096      	sub	sp, #88	; 0x58
 8001ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ef6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	605a      	str	r2, [r3, #4]
 8001f00:	609a      	str	r2, [r3, #8]
 8001f02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f04:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	605a      	str	r2, [r3, #4]
 8001f18:	609a      	str	r2, [r3, #8]
 8001f1a:	60da      	str	r2, [r3, #12]
 8001f1c:	611a      	str	r2, [r3, #16]
 8001f1e:	615a      	str	r2, [r3, #20]
 8001f20:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f22:	1d3b      	adds	r3, r7, #4
 8001f24:	2220      	movs	r2, #32
 8001f26:	2100      	movs	r1, #0
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f008 fa9c 	bl	800a466 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001f2e:	4b3e      	ldr	r3, [pc, #248]	; (8002028 <MX_TIM8_Init+0x138>)
 8001f30:	4a3e      	ldr	r2, [pc, #248]	; (800202c <MX_TIM8_Init+0x13c>)
 8001f32:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 840-1;
 8001f34:	4b3c      	ldr	r3, [pc, #240]	; (8002028 <MX_TIM8_Init+0x138>)
 8001f36:	f240 3247 	movw	r2, #839	; 0x347
 8001f3a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f3c:	4b3a      	ldr	r3, [pc, #232]	; (8002028 <MX_TIM8_Init+0x138>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 50-1;
 8001f42:	4b39      	ldr	r3, [pc, #228]	; (8002028 <MX_TIM8_Init+0x138>)
 8001f44:	2231      	movs	r2, #49	; 0x31
 8001f46:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f48:	4b37      	ldr	r3, [pc, #220]	; (8002028 <MX_TIM8_Init+0x138>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001f4e:	4b36      	ldr	r3, [pc, #216]	; (8002028 <MX_TIM8_Init+0x138>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f54:	4b34      	ldr	r3, [pc, #208]	; (8002028 <MX_TIM8_Init+0x138>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001f5a:	4833      	ldr	r0, [pc, #204]	; (8002028 <MX_TIM8_Init+0x138>)
 8001f5c:	f004 fba8 	bl	80066b0 <HAL_TIM_Base_Init>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001f66:	f000 fb01 	bl	800256c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f6e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001f70:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f74:	4619      	mov	r1, r3
 8001f76:	482c      	ldr	r0, [pc, #176]	; (8002028 <MX_TIM8_Init+0x138>)
 8001f78:	f005 f9cc 	bl	8007314 <HAL_TIM_ConfigClockSource>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001f82:	f000 faf3 	bl	800256c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8001f86:	4828      	ldr	r0, [pc, #160]	; (8002028 <MX_TIM8_Init+0x138>)
 8001f88:	f004 fcba 	bl	8006900 <HAL_TIM_OC_Init>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001f92:	f000 faeb 	bl	800256c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001f96:	2320      	movs	r3, #32
 8001f98:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001f9e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4820      	ldr	r0, [pc, #128]	; (8002028 <MX_TIM8_Init+0x138>)
 8001fa6:	f005 fdcb 	bl	8007b40 <HAL_TIMEx_MasterConfigSynchronization>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001fb0:	f000 fadc 	bl	800256c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2000;
 8001fb8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001fbc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001fce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd2:	220c      	movs	r2, #12
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4814      	ldr	r0, [pc, #80]	; (8002028 <MX_TIM8_Init+0x138>)
 8001fd8:	f005 f87e 	bl	80070d8 <HAL_TIM_OC_ConfigChannel>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8001fe2:	f000 fac3 	bl	800256c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001fea:	2300      	movs	r3, #0
 8001fec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ffa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ffe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002000:	2300      	movs	r3, #0
 8002002:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002004:	1d3b      	adds	r3, r7, #4
 8002006:	4619      	mov	r1, r3
 8002008:	4807      	ldr	r0, [pc, #28]	; (8002028 <MX_TIM8_Init+0x138>)
 800200a:	f005 fe15 	bl	8007c38 <HAL_TIMEx_ConfigBreakDeadTime>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8002014:	f000 faaa 	bl	800256c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */
  HAL_TIM_Base_Start_IT(&htim8);
 8002018:	4803      	ldr	r0, [pc, #12]	; (8002028 <MX_TIM8_Init+0x138>)
 800201a:	f004 fc01 	bl	8006820 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM8_Init 2 */

}
 800201e:	bf00      	nop
 8002020:	3758      	adds	r7, #88	; 0x58
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000854 	.word	0x20000854
 800202c:	40010400 	.word	0x40010400

08002030 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002036:	463b      	mov	r3, r7
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002042:	4b16      	ldr	r3, [pc, #88]	; (800209c <MX_TIM12_Init+0x6c>)
 8002044:	4a16      	ldr	r2, [pc, #88]	; (80020a0 <MX_TIM12_Init+0x70>)
 8002046:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 42-1;
 8002048:	4b14      	ldr	r3, [pc, #80]	; (800209c <MX_TIM12_Init+0x6c>)
 800204a:	2229      	movs	r2, #41	; 0x29
 800204c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800204e:	4b13      	ldr	r3, [pc, #76]	; (800209c <MX_TIM12_Init+0x6c>)
 8002050:	2200      	movs	r2, #0
 8002052:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8002054:	4b11      	ldr	r3, [pc, #68]	; (800209c <MX_TIM12_Init+0x6c>)
 8002056:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800205a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800205c:	4b0f      	ldr	r3, [pc, #60]	; (800209c <MX_TIM12_Init+0x6c>)
 800205e:	2200      	movs	r2, #0
 8002060:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002062:	4b0e      	ldr	r3, [pc, #56]	; (800209c <MX_TIM12_Init+0x6c>)
 8002064:	2200      	movs	r2, #0
 8002066:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002068:	480c      	ldr	r0, [pc, #48]	; (800209c <MX_TIM12_Init+0x6c>)
 800206a:	f004 fb21 	bl	80066b0 <HAL_TIM_Base_Init>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8002074:	f000 fa7a 	bl	800256c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002078:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800207c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800207e:	463b      	mov	r3, r7
 8002080:	4619      	mov	r1, r3
 8002082:	4806      	ldr	r0, [pc, #24]	; (800209c <MX_TIM12_Init+0x6c>)
 8002084:	f005 f946 	bl	8007314 <HAL_TIM_ConfigClockSource>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 800208e:	f000 fa6d 	bl	800256c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8002092:	bf00      	nop
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	2000089c 	.word	0x2000089c
 80020a0:	40001800 	.word	0x40001800

080020a4 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b088      	sub	sp, #32
 80020a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80020aa:	1d3b      	adds	r3, r7, #4
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	60da      	str	r2, [r3, #12]
 80020b6:	611a      	str	r2, [r3, #16]
 80020b8:	615a      	str	r2, [r3, #20]
 80020ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80020bc:	4b1f      	ldr	r3, [pc, #124]	; (800213c <MX_TIM13_Init+0x98>)
 80020be:	4a20      	ldr	r2, [pc, #128]	; (8002140 <MX_TIM13_Init+0x9c>)
 80020c0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 84;
 80020c2:	4b1e      	ldr	r3, [pc, #120]	; (800213c <MX_TIM13_Init+0x98>)
 80020c4:	2254      	movs	r2, #84	; 0x54
 80020c6:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020c8:	4b1c      	ldr	r3, [pc, #112]	; (800213c <MX_TIM13_Init+0x98>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100;
 80020ce:	4b1b      	ldr	r3, [pc, #108]	; (800213c <MX_TIM13_Init+0x98>)
 80020d0:	2264      	movs	r2, #100	; 0x64
 80020d2:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020d4:	4b19      	ldr	r3, [pc, #100]	; (800213c <MX_TIM13_Init+0x98>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020da:	4b18      	ldr	r3, [pc, #96]	; (800213c <MX_TIM13_Init+0x98>)
 80020dc:	2200      	movs	r2, #0
 80020de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80020e0:	4816      	ldr	r0, [pc, #88]	; (800213c <MX_TIM13_Init+0x98>)
 80020e2:	f004 fae5 	bl	80066b0 <HAL_TIM_Base_Init>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <MX_TIM13_Init+0x4c>
  {
    Error_Handler();
 80020ec:	f000 fa3e 	bl	800256c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80020f0:	4812      	ldr	r0, [pc, #72]	; (800213c <MX_TIM13_Init+0x98>)
 80020f2:	f004 fc5e 	bl	80069b2 <HAL_TIM_PWM_Init>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <MX_TIM13_Init+0x5c>
  {
    Error_Handler();
 80020fc:	f000 fa36 	bl	800256c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002100:	2360      	movs	r3, #96	; 0x60
 8002102:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8002104:	2332      	movs	r3, #50	; 0x32
 8002106:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002108:	2300      	movs	r3, #0
 800210a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800210c:	2300      	movs	r3, #0
 800210e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002110:	1d3b      	adds	r3, r7, #4
 8002112:	2200      	movs	r2, #0
 8002114:	4619      	mov	r1, r3
 8002116:	4809      	ldr	r0, [pc, #36]	; (800213c <MX_TIM13_Init+0x98>)
 8002118:	f005 f83a 	bl	8007190 <HAL_TIM_PWM_ConfigChannel>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <MX_TIM13_Init+0x82>
  {
    Error_Handler();
 8002122:	f000 fa23 	bl	800256c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002126:	4805      	ldr	r0, [pc, #20]	; (800213c <MX_TIM13_Init+0x98>)
 8002128:	f000 ff94 	bl	8003054 <HAL_TIM_MspPostInit>
  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 800212c:	4803      	ldr	r0, [pc, #12]	; (800213c <MX_TIM13_Init+0x98>)
 800212e:	f000 ff91 	bl	8003054 <HAL_TIM_MspPostInit>

}
 8002132:	bf00      	nop
 8002134:	3720      	adds	r7, #32
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	200008e4 	.word	0x200008e4
 8002140:	40001c00 	.word	0x40001c00

08002144 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002148:	4b17      	ldr	r3, [pc, #92]	; (80021a8 <MX_TIM14_Init+0x64>)
 800214a:	4a18      	ldr	r2, [pc, #96]	; (80021ac <MX_TIM14_Init+0x68>)
 800214c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 840-1;
 800214e:	4b16      	ldr	r3, [pc, #88]	; (80021a8 <MX_TIM14_Init+0x64>)
 8002150:	f240 3247 	movw	r2, #839	; 0x347
 8002154:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002156:	4b14      	ldr	r3, [pc, #80]	; (80021a8 <MX_TIM14_Init+0x64>)
 8002158:	2200      	movs	r2, #0
 800215a:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 800215c:	4b12      	ldr	r3, [pc, #72]	; (80021a8 <MX_TIM14_Init+0x64>)
 800215e:	f242 720f 	movw	r2, #9999	; 0x270f
 8002162:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002164:	4b10      	ldr	r3, [pc, #64]	; (80021a8 <MX_TIM14_Init+0x64>)
 8002166:	2200      	movs	r2, #0
 8002168:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800216a:	4b0f      	ldr	r3, [pc, #60]	; (80021a8 <MX_TIM14_Init+0x64>)
 800216c:	2200      	movs	r2, #0
 800216e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002170:	480d      	ldr	r0, [pc, #52]	; (80021a8 <MX_TIM14_Init+0x64>)
 8002172:	f004 fa9d 	bl	80066b0 <HAL_TIM_Base_Init>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 800217c:	f000 f9f6 	bl	800256c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */
  TIM14->DIER |= (1<<0);   // CC1IE: Enable the Tim14 UG interrupt
 8002180:	4b0a      	ldr	r3, [pc, #40]	; (80021ac <MX_TIM14_Init+0x68>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	4a09      	ldr	r2, [pc, #36]	; (80021ac <MX_TIM14_Init+0x68>)
 8002186:	f043 0301 	orr.w	r3, r3, #1
 800218a:	60d3      	str	r3, [r2, #12]
   NVIC->ISER[1] |= (1<<(45-32)); // TIM14_CC
 800218c:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <MX_TIM14_Init+0x6c>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	4a07      	ldr	r2, [pc, #28]	; (80021b0 <MX_TIM14_Init+0x6c>)
 8002192:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002196:	6053      	str	r3, [r2, #4]

   TIM14->CR1	|= (1<<0);	// CEN: Counter TIM14 enable
 8002198:	4b04      	ldr	r3, [pc, #16]	; (80021ac <MX_TIM14_Init+0x68>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a03      	ldr	r2, [pc, #12]	; (80021ac <MX_TIM14_Init+0x68>)
 800219e:	f043 0301 	orr.w	r3, r3, #1
 80021a2:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM14_Init 2 */

}
 80021a4:	bf00      	nop
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	2000092c 	.word	0x2000092c
 80021ac:	40002000 	.word	0x40002000
 80021b0:	e000e100 	.word	0xe000e100

080021b4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80021b8:	4b11      	ldr	r3, [pc, #68]	; (8002200 <MX_UART4_Init+0x4c>)
 80021ba:	4a12      	ldr	r2, [pc, #72]	; (8002204 <MX_UART4_Init+0x50>)
 80021bc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80021be:	4b10      	ldr	r3, [pc, #64]	; (8002200 <MX_UART4_Init+0x4c>)
 80021c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021c4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80021c6:	4b0e      	ldr	r3, [pc, #56]	; (8002200 <MX_UART4_Init+0x4c>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80021cc:	4b0c      	ldr	r3, [pc, #48]	; (8002200 <MX_UART4_Init+0x4c>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 80021d2:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <MX_UART4_Init+0x4c>)
 80021d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021d8:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80021da:	4b09      	ldr	r3, [pc, #36]	; (8002200 <MX_UART4_Init+0x4c>)
 80021dc:	220c      	movs	r2, #12
 80021de:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021e0:	4b07      	ldr	r3, [pc, #28]	; (8002200 <MX_UART4_Init+0x4c>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80021e6:	4b06      	ldr	r3, [pc, #24]	; (8002200 <MX_UART4_Init+0x4c>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80021ec:	4804      	ldr	r0, [pc, #16]	; (8002200 <MX_UART4_Init+0x4c>)
 80021ee:	f005 fd89 	bl	8007d04 <HAL_UART_Init>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <MX_UART4_Init+0x48>
  {
    Error_Handler();
 80021f8:	f000 f9b8 	bl	800256c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80021fc:	bf00      	nop
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	20000360 	.word	0x20000360
 8002204:	40004c00 	.word	0x40004c00

08002208 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800220c:	4b11      	ldr	r3, [pc, #68]	; (8002254 <MX_USART3_UART_Init+0x4c>)
 800220e:	4a12      	ldr	r2, [pc, #72]	; (8002258 <MX_USART3_UART_Init+0x50>)
 8002210:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002212:	4b10      	ldr	r3, [pc, #64]	; (8002254 <MX_USART3_UART_Init+0x4c>)
 8002214:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002218:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800221a:	4b0e      	ldr	r3, [pc, #56]	; (8002254 <MX_USART3_UART_Init+0x4c>)
 800221c:	2200      	movs	r2, #0
 800221e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002220:	4b0c      	ldr	r3, [pc, #48]	; (8002254 <MX_USART3_UART_Init+0x4c>)
 8002222:	2200      	movs	r2, #0
 8002224:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002226:	4b0b      	ldr	r3, [pc, #44]	; (8002254 <MX_USART3_UART_Init+0x4c>)
 8002228:	2200      	movs	r2, #0
 800222a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800222c:	4b09      	ldr	r3, [pc, #36]	; (8002254 <MX_USART3_UART_Init+0x4c>)
 800222e:	220c      	movs	r2, #12
 8002230:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002232:	4b08      	ldr	r3, [pc, #32]	; (8002254 <MX_USART3_UART_Init+0x4c>)
 8002234:	2200      	movs	r2, #0
 8002236:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002238:	4b06      	ldr	r3, [pc, #24]	; (8002254 <MX_USART3_UART_Init+0x4c>)
 800223a:	2200      	movs	r2, #0
 800223c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800223e:	4805      	ldr	r0, [pc, #20]	; (8002254 <MX_USART3_UART_Init+0x4c>)
 8002240:	f005 fd60 	bl	8007d04 <HAL_UART_Init>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800224a:	f000 f98f 	bl	800256c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	20000314 	.word	0x20000314
 8002258:	40004800 	.word	0x40004800

0800225c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002260:	4b14      	ldr	r3, [pc, #80]	; (80022b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002262:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002266:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8002268:	4b12      	ldr	r3, [pc, #72]	; (80022b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800226a:	2204      	movs	r2, #4
 800226c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800226e:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002270:	2202      	movs	r2, #2
 8002272:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002274:	4b0f      	ldr	r3, [pc, #60]	; (80022b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002276:	2200      	movs	r2, #0
 8002278:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800227a:	4b0e      	ldr	r3, [pc, #56]	; (80022b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800227c:	2202      	movs	r2, #2
 800227e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002280:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002282:	2201      	movs	r2, #1
 8002284:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002286:	4b0b      	ldr	r3, [pc, #44]	; (80022b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002288:	2200      	movs	r2, #0
 800228a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800228c:	4b09      	ldr	r3, [pc, #36]	; (80022b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800228e:	2200      	movs	r2, #0
 8002290:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002292:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002294:	2201      	movs	r2, #1
 8002296:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002298:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800229a:	2200      	movs	r2, #0
 800229c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800229e:	4805      	ldr	r0, [pc, #20]	; (80022b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022a0:	f003 fc5f 	bl	8005b62 <HAL_PCD_Init>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80022aa:	f000 f95f 	bl	800256c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	200009d4 	.word	0x200009d4

080022b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	607b      	str	r3, [r7, #4]
 80022c2:	4b17      	ldr	r3, [pc, #92]	; (8002320 <MX_DMA_Init+0x68>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	4a16      	ldr	r2, [pc, #88]	; (8002320 <MX_DMA_Init+0x68>)
 80022c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022cc:	6313      	str	r3, [r2, #48]	; 0x30
 80022ce:	4b14      	ldr	r3, [pc, #80]	; (8002320 <MX_DMA_Init+0x68>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022d6:	607b      	str	r3, [r7, #4]
 80022d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	603b      	str	r3, [r7, #0]
 80022de:	4b10      	ldr	r3, [pc, #64]	; (8002320 <MX_DMA_Init+0x68>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	4a0f      	ldr	r2, [pc, #60]	; (8002320 <MX_DMA_Init+0x68>)
 80022e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022e8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ea:	4b0d      	ldr	r3, [pc, #52]	; (8002320 <MX_DMA_Init+0x68>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022f2:	603b      	str	r3, [r7, #0]
 80022f4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80022f6:	2200      	movs	r2, #0
 80022f8:	2100      	movs	r1, #0
 80022fa:	2011      	movs	r0, #17
 80022fc:	f002 faf3 	bl	80048e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002300:	2011      	movs	r0, #17
 8002302:	f002 fb0c 	bl	800491e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8002306:	2200      	movs	r2, #0
 8002308:	2100      	movs	r1, #0
 800230a:	2039      	movs	r0, #57	; 0x39
 800230c:	f002 faeb 	bl	80048e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002310:	2039      	movs	r0, #57	; 0x39
 8002312:	f002 fb04 	bl	800491e <HAL_NVIC_EnableIRQ>

}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40023800 	.word	0x40023800

08002324 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b08e      	sub	sp, #56	; 0x38
 8002328:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800232a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	605a      	str	r2, [r3, #4]
 8002334:	609a      	str	r2, [r3, #8]
 8002336:	60da      	str	r2, [r3, #12]
 8002338:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	623b      	str	r3, [r7, #32]
 800233e:	4b84      	ldr	r3, [pc, #528]	; (8002550 <MX_GPIO_Init+0x22c>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	4a83      	ldr	r2, [pc, #524]	; (8002550 <MX_GPIO_Init+0x22c>)
 8002344:	f043 0304 	orr.w	r3, r3, #4
 8002348:	6313      	str	r3, [r2, #48]	; 0x30
 800234a:	4b81      	ldr	r3, [pc, #516]	; (8002550 <MX_GPIO_Init+0x22c>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	f003 0304 	and.w	r3, r3, #4
 8002352:	623b      	str	r3, [r7, #32]
 8002354:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	61fb      	str	r3, [r7, #28]
 800235a:	4b7d      	ldr	r3, [pc, #500]	; (8002550 <MX_GPIO_Init+0x22c>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	4a7c      	ldr	r2, [pc, #496]	; (8002550 <MX_GPIO_Init+0x22c>)
 8002360:	f043 0320 	orr.w	r3, r3, #32
 8002364:	6313      	str	r3, [r2, #48]	; 0x30
 8002366:	4b7a      	ldr	r3, [pc, #488]	; (8002550 <MX_GPIO_Init+0x22c>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	f003 0320 	and.w	r3, r3, #32
 800236e:	61fb      	str	r3, [r7, #28]
 8002370:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	61bb      	str	r3, [r7, #24]
 8002376:	4b76      	ldr	r3, [pc, #472]	; (8002550 <MX_GPIO_Init+0x22c>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	4a75      	ldr	r2, [pc, #468]	; (8002550 <MX_GPIO_Init+0x22c>)
 800237c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002380:	6313      	str	r3, [r2, #48]	; 0x30
 8002382:	4b73      	ldr	r3, [pc, #460]	; (8002550 <MX_GPIO_Init+0x22c>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800238a:	61bb      	str	r3, [r7, #24]
 800238c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	617b      	str	r3, [r7, #20]
 8002392:	4b6f      	ldr	r3, [pc, #444]	; (8002550 <MX_GPIO_Init+0x22c>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	4a6e      	ldr	r2, [pc, #440]	; (8002550 <MX_GPIO_Init+0x22c>)
 8002398:	f043 0301 	orr.w	r3, r3, #1
 800239c:	6313      	str	r3, [r2, #48]	; 0x30
 800239e:	4b6c      	ldr	r3, [pc, #432]	; (8002550 <MX_GPIO_Init+0x22c>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	617b      	str	r3, [r7, #20]
 80023a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	613b      	str	r3, [r7, #16]
 80023ae:	4b68      	ldr	r3, [pc, #416]	; (8002550 <MX_GPIO_Init+0x22c>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	4a67      	ldr	r2, [pc, #412]	; (8002550 <MX_GPIO_Init+0x22c>)
 80023b4:	f043 0302 	orr.w	r3, r3, #2
 80023b8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ba:	4b65      	ldr	r3, [pc, #404]	; (8002550 <MX_GPIO_Init+0x22c>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	613b      	str	r3, [r7, #16]
 80023c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	4b61      	ldr	r3, [pc, #388]	; (8002550 <MX_GPIO_Init+0x22c>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	4a60      	ldr	r2, [pc, #384]	; (8002550 <MX_GPIO_Init+0x22c>)
 80023d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023d4:	6313      	str	r3, [r2, #48]	; 0x30
 80023d6:	4b5e      	ldr	r3, [pc, #376]	; (8002550 <MX_GPIO_Init+0x22c>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	60bb      	str	r3, [r7, #8]
 80023e6:	4b5a      	ldr	r3, [pc, #360]	; (8002550 <MX_GPIO_Init+0x22c>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	4a59      	ldr	r2, [pc, #356]	; (8002550 <MX_GPIO_Init+0x22c>)
 80023ec:	f043 0308 	orr.w	r3, r3, #8
 80023f0:	6313      	str	r3, [r2, #48]	; 0x30
 80023f2:	4b57      	ldr	r3, [pc, #348]	; (8002550 <MX_GPIO_Init+0x22c>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	f003 0308 	and.w	r3, r3, #8
 80023fa:	60bb      	str	r3, [r7, #8]
 80023fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80023fe:	2300      	movs	r3, #0
 8002400:	607b      	str	r3, [r7, #4]
 8002402:	4b53      	ldr	r3, [pc, #332]	; (8002550 <MX_GPIO_Init+0x22c>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	4a52      	ldr	r2, [pc, #328]	; (8002550 <MX_GPIO_Init+0x22c>)
 8002408:	f043 0310 	orr.w	r3, r3, #16
 800240c:	6313      	str	r3, [r2, #48]	; 0x30
 800240e:	4b50      	ldr	r3, [pc, #320]	; (8002550 <MX_GPIO_Init+0x22c>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	f003 0310 	and.w	r3, r3, #16
 8002416:	607b      	str	r3, [r7, #4]
 8002418:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD3_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 800241a:	2200      	movs	r2, #0
 800241c:	f244 0181 	movw	r1, #16513	; 0x4081
 8002420:	484c      	ldr	r0, [pc, #304]	; (8002554 <MX_GPIO_Init+0x230>)
 8002422:	f003 fb85 	bl	8005b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8002426:	2200      	movs	r2, #0
 8002428:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800242c:	484a      	ldr	r0, [pc, #296]	; (8002558 <MX_GPIO_Init+0x234>)
 800242e:	f003 fb7f 	bl	8005b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8002432:	2200      	movs	r2, #0
 8002434:	2103      	movs	r1, #3
 8002436:	4849      	ldr	r0, [pc, #292]	; (800255c <MX_GPIO_Init+0x238>)
 8002438:	f003 fb7a 	bl	8005b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 800243c:	2200      	movs	r2, #0
 800243e:	2180      	movs	r1, #128	; 0x80
 8002440:	4847      	ldr	r0, [pc, #284]	; (8002560 <MX_GPIO_Init+0x23c>)
 8002442:	f003 fb75 	bl	8005b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
 8002446:	2200      	movs	r2, #0
 8002448:	2101      	movs	r1, #1
 800244a:	4846      	ldr	r0, [pc, #280]	; (8002564 <MX_GPIO_Init+0x240>)
 800244c:	f003 fb70 	bl	8005b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002450:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002454:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002456:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800245a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245c:	2300      	movs	r3, #0
 800245e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002460:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002464:	4619      	mov	r1, r3
 8002466:	4840      	ldr	r0, [pc, #256]	; (8002568 <MX_GPIO_Init+0x244>)
 8002468:	f003 f99e 	bl	80057a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 LD3_Pin PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin|GPIO_PIN_7;
 800246c:	f244 0381 	movw	r3, #16513	; 0x4081
 8002470:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002472:	2301      	movs	r3, #1
 8002474:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002476:	2300      	movs	r3, #0
 8002478:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247a:	2300      	movs	r3, #0
 800247c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800247e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002482:	4619      	mov	r1, r3
 8002484:	4833      	ldr	r0, [pc, #204]	; (8002554 <MX_GPIO_Init+0x230>)
 8002486:	f003 f98f 	bl	80057a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800248a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800248e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002490:	2301      	movs	r3, #1
 8002492:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002494:	2300      	movs	r3, #0
 8002496:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002498:	2300      	movs	r3, #0
 800249a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800249c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024a0:	4619      	mov	r1, r3
 80024a2:	482d      	ldr	r0, [pc, #180]	; (8002558 <MX_GPIO_Init+0x234>)
 80024a4:	f003 f980 	bl	80057a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80024a8:	2303      	movs	r3, #3
 80024aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ac:	2301      	movs	r3, #1
 80024ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b0:	2300      	movs	r3, #0
 80024b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b4:	2300      	movs	r3, #0
 80024b6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024bc:	4619      	mov	r1, r3
 80024be:	4827      	ldr	r0, [pc, #156]	; (800255c <MX_GPIO_Init+0x238>)
 80024c0:	f003 f972 	bl	80057a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80024c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024ca:	2300      	movs	r3, #0
 80024cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ce:	2300      	movs	r3, #0
 80024d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024d6:	4619      	mov	r1, r3
 80024d8:	481e      	ldr	r0, [pc, #120]	; (8002554 <MX_GPIO_Init+0x230>)
 80024da:	f003 f965 	bl	80057a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80024de:	2380      	movs	r3, #128	; 0x80
 80024e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024e2:	2300      	movs	r3, #0
 80024e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e6:	2300      	movs	r3, #0
 80024e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80024ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ee:	4619      	mov	r1, r3
 80024f0:	481a      	ldr	r0, [pc, #104]	; (800255c <MX_GPIO_Init+0x238>)
 80024f2:	f003 f959 	bl	80057a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80024f6:	2340      	movs	r3, #64	; 0x40
 80024f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024fa:	2300      	movs	r3, #0
 80024fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fe:	2300      	movs	r3, #0
 8002500:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002502:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002506:	4619      	mov	r1, r3
 8002508:	4815      	ldr	r0, [pc, #84]	; (8002560 <MX_GPIO_Init+0x23c>)
 800250a:	f003 f94d 	bl	80057a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800250e:	2380      	movs	r3, #128	; 0x80
 8002510:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002512:	2301      	movs	r3, #1
 8002514:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002516:	2300      	movs	r3, #0
 8002518:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251a:	2300      	movs	r3, #0
 800251c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800251e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002522:	4619      	mov	r1, r3
 8002524:	480e      	ldr	r0, [pc, #56]	; (8002560 <MX_GPIO_Init+0x23c>)
 8002526:	f003 f93f 	bl	80057a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800252a:	2301      	movs	r3, #1
 800252c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800252e:	2301      	movs	r3, #1
 8002530:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002532:	2300      	movs	r3, #0
 8002534:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002536:	2300      	movs	r3, #0
 8002538:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800253a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800253e:	4619      	mov	r1, r3
 8002540:	4808      	ldr	r0, [pc, #32]	; (8002564 <MX_GPIO_Init+0x240>)
 8002542:	f003 f931 	bl	80057a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002546:	bf00      	nop
 8002548:	3738      	adds	r7, #56	; 0x38
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40023800 	.word	0x40023800
 8002554:	40020400 	.word	0x40020400
 8002558:	40021400 	.word	0x40021400
 800255c:	40021800 	.word	0x40021800
 8002560:	40020c00 	.word	0x40020c00
 8002564:	40021000 	.word	0x40021000
 8002568:	40020800 	.word	0x40020800

0800256c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002570:	b672      	cpsid	i
}
 8002572:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002574:	e7fe      	b.n	8002574 <Error_Handler+0x8>
	...

08002578 <position_pid>:




void position_pid(void)
{
 8002578:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800257c:	af00      	add	r7, sp, #0
//	p_kp = 4;
//	p_ki = 1;
//	p_kd = 0.02;


	err = input_position - TIM4->CNT;
 800257e:	4b8c      	ldr	r3, [pc, #560]	; (80027b0 <position_pid+0x238>)
 8002580:	881b      	ldrh	r3, [r3, #0]
 8002582:	461a      	mov	r2, r3
 8002584:	4b8b      	ldr	r3, [pc, #556]	; (80027b4 <position_pid+0x23c>)
 8002586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	461a      	mov	r2, r3
 800258c:	4b8a      	ldr	r3, [pc, #552]	; (80027b8 <position_pid+0x240>)
 800258e:	601a      	str	r2, [r3, #0]
	P_KP = err * p_kp;
 8002590:	4b89      	ldr	r3, [pc, #548]	; (80027b8 <position_pid+0x240>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	ee07 3a90 	vmov	s15, r3
 8002598:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800259c:	4b87      	ldr	r3, [pc, #540]	; (80027bc <position_pid+0x244>)
 800259e:	edd3 7a00 	vldr	s15, [r3]
 80025a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025a6:	4b86      	ldr	r3, [pc, #536]	; (80027c0 <position_pid+0x248>)
 80025a8:	edc3 7a00 	vstr	s15, [r3]

	err_sum = err_sum + err * 0.0001;
 80025ac:	4b85      	ldr	r3, [pc, #532]	; (80027c4 <position_pid+0x24c>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7fd ffd9 	bl	8000568 <__aeabi_f2d>
 80025b6:	4680      	mov	r8, r0
 80025b8:	4689      	mov	r9, r1
 80025ba:	4b7f      	ldr	r3, [pc, #508]	; (80027b8 <position_pid+0x240>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fd ffc0 	bl	8000544 <__aeabi_i2d>
 80025c4:	a378      	add	r3, pc, #480	; (adr r3, 80027a8 <position_pid+0x230>)
 80025c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ca:	f7fe f825 	bl	8000618 <__aeabi_dmul>
 80025ce:	4602      	mov	r2, r0
 80025d0:	460b      	mov	r3, r1
 80025d2:	4640      	mov	r0, r8
 80025d4:	4649      	mov	r1, r9
 80025d6:	f7fd fe69 	bl	80002ac <__adddf3>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4610      	mov	r0, r2
 80025e0:	4619      	mov	r1, r3
 80025e2:	f7fe fb11 	bl	8000c08 <__aeabi_d2f>
 80025e6:	4603      	mov	r3, r0
 80025e8:	4a76      	ldr	r2, [pc, #472]	; (80027c4 <position_pid+0x24c>)
 80025ea:	6013      	str	r3, [r2, #0]
	if (p_PID == 0)
 80025ec:	4b76      	ldr	r3, [pc, #472]	; (80027c8 <position_pid+0x250>)
 80025ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	f04f 0300 	mov.w	r3, #0
 80025fa:	f7fe fa75 	bl	8000ae8 <__aeabi_dcmpeq>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <position_pid+0x94>
	{
		err_sum = 0;
 8002604:	4b6f      	ldr	r3, [pc, #444]	; (80027c4 <position_pid+0x24c>)
 8002606:	f04f 0200 	mov.w	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
	}
	P_KI = err_sum * p_ki;
 800260c:	4b6d      	ldr	r3, [pc, #436]	; (80027c4 <position_pid+0x24c>)
 800260e:	ed93 7a00 	vldr	s14, [r3]
 8002612:	4b6e      	ldr	r3, [pc, #440]	; (80027cc <position_pid+0x254>)
 8002614:	edd3 7a00 	vldr	s15, [r3]
 8002618:	ee67 7a27 	vmul.f32	s15, s14, s15
 800261c:	4b6c      	ldr	r3, [pc, #432]	; (80027d0 <position_pid+0x258>)
 800261e:	edc3 7a00 	vstr	s15, [r3]

	err_d = (err - previous_err) / 0.0001;
 8002622:	4b65      	ldr	r3, [pc, #404]	; (80027b8 <position_pid+0x240>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	ee07 3a90 	vmov	s15, r3
 800262a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800262e:	4b69      	ldr	r3, [pc, #420]	; (80027d4 <position_pid+0x25c>)
 8002630:	edd3 7a00 	vldr	s15, [r3]
 8002634:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002638:	ee17 0a90 	vmov	r0, s15
 800263c:	f7fd ff94 	bl	8000568 <__aeabi_f2d>
 8002640:	a359      	add	r3, pc, #356	; (adr r3, 80027a8 <position_pid+0x230>)
 8002642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002646:	f7fe f911 	bl	800086c <__aeabi_ddiv>
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	4962      	ldr	r1, [pc, #392]	; (80027d8 <position_pid+0x260>)
 8002650:	e9c1 2300 	strd	r2, r3, [r1]
	previous_err = err;
 8002654:	4b58      	ldr	r3, [pc, #352]	; (80027b8 <position_pid+0x240>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	ee07 3a90 	vmov	s15, r3
 800265c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002660:	4b5c      	ldr	r3, [pc, #368]	; (80027d4 <position_pid+0x25c>)
 8002662:	edc3 7a00 	vstr	s15, [r3]
	P_KD = err_d * p_kd;
 8002666:	4b5d      	ldr	r3, [pc, #372]	; (80027dc <position_pid+0x264>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f7fd ff7c 	bl	8000568 <__aeabi_f2d>
 8002670:	4b59      	ldr	r3, [pc, #356]	; (80027d8 <position_pid+0x260>)
 8002672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002676:	f7fd ffcf 	bl	8000618 <__aeabi_dmul>
 800267a:	4602      	mov	r2, r0
 800267c:	460b      	mov	r3, r1
 800267e:	4958      	ldr	r1, [pc, #352]	; (80027e0 <position_pid+0x268>)
 8002680:	e9c1 2300 	strd	r2, r3, [r1]

	p_PID = P_KP + P_KI + P_KD;
 8002684:	4b4e      	ldr	r3, [pc, #312]	; (80027c0 <position_pid+0x248>)
 8002686:	ed93 7a00 	vldr	s14, [r3]
 800268a:	4b51      	ldr	r3, [pc, #324]	; (80027d0 <position_pid+0x258>)
 800268c:	edd3 7a00 	vldr	s15, [r3]
 8002690:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002694:	ee17 0a90 	vmov	r0, s15
 8002698:	f7fd ff66 	bl	8000568 <__aeabi_f2d>
 800269c:	4b50      	ldr	r3, [pc, #320]	; (80027e0 <position_pid+0x268>)
 800269e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a2:	f7fd fe03 	bl	80002ac <__adddf3>
 80026a6:	4602      	mov	r2, r0
 80026a8:	460b      	mov	r3, r1
 80026aa:	4947      	ldr	r1, [pc, #284]	; (80027c8 <position_pid+0x250>)
 80026ac:	e9c1 2300 	strd	r2, r3, [r1]

	if (p_PID >= 400)
 80026b0:	4b45      	ldr	r3, [pc, #276]	; (80027c8 <position_pid+0x250>)
 80026b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026b6:	f04f 0200 	mov.w	r2, #0
 80026ba:	4b4a      	ldr	r3, [pc, #296]	; (80027e4 <position_pid+0x26c>)
 80026bc:	f7fe fa32 	bl	8000b24 <__aeabi_dcmpge>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d006      	beq.n	80026d4 <position_pid+0x15c>
	{
		p_PID = 400;
 80026c6:	4940      	ldr	r1, [pc, #256]	; (80027c8 <position_pid+0x250>)
 80026c8:	f04f 0200 	mov.w	r2, #0
 80026cc:	4b45      	ldr	r3, [pc, #276]	; (80027e4 <position_pid+0x26c>)
 80026ce:	e9c1 2300 	strd	r2, r3, [r1]
 80026d2:	e010      	b.n	80026f6 <position_pid+0x17e>
	}
	else if (p_PID <= -400)
 80026d4:	4b3c      	ldr	r3, [pc, #240]	; (80027c8 <position_pid+0x250>)
 80026d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026da:	f04f 0200 	mov.w	r2, #0
 80026de:	4b42      	ldr	r3, [pc, #264]	; (80027e8 <position_pid+0x270>)
 80026e0:	f7fe fa16 	bl	8000b10 <__aeabi_dcmple>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d005      	beq.n	80026f6 <position_pid+0x17e>
	{
		p_PID = -400;
 80026ea:	4937      	ldr	r1, [pc, #220]	; (80027c8 <position_pid+0x250>)
 80026ec:	f04f 0200 	mov.w	r2, #0
 80026f0:	4b3d      	ldr	r3, [pc, #244]	; (80027e8 <position_pid+0x270>)
 80026f2:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if (p_PID > 0)
 80026f6:	4b34      	ldr	r3, [pc, #208]	; (80027c8 <position_pid+0x250>)
 80026f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026fc:	f04f 0200 	mov.w	r2, #0
 8002700:	f04f 0300 	mov.w	r3, #0
 8002704:	f7fe fa18 	bl	8000b38 <__aeabi_dcmpgt>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d010      	beq.n	8002730 <position_pid+0x1b8>
	{
		GPIOE->ODR &= ~1 << 0; // go
 800270e:	4b37      	ldr	r3, [pc, #220]	; (80027ec <position_pid+0x274>)
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	4a36      	ldr	r2, [pc, #216]	; (80027ec <position_pid+0x274>)
 8002714:	f023 0301 	bic.w	r3, r3, #1
 8002718:	6153      	str	r3, [r2, #20]
		TIM3->CCR1 = p_PID;
 800271a:	4b2b      	ldr	r3, [pc, #172]	; (80027c8 <position_pid+0x250>)
 800271c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002720:	4c33      	ldr	r4, [pc, #204]	; (80027f0 <position_pid+0x278>)
 8002722:	4610      	mov	r0, r2
 8002724:	4619      	mov	r1, r3
 8002726:	f7fe fa4f 	bl	8000bc8 <__aeabi_d2uiz>
 800272a:	4603      	mov	r3, r0
 800272c:	6363      	str	r3, [r4, #52]	; 0x34
	}




}
 800272e:	e036      	b.n	800279e <position_pid+0x226>
	else if (p_PID < 0)
 8002730:	4b25      	ldr	r3, [pc, #148]	; (80027c8 <position_pid+0x250>)
 8002732:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002736:	f04f 0200 	mov.w	r2, #0
 800273a:	f04f 0300 	mov.w	r3, #0
 800273e:	f7fe f9dd 	bl	8000afc <__aeabi_dcmplt>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d019      	beq.n	800277c <position_pid+0x204>
		GPIOE->ODR |= 1 << 0; // back
 8002748:	4b28      	ldr	r3, [pc, #160]	; (80027ec <position_pid+0x274>)
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	4a27      	ldr	r2, [pc, #156]	; (80027ec <position_pid+0x274>)
 800274e:	f043 0301 	orr.w	r3, r3, #1
 8002752:	6153      	str	r3, [r2, #20]
		p_PID = -p_PID;
 8002754:	4b1c      	ldr	r3, [pc, #112]	; (80027c8 <position_pid+0x250>)
 8002756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275a:	4614      	mov	r4, r2
 800275c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002760:	4b19      	ldr	r3, [pc, #100]	; (80027c8 <position_pid+0x250>)
 8002762:	e9c3 4500 	strd	r4, r5, [r3]
		TIM3->CCR1 = p_PID;
 8002766:	4b18      	ldr	r3, [pc, #96]	; (80027c8 <position_pid+0x250>)
 8002768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800276c:	4c20      	ldr	r4, [pc, #128]	; (80027f0 <position_pid+0x278>)
 800276e:	4610      	mov	r0, r2
 8002770:	4619      	mov	r1, r3
 8002772:	f7fe fa29 	bl	8000bc8 <__aeabi_d2uiz>
 8002776:	4603      	mov	r3, r0
 8002778:	6363      	str	r3, [r4, #52]	; 0x34
}
 800277a:	e010      	b.n	800279e <position_pid+0x226>
		p_PID = 0;
 800277c:	4912      	ldr	r1, [pc, #72]	; (80027c8 <position_pid+0x250>)
 800277e:	f04f 0200 	mov.w	r2, #0
 8002782:	f04f 0300 	mov.w	r3, #0
 8002786:	e9c1 2300 	strd	r2, r3, [r1]
		TIM3->CCR1 = p_PID;
 800278a:	4b0f      	ldr	r3, [pc, #60]	; (80027c8 <position_pid+0x250>)
 800278c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002790:	4c17      	ldr	r4, [pc, #92]	; (80027f0 <position_pid+0x278>)
 8002792:	4610      	mov	r0, r2
 8002794:	4619      	mov	r1, r3
 8002796:	f7fe fa17 	bl	8000bc8 <__aeabi_d2uiz>
 800279a:	4603      	mov	r3, r0
 800279c:	6363      	str	r3, [r4, #52]	; 0x34
}
 800279e:	bf00      	nop
 80027a0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80027a4:	f3af 8000 	nop.w
 80027a8:	eb1c432d 	.word	0xeb1c432d
 80027ac:	3f1a36e2 	.word	0x3f1a36e2
 80027b0:	20000ebe 	.word	0x20000ebe
 80027b4:	40000800 	.word	0x40000800
 80027b8:	20000ec0 	.word	0x20000ec0
 80027bc:	20000008 	.word	0x20000008
 80027c0:	20000ed4 	.word	0x20000ed4
 80027c4:	20000ec4 	.word	0x20000ec4
 80027c8:	20000ec8 	.word	0x20000ec8
 80027cc:	20000ed0 	.word	0x20000ed0
 80027d0:	20000ed8 	.word	0x20000ed8
 80027d4:	20000ef0 	.word	0x20000ef0
 80027d8:	20000ee8 	.word	0x20000ee8
 80027dc:	2000000c 	.word	0x2000000c
 80027e0:	20000ee0 	.word	0x20000ee0
 80027e4:	40790000 	.word	0x40790000
 80027e8:	c0790000 	.word	0xc0790000
 80027ec:	40021000 	.word	0x40021000
 80027f0:	40000400 	.word	0x40000400

080027f4 <microDelay>:
extern TIM_HandleTypeDef htim1;
extern TIM_HandleTypeDef htim7;
extern TIM_HandleTypeDef htim12;

void microDelay(uint16_t delay)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	4603      	mov	r3, r0
 80027fc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim7,0);
 80027fe:	4b09      	ldr	r3, [pc, #36]	; (8002824 <microDelay+0x30>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2200      	movs	r2, #0
 8002804:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim7) < delay );
 8002806:	bf00      	nop
 8002808:	4b06      	ldr	r3, [pc, #24]	; (8002824 <microDelay+0x30>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800280e:	88fb      	ldrh	r3, [r7, #6]
 8002810:	429a      	cmp	r2, r3
 8002812:	d3f9      	bcc.n	8002808 <microDelay+0x14>
}
 8002814:	bf00      	nop
 8002816:	bf00      	nop
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	2000080c 	.word	0x2000080c

08002828 <distance_sensor>:



void distance_sensor (void)
{
 8002828:	b598      	push	{r3, r4, r7, lr}
 800282a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 800282c:	2201      	movs	r2, #1
 800282e:	2180      	movs	r1, #128	; 0x80
 8002830:	484f      	ldr	r0, [pc, #316]	; (8002970 <distance_sensor+0x148>)
 8002832:	f003 f97d 	bl	8005b30 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim12, 0);
 8002836:	4b4f      	ldr	r3, [pc, #316]	; (8002974 <distance_sensor+0x14c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2200      	movs	r2, #0
 800283c:	625a      	str	r2, [r3, #36]	; 0x24
    while (__HAL_TIM_GET_COUNTER (&htim12) < 10);  // wait for 10 us
 800283e:	bf00      	nop
 8002840:	4b4c      	ldr	r3, [pc, #304]	; (8002974 <distance_sensor+0x14c>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002846:	2b09      	cmp	r3, #9
 8002848:	d9fa      	bls.n	8002840 <distance_sensor+0x18>
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 800284a:	2200      	movs	r2, #0
 800284c:	2180      	movs	r1, #128	; 0x80
 800284e:	4848      	ldr	r0, [pc, #288]	; (8002970 <distance_sensor+0x148>)
 8002850:	f003 f96e 	bl	8005b30 <HAL_GPIO_WritePin>

    pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8002854:	f001 fa00 	bl	8003c58 <HAL_GetTick>
 8002858:	4603      	mov	r3, r0
 800285a:	4a47      	ldr	r2, [pc, #284]	; (8002978 <distance_sensor+0x150>)
 800285c:	6013      	str	r3, [r2, #0]
    // wait for the echo pin to go high
    while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 800285e:	bf00      	nop
 8002860:	2140      	movs	r1, #64	; 0x40
 8002862:	4843      	ldr	r0, [pc, #268]	; (8002970 <distance_sensor+0x148>)
 8002864:	f003 f94c 	bl	8005b00 <HAL_GPIO_ReadPin>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d108      	bne.n	8002880 <distance_sensor+0x58>
 800286e:	4b42      	ldr	r3, [pc, #264]	; (8002978 <distance_sensor+0x150>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f103 040a 	add.w	r4, r3, #10
 8002876:	f001 f9ef 	bl	8003c58 <HAL_GetTick>
 800287a:	4603      	mov	r3, r0
 800287c:	429c      	cmp	r4, r3
 800287e:	d8ef      	bhi.n	8002860 <distance_sensor+0x38>
    Value1 = __HAL_TIM_GET_COUNTER (&htim12);
 8002880:	4b3c      	ldr	r3, [pc, #240]	; (8002974 <distance_sensor+0x14c>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002886:	4a3d      	ldr	r2, [pc, #244]	; (800297c <distance_sensor+0x154>)
 8002888:	6013      	str	r3, [r2, #0]

    pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 800288a:	f001 f9e5 	bl	8003c58 <HAL_GetTick>
 800288e:	4603      	mov	r3, r0
 8002890:	4a39      	ldr	r2, [pc, #228]	; (8002978 <distance_sensor+0x150>)
 8002892:	6013      	str	r3, [r2, #0]
    // wait for the echo pin to go low
    while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 8002894:	bf00      	nop
 8002896:	2140      	movs	r1, #64	; 0x40
 8002898:	4835      	ldr	r0, [pc, #212]	; (8002970 <distance_sensor+0x148>)
 800289a:	f003 f931 	bl	8005b00 <HAL_GPIO_ReadPin>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d008      	beq.n	80028b6 <distance_sensor+0x8e>
 80028a4:	4b34      	ldr	r3, [pc, #208]	; (8002978 <distance_sensor+0x150>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f103 0432 	add.w	r4, r3, #50	; 0x32
 80028ac:	f001 f9d4 	bl	8003c58 <HAL_GetTick>
 80028b0:	4603      	mov	r3, r0
 80028b2:	429c      	cmp	r4, r3
 80028b4:	d8ef      	bhi.n	8002896 <distance_sensor+0x6e>
    Value2 = __HAL_TIM_GET_COUNTER (&htim12);
 80028b6:	4b2f      	ldr	r3, [pc, #188]	; (8002974 <distance_sensor+0x14c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028bc:	4a30      	ldr	r2, [pc, #192]	; (8002980 <distance_sensor+0x158>)
 80028be:	6013      	str	r3, [r2, #0]

    Distance = (Value2-Value1)* 0.034/2/2;
 80028c0:	4b2f      	ldr	r3, [pc, #188]	; (8002980 <distance_sensor+0x158>)
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	4b2d      	ldr	r3, [pc, #180]	; (800297c <distance_sensor+0x154>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7fd fe2a 	bl	8000524 <__aeabi_ui2d>
 80028d0:	a325      	add	r3, pc, #148	; (adr r3, 8002968 <distance_sensor+0x140>)
 80028d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d6:	f7fd fe9f 	bl	8000618 <__aeabi_dmul>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	4610      	mov	r0, r2
 80028e0:	4619      	mov	r1, r3
 80028e2:	f04f 0200 	mov.w	r2, #0
 80028e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80028ea:	f7fd ffbf 	bl	800086c <__aeabi_ddiv>
 80028ee:	4602      	mov	r2, r0
 80028f0:	460b      	mov	r3, r1
 80028f2:	4610      	mov	r0, r2
 80028f4:	4619      	mov	r1, r3
 80028f6:	f04f 0200 	mov.w	r2, #0
 80028fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80028fe:	f7fd ffb5 	bl	800086c <__aeabi_ddiv>
 8002902:	4602      	mov	r2, r0
 8002904:	460b      	mov	r3, r1
 8002906:	4610      	mov	r0, r2
 8002908:	4619      	mov	r1, r3
 800290a:	f7fe f97d 	bl	8000c08 <__aeabi_d2f>
 800290e:	4603      	mov	r3, r0
 8002910:	4a1c      	ldr	r2, [pc, #112]	; (8002984 <distance_sensor+0x15c>)
 8002912:	6013      	str	r3, [r2, #0]

    Distance_Sum = Distance + Distance_Sum;
 8002914:	4b1b      	ldr	r3, [pc, #108]	; (8002984 <distance_sensor+0x15c>)
 8002916:	ed93 7a00 	vldr	s14, [r3]
 800291a:	4b1b      	ldr	r3, [pc, #108]	; (8002988 <distance_sensor+0x160>)
 800291c:	edd3 7a00 	vldr	s15, [r3]
 8002920:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002924:	4b18      	ldr	r3, [pc, #96]	; (8002988 <distance_sensor+0x160>)
 8002926:	edc3 7a00 	vstr	s15, [r3]
    	  j++;
 800292a:	4b18      	ldr	r3, [pc, #96]	; (800298c <distance_sensor+0x164>)
 800292c:	881b      	ldrh	r3, [r3, #0]
 800292e:	3301      	adds	r3, #1
 8002930:	b29a      	uxth	r2, r3
 8002932:	4b16      	ldr	r3, [pc, #88]	; (800298c <distance_sensor+0x164>)
 8002934:	801a      	strh	r2, [r3, #0]
    	 	 if(j==100)
 8002936:	4b15      	ldr	r3, [pc, #84]	; (800298c <distance_sensor+0x164>)
 8002938:	881b      	ldrh	r3, [r3, #0]
 800293a:	2b64      	cmp	r3, #100	; 0x64
 800293c:	d110      	bne.n	8002960 <distance_sensor+0x138>
    	 	  {
    	 		Distance_Avg = Distance_Sum/101;
 800293e:	4b12      	ldr	r3, [pc, #72]	; (8002988 <distance_sensor+0x160>)
 8002940:	ed93 7a00 	vldr	s14, [r3]
 8002944:	eddf 6a12 	vldr	s13, [pc, #72]	; 8002990 <distance_sensor+0x168>
 8002948:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800294c:	4b11      	ldr	r3, [pc, #68]	; (8002994 <distance_sensor+0x16c>)
 800294e:	edc3 7a00 	vstr	s15, [r3]

    	 			  j=0;
 8002952:	4b0e      	ldr	r3, [pc, #56]	; (800298c <distance_sensor+0x164>)
 8002954:	2200      	movs	r2, #0
 8002956:	801a      	strh	r2, [r3, #0]
    	 			 Distance_Sum=0;
 8002958:	4b0b      	ldr	r3, [pc, #44]	; (8002988 <distance_sensor+0x160>)
 800295a:	f04f 0200 	mov.w	r2, #0
 800295e:	601a      	str	r2, [r3, #0]

    //     printf("Distance = %f \r\n",Distance);
	//      sprintf((char *)buffer, "%d \r\n",Distance);
		 //     HAL_UART_Transmit(&huart3, buffer, strlen((char *)buffer), 100);

}
 8002960:	bf00      	nop
 8002962:	bd98      	pop	{r3, r4, r7, pc}
 8002964:	f3af 8000 	nop.w
 8002968:	b020c49c 	.word	0xb020c49c
 800296c:	3fa16872 	.word	0x3fa16872
 8002970:	40020c00 	.word	0x40020c00
 8002974:	2000089c 	.word	0x2000089c
 8002978:	20000ef4 	.word	0x20000ef4
 800297c:	20000ef8 	.word	0x20000ef8
 8002980:	20000efc 	.word	0x20000efc
 8002984:	20000f00 	.word	0x20000f00
 8002988:	20000f04 	.word	0x20000f04
 800298c:	20000f0c 	.word	0x20000f0c
 8002990:	42ca0000 	.word	0x42ca0000
 8002994:	20000f08 	.word	0x20000f08

08002998 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800299e:	2300      	movs	r3, #0
 80029a0:	607b      	str	r3, [r7, #4]
 80029a2:	4b10      	ldr	r3, [pc, #64]	; (80029e4 <HAL_MspInit+0x4c>)
 80029a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a6:	4a0f      	ldr	r2, [pc, #60]	; (80029e4 <HAL_MspInit+0x4c>)
 80029a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029ac:	6453      	str	r3, [r2, #68]	; 0x44
 80029ae:	4b0d      	ldr	r3, [pc, #52]	; (80029e4 <HAL_MspInit+0x4c>)
 80029b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029b6:	607b      	str	r3, [r7, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029ba:	2300      	movs	r3, #0
 80029bc:	603b      	str	r3, [r7, #0]
 80029be:	4b09      	ldr	r3, [pc, #36]	; (80029e4 <HAL_MspInit+0x4c>)
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	4a08      	ldr	r2, [pc, #32]	; (80029e4 <HAL_MspInit+0x4c>)
 80029c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c8:	6413      	str	r3, [r2, #64]	; 0x40
 80029ca:	4b06      	ldr	r3, [pc, #24]	; (80029e4 <HAL_MspInit+0x4c>)
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d2:	603b      	str	r3, [r7, #0]
 80029d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	40023800 	.word	0x40023800

080029e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b08a      	sub	sp, #40	; 0x28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f0:	f107 0314 	add.w	r3, r7, #20
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	605a      	str	r2, [r3, #4]
 80029fa:	609a      	str	r2, [r3, #8]
 80029fc:	60da      	str	r2, [r3, #12]
 80029fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a40      	ldr	r2, [pc, #256]	; (8002b08 <HAL_ADC_MspInit+0x120>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d17a      	bne.n	8002b00 <HAL_ADC_MspInit+0x118>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	613b      	str	r3, [r7, #16]
 8002a0e:	4b3f      	ldr	r3, [pc, #252]	; (8002b0c <HAL_ADC_MspInit+0x124>)
 8002a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a12:	4a3e      	ldr	r2, [pc, #248]	; (8002b0c <HAL_ADC_MspInit+0x124>)
 8002a14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a18:	6453      	str	r3, [r2, #68]	; 0x44
 8002a1a:	4b3c      	ldr	r3, [pc, #240]	; (8002b0c <HAL_ADC_MspInit+0x124>)
 8002a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a22:	613b      	str	r3, [r7, #16]
 8002a24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a26:	2300      	movs	r3, #0
 8002a28:	60fb      	str	r3, [r7, #12]
 8002a2a:	4b38      	ldr	r3, [pc, #224]	; (8002b0c <HAL_ADC_MspInit+0x124>)
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2e:	4a37      	ldr	r2, [pc, #220]	; (8002b0c <HAL_ADC_MspInit+0x124>)
 8002a30:	f043 0320 	orr.w	r3, r3, #32
 8002a34:	6313      	str	r3, [r2, #48]	; 0x30
 8002a36:	4b35      	ldr	r3, [pc, #212]	; (8002b0c <HAL_ADC_MspInit+0x124>)
 8002a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3a:	f003 0320 	and.w	r3, r3, #32
 8002a3e:	60fb      	str	r3, [r7, #12]
 8002a40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a42:	2300      	movs	r3, #0
 8002a44:	60bb      	str	r3, [r7, #8]
 8002a46:	4b31      	ldr	r3, [pc, #196]	; (8002b0c <HAL_ADC_MspInit+0x124>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4a:	4a30      	ldr	r2, [pc, #192]	; (8002b0c <HAL_ADC_MspInit+0x124>)
 8002a4c:	f043 0304 	orr.w	r3, r3, #4
 8002a50:	6313      	str	r3, [r2, #48]	; 0x30
 8002a52:	4b2e      	ldr	r3, [pc, #184]	; (8002b0c <HAL_ADC_MspInit+0x124>)
 8002a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a56:	f003 0304 	and.w	r3, r3, #4
 8002a5a:	60bb      	str	r3, [r7, #8]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PF4     ------> ADC3_IN14
    PC2     ------> ADC3_IN12
    PC3     ------> ADC3_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002a5e:	2310      	movs	r3, #16
 8002a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a62:	2303      	movs	r3, #3
 8002a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a66:	2300      	movs	r3, #0
 8002a68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a6a:	f107 0314 	add.w	r3, r7, #20
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4827      	ldr	r0, [pc, #156]	; (8002b10 <HAL_ADC_MspInit+0x128>)
 8002a72:	f002 fe99 	bl	80057a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002a76:	230c      	movs	r3, #12
 8002a78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a82:	f107 0314 	add.w	r3, r7, #20
 8002a86:	4619      	mov	r1, r3
 8002a88:	4822      	ldr	r0, [pc, #136]	; (8002b14 <HAL_ADC_MspInit+0x12c>)
 8002a8a:	f002 fe8d 	bl	80057a8 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream1;
 8002a8e:	4b22      	ldr	r3, [pc, #136]	; (8002b18 <HAL_ADC_MspInit+0x130>)
 8002a90:	4a22      	ldr	r2, [pc, #136]	; (8002b1c <HAL_ADC_MspInit+0x134>)
 8002a92:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8002a94:	4b20      	ldr	r3, [pc, #128]	; (8002b18 <HAL_ADC_MspInit+0x130>)
 8002a96:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002a9a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a9c:	4b1e      	ldr	r3, [pc, #120]	; (8002b18 <HAL_ADC_MspInit+0x130>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002aa2:	4b1d      	ldr	r3, [pc, #116]	; (8002b18 <HAL_ADC_MspInit+0x130>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002aa8:	4b1b      	ldr	r3, [pc, #108]	; (8002b18 <HAL_ADC_MspInit+0x130>)
 8002aaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002aae:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ab0:	4b19      	ldr	r3, [pc, #100]	; (8002b18 <HAL_ADC_MspInit+0x130>)
 8002ab2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ab6:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ab8:	4b17      	ldr	r3, [pc, #92]	; (8002b18 <HAL_ADC_MspInit+0x130>)
 8002aba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002abe:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002ac0:	4b15      	ldr	r3, [pc, #84]	; (8002b18 <HAL_ADC_MspInit+0x130>)
 8002ac2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ac6:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002ac8:	4b13      	ldr	r3, [pc, #76]	; (8002b18 <HAL_ADC_MspInit+0x130>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ace:	4b12      	ldr	r3, [pc, #72]	; (8002b18 <HAL_ADC_MspInit+0x130>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002ad4:	4810      	ldr	r0, [pc, #64]	; (8002b18 <HAL_ADC_MspInit+0x130>)
 8002ad6:	f001 ff3d 	bl	8004954 <HAL_DMA_Init>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8002ae0:	f7ff fd44 	bl	800256c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a0c      	ldr	r2, [pc, #48]	; (8002b18 <HAL_ADC_MspInit+0x130>)
 8002ae8:	639a      	str	r2, [r3, #56]	; 0x38
 8002aea:	4a0b      	ldr	r2, [pc, #44]	; (8002b18 <HAL_ADC_MspInit+0x130>)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002af0:	2200      	movs	r2, #0
 8002af2:	2100      	movs	r1, #0
 8002af4:	2012      	movs	r0, #18
 8002af6:	f001 fef6 	bl	80048e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002afa:	2012      	movs	r0, #18
 8002afc:	f001 ff0f 	bl	800491e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002b00:	bf00      	nop
 8002b02:	3728      	adds	r7, #40	; 0x28
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40012200 	.word	0x40012200
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	40021400 	.word	0x40021400
 8002b14:	40020800 	.word	0x40020800
 8002b18:	20000594 	.word	0x20000594
 8002b1c:	40026428 	.word	0x40026428

08002b20 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b08e      	sub	sp, #56	; 0x38
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	605a      	str	r2, [r3, #4]
 8002b32:	609a      	str	r2, [r3, #8]
 8002b34:	60da      	str	r2, [r3, #12]
 8002b36:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a55      	ldr	r2, [pc, #340]	; (8002c94 <HAL_ETH_MspInit+0x174>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	f040 80a4 	bne.w	8002c8c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002b44:	2300      	movs	r3, #0
 8002b46:	623b      	str	r3, [r7, #32]
 8002b48:	4b53      	ldr	r3, [pc, #332]	; (8002c98 <HAL_ETH_MspInit+0x178>)
 8002b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4c:	4a52      	ldr	r2, [pc, #328]	; (8002c98 <HAL_ETH_MspInit+0x178>)
 8002b4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b52:	6313      	str	r3, [r2, #48]	; 0x30
 8002b54:	4b50      	ldr	r3, [pc, #320]	; (8002c98 <HAL_ETH_MspInit+0x178>)
 8002b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b5c:	623b      	str	r3, [r7, #32]
 8002b5e:	6a3b      	ldr	r3, [r7, #32]
 8002b60:	2300      	movs	r3, #0
 8002b62:	61fb      	str	r3, [r7, #28]
 8002b64:	4b4c      	ldr	r3, [pc, #304]	; (8002c98 <HAL_ETH_MspInit+0x178>)
 8002b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b68:	4a4b      	ldr	r2, [pc, #300]	; (8002c98 <HAL_ETH_MspInit+0x178>)
 8002b6a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b6e:	6313      	str	r3, [r2, #48]	; 0x30
 8002b70:	4b49      	ldr	r3, [pc, #292]	; (8002c98 <HAL_ETH_MspInit+0x178>)
 8002b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b78:	61fb      	str	r3, [r7, #28]
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	61bb      	str	r3, [r7, #24]
 8002b80:	4b45      	ldr	r3, [pc, #276]	; (8002c98 <HAL_ETH_MspInit+0x178>)
 8002b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b84:	4a44      	ldr	r2, [pc, #272]	; (8002c98 <HAL_ETH_MspInit+0x178>)
 8002b86:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002b8a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b8c:	4b42      	ldr	r3, [pc, #264]	; (8002c98 <HAL_ETH_MspInit+0x178>)
 8002b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b94:	61bb      	str	r3, [r7, #24]
 8002b96:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b98:	2300      	movs	r3, #0
 8002b9a:	617b      	str	r3, [r7, #20]
 8002b9c:	4b3e      	ldr	r3, [pc, #248]	; (8002c98 <HAL_ETH_MspInit+0x178>)
 8002b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba0:	4a3d      	ldr	r2, [pc, #244]	; (8002c98 <HAL_ETH_MspInit+0x178>)
 8002ba2:	f043 0304 	orr.w	r3, r3, #4
 8002ba6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba8:	4b3b      	ldr	r3, [pc, #236]	; (8002c98 <HAL_ETH_MspInit+0x178>)
 8002baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	617b      	str	r3, [r7, #20]
 8002bb2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	613b      	str	r3, [r7, #16]
 8002bb8:	4b37      	ldr	r3, [pc, #220]	; (8002c98 <HAL_ETH_MspInit+0x178>)
 8002bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbc:	4a36      	ldr	r2, [pc, #216]	; (8002c98 <HAL_ETH_MspInit+0x178>)
 8002bbe:	f043 0301 	orr.w	r3, r3, #1
 8002bc2:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc4:	4b34      	ldr	r3, [pc, #208]	; (8002c98 <HAL_ETH_MspInit+0x178>)
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	613b      	str	r3, [r7, #16]
 8002bce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	4b30      	ldr	r3, [pc, #192]	; (8002c98 <HAL_ETH_MspInit+0x178>)
 8002bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd8:	4a2f      	ldr	r2, [pc, #188]	; (8002c98 <HAL_ETH_MspInit+0x178>)
 8002bda:	f043 0302 	orr.w	r3, r3, #2
 8002bde:	6313      	str	r3, [r2, #48]	; 0x30
 8002be0:	4b2d      	ldr	r3, [pc, #180]	; (8002c98 <HAL_ETH_MspInit+0x178>)
 8002be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	60fb      	str	r3, [r7, #12]
 8002bea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002bec:	2300      	movs	r3, #0
 8002bee:	60bb      	str	r3, [r7, #8]
 8002bf0:	4b29      	ldr	r3, [pc, #164]	; (8002c98 <HAL_ETH_MspInit+0x178>)
 8002bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf4:	4a28      	ldr	r2, [pc, #160]	; (8002c98 <HAL_ETH_MspInit+0x178>)
 8002bf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bfa:	6313      	str	r3, [r2, #48]	; 0x30
 8002bfc:	4b26      	ldr	r3, [pc, #152]	; (8002c98 <HAL_ETH_MspInit+0x178>)
 8002bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c04:	60bb      	str	r3, [r7, #8]
 8002c06:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002c08:	2332      	movs	r3, #50	; 0x32
 8002c0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c10:	2300      	movs	r3, #0
 8002c12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c14:	2303      	movs	r3, #3
 8002c16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002c18:	230b      	movs	r3, #11
 8002c1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c20:	4619      	mov	r1, r3
 8002c22:	481e      	ldr	r0, [pc, #120]	; (8002c9c <HAL_ETH_MspInit+0x17c>)
 8002c24:	f002 fdc0 	bl	80057a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002c28:	2386      	movs	r3, #134	; 0x86
 8002c2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c30:	2300      	movs	r3, #0
 8002c32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c34:	2303      	movs	r3, #3
 8002c36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002c38:	230b      	movs	r3, #11
 8002c3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c40:	4619      	mov	r1, r3
 8002c42:	4817      	ldr	r0, [pc, #92]	; (8002ca0 <HAL_ETH_MspInit+0x180>)
 8002c44:	f002 fdb0 	bl	80057a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002c48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4e:	2302      	movs	r3, #2
 8002c50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c52:	2300      	movs	r3, #0
 8002c54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c56:	2303      	movs	r3, #3
 8002c58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002c5a:	230b      	movs	r3, #11
 8002c5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002c5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c62:	4619      	mov	r1, r3
 8002c64:	480f      	ldr	r0, [pc, #60]	; (8002ca4 <HAL_ETH_MspInit+0x184>)
 8002c66:	f002 fd9f 	bl	80057a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002c6a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002c6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c70:	2302      	movs	r3, #2
 8002c72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c74:	2300      	movs	r3, #0
 8002c76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002c7c:	230b      	movs	r3, #11
 8002c7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c84:	4619      	mov	r1, r3
 8002c86:	4808      	ldr	r0, [pc, #32]	; (8002ca8 <HAL_ETH_MspInit+0x188>)
 8002c88:	f002 fd8e 	bl	80057a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002c8c:	bf00      	nop
 8002c8e:	3738      	adds	r7, #56	; 0x38
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40028000 	.word	0x40028000
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	40020800 	.word	0x40020800
 8002ca0:	40020000 	.word	0x40020000
 8002ca4:	40020400 	.word	0x40020400
 8002ca8:	40021800 	.word	0x40021800

08002cac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08a      	sub	sp, #40	; 0x28
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a74      	ldr	r2, [pc, #464]	; (8002e8c <HAL_TIM_Base_MspInit+0x1e0>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d10e      	bne.n	8002cdc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8002cc2:	4b73      	ldr	r3, [pc, #460]	; (8002e90 <HAL_TIM_Base_MspInit+0x1e4>)
 8002cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc6:	4a72      	ldr	r2, [pc, #456]	; (8002e90 <HAL_TIM_Base_MspInit+0x1e4>)
 8002cc8:	f043 0301 	orr.w	r3, r3, #1
 8002ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8002cce:	4b70      	ldr	r3, [pc, #448]	; (8002e90 <HAL_TIM_Base_MspInit+0x1e4>)
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002cda:	e0d2      	b.n	8002e82 <HAL_TIM_Base_MspInit+0x1d6>
  else if(htim_base->Instance==TIM3)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a6c      	ldr	r2, [pc, #432]	; (8002e94 <HAL_TIM_Base_MspInit+0x1e8>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d116      	bne.n	8002d14 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	623b      	str	r3, [r7, #32]
 8002cea:	4b69      	ldr	r3, [pc, #420]	; (8002e90 <HAL_TIM_Base_MspInit+0x1e4>)
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	4a68      	ldr	r2, [pc, #416]	; (8002e90 <HAL_TIM_Base_MspInit+0x1e4>)
 8002cf0:	f043 0302 	orr.w	r3, r3, #2
 8002cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cf6:	4b66      	ldr	r3, [pc, #408]	; (8002e90 <HAL_TIM_Base_MspInit+0x1e4>)
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	623b      	str	r3, [r7, #32]
 8002d00:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002d02:	2200      	movs	r2, #0
 8002d04:	2100      	movs	r1, #0
 8002d06:	201d      	movs	r0, #29
 8002d08:	f001 fded 	bl	80048e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002d0c:	201d      	movs	r0, #29
 8002d0e:	f001 fe06 	bl	800491e <HAL_NVIC_EnableIRQ>
}
 8002d12:	e0b6      	b.n	8002e82 <HAL_TIM_Base_MspInit+0x1d6>
  else if(htim_base->Instance==TIM6)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a5f      	ldr	r2, [pc, #380]	; (8002e98 <HAL_TIM_Base_MspInit+0x1ec>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d116      	bne.n	8002d4c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61fb      	str	r3, [r7, #28]
 8002d22:	4b5b      	ldr	r3, [pc, #364]	; (8002e90 <HAL_TIM_Base_MspInit+0x1e4>)
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	4a5a      	ldr	r2, [pc, #360]	; (8002e90 <HAL_TIM_Base_MspInit+0x1e4>)
 8002d28:	f043 0310 	orr.w	r3, r3, #16
 8002d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d2e:	4b58      	ldr	r3, [pc, #352]	; (8002e90 <HAL_TIM_Base_MspInit+0x1e4>)
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	f003 0310 	and.w	r3, r3, #16
 8002d36:	61fb      	str	r3, [r7, #28]
 8002d38:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	2106      	movs	r1, #6
 8002d3e:	2036      	movs	r0, #54	; 0x36
 8002d40:	f001 fdd1 	bl	80048e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002d44:	2036      	movs	r0, #54	; 0x36
 8002d46:	f001 fdea 	bl	800491e <HAL_NVIC_EnableIRQ>
}
 8002d4a:	e09a      	b.n	8002e82 <HAL_TIM_Base_MspInit+0x1d6>
  else if(htim_base->Instance==TIM7)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a52      	ldr	r2, [pc, #328]	; (8002e9c <HAL_TIM_Base_MspInit+0x1f0>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d116      	bne.n	8002d84 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002d56:	2300      	movs	r3, #0
 8002d58:	61bb      	str	r3, [r7, #24]
 8002d5a:	4b4d      	ldr	r3, [pc, #308]	; (8002e90 <HAL_TIM_Base_MspInit+0x1e4>)
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	4a4c      	ldr	r2, [pc, #304]	; (8002e90 <HAL_TIM_Base_MspInit+0x1e4>)
 8002d60:	f043 0320 	orr.w	r3, r3, #32
 8002d64:	6413      	str	r3, [r2, #64]	; 0x40
 8002d66:	4b4a      	ldr	r3, [pc, #296]	; (8002e90 <HAL_TIM_Base_MspInit+0x1e4>)
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	f003 0320 	and.w	r3, r3, #32
 8002d6e:	61bb      	str	r3, [r7, #24]
 8002d70:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002d72:	2200      	movs	r2, #0
 8002d74:	2100      	movs	r1, #0
 8002d76:	2037      	movs	r0, #55	; 0x37
 8002d78:	f001 fdb5 	bl	80048e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002d7c:	2037      	movs	r0, #55	; 0x37
 8002d7e:	f001 fdce 	bl	800491e <HAL_NVIC_EnableIRQ>
}
 8002d82:	e07e      	b.n	8002e82 <HAL_TIM_Base_MspInit+0x1d6>
  else if(htim_base->Instance==TIM8)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a45      	ldr	r2, [pc, #276]	; (8002ea0 <HAL_TIM_Base_MspInit+0x1f4>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d126      	bne.n	8002ddc <HAL_TIM_Base_MspInit+0x130>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002d8e:	2300      	movs	r3, #0
 8002d90:	617b      	str	r3, [r7, #20]
 8002d92:	4b3f      	ldr	r3, [pc, #252]	; (8002e90 <HAL_TIM_Base_MspInit+0x1e4>)
 8002d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d96:	4a3e      	ldr	r2, [pc, #248]	; (8002e90 <HAL_TIM_Base_MspInit+0x1e4>)
 8002d98:	f043 0302 	orr.w	r3, r3, #2
 8002d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d9e:	4b3c      	ldr	r3, [pc, #240]	; (8002e90 <HAL_TIM_Base_MspInit+0x1e4>)
 8002da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	617b      	str	r3, [r7, #20]
 8002da8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8002daa:	2200      	movs	r2, #0
 8002dac:	2100      	movs	r1, #0
 8002dae:	202b      	movs	r0, #43	; 0x2b
 8002db0:	f001 fd99 	bl	80048e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002db4:	202b      	movs	r0, #43	; 0x2b
 8002db6:	f001 fdb2 	bl	800491e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002dba:	2200      	movs	r2, #0
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	202c      	movs	r0, #44	; 0x2c
 8002dc0:	f001 fd91 	bl	80048e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002dc4:	202c      	movs	r0, #44	; 0x2c
 8002dc6:	f001 fdaa 	bl	800491e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002dca:	2200      	movs	r2, #0
 8002dcc:	2100      	movs	r1, #0
 8002dce:	202d      	movs	r0, #45	; 0x2d
 8002dd0:	f001 fd89 	bl	80048e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002dd4:	202d      	movs	r0, #45	; 0x2d
 8002dd6:	f001 fda2 	bl	800491e <HAL_NVIC_EnableIRQ>
}
 8002dda:	e052      	b.n	8002e82 <HAL_TIM_Base_MspInit+0x1d6>
  else if(htim_base->Instance==TIM12)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a30      	ldr	r2, [pc, #192]	; (8002ea4 <HAL_TIM_Base_MspInit+0x1f8>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d116      	bne.n	8002e14 <HAL_TIM_Base_MspInit+0x168>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002de6:	2300      	movs	r3, #0
 8002de8:	613b      	str	r3, [r7, #16]
 8002dea:	4b29      	ldr	r3, [pc, #164]	; (8002e90 <HAL_TIM_Base_MspInit+0x1e4>)
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	4a28      	ldr	r2, [pc, #160]	; (8002e90 <HAL_TIM_Base_MspInit+0x1e4>)
 8002df0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002df4:	6413      	str	r3, [r2, #64]	; 0x40
 8002df6:	4b26      	ldr	r3, [pc, #152]	; (8002e90 <HAL_TIM_Base_MspInit+0x1e4>)
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dfe:	613b      	str	r3, [r7, #16]
 8002e00:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8002e02:	2200      	movs	r2, #0
 8002e04:	2100      	movs	r1, #0
 8002e06:	202b      	movs	r0, #43	; 0x2b
 8002e08:	f001 fd6d 	bl	80048e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002e0c:	202b      	movs	r0, #43	; 0x2b
 8002e0e:	f001 fd86 	bl	800491e <HAL_NVIC_EnableIRQ>
}
 8002e12:	e036      	b.n	8002e82 <HAL_TIM_Base_MspInit+0x1d6>
  else if(htim_base->Instance==TIM13)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a23      	ldr	r2, [pc, #140]	; (8002ea8 <HAL_TIM_Base_MspInit+0x1fc>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d116      	bne.n	8002e4c <HAL_TIM_Base_MspInit+0x1a0>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60fb      	str	r3, [r7, #12]
 8002e22:	4b1b      	ldr	r3, [pc, #108]	; (8002e90 <HAL_TIM_Base_MspInit+0x1e4>)
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	4a1a      	ldr	r2, [pc, #104]	; (8002e90 <HAL_TIM_Base_MspInit+0x1e4>)
 8002e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e2e:	4b18      	ldr	r3, [pc, #96]	; (8002e90 <HAL_TIM_Base_MspInit+0x1e4>)
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e36:	60fb      	str	r3, [r7, #12]
 8002e38:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	202c      	movs	r0, #44	; 0x2c
 8002e40:	f001 fd51 	bl	80048e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002e44:	202c      	movs	r0, #44	; 0x2c
 8002e46:	f001 fd6a 	bl	800491e <HAL_NVIC_EnableIRQ>
}
 8002e4a:	e01a      	b.n	8002e82 <HAL_TIM_Base_MspInit+0x1d6>
  else if(htim_base->Instance==TIM14)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a16      	ldr	r2, [pc, #88]	; (8002eac <HAL_TIM_Base_MspInit+0x200>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d115      	bne.n	8002e82 <HAL_TIM_Base_MspInit+0x1d6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002e56:	2300      	movs	r3, #0
 8002e58:	60bb      	str	r3, [r7, #8]
 8002e5a:	4b0d      	ldr	r3, [pc, #52]	; (8002e90 <HAL_TIM_Base_MspInit+0x1e4>)
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	4a0c      	ldr	r2, [pc, #48]	; (8002e90 <HAL_TIM_Base_MspInit+0x1e4>)
 8002e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e64:	6413      	str	r3, [r2, #64]	; 0x40
 8002e66:	4b0a      	ldr	r3, [pc, #40]	; (8002e90 <HAL_TIM_Base_MspInit+0x1e4>)
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6e:	60bb      	str	r3, [r7, #8]
 8002e70:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002e72:	2200      	movs	r2, #0
 8002e74:	2100      	movs	r1, #0
 8002e76:	202d      	movs	r0, #45	; 0x2d
 8002e78:	f001 fd35 	bl	80048e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002e7c:	202d      	movs	r0, #45	; 0x2d
 8002e7e:	f001 fd4e 	bl	800491e <HAL_NVIC_EnableIRQ>
}
 8002e82:	bf00      	nop
 8002e84:	3728      	adds	r7, #40	; 0x28
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40010000 	.word	0x40010000
 8002e90:	40023800 	.word	0x40023800
 8002e94:	40000400 	.word	0x40000400
 8002e98:	40001000 	.word	0x40001000
 8002e9c:	40001400 	.word	0x40001400
 8002ea0:	40010400 	.word	0x40010400
 8002ea4:	40001800 	.word	0x40001800
 8002ea8:	40001c00 	.word	0x40001c00
 8002eac:	40002000 	.word	0x40002000

08002eb0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b08c      	sub	sp, #48	; 0x30
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb8:	f107 031c 	add.w	r3, r7, #28
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	605a      	str	r2, [r3, #4]
 8002ec2:	609a      	str	r2, [r3, #8]
 8002ec4:	60da      	str	r2, [r3, #12]
 8002ec6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ed0:	d14b      	bne.n	8002f6a <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	61bb      	str	r3, [r7, #24]
 8002ed6:	4b58      	ldr	r3, [pc, #352]	; (8003038 <HAL_TIM_Encoder_MspInit+0x188>)
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	4a57      	ldr	r2, [pc, #348]	; (8003038 <HAL_TIM_Encoder_MspInit+0x188>)
 8002edc:	f043 0301 	orr.w	r3, r3, #1
 8002ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ee2:	4b55      	ldr	r3, [pc, #340]	; (8003038 <HAL_TIM_Encoder_MspInit+0x188>)
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	61bb      	str	r3, [r7, #24]
 8002eec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eee:	2300      	movs	r3, #0
 8002ef0:	617b      	str	r3, [r7, #20]
 8002ef2:	4b51      	ldr	r3, [pc, #324]	; (8003038 <HAL_TIM_Encoder_MspInit+0x188>)
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef6:	4a50      	ldr	r2, [pc, #320]	; (8003038 <HAL_TIM_Encoder_MspInit+0x188>)
 8002ef8:	f043 0301 	orr.w	r3, r3, #1
 8002efc:	6313      	str	r3, [r2, #48]	; 0x30
 8002efe:	4b4e      	ldr	r3, [pc, #312]	; (8003038 <HAL_TIM_Encoder_MspInit+0x188>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	617b      	str	r3, [r7, #20]
 8002f08:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	613b      	str	r3, [r7, #16]
 8002f0e:	4b4a      	ldr	r3, [pc, #296]	; (8003038 <HAL_TIM_Encoder_MspInit+0x188>)
 8002f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f12:	4a49      	ldr	r2, [pc, #292]	; (8003038 <HAL_TIM_Encoder_MspInit+0x188>)
 8002f14:	f043 0302 	orr.w	r3, r3, #2
 8002f18:	6313      	str	r3, [r2, #48]	; 0x30
 8002f1a:	4b47      	ldr	r3, [pc, #284]	; (8003038 <HAL_TIM_Encoder_MspInit+0x188>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	613b      	str	r3, [r7, #16]
 8002f24:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002f26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f30:	2300      	movs	r3, #0
 8002f32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f34:	2300      	movs	r3, #0
 8002f36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f3c:	f107 031c 	add.w	r3, r7, #28
 8002f40:	4619      	mov	r1, r3
 8002f42:	483e      	ldr	r0, [pc, #248]	; (800303c <HAL_TIM_Encoder_MspInit+0x18c>)
 8002f44:	f002 fc30 	bl	80057a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f48:	2308      	movs	r3, #8
 8002f4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f50:	2300      	movs	r3, #0
 8002f52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f54:	2300      	movs	r3, #0
 8002f56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f5c:	f107 031c 	add.w	r3, r7, #28
 8002f60:	4619      	mov	r1, r3
 8002f62:	4837      	ldr	r0, [pc, #220]	; (8003040 <HAL_TIM_Encoder_MspInit+0x190>)
 8002f64:	f002 fc20 	bl	80057a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002f68:	e061      	b.n	800302e <HAL_TIM_Encoder_MspInit+0x17e>
  else if(htim_encoder->Instance==TIM4)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a35      	ldr	r2, [pc, #212]	; (8003044 <HAL_TIM_Encoder_MspInit+0x194>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d15c      	bne.n	800302e <HAL_TIM_Encoder_MspInit+0x17e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f74:	2300      	movs	r3, #0
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	4b2f      	ldr	r3, [pc, #188]	; (8003038 <HAL_TIM_Encoder_MspInit+0x188>)
 8002f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7c:	4a2e      	ldr	r2, [pc, #184]	; (8003038 <HAL_TIM_Encoder_MspInit+0x188>)
 8002f7e:	f043 0304 	orr.w	r3, r3, #4
 8002f82:	6413      	str	r3, [r2, #64]	; 0x40
 8002f84:	4b2c      	ldr	r3, [pc, #176]	; (8003038 <HAL_TIM_Encoder_MspInit+0x188>)
 8002f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	60fb      	str	r3, [r7, #12]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f90:	2300      	movs	r3, #0
 8002f92:	60bb      	str	r3, [r7, #8]
 8002f94:	4b28      	ldr	r3, [pc, #160]	; (8003038 <HAL_TIM_Encoder_MspInit+0x188>)
 8002f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f98:	4a27      	ldr	r2, [pc, #156]	; (8003038 <HAL_TIM_Encoder_MspInit+0x188>)
 8002f9a:	f043 0308 	orr.w	r3, r3, #8
 8002f9e:	6313      	str	r3, [r2, #48]	; 0x30
 8002fa0:	4b25      	ldr	r3, [pc, #148]	; (8003038 <HAL_TIM_Encoder_MspInit+0x188>)
 8002fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa4:	f003 0308 	and.w	r3, r3, #8
 8002fa8:	60bb      	str	r3, [r7, #8]
 8002faa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002fac:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002fb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fc2:	f107 031c 	add.w	r3, r7, #28
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	481f      	ldr	r0, [pc, #124]	; (8003048 <HAL_TIM_Encoder_MspInit+0x198>)
 8002fca:	f002 fbed 	bl	80057a8 <HAL_GPIO_Init>
    hdma_tim4_up.Instance = DMA1_Stream6;
 8002fce:	4b1f      	ldr	r3, [pc, #124]	; (800304c <HAL_TIM_Encoder_MspInit+0x19c>)
 8002fd0:	4a1f      	ldr	r2, [pc, #124]	; (8003050 <HAL_TIM_Encoder_MspInit+0x1a0>)
 8002fd2:	601a      	str	r2, [r3, #0]
    hdma_tim4_up.Init.Channel = DMA_CHANNEL_2;
 8002fd4:	4b1d      	ldr	r3, [pc, #116]	; (800304c <HAL_TIM_Encoder_MspInit+0x19c>)
 8002fd6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002fda:	605a      	str	r2, [r3, #4]
    hdma_tim4_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fdc:	4b1b      	ldr	r3, [pc, #108]	; (800304c <HAL_TIM_Encoder_MspInit+0x19c>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	609a      	str	r2, [r3, #8]
    hdma_tim4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fe2:	4b1a      	ldr	r3, [pc, #104]	; (800304c <HAL_TIM_Encoder_MspInit+0x19c>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	60da      	str	r2, [r3, #12]
    hdma_tim4_up.Init.MemInc = DMA_MINC_ENABLE;
 8002fe8:	4b18      	ldr	r3, [pc, #96]	; (800304c <HAL_TIM_Encoder_MspInit+0x19c>)
 8002fea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fee:	611a      	str	r2, [r3, #16]
    hdma_tim4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ff0:	4b16      	ldr	r3, [pc, #88]	; (800304c <HAL_TIM_Encoder_MspInit+0x19c>)
 8002ff2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ff6:	615a      	str	r2, [r3, #20]
    hdma_tim4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ff8:	4b14      	ldr	r3, [pc, #80]	; (800304c <HAL_TIM_Encoder_MspInit+0x19c>)
 8002ffa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ffe:	619a      	str	r2, [r3, #24]
    hdma_tim4_up.Init.Mode = DMA_NORMAL;
 8003000:	4b12      	ldr	r3, [pc, #72]	; (800304c <HAL_TIM_Encoder_MspInit+0x19c>)
 8003002:	2200      	movs	r2, #0
 8003004:	61da      	str	r2, [r3, #28]
    hdma_tim4_up.Init.Priority = DMA_PRIORITY_LOW;
 8003006:	4b11      	ldr	r3, [pc, #68]	; (800304c <HAL_TIM_Encoder_MspInit+0x19c>)
 8003008:	2200      	movs	r2, #0
 800300a:	621a      	str	r2, [r3, #32]
    hdma_tim4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800300c:	4b0f      	ldr	r3, [pc, #60]	; (800304c <HAL_TIM_Encoder_MspInit+0x19c>)
 800300e:	2200      	movs	r2, #0
 8003010:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_up) != HAL_OK)
 8003012:	480e      	ldr	r0, [pc, #56]	; (800304c <HAL_TIM_Encoder_MspInit+0x19c>)
 8003014:	f001 fc9e 	bl	8004954 <HAL_DMA_Init>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <HAL_TIM_Encoder_MspInit+0x172>
      Error_Handler();
 800301e:	f7ff faa5 	bl	800256c <Error_Handler>
    __HAL_LINKDMA(htim_encoder,hdma[TIM_DMA_ID_UPDATE],hdma_tim4_up);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a09      	ldr	r2, [pc, #36]	; (800304c <HAL_TIM_Encoder_MspInit+0x19c>)
 8003026:	621a      	str	r2, [r3, #32]
 8003028:	4a08      	ldr	r2, [pc, #32]	; (800304c <HAL_TIM_Encoder_MspInit+0x19c>)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800302e:	bf00      	nop
 8003030:	3730      	adds	r7, #48	; 0x30
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	40023800 	.word	0x40023800
 800303c:	40020000 	.word	0x40020000
 8003040:	40020400 	.word	0x40020400
 8003044:	40000800 	.word	0x40000800
 8003048:	40020c00 	.word	0x40020c00
 800304c:	20000974 	.word	0x20000974
 8003050:	400260a0 	.word	0x400260a0

08003054 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b08a      	sub	sp, #40	; 0x28
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800305c:	f107 0314 	add.w	r3, r7, #20
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	605a      	str	r2, [r3, #4]
 8003066:	609a      	str	r2, [r3, #8]
 8003068:	60da      	str	r2, [r3, #12]
 800306a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a33      	ldr	r2, [pc, #204]	; (8003140 <HAL_TIM_MspPostInit+0xec>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d13c      	bne.n	80030f0 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003076:	2300      	movs	r3, #0
 8003078:	613b      	str	r3, [r7, #16]
 800307a:	4b32      	ldr	r3, [pc, #200]	; (8003144 <HAL_TIM_MspPostInit+0xf0>)
 800307c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307e:	4a31      	ldr	r2, [pc, #196]	; (8003144 <HAL_TIM_MspPostInit+0xf0>)
 8003080:	f043 0301 	orr.w	r3, r3, #1
 8003084:	6313      	str	r3, [r2, #48]	; 0x30
 8003086:	4b2f      	ldr	r3, [pc, #188]	; (8003144 <HAL_TIM_MspPostInit+0xf0>)
 8003088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	613b      	str	r3, [r7, #16]
 8003090:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003092:	2300      	movs	r3, #0
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	4b2b      	ldr	r3, [pc, #172]	; (8003144 <HAL_TIM_MspPostInit+0xf0>)
 8003098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309a:	4a2a      	ldr	r2, [pc, #168]	; (8003144 <HAL_TIM_MspPostInit+0xf0>)
 800309c:	f043 0304 	orr.w	r3, r3, #4
 80030a0:	6313      	str	r3, [r2, #48]	; 0x30
 80030a2:	4b28      	ldr	r3, [pc, #160]	; (8003144 <HAL_TIM_MspPostInit+0xf0>)
 80030a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a6:	f003 0304 	and.w	r3, r3, #4
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80030ae:	2340      	movs	r3, #64	; 0x40
 80030b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b2:	2302      	movs	r3, #2
 80030b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b6:	2300      	movs	r3, #0
 80030b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ba:	2300      	movs	r3, #0
 80030bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80030be:	2302      	movs	r3, #2
 80030c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030c2:	f107 0314 	add.w	r3, r7, #20
 80030c6:	4619      	mov	r1, r3
 80030c8:	481f      	ldr	r0, [pc, #124]	; (8003148 <HAL_TIM_MspPostInit+0xf4>)
 80030ca:	f002 fb6d 	bl	80057a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80030ce:	2380      	movs	r3, #128	; 0x80
 80030d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d2:	2302      	movs	r3, #2
 80030d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d6:	2300      	movs	r3, #0
 80030d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030da:	2300      	movs	r3, #0
 80030dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80030de:	2302      	movs	r3, #2
 80030e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030e2:	f107 0314 	add.w	r3, r7, #20
 80030e6:	4619      	mov	r1, r3
 80030e8:	4818      	ldr	r0, [pc, #96]	; (800314c <HAL_TIM_MspPostInit+0xf8>)
 80030ea:	f002 fb5d 	bl	80057a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 80030ee:	e023      	b.n	8003138 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM13)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a16      	ldr	r2, [pc, #88]	; (8003150 <HAL_TIM_MspPostInit+0xfc>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d11e      	bne.n	8003138 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80030fa:	2300      	movs	r3, #0
 80030fc:	60bb      	str	r3, [r7, #8]
 80030fe:	4b11      	ldr	r3, [pc, #68]	; (8003144 <HAL_TIM_MspPostInit+0xf0>)
 8003100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003102:	4a10      	ldr	r2, [pc, #64]	; (8003144 <HAL_TIM_MspPostInit+0xf0>)
 8003104:	f043 0320 	orr.w	r3, r3, #32
 8003108:	6313      	str	r3, [r2, #48]	; 0x30
 800310a:	4b0e      	ldr	r3, [pc, #56]	; (8003144 <HAL_TIM_MspPostInit+0xf0>)
 800310c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310e:	f003 0320 	and.w	r3, r3, #32
 8003112:	60bb      	str	r3, [r7, #8]
 8003114:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003116:	f44f 7380 	mov.w	r3, #256	; 0x100
 800311a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800311c:	2302      	movs	r3, #2
 800311e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003120:	2300      	movs	r3, #0
 8003122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003124:	2300      	movs	r3, #0
 8003126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8003128:	2309      	movs	r3, #9
 800312a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800312c:	f107 0314 	add.w	r3, r7, #20
 8003130:	4619      	mov	r1, r3
 8003132:	4808      	ldr	r0, [pc, #32]	; (8003154 <HAL_TIM_MspPostInit+0x100>)
 8003134:	f002 fb38 	bl	80057a8 <HAL_GPIO_Init>
}
 8003138:	bf00      	nop
 800313a:	3728      	adds	r7, #40	; 0x28
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40000400 	.word	0x40000400
 8003144:	40023800 	.word	0x40023800
 8003148:	40020000 	.word	0x40020000
 800314c:	40020800 	.word	0x40020800
 8003150:	40001c00 	.word	0x40001c00
 8003154:	40021400 	.word	0x40021400

08003158 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b08c      	sub	sp, #48	; 0x30
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003160:	f107 031c 	add.w	r3, r7, #28
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	605a      	str	r2, [r3, #4]
 800316a:	609a      	str	r2, [r3, #8]
 800316c:	60da      	str	r2, [r3, #12]
 800316e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a3b      	ldr	r2, [pc, #236]	; (8003264 <HAL_UART_MspInit+0x10c>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d135      	bne.n	80031e6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800317a:	2300      	movs	r3, #0
 800317c:	61bb      	str	r3, [r7, #24]
 800317e:	4b3a      	ldr	r3, [pc, #232]	; (8003268 <HAL_UART_MspInit+0x110>)
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	4a39      	ldr	r2, [pc, #228]	; (8003268 <HAL_UART_MspInit+0x110>)
 8003184:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003188:	6413      	str	r3, [r2, #64]	; 0x40
 800318a:	4b37      	ldr	r3, [pc, #220]	; (8003268 <HAL_UART_MspInit+0x110>)
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003192:	61bb      	str	r3, [r7, #24]
 8003194:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003196:	2300      	movs	r3, #0
 8003198:	617b      	str	r3, [r7, #20]
 800319a:	4b33      	ldr	r3, [pc, #204]	; (8003268 <HAL_UART_MspInit+0x110>)
 800319c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319e:	4a32      	ldr	r2, [pc, #200]	; (8003268 <HAL_UART_MspInit+0x110>)
 80031a0:	f043 0304 	orr.w	r3, r3, #4
 80031a4:	6313      	str	r3, [r2, #48]	; 0x30
 80031a6:	4b30      	ldr	r3, [pc, #192]	; (8003268 <HAL_UART_MspInit+0x110>)
 80031a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031aa:	f003 0304 	and.w	r3, r3, #4
 80031ae:	617b      	str	r3, [r7, #20]
 80031b0:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80031b2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80031b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b8:	2302      	movs	r3, #2
 80031ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031bc:	2300      	movs	r3, #0
 80031be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031c0:	2303      	movs	r3, #3
 80031c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80031c4:	2308      	movs	r3, #8
 80031c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031c8:	f107 031c 	add.w	r3, r7, #28
 80031cc:	4619      	mov	r1, r3
 80031ce:	4827      	ldr	r0, [pc, #156]	; (800326c <HAL_UART_MspInit+0x114>)
 80031d0:	f002 faea 	bl	80057a8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80031d4:	2200      	movs	r2, #0
 80031d6:	2100      	movs	r1, #0
 80031d8:	2034      	movs	r0, #52	; 0x34
 80031da:	f001 fb84 	bl	80048e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80031de:	2034      	movs	r0, #52	; 0x34
 80031e0:	f001 fb9d 	bl	800491e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80031e4:	e039      	b.n	800325a <HAL_UART_MspInit+0x102>
  else if(huart->Instance==USART3)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a21      	ldr	r2, [pc, #132]	; (8003270 <HAL_UART_MspInit+0x118>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d134      	bne.n	800325a <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART3_CLK_ENABLE();
 80031f0:	2300      	movs	r3, #0
 80031f2:	613b      	str	r3, [r7, #16]
 80031f4:	4b1c      	ldr	r3, [pc, #112]	; (8003268 <HAL_UART_MspInit+0x110>)
 80031f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f8:	4a1b      	ldr	r2, [pc, #108]	; (8003268 <HAL_UART_MspInit+0x110>)
 80031fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031fe:	6413      	str	r3, [r2, #64]	; 0x40
 8003200:	4b19      	ldr	r3, [pc, #100]	; (8003268 <HAL_UART_MspInit+0x110>)
 8003202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003204:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003208:	613b      	str	r3, [r7, #16]
 800320a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800320c:	2300      	movs	r3, #0
 800320e:	60fb      	str	r3, [r7, #12]
 8003210:	4b15      	ldr	r3, [pc, #84]	; (8003268 <HAL_UART_MspInit+0x110>)
 8003212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003214:	4a14      	ldr	r2, [pc, #80]	; (8003268 <HAL_UART_MspInit+0x110>)
 8003216:	f043 0308 	orr.w	r3, r3, #8
 800321a:	6313      	str	r3, [r2, #48]	; 0x30
 800321c:	4b12      	ldr	r3, [pc, #72]	; (8003268 <HAL_UART_MspInit+0x110>)
 800321e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003220:	f003 0308 	and.w	r3, r3, #8
 8003224:	60fb      	str	r3, [r7, #12]
 8003226:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003228:	f44f 7340 	mov.w	r3, #768	; 0x300
 800322c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800322e:	2302      	movs	r3, #2
 8003230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003232:	2300      	movs	r3, #0
 8003234:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003236:	2303      	movs	r3, #3
 8003238:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800323a:	2307      	movs	r3, #7
 800323c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800323e:	f107 031c 	add.w	r3, r7, #28
 8003242:	4619      	mov	r1, r3
 8003244:	480b      	ldr	r0, [pc, #44]	; (8003274 <HAL_UART_MspInit+0x11c>)
 8003246:	f002 faaf 	bl	80057a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800324a:	2200      	movs	r2, #0
 800324c:	2100      	movs	r1, #0
 800324e:	2027      	movs	r0, #39	; 0x27
 8003250:	f001 fb49 	bl	80048e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003254:	2027      	movs	r0, #39	; 0x27
 8003256:	f001 fb62 	bl	800491e <HAL_NVIC_EnableIRQ>
}
 800325a:	bf00      	nop
 800325c:	3730      	adds	r7, #48	; 0x30
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	40004c00 	.word	0x40004c00
 8003268:	40023800 	.word	0x40023800
 800326c:	40020800 	.word	0x40020800
 8003270:	40004800 	.word	0x40004800
 8003274:	40020c00 	.word	0x40020c00

08003278 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b08a      	sub	sp, #40	; 0x28
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003280:	f107 0314 	add.w	r3, r7, #20
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	605a      	str	r2, [r3, #4]
 800328a:	609a      	str	r2, [r3, #8]
 800328c:	60da      	str	r2, [r3, #12]
 800328e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003298:	d13f      	bne.n	800331a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800329a:	2300      	movs	r3, #0
 800329c:	613b      	str	r3, [r7, #16]
 800329e:	4b21      	ldr	r3, [pc, #132]	; (8003324 <HAL_PCD_MspInit+0xac>)
 80032a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a2:	4a20      	ldr	r2, [pc, #128]	; (8003324 <HAL_PCD_MspInit+0xac>)
 80032a4:	f043 0301 	orr.w	r3, r3, #1
 80032a8:	6313      	str	r3, [r2, #48]	; 0x30
 80032aa:	4b1e      	ldr	r3, [pc, #120]	; (8003324 <HAL_PCD_MspInit+0xac>)
 80032ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	613b      	str	r3, [r7, #16]
 80032b4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80032b6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80032ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032bc:	2302      	movs	r3, #2
 80032be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c0:	2300      	movs	r3, #0
 80032c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032c4:	2303      	movs	r3, #3
 80032c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80032c8:	230a      	movs	r3, #10
 80032ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032cc:	f107 0314 	add.w	r3, r7, #20
 80032d0:	4619      	mov	r1, r3
 80032d2:	4815      	ldr	r0, [pc, #84]	; (8003328 <HAL_PCD_MspInit+0xb0>)
 80032d4:	f002 fa68 	bl	80057a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80032d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032de:	2300      	movs	r3, #0
 80032e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e2:	2300      	movs	r3, #0
 80032e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80032e6:	f107 0314 	add.w	r3, r7, #20
 80032ea:	4619      	mov	r1, r3
 80032ec:	480e      	ldr	r0, [pc, #56]	; (8003328 <HAL_PCD_MspInit+0xb0>)
 80032ee:	f002 fa5b 	bl	80057a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80032f2:	4b0c      	ldr	r3, [pc, #48]	; (8003324 <HAL_PCD_MspInit+0xac>)
 80032f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032f6:	4a0b      	ldr	r2, [pc, #44]	; (8003324 <HAL_PCD_MspInit+0xac>)
 80032f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032fc:	6353      	str	r3, [r2, #52]	; 0x34
 80032fe:	2300      	movs	r3, #0
 8003300:	60fb      	str	r3, [r7, #12]
 8003302:	4b08      	ldr	r3, [pc, #32]	; (8003324 <HAL_PCD_MspInit+0xac>)
 8003304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003306:	4a07      	ldr	r2, [pc, #28]	; (8003324 <HAL_PCD_MspInit+0xac>)
 8003308:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800330c:	6453      	str	r3, [r2, #68]	; 0x44
 800330e:	4b05      	ldr	r3, [pc, #20]	; (8003324 <HAL_PCD_MspInit+0xac>)
 8003310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003316:	60fb      	str	r3, [r7, #12]
 8003318:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800331a:	bf00      	nop
 800331c:	3728      	adds	r7, #40	; 0x28
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	40023800 	.word	0x40023800
 8003328:	40020000 	.word	0x40020000
 800332c:	00000000 	.word	0x00000000

08003330 <HAL_ADC_ConvCpltCallback>:




void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]

		if(hadc->Instance == hadc3.Instance)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	4b30      	ldr	r3, [pc, #192]	; (8003400 <HAL_ADC_ConvCpltCallback+0xd0>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	429a      	cmp	r2, r3
 8003342:	d14a      	bne.n	80033da <HAL_ADC_ConvCpltCallback+0xaa>

		{

		//	GPIOB->ODR ^= 1<<7;  ok

			battery_V=ADC3_value[2]/67.8*27.667  +2.2
 8003344:	4b2f      	ldr	r3, [pc, #188]	; (8003404 <HAL_ADC_ConvCpltCallback+0xd4>)
 8003346:	889b      	ldrh	r3, [r3, #4]
 8003348:	4618      	mov	r0, r3
 800334a:	f7fd f8fb 	bl	8000544 <__aeabi_i2d>
 800334e:	a326      	add	r3, pc, #152	; (adr r3, 80033e8 <HAL_ADC_ConvCpltCallback+0xb8>)
 8003350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003354:	f7fd fa8a 	bl	800086c <__aeabi_ddiv>
 8003358:	4602      	mov	r2, r0
 800335a:	460b      	mov	r3, r1
 800335c:	4610      	mov	r0, r2
 800335e:	4619      	mov	r1, r3
 8003360:	a323      	add	r3, pc, #140	; (adr r3, 80033f0 <HAL_ADC_ConvCpltCallback+0xc0>)
 8003362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003366:	f7fd f957 	bl	8000618 <__aeabi_dmul>
 800336a:	4602      	mov	r2, r0
 800336c:	460b      	mov	r3, r1
 800336e:	4610      	mov	r0, r2
 8003370:	4619      	mov	r1, r3
 8003372:	a321      	add	r3, pc, #132	; (adr r3, 80033f8 <HAL_ADC_ConvCpltCallback+0xc8>)
 8003374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003378:	f7fc ff98 	bl	80002ac <__adddf3>
 800337c:	4602      	mov	r2, r0
 800337e:	460b      	mov	r3, r1
 8003380:	4610      	mov	r0, r2
 8003382:	4619      	mov	r1, r3
 8003384:	f7fd fc40 	bl	8000c08 <__aeabi_d2f>
 8003388:	4603      	mov	r3, r0
 800338a:	4a1f      	ldr	r2, [pc, #124]	; (8003408 <HAL_ADC_ConvCpltCallback+0xd8>)
 800338c:	6013      	str	r3, [r2, #0]
					;




			 battery_V_sum = battery_V + battery_V_sum;
 800338e:	4b1e      	ldr	r3, [pc, #120]	; (8003408 <HAL_ADC_ConvCpltCallback+0xd8>)
 8003390:	ed93 7a00 	vldr	s14, [r3]
 8003394:	4b1d      	ldr	r3, [pc, #116]	; (800340c <HAL_ADC_ConvCpltCallback+0xdc>)
 8003396:	edd3 7a00 	vldr	s15, [r3]
 800339a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800339e:	4b1b      	ldr	r3, [pc, #108]	; (800340c <HAL_ADC_ConvCpltCallback+0xdc>)
 80033a0:	edc3 7a00 	vstr	s15, [r3]

			    	  k++;
 80033a4:	4b1a      	ldr	r3, [pc, #104]	; (8003410 <HAL_ADC_ConvCpltCallback+0xe0>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	3301      	adds	r3, #1
 80033aa:	4a19      	ldr	r2, [pc, #100]	; (8003410 <HAL_ADC_ConvCpltCallback+0xe0>)
 80033ac:	6013      	str	r3, [r2, #0]
			    	 	 if(k==2000)
 80033ae:	4b18      	ldr	r3, [pc, #96]	; (8003410 <HAL_ADC_ConvCpltCallback+0xe0>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80033b6:	d110      	bne.n	80033da <HAL_ADC_ConvCpltCallback+0xaa>
			    	 	  {
			    	 		battery_V_avg = battery_V_sum/2001;
 80033b8:	4b14      	ldr	r3, [pc, #80]	; (800340c <HAL_ADC_ConvCpltCallback+0xdc>)
 80033ba:	ed93 7a00 	vldr	s14, [r3]
 80033be:	eddf 6a15 	vldr	s13, [pc, #84]	; 8003414 <HAL_ADC_ConvCpltCallback+0xe4>
 80033c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033c6:	4b14      	ldr	r3, [pc, #80]	; (8003418 <HAL_ADC_ConvCpltCallback+0xe8>)
 80033c8:	edc3 7a00 	vstr	s15, [r3]

			    	 			  k=0;
 80033cc:	4b10      	ldr	r3, [pc, #64]	; (8003410 <HAL_ADC_ConvCpltCallback+0xe0>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	601a      	str	r2, [r3, #0]
			    	 			 battery_V_sum=0;
 80033d2:	4b0e      	ldr	r3, [pc, #56]	; (800340c <HAL_ADC_ConvCpltCallback+0xdc>)
 80033d4:	f04f 0200 	mov.w	r2, #0
 80033d8:	601a      	str	r2, [r3, #0]
			    	 	  }


		}

}
 80033da:	bf00      	nop
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	f3af 8000 	nop.w
 80033e8:	33333333 	.word	0x33333333
 80033ec:	4050f333 	.word	0x4050f333
 80033f0:	83126e98 	.word	0x83126e98
 80033f4:	403baac0 	.word	0x403baac0
 80033f8:	9999999a 	.word	0x9999999a
 80033fc:	40019999 	.word	0x40019999
 8003400:	2000054c 	.word	0x2000054c
 8003404:	200003c4 	.word	0x200003c4
 8003408:	20000f18 	.word	0x20000f18
 800340c:	20000f20 	.word	0x20000f20
 8003410:	20000f14 	.word	0x20000f14
 8003414:	44fa2000 	.word	0x44fa2000
 8003418:	20000f1c 	.word	0x20000f1c

0800341c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003420:	e7fe      	b.n	8003420 <NMI_Handler+0x4>

08003422 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003422:	b480      	push	{r7}
 8003424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003426:	e7fe      	b.n	8003426 <HardFault_Handler+0x4>

08003428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800342c:	e7fe      	b.n	800342c <MemManage_Handler+0x4>

0800342e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800342e:	b480      	push	{r7}
 8003430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003432:	e7fe      	b.n	8003432 <BusFault_Handler+0x4>

08003434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003438:	e7fe      	b.n	8003438 <UsageFault_Handler+0x4>

0800343a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800343a:	b480      	push	{r7}
 800343c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800343e:	bf00      	nop
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800344c:	bf00      	nop
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003456:	b480      	push	{r7}
 8003458:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800345a:	bf00      	nop
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003468:	f000 fbe2 	bl	8003c30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800346c:	bf00      	nop
 800346e:	bd80      	pop	{r7, pc}

08003470 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_up);
 8003474:	4802      	ldr	r0, [pc, #8]	; (8003480 <DMA1_Stream6_IRQHandler+0x10>)
 8003476:	f001 fc05 	bl	8004c84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800347a:	bf00      	nop
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	20000974 	.word	0x20000974
 8003484:	00000000 	.word	0x00000000

08003488 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003488:	b5b0      	push	{r4, r5, r7, lr}
 800348a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 800348c:	4872      	ldr	r0, [pc, #456]	; (8003658 <ADC_IRQHandler+0x1d0>)
 800348e:	f000 fc56 	bl	8003d3e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */



  ADC3_IN12 = ADC3_value[0];
 8003492:	4b72      	ldr	r3, [pc, #456]	; (800365c <ADC_IRQHandler+0x1d4>)
 8003494:	881a      	ldrh	r2, [r3, #0]
 8003496:	4b72      	ldr	r3, [pc, #456]	; (8003660 <ADC_IRQHandler+0x1d8>)
 8003498:	801a      	strh	r2, [r3, #0]
  ADC3_IN13 = ADC3_value[1];
 800349a:	4b70      	ldr	r3, [pc, #448]	; (800365c <ADC_IRQHandler+0x1d4>)
 800349c:	885a      	ldrh	r2, [r3, #2]
 800349e:	4b71      	ldr	r3, [pc, #452]	; (8003664 <ADC_IRQHandler+0x1dc>)
 80034a0:	801a      	strh	r2, [r3, #0]




  V=ADC1_0 * 0.6547877;  //3227 > 2113(ref)= 2.58V
 80034a2:	4b71      	ldr	r3, [pc, #452]	; (8003668 <ADC_IRQHandler+0x1e0>)
 80034a4:	881b      	ldrh	r3, [r3, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7fd f84c 	bl	8000544 <__aeabi_i2d>
 80034ac:	a364      	add	r3, pc, #400	; (adr r3, 8003640 <ADC_IRQHandler+0x1b8>)
 80034ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b2:	f7fd f8b1 	bl	8000618 <__aeabi_dmul>
 80034b6:	4602      	mov	r2, r0
 80034b8:	460b      	mov	r3, r1
 80034ba:	4610      	mov	r0, r2
 80034bc:	4619      	mov	r1, r3
 80034be:	f7fd fba3 	bl	8000c08 <__aeabi_d2f>
 80034c2:	4603      	mov	r3, r0
 80034c4:	4a69      	ldr	r2, [pc, #420]	; (800366c <ADC_IRQHandler+0x1e4>)
 80034c6:	6013      	str	r3, [r2, #0]
  V1_mV = V *5000 / 4095.0; //[mV]
 80034c8:	4b68      	ldr	r3, [pc, #416]	; (800366c <ADC_IRQHandler+0x1e4>)
 80034ca:	edd3 7a00 	vldr	s15, [r3]
 80034ce:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8003670 <ADC_IRQHandler+0x1e8>
 80034d2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80034d6:	eddf 6a67 	vldr	s13, [pc, #412]	; 8003674 <ADC_IRQHandler+0x1ec>
 80034da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80034de:	4b66      	ldr	r3, [pc, #408]	; (8003678 <ADC_IRQHandler+0x1f0>)
 80034e0:	edc3 7a00 	vstr	s15, [r3]
  V1_V = V *5 / 4095.0; //[V]
 80034e4:	4b61      	ldr	r3, [pc, #388]	; (800366c <ADC_IRQHandler+0x1e4>)
 80034e6:	edd3 7a00 	vldr	s15, [r3]
 80034ea:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80034ee:	ee27 7a87 	vmul.f32	s14, s15, s14
 80034f2:	eddf 6a60 	vldr	s13, [pc, #384]	; 8003674 <ADC_IRQHandler+0x1ec>
 80034f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80034fa:	4b60      	ldr	r3, [pc, #384]	; (800367c <ADC_IRQHandler+0x1f4>)
 80034fc:	edc3 7a00 	vstr	s15, [r3]


  if(V1_V - 2.58>=0)
 8003500:	4b5e      	ldr	r3, [pc, #376]	; (800367c <ADC_IRQHandler+0x1f4>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4618      	mov	r0, r3
 8003506:	f7fd f82f 	bl	8000568 <__aeabi_f2d>
 800350a:	a34f      	add	r3, pc, #316	; (adr r3, 8003648 <ADC_IRQHandler+0x1c0>)
 800350c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003510:	f7fc feca 	bl	80002a8 <__aeabi_dsub>
 8003514:	4602      	mov	r2, r0
 8003516:	460b      	mov	r3, r1
 8003518:	4610      	mov	r0, r2
 800351a:	4619      	mov	r1, r3
 800351c:	f04f 0200 	mov.w	r2, #0
 8003520:	f04f 0300 	mov.w	r3, #0
 8003524:	f7fd fafe 	bl	8000b24 <__aeabi_dcmpge>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d025      	beq.n	800357a <ADC_IRQHandler+0xf2>
  {
	  amp_A = (V1_V -2.58) /285*1000;
 800352e:	4b53      	ldr	r3, [pc, #332]	; (800367c <ADC_IRQHandler+0x1f4>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4618      	mov	r0, r3
 8003534:	f7fd f818 	bl	8000568 <__aeabi_f2d>
 8003538:	a343      	add	r3, pc, #268	; (adr r3, 8003648 <ADC_IRQHandler+0x1c0>)
 800353a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353e:	f7fc feb3 	bl	80002a8 <__aeabi_dsub>
 8003542:	4602      	mov	r2, r0
 8003544:	460b      	mov	r3, r1
 8003546:	4610      	mov	r0, r2
 8003548:	4619      	mov	r1, r3
 800354a:	a341      	add	r3, pc, #260	; (adr r3, 8003650 <ADC_IRQHandler+0x1c8>)
 800354c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003550:	f7fd f98c 	bl	800086c <__aeabi_ddiv>
 8003554:	4602      	mov	r2, r0
 8003556:	460b      	mov	r3, r1
 8003558:	4610      	mov	r0, r2
 800355a:	4619      	mov	r1, r3
 800355c:	f04f 0200 	mov.w	r2, #0
 8003560:	4b47      	ldr	r3, [pc, #284]	; (8003680 <ADC_IRQHandler+0x1f8>)
 8003562:	f7fd f859 	bl	8000618 <__aeabi_dmul>
 8003566:	4602      	mov	r2, r0
 8003568:	460b      	mov	r3, r1
 800356a:	4610      	mov	r0, r2
 800356c:	4619      	mov	r1, r3
 800356e:	f7fd fb4b 	bl	8000c08 <__aeabi_d2f>
 8003572:	4603      	mov	r3, r0
 8003574:	4a43      	ldr	r2, [pc, #268]	; (8003684 <ADC_IRQHandler+0x1fc>)
 8003576:	6013      	str	r3, [r2, #0]
 8003578:	e03e      	b.n	80035f8 <ADC_IRQHandler+0x170>
  }
  else if(V1_V - 2.58 < 0)
 800357a:	4b40      	ldr	r3, [pc, #256]	; (800367c <ADC_IRQHandler+0x1f4>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4618      	mov	r0, r3
 8003580:	f7fc fff2 	bl	8000568 <__aeabi_f2d>
 8003584:	a330      	add	r3, pc, #192	; (adr r3, 8003648 <ADC_IRQHandler+0x1c0>)
 8003586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800358a:	f7fc fe8d 	bl	80002a8 <__aeabi_dsub>
 800358e:	4602      	mov	r2, r0
 8003590:	460b      	mov	r3, r1
 8003592:	4610      	mov	r0, r2
 8003594:	4619      	mov	r1, r3
 8003596:	f04f 0200 	mov.w	r2, #0
 800359a:	f04f 0300 	mov.w	r3, #0
 800359e:	f7fd faad 	bl	8000afc <__aeabi_dcmplt>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d027      	beq.n	80035f8 <ADC_IRQHandler+0x170>
  {
	  amp_A = -(V1_V - 2.58) /285*1000;
 80035a8:	4b34      	ldr	r3, [pc, #208]	; (800367c <ADC_IRQHandler+0x1f4>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7fc ffdb 	bl	8000568 <__aeabi_f2d>
 80035b2:	a325      	add	r3, pc, #148	; (adr r3, 8003648 <ADC_IRQHandler+0x1c0>)
 80035b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b8:	f7fc fe76 	bl	80002a8 <__aeabi_dsub>
 80035bc:	4602      	mov	r2, r0
 80035be:	460b      	mov	r3, r1
 80035c0:	4614      	mov	r4, r2
 80035c2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80035c6:	a322      	add	r3, pc, #136	; (adr r3, 8003650 <ADC_IRQHandler+0x1c8>)
 80035c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035cc:	4620      	mov	r0, r4
 80035ce:	4629      	mov	r1, r5
 80035d0:	f7fd f94c 	bl	800086c <__aeabi_ddiv>
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	4610      	mov	r0, r2
 80035da:	4619      	mov	r1, r3
 80035dc:	f04f 0200 	mov.w	r2, #0
 80035e0:	4b27      	ldr	r3, [pc, #156]	; (8003680 <ADC_IRQHandler+0x1f8>)
 80035e2:	f7fd f819 	bl	8000618 <__aeabi_dmul>
 80035e6:	4602      	mov	r2, r0
 80035e8:	460b      	mov	r3, r1
 80035ea:	4610      	mov	r0, r2
 80035ec:	4619      	mov	r1, r3
 80035ee:	f7fd fb0b 	bl	8000c08 <__aeabi_d2f>
 80035f2:	4603      	mov	r3, r0
 80035f4:	4a23      	ldr	r2, [pc, #140]	; (8003684 <ADC_IRQHandler+0x1fc>)
 80035f6:	6013      	str	r3, [r2, #0]
  }


  amp_mA = amp_A * 1000;
 80035f8:	4b22      	ldr	r3, [pc, #136]	; (8003684 <ADC_IRQHandler+0x1fc>)
 80035fa:	edd3 7a00 	vldr	s15, [r3]
 80035fe:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003688 <ADC_IRQHandler+0x200>
 8003602:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003606:	4b21      	ldr	r3, [pc, #132]	; (800368c <ADC_IRQHandler+0x204>)
 8003608:	edc3 7a00 	vstr	s15, [r3]

  sum=amp_mA + sum;
 800360c:	4b1f      	ldr	r3, [pc, #124]	; (800368c <ADC_IRQHandler+0x204>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4618      	mov	r0, r3
 8003612:	f7fc ffa9 	bl	8000568 <__aeabi_f2d>
 8003616:	4b1e      	ldr	r3, [pc, #120]	; (8003690 <ADC_IRQHandler+0x208>)
 8003618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800361c:	f7fc fe46 	bl	80002ac <__adddf3>
 8003620:	4602      	mov	r2, r0
 8003622:	460b      	mov	r3, r1
 8003624:	491a      	ldr	r1, [pc, #104]	; (8003690 <ADC_IRQHandler+0x208>)
 8003626:	e9c1 2300 	strd	r2, r3, [r1]
 	  i++;
 800362a:	4b1a      	ldr	r3, [pc, #104]	; (8003694 <ADC_IRQHandler+0x20c>)
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	3301      	adds	r3, #1
 8003630:	b2da      	uxtb	r2, r3
 8003632:	4b18      	ldr	r3, [pc, #96]	; (8003694 <ADC_IRQHandler+0x20c>)
 8003634:	701a      	strb	r2, [r3, #0]
 	 	  }



  /* USER CODE END ADC_IRQn 1 */
}
 8003636:	bf00      	nop
 8003638:	bdb0      	pop	{r4, r5, r7, pc}
 800363a:	bf00      	nop
 800363c:	f3af 8000 	nop.w
 8003640:	55aa5680 	.word	0x55aa5680
 8003644:	3fe4f405 	.word	0x3fe4f405
 8003648:	0a3d70a4 	.word	0x0a3d70a4
 800364c:	4004a3d7 	.word	0x4004a3d7
 8003650:	00000000 	.word	0x00000000
 8003654:	4071d000 	.word	0x4071d000
 8003658:	2000054c 	.word	0x2000054c
 800365c:	200003c4 	.word	0x200003c4
 8003660:	20000f24 	.word	0x20000f24
 8003664:	20000f26 	.word	0x20000f26
 8003668:	200003c0 	.word	0x200003c0
 800366c:	20000f38 	.word	0x20000f38
 8003670:	459c4000 	.word	0x459c4000
 8003674:	457ff000 	.word	0x457ff000
 8003678:	20000f3c 	.word	0x20000f3c
 800367c:	20000f40 	.word	0x20000f40
 8003680:	408f4000 	.word	0x408f4000
 8003684:	20000f44 	.word	0x20000f44
 8003688:	447a0000 	.word	0x447a0000
 800368c:	20000f48 	.word	0x20000f48
 8003690:	20000f50 	.word	0x20000f50
 8003694:	20000f58 	.word	0x20000f58

08003698 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800369c:	4802      	ldr	r0, [pc, #8]	; (80036a8 <TIM3_IRQHandler+0x10>)
 800369e:	f003 fc2b 	bl	8006ef8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */


  /* USER CODE END TIM3_IRQn 1 */
}
 80036a2:	bf00      	nop
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	20000734 	.word	0x20000734

080036ac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80036b0:	4802      	ldr	r0, [pc, #8]	; (80036bc <USART3_IRQHandler+0x10>)
 80036b2:	f004 fc27 	bl	8007f04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80036b6:	bf00      	nop
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	20000314 	.word	0x20000314

080036c0 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80036c4:	4803      	ldr	r0, [pc, #12]	; (80036d4 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 80036c6:	f003 fc17 	bl	8006ef8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 80036ca:	4803      	ldr	r0, [pc, #12]	; (80036d8 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 80036cc:	f003 fc14 	bl	8006ef8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80036d0:	bf00      	nop
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	20000854 	.word	0x20000854
 80036d8:	2000089c 	.word	0x2000089c

080036dc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80036e0:	4805      	ldr	r0, [pc, #20]	; (80036f8 <TIM8_UP_TIM13_IRQHandler+0x1c>)
 80036e2:	f003 fc09 	bl	8006ef8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 80036e6:	4805      	ldr	r0, [pc, #20]	; (80036fc <TIM8_UP_TIM13_IRQHandler+0x20>)
 80036e8:	f003 fc06 	bl	8006ef8 <HAL_TIM_IRQHandler>
  //0.0001/4

  //GPIOB->ODR ^=1<<0;  //ok


  tim13_flag=1;
 80036ec:	4b04      	ldr	r3, [pc, #16]	; (8003700 <TIM8_UP_TIM13_IRQHandler+0x24>)
 80036ee:	2201      	movs	r2, #1
 80036f0:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80036f2:	bf00      	nop
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	20000854 	.word	0x20000854
 80036fc:	200008e4 	.word	0x200008e4
 8003700:	20000f34 	.word	0x20000f34
 8003704:	00000000 	.word	0x00000000

08003708 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800370c:	484e      	ldr	r0, [pc, #312]	; (8003848 <TIM8_TRG_COM_TIM14_IRQHandler+0x140>)
 800370e:	f003 fbf3 	bl	8006ef8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 8003712:	484e      	ldr	r0, [pc, #312]	; (800384c <TIM8_TRG_COM_TIM14_IRQHandler+0x144>)
 8003714:	f003 fbf0 	bl	8006ef8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

 tim14_flag++;
 8003718:	4b4d      	ldr	r3, [pc, #308]	; (8003850 <TIM8_TRG_COM_TIM14_IRQHandler+0x148>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	3301      	adds	r3, #1
 800371e:	4a4c      	ldr	r2, [pc, #304]	; (8003850 <TIM8_TRG_COM_TIM14_IRQHandler+0x148>)
 8003720:	6013      	str	r3, [r2, #0]
if(tim14_flag>20)
 8003722:	4b4b      	ldr	r3, [pc, #300]	; (8003850 <TIM8_TRG_COM_TIM14_IRQHandler+0x148>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2b14      	cmp	r3, #20
 8003728:	dd02      	ble.n	8003730 <TIM8_TRG_COM_TIM14_IRQHandler+0x28>
	tim14_flag=0;
 800372a:	4b49      	ldr	r3, [pc, #292]	; (8003850 <TIM8_TRG_COM_TIM14_IRQHandler+0x148>)
 800372c:	2200      	movs	r2, #0
 800372e:	601a      	str	r2, [r3, #0]
//motor1
  ENCODER_OLD= ENCODER_NEW;
 8003730:	4b48      	ldr	r3, [pc, #288]	; (8003854 <TIM8_TRG_COM_TIM14_IRQHandler+0x14c>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a48      	ldr	r2, [pc, #288]	; (8003858 <TIM8_TRG_COM_TIM14_IRQHandler+0x150>)
 8003736:	6013      	str	r3, [r2, #0]
  ENCODER_NEW = TIM4->CNT;
 8003738:	4b48      	ldr	r3, [pc, #288]	; (800385c <TIM8_TRG_COM_TIM14_IRQHandler+0x154>)
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	4a45      	ldr	r2, [pc, #276]	; (8003854 <TIM8_TRG_COM_TIM14_IRQHandler+0x14c>)
 800373e:	6013      	str	r3, [r2, #0]


   	RPM =  ((abs(ENCODER_NEW-ENCODER_OLD)*60))/512.0/0.1;	// ?��코더 ?��?��: 1 turn?�� 3 pulse 출력
 8003740:	4b44      	ldr	r3, [pc, #272]	; (8003854 <TIM8_TRG_COM_TIM14_IRQHandler+0x14c>)
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	4b44      	ldr	r3, [pc, #272]	; (8003858 <TIM8_TRG_COM_TIM14_IRQHandler+0x150>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800374e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003752:	4613      	mov	r3, r2
 8003754:	011b      	lsls	r3, r3, #4
 8003756:	1a9b      	subs	r3, r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	4618      	mov	r0, r3
 800375c:	f7fc fef2 	bl	8000544 <__aeabi_i2d>
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8003768:	f7fd f880 	bl	800086c <__aeabi_ddiv>
 800376c:	4602      	mov	r2, r0
 800376e:	460b      	mov	r3, r1
 8003770:	4610      	mov	r0, r2
 8003772:	4619      	mov	r1, r3
 8003774:	a32c      	add	r3, pc, #176	; (adr r3, 8003828 <TIM8_TRG_COM_TIM14_IRQHandler+0x120>)
 8003776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800377a:	f7fd f877 	bl	800086c <__aeabi_ddiv>
 800377e:	4602      	mov	r2, r0
 8003780:	460b      	mov	r3, r1
 8003782:	4610      	mov	r0, r2
 8003784:	4619      	mov	r1, r3
 8003786:	f7fd fa3f 	bl	8000c08 <__aeabi_d2f>
 800378a:	4603      	mov	r3, r0
 800378c:	4a34      	ldr	r2, [pc, #208]	; (8003860 <TIM8_TRG_COM_TIM14_IRQHandler+0x158>)
 800378e:	6013      	str	r3, [r2, #0]
    	RPS=RPM/60;
 8003790:	4b33      	ldr	r3, [pc, #204]	; (8003860 <TIM8_TRG_COM_TIM14_IRQHandler+0x158>)
 8003792:	ed93 7a00 	vldr	s14, [r3]
 8003796:	eddf 6a33 	vldr	s13, [pc, #204]	; 8003864 <TIM8_TRG_COM_TIM14_IRQHandler+0x15c>
 800379a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800379e:	4b32      	ldr	r3, [pc, #200]	; (8003868 <TIM8_TRG_COM_TIM14_IRQHandler+0x160>)
 80037a0:	edc3 7a00 	vstr	s15, [r3]
    	Omega= RPS*2*M_PI;
 80037a4:	4b30      	ldr	r3, [pc, #192]	; (8003868 <TIM8_TRG_COM_TIM14_IRQHandler+0x160>)
 80037a6:	edd3 7a00 	vldr	s15, [r3]
 80037aa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80037ae:	ee17 0a90 	vmov	r0, s15
 80037b2:	f7fc fed9 	bl	8000568 <__aeabi_f2d>
 80037b6:	a31e      	add	r3, pc, #120	; (adr r3, 8003830 <TIM8_TRG_COM_TIM14_IRQHandler+0x128>)
 80037b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037bc:	f7fc ff2c 	bl	8000618 <__aeabi_dmul>
 80037c0:	4602      	mov	r2, r0
 80037c2:	460b      	mov	r3, r1
 80037c4:	4610      	mov	r0, r2
 80037c6:	4619      	mov	r1, r3
 80037c8:	f7fd fa1e 	bl	8000c08 <__aeabi_d2f>
 80037cc:	4603      	mov	r3, r0
 80037ce:	4a27      	ldr	r2, [pc, #156]	; (800386c <TIM8_TRG_COM_TIM14_IRQHandler+0x164>)
 80037d0:	6013      	str	r3, [r2, #0]

    //	printf("RPS = %d \r\n",RPS);
   // 	 printf("RPM = %d \r\n",RPM);

    	step_RPM = 1.8/2/delay_us/6*1000000;
 80037d2:	4b27      	ldr	r3, [pc, #156]	; (8003870 <TIM8_TRG_COM_TIM14_IRQHandler+0x168>)
 80037d4:	881b      	ldrh	r3, [r3, #0]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fc feb4 	bl	8000544 <__aeabi_i2d>
 80037dc:	4602      	mov	r2, r0
 80037de:	460b      	mov	r3, r1
 80037e0:	a115      	add	r1, pc, #84	; (adr r1, 8003838 <TIM8_TRG_COM_TIM14_IRQHandler+0x130>)
 80037e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80037e6:	f7fd f841 	bl	800086c <__aeabi_ddiv>
 80037ea:	4602      	mov	r2, r0
 80037ec:	460b      	mov	r3, r1
 80037ee:	4610      	mov	r0, r2
 80037f0:	4619      	mov	r1, r3
 80037f2:	f04f 0200 	mov.w	r2, #0
 80037f6:	4b1f      	ldr	r3, [pc, #124]	; (8003874 <TIM8_TRG_COM_TIM14_IRQHandler+0x16c>)
 80037f8:	f7fd f838 	bl	800086c <__aeabi_ddiv>
 80037fc:	4602      	mov	r2, r0
 80037fe:	460b      	mov	r3, r1
 8003800:	4610      	mov	r0, r2
 8003802:	4619      	mov	r1, r3
 8003804:	a30e      	add	r3, pc, #56	; (adr r3, 8003840 <TIM8_TRG_COM_TIM14_IRQHandler+0x138>)
 8003806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380a:	f7fc ff05 	bl	8000618 <__aeabi_dmul>
 800380e:	4602      	mov	r2, r0
 8003810:	460b      	mov	r3, r1
 8003812:	4610      	mov	r0, r2
 8003814:	4619      	mov	r1, r3
 8003816:	f7fd f9f7 	bl	8000c08 <__aeabi_d2f>
 800381a:	4603      	mov	r3, r0
 800381c:	4a16      	ldr	r2, [pc, #88]	; (8003878 <TIM8_TRG_COM_TIM14_IRQHandler+0x170>)
 800381e:	6013      	str	r3, [r2, #0]




  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003820:	bf00      	nop
 8003822:	bd80      	pop	{r7, pc}
 8003824:	f3af 8000 	nop.w
 8003828:	9999999a 	.word	0x9999999a
 800382c:	3fb99999 	.word	0x3fb99999
 8003830:	54442d18 	.word	0x54442d18
 8003834:	400921fb 	.word	0x400921fb
 8003838:	cccccccd 	.word	0xcccccccd
 800383c:	3feccccc 	.word	0x3feccccc
 8003840:	00000000 	.word	0x00000000
 8003844:	412e8480 	.word	0x412e8480
 8003848:	20000854 	.word	0x20000854
 800384c:	2000092c 	.word	0x2000092c
 8003850:	20000f30 	.word	0x20000f30
 8003854:	200003ac 	.word	0x200003ac
 8003858:	200003b0 	.word	0x200003b0
 800385c:	40000800 	.word	0x40000800
 8003860:	200003b4 	.word	0x200003b4
 8003864:	42700000 	.word	0x42700000
 8003868:	200003b8 	.word	0x200003b8
 800386c:	200003cc 	.word	0x200003cc
 8003870:	20000004 	.word	0x20000004
 8003874:	40180000 	.word	0x40180000
 8003878:	20000f10 	.word	0x20000f10

0800387c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003880:	4802      	ldr	r0, [pc, #8]	; (800388c <UART4_IRQHandler+0x10>)
 8003882:	f004 fb3f 	bl	8007f04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003886:	bf00      	nop
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	20000360 	.word	0x20000360

08003890 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003894:	4835      	ldr	r0, [pc, #212]	; (800396c <TIM6_DAC_IRQHandler+0xdc>)
 8003896:	f003 fb2f 	bl	8006ef8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  tim6_flag=1;
 800389a:	4b35      	ldr	r3, [pc, #212]	; (8003970 <TIM6_DAC_IRQHandler+0xe0>)
 800389c:	2201      	movs	r2, #1
 800389e:	601a      	str	r2, [r3, #0]





	if(key_flag==1)
 80038a0:	4b34      	ldr	r3, [pc, #208]	; (8003974 <TIM6_DAC_IRQHandler+0xe4>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d12d      	bne.n	8003904 <TIM6_DAC_IRQHandler+0x74>
	  {
		  GPIOE->ODR &= ~1<<0;  // forward
 80038a8:	4b33      	ldr	r3, [pc, #204]	; (8003978 <TIM6_DAC_IRQHandler+0xe8>)
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	4a32      	ldr	r2, [pc, #200]	; (8003978 <TIM6_DAC_IRQHandler+0xe8>)
 80038ae:	f023 0301 	bic.w	r3, r3, #1
 80038b2:	6153      	str	r3, [r2, #20]

	      GPIOG->ODR &= ~1<<0;  //start
 80038b4:	4b31      	ldr	r3, [pc, #196]	; (800397c <TIM6_DAC_IRQHandler+0xec>)
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	4a30      	ldr	r2, [pc, #192]	; (800397c <TIM6_DAC_IRQHandler+0xec>)
 80038ba:	f023 0301 	bic.w	r3, r3, #1
 80038be:	6153      	str	r3, [r2, #20]

		  TIM3->CCR1 = 250;
 80038c0:	4b2f      	ldr	r3, [pc, #188]	; (8003980 <TIM6_DAC_IRQHandler+0xf0>)
 80038c2:	22fa      	movs	r2, #250	; 0xfa
 80038c4:	635a      	str	r2, [r3, #52]	; 0x34

		    if(TIM4->CNT>=10220)
 80038c6:	4b2f      	ldr	r3, [pc, #188]	; (8003984 <TIM6_DAC_IRQHandler+0xf4>)
 80038c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ca:	f242 72eb 	movw	r2, #10219	; 0x27eb
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d918      	bls.n	8003904 <TIM6_DAC_IRQHandler+0x74>
			{
		    	TIM3->CCR1 = 100;
 80038d2:	4b2b      	ldr	r3, [pc, #172]	; (8003980 <TIM6_DAC_IRQHandler+0xf0>)
 80038d4:	2264      	movs	r2, #100	; 0x64
 80038d6:	635a      	str	r2, [r3, #52]	; 0x34

		 		if(TIM4->CNT>=10512)
 80038d8:	4b2a      	ldr	r3, [pc, #168]	; (8003984 <TIM6_DAC_IRQHandler+0xf4>)
 80038da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038dc:	f642 120f 	movw	r2, #10511	; 0x290f
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d90f      	bls.n	8003904 <TIM6_DAC_IRQHandler+0x74>
		  		{
			         GPIOG->ODR |= 1<<0;  //stop
 80038e4:	4b25      	ldr	r3, [pc, #148]	; (800397c <TIM6_DAC_IRQHandler+0xec>)
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	4a24      	ldr	r2, [pc, #144]	; (800397c <TIM6_DAC_IRQHandler+0xec>)
 80038ea:	f043 0301 	orr.w	r3, r3, #1
 80038ee:	6153      	str	r3, [r2, #20]
			        //  key_flag=0;
			          stop_flag=1;
 80038f0:	4b25      	ldr	r3, [pc, #148]	; (8003988 <TIM6_DAC_IRQHandler+0xf8>)
 80038f2:	2201      	movs	r2, #1
 80038f4:	701a      	strb	r2, [r3, #0]
			          key_flag=0;
 80038f6:	4b1f      	ldr	r3, [pc, #124]	; (8003974 <TIM6_DAC_IRQHandler+0xe4>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	701a      	strb	r2, [r3, #0]
			          HAL_Delay(2000);
 80038fc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003900:	f000 f9b6 	bl	8003c70 <HAL_Delay>


	  }


	  if(stop_flag==1)
 8003904:	4b20      	ldr	r3, [pc, #128]	; (8003988 <TIM6_DAC_IRQHandler+0xf8>)
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d12c      	bne.n	8003966 <TIM6_DAC_IRQHandler+0xd6>
	      	    {
	      	          GPIOE->ODR |= 1<<0;  //back
 800390c:	4b1a      	ldr	r3, [pc, #104]	; (8003978 <TIM6_DAC_IRQHandler+0xe8>)
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	4a19      	ldr	r2, [pc, #100]	; (8003978 <TIM6_DAC_IRQHandler+0xe8>)
 8003912:	f043 0301 	orr.w	r3, r3, #1
 8003916:	6153      	str	r3, [r2, #20]
	      	          GPIOG->ODR &= ~1<<0;  //start
 8003918:	4b18      	ldr	r3, [pc, #96]	; (800397c <TIM6_DAC_IRQHandler+0xec>)
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	4a17      	ldr	r2, [pc, #92]	; (800397c <TIM6_DAC_IRQHandler+0xec>)
 800391e:	f023 0301 	bic.w	r3, r3, #1
 8003922:	6153      	str	r3, [r2, #20]
	      	          TIM3->CCR1 = 250;
 8003924:	4b16      	ldr	r3, [pc, #88]	; (8003980 <TIM6_DAC_IRQHandler+0xf0>)
 8003926:	22fa      	movs	r2, #250	; 0xfa
 8003928:	635a      	str	r2, [r3, #52]	; 0x34


	      	            if(encoder_count<=10280)
 800392a:	4b18      	ldr	r3, [pc, #96]	; (800398c <TIM6_DAC_IRQHandler+0xfc>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f642 0228 	movw	r2, #10280	; 0x2828
 8003932:	4293      	cmp	r3, r2
 8003934:	d817      	bhi.n	8003966 <TIM6_DAC_IRQHandler+0xd6>
	      	            {
	      	            	  TIM3->CCR1 = 87;
 8003936:	4b12      	ldr	r3, [pc, #72]	; (8003980 <TIM6_DAC_IRQHandler+0xf0>)
 8003938:	2257      	movs	r2, #87	; 0x57
 800393a:	635a      	str	r2, [r3, #52]	; 0x34
	      	             	  if(encoder_count<=10000)
 800393c:	4b13      	ldr	r3, [pc, #76]	; (800398c <TIM6_DAC_IRQHandler+0xfc>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f242 7210 	movw	r2, #10000	; 0x2710
 8003944:	4293      	cmp	r3, r2
 8003946:	d80e      	bhi.n	8003966 <TIM6_DAC_IRQHandler+0xd6>
	      	    	      	    {
	      	    	  		 		  GPIOG->ODR |= 1<<0;  //stop
 8003948:	4b0c      	ldr	r3, [pc, #48]	; (800397c <TIM6_DAC_IRQHandler+0xec>)
 800394a:	695b      	ldr	r3, [r3, #20]
 800394c:	4a0b      	ldr	r2, [pc, #44]	; (800397c <TIM6_DAC_IRQHandler+0xec>)
 800394e:	f043 0301 	orr.w	r3, r3, #1
 8003952:	6153      	str	r3, [r2, #20]
	      	    	          		  GPIOE->ODR &= ~1<<0;  //go
 8003954:	4b08      	ldr	r3, [pc, #32]	; (8003978 <TIM6_DAC_IRQHandler+0xe8>)
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	4a07      	ldr	r2, [pc, #28]	; (8003978 <TIM6_DAC_IRQHandler+0xe8>)
 800395a:	f023 0301 	bic.w	r3, r3, #1
 800395e:	6153      	str	r3, [r2, #20]
	      	    	  		         stop_flag=0;
 8003960:	4b09      	ldr	r3, [pc, #36]	; (8003988 <TIM6_DAC_IRQHandler+0xf8>)
 8003962:	2200      	movs	r2, #0
 8003964:	701a      	strb	r2, [r3, #0]




  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003966:	bf00      	nop
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	200007c4 	.word	0x200007c4
 8003970:	20000f2c 	.word	0x20000f2c
 8003974:	20000208 	.word	0x20000208
 8003978:	40021000 	.word	0x40021000
 800397c:	40021800 	.word	0x40021800
 8003980:	40000400 	.word	0x40000400
 8003984:	40000800 	.word	0x40000800
 8003988:	20000f59 	.word	0x20000f59
 800398c:	20000000 	.word	0x20000000

08003990 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003994:	4803      	ldr	r0, [pc, #12]	; (80039a4 <TIM7_IRQHandler+0x14>)
 8003996:	f003 faaf 	bl	8006ef8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  tim7_flag=1;
 800399a:	4b03      	ldr	r3, [pc, #12]	; (80039a8 <TIM7_IRQHandler+0x18>)
 800399c:	2201      	movs	r2, #1
 800399e:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM7_IRQn 1 */
}
 80039a0:	bf00      	nop
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	2000080c 	.word	0x2000080c
 80039a8:	20000f28 	.word	0x20000f28

080039ac <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80039b0:	4802      	ldr	r0, [pc, #8]	; (80039bc <DMA2_Stream1_IRQHandler+0x10>)
 80039b2:	f001 f967 	bl	8004c84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80039b6:	bf00      	nop
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	20000594 	.word	0x20000594

080039c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
  return 1;
 80039c4:	2301      	movs	r3, #1
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <_kill>:

int _kill(int pid, int sig)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80039da:	f006 fd97 	bl	800a50c <__errno>
 80039de:	4603      	mov	r3, r0
 80039e0:	2216      	movs	r2, #22
 80039e2:	601a      	str	r2, [r3, #0]
  return -1;
 80039e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3708      	adds	r7, #8
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <_exit>:

void _exit (int status)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80039f8:	f04f 31ff 	mov.w	r1, #4294967295
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f7ff ffe7 	bl	80039d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003a02:	e7fe      	b.n	8003a02 <_exit+0x12>

08003a04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b086      	sub	sp, #24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a10:	2300      	movs	r3, #0
 8003a12:	617b      	str	r3, [r7, #20]
 8003a14:	e00a      	b.n	8003a2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003a16:	f3af 8000 	nop.w
 8003a1a:	4601      	mov	r1, r0
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	1c5a      	adds	r2, r3, #1
 8003a20:	60ba      	str	r2, [r7, #8]
 8003a22:	b2ca      	uxtb	r2, r1
 8003a24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	3301      	adds	r3, #1
 8003a2a:	617b      	str	r3, [r7, #20]
 8003a2c:	697a      	ldr	r2, [r7, #20]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	dbf0      	blt.n	8003a16 <_read+0x12>
  }

  return len;
 8003a34:	687b      	ldr	r3, [r7, #4]
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3718      	adds	r7, #24
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <_close>:
  }
  return len;
}

int _close(int file)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b083      	sub	sp, #12
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003a46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr

08003a56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b083      	sub	sp, #12
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
 8003a5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a66:	605a      	str	r2, [r3, #4]
  return 0;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr

08003a76 <_isatty>:

int _isatty(int file)
{
 8003a76:	b480      	push	{r7}
 8003a78:	b083      	sub	sp, #12
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003a7e:	2301      	movs	r3, #1
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3714      	adds	r7, #20
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
	...

08003aa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ab0:	4a14      	ldr	r2, [pc, #80]	; (8003b04 <_sbrk+0x5c>)
 8003ab2:	4b15      	ldr	r3, [pc, #84]	; (8003b08 <_sbrk+0x60>)
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003abc:	4b13      	ldr	r3, [pc, #76]	; (8003b0c <_sbrk+0x64>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d102      	bne.n	8003aca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ac4:	4b11      	ldr	r3, [pc, #68]	; (8003b0c <_sbrk+0x64>)
 8003ac6:	4a12      	ldr	r2, [pc, #72]	; (8003b10 <_sbrk+0x68>)
 8003ac8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003aca:	4b10      	ldr	r3, [pc, #64]	; (8003b0c <_sbrk+0x64>)
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d207      	bcs.n	8003ae8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ad8:	f006 fd18 	bl	800a50c <__errno>
 8003adc:	4603      	mov	r3, r0
 8003ade:	220c      	movs	r2, #12
 8003ae0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ae6:	e009      	b.n	8003afc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ae8:	4b08      	ldr	r3, [pc, #32]	; (8003b0c <_sbrk+0x64>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003aee:	4b07      	ldr	r3, [pc, #28]	; (8003b0c <_sbrk+0x64>)
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4413      	add	r3, r2
 8003af6:	4a05      	ldr	r2, [pc, #20]	; (8003b0c <_sbrk+0x64>)
 8003af8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003afa:	68fb      	ldr	r3, [r7, #12]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3718      	adds	r7, #24
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	20030000 	.word	0x20030000
 8003b08:	00000400 	.word	0x00000400
 8003b0c:	20000f5c 	.word	0x20000f5c
 8003b10:	200010b0 	.word	0x200010b0

08003b14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b18:	4b06      	ldr	r3, [pc, #24]	; (8003b34 <SystemInit+0x20>)
 8003b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1e:	4a05      	ldr	r2, [pc, #20]	; (8003b34 <SystemInit+0x20>)
 8003b20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b28:	bf00      	nop
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	e000ed00 	.word	0xe000ed00

08003b38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003b38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b70 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003b3c:	f7ff ffea 	bl	8003b14 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003b40:	480c      	ldr	r0, [pc, #48]	; (8003b74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003b42:	490d      	ldr	r1, [pc, #52]	; (8003b78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003b44:	4a0d      	ldr	r2, [pc, #52]	; (8003b7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b48:	e002      	b.n	8003b50 <LoopCopyDataInit>

08003b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b4e:	3304      	adds	r3, #4

08003b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b54:	d3f9      	bcc.n	8003b4a <CopyDataInit>
  


/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b56:	4a0a      	ldr	r2, [pc, #40]	; (8003b80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003b58:	4c0a      	ldr	r4, [pc, #40]	; (8003b84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b5c:	e001      	b.n	8003b62 <LoopFillZerobss>

08003b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b60:	3204      	adds	r2, #4

08003b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b64:	d3fb      	bcc.n	8003b5e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003b66:	f006 fcd7 	bl	800a518 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b6a:	f7fd fcfb 	bl	8001564 <main>
  bx  lr    
 8003b6e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003b70:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003b74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b78:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003b7c:	0800e170 	.word	0x0800e170
  ldr r2, =_sbss
 8003b80:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003b84:	200010b0 	.word	0x200010b0

08003b88 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b88:	e7fe      	b.n	8003b88 <CAN1_RX0_IRQHandler>
	...

08003b8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b90:	4b0e      	ldr	r3, [pc, #56]	; (8003bcc <HAL_Init+0x40>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a0d      	ldr	r2, [pc, #52]	; (8003bcc <HAL_Init+0x40>)
 8003b96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b9c:	4b0b      	ldr	r3, [pc, #44]	; (8003bcc <HAL_Init+0x40>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a0a      	ldr	r2, [pc, #40]	; (8003bcc <HAL_Init+0x40>)
 8003ba2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ba6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ba8:	4b08      	ldr	r3, [pc, #32]	; (8003bcc <HAL_Init+0x40>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a07      	ldr	r2, [pc, #28]	; (8003bcc <HAL_Init+0x40>)
 8003bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bb4:	2003      	movs	r0, #3
 8003bb6:	f000 fe8b 	bl	80048d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003bba:	2000      	movs	r0, #0
 8003bbc:	f000 f808 	bl	8003bd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003bc0:	f7fe feea 	bl	8002998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	40023c00 	.word	0x40023c00

08003bd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003bd8:	4b12      	ldr	r3, [pc, #72]	; (8003c24 <HAL_InitTick+0x54>)
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	4b12      	ldr	r3, [pc, #72]	; (8003c28 <HAL_InitTick+0x58>)
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	4619      	mov	r1, r3
 8003be2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003be6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 fea3 	bl	800493a <HAL_SYSTICK_Config>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e00e      	b.n	8003c1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b0f      	cmp	r3, #15
 8003c02:	d80a      	bhi.n	8003c1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c04:	2200      	movs	r2, #0
 8003c06:	6879      	ldr	r1, [r7, #4]
 8003c08:	f04f 30ff 	mov.w	r0, #4294967295
 8003c0c:	f000 fe6b 	bl	80048e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c10:	4a06      	ldr	r2, [pc, #24]	; (8003c2c <HAL_InitTick+0x5c>)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
 8003c18:	e000      	b.n	8003c1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3708      	adds	r7, #8
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	20000010 	.word	0x20000010
 8003c28:	20000018 	.word	0x20000018
 8003c2c:	20000014 	.word	0x20000014

08003c30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c34:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <HAL_IncTick+0x20>)
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	461a      	mov	r2, r3
 8003c3a:	4b06      	ldr	r3, [pc, #24]	; (8003c54 <HAL_IncTick+0x24>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4413      	add	r3, r2
 8003c40:	4a04      	ldr	r2, [pc, #16]	; (8003c54 <HAL_IncTick+0x24>)
 8003c42:	6013      	str	r3, [r2, #0]
}
 8003c44:	bf00      	nop
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	20000018 	.word	0x20000018
 8003c54:	20000f60 	.word	0x20000f60

08003c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8003c5c:	4b03      	ldr	r3, [pc, #12]	; (8003c6c <HAL_GetTick+0x14>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	20000f60 	.word	0x20000f60

08003c70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c78:	f7ff ffee 	bl	8003c58 <HAL_GetTick>
 8003c7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c88:	d005      	beq.n	8003c96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c8a:	4b0a      	ldr	r3, [pc, #40]	; (8003cb4 <HAL_Delay+0x44>)
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	461a      	mov	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4413      	add	r3, r2
 8003c94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c96:	bf00      	nop
 8003c98:	f7ff ffde 	bl	8003c58 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d8f7      	bhi.n	8003c98 <HAL_Delay+0x28>
  {
  }
}
 8003ca8:	bf00      	nop
 8003caa:	bf00      	nop
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	20000018 	.word	0x20000018

08003cb8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e033      	b.n	8003d36 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d109      	bne.n	8003cea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f7fe fe86 	bl	80029e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	f003 0310 	and.w	r3, r3, #16
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d118      	bne.n	8003d28 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003cfe:	f023 0302 	bic.w	r3, r3, #2
 8003d02:	f043 0202 	orr.w	r2, r3, #2
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 fb88 	bl	8004420 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	f023 0303 	bic.w	r3, r3, #3
 8003d1e:	f043 0201 	orr.w	r2, r3, #1
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	641a      	str	r2, [r3, #64]	; 0x40
 8003d26:	e001      	b.n	8003d2c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b086      	sub	sp, #24
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003d46:	2300      	movs	r3, #0
 8003d48:	617b      	str	r3, [r7, #20]
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	f003 0320 	and.w	r3, r3, #32
 8003d6c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d049      	beq.n	8003e08 <HAL_ADC_IRQHandler+0xca>
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d046      	beq.n	8003e08 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	f003 0310 	and.w	r3, r3, #16
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d105      	bne.n	8003d92 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d12b      	bne.n	8003df8 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d127      	bne.n	8003df8 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dae:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d006      	beq.n	8003dc4 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d119      	bne.n	8003df8 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f022 0220 	bic.w	r2, r2, #32
 8003dd2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d105      	bne.n	8003df8 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df0:	f043 0201 	orr.w	r2, r3, #1
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f7ff fa99 	bl	8003330 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f06f 0212 	mvn.w	r2, #18
 8003e06:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f003 0304 	and.w	r3, r3, #4
 8003e0e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e16:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d057      	beq.n	8003ece <HAL_ADC_IRQHandler+0x190>
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d054      	beq.n	8003ece <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e28:	f003 0310 	and.w	r3, r3, #16
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d105      	bne.n	8003e3c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e34:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d139      	bne.n	8003ebe <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e50:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d006      	beq.n	8003e66 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d12b      	bne.n	8003ebe <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d124      	bne.n	8003ebe <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d11d      	bne.n	8003ebe <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d119      	bne.n	8003ebe <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e98:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d105      	bne.n	8003ebe <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	f043 0201 	orr.w	r2, r3, #1
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 fc2c 	bl	800471c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f06f 020c 	mvn.w	r2, #12
 8003ecc:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003edc:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d017      	beq.n	8003f14 <HAL_ADC_IRQHandler+0x1d6>
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d014      	beq.n	8003f14 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d10d      	bne.n	8003f14 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 f945 	bl	8004194 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f06f 0201 	mvn.w	r2, #1
 8003f12:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f003 0320 	and.w	r3, r3, #32
 8003f1a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f22:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d015      	beq.n	8003f56 <HAL_ADC_IRQHandler+0x218>
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d012      	beq.n	8003f56 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f34:	f043 0202 	orr.w	r2, r3, #2
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f06f 0220 	mvn.w	r2, #32
 8003f44:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f92e 	bl	80041a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f06f 0220 	mvn.w	r2, #32
 8003f54:	601a      	str	r2, [r3, #0]
  }
}
 8003f56:	bf00      	nop
 8003f58:	3718      	adds	r7, #24
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
	...

08003f60 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d101      	bne.n	8003f7e <HAL_ADC_Start_DMA+0x1e>
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	e0e9      	b.n	8004152 <HAL_ADC_Start_DMA+0x1f2>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d018      	beq.n	8003fc6 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689a      	ldr	r2, [r3, #8]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f042 0201 	orr.w	r2, r2, #1
 8003fa2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003fa4:	4b6d      	ldr	r3, [pc, #436]	; (800415c <HAL_ADC_Start_DMA+0x1fc>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a6d      	ldr	r2, [pc, #436]	; (8004160 <HAL_ADC_Start_DMA+0x200>)
 8003faa:	fba2 2303 	umull	r2, r3, r2, r3
 8003fae:	0c9a      	lsrs	r2, r3, #18
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	4413      	add	r3, r2
 8003fb6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003fb8:	e002      	b.n	8003fc0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1f9      	bne.n	8003fba <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fd4:	d107      	bne.n	8003fe6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	689a      	ldr	r2, [r3, #8]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fe4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	f040 80a1 	bne.w	8004138 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003ffe:	f023 0301 	bic.w	r3, r3, #1
 8004002:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004014:	2b00      	cmp	r3, #0
 8004016:	d007      	beq.n	8004028 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004020:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004030:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004034:	d106      	bne.n	8004044 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403a:	f023 0206 	bic.w	r2, r3, #6
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	645a      	str	r2, [r3, #68]	; 0x44
 8004042:	e002      	b.n	800404a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004052:	4b44      	ldr	r3, [pc, #272]	; (8004164 <HAL_ADC_Start_DMA+0x204>)
 8004054:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405a:	4a43      	ldr	r2, [pc, #268]	; (8004168 <HAL_ADC_Start_DMA+0x208>)
 800405c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004062:	4a42      	ldr	r2, [pc, #264]	; (800416c <HAL_ADC_Start_DMA+0x20c>)
 8004064:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406a:	4a41      	ldr	r2, [pc, #260]	; (8004170 <HAL_ADC_Start_DMA+0x210>)
 800406c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004076:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	685a      	ldr	r2, [r3, #4]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004086:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	689a      	ldr	r2, [r3, #8]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004096:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	334c      	adds	r3, #76	; 0x4c
 80040a2:	4619      	mov	r1, r3
 80040a4:	68ba      	ldr	r2, [r7, #8]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f000 fd02 	bl	8004ab0 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f003 031f 	and.w	r3, r3, #31
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d12a      	bne.n	800410e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a2d      	ldr	r2, [pc, #180]	; (8004174 <HAL_ADC_Start_DMA+0x214>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d015      	beq.n	80040ee <HAL_ADC_Start_DMA+0x18e>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a2c      	ldr	r2, [pc, #176]	; (8004178 <HAL_ADC_Start_DMA+0x218>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d105      	bne.n	80040d8 <HAL_ADC_Start_DMA+0x178>
 80040cc:	4b25      	ldr	r3, [pc, #148]	; (8004164 <HAL_ADC_Start_DMA+0x204>)
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f003 031f 	and.w	r3, r3, #31
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00a      	beq.n	80040ee <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a27      	ldr	r2, [pc, #156]	; (800417c <HAL_ADC_Start_DMA+0x21c>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d136      	bne.n	8004150 <HAL_ADC_Start_DMA+0x1f0>
 80040e2:	4b20      	ldr	r3, [pc, #128]	; (8004164 <HAL_ADC_Start_DMA+0x204>)
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f003 0310 	and.w	r3, r3, #16
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d130      	bne.n	8004150 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d129      	bne.n	8004150 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	689a      	ldr	r2, [r3, #8]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800410a:	609a      	str	r2, [r3, #8]
 800410c:	e020      	b.n	8004150 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a18      	ldr	r2, [pc, #96]	; (8004174 <HAL_ADC_Start_DMA+0x214>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d11b      	bne.n	8004150 <HAL_ADC_Start_DMA+0x1f0>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d114      	bne.n	8004150 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	689a      	ldr	r2, [r3, #8]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004134:	609a      	str	r2, [r3, #8]
 8004136:	e00b      	b.n	8004150 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413c:	f043 0210 	orr.w	r2, r3, #16
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004148:	f043 0201 	orr.w	r2, r3, #1
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3718      	adds	r7, #24
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	20000010 	.word	0x20000010
 8004160:	431bde83 	.word	0x431bde83
 8004164:	40012300 	.word	0x40012300
 8004168:	08004619 	.word	0x08004619
 800416c:	080046d3 	.word	0x080046d3
 8004170:	080046ef 	.word	0x080046ef
 8004174:	40012000 	.word	0x40012000
 8004178:	40012100 	.word	0x40012100
 800417c:	40012200 	.word	0x40012200

08004180 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80041c6:	2300      	movs	r3, #0
 80041c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d101      	bne.n	80041d8 <HAL_ADC_ConfigChannel+0x1c>
 80041d4:	2302      	movs	r3, #2
 80041d6:	e113      	b.n	8004400 <HAL_ADC_ConfigChannel+0x244>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2b09      	cmp	r3, #9
 80041e6:	d925      	bls.n	8004234 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68d9      	ldr	r1, [r3, #12]
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	461a      	mov	r2, r3
 80041f6:	4613      	mov	r3, r2
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	4413      	add	r3, r2
 80041fc:	3b1e      	subs	r3, #30
 80041fe:	2207      	movs	r2, #7
 8004200:	fa02 f303 	lsl.w	r3, r2, r3
 8004204:	43da      	mvns	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	400a      	ands	r2, r1
 800420c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68d9      	ldr	r1, [r3, #12]
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	689a      	ldr	r2, [r3, #8]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	b29b      	uxth	r3, r3
 800421e:	4618      	mov	r0, r3
 8004220:	4603      	mov	r3, r0
 8004222:	005b      	lsls	r3, r3, #1
 8004224:	4403      	add	r3, r0
 8004226:	3b1e      	subs	r3, #30
 8004228:	409a      	lsls	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	430a      	orrs	r2, r1
 8004230:	60da      	str	r2, [r3, #12]
 8004232:	e022      	b.n	800427a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	6919      	ldr	r1, [r3, #16]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	b29b      	uxth	r3, r3
 8004240:	461a      	mov	r2, r3
 8004242:	4613      	mov	r3, r2
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	4413      	add	r3, r2
 8004248:	2207      	movs	r2, #7
 800424a:	fa02 f303 	lsl.w	r3, r2, r3
 800424e:	43da      	mvns	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	400a      	ands	r2, r1
 8004256:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	6919      	ldr	r1, [r3, #16]
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	689a      	ldr	r2, [r3, #8]
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	b29b      	uxth	r3, r3
 8004268:	4618      	mov	r0, r3
 800426a:	4603      	mov	r3, r0
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	4403      	add	r3, r0
 8004270:	409a      	lsls	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	430a      	orrs	r2, r1
 8004278:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	2b06      	cmp	r3, #6
 8004280:	d824      	bhi.n	80042cc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	4613      	mov	r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	4413      	add	r3, r2
 8004292:	3b05      	subs	r3, #5
 8004294:	221f      	movs	r2, #31
 8004296:	fa02 f303 	lsl.w	r3, r2, r3
 800429a:	43da      	mvns	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	400a      	ands	r2, r1
 80042a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	4618      	mov	r0, r3
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	4613      	mov	r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	4413      	add	r3, r2
 80042bc:	3b05      	subs	r3, #5
 80042be:	fa00 f203 	lsl.w	r2, r0, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	430a      	orrs	r2, r1
 80042c8:	635a      	str	r2, [r3, #52]	; 0x34
 80042ca:	e04c      	b.n	8004366 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	2b0c      	cmp	r3, #12
 80042d2:	d824      	bhi.n	800431e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	4613      	mov	r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	4413      	add	r3, r2
 80042e4:	3b23      	subs	r3, #35	; 0x23
 80042e6:	221f      	movs	r2, #31
 80042e8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ec:	43da      	mvns	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	400a      	ands	r2, r1
 80042f4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	b29b      	uxth	r3, r3
 8004302:	4618      	mov	r0, r3
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	4613      	mov	r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4413      	add	r3, r2
 800430e:	3b23      	subs	r3, #35	; 0x23
 8004310:	fa00 f203 	lsl.w	r2, r0, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	430a      	orrs	r2, r1
 800431a:	631a      	str	r2, [r3, #48]	; 0x30
 800431c:	e023      	b.n	8004366 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	685a      	ldr	r2, [r3, #4]
 8004328:	4613      	mov	r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4413      	add	r3, r2
 800432e:	3b41      	subs	r3, #65	; 0x41
 8004330:	221f      	movs	r2, #31
 8004332:	fa02 f303 	lsl.w	r3, r2, r3
 8004336:	43da      	mvns	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	400a      	ands	r2, r1
 800433e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	b29b      	uxth	r3, r3
 800434c:	4618      	mov	r0, r3
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	685a      	ldr	r2, [r3, #4]
 8004352:	4613      	mov	r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	4413      	add	r3, r2
 8004358:	3b41      	subs	r3, #65	; 0x41
 800435a:	fa00 f203 	lsl.w	r2, r0, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	430a      	orrs	r2, r1
 8004364:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004366:	4b29      	ldr	r3, [pc, #164]	; (800440c <HAL_ADC_ConfigChannel+0x250>)
 8004368:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a28      	ldr	r2, [pc, #160]	; (8004410 <HAL_ADC_ConfigChannel+0x254>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d10f      	bne.n	8004394 <HAL_ADC_ConfigChannel+0x1d8>
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2b12      	cmp	r3, #18
 800437a:	d10b      	bne.n	8004394 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a1d      	ldr	r2, [pc, #116]	; (8004410 <HAL_ADC_ConfigChannel+0x254>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d12b      	bne.n	80043f6 <HAL_ADC_ConfigChannel+0x23a>
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a1c      	ldr	r2, [pc, #112]	; (8004414 <HAL_ADC_ConfigChannel+0x258>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d003      	beq.n	80043b0 <HAL_ADC_ConfigChannel+0x1f4>
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2b11      	cmp	r3, #17
 80043ae:	d122      	bne.n	80043f6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a11      	ldr	r2, [pc, #68]	; (8004414 <HAL_ADC_ConfigChannel+0x258>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d111      	bne.n	80043f6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80043d2:	4b11      	ldr	r3, [pc, #68]	; (8004418 <HAL_ADC_ConfigChannel+0x25c>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a11      	ldr	r2, [pc, #68]	; (800441c <HAL_ADC_ConfigChannel+0x260>)
 80043d8:	fba2 2303 	umull	r2, r3, r2, r3
 80043dc:	0c9a      	lsrs	r2, r3, #18
 80043de:	4613      	mov	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	4413      	add	r3, r2
 80043e4:	005b      	lsls	r3, r3, #1
 80043e6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80043e8:	e002      	b.n	80043f0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	3b01      	subs	r3, #1
 80043ee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1f9      	bne.n	80043ea <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3714      	adds	r7, #20
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr
 800440c:	40012300 	.word	0x40012300
 8004410:	40012000 	.word	0x40012000
 8004414:	10000012 	.word	0x10000012
 8004418:	20000010 	.word	0x20000010
 800441c:	431bde83 	.word	0x431bde83

08004420 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004428:	4b79      	ldr	r3, [pc, #484]	; (8004610 <ADC_Init+0x1f0>)
 800442a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	685a      	ldr	r2, [r3, #4]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	431a      	orrs	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004454:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	6859      	ldr	r1, [r3, #4]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	021a      	lsls	r2, r3, #8
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	430a      	orrs	r2, r1
 8004468:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	685a      	ldr	r2, [r3, #4]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004478:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6859      	ldr	r1, [r3, #4]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689a      	ldr	r2, [r3, #8]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	430a      	orrs	r2, r1
 800448a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	689a      	ldr	r2, [r3, #8]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800449a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6899      	ldr	r1, [r3, #8]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68da      	ldr	r2, [r3, #12]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	430a      	orrs	r2, r1
 80044ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b2:	4a58      	ldr	r2, [pc, #352]	; (8004614 <ADC_Init+0x1f4>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d022      	beq.n	80044fe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689a      	ldr	r2, [r3, #8]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80044c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6899      	ldr	r1, [r3, #8]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	430a      	orrs	r2, r1
 80044d8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80044e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6899      	ldr	r1, [r3, #8]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	430a      	orrs	r2, r1
 80044fa:	609a      	str	r2, [r3, #8]
 80044fc:	e00f      	b.n	800451e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800450c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	689a      	ldr	r2, [r3, #8]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800451c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	689a      	ldr	r2, [r3, #8]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 0202 	bic.w	r2, r2, #2
 800452c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6899      	ldr	r1, [r3, #8]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	7e1b      	ldrb	r3, [r3, #24]
 8004538:	005a      	lsls	r2, r3, #1
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	430a      	orrs	r2, r1
 8004540:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d01b      	beq.n	8004584 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	685a      	ldr	r2, [r3, #4]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800455a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685a      	ldr	r2, [r3, #4]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800456a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	6859      	ldr	r1, [r3, #4]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004576:	3b01      	subs	r3, #1
 8004578:	035a      	lsls	r2, r3, #13
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	430a      	orrs	r2, r1
 8004580:	605a      	str	r2, [r3, #4]
 8004582:	e007      	b.n	8004594 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	685a      	ldr	r2, [r3, #4]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004592:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80045a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	3b01      	subs	r3, #1
 80045b0:	051a      	lsls	r2, r3, #20
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	689a      	ldr	r2, [r3, #8]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80045c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	6899      	ldr	r1, [r3, #8]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80045d6:	025a      	lsls	r2, r3, #9
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	430a      	orrs	r2, r1
 80045de:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	689a      	ldr	r2, [r3, #8]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	6899      	ldr	r1, [r3, #8]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	029a      	lsls	r2, r3, #10
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	430a      	orrs	r2, r1
 8004602:	609a      	str	r2, [r3, #8]
}
 8004604:	bf00      	nop
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr
 8004610:	40012300 	.word	0x40012300
 8004614:	0f000001 	.word	0x0f000001

08004618 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004624:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800462e:	2b00      	cmp	r3, #0
 8004630:	d13c      	bne.n	80046ac <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004636:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d12b      	bne.n	80046a4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004650:	2b00      	cmp	r3, #0
 8004652:	d127      	bne.n	80046a4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800465e:	2b00      	cmp	r3, #0
 8004660:	d006      	beq.n	8004670 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800466c:	2b00      	cmp	r3, #0
 800466e:	d119      	bne.n	80046a4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 0220 	bic.w	r2, r2, #32
 800467e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004684:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004690:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d105      	bne.n	80046a4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469c:	f043 0201 	orr.w	r2, r3, #1
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f7fe fe43 	bl	8003330 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80046aa:	e00e      	b.n	80046ca <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b0:	f003 0310 	and.w	r3, r3, #16
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d003      	beq.n	80046c0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f7ff fd75 	bl	80041a8 <HAL_ADC_ErrorCallback>
}
 80046be:	e004      	b.n	80046ca <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	4798      	blx	r3
}
 80046ca:	bf00      	nop
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b084      	sub	sp, #16
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046de:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f7ff fd4d 	bl	8004180 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80046e6:	bf00      	nop
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}

080046ee <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80046ee:	b580      	push	{r7, lr}
 80046f0:	b084      	sub	sp, #16
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fa:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2240      	movs	r2, #64	; 0x40
 8004700:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004706:	f043 0204 	orr.w	r2, r3, #4
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f7ff fd4a 	bl	80041a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004714:	bf00      	nop
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f003 0307 	and.w	r3, r3, #7
 800473e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004740:	4b0c      	ldr	r3, [pc, #48]	; (8004774 <__NVIC_SetPriorityGrouping+0x44>)
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800474c:	4013      	ands	r3, r2
 800474e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004758:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800475c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004760:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004762:	4a04      	ldr	r2, [pc, #16]	; (8004774 <__NVIC_SetPriorityGrouping+0x44>)
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	60d3      	str	r3, [r2, #12]
}
 8004768:	bf00      	nop
 800476a:	3714      	adds	r7, #20
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr
 8004774:	e000ed00 	.word	0xe000ed00

08004778 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004778:	b480      	push	{r7}
 800477a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800477c:	4b04      	ldr	r3, [pc, #16]	; (8004790 <__NVIC_GetPriorityGrouping+0x18>)
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	0a1b      	lsrs	r3, r3, #8
 8004782:	f003 0307 	and.w	r3, r3, #7
}
 8004786:	4618      	mov	r0, r3
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	e000ed00 	.word	0xe000ed00

08004794 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	4603      	mov	r3, r0
 800479c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800479e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	db0b      	blt.n	80047be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047a6:	79fb      	ldrb	r3, [r7, #7]
 80047a8:	f003 021f 	and.w	r2, r3, #31
 80047ac:	4907      	ldr	r1, [pc, #28]	; (80047cc <__NVIC_EnableIRQ+0x38>)
 80047ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047b2:	095b      	lsrs	r3, r3, #5
 80047b4:	2001      	movs	r0, #1
 80047b6:	fa00 f202 	lsl.w	r2, r0, r2
 80047ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80047be:	bf00      	nop
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	e000e100 	.word	0xe000e100

080047d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	4603      	mov	r3, r0
 80047d8:	6039      	str	r1, [r7, #0]
 80047da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	db0a      	blt.n	80047fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	b2da      	uxtb	r2, r3
 80047e8:	490c      	ldr	r1, [pc, #48]	; (800481c <__NVIC_SetPriority+0x4c>)
 80047ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ee:	0112      	lsls	r2, r2, #4
 80047f0:	b2d2      	uxtb	r2, r2
 80047f2:	440b      	add	r3, r1
 80047f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047f8:	e00a      	b.n	8004810 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	b2da      	uxtb	r2, r3
 80047fe:	4908      	ldr	r1, [pc, #32]	; (8004820 <__NVIC_SetPriority+0x50>)
 8004800:	79fb      	ldrb	r3, [r7, #7]
 8004802:	f003 030f 	and.w	r3, r3, #15
 8004806:	3b04      	subs	r3, #4
 8004808:	0112      	lsls	r2, r2, #4
 800480a:	b2d2      	uxtb	r2, r2
 800480c:	440b      	add	r3, r1
 800480e:	761a      	strb	r2, [r3, #24]
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr
 800481c:	e000e100 	.word	0xe000e100
 8004820:	e000ed00 	.word	0xe000ed00

08004824 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004824:	b480      	push	{r7}
 8004826:	b089      	sub	sp, #36	; 0x24
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f003 0307 	and.w	r3, r3, #7
 8004836:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	f1c3 0307 	rsb	r3, r3, #7
 800483e:	2b04      	cmp	r3, #4
 8004840:	bf28      	it	cs
 8004842:	2304      	movcs	r3, #4
 8004844:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	3304      	adds	r3, #4
 800484a:	2b06      	cmp	r3, #6
 800484c:	d902      	bls.n	8004854 <NVIC_EncodePriority+0x30>
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	3b03      	subs	r3, #3
 8004852:	e000      	b.n	8004856 <NVIC_EncodePriority+0x32>
 8004854:	2300      	movs	r3, #0
 8004856:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004858:	f04f 32ff 	mov.w	r2, #4294967295
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	fa02 f303 	lsl.w	r3, r2, r3
 8004862:	43da      	mvns	r2, r3
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	401a      	ands	r2, r3
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800486c:	f04f 31ff 	mov.w	r1, #4294967295
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	fa01 f303 	lsl.w	r3, r1, r3
 8004876:	43d9      	mvns	r1, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800487c:	4313      	orrs	r3, r2
         );
}
 800487e:	4618      	mov	r0, r3
 8004880:	3724      	adds	r7, #36	; 0x24
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
	...

0800488c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	3b01      	subs	r3, #1
 8004898:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800489c:	d301      	bcc.n	80048a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800489e:	2301      	movs	r3, #1
 80048a0:	e00f      	b.n	80048c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048a2:	4a0a      	ldr	r2, [pc, #40]	; (80048cc <SysTick_Config+0x40>)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	3b01      	subs	r3, #1
 80048a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048aa:	210f      	movs	r1, #15
 80048ac:	f04f 30ff 	mov.w	r0, #4294967295
 80048b0:	f7ff ff8e 	bl	80047d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048b4:	4b05      	ldr	r3, [pc, #20]	; (80048cc <SysTick_Config+0x40>)
 80048b6:	2200      	movs	r2, #0
 80048b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048ba:	4b04      	ldr	r3, [pc, #16]	; (80048cc <SysTick_Config+0x40>)
 80048bc:	2207      	movs	r2, #7
 80048be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3708      	adds	r7, #8
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	e000e010 	.word	0xe000e010

080048d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f7ff ff29 	bl	8004730 <__NVIC_SetPriorityGrouping>
}
 80048de:	bf00      	nop
 80048e0:	3708      	adds	r7, #8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b086      	sub	sp, #24
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	4603      	mov	r3, r0
 80048ee:	60b9      	str	r1, [r7, #8]
 80048f0:	607a      	str	r2, [r7, #4]
 80048f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80048f4:	2300      	movs	r3, #0
 80048f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80048f8:	f7ff ff3e 	bl	8004778 <__NVIC_GetPriorityGrouping>
 80048fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	68b9      	ldr	r1, [r7, #8]
 8004902:	6978      	ldr	r0, [r7, #20]
 8004904:	f7ff ff8e 	bl	8004824 <NVIC_EncodePriority>
 8004908:	4602      	mov	r2, r0
 800490a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800490e:	4611      	mov	r1, r2
 8004910:	4618      	mov	r0, r3
 8004912:	f7ff ff5d 	bl	80047d0 <__NVIC_SetPriority>
}
 8004916:	bf00      	nop
 8004918:	3718      	adds	r7, #24
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800491e:	b580      	push	{r7, lr}
 8004920:	b082      	sub	sp, #8
 8004922:	af00      	add	r7, sp, #0
 8004924:	4603      	mov	r3, r0
 8004926:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800492c:	4618      	mov	r0, r3
 800492e:	f7ff ff31 	bl	8004794 <__NVIC_EnableIRQ>
}
 8004932:	bf00      	nop
 8004934:	3708      	adds	r7, #8
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b082      	sub	sp, #8
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f7ff ffa2 	bl	800488c <SysTick_Config>
 8004948:	4603      	mov	r3, r0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3708      	adds	r7, #8
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
	...

08004954 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800495c:	2300      	movs	r3, #0
 800495e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004960:	f7ff f97a 	bl	8003c58 <HAL_GetTick>
 8004964:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d101      	bne.n	8004970 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e099      	b.n	8004aa4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2202      	movs	r2, #2
 8004974:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f022 0201 	bic.w	r2, r2, #1
 800498e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004990:	e00f      	b.n	80049b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004992:	f7ff f961 	bl	8003c58 <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	2b05      	cmp	r3, #5
 800499e:	d908      	bls.n	80049b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2220      	movs	r2, #32
 80049a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2203      	movs	r2, #3
 80049aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e078      	b.n	8004aa4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0301 	and.w	r3, r3, #1
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1e8      	bne.n	8004992 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80049c8:	697a      	ldr	r2, [r7, #20]
 80049ca:	4b38      	ldr	r3, [pc, #224]	; (8004aac <HAL_DMA_Init+0x158>)
 80049cc:	4013      	ands	r3, r2
 80049ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685a      	ldr	r2, [r3, #4]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80049de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a1b      	ldr	r3, [r3, #32]
 80049fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a08:	2b04      	cmp	r3, #4
 8004a0a:	d107      	bne.n	8004a1c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a14:	4313      	orrs	r3, r2
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	697a      	ldr	r2, [r7, #20]
 8004a22:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	695b      	ldr	r3, [r3, #20]
 8004a2a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	f023 0307 	bic.w	r3, r3, #7
 8004a32:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a38:	697a      	ldr	r2, [r7, #20]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a42:	2b04      	cmp	r3, #4
 8004a44:	d117      	bne.n	8004a76 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d00e      	beq.n	8004a76 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 fb01 	bl	8005060 <DMA_CheckFifoParam>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d008      	beq.n	8004a76 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2240      	movs	r2, #64	; 0x40
 8004a68:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004a72:	2301      	movs	r3, #1
 8004a74:	e016      	b.n	8004aa4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 fab8 	bl	8004ff4 <DMA_CalcBaseAndBitshift>
 8004a84:	4603      	mov	r3, r0
 8004a86:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a8c:	223f      	movs	r2, #63	; 0x3f
 8004a8e:	409a      	lsls	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3718      	adds	r7, #24
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	f010803f 	.word	0xf010803f

08004ab0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]
 8004abc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d101      	bne.n	8004ad6 <HAL_DMA_Start_IT+0x26>
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	e040      	b.n	8004b58 <HAL_DMA_Start_IT+0xa8>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d12f      	bne.n	8004b4a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2202      	movs	r2, #2
 8004aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	68b9      	ldr	r1, [r7, #8]
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	f000 fa4a 	bl	8004f98 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b08:	223f      	movs	r2, #63	; 0x3f
 8004b0a:	409a      	lsls	r2, r3
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f042 0216 	orr.w	r2, r2, #22
 8004b1e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d007      	beq.n	8004b38 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f042 0208 	orr.w	r2, r2, #8
 8004b36:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f042 0201 	orr.w	r2, r2, #1
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	e005      	b.n	8004b56 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004b52:	2302      	movs	r3, #2
 8004b54:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3718      	adds	r7, #24
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b6c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004b6e:	f7ff f873 	bl	8003c58 <HAL_GetTick>
 8004b72:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d008      	beq.n	8004b92 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2280      	movs	r2, #128	; 0x80
 8004b84:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e052      	b.n	8004c38 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f022 0216 	bic.w	r2, r2, #22
 8004ba0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	695a      	ldr	r2, [r3, #20]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bb0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d103      	bne.n	8004bc2 <HAL_DMA_Abort+0x62>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d007      	beq.n	8004bd2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f022 0208 	bic.w	r2, r2, #8
 8004bd0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 0201 	bic.w	r2, r2, #1
 8004be0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004be2:	e013      	b.n	8004c0c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004be4:	f7ff f838 	bl	8003c58 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b05      	cmp	r3, #5
 8004bf0:	d90c      	bls.n	8004c0c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2220      	movs	r2, #32
 8004bf6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2203      	movs	r2, #3
 8004bfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e015      	b.n	8004c38 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1e4      	bne.n	8004be4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c1e:	223f      	movs	r2, #63	; 0x3f
 8004c20:	409a      	lsls	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3710      	adds	r7, #16
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d004      	beq.n	8004c5e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2280      	movs	r2, #128	; 0x80
 8004c58:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e00c      	b.n	8004c78 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2205      	movs	r2, #5
 8004c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f022 0201 	bic.w	r2, r2, #1
 8004c74:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004c90:	4b8e      	ldr	r3, [pc, #568]	; (8004ecc <HAL_DMA_IRQHandler+0x248>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a8e      	ldr	r2, [pc, #568]	; (8004ed0 <HAL_DMA_IRQHandler+0x24c>)
 8004c96:	fba2 2303 	umull	r2, r3, r2, r3
 8004c9a:	0a9b      	lsrs	r3, r3, #10
 8004c9c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cae:	2208      	movs	r2, #8
 8004cb0:	409a      	lsls	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d01a      	beq.n	8004cf0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0304 	and.w	r3, r3, #4
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d013      	beq.n	8004cf0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f022 0204 	bic.w	r2, r2, #4
 8004cd6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cdc:	2208      	movs	r2, #8
 8004cde:	409a      	lsls	r2, r3
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce8:	f043 0201 	orr.w	r2, r3, #1
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	409a      	lsls	r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d012      	beq.n	8004d26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00b      	beq.n	8004d26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d12:	2201      	movs	r2, #1
 8004d14:	409a      	lsls	r2, r3
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d1e:	f043 0202 	orr.w	r2, r3, #2
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d2a:	2204      	movs	r2, #4
 8004d2c:	409a      	lsls	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	4013      	ands	r3, r2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d012      	beq.n	8004d5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0302 	and.w	r3, r3, #2
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00b      	beq.n	8004d5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d48:	2204      	movs	r2, #4
 8004d4a:	409a      	lsls	r2, r3
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d54:	f043 0204 	orr.w	r2, r3, #4
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d60:	2210      	movs	r2, #16
 8004d62:	409a      	lsls	r2, r3
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	4013      	ands	r3, r2
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d043      	beq.n	8004df4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0308 	and.w	r3, r3, #8
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d03c      	beq.n	8004df4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d7e:	2210      	movs	r2, #16
 8004d80:	409a      	lsls	r2, r3
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d018      	beq.n	8004dc6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d108      	bne.n	8004db4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d024      	beq.n	8004df4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	4798      	blx	r3
 8004db2:	e01f      	b.n	8004df4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d01b      	beq.n	8004df4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	4798      	blx	r3
 8004dc4:	e016      	b.n	8004df4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d107      	bne.n	8004de4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 0208 	bic.w	r2, r2, #8
 8004de2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d003      	beq.n	8004df4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004df8:	2220      	movs	r2, #32
 8004dfa:	409a      	lsls	r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	4013      	ands	r3, r2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f000 808f 	beq.w	8004f24 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0310 	and.w	r3, r3, #16
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	f000 8087 	beq.w	8004f24 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	409a      	lsls	r2, r3
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b05      	cmp	r3, #5
 8004e2c:	d136      	bne.n	8004e9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f022 0216 	bic.w	r2, r2, #22
 8004e3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	695a      	ldr	r2, [r3, #20]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d103      	bne.n	8004e5e <HAL_DMA_IRQHandler+0x1da>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d007      	beq.n	8004e6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f022 0208 	bic.w	r2, r2, #8
 8004e6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e72:	223f      	movs	r2, #63	; 0x3f
 8004e74:	409a      	lsls	r2, r3
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d07e      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	4798      	blx	r3
        }
        return;
 8004e9a:	e079      	b.n	8004f90 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d01d      	beq.n	8004ee6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d10d      	bne.n	8004ed4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d031      	beq.n	8004f24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	4798      	blx	r3
 8004ec8:	e02c      	b.n	8004f24 <HAL_DMA_IRQHandler+0x2a0>
 8004eca:	bf00      	nop
 8004ecc:	20000010 	.word	0x20000010
 8004ed0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d023      	beq.n	8004f24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	4798      	blx	r3
 8004ee4:	e01e      	b.n	8004f24 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d10f      	bne.n	8004f14 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f022 0210 	bic.w	r2, r2, #16
 8004f02:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d003      	beq.n	8004f24 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d032      	beq.n	8004f92 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f30:	f003 0301 	and.w	r3, r3, #1
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d022      	beq.n	8004f7e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2205      	movs	r2, #5
 8004f3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f022 0201 	bic.w	r2, r2, #1
 8004f4e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	3301      	adds	r3, #1
 8004f54:	60bb      	str	r3, [r7, #8]
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d307      	bcc.n	8004f6c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1f2      	bne.n	8004f50 <HAL_DMA_IRQHandler+0x2cc>
 8004f6a:	e000      	b.n	8004f6e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004f6c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d005      	beq.n	8004f92 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	4798      	blx	r3
 8004f8e:	e000      	b.n	8004f92 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004f90:	bf00      	nop
    }
  }
}
 8004f92:	3718      	adds	r7, #24
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
 8004fa4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004fb4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	683a      	ldr	r2, [r7, #0]
 8004fbc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	2b40      	cmp	r3, #64	; 0x40
 8004fc4:	d108      	bne.n	8004fd8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68ba      	ldr	r2, [r7, #8]
 8004fd4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004fd6:	e007      	b.n	8004fe8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68ba      	ldr	r2, [r7, #8]
 8004fde:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	60da      	str	r2, [r3, #12]
}
 8004fe8:	bf00      	nop
 8004fea:	3714      	adds	r7, #20
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	b2db      	uxtb	r3, r3
 8005002:	3b10      	subs	r3, #16
 8005004:	4a14      	ldr	r2, [pc, #80]	; (8005058 <DMA_CalcBaseAndBitshift+0x64>)
 8005006:	fba2 2303 	umull	r2, r3, r2, r3
 800500a:	091b      	lsrs	r3, r3, #4
 800500c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800500e:	4a13      	ldr	r2, [pc, #76]	; (800505c <DMA_CalcBaseAndBitshift+0x68>)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	4413      	add	r3, r2
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	461a      	mov	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2b03      	cmp	r3, #3
 8005020:	d909      	bls.n	8005036 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800502a:	f023 0303 	bic.w	r3, r3, #3
 800502e:	1d1a      	adds	r2, r3, #4
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	659a      	str	r2, [r3, #88]	; 0x58
 8005034:	e007      	b.n	8005046 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800503e:	f023 0303 	bic.w	r3, r3, #3
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800504a:	4618      	mov	r0, r3
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	aaaaaaab 	.word	0xaaaaaaab
 800505c:	0800dd2c 	.word	0x0800dd2c

08005060 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005068:	2300      	movs	r3, #0
 800506a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005070:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d11f      	bne.n	80050ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	2b03      	cmp	r3, #3
 800507e:	d856      	bhi.n	800512e <DMA_CheckFifoParam+0xce>
 8005080:	a201      	add	r2, pc, #4	; (adr r2, 8005088 <DMA_CheckFifoParam+0x28>)
 8005082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005086:	bf00      	nop
 8005088:	08005099 	.word	0x08005099
 800508c:	080050ab 	.word	0x080050ab
 8005090:	08005099 	.word	0x08005099
 8005094:	0800512f 	.word	0x0800512f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d046      	beq.n	8005132 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050a8:	e043      	b.n	8005132 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80050b2:	d140      	bne.n	8005136 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050b8:	e03d      	b.n	8005136 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050c2:	d121      	bne.n	8005108 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	2b03      	cmp	r3, #3
 80050c8:	d837      	bhi.n	800513a <DMA_CheckFifoParam+0xda>
 80050ca:	a201      	add	r2, pc, #4	; (adr r2, 80050d0 <DMA_CheckFifoParam+0x70>)
 80050cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d0:	080050e1 	.word	0x080050e1
 80050d4:	080050e7 	.word	0x080050e7
 80050d8:	080050e1 	.word	0x080050e1
 80050dc:	080050f9 	.word	0x080050f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	73fb      	strb	r3, [r7, #15]
      break;
 80050e4:	e030      	b.n	8005148 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d025      	beq.n	800513e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050f6:	e022      	b.n	800513e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005100:	d11f      	bne.n	8005142 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005106:	e01c      	b.n	8005142 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	2b02      	cmp	r3, #2
 800510c:	d903      	bls.n	8005116 <DMA_CheckFifoParam+0xb6>
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	2b03      	cmp	r3, #3
 8005112:	d003      	beq.n	800511c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005114:	e018      	b.n	8005148 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	73fb      	strb	r3, [r7, #15]
      break;
 800511a:	e015      	b.n	8005148 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005120:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00e      	beq.n	8005146 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	73fb      	strb	r3, [r7, #15]
      break;
 800512c:	e00b      	b.n	8005146 <DMA_CheckFifoParam+0xe6>
      break;
 800512e:	bf00      	nop
 8005130:	e00a      	b.n	8005148 <DMA_CheckFifoParam+0xe8>
      break;
 8005132:	bf00      	nop
 8005134:	e008      	b.n	8005148 <DMA_CheckFifoParam+0xe8>
      break;
 8005136:	bf00      	nop
 8005138:	e006      	b.n	8005148 <DMA_CheckFifoParam+0xe8>
      break;
 800513a:	bf00      	nop
 800513c:	e004      	b.n	8005148 <DMA_CheckFifoParam+0xe8>
      break;
 800513e:	bf00      	nop
 8005140:	e002      	b.n	8005148 <DMA_CheckFifoParam+0xe8>
      break;   
 8005142:	bf00      	nop
 8005144:	e000      	b.n	8005148 <DMA_CheckFifoParam+0xe8>
      break;
 8005146:	bf00      	nop
    }
  } 
  
  return status; 
 8005148:	7bfb      	ldrb	r3, [r7, #15]
}
 800514a:	4618      	mov	r0, r3
 800514c:	3714      	adds	r7, #20
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop

08005158 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d101      	bne.n	800516a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e06c      	b.n	8005244 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005170:	2b00      	cmp	r3, #0
 8005172:	d106      	bne.n	8005182 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2223      	movs	r2, #35	; 0x23
 8005178:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f7fd fccf 	bl	8002b20 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005182:	2300      	movs	r3, #0
 8005184:	60bb      	str	r3, [r7, #8]
 8005186:	4b31      	ldr	r3, [pc, #196]	; (800524c <HAL_ETH_Init+0xf4>)
 8005188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800518a:	4a30      	ldr	r2, [pc, #192]	; (800524c <HAL_ETH_Init+0xf4>)
 800518c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005190:	6453      	str	r3, [r2, #68]	; 0x44
 8005192:	4b2e      	ldr	r3, [pc, #184]	; (800524c <HAL_ETH_Init+0xf4>)
 8005194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005196:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800519a:	60bb      	str	r3, [r7, #8]
 800519c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800519e:	4b2c      	ldr	r3, [pc, #176]	; (8005250 <HAL_ETH_Init+0xf8>)
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	4a2b      	ldr	r2, [pc, #172]	; (8005250 <HAL_ETH_Init+0xf8>)
 80051a4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80051a8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80051aa:	4b29      	ldr	r3, [pc, #164]	; (8005250 <HAL_ETH_Init+0xf8>)
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	4927      	ldr	r1, [pc, #156]	; (8005250 <HAL_ETH_Init+0xf8>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80051b8:	4b25      	ldr	r3, [pc, #148]	; (8005250 <HAL_ETH_Init+0xf8>)
 80051ba:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	6812      	ldr	r2, [r2, #0]
 80051ca:	f043 0301 	orr.w	r3, r3, #1
 80051ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80051d2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051d4:	f7fe fd40 	bl	8003c58 <HAL_GetTick>
 80051d8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80051da:	e011      	b.n	8005200 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80051dc:	f7fe fd3c 	bl	8003c58 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80051ea:	d909      	bls.n	8005200 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2204      	movs	r2, #4
 80051f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	22e0      	movs	r2, #224	; 0xe0
 80051f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e021      	b.n	8005244 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1e4      	bne.n	80051dc <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 f958 	bl	80054c8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 f9ff 	bl	800561c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 fa55 	bl	80056ce <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	461a      	mov	r2, r3
 800522a:	2100      	movs	r1, #0
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 f9bd 	bl	80055ac <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2210      	movs	r2, #16
 800523e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3710      	adds	r7, #16
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	40023800 	.word	0x40023800
 8005250:	40013800 	.word	0x40013800

08005254 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	4b51      	ldr	r3, [pc, #324]	; (80053b0 <ETH_SetMACConfig+0x15c>)
 800526a:	4013      	ands	r3, r2
 800526c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	7c1b      	ldrb	r3, [r3, #16]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d102      	bne.n	800527c <ETH_SetMACConfig+0x28>
 8005276:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800527a:	e000      	b.n	800527e <ETH_SetMACConfig+0x2a>
 800527c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	7c5b      	ldrb	r3, [r3, #17]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d102      	bne.n	800528c <ETH_SetMACConfig+0x38>
 8005286:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800528a:	e000      	b.n	800528e <ETH_SetMACConfig+0x3a>
 800528c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800528e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8005294:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	7fdb      	ldrb	r3, [r3, #31]
 800529a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800529c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80052a2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	7f92      	ldrb	r2, [r2, #30]
 80052a8:	2a00      	cmp	r2, #0
 80052aa:	d102      	bne.n	80052b2 <ETH_SetMACConfig+0x5e>
 80052ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80052b0:	e000      	b.n	80052b4 <ETH_SetMACConfig+0x60>
 80052b2:	2200      	movs	r2, #0
                        macconf->Speed |
 80052b4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	7f1b      	ldrb	r3, [r3, #28]
 80052ba:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80052bc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80052c2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	791b      	ldrb	r3, [r3, #4]
 80052c8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80052ca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80052cc:	683a      	ldr	r2, [r7, #0]
 80052ce:	f892 2020 	ldrb.w	r2, [r2, #32]
 80052d2:	2a00      	cmp	r2, #0
 80052d4:	d102      	bne.n	80052dc <ETH_SetMACConfig+0x88>
 80052d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052da:	e000      	b.n	80052de <ETH_SetMACConfig+0x8a>
 80052dc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80052de:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	7bdb      	ldrb	r3, [r3, #15]
 80052e4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80052e6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80052ec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052f4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80052f6:	4313      	orrs	r3, r2
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800530e:	2001      	movs	r0, #1
 8005310:	f7fe fcae 	bl	8003c70 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	f64f 7341 	movw	r3, #65345	; 0xff41
 800532a:	4013      	ands	r3, r2
 800532c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005332:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8005334:	683a      	ldr	r2, [r7, #0]
 8005336:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800533a:	2a00      	cmp	r2, #0
 800533c:	d101      	bne.n	8005342 <ETH_SetMACConfig+0xee>
 800533e:	2280      	movs	r2, #128	; 0x80
 8005340:	e000      	b.n	8005344 <ETH_SetMACConfig+0xf0>
 8005342:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005344:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800534a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800534c:	683a      	ldr	r2, [r7, #0]
 800534e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8005352:	2a01      	cmp	r2, #1
 8005354:	d101      	bne.n	800535a <ETH_SetMACConfig+0x106>
 8005356:	2208      	movs	r2, #8
 8005358:	e000      	b.n	800535c <ETH_SetMACConfig+0x108>
 800535a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800535c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800535e:	683a      	ldr	r2, [r7, #0]
 8005360:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8005364:	2a01      	cmp	r2, #1
 8005366:	d101      	bne.n	800536c <ETH_SetMACConfig+0x118>
 8005368:	2204      	movs	r2, #4
 800536a:	e000      	b.n	800536e <ETH_SetMACConfig+0x11a>
 800536c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800536e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8005370:	683a      	ldr	r2, [r7, #0]
 8005372:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8005376:	2a01      	cmp	r2, #1
 8005378:	d101      	bne.n	800537e <ETH_SetMACConfig+0x12a>
 800537a:	2202      	movs	r2, #2
 800537c:	e000      	b.n	8005380 <ETH_SetMACConfig+0x12c>
 800537e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005380:	4313      	orrs	r3, r2
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	4313      	orrs	r3, r2
 8005386:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005398:	2001      	movs	r0, #1
 800539a:	f7fe fc69 	bl	8003c70 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	619a      	str	r2, [r3, #24]
}
 80053a6:	bf00      	nop
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	ff20810f 	.word	0xff20810f

080053b4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	4b3d      	ldr	r3, [pc, #244]	; (80054c4 <ETH_SetDMAConfig+0x110>)
 80053ce:	4013      	ands	r3, r2
 80053d0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	7b1b      	ldrb	r3, [r3, #12]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d102      	bne.n	80053e0 <ETH_SetDMAConfig+0x2c>
 80053da:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80053de:	e000      	b.n	80053e2 <ETH_SetDMAConfig+0x2e>
 80053e0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	7b5b      	ldrb	r3, [r3, #13]
 80053e6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80053e8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80053ea:	683a      	ldr	r2, [r7, #0]
 80053ec:	7f52      	ldrb	r2, [r2, #29]
 80053ee:	2a00      	cmp	r2, #0
 80053f0:	d102      	bne.n	80053f8 <ETH_SetDMAConfig+0x44>
 80053f2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80053f6:	e000      	b.n	80053fa <ETH_SetDMAConfig+0x46>
 80053f8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80053fa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	7b9b      	ldrb	r3, [r3, #14]
 8005400:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8005402:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005408:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	7f1b      	ldrb	r3, [r3, #28]
 800540e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8005410:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	7f9b      	ldrb	r3, [r3, #30]
 8005416:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8005418:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800541e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005426:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005428:	4313      	orrs	r3, r2
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	4313      	orrs	r3, r2
 800542e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005438:	461a      	mov	r2, r3
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800544a:	2001      	movs	r0, #1
 800544c:	f7fe fc10 	bl	8003c70 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005458:	461a      	mov	r2, r3
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	791b      	ldrb	r3, [r3, #4]
 8005462:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005468:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800546e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005474:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800547c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800547e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005484:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8005486:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800548c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	6812      	ldr	r2, [r2, #0]
 8005492:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005496:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800549a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80054a8:	2001      	movs	r0, #1
 80054aa:	f7fe fbe1 	bl	8003c70 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054b6:	461a      	mov	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6013      	str	r3, [r2, #0]
}
 80054bc:	bf00      	nop
 80054be:	3710      	adds	r7, #16
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	f8de3f23 	.word	0xf8de3f23

080054c8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b0a6      	sub	sp, #152	; 0x98
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80054d0:	2301      	movs	r3, #1
 80054d2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80054d6:	2301      	movs	r3, #1
 80054d8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80054dc:	2300      	movs	r3, #0
 80054de:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80054e0:	2300      	movs	r3, #0
 80054e2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80054e6:	2301      	movs	r3, #1
 80054e8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80054ec:	2300      	movs	r3, #0
 80054ee:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80054f2:	2301      	movs	r3, #1
 80054f4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80054f8:	2300      	movs	r3, #0
 80054fa:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80054fe:	2300      	movs	r3, #0
 8005500:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005504:	2300      	movs	r3, #0
 8005506:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8005508:	2300      	movs	r3, #0
 800550a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800550e:	2300      	movs	r3, #0
 8005510:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8005512:	2300      	movs	r3, #0
 8005514:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8005518:	2300      	movs	r3, #0
 800551a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800551e:	2300      	movs	r3, #0
 8005520:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005524:	2300      	movs	r3, #0
 8005526:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800552a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800552e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005530:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005534:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005536:	2300      	movs	r3, #0
 8005538:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800553c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005540:	4619      	mov	r1, r3
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f7ff fe86 	bl	8005254 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8005548:	2301      	movs	r3, #1
 800554a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800554c:	2301      	movs	r3, #1
 800554e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8005550:	2301      	movs	r3, #1
 8005552:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8005556:	2301      	movs	r3, #1
 8005558:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800555a:	2300      	movs	r3, #0
 800555c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800555e:	2300      	movs	r3, #0
 8005560:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8005564:	2300      	movs	r3, #0
 8005566:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800556a:	2300      	movs	r3, #0
 800556c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800556e:	2301      	movs	r3, #1
 8005570:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005574:	2301      	movs	r3, #1
 8005576:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005578:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800557c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800557e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005582:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005584:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005588:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800558a:	2301      	movs	r3, #1
 800558c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8005590:	2300      	movs	r3, #0
 8005592:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8005594:	2300      	movs	r3, #0
 8005596:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005598:	f107 0308 	add.w	r3, r7, #8
 800559c:	4619      	mov	r1, r3
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f7ff ff08 	bl	80053b4 <ETH_SetDMAConfig>
}
 80055a4:	bf00      	nop
 80055a6:	3798      	adds	r7, #152	; 0x98
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b087      	sub	sp, #28
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	3305      	adds	r3, #5
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	021b      	lsls	r3, r3, #8
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	3204      	adds	r2, #4
 80055c4:	7812      	ldrb	r2, [r2, #0]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	4b11      	ldr	r3, [pc, #68]	; (8005614 <ETH_MACAddressConfig+0x68>)
 80055ce:	4413      	add	r3, r2
 80055d0:	461a      	mov	r2, r3
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	3303      	adds	r3, #3
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	061a      	lsls	r2, r3, #24
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	3302      	adds	r3, #2
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	041b      	lsls	r3, r3, #16
 80055e6:	431a      	orrs	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	3301      	adds	r3, #1
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	021b      	lsls	r3, r3, #8
 80055f0:	4313      	orrs	r3, r2
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	7812      	ldrb	r2, [r2, #0]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80055fa:	68ba      	ldr	r2, [r7, #8]
 80055fc:	4b06      	ldr	r3, [pc, #24]	; (8005618 <ETH_MACAddressConfig+0x6c>)
 80055fe:	4413      	add	r3, r2
 8005600:	461a      	mov	r2, r3
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	6013      	str	r3, [r2, #0]
}
 8005606:	bf00      	nop
 8005608:	371c      	adds	r7, #28
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	40028040 	.word	0x40028040
 8005618:	40028044 	.word	0x40028044

0800561c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800561c:	b480      	push	{r7}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005624:	2300      	movs	r3, #0
 8005626:	60fb      	str	r3, [r7, #12]
 8005628:	e03e      	b.n	80056a8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	68d9      	ldr	r1, [r3, #12]
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	4613      	mov	r3, r2
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4413      	add	r3, r2
 8005636:	00db      	lsls	r3, r3, #3
 8005638:	440b      	add	r3, r1
 800563a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	2200      	movs	r2, #0
 8005640:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	2200      	movs	r2, #0
 8005646:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	2200      	movs	r2, #0
 800564c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	2200      	movs	r2, #0
 8005652:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005654:	68b9      	ldr	r1, [r7, #8]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	3206      	adds	r2, #6
 800565c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2b02      	cmp	r3, #2
 8005670:	d80c      	bhi.n	800568c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	68d9      	ldr	r1, [r3, #12]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	1c5a      	adds	r2, r3, #1
 800567a:	4613      	mov	r3, r2
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	4413      	add	r3, r2
 8005680:	00db      	lsls	r3, r3, #3
 8005682:	440b      	add	r3, r1
 8005684:	461a      	mov	r2, r3
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	60da      	str	r2, [r3, #12]
 800568a:	e004      	b.n	8005696 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	461a      	mov	r2, r3
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	3301      	adds	r3, #1
 80056a6:	60fb      	str	r3, [r7, #12]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2b03      	cmp	r3, #3
 80056ac:	d9bd      	bls.n	800562a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	68da      	ldr	r2, [r3, #12]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056c0:	611a      	str	r2, [r3, #16]
}
 80056c2:	bf00      	nop
 80056c4:	3714      	adds	r7, #20
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80056ce:	b480      	push	{r7}
 80056d0:	b085      	sub	sp, #20
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80056d6:	2300      	movs	r3, #0
 80056d8:	60fb      	str	r3, [r7, #12]
 80056da:	e046      	b.n	800576a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6919      	ldr	r1, [r3, #16]
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	4613      	mov	r3, r2
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	4413      	add	r3, r2
 80056e8:	00db      	lsls	r3, r3, #3
 80056ea:	440b      	add	r3, r1
 80056ec:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	2200      	movs	r2, #0
 80056f2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	2200      	movs	r2, #0
 80056f8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	2200      	movs	r2, #0
 80056fe:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	2200      	movs	r2, #0
 8005704:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	2200      	movs	r2, #0
 800570a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	2200      	movs	r2, #0
 8005710:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005718:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8005720:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800572e:	68b9      	ldr	r1, [r7, #8]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	3212      	adds	r2, #18
 8005736:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2b02      	cmp	r3, #2
 800573e:	d80c      	bhi.n	800575a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6919      	ldr	r1, [r3, #16]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	1c5a      	adds	r2, r3, #1
 8005748:	4613      	mov	r3, r2
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	4413      	add	r3, r2
 800574e:	00db      	lsls	r3, r3, #3
 8005750:	440b      	add	r3, r1
 8005752:	461a      	mov	r2, r3
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	60da      	str	r2, [r3, #12]
 8005758:	e004      	b.n	8005764 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	461a      	mov	r2, r3
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	3301      	adds	r3, #1
 8005768:	60fb      	str	r3, [r7, #12]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2b03      	cmp	r3, #3
 800576e:	d9b5      	bls.n	80056dc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	691a      	ldr	r2, [r3, #16]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800579a:	60da      	str	r2, [r3, #12]
}
 800579c:	bf00      	nop
 800579e:	3714      	adds	r7, #20
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b089      	sub	sp, #36	; 0x24
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80057b2:	2300      	movs	r3, #0
 80057b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80057b6:	2300      	movs	r3, #0
 80057b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80057ba:	2300      	movs	r3, #0
 80057bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057be:	2300      	movs	r3, #0
 80057c0:	61fb      	str	r3, [r7, #28]
 80057c2:	e177      	b.n	8005ab4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80057c4:	2201      	movs	r2, #1
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	fa02 f303 	lsl.w	r3, r2, r3
 80057cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	4013      	ands	r3, r2
 80057d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	429a      	cmp	r2, r3
 80057de:	f040 8166 	bne.w	8005aae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f003 0303 	and.w	r3, r3, #3
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d005      	beq.n	80057fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d130      	bne.n	800585c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	2203      	movs	r2, #3
 8005806:	fa02 f303 	lsl.w	r3, r2, r3
 800580a:	43db      	mvns	r3, r3
 800580c:	69ba      	ldr	r2, [r7, #24]
 800580e:	4013      	ands	r3, r2
 8005810:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	68da      	ldr	r2, [r3, #12]
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	005b      	lsls	r3, r3, #1
 800581a:	fa02 f303 	lsl.w	r3, r2, r3
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	4313      	orrs	r3, r2
 8005822:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	69ba      	ldr	r2, [r7, #24]
 8005828:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005830:	2201      	movs	r2, #1
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	fa02 f303 	lsl.w	r3, r2, r3
 8005838:	43db      	mvns	r3, r3
 800583a:	69ba      	ldr	r2, [r7, #24]
 800583c:	4013      	ands	r3, r2
 800583e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	091b      	lsrs	r3, r3, #4
 8005846:	f003 0201 	and.w	r2, r3, #1
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	fa02 f303 	lsl.w	r3, r2, r3
 8005850:	69ba      	ldr	r2, [r7, #24]
 8005852:	4313      	orrs	r3, r2
 8005854:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	69ba      	ldr	r2, [r7, #24]
 800585a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f003 0303 	and.w	r3, r3, #3
 8005864:	2b03      	cmp	r3, #3
 8005866:	d017      	beq.n	8005898 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	005b      	lsls	r3, r3, #1
 8005872:	2203      	movs	r2, #3
 8005874:	fa02 f303 	lsl.w	r3, r2, r3
 8005878:	43db      	mvns	r3, r3
 800587a:	69ba      	ldr	r2, [r7, #24]
 800587c:	4013      	ands	r3, r2
 800587e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	689a      	ldr	r2, [r3, #8]
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	005b      	lsls	r3, r3, #1
 8005888:	fa02 f303 	lsl.w	r3, r2, r3
 800588c:	69ba      	ldr	r2, [r7, #24]
 800588e:	4313      	orrs	r3, r2
 8005890:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	69ba      	ldr	r2, [r7, #24]
 8005896:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f003 0303 	and.w	r3, r3, #3
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d123      	bne.n	80058ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	08da      	lsrs	r2, r3, #3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	3208      	adds	r2, #8
 80058ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	f003 0307 	and.w	r3, r3, #7
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	220f      	movs	r2, #15
 80058bc:	fa02 f303 	lsl.w	r3, r2, r3
 80058c0:	43db      	mvns	r3, r3
 80058c2:	69ba      	ldr	r2, [r7, #24]
 80058c4:	4013      	ands	r3, r2
 80058c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	691a      	ldr	r2, [r3, #16]
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	f003 0307 	and.w	r3, r3, #7
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	fa02 f303 	lsl.w	r3, r2, r3
 80058d8:	69ba      	ldr	r2, [r7, #24]
 80058da:	4313      	orrs	r3, r2
 80058dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	08da      	lsrs	r2, r3, #3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	3208      	adds	r2, #8
 80058e6:	69b9      	ldr	r1, [r7, #24]
 80058e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	005b      	lsls	r3, r3, #1
 80058f6:	2203      	movs	r2, #3
 80058f8:	fa02 f303 	lsl.w	r3, r2, r3
 80058fc:	43db      	mvns	r3, r3
 80058fe:	69ba      	ldr	r2, [r7, #24]
 8005900:	4013      	ands	r3, r2
 8005902:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	f003 0203 	and.w	r2, r3, #3
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	005b      	lsls	r3, r3, #1
 8005910:	fa02 f303 	lsl.w	r3, r2, r3
 8005914:	69ba      	ldr	r2, [r7, #24]
 8005916:	4313      	orrs	r3, r2
 8005918:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	69ba      	ldr	r2, [r7, #24]
 800591e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005928:	2b00      	cmp	r3, #0
 800592a:	f000 80c0 	beq.w	8005aae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800592e:	2300      	movs	r3, #0
 8005930:	60fb      	str	r3, [r7, #12]
 8005932:	4b66      	ldr	r3, [pc, #408]	; (8005acc <HAL_GPIO_Init+0x324>)
 8005934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005936:	4a65      	ldr	r2, [pc, #404]	; (8005acc <HAL_GPIO_Init+0x324>)
 8005938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800593c:	6453      	str	r3, [r2, #68]	; 0x44
 800593e:	4b63      	ldr	r3, [pc, #396]	; (8005acc <HAL_GPIO_Init+0x324>)
 8005940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005946:	60fb      	str	r3, [r7, #12]
 8005948:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800594a:	4a61      	ldr	r2, [pc, #388]	; (8005ad0 <HAL_GPIO_Init+0x328>)
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	089b      	lsrs	r3, r3, #2
 8005950:	3302      	adds	r3, #2
 8005952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005956:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	f003 0303 	and.w	r3, r3, #3
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	220f      	movs	r2, #15
 8005962:	fa02 f303 	lsl.w	r3, r2, r3
 8005966:	43db      	mvns	r3, r3
 8005968:	69ba      	ldr	r2, [r7, #24]
 800596a:	4013      	ands	r3, r2
 800596c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a58      	ldr	r2, [pc, #352]	; (8005ad4 <HAL_GPIO_Init+0x32c>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d037      	beq.n	80059e6 <HAL_GPIO_Init+0x23e>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a57      	ldr	r2, [pc, #348]	; (8005ad8 <HAL_GPIO_Init+0x330>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d031      	beq.n	80059e2 <HAL_GPIO_Init+0x23a>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a56      	ldr	r2, [pc, #344]	; (8005adc <HAL_GPIO_Init+0x334>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d02b      	beq.n	80059de <HAL_GPIO_Init+0x236>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a55      	ldr	r2, [pc, #340]	; (8005ae0 <HAL_GPIO_Init+0x338>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d025      	beq.n	80059da <HAL_GPIO_Init+0x232>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a54      	ldr	r2, [pc, #336]	; (8005ae4 <HAL_GPIO_Init+0x33c>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d01f      	beq.n	80059d6 <HAL_GPIO_Init+0x22e>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a53      	ldr	r2, [pc, #332]	; (8005ae8 <HAL_GPIO_Init+0x340>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d019      	beq.n	80059d2 <HAL_GPIO_Init+0x22a>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a52      	ldr	r2, [pc, #328]	; (8005aec <HAL_GPIO_Init+0x344>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d013      	beq.n	80059ce <HAL_GPIO_Init+0x226>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a51      	ldr	r2, [pc, #324]	; (8005af0 <HAL_GPIO_Init+0x348>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d00d      	beq.n	80059ca <HAL_GPIO_Init+0x222>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a50      	ldr	r2, [pc, #320]	; (8005af4 <HAL_GPIO_Init+0x34c>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d007      	beq.n	80059c6 <HAL_GPIO_Init+0x21e>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a4f      	ldr	r2, [pc, #316]	; (8005af8 <HAL_GPIO_Init+0x350>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d101      	bne.n	80059c2 <HAL_GPIO_Init+0x21a>
 80059be:	2309      	movs	r3, #9
 80059c0:	e012      	b.n	80059e8 <HAL_GPIO_Init+0x240>
 80059c2:	230a      	movs	r3, #10
 80059c4:	e010      	b.n	80059e8 <HAL_GPIO_Init+0x240>
 80059c6:	2308      	movs	r3, #8
 80059c8:	e00e      	b.n	80059e8 <HAL_GPIO_Init+0x240>
 80059ca:	2307      	movs	r3, #7
 80059cc:	e00c      	b.n	80059e8 <HAL_GPIO_Init+0x240>
 80059ce:	2306      	movs	r3, #6
 80059d0:	e00a      	b.n	80059e8 <HAL_GPIO_Init+0x240>
 80059d2:	2305      	movs	r3, #5
 80059d4:	e008      	b.n	80059e8 <HAL_GPIO_Init+0x240>
 80059d6:	2304      	movs	r3, #4
 80059d8:	e006      	b.n	80059e8 <HAL_GPIO_Init+0x240>
 80059da:	2303      	movs	r3, #3
 80059dc:	e004      	b.n	80059e8 <HAL_GPIO_Init+0x240>
 80059de:	2302      	movs	r3, #2
 80059e0:	e002      	b.n	80059e8 <HAL_GPIO_Init+0x240>
 80059e2:	2301      	movs	r3, #1
 80059e4:	e000      	b.n	80059e8 <HAL_GPIO_Init+0x240>
 80059e6:	2300      	movs	r3, #0
 80059e8:	69fa      	ldr	r2, [r7, #28]
 80059ea:	f002 0203 	and.w	r2, r2, #3
 80059ee:	0092      	lsls	r2, r2, #2
 80059f0:	4093      	lsls	r3, r2
 80059f2:	69ba      	ldr	r2, [r7, #24]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80059f8:	4935      	ldr	r1, [pc, #212]	; (8005ad0 <HAL_GPIO_Init+0x328>)
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	089b      	lsrs	r3, r3, #2
 80059fe:	3302      	adds	r3, #2
 8005a00:	69ba      	ldr	r2, [r7, #24]
 8005a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a06:	4b3d      	ldr	r3, [pc, #244]	; (8005afc <HAL_GPIO_Init+0x354>)
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	43db      	mvns	r3, r3
 8005a10:	69ba      	ldr	r2, [r7, #24]
 8005a12:	4013      	ands	r3, r2
 8005a14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d003      	beq.n	8005a2a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005a22:	69ba      	ldr	r2, [r7, #24]
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005a2a:	4a34      	ldr	r2, [pc, #208]	; (8005afc <HAL_GPIO_Init+0x354>)
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a30:	4b32      	ldr	r3, [pc, #200]	; (8005afc <HAL_GPIO_Init+0x354>)
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	43db      	mvns	r3, r3
 8005a3a:	69ba      	ldr	r2, [r7, #24]
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d003      	beq.n	8005a54 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005a4c:	69ba      	ldr	r2, [r7, #24]
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a54:	4a29      	ldr	r2, [pc, #164]	; (8005afc <HAL_GPIO_Init+0x354>)
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005a5a:	4b28      	ldr	r3, [pc, #160]	; (8005afc <HAL_GPIO_Init+0x354>)
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	43db      	mvns	r3, r3
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	4013      	ands	r3, r2
 8005a68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d003      	beq.n	8005a7e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005a76:	69ba      	ldr	r2, [r7, #24]
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005a7e:	4a1f      	ldr	r2, [pc, #124]	; (8005afc <HAL_GPIO_Init+0x354>)
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a84:	4b1d      	ldr	r3, [pc, #116]	; (8005afc <HAL_GPIO_Init+0x354>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	43db      	mvns	r3, r3
 8005a8e:	69ba      	ldr	r2, [r7, #24]
 8005a90:	4013      	ands	r3, r2
 8005a92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d003      	beq.n	8005aa8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005aa0:	69ba      	ldr	r2, [r7, #24]
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005aa8:	4a14      	ldr	r2, [pc, #80]	; (8005afc <HAL_GPIO_Init+0x354>)
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	61fb      	str	r3, [r7, #28]
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	2b0f      	cmp	r3, #15
 8005ab8:	f67f ae84 	bls.w	80057c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005abc:	bf00      	nop
 8005abe:	bf00      	nop
 8005ac0:	3724      	adds	r7, #36	; 0x24
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	40023800 	.word	0x40023800
 8005ad0:	40013800 	.word	0x40013800
 8005ad4:	40020000 	.word	0x40020000
 8005ad8:	40020400 	.word	0x40020400
 8005adc:	40020800 	.word	0x40020800
 8005ae0:	40020c00 	.word	0x40020c00
 8005ae4:	40021000 	.word	0x40021000
 8005ae8:	40021400 	.word	0x40021400
 8005aec:	40021800 	.word	0x40021800
 8005af0:	40021c00 	.word	0x40021c00
 8005af4:	40022000 	.word	0x40022000
 8005af8:	40022400 	.word	0x40022400
 8005afc:	40013c00 	.word	0x40013c00

08005b00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	460b      	mov	r3, r1
 8005b0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	691a      	ldr	r2, [r3, #16]
 8005b10:	887b      	ldrh	r3, [r7, #2]
 8005b12:	4013      	ands	r3, r2
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d002      	beq.n	8005b1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	73fb      	strb	r3, [r7, #15]
 8005b1c:	e001      	b.n	8005b22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3714      	adds	r7, #20
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	460b      	mov	r3, r1
 8005b3a:	807b      	strh	r3, [r7, #2]
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005b40:	787b      	ldrb	r3, [r7, #1]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d003      	beq.n	8005b4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b46:	887a      	ldrh	r2, [r7, #2]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005b4c:	e003      	b.n	8005b56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005b4e:	887b      	ldrh	r3, [r7, #2]
 8005b50:	041a      	lsls	r2, r3, #16
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	619a      	str	r2, [r3, #24]
}
 8005b56:	bf00      	nop
 8005b58:	370c      	adds	r7, #12
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr

08005b62 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b086      	sub	sp, #24
 8005b66:	af02      	add	r7, sp, #8
 8005b68:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d101      	bne.n	8005b74 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e101      	b.n	8005d78 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d106      	bne.n	8005b94 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f7fd fb72 	bl	8003278 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2203      	movs	r2, #3
 8005b98:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ba2:	d102      	bne.n	8005baa <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f003 f962 	bl	8008e78 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6818      	ldr	r0, [r3, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	7c1a      	ldrb	r2, [r3, #16]
 8005bbc:	f88d 2000 	strb.w	r2, [sp]
 8005bc0:	3304      	adds	r3, #4
 8005bc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005bc4:	f003 f8f4 	bl	8008db0 <USB_CoreInit>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d005      	beq.n	8005bda <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2202      	movs	r2, #2
 8005bd2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e0ce      	b.n	8005d78 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2100      	movs	r1, #0
 8005be0:	4618      	mov	r0, r3
 8005be2:	f003 f95a 	bl	8008e9a <USB_SetCurrentMode>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d005      	beq.n	8005bf8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2202      	movs	r2, #2
 8005bf0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e0bf      	b.n	8005d78 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	73fb      	strb	r3, [r7, #15]
 8005bfc:	e04a      	b.n	8005c94 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005bfe:	7bfa      	ldrb	r2, [r7, #15]
 8005c00:	6879      	ldr	r1, [r7, #4]
 8005c02:	4613      	mov	r3, r2
 8005c04:	00db      	lsls	r3, r3, #3
 8005c06:	4413      	add	r3, r2
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	440b      	add	r3, r1
 8005c0c:	3315      	adds	r3, #21
 8005c0e:	2201      	movs	r2, #1
 8005c10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005c12:	7bfa      	ldrb	r2, [r7, #15]
 8005c14:	6879      	ldr	r1, [r7, #4]
 8005c16:	4613      	mov	r3, r2
 8005c18:	00db      	lsls	r3, r3, #3
 8005c1a:	4413      	add	r3, r2
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	440b      	add	r3, r1
 8005c20:	3314      	adds	r3, #20
 8005c22:	7bfa      	ldrb	r2, [r7, #15]
 8005c24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005c26:	7bfa      	ldrb	r2, [r7, #15]
 8005c28:	7bfb      	ldrb	r3, [r7, #15]
 8005c2a:	b298      	uxth	r0, r3
 8005c2c:	6879      	ldr	r1, [r7, #4]
 8005c2e:	4613      	mov	r3, r2
 8005c30:	00db      	lsls	r3, r3, #3
 8005c32:	4413      	add	r3, r2
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	440b      	add	r3, r1
 8005c38:	332e      	adds	r3, #46	; 0x2e
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005c3e:	7bfa      	ldrb	r2, [r7, #15]
 8005c40:	6879      	ldr	r1, [r7, #4]
 8005c42:	4613      	mov	r3, r2
 8005c44:	00db      	lsls	r3, r3, #3
 8005c46:	4413      	add	r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	440b      	add	r3, r1
 8005c4c:	3318      	adds	r3, #24
 8005c4e:	2200      	movs	r2, #0
 8005c50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005c52:	7bfa      	ldrb	r2, [r7, #15]
 8005c54:	6879      	ldr	r1, [r7, #4]
 8005c56:	4613      	mov	r3, r2
 8005c58:	00db      	lsls	r3, r3, #3
 8005c5a:	4413      	add	r3, r2
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	440b      	add	r3, r1
 8005c60:	331c      	adds	r3, #28
 8005c62:	2200      	movs	r2, #0
 8005c64:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005c66:	7bfa      	ldrb	r2, [r7, #15]
 8005c68:	6879      	ldr	r1, [r7, #4]
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	00db      	lsls	r3, r3, #3
 8005c6e:	4413      	add	r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	440b      	add	r3, r1
 8005c74:	3320      	adds	r3, #32
 8005c76:	2200      	movs	r2, #0
 8005c78:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005c7a:	7bfa      	ldrb	r2, [r7, #15]
 8005c7c:	6879      	ldr	r1, [r7, #4]
 8005c7e:	4613      	mov	r3, r2
 8005c80:	00db      	lsls	r3, r3, #3
 8005c82:	4413      	add	r3, r2
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	440b      	add	r3, r1
 8005c88:	3324      	adds	r3, #36	; 0x24
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c8e:	7bfb      	ldrb	r3, [r7, #15]
 8005c90:	3301      	adds	r3, #1
 8005c92:	73fb      	strb	r3, [r7, #15]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	791b      	ldrb	r3, [r3, #4]
 8005c98:	7bfa      	ldrb	r2, [r7, #15]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d3af      	bcc.n	8005bfe <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	73fb      	strb	r3, [r7, #15]
 8005ca2:	e044      	b.n	8005d2e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005ca4:	7bfa      	ldrb	r2, [r7, #15]
 8005ca6:	6879      	ldr	r1, [r7, #4]
 8005ca8:	4613      	mov	r3, r2
 8005caa:	00db      	lsls	r3, r3, #3
 8005cac:	4413      	add	r3, r2
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	440b      	add	r3, r1
 8005cb2:	f203 2355 	addw	r3, r3, #597	; 0x255
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005cba:	7bfa      	ldrb	r2, [r7, #15]
 8005cbc:	6879      	ldr	r1, [r7, #4]
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	00db      	lsls	r3, r3, #3
 8005cc2:	4413      	add	r3, r2
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	440b      	add	r3, r1
 8005cc8:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8005ccc:	7bfa      	ldrb	r2, [r7, #15]
 8005cce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005cd0:	7bfa      	ldrb	r2, [r7, #15]
 8005cd2:	6879      	ldr	r1, [r7, #4]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	00db      	lsls	r3, r3, #3
 8005cd8:	4413      	add	r3, r2
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	440b      	add	r3, r1
 8005cde:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005ce6:	7bfa      	ldrb	r2, [r7, #15]
 8005ce8:	6879      	ldr	r1, [r7, #4]
 8005cea:	4613      	mov	r3, r2
 8005cec:	00db      	lsls	r3, r3, #3
 8005cee:	4413      	add	r3, r2
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	440b      	add	r3, r1
 8005cf4:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005cfc:	7bfa      	ldrb	r2, [r7, #15]
 8005cfe:	6879      	ldr	r1, [r7, #4]
 8005d00:	4613      	mov	r3, r2
 8005d02:	00db      	lsls	r3, r3, #3
 8005d04:	4413      	add	r3, r2
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	440b      	add	r3, r1
 8005d0a:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8005d0e:	2200      	movs	r2, #0
 8005d10:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005d12:	7bfa      	ldrb	r2, [r7, #15]
 8005d14:	6879      	ldr	r1, [r7, #4]
 8005d16:	4613      	mov	r3, r2
 8005d18:	00db      	lsls	r3, r3, #3
 8005d1a:	4413      	add	r3, r2
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	440b      	add	r3, r1
 8005d20:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8005d24:	2200      	movs	r2, #0
 8005d26:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d28:	7bfb      	ldrb	r3, [r7, #15]
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	73fb      	strb	r3, [r7, #15]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	791b      	ldrb	r3, [r3, #4]
 8005d32:	7bfa      	ldrb	r2, [r7, #15]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d3b5      	bcc.n	8005ca4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6818      	ldr	r0, [r3, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	7c1a      	ldrb	r2, [r3, #16]
 8005d40:	f88d 2000 	strb.w	r2, [sp]
 8005d44:	3304      	adds	r3, #4
 8005d46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d48:	f003 f8f4 	bl	8008f34 <USB_DevInit>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d005      	beq.n	8005d5e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2202      	movs	r2, #2
 8005d56:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e00c      	b.n	8005d78 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4618      	mov	r0, r3
 8005d72:	f003 fabc 	bl	80092ee <USB_DevDisconnect>

  return HAL_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3710      	adds	r7, #16
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b086      	sub	sp, #24
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d101      	bne.n	8005d92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e267      	b.n	8006262 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 0301 	and.w	r3, r3, #1
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d075      	beq.n	8005e8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d9e:	4b88      	ldr	r3, [pc, #544]	; (8005fc0 <HAL_RCC_OscConfig+0x240>)
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f003 030c 	and.w	r3, r3, #12
 8005da6:	2b04      	cmp	r3, #4
 8005da8:	d00c      	beq.n	8005dc4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005daa:	4b85      	ldr	r3, [pc, #532]	; (8005fc0 <HAL_RCC_OscConfig+0x240>)
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005db2:	2b08      	cmp	r3, #8
 8005db4:	d112      	bne.n	8005ddc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005db6:	4b82      	ldr	r3, [pc, #520]	; (8005fc0 <HAL_RCC_OscConfig+0x240>)
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dc2:	d10b      	bne.n	8005ddc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dc4:	4b7e      	ldr	r3, [pc, #504]	; (8005fc0 <HAL_RCC_OscConfig+0x240>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d05b      	beq.n	8005e88 <HAL_RCC_OscConfig+0x108>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d157      	bne.n	8005e88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e242      	b.n	8006262 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005de4:	d106      	bne.n	8005df4 <HAL_RCC_OscConfig+0x74>
 8005de6:	4b76      	ldr	r3, [pc, #472]	; (8005fc0 <HAL_RCC_OscConfig+0x240>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a75      	ldr	r2, [pc, #468]	; (8005fc0 <HAL_RCC_OscConfig+0x240>)
 8005dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005df0:	6013      	str	r3, [r2, #0]
 8005df2:	e01d      	b.n	8005e30 <HAL_RCC_OscConfig+0xb0>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005dfc:	d10c      	bne.n	8005e18 <HAL_RCC_OscConfig+0x98>
 8005dfe:	4b70      	ldr	r3, [pc, #448]	; (8005fc0 <HAL_RCC_OscConfig+0x240>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a6f      	ldr	r2, [pc, #444]	; (8005fc0 <HAL_RCC_OscConfig+0x240>)
 8005e04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e08:	6013      	str	r3, [r2, #0]
 8005e0a:	4b6d      	ldr	r3, [pc, #436]	; (8005fc0 <HAL_RCC_OscConfig+0x240>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a6c      	ldr	r2, [pc, #432]	; (8005fc0 <HAL_RCC_OscConfig+0x240>)
 8005e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e14:	6013      	str	r3, [r2, #0]
 8005e16:	e00b      	b.n	8005e30 <HAL_RCC_OscConfig+0xb0>
 8005e18:	4b69      	ldr	r3, [pc, #420]	; (8005fc0 <HAL_RCC_OscConfig+0x240>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a68      	ldr	r2, [pc, #416]	; (8005fc0 <HAL_RCC_OscConfig+0x240>)
 8005e1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e22:	6013      	str	r3, [r2, #0]
 8005e24:	4b66      	ldr	r3, [pc, #408]	; (8005fc0 <HAL_RCC_OscConfig+0x240>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a65      	ldr	r2, [pc, #404]	; (8005fc0 <HAL_RCC_OscConfig+0x240>)
 8005e2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d013      	beq.n	8005e60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e38:	f7fd ff0e 	bl	8003c58 <HAL_GetTick>
 8005e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e3e:	e008      	b.n	8005e52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e40:	f7fd ff0a 	bl	8003c58 <HAL_GetTick>
 8005e44:	4602      	mov	r2, r0
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	2b64      	cmp	r3, #100	; 0x64
 8005e4c:	d901      	bls.n	8005e52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e207      	b.n	8006262 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e52:	4b5b      	ldr	r3, [pc, #364]	; (8005fc0 <HAL_RCC_OscConfig+0x240>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d0f0      	beq.n	8005e40 <HAL_RCC_OscConfig+0xc0>
 8005e5e:	e014      	b.n	8005e8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e60:	f7fd fefa 	bl	8003c58 <HAL_GetTick>
 8005e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e66:	e008      	b.n	8005e7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e68:	f7fd fef6 	bl	8003c58 <HAL_GetTick>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	2b64      	cmp	r3, #100	; 0x64
 8005e74:	d901      	bls.n	8005e7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e1f3      	b.n	8006262 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e7a:	4b51      	ldr	r3, [pc, #324]	; (8005fc0 <HAL_RCC_OscConfig+0x240>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d1f0      	bne.n	8005e68 <HAL_RCC_OscConfig+0xe8>
 8005e86:	e000      	b.n	8005e8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0302 	and.w	r3, r3, #2
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d063      	beq.n	8005f5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e96:	4b4a      	ldr	r3, [pc, #296]	; (8005fc0 <HAL_RCC_OscConfig+0x240>)
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	f003 030c 	and.w	r3, r3, #12
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00b      	beq.n	8005eba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ea2:	4b47      	ldr	r3, [pc, #284]	; (8005fc0 <HAL_RCC_OscConfig+0x240>)
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005eaa:	2b08      	cmp	r3, #8
 8005eac:	d11c      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005eae:	4b44      	ldr	r3, [pc, #272]	; (8005fc0 <HAL_RCC_OscConfig+0x240>)
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d116      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005eba:	4b41      	ldr	r3, [pc, #260]	; (8005fc0 <HAL_RCC_OscConfig+0x240>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 0302 	and.w	r3, r3, #2
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d005      	beq.n	8005ed2 <HAL_RCC_OscConfig+0x152>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d001      	beq.n	8005ed2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e1c7      	b.n	8006262 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ed2:	4b3b      	ldr	r3, [pc, #236]	; (8005fc0 <HAL_RCC_OscConfig+0x240>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	00db      	lsls	r3, r3, #3
 8005ee0:	4937      	ldr	r1, [pc, #220]	; (8005fc0 <HAL_RCC_OscConfig+0x240>)
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ee6:	e03a      	b.n	8005f5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d020      	beq.n	8005f32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ef0:	4b34      	ldr	r3, [pc, #208]	; (8005fc4 <HAL_RCC_OscConfig+0x244>)
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ef6:	f7fd feaf 	bl	8003c58 <HAL_GetTick>
 8005efa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005efc:	e008      	b.n	8005f10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005efe:	f7fd feab 	bl	8003c58 <HAL_GetTick>
 8005f02:	4602      	mov	r2, r0
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d901      	bls.n	8005f10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	e1a8      	b.n	8006262 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f10:	4b2b      	ldr	r3, [pc, #172]	; (8005fc0 <HAL_RCC_OscConfig+0x240>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0302 	and.w	r3, r3, #2
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d0f0      	beq.n	8005efe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f1c:	4b28      	ldr	r3, [pc, #160]	; (8005fc0 <HAL_RCC_OscConfig+0x240>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	00db      	lsls	r3, r3, #3
 8005f2a:	4925      	ldr	r1, [pc, #148]	; (8005fc0 <HAL_RCC_OscConfig+0x240>)
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	600b      	str	r3, [r1, #0]
 8005f30:	e015      	b.n	8005f5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f32:	4b24      	ldr	r3, [pc, #144]	; (8005fc4 <HAL_RCC_OscConfig+0x244>)
 8005f34:	2200      	movs	r2, #0
 8005f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f38:	f7fd fe8e 	bl	8003c58 <HAL_GetTick>
 8005f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f3e:	e008      	b.n	8005f52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f40:	f7fd fe8a 	bl	8003c58 <HAL_GetTick>
 8005f44:	4602      	mov	r2, r0
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d901      	bls.n	8005f52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005f4e:	2303      	movs	r3, #3
 8005f50:	e187      	b.n	8006262 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f52:	4b1b      	ldr	r3, [pc, #108]	; (8005fc0 <HAL_RCC_OscConfig+0x240>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 0302 	and.w	r3, r3, #2
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1f0      	bne.n	8005f40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0308 	and.w	r3, r3, #8
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d036      	beq.n	8005fd8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	695b      	ldr	r3, [r3, #20]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d016      	beq.n	8005fa0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f72:	4b15      	ldr	r3, [pc, #84]	; (8005fc8 <HAL_RCC_OscConfig+0x248>)
 8005f74:	2201      	movs	r2, #1
 8005f76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f78:	f7fd fe6e 	bl	8003c58 <HAL_GetTick>
 8005f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f7e:	e008      	b.n	8005f92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f80:	f7fd fe6a 	bl	8003c58 <HAL_GetTick>
 8005f84:	4602      	mov	r2, r0
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	d901      	bls.n	8005f92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f8e:	2303      	movs	r3, #3
 8005f90:	e167      	b.n	8006262 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f92:	4b0b      	ldr	r3, [pc, #44]	; (8005fc0 <HAL_RCC_OscConfig+0x240>)
 8005f94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f96:	f003 0302 	and.w	r3, r3, #2
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d0f0      	beq.n	8005f80 <HAL_RCC_OscConfig+0x200>
 8005f9e:	e01b      	b.n	8005fd8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fa0:	4b09      	ldr	r3, [pc, #36]	; (8005fc8 <HAL_RCC_OscConfig+0x248>)
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fa6:	f7fd fe57 	bl	8003c58 <HAL_GetTick>
 8005faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fac:	e00e      	b.n	8005fcc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fae:	f7fd fe53 	bl	8003c58 <HAL_GetTick>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	d907      	bls.n	8005fcc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	e150      	b.n	8006262 <HAL_RCC_OscConfig+0x4e2>
 8005fc0:	40023800 	.word	0x40023800
 8005fc4:	42470000 	.word	0x42470000
 8005fc8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fcc:	4b88      	ldr	r3, [pc, #544]	; (80061f0 <HAL_RCC_OscConfig+0x470>)
 8005fce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fd0:	f003 0302 	and.w	r3, r3, #2
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d1ea      	bne.n	8005fae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0304 	and.w	r3, r3, #4
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f000 8097 	beq.w	8006114 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fea:	4b81      	ldr	r3, [pc, #516]	; (80061f0 <HAL_RCC_OscConfig+0x470>)
 8005fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d10f      	bne.n	8006016 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	60bb      	str	r3, [r7, #8]
 8005ffa:	4b7d      	ldr	r3, [pc, #500]	; (80061f0 <HAL_RCC_OscConfig+0x470>)
 8005ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffe:	4a7c      	ldr	r2, [pc, #496]	; (80061f0 <HAL_RCC_OscConfig+0x470>)
 8006000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006004:	6413      	str	r3, [r2, #64]	; 0x40
 8006006:	4b7a      	ldr	r3, [pc, #488]	; (80061f0 <HAL_RCC_OscConfig+0x470>)
 8006008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800600e:	60bb      	str	r3, [r7, #8]
 8006010:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006012:	2301      	movs	r3, #1
 8006014:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006016:	4b77      	ldr	r3, [pc, #476]	; (80061f4 <HAL_RCC_OscConfig+0x474>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800601e:	2b00      	cmp	r3, #0
 8006020:	d118      	bne.n	8006054 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006022:	4b74      	ldr	r3, [pc, #464]	; (80061f4 <HAL_RCC_OscConfig+0x474>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a73      	ldr	r2, [pc, #460]	; (80061f4 <HAL_RCC_OscConfig+0x474>)
 8006028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800602c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800602e:	f7fd fe13 	bl	8003c58 <HAL_GetTick>
 8006032:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006034:	e008      	b.n	8006048 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006036:	f7fd fe0f 	bl	8003c58 <HAL_GetTick>
 800603a:	4602      	mov	r2, r0
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	2b02      	cmp	r3, #2
 8006042:	d901      	bls.n	8006048 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006044:	2303      	movs	r3, #3
 8006046:	e10c      	b.n	8006262 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006048:	4b6a      	ldr	r3, [pc, #424]	; (80061f4 <HAL_RCC_OscConfig+0x474>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006050:	2b00      	cmp	r3, #0
 8006052:	d0f0      	beq.n	8006036 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d106      	bne.n	800606a <HAL_RCC_OscConfig+0x2ea>
 800605c:	4b64      	ldr	r3, [pc, #400]	; (80061f0 <HAL_RCC_OscConfig+0x470>)
 800605e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006060:	4a63      	ldr	r2, [pc, #396]	; (80061f0 <HAL_RCC_OscConfig+0x470>)
 8006062:	f043 0301 	orr.w	r3, r3, #1
 8006066:	6713      	str	r3, [r2, #112]	; 0x70
 8006068:	e01c      	b.n	80060a4 <HAL_RCC_OscConfig+0x324>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	2b05      	cmp	r3, #5
 8006070:	d10c      	bne.n	800608c <HAL_RCC_OscConfig+0x30c>
 8006072:	4b5f      	ldr	r3, [pc, #380]	; (80061f0 <HAL_RCC_OscConfig+0x470>)
 8006074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006076:	4a5e      	ldr	r2, [pc, #376]	; (80061f0 <HAL_RCC_OscConfig+0x470>)
 8006078:	f043 0304 	orr.w	r3, r3, #4
 800607c:	6713      	str	r3, [r2, #112]	; 0x70
 800607e:	4b5c      	ldr	r3, [pc, #368]	; (80061f0 <HAL_RCC_OscConfig+0x470>)
 8006080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006082:	4a5b      	ldr	r2, [pc, #364]	; (80061f0 <HAL_RCC_OscConfig+0x470>)
 8006084:	f043 0301 	orr.w	r3, r3, #1
 8006088:	6713      	str	r3, [r2, #112]	; 0x70
 800608a:	e00b      	b.n	80060a4 <HAL_RCC_OscConfig+0x324>
 800608c:	4b58      	ldr	r3, [pc, #352]	; (80061f0 <HAL_RCC_OscConfig+0x470>)
 800608e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006090:	4a57      	ldr	r2, [pc, #348]	; (80061f0 <HAL_RCC_OscConfig+0x470>)
 8006092:	f023 0301 	bic.w	r3, r3, #1
 8006096:	6713      	str	r3, [r2, #112]	; 0x70
 8006098:	4b55      	ldr	r3, [pc, #340]	; (80061f0 <HAL_RCC_OscConfig+0x470>)
 800609a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800609c:	4a54      	ldr	r2, [pc, #336]	; (80061f0 <HAL_RCC_OscConfig+0x470>)
 800609e:	f023 0304 	bic.w	r3, r3, #4
 80060a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d015      	beq.n	80060d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060ac:	f7fd fdd4 	bl	8003c58 <HAL_GetTick>
 80060b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060b2:	e00a      	b.n	80060ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060b4:	f7fd fdd0 	bl	8003c58 <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	f241 3288 	movw	r2, #5000	; 0x1388
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d901      	bls.n	80060ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e0cb      	b.n	8006262 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060ca:	4b49      	ldr	r3, [pc, #292]	; (80061f0 <HAL_RCC_OscConfig+0x470>)
 80060cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ce:	f003 0302 	and.w	r3, r3, #2
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d0ee      	beq.n	80060b4 <HAL_RCC_OscConfig+0x334>
 80060d6:	e014      	b.n	8006102 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060d8:	f7fd fdbe 	bl	8003c58 <HAL_GetTick>
 80060dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060de:	e00a      	b.n	80060f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060e0:	f7fd fdba 	bl	8003c58 <HAL_GetTick>
 80060e4:	4602      	mov	r2, r0
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d901      	bls.n	80060f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e0b5      	b.n	8006262 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060f6:	4b3e      	ldr	r3, [pc, #248]	; (80061f0 <HAL_RCC_OscConfig+0x470>)
 80060f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060fa:	f003 0302 	and.w	r3, r3, #2
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1ee      	bne.n	80060e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006102:	7dfb      	ldrb	r3, [r7, #23]
 8006104:	2b01      	cmp	r3, #1
 8006106:	d105      	bne.n	8006114 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006108:	4b39      	ldr	r3, [pc, #228]	; (80061f0 <HAL_RCC_OscConfig+0x470>)
 800610a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610c:	4a38      	ldr	r2, [pc, #224]	; (80061f0 <HAL_RCC_OscConfig+0x470>)
 800610e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006112:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	2b00      	cmp	r3, #0
 800611a:	f000 80a1 	beq.w	8006260 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800611e:	4b34      	ldr	r3, [pc, #208]	; (80061f0 <HAL_RCC_OscConfig+0x470>)
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	f003 030c 	and.w	r3, r3, #12
 8006126:	2b08      	cmp	r3, #8
 8006128:	d05c      	beq.n	80061e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	2b02      	cmp	r3, #2
 8006130:	d141      	bne.n	80061b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006132:	4b31      	ldr	r3, [pc, #196]	; (80061f8 <HAL_RCC_OscConfig+0x478>)
 8006134:	2200      	movs	r2, #0
 8006136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006138:	f7fd fd8e 	bl	8003c58 <HAL_GetTick>
 800613c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800613e:	e008      	b.n	8006152 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006140:	f7fd fd8a 	bl	8003c58 <HAL_GetTick>
 8006144:	4602      	mov	r2, r0
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	2b02      	cmp	r3, #2
 800614c:	d901      	bls.n	8006152 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e087      	b.n	8006262 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006152:	4b27      	ldr	r3, [pc, #156]	; (80061f0 <HAL_RCC_OscConfig+0x470>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800615a:	2b00      	cmp	r3, #0
 800615c:	d1f0      	bne.n	8006140 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	69da      	ldr	r2, [r3, #28]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a1b      	ldr	r3, [r3, #32]
 8006166:	431a      	orrs	r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616c:	019b      	lsls	r3, r3, #6
 800616e:	431a      	orrs	r2, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006174:	085b      	lsrs	r3, r3, #1
 8006176:	3b01      	subs	r3, #1
 8006178:	041b      	lsls	r3, r3, #16
 800617a:	431a      	orrs	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006180:	061b      	lsls	r3, r3, #24
 8006182:	491b      	ldr	r1, [pc, #108]	; (80061f0 <HAL_RCC_OscConfig+0x470>)
 8006184:	4313      	orrs	r3, r2
 8006186:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006188:	4b1b      	ldr	r3, [pc, #108]	; (80061f8 <HAL_RCC_OscConfig+0x478>)
 800618a:	2201      	movs	r2, #1
 800618c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800618e:	f7fd fd63 	bl	8003c58 <HAL_GetTick>
 8006192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006194:	e008      	b.n	80061a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006196:	f7fd fd5f 	bl	8003c58 <HAL_GetTick>
 800619a:	4602      	mov	r2, r0
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	1ad3      	subs	r3, r2, r3
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d901      	bls.n	80061a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	e05c      	b.n	8006262 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061a8:	4b11      	ldr	r3, [pc, #68]	; (80061f0 <HAL_RCC_OscConfig+0x470>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d0f0      	beq.n	8006196 <HAL_RCC_OscConfig+0x416>
 80061b4:	e054      	b.n	8006260 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061b6:	4b10      	ldr	r3, [pc, #64]	; (80061f8 <HAL_RCC_OscConfig+0x478>)
 80061b8:	2200      	movs	r2, #0
 80061ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061bc:	f7fd fd4c 	bl	8003c58 <HAL_GetTick>
 80061c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061c2:	e008      	b.n	80061d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061c4:	f7fd fd48 	bl	8003c58 <HAL_GetTick>
 80061c8:	4602      	mov	r2, r0
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	2b02      	cmp	r3, #2
 80061d0:	d901      	bls.n	80061d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e045      	b.n	8006262 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061d6:	4b06      	ldr	r3, [pc, #24]	; (80061f0 <HAL_RCC_OscConfig+0x470>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1f0      	bne.n	80061c4 <HAL_RCC_OscConfig+0x444>
 80061e2:	e03d      	b.n	8006260 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d107      	bne.n	80061fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	e038      	b.n	8006262 <HAL_RCC_OscConfig+0x4e2>
 80061f0:	40023800 	.word	0x40023800
 80061f4:	40007000 	.word	0x40007000
 80061f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80061fc:	4b1b      	ldr	r3, [pc, #108]	; (800626c <HAL_RCC_OscConfig+0x4ec>)
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	699b      	ldr	r3, [r3, #24]
 8006206:	2b01      	cmp	r3, #1
 8006208:	d028      	beq.n	800625c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006214:	429a      	cmp	r2, r3
 8006216:	d121      	bne.n	800625c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006222:	429a      	cmp	r2, r3
 8006224:	d11a      	bne.n	800625c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006226:	68fa      	ldr	r2, [r7, #12]
 8006228:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800622c:	4013      	ands	r3, r2
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006232:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006234:	4293      	cmp	r3, r2
 8006236:	d111      	bne.n	800625c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006242:	085b      	lsrs	r3, r3, #1
 8006244:	3b01      	subs	r3, #1
 8006246:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006248:	429a      	cmp	r2, r3
 800624a:	d107      	bne.n	800625c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006256:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006258:	429a      	cmp	r2, r3
 800625a:	d001      	beq.n	8006260 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e000      	b.n	8006262 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3718      	adds	r7, #24
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	40023800 	.word	0x40023800

08006270 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d101      	bne.n	8006284 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	e0cc      	b.n	800641e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006284:	4b68      	ldr	r3, [pc, #416]	; (8006428 <HAL_RCC_ClockConfig+0x1b8>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 030f 	and.w	r3, r3, #15
 800628c:	683a      	ldr	r2, [r7, #0]
 800628e:	429a      	cmp	r2, r3
 8006290:	d90c      	bls.n	80062ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006292:	4b65      	ldr	r3, [pc, #404]	; (8006428 <HAL_RCC_ClockConfig+0x1b8>)
 8006294:	683a      	ldr	r2, [r7, #0]
 8006296:	b2d2      	uxtb	r2, r2
 8006298:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800629a:	4b63      	ldr	r3, [pc, #396]	; (8006428 <HAL_RCC_ClockConfig+0x1b8>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 030f 	and.w	r3, r3, #15
 80062a2:	683a      	ldr	r2, [r7, #0]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d001      	beq.n	80062ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e0b8      	b.n	800641e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 0302 	and.w	r3, r3, #2
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d020      	beq.n	80062fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 0304 	and.w	r3, r3, #4
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d005      	beq.n	80062d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80062c4:	4b59      	ldr	r3, [pc, #356]	; (800642c <HAL_RCC_ClockConfig+0x1bc>)
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	4a58      	ldr	r2, [pc, #352]	; (800642c <HAL_RCC_ClockConfig+0x1bc>)
 80062ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80062ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0308 	and.w	r3, r3, #8
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d005      	beq.n	80062e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80062dc:	4b53      	ldr	r3, [pc, #332]	; (800642c <HAL_RCC_ClockConfig+0x1bc>)
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	4a52      	ldr	r2, [pc, #328]	; (800642c <HAL_RCC_ClockConfig+0x1bc>)
 80062e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80062e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062e8:	4b50      	ldr	r3, [pc, #320]	; (800642c <HAL_RCC_ClockConfig+0x1bc>)
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	494d      	ldr	r1, [pc, #308]	; (800642c <HAL_RCC_ClockConfig+0x1bc>)
 80062f6:	4313      	orrs	r3, r2
 80062f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 0301 	and.w	r3, r3, #1
 8006302:	2b00      	cmp	r3, #0
 8006304:	d044      	beq.n	8006390 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	2b01      	cmp	r3, #1
 800630c:	d107      	bne.n	800631e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800630e:	4b47      	ldr	r3, [pc, #284]	; (800642c <HAL_RCC_ClockConfig+0x1bc>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006316:	2b00      	cmp	r3, #0
 8006318:	d119      	bne.n	800634e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e07f      	b.n	800641e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	2b02      	cmp	r3, #2
 8006324:	d003      	beq.n	800632e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800632a:	2b03      	cmp	r3, #3
 800632c:	d107      	bne.n	800633e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800632e:	4b3f      	ldr	r3, [pc, #252]	; (800642c <HAL_RCC_ClockConfig+0x1bc>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006336:	2b00      	cmp	r3, #0
 8006338:	d109      	bne.n	800634e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e06f      	b.n	800641e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800633e:	4b3b      	ldr	r3, [pc, #236]	; (800642c <HAL_RCC_ClockConfig+0x1bc>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 0302 	and.w	r3, r3, #2
 8006346:	2b00      	cmp	r3, #0
 8006348:	d101      	bne.n	800634e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e067      	b.n	800641e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800634e:	4b37      	ldr	r3, [pc, #220]	; (800642c <HAL_RCC_ClockConfig+0x1bc>)
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	f023 0203 	bic.w	r2, r3, #3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	4934      	ldr	r1, [pc, #208]	; (800642c <HAL_RCC_ClockConfig+0x1bc>)
 800635c:	4313      	orrs	r3, r2
 800635e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006360:	f7fd fc7a 	bl	8003c58 <HAL_GetTick>
 8006364:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006366:	e00a      	b.n	800637e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006368:	f7fd fc76 	bl	8003c58 <HAL_GetTick>
 800636c:	4602      	mov	r2, r0
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	f241 3288 	movw	r2, #5000	; 0x1388
 8006376:	4293      	cmp	r3, r2
 8006378:	d901      	bls.n	800637e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	e04f      	b.n	800641e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800637e:	4b2b      	ldr	r3, [pc, #172]	; (800642c <HAL_RCC_ClockConfig+0x1bc>)
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f003 020c 	and.w	r2, r3, #12
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	429a      	cmp	r2, r3
 800638e:	d1eb      	bne.n	8006368 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006390:	4b25      	ldr	r3, [pc, #148]	; (8006428 <HAL_RCC_ClockConfig+0x1b8>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 030f 	and.w	r3, r3, #15
 8006398:	683a      	ldr	r2, [r7, #0]
 800639a:	429a      	cmp	r2, r3
 800639c:	d20c      	bcs.n	80063b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800639e:	4b22      	ldr	r3, [pc, #136]	; (8006428 <HAL_RCC_ClockConfig+0x1b8>)
 80063a0:	683a      	ldr	r2, [r7, #0]
 80063a2:	b2d2      	uxtb	r2, r2
 80063a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063a6:	4b20      	ldr	r3, [pc, #128]	; (8006428 <HAL_RCC_ClockConfig+0x1b8>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 030f 	and.w	r3, r3, #15
 80063ae:	683a      	ldr	r2, [r7, #0]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d001      	beq.n	80063b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e032      	b.n	800641e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 0304 	and.w	r3, r3, #4
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d008      	beq.n	80063d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063c4:	4b19      	ldr	r3, [pc, #100]	; (800642c <HAL_RCC_ClockConfig+0x1bc>)
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	4916      	ldr	r1, [pc, #88]	; (800642c <HAL_RCC_ClockConfig+0x1bc>)
 80063d2:	4313      	orrs	r3, r2
 80063d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 0308 	and.w	r3, r3, #8
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d009      	beq.n	80063f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063e2:	4b12      	ldr	r3, [pc, #72]	; (800642c <HAL_RCC_ClockConfig+0x1bc>)
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	00db      	lsls	r3, r3, #3
 80063f0:	490e      	ldr	r1, [pc, #56]	; (800642c <HAL_RCC_ClockConfig+0x1bc>)
 80063f2:	4313      	orrs	r3, r2
 80063f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80063f6:	f000 f821 	bl	800643c <HAL_RCC_GetSysClockFreq>
 80063fa:	4602      	mov	r2, r0
 80063fc:	4b0b      	ldr	r3, [pc, #44]	; (800642c <HAL_RCC_ClockConfig+0x1bc>)
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	091b      	lsrs	r3, r3, #4
 8006402:	f003 030f 	and.w	r3, r3, #15
 8006406:	490a      	ldr	r1, [pc, #40]	; (8006430 <HAL_RCC_ClockConfig+0x1c0>)
 8006408:	5ccb      	ldrb	r3, [r1, r3]
 800640a:	fa22 f303 	lsr.w	r3, r2, r3
 800640e:	4a09      	ldr	r2, [pc, #36]	; (8006434 <HAL_RCC_ClockConfig+0x1c4>)
 8006410:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006412:	4b09      	ldr	r3, [pc, #36]	; (8006438 <HAL_RCC_ClockConfig+0x1c8>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4618      	mov	r0, r3
 8006418:	f7fd fbda 	bl	8003bd0 <HAL_InitTick>

  return HAL_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	40023c00 	.word	0x40023c00
 800642c:	40023800 	.word	0x40023800
 8006430:	0800dd14 	.word	0x0800dd14
 8006434:	20000010 	.word	0x20000010
 8006438:	20000014 	.word	0x20000014

0800643c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800643c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006440:	b094      	sub	sp, #80	; 0x50
 8006442:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006444:	2300      	movs	r3, #0
 8006446:	647b      	str	r3, [r7, #68]	; 0x44
 8006448:	2300      	movs	r3, #0
 800644a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800644c:	2300      	movs	r3, #0
 800644e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006450:	2300      	movs	r3, #0
 8006452:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006454:	4b79      	ldr	r3, [pc, #484]	; (800663c <HAL_RCC_GetSysClockFreq+0x200>)
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	f003 030c 	and.w	r3, r3, #12
 800645c:	2b08      	cmp	r3, #8
 800645e:	d00d      	beq.n	800647c <HAL_RCC_GetSysClockFreq+0x40>
 8006460:	2b08      	cmp	r3, #8
 8006462:	f200 80e1 	bhi.w	8006628 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006466:	2b00      	cmp	r3, #0
 8006468:	d002      	beq.n	8006470 <HAL_RCC_GetSysClockFreq+0x34>
 800646a:	2b04      	cmp	r3, #4
 800646c:	d003      	beq.n	8006476 <HAL_RCC_GetSysClockFreq+0x3a>
 800646e:	e0db      	b.n	8006628 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006470:	4b73      	ldr	r3, [pc, #460]	; (8006640 <HAL_RCC_GetSysClockFreq+0x204>)
 8006472:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006474:	e0db      	b.n	800662e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006476:	4b73      	ldr	r3, [pc, #460]	; (8006644 <HAL_RCC_GetSysClockFreq+0x208>)
 8006478:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800647a:	e0d8      	b.n	800662e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800647c:	4b6f      	ldr	r3, [pc, #444]	; (800663c <HAL_RCC_GetSysClockFreq+0x200>)
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006484:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006486:	4b6d      	ldr	r3, [pc, #436]	; (800663c <HAL_RCC_GetSysClockFreq+0x200>)
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800648e:	2b00      	cmp	r3, #0
 8006490:	d063      	beq.n	800655a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006492:	4b6a      	ldr	r3, [pc, #424]	; (800663c <HAL_RCC_GetSysClockFreq+0x200>)
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	099b      	lsrs	r3, r3, #6
 8006498:	2200      	movs	r2, #0
 800649a:	63bb      	str	r3, [r7, #56]	; 0x38
 800649c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800649e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064a4:	633b      	str	r3, [r7, #48]	; 0x30
 80064a6:	2300      	movs	r3, #0
 80064a8:	637b      	str	r3, [r7, #52]	; 0x34
 80064aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80064ae:	4622      	mov	r2, r4
 80064b0:	462b      	mov	r3, r5
 80064b2:	f04f 0000 	mov.w	r0, #0
 80064b6:	f04f 0100 	mov.w	r1, #0
 80064ba:	0159      	lsls	r1, r3, #5
 80064bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064c0:	0150      	lsls	r0, r2, #5
 80064c2:	4602      	mov	r2, r0
 80064c4:	460b      	mov	r3, r1
 80064c6:	4621      	mov	r1, r4
 80064c8:	1a51      	subs	r1, r2, r1
 80064ca:	6139      	str	r1, [r7, #16]
 80064cc:	4629      	mov	r1, r5
 80064ce:	eb63 0301 	sbc.w	r3, r3, r1
 80064d2:	617b      	str	r3, [r7, #20]
 80064d4:	f04f 0200 	mov.w	r2, #0
 80064d8:	f04f 0300 	mov.w	r3, #0
 80064dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80064e0:	4659      	mov	r1, fp
 80064e2:	018b      	lsls	r3, r1, #6
 80064e4:	4651      	mov	r1, sl
 80064e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80064ea:	4651      	mov	r1, sl
 80064ec:	018a      	lsls	r2, r1, #6
 80064ee:	4651      	mov	r1, sl
 80064f0:	ebb2 0801 	subs.w	r8, r2, r1
 80064f4:	4659      	mov	r1, fp
 80064f6:	eb63 0901 	sbc.w	r9, r3, r1
 80064fa:	f04f 0200 	mov.w	r2, #0
 80064fe:	f04f 0300 	mov.w	r3, #0
 8006502:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006506:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800650a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800650e:	4690      	mov	r8, r2
 8006510:	4699      	mov	r9, r3
 8006512:	4623      	mov	r3, r4
 8006514:	eb18 0303 	adds.w	r3, r8, r3
 8006518:	60bb      	str	r3, [r7, #8]
 800651a:	462b      	mov	r3, r5
 800651c:	eb49 0303 	adc.w	r3, r9, r3
 8006520:	60fb      	str	r3, [r7, #12]
 8006522:	f04f 0200 	mov.w	r2, #0
 8006526:	f04f 0300 	mov.w	r3, #0
 800652a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800652e:	4629      	mov	r1, r5
 8006530:	024b      	lsls	r3, r1, #9
 8006532:	4621      	mov	r1, r4
 8006534:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006538:	4621      	mov	r1, r4
 800653a:	024a      	lsls	r2, r1, #9
 800653c:	4610      	mov	r0, r2
 800653e:	4619      	mov	r1, r3
 8006540:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006542:	2200      	movs	r2, #0
 8006544:	62bb      	str	r3, [r7, #40]	; 0x28
 8006546:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006548:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800654c:	f7fa fbac 	bl	8000ca8 <__aeabi_uldivmod>
 8006550:	4602      	mov	r2, r0
 8006552:	460b      	mov	r3, r1
 8006554:	4613      	mov	r3, r2
 8006556:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006558:	e058      	b.n	800660c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800655a:	4b38      	ldr	r3, [pc, #224]	; (800663c <HAL_RCC_GetSysClockFreq+0x200>)
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	099b      	lsrs	r3, r3, #6
 8006560:	2200      	movs	r2, #0
 8006562:	4618      	mov	r0, r3
 8006564:	4611      	mov	r1, r2
 8006566:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800656a:	623b      	str	r3, [r7, #32]
 800656c:	2300      	movs	r3, #0
 800656e:	627b      	str	r3, [r7, #36]	; 0x24
 8006570:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006574:	4642      	mov	r2, r8
 8006576:	464b      	mov	r3, r9
 8006578:	f04f 0000 	mov.w	r0, #0
 800657c:	f04f 0100 	mov.w	r1, #0
 8006580:	0159      	lsls	r1, r3, #5
 8006582:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006586:	0150      	lsls	r0, r2, #5
 8006588:	4602      	mov	r2, r0
 800658a:	460b      	mov	r3, r1
 800658c:	4641      	mov	r1, r8
 800658e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006592:	4649      	mov	r1, r9
 8006594:	eb63 0b01 	sbc.w	fp, r3, r1
 8006598:	f04f 0200 	mov.w	r2, #0
 800659c:	f04f 0300 	mov.w	r3, #0
 80065a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80065a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80065a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80065ac:	ebb2 040a 	subs.w	r4, r2, sl
 80065b0:	eb63 050b 	sbc.w	r5, r3, fp
 80065b4:	f04f 0200 	mov.w	r2, #0
 80065b8:	f04f 0300 	mov.w	r3, #0
 80065bc:	00eb      	lsls	r3, r5, #3
 80065be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065c2:	00e2      	lsls	r2, r4, #3
 80065c4:	4614      	mov	r4, r2
 80065c6:	461d      	mov	r5, r3
 80065c8:	4643      	mov	r3, r8
 80065ca:	18e3      	adds	r3, r4, r3
 80065cc:	603b      	str	r3, [r7, #0]
 80065ce:	464b      	mov	r3, r9
 80065d0:	eb45 0303 	adc.w	r3, r5, r3
 80065d4:	607b      	str	r3, [r7, #4]
 80065d6:	f04f 0200 	mov.w	r2, #0
 80065da:	f04f 0300 	mov.w	r3, #0
 80065de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80065e2:	4629      	mov	r1, r5
 80065e4:	028b      	lsls	r3, r1, #10
 80065e6:	4621      	mov	r1, r4
 80065e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80065ec:	4621      	mov	r1, r4
 80065ee:	028a      	lsls	r2, r1, #10
 80065f0:	4610      	mov	r0, r2
 80065f2:	4619      	mov	r1, r3
 80065f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065f6:	2200      	movs	r2, #0
 80065f8:	61bb      	str	r3, [r7, #24]
 80065fa:	61fa      	str	r2, [r7, #28]
 80065fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006600:	f7fa fb52 	bl	8000ca8 <__aeabi_uldivmod>
 8006604:	4602      	mov	r2, r0
 8006606:	460b      	mov	r3, r1
 8006608:	4613      	mov	r3, r2
 800660a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800660c:	4b0b      	ldr	r3, [pc, #44]	; (800663c <HAL_RCC_GetSysClockFreq+0x200>)
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	0c1b      	lsrs	r3, r3, #16
 8006612:	f003 0303 	and.w	r3, r3, #3
 8006616:	3301      	adds	r3, #1
 8006618:	005b      	lsls	r3, r3, #1
 800661a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800661c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800661e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006620:	fbb2 f3f3 	udiv	r3, r2, r3
 8006624:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006626:	e002      	b.n	800662e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006628:	4b05      	ldr	r3, [pc, #20]	; (8006640 <HAL_RCC_GetSysClockFreq+0x204>)
 800662a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800662c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800662e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006630:	4618      	mov	r0, r3
 8006632:	3750      	adds	r7, #80	; 0x50
 8006634:	46bd      	mov	sp, r7
 8006636:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800663a:	bf00      	nop
 800663c:	40023800 	.word	0x40023800
 8006640:	00f42400 	.word	0x00f42400
 8006644:	007a1200 	.word	0x007a1200

08006648 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006648:	b480      	push	{r7}
 800664a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800664c:	4b03      	ldr	r3, [pc, #12]	; (800665c <HAL_RCC_GetHCLKFreq+0x14>)
 800664e:	681b      	ldr	r3, [r3, #0]
}
 8006650:	4618      	mov	r0, r3
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	20000010 	.word	0x20000010

08006660 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006664:	f7ff fff0 	bl	8006648 <HAL_RCC_GetHCLKFreq>
 8006668:	4602      	mov	r2, r0
 800666a:	4b05      	ldr	r3, [pc, #20]	; (8006680 <HAL_RCC_GetPCLK1Freq+0x20>)
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	0a9b      	lsrs	r3, r3, #10
 8006670:	f003 0307 	and.w	r3, r3, #7
 8006674:	4903      	ldr	r1, [pc, #12]	; (8006684 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006676:	5ccb      	ldrb	r3, [r1, r3]
 8006678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800667c:	4618      	mov	r0, r3
 800667e:	bd80      	pop	{r7, pc}
 8006680:	40023800 	.word	0x40023800
 8006684:	0800dd24 	.word	0x0800dd24

08006688 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800668c:	f7ff ffdc 	bl	8006648 <HAL_RCC_GetHCLKFreq>
 8006690:	4602      	mov	r2, r0
 8006692:	4b05      	ldr	r3, [pc, #20]	; (80066a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	0b5b      	lsrs	r3, r3, #13
 8006698:	f003 0307 	and.w	r3, r3, #7
 800669c:	4903      	ldr	r1, [pc, #12]	; (80066ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800669e:	5ccb      	ldrb	r3, [r1, r3]
 80066a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	40023800 	.word	0x40023800
 80066ac:	0800dd24 	.word	0x0800dd24

080066b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d101      	bne.n	80066c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e041      	b.n	8006746 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d106      	bne.n	80066dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f7fc fae8 	bl	8002cac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2202      	movs	r2, #2
 80066e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	3304      	adds	r3, #4
 80066ec:	4619      	mov	r1, r3
 80066ee:	4610      	mov	r0, r2
 80066f0:	f000 ff0a 	bl	8007508 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006744:	2300      	movs	r3, #0
}
 8006746:	4618      	mov	r0, r3
 8006748:	3708      	adds	r7, #8
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
	...

08006750 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800675e:	b2db      	uxtb	r3, r3
 8006760:	2b01      	cmp	r3, #1
 8006762:	d001      	beq.n	8006768 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e046      	b.n	80067f6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2202      	movs	r2, #2
 800676c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a23      	ldr	r2, [pc, #140]	; (8006804 <HAL_TIM_Base_Start+0xb4>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d022      	beq.n	80067c0 <HAL_TIM_Base_Start+0x70>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006782:	d01d      	beq.n	80067c0 <HAL_TIM_Base_Start+0x70>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a1f      	ldr	r2, [pc, #124]	; (8006808 <HAL_TIM_Base_Start+0xb8>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d018      	beq.n	80067c0 <HAL_TIM_Base_Start+0x70>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a1e      	ldr	r2, [pc, #120]	; (800680c <HAL_TIM_Base_Start+0xbc>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d013      	beq.n	80067c0 <HAL_TIM_Base_Start+0x70>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a1c      	ldr	r2, [pc, #112]	; (8006810 <HAL_TIM_Base_Start+0xc0>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d00e      	beq.n	80067c0 <HAL_TIM_Base_Start+0x70>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a1b      	ldr	r2, [pc, #108]	; (8006814 <HAL_TIM_Base_Start+0xc4>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d009      	beq.n	80067c0 <HAL_TIM_Base_Start+0x70>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a19      	ldr	r2, [pc, #100]	; (8006818 <HAL_TIM_Base_Start+0xc8>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d004      	beq.n	80067c0 <HAL_TIM_Base_Start+0x70>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a18      	ldr	r2, [pc, #96]	; (800681c <HAL_TIM_Base_Start+0xcc>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d111      	bne.n	80067e4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	f003 0307 	and.w	r3, r3, #7
 80067ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2b06      	cmp	r3, #6
 80067d0:	d010      	beq.n	80067f4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f042 0201 	orr.w	r2, r2, #1
 80067e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067e2:	e007      	b.n	80067f4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f042 0201 	orr.w	r2, r2, #1
 80067f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3714      	adds	r7, #20
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop
 8006804:	40010000 	.word	0x40010000
 8006808:	40000400 	.word	0x40000400
 800680c:	40000800 	.word	0x40000800
 8006810:	40000c00 	.word	0x40000c00
 8006814:	40010400 	.word	0x40010400
 8006818:	40014000 	.word	0x40014000
 800681c:	40001800 	.word	0x40001800

08006820 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006820:	b480      	push	{r7}
 8006822:	b085      	sub	sp, #20
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800682e:	b2db      	uxtb	r3, r3
 8006830:	2b01      	cmp	r3, #1
 8006832:	d001      	beq.n	8006838 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e04e      	b.n	80068d6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2202      	movs	r2, #2
 800683c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68da      	ldr	r2, [r3, #12]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f042 0201 	orr.w	r2, r2, #1
 800684e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a23      	ldr	r2, [pc, #140]	; (80068e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d022      	beq.n	80068a0 <HAL_TIM_Base_Start_IT+0x80>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006862:	d01d      	beq.n	80068a0 <HAL_TIM_Base_Start_IT+0x80>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a1f      	ldr	r2, [pc, #124]	; (80068e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d018      	beq.n	80068a0 <HAL_TIM_Base_Start_IT+0x80>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a1e      	ldr	r2, [pc, #120]	; (80068ec <HAL_TIM_Base_Start_IT+0xcc>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d013      	beq.n	80068a0 <HAL_TIM_Base_Start_IT+0x80>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a1c      	ldr	r2, [pc, #112]	; (80068f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d00e      	beq.n	80068a0 <HAL_TIM_Base_Start_IT+0x80>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a1b      	ldr	r2, [pc, #108]	; (80068f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d009      	beq.n	80068a0 <HAL_TIM_Base_Start_IT+0x80>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a19      	ldr	r2, [pc, #100]	; (80068f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d004      	beq.n	80068a0 <HAL_TIM_Base_Start_IT+0x80>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a18      	ldr	r2, [pc, #96]	; (80068fc <HAL_TIM_Base_Start_IT+0xdc>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d111      	bne.n	80068c4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	f003 0307 	and.w	r3, r3, #7
 80068aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2b06      	cmp	r3, #6
 80068b0:	d010      	beq.n	80068d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f042 0201 	orr.w	r2, r2, #1
 80068c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068c2:	e007      	b.n	80068d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f042 0201 	orr.w	r2, r2, #1
 80068d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3714      	adds	r7, #20
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop
 80068e4:	40010000 	.word	0x40010000
 80068e8:	40000400 	.word	0x40000400
 80068ec:	40000800 	.word	0x40000800
 80068f0:	40000c00 	.word	0x40000c00
 80068f4:	40010400 	.word	0x40010400
 80068f8:	40014000 	.word	0x40014000
 80068fc:	40001800 	.word	0x40001800

08006900 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d101      	bne.n	8006912 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e041      	b.n	8006996 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006918:	b2db      	uxtb	r3, r3
 800691a:	2b00      	cmp	r3, #0
 800691c:	d106      	bne.n	800692c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 f839 	bl	800699e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2202      	movs	r2, #2
 8006930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	3304      	adds	r3, #4
 800693c:	4619      	mov	r1, r3
 800693e:	4610      	mov	r0, r2
 8006940:	f000 fde2 	bl	8007508 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	3708      	adds	r7, #8
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}

0800699e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800699e:	b480      	push	{r7}
 80069a0:	b083      	sub	sp, #12
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80069a6:	bf00      	nop
 80069a8:	370c      	adds	r7, #12
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr

080069b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80069b2:	b580      	push	{r7, lr}
 80069b4:	b082      	sub	sp, #8
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d101      	bne.n	80069c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	e041      	b.n	8006a48 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d106      	bne.n	80069de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 f839 	bl	8006a50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2202      	movs	r2, #2
 80069e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	3304      	adds	r3, #4
 80069ee:	4619      	mov	r1, r3
 80069f0:	4610      	mov	r0, r2
 80069f2:	f000 fd89 	bl	8007508 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2201      	movs	r2, #1
 80069fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2201      	movs	r2, #1
 8006a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2201      	movs	r2, #1
 8006a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2201      	movs	r2, #1
 8006a22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2201      	movs	r2, #1
 8006a2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2201      	movs	r2, #1
 8006a32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2201      	movs	r2, #1
 8006a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a46:	2300      	movs	r3, #0
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3708      	adds	r7, #8
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006a58:	bf00      	nop
 8006a5a:	370c      	adds	r7, #12
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d109      	bne.n	8006a8c <HAL_TIM_PWM_Start_IT+0x28>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	bf14      	ite	ne
 8006a84:	2301      	movne	r3, #1
 8006a86:	2300      	moveq	r3, #0
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	e022      	b.n	8006ad2 <HAL_TIM_PWM_Start_IT+0x6e>
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	2b04      	cmp	r3, #4
 8006a90:	d109      	bne.n	8006aa6 <HAL_TIM_PWM_Start_IT+0x42>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	bf14      	ite	ne
 8006a9e:	2301      	movne	r3, #1
 8006aa0:	2300      	moveq	r3, #0
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	e015      	b.n	8006ad2 <HAL_TIM_PWM_Start_IT+0x6e>
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	2b08      	cmp	r3, #8
 8006aaa:	d109      	bne.n	8006ac0 <HAL_TIM_PWM_Start_IT+0x5c>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	bf14      	ite	ne
 8006ab8:	2301      	movne	r3, #1
 8006aba:	2300      	moveq	r3, #0
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	e008      	b.n	8006ad2 <HAL_TIM_PWM_Start_IT+0x6e>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	bf14      	ite	ne
 8006acc:	2301      	movne	r3, #1
 8006ace:	2300      	moveq	r3, #0
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d001      	beq.n	8006ada <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e0c7      	b.n	8006c6a <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d104      	bne.n	8006aea <HAL_TIM_PWM_Start_IT+0x86>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2202      	movs	r2, #2
 8006ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ae8:	e013      	b.n	8006b12 <HAL_TIM_PWM_Start_IT+0xae>
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	2b04      	cmp	r3, #4
 8006aee:	d104      	bne.n	8006afa <HAL_TIM_PWM_Start_IT+0x96>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2202      	movs	r2, #2
 8006af4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006af8:	e00b      	b.n	8006b12 <HAL_TIM_PWM_Start_IT+0xae>
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	2b08      	cmp	r3, #8
 8006afe:	d104      	bne.n	8006b0a <HAL_TIM_PWM_Start_IT+0xa6>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2202      	movs	r2, #2
 8006b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b08:	e003      	b.n	8006b12 <HAL_TIM_PWM_Start_IT+0xae>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2202      	movs	r2, #2
 8006b0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	2b0c      	cmp	r3, #12
 8006b16:	d841      	bhi.n	8006b9c <HAL_TIM_PWM_Start_IT+0x138>
 8006b18:	a201      	add	r2, pc, #4	; (adr r2, 8006b20 <HAL_TIM_PWM_Start_IT+0xbc>)
 8006b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b1e:	bf00      	nop
 8006b20:	08006b55 	.word	0x08006b55
 8006b24:	08006b9d 	.word	0x08006b9d
 8006b28:	08006b9d 	.word	0x08006b9d
 8006b2c:	08006b9d 	.word	0x08006b9d
 8006b30:	08006b67 	.word	0x08006b67
 8006b34:	08006b9d 	.word	0x08006b9d
 8006b38:	08006b9d 	.word	0x08006b9d
 8006b3c:	08006b9d 	.word	0x08006b9d
 8006b40:	08006b79 	.word	0x08006b79
 8006b44:	08006b9d 	.word	0x08006b9d
 8006b48:	08006b9d 	.word	0x08006b9d
 8006b4c:	08006b9d 	.word	0x08006b9d
 8006b50:	08006b8b 	.word	0x08006b8b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68da      	ldr	r2, [r3, #12]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f042 0202 	orr.w	r2, r2, #2
 8006b62:	60da      	str	r2, [r3, #12]
      break;
 8006b64:	e01d      	b.n	8006ba2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68da      	ldr	r2, [r3, #12]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f042 0204 	orr.w	r2, r2, #4
 8006b74:	60da      	str	r2, [r3, #12]
      break;
 8006b76:	e014      	b.n	8006ba2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68da      	ldr	r2, [r3, #12]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f042 0208 	orr.w	r2, r2, #8
 8006b86:	60da      	str	r2, [r3, #12]
      break;
 8006b88:	e00b      	b.n	8006ba2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	68da      	ldr	r2, [r3, #12]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f042 0210 	orr.w	r2, r2, #16
 8006b98:	60da      	str	r2, [r3, #12]
      break;
 8006b9a:	e002      	b.n	8006ba2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	73fb      	strb	r3, [r7, #15]
      break;
 8006ba0:	bf00      	nop
  }

  if (status == HAL_OK)
 8006ba2:	7bfb      	ldrb	r3, [r7, #15]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d15f      	bne.n	8006c68 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2201      	movs	r2, #1
 8006bae:	6839      	ldr	r1, [r7, #0]
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f000 ff9f 	bl	8007af4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a2e      	ldr	r2, [pc, #184]	; (8006c74 <HAL_TIM_PWM_Start_IT+0x210>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d004      	beq.n	8006bca <HAL_TIM_PWM_Start_IT+0x166>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a2c      	ldr	r2, [pc, #176]	; (8006c78 <HAL_TIM_PWM_Start_IT+0x214>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d101      	bne.n	8006bce <HAL_TIM_PWM_Start_IT+0x16a>
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e000      	b.n	8006bd0 <HAL_TIM_PWM_Start_IT+0x16c>
 8006bce:	2300      	movs	r3, #0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d007      	beq.n	8006be4 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006be2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a22      	ldr	r2, [pc, #136]	; (8006c74 <HAL_TIM_PWM_Start_IT+0x210>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d022      	beq.n	8006c34 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bf6:	d01d      	beq.n	8006c34 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a1f      	ldr	r2, [pc, #124]	; (8006c7c <HAL_TIM_PWM_Start_IT+0x218>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d018      	beq.n	8006c34 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a1e      	ldr	r2, [pc, #120]	; (8006c80 <HAL_TIM_PWM_Start_IT+0x21c>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d013      	beq.n	8006c34 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a1c      	ldr	r2, [pc, #112]	; (8006c84 <HAL_TIM_PWM_Start_IT+0x220>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d00e      	beq.n	8006c34 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a17      	ldr	r2, [pc, #92]	; (8006c78 <HAL_TIM_PWM_Start_IT+0x214>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d009      	beq.n	8006c34 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a18      	ldr	r2, [pc, #96]	; (8006c88 <HAL_TIM_PWM_Start_IT+0x224>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d004      	beq.n	8006c34 <HAL_TIM_PWM_Start_IT+0x1d0>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a17      	ldr	r2, [pc, #92]	; (8006c8c <HAL_TIM_PWM_Start_IT+0x228>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d111      	bne.n	8006c58 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	f003 0307 	and.w	r3, r3, #7
 8006c3e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	2b06      	cmp	r3, #6
 8006c44:	d010      	beq.n	8006c68 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f042 0201 	orr.w	r2, r2, #1
 8006c54:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c56:	e007      	b.n	8006c68 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f042 0201 	orr.w	r2, r2, #1
 8006c66:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3710      	adds	r7, #16
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop
 8006c74:	40010000 	.word	0x40010000
 8006c78:	40010400 	.word	0x40010400
 8006c7c:	40000400 	.word	0x40000400
 8006c80:	40000800 	.word	0x40000800
 8006c84:	40000c00 	.word	0x40000c00
 8006c88:	40014000 	.word	0x40014000
 8006c8c:	40001800 	.word	0x40001800

08006c90 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b086      	sub	sp, #24
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d101      	bne.n	8006ca4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e097      	b.n	8006dd4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d106      	bne.n	8006cbe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f7fc f8f9 	bl	8002eb0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2202      	movs	r2, #2
 8006cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	6812      	ldr	r2, [r2, #0]
 8006cd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cd4:	f023 0307 	bic.w	r3, r3, #7
 8006cd8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	3304      	adds	r3, #4
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	4610      	mov	r0, r2
 8006ce6:	f000 fc0f 	bl	8007508 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	699b      	ldr	r3, [r3, #24]
 8006cf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	6a1b      	ldr	r3, [r3, #32]
 8006d00:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	697a      	ldr	r2, [r7, #20]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d12:	f023 0303 	bic.w	r3, r3, #3
 8006d16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	689a      	ldr	r2, [r3, #8]
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	699b      	ldr	r3, [r3, #24]
 8006d20:	021b      	lsls	r3, r3, #8
 8006d22:	4313      	orrs	r3, r2
 8006d24:	693a      	ldr	r2, [r7, #16]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006d30:	f023 030c 	bic.w	r3, r3, #12
 8006d34:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	68da      	ldr	r2, [r3, #12]
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	69db      	ldr	r3, [r3, #28]
 8006d4a:	021b      	lsls	r3, r3, #8
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	693a      	ldr	r2, [r7, #16]
 8006d50:	4313      	orrs	r3, r2
 8006d52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	011a      	lsls	r2, r3, #4
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	6a1b      	ldr	r3, [r3, #32]
 8006d5e:	031b      	lsls	r3, r3, #12
 8006d60:	4313      	orrs	r3, r2
 8006d62:	693a      	ldr	r2, [r7, #16]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006d6e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006d76:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	685a      	ldr	r2, [r3, #4]
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	695b      	ldr	r3, [r3, #20]
 8006d80:	011b      	lsls	r3, r3, #4
 8006d82:	4313      	orrs	r3, r2
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	697a      	ldr	r2, [r7, #20]
 8006d90:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	693a      	ldr	r2, [r7, #16]
 8006d98:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2201      	movs	r2, #1
 8006da6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2201      	movs	r2, #1
 8006dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2201      	movs	r2, #1
 8006db6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3718      	adds	r7, #24
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006dec:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006df4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006dfc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006e04:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d110      	bne.n	8006e2e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e0c:	7bfb      	ldrb	r3, [r7, #15]
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d102      	bne.n	8006e18 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006e12:	7b7b      	ldrb	r3, [r7, #13]
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d001      	beq.n	8006e1c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e069      	b.n	8006ef0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2202      	movs	r2, #2
 8006e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2202      	movs	r2, #2
 8006e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e2c:	e031      	b.n	8006e92 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	2b04      	cmp	r3, #4
 8006e32:	d110      	bne.n	8006e56 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e34:	7bbb      	ldrb	r3, [r7, #14]
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d102      	bne.n	8006e40 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006e3a:	7b3b      	ldrb	r3, [r7, #12]
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d001      	beq.n	8006e44 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	e055      	b.n	8006ef0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2202      	movs	r2, #2
 8006e48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2202      	movs	r2, #2
 8006e50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e54:	e01d      	b.n	8006e92 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e56:	7bfb      	ldrb	r3, [r7, #15]
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d108      	bne.n	8006e6e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e5c:	7bbb      	ldrb	r3, [r7, #14]
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d105      	bne.n	8006e6e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e62:	7b7b      	ldrb	r3, [r7, #13]
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d102      	bne.n	8006e6e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006e68:	7b3b      	ldrb	r3, [r7, #12]
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d001      	beq.n	8006e72 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e03e      	b.n	8006ef0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2202      	movs	r2, #2
 8006e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2202      	movs	r2, #2
 8006e7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2202      	movs	r2, #2
 8006e86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2202      	movs	r2, #2
 8006e8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d003      	beq.n	8006ea0 <HAL_TIM_Encoder_Start+0xc4>
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	2b04      	cmp	r3, #4
 8006e9c:	d008      	beq.n	8006eb0 <HAL_TIM_Encoder_Start+0xd4>
 8006e9e:	e00f      	b.n	8006ec0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	2100      	movs	r1, #0
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f000 fe23 	bl	8007af4 <TIM_CCxChannelCmd>
      break;
 8006eae:	e016      	b.n	8006ede <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	2104      	movs	r1, #4
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f000 fe1b 	bl	8007af4 <TIM_CCxChannelCmd>
      break;
 8006ebe:	e00e      	b.n	8006ede <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	2100      	movs	r1, #0
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f000 fe13 	bl	8007af4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	2104      	movs	r1, #4
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f000 fe0c 	bl	8007af4 <TIM_CCxChannelCmd>
      break;
 8006edc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f042 0201 	orr.w	r2, r2, #1
 8006eec:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3710      	adds	r7, #16
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	f003 0302 	and.w	r3, r3, #2
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d020      	beq.n	8006f5c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f003 0302 	and.w	r3, r3, #2
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d01b      	beq.n	8006f5c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f06f 0202 	mvn.w	r2, #2
 8006f2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2201      	movs	r2, #1
 8006f32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	f003 0303 	and.w	r3, r3, #3
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d003      	beq.n	8006f4a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 fac1 	bl	80074ca <HAL_TIM_IC_CaptureCallback>
 8006f48:	e005      	b.n	8006f56 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 fab3 	bl	80074b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 fac4 	bl	80074de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	f003 0304 	and.w	r3, r3, #4
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d020      	beq.n	8006fa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f003 0304 	and.w	r3, r3, #4
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d01b      	beq.n	8006fa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f06f 0204 	mvn.w	r2, #4
 8006f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2202      	movs	r2, #2
 8006f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	699b      	ldr	r3, [r3, #24]
 8006f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d003      	beq.n	8006f96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 fa9b 	bl	80074ca <HAL_TIM_IC_CaptureCallback>
 8006f94:	e005      	b.n	8006fa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 fa8d 	bl	80074b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 fa9e 	bl	80074de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	f003 0308 	and.w	r3, r3, #8
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d020      	beq.n	8006ff4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f003 0308 	and.w	r3, r3, #8
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d01b      	beq.n	8006ff4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f06f 0208 	mvn.w	r2, #8
 8006fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2204      	movs	r2, #4
 8006fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	69db      	ldr	r3, [r3, #28]
 8006fd2:	f003 0303 	and.w	r3, r3, #3
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d003      	beq.n	8006fe2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 fa75 	bl	80074ca <HAL_TIM_IC_CaptureCallback>
 8006fe0:	e005      	b.n	8006fee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 fa67 	bl	80074b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 fa78 	bl	80074de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	f003 0310 	and.w	r3, r3, #16
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d020      	beq.n	8007040 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f003 0310 	and.w	r3, r3, #16
 8007004:	2b00      	cmp	r3, #0
 8007006:	d01b      	beq.n	8007040 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f06f 0210 	mvn.w	r2, #16
 8007010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2208      	movs	r2, #8
 8007016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	69db      	ldr	r3, [r3, #28]
 800701e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007022:	2b00      	cmp	r3, #0
 8007024:	d003      	beq.n	800702e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 fa4f 	bl	80074ca <HAL_TIM_IC_CaptureCallback>
 800702c:	e005      	b.n	800703a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 fa41 	bl	80074b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 fa52 	bl	80074de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	f003 0301 	and.w	r3, r3, #1
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00c      	beq.n	8007064 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f003 0301 	and.w	r3, r3, #1
 8007050:	2b00      	cmp	r3, #0
 8007052:	d007      	beq.n	8007064 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f06f 0201 	mvn.w	r2, #1
 800705c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 fa1f 	bl	80074a2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00c      	beq.n	8007088 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007074:	2b00      	cmp	r3, #0
 8007076:	d007      	beq.n	8007088 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 fe34 	bl	8007cf0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00c      	beq.n	80070ac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007098:	2b00      	cmp	r3, #0
 800709a:	d007      	beq.n	80070ac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80070a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 fa23 	bl	80074f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	f003 0320 	and.w	r3, r3, #32
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d00c      	beq.n	80070d0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f003 0320 	and.w	r3, r3, #32
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d007      	beq.n	80070d0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f06f 0220 	mvn.w	r2, #32
 80070c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 fe06 	bl	8007cdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80070d0:	bf00      	nop
 80070d2:	3710      	adds	r7, #16
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b086      	sub	sp, #24
 80070dc:	af00      	add	r7, sp, #0
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	60b9      	str	r1, [r7, #8]
 80070e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070e4:	2300      	movs	r3, #0
 80070e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d101      	bne.n	80070f6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80070f2:	2302      	movs	r3, #2
 80070f4:	e048      	b.n	8007188 <HAL_TIM_OC_ConfigChannel+0xb0>
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2201      	movs	r2, #1
 80070fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2b0c      	cmp	r3, #12
 8007102:	d839      	bhi.n	8007178 <HAL_TIM_OC_ConfigChannel+0xa0>
 8007104:	a201      	add	r2, pc, #4	; (adr r2, 800710c <HAL_TIM_OC_ConfigChannel+0x34>)
 8007106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800710a:	bf00      	nop
 800710c:	08007141 	.word	0x08007141
 8007110:	08007179 	.word	0x08007179
 8007114:	08007179 	.word	0x08007179
 8007118:	08007179 	.word	0x08007179
 800711c:	0800714f 	.word	0x0800714f
 8007120:	08007179 	.word	0x08007179
 8007124:	08007179 	.word	0x08007179
 8007128:	08007179 	.word	0x08007179
 800712c:	0800715d 	.word	0x0800715d
 8007130:	08007179 	.word	0x08007179
 8007134:	08007179 	.word	0x08007179
 8007138:	08007179 	.word	0x08007179
 800713c:	0800716b 	.word	0x0800716b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	68b9      	ldr	r1, [r7, #8]
 8007146:	4618      	mov	r0, r3
 8007148:	f000 fa8a 	bl	8007660 <TIM_OC1_SetConfig>
      break;
 800714c:	e017      	b.n	800717e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	68b9      	ldr	r1, [r7, #8]
 8007154:	4618      	mov	r0, r3
 8007156:	f000 faf3 	bl	8007740 <TIM_OC2_SetConfig>
      break;
 800715a:	e010      	b.n	800717e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68b9      	ldr	r1, [r7, #8]
 8007162:	4618      	mov	r0, r3
 8007164:	f000 fb62 	bl	800782c <TIM_OC3_SetConfig>
      break;
 8007168:	e009      	b.n	800717e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	68b9      	ldr	r1, [r7, #8]
 8007170:	4618      	mov	r0, r3
 8007172:	f000 fbcf 	bl	8007914 <TIM_OC4_SetConfig>
      break;
 8007176:	e002      	b.n	800717e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	75fb      	strb	r3, [r7, #23]
      break;
 800717c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007186:	7dfb      	ldrb	r3, [r7, #23]
}
 8007188:	4618      	mov	r0, r3
 800718a:	3718      	adds	r7, #24
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b086      	sub	sp, #24
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800719c:	2300      	movs	r3, #0
 800719e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d101      	bne.n	80071ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80071aa:	2302      	movs	r3, #2
 80071ac:	e0ae      	b.n	800730c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2201      	movs	r2, #1
 80071b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2b0c      	cmp	r3, #12
 80071ba:	f200 809f 	bhi.w	80072fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80071be:	a201      	add	r2, pc, #4	; (adr r2, 80071c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80071c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c4:	080071f9 	.word	0x080071f9
 80071c8:	080072fd 	.word	0x080072fd
 80071cc:	080072fd 	.word	0x080072fd
 80071d0:	080072fd 	.word	0x080072fd
 80071d4:	08007239 	.word	0x08007239
 80071d8:	080072fd 	.word	0x080072fd
 80071dc:	080072fd 	.word	0x080072fd
 80071e0:	080072fd 	.word	0x080072fd
 80071e4:	0800727b 	.word	0x0800727b
 80071e8:	080072fd 	.word	0x080072fd
 80071ec:	080072fd 	.word	0x080072fd
 80071f0:	080072fd 	.word	0x080072fd
 80071f4:	080072bb 	.word	0x080072bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	68b9      	ldr	r1, [r7, #8]
 80071fe:	4618      	mov	r0, r3
 8007200:	f000 fa2e 	bl	8007660 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	699a      	ldr	r2, [r3, #24]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f042 0208 	orr.w	r2, r2, #8
 8007212:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	699a      	ldr	r2, [r3, #24]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f022 0204 	bic.w	r2, r2, #4
 8007222:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	6999      	ldr	r1, [r3, #24]
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	691a      	ldr	r2, [r3, #16]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	430a      	orrs	r2, r1
 8007234:	619a      	str	r2, [r3, #24]
      break;
 8007236:	e064      	b.n	8007302 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68b9      	ldr	r1, [r7, #8]
 800723e:	4618      	mov	r0, r3
 8007240:	f000 fa7e 	bl	8007740 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	699a      	ldr	r2, [r3, #24]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007252:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	699a      	ldr	r2, [r3, #24]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007262:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	6999      	ldr	r1, [r3, #24]
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	691b      	ldr	r3, [r3, #16]
 800726e:	021a      	lsls	r2, r3, #8
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	430a      	orrs	r2, r1
 8007276:	619a      	str	r2, [r3, #24]
      break;
 8007278:	e043      	b.n	8007302 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	68b9      	ldr	r1, [r7, #8]
 8007280:	4618      	mov	r0, r3
 8007282:	f000 fad3 	bl	800782c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	69da      	ldr	r2, [r3, #28]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f042 0208 	orr.w	r2, r2, #8
 8007294:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	69da      	ldr	r2, [r3, #28]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f022 0204 	bic.w	r2, r2, #4
 80072a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	69d9      	ldr	r1, [r3, #28]
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	691a      	ldr	r2, [r3, #16]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	430a      	orrs	r2, r1
 80072b6:	61da      	str	r2, [r3, #28]
      break;
 80072b8:	e023      	b.n	8007302 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	68b9      	ldr	r1, [r7, #8]
 80072c0:	4618      	mov	r0, r3
 80072c2:	f000 fb27 	bl	8007914 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	69da      	ldr	r2, [r3, #28]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	69da      	ldr	r2, [r3, #28]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	69d9      	ldr	r1, [r3, #28]
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	691b      	ldr	r3, [r3, #16]
 80072f0:	021a      	lsls	r2, r3, #8
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	430a      	orrs	r2, r1
 80072f8:	61da      	str	r2, [r3, #28]
      break;
 80072fa:	e002      	b.n	8007302 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	75fb      	strb	r3, [r7, #23]
      break;
 8007300:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2200      	movs	r2, #0
 8007306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800730a:	7dfb      	ldrb	r3, [r7, #23]
}
 800730c:	4618      	mov	r0, r3
 800730e:	3718      	adds	r7, #24
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800731e:	2300      	movs	r3, #0
 8007320:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007328:	2b01      	cmp	r3, #1
 800732a:	d101      	bne.n	8007330 <HAL_TIM_ConfigClockSource+0x1c>
 800732c:	2302      	movs	r3, #2
 800732e:	e0b4      	b.n	800749a <HAL_TIM_ConfigClockSource+0x186>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2202      	movs	r2, #2
 800733c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800734e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007356:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68ba      	ldr	r2, [r7, #8]
 800735e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007368:	d03e      	beq.n	80073e8 <HAL_TIM_ConfigClockSource+0xd4>
 800736a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800736e:	f200 8087 	bhi.w	8007480 <HAL_TIM_ConfigClockSource+0x16c>
 8007372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007376:	f000 8086 	beq.w	8007486 <HAL_TIM_ConfigClockSource+0x172>
 800737a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800737e:	d87f      	bhi.n	8007480 <HAL_TIM_ConfigClockSource+0x16c>
 8007380:	2b70      	cmp	r3, #112	; 0x70
 8007382:	d01a      	beq.n	80073ba <HAL_TIM_ConfigClockSource+0xa6>
 8007384:	2b70      	cmp	r3, #112	; 0x70
 8007386:	d87b      	bhi.n	8007480 <HAL_TIM_ConfigClockSource+0x16c>
 8007388:	2b60      	cmp	r3, #96	; 0x60
 800738a:	d050      	beq.n	800742e <HAL_TIM_ConfigClockSource+0x11a>
 800738c:	2b60      	cmp	r3, #96	; 0x60
 800738e:	d877      	bhi.n	8007480 <HAL_TIM_ConfigClockSource+0x16c>
 8007390:	2b50      	cmp	r3, #80	; 0x50
 8007392:	d03c      	beq.n	800740e <HAL_TIM_ConfigClockSource+0xfa>
 8007394:	2b50      	cmp	r3, #80	; 0x50
 8007396:	d873      	bhi.n	8007480 <HAL_TIM_ConfigClockSource+0x16c>
 8007398:	2b40      	cmp	r3, #64	; 0x40
 800739a:	d058      	beq.n	800744e <HAL_TIM_ConfigClockSource+0x13a>
 800739c:	2b40      	cmp	r3, #64	; 0x40
 800739e:	d86f      	bhi.n	8007480 <HAL_TIM_ConfigClockSource+0x16c>
 80073a0:	2b30      	cmp	r3, #48	; 0x30
 80073a2:	d064      	beq.n	800746e <HAL_TIM_ConfigClockSource+0x15a>
 80073a4:	2b30      	cmp	r3, #48	; 0x30
 80073a6:	d86b      	bhi.n	8007480 <HAL_TIM_ConfigClockSource+0x16c>
 80073a8:	2b20      	cmp	r3, #32
 80073aa:	d060      	beq.n	800746e <HAL_TIM_ConfigClockSource+0x15a>
 80073ac:	2b20      	cmp	r3, #32
 80073ae:	d867      	bhi.n	8007480 <HAL_TIM_ConfigClockSource+0x16c>
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d05c      	beq.n	800746e <HAL_TIM_ConfigClockSource+0x15a>
 80073b4:	2b10      	cmp	r3, #16
 80073b6:	d05a      	beq.n	800746e <HAL_TIM_ConfigClockSource+0x15a>
 80073b8:	e062      	b.n	8007480 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80073ca:	f000 fb73 	bl	8007ab4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80073dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68ba      	ldr	r2, [r7, #8]
 80073e4:	609a      	str	r2, [r3, #8]
      break;
 80073e6:	e04f      	b.n	8007488 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80073f8:	f000 fb5c 	bl	8007ab4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	689a      	ldr	r2, [r3, #8]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800740a:	609a      	str	r2, [r3, #8]
      break;
 800740c:	e03c      	b.n	8007488 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800741a:	461a      	mov	r2, r3
 800741c:	f000 fad0 	bl	80079c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	2150      	movs	r1, #80	; 0x50
 8007426:	4618      	mov	r0, r3
 8007428:	f000 fb29 	bl	8007a7e <TIM_ITRx_SetConfig>
      break;
 800742c:	e02c      	b.n	8007488 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800743a:	461a      	mov	r2, r3
 800743c:	f000 faef 	bl	8007a1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2160      	movs	r1, #96	; 0x60
 8007446:	4618      	mov	r0, r3
 8007448:	f000 fb19 	bl	8007a7e <TIM_ITRx_SetConfig>
      break;
 800744c:	e01c      	b.n	8007488 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800745a:	461a      	mov	r2, r3
 800745c:	f000 fab0 	bl	80079c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	2140      	movs	r1, #64	; 0x40
 8007466:	4618      	mov	r0, r3
 8007468:	f000 fb09 	bl	8007a7e <TIM_ITRx_SetConfig>
      break;
 800746c:	e00c      	b.n	8007488 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4619      	mov	r1, r3
 8007478:	4610      	mov	r0, r2
 800747a:	f000 fb00 	bl	8007a7e <TIM_ITRx_SetConfig>
      break;
 800747e:	e003      	b.n	8007488 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007480:	2301      	movs	r3, #1
 8007482:	73fb      	strb	r3, [r7, #15]
      break;
 8007484:	e000      	b.n	8007488 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007486:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007498:	7bfb      	ldrb	r3, [r7, #15]
}
 800749a:	4618      	mov	r0, r3
 800749c:	3710      	adds	r7, #16
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074a2:	b480      	push	{r7}
 80074a4:	b083      	sub	sp, #12
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80074aa:	bf00      	nop
 80074ac:	370c      	adds	r7, #12
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr

080074b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074b6:	b480      	push	{r7}
 80074b8:	b083      	sub	sp, #12
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80074be:	bf00      	nop
 80074c0:	370c      	adds	r7, #12
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr

080074ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80074ca:	b480      	push	{r7}
 80074cc:	b083      	sub	sp, #12
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80074d2:	bf00      	nop
 80074d4:	370c      	adds	r7, #12
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr

080074de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80074de:	b480      	push	{r7}
 80074e0:	b083      	sub	sp, #12
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80074e6:	bf00      	nop
 80074e8:	370c      	adds	r7, #12
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr

080074f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80074f2:	b480      	push	{r7}
 80074f4:	b083      	sub	sp, #12
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80074fa:	bf00      	nop
 80074fc:	370c      	adds	r7, #12
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr
	...

08007508 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007508:	b480      	push	{r7}
 800750a:	b085      	sub	sp, #20
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4a46      	ldr	r2, [pc, #280]	; (8007634 <TIM_Base_SetConfig+0x12c>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d013      	beq.n	8007548 <TIM_Base_SetConfig+0x40>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007526:	d00f      	beq.n	8007548 <TIM_Base_SetConfig+0x40>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a43      	ldr	r2, [pc, #268]	; (8007638 <TIM_Base_SetConfig+0x130>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d00b      	beq.n	8007548 <TIM_Base_SetConfig+0x40>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a42      	ldr	r2, [pc, #264]	; (800763c <TIM_Base_SetConfig+0x134>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d007      	beq.n	8007548 <TIM_Base_SetConfig+0x40>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a41      	ldr	r2, [pc, #260]	; (8007640 <TIM_Base_SetConfig+0x138>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d003      	beq.n	8007548 <TIM_Base_SetConfig+0x40>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	4a40      	ldr	r2, [pc, #256]	; (8007644 <TIM_Base_SetConfig+0x13c>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d108      	bne.n	800755a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800754e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	4313      	orrs	r3, r2
 8007558:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4a35      	ldr	r2, [pc, #212]	; (8007634 <TIM_Base_SetConfig+0x12c>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d02b      	beq.n	80075ba <TIM_Base_SetConfig+0xb2>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007568:	d027      	beq.n	80075ba <TIM_Base_SetConfig+0xb2>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a32      	ldr	r2, [pc, #200]	; (8007638 <TIM_Base_SetConfig+0x130>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d023      	beq.n	80075ba <TIM_Base_SetConfig+0xb2>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a31      	ldr	r2, [pc, #196]	; (800763c <TIM_Base_SetConfig+0x134>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d01f      	beq.n	80075ba <TIM_Base_SetConfig+0xb2>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4a30      	ldr	r2, [pc, #192]	; (8007640 <TIM_Base_SetConfig+0x138>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d01b      	beq.n	80075ba <TIM_Base_SetConfig+0xb2>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4a2f      	ldr	r2, [pc, #188]	; (8007644 <TIM_Base_SetConfig+0x13c>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d017      	beq.n	80075ba <TIM_Base_SetConfig+0xb2>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4a2e      	ldr	r2, [pc, #184]	; (8007648 <TIM_Base_SetConfig+0x140>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d013      	beq.n	80075ba <TIM_Base_SetConfig+0xb2>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4a2d      	ldr	r2, [pc, #180]	; (800764c <TIM_Base_SetConfig+0x144>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d00f      	beq.n	80075ba <TIM_Base_SetConfig+0xb2>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4a2c      	ldr	r2, [pc, #176]	; (8007650 <TIM_Base_SetConfig+0x148>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d00b      	beq.n	80075ba <TIM_Base_SetConfig+0xb2>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4a2b      	ldr	r2, [pc, #172]	; (8007654 <TIM_Base_SetConfig+0x14c>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d007      	beq.n	80075ba <TIM_Base_SetConfig+0xb2>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a2a      	ldr	r2, [pc, #168]	; (8007658 <TIM_Base_SetConfig+0x150>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d003      	beq.n	80075ba <TIM_Base_SetConfig+0xb2>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a29      	ldr	r2, [pc, #164]	; (800765c <TIM_Base_SetConfig+0x154>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d108      	bne.n	80075cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	68fa      	ldr	r2, [r7, #12]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	695b      	ldr	r3, [r3, #20]
 80075d6:	4313      	orrs	r3, r2
 80075d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	68fa      	ldr	r2, [r7, #12]
 80075de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	689a      	ldr	r2, [r3, #8]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	4a10      	ldr	r2, [pc, #64]	; (8007634 <TIM_Base_SetConfig+0x12c>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d003      	beq.n	8007600 <TIM_Base_SetConfig+0xf8>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	4a12      	ldr	r2, [pc, #72]	; (8007644 <TIM_Base_SetConfig+0x13c>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d103      	bne.n	8007608 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	691a      	ldr	r2, [r3, #16]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	691b      	ldr	r3, [r3, #16]
 8007612:	f003 0301 	and.w	r3, r3, #1
 8007616:	2b01      	cmp	r3, #1
 8007618:	d105      	bne.n	8007626 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	691b      	ldr	r3, [r3, #16]
 800761e:	f023 0201 	bic.w	r2, r3, #1
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	611a      	str	r2, [r3, #16]
  }
}
 8007626:	bf00      	nop
 8007628:	3714      	adds	r7, #20
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr
 8007632:	bf00      	nop
 8007634:	40010000 	.word	0x40010000
 8007638:	40000400 	.word	0x40000400
 800763c:	40000800 	.word	0x40000800
 8007640:	40000c00 	.word	0x40000c00
 8007644:	40010400 	.word	0x40010400
 8007648:	40014000 	.word	0x40014000
 800764c:	40014400 	.word	0x40014400
 8007650:	40014800 	.word	0x40014800
 8007654:	40001800 	.word	0x40001800
 8007658:	40001c00 	.word	0x40001c00
 800765c:	40002000 	.word	0x40002000

08007660 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007660:	b480      	push	{r7}
 8007662:	b087      	sub	sp, #28
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a1b      	ldr	r3, [r3, #32]
 800766e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6a1b      	ldr	r3, [r3, #32]
 8007674:	f023 0201 	bic.w	r2, r3, #1
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	699b      	ldr	r3, [r3, #24]
 8007686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800768e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f023 0303 	bic.w	r3, r3, #3
 8007696:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	68fa      	ldr	r2, [r7, #12]
 800769e:	4313      	orrs	r3, r2
 80076a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	f023 0302 	bic.w	r3, r3, #2
 80076a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	697a      	ldr	r2, [r7, #20]
 80076b0:	4313      	orrs	r3, r2
 80076b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	4a20      	ldr	r2, [pc, #128]	; (8007738 <TIM_OC1_SetConfig+0xd8>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d003      	beq.n	80076c4 <TIM_OC1_SetConfig+0x64>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	4a1f      	ldr	r2, [pc, #124]	; (800773c <TIM_OC1_SetConfig+0xdc>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d10c      	bne.n	80076de <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	f023 0308 	bic.w	r3, r3, #8
 80076ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	697a      	ldr	r2, [r7, #20]
 80076d2:	4313      	orrs	r3, r2
 80076d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	f023 0304 	bic.w	r3, r3, #4
 80076dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a15      	ldr	r2, [pc, #84]	; (8007738 <TIM_OC1_SetConfig+0xd8>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d003      	beq.n	80076ee <TIM_OC1_SetConfig+0x8e>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4a14      	ldr	r2, [pc, #80]	; (800773c <TIM_OC1_SetConfig+0xdc>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d111      	bne.n	8007712 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80076fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	695b      	ldr	r3, [r3, #20]
 8007702:	693a      	ldr	r2, [r7, #16]
 8007704:	4313      	orrs	r3, r2
 8007706:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	699b      	ldr	r3, [r3, #24]
 800770c:	693a      	ldr	r2, [r7, #16]
 800770e:	4313      	orrs	r3, r2
 8007710:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	693a      	ldr	r2, [r7, #16]
 8007716:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	68fa      	ldr	r2, [r7, #12]
 800771c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	685a      	ldr	r2, [r3, #4]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	697a      	ldr	r2, [r7, #20]
 800772a:	621a      	str	r2, [r3, #32]
}
 800772c:	bf00      	nop
 800772e:	371c      	adds	r7, #28
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr
 8007738:	40010000 	.word	0x40010000
 800773c:	40010400 	.word	0x40010400

08007740 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007740:	b480      	push	{r7}
 8007742:	b087      	sub	sp, #28
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a1b      	ldr	r3, [r3, #32]
 800774e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6a1b      	ldr	r3, [r3, #32]
 8007754:	f023 0210 	bic.w	r2, r3, #16
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	699b      	ldr	r3, [r3, #24]
 8007766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800776e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007776:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	021b      	lsls	r3, r3, #8
 800777e:	68fa      	ldr	r2, [r7, #12]
 8007780:	4313      	orrs	r3, r2
 8007782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	f023 0320 	bic.w	r3, r3, #32
 800778a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	011b      	lsls	r3, r3, #4
 8007792:	697a      	ldr	r2, [r7, #20]
 8007794:	4313      	orrs	r3, r2
 8007796:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	4a22      	ldr	r2, [pc, #136]	; (8007824 <TIM_OC2_SetConfig+0xe4>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d003      	beq.n	80077a8 <TIM_OC2_SetConfig+0x68>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	4a21      	ldr	r2, [pc, #132]	; (8007828 <TIM_OC2_SetConfig+0xe8>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d10d      	bne.n	80077c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	011b      	lsls	r3, r3, #4
 80077b6:	697a      	ldr	r2, [r7, #20]
 80077b8:	4313      	orrs	r3, r2
 80077ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a17      	ldr	r2, [pc, #92]	; (8007824 <TIM_OC2_SetConfig+0xe4>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d003      	beq.n	80077d4 <TIM_OC2_SetConfig+0x94>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4a16      	ldr	r2, [pc, #88]	; (8007828 <TIM_OC2_SetConfig+0xe8>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d113      	bne.n	80077fc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80077da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80077e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	695b      	ldr	r3, [r3, #20]
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	693a      	ldr	r2, [r7, #16]
 80077ec:	4313      	orrs	r3, r2
 80077ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	699b      	ldr	r3, [r3, #24]
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	693a      	ldr	r2, [r7, #16]
 80077f8:	4313      	orrs	r3, r2
 80077fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	693a      	ldr	r2, [r7, #16]
 8007800:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	685a      	ldr	r2, [r3, #4]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	697a      	ldr	r2, [r7, #20]
 8007814:	621a      	str	r2, [r3, #32]
}
 8007816:	bf00      	nop
 8007818:	371c      	adds	r7, #28
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr
 8007822:	bf00      	nop
 8007824:	40010000 	.word	0x40010000
 8007828:	40010400 	.word	0x40010400

0800782c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800782c:	b480      	push	{r7}
 800782e:	b087      	sub	sp, #28
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6a1b      	ldr	r3, [r3, #32]
 800783a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6a1b      	ldr	r3, [r3, #32]
 8007840:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	69db      	ldr	r3, [r3, #28]
 8007852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800785a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f023 0303 	bic.w	r3, r3, #3
 8007862:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	68fa      	ldr	r2, [r7, #12]
 800786a:	4313      	orrs	r3, r2
 800786c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007874:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	021b      	lsls	r3, r3, #8
 800787c:	697a      	ldr	r2, [r7, #20]
 800787e:	4313      	orrs	r3, r2
 8007880:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	4a21      	ldr	r2, [pc, #132]	; (800790c <TIM_OC3_SetConfig+0xe0>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d003      	beq.n	8007892 <TIM_OC3_SetConfig+0x66>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	4a20      	ldr	r2, [pc, #128]	; (8007910 <TIM_OC3_SetConfig+0xe4>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d10d      	bne.n	80078ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007898:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	021b      	lsls	r3, r3, #8
 80078a0:	697a      	ldr	r2, [r7, #20]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a16      	ldr	r2, [pc, #88]	; (800790c <TIM_OC3_SetConfig+0xe0>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d003      	beq.n	80078be <TIM_OC3_SetConfig+0x92>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4a15      	ldr	r2, [pc, #84]	; (8007910 <TIM_OC3_SetConfig+0xe4>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d113      	bne.n	80078e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	695b      	ldr	r3, [r3, #20]
 80078d2:	011b      	lsls	r3, r3, #4
 80078d4:	693a      	ldr	r2, [r7, #16]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	699b      	ldr	r3, [r3, #24]
 80078de:	011b      	lsls	r3, r3, #4
 80078e0:	693a      	ldr	r2, [r7, #16]
 80078e2:	4313      	orrs	r3, r2
 80078e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	693a      	ldr	r2, [r7, #16]
 80078ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	68fa      	ldr	r2, [r7, #12]
 80078f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	685a      	ldr	r2, [r3, #4]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	697a      	ldr	r2, [r7, #20]
 80078fe:	621a      	str	r2, [r3, #32]
}
 8007900:	bf00      	nop
 8007902:	371c      	adds	r7, #28
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr
 800790c:	40010000 	.word	0x40010000
 8007910:	40010400 	.word	0x40010400

08007914 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007914:	b480      	push	{r7}
 8007916:	b087      	sub	sp, #28
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a1b      	ldr	r3, [r3, #32]
 8007922:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6a1b      	ldr	r3, [r3, #32]
 8007928:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	69db      	ldr	r3, [r3, #28]
 800793a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800794a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	021b      	lsls	r3, r3, #8
 8007952:	68fa      	ldr	r2, [r7, #12]
 8007954:	4313      	orrs	r3, r2
 8007956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800795e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	031b      	lsls	r3, r3, #12
 8007966:	693a      	ldr	r2, [r7, #16]
 8007968:	4313      	orrs	r3, r2
 800796a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4a12      	ldr	r2, [pc, #72]	; (80079b8 <TIM_OC4_SetConfig+0xa4>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d003      	beq.n	800797c <TIM_OC4_SetConfig+0x68>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	4a11      	ldr	r2, [pc, #68]	; (80079bc <TIM_OC4_SetConfig+0xa8>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d109      	bne.n	8007990 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007982:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	695b      	ldr	r3, [r3, #20]
 8007988:	019b      	lsls	r3, r3, #6
 800798a:	697a      	ldr	r2, [r7, #20]
 800798c:	4313      	orrs	r3, r2
 800798e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	697a      	ldr	r2, [r7, #20]
 8007994:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	68fa      	ldr	r2, [r7, #12]
 800799a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	685a      	ldr	r2, [r3, #4]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	693a      	ldr	r2, [r7, #16]
 80079a8:	621a      	str	r2, [r3, #32]
}
 80079aa:	bf00      	nop
 80079ac:	371c      	adds	r7, #28
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr
 80079b6:	bf00      	nop
 80079b8:	40010000 	.word	0x40010000
 80079bc:	40010400 	.word	0x40010400

080079c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b087      	sub	sp, #28
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6a1b      	ldr	r3, [r3, #32]
 80079d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	6a1b      	ldr	r3, [r3, #32]
 80079d6:	f023 0201 	bic.w	r2, r3, #1
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	699b      	ldr	r3, [r3, #24]
 80079e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	011b      	lsls	r3, r3, #4
 80079f0:	693a      	ldr	r2, [r7, #16]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	f023 030a 	bic.w	r3, r3, #10
 80079fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80079fe:	697a      	ldr	r2, [r7, #20]
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	4313      	orrs	r3, r2
 8007a04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	693a      	ldr	r2, [r7, #16]
 8007a0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	697a      	ldr	r2, [r7, #20]
 8007a10:	621a      	str	r2, [r3, #32]
}
 8007a12:	bf00      	nop
 8007a14:	371c      	adds	r7, #28
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr

08007a1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a1e:	b480      	push	{r7}
 8007a20:	b087      	sub	sp, #28
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	60f8      	str	r0, [r7, #12]
 8007a26:	60b9      	str	r1, [r7, #8]
 8007a28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	6a1b      	ldr	r3, [r3, #32]
 8007a2e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	6a1b      	ldr	r3, [r3, #32]
 8007a34:	f023 0210 	bic.w	r2, r3, #16
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	699b      	ldr	r3, [r3, #24]
 8007a40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	031b      	lsls	r3, r3, #12
 8007a4e:	693a      	ldr	r2, [r7, #16]
 8007a50:	4313      	orrs	r3, r2
 8007a52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a5a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	011b      	lsls	r3, r3, #4
 8007a60:	697a      	ldr	r2, [r7, #20]
 8007a62:	4313      	orrs	r3, r2
 8007a64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	693a      	ldr	r2, [r7, #16]
 8007a6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	697a      	ldr	r2, [r7, #20]
 8007a70:	621a      	str	r2, [r3, #32]
}
 8007a72:	bf00      	nop
 8007a74:	371c      	adds	r7, #28
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr

08007a7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a7e:	b480      	push	{r7}
 8007a80:	b085      	sub	sp, #20
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
 8007a86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a96:	683a      	ldr	r2, [r7, #0]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	f043 0307 	orr.w	r3, r3, #7
 8007aa0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	68fa      	ldr	r2, [r7, #12]
 8007aa6:	609a      	str	r2, [r3, #8]
}
 8007aa8:	bf00      	nop
 8007aaa:	3714      	adds	r7, #20
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b087      	sub	sp, #28
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	607a      	str	r2, [r7, #4]
 8007ac0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ace:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	021a      	lsls	r2, r3, #8
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	431a      	orrs	r2, r3
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	4313      	orrs	r3, r2
 8007adc:	697a      	ldr	r2, [r7, #20]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	697a      	ldr	r2, [r7, #20]
 8007ae6:	609a      	str	r2, [r3, #8]
}
 8007ae8:	bf00      	nop
 8007aea:	371c      	adds	r7, #28
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr

08007af4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b087      	sub	sp, #28
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	f003 031f 	and.w	r3, r3, #31
 8007b06:	2201      	movs	r2, #1
 8007b08:	fa02 f303 	lsl.w	r3, r2, r3
 8007b0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	6a1a      	ldr	r2, [r3, #32]
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	43db      	mvns	r3, r3
 8007b16:	401a      	ands	r2, r3
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	6a1a      	ldr	r2, [r3, #32]
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	f003 031f 	and.w	r3, r3, #31
 8007b26:	6879      	ldr	r1, [r7, #4]
 8007b28:	fa01 f303 	lsl.w	r3, r1, r3
 8007b2c:	431a      	orrs	r2, r3
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	621a      	str	r2, [r3, #32]
}
 8007b32:	bf00      	nop
 8007b34:	371c      	adds	r7, #28
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr
	...

08007b40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b085      	sub	sp, #20
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d101      	bne.n	8007b58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b54:	2302      	movs	r3, #2
 8007b56:	e05a      	b.n	8007c0e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2202      	movs	r2, #2
 8007b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	4313      	orrs	r3, r2
 8007b88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	68fa      	ldr	r2, [r7, #12]
 8007b90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a21      	ldr	r2, [pc, #132]	; (8007c1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d022      	beq.n	8007be2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ba4:	d01d      	beq.n	8007be2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a1d      	ldr	r2, [pc, #116]	; (8007c20 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d018      	beq.n	8007be2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a1b      	ldr	r2, [pc, #108]	; (8007c24 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d013      	beq.n	8007be2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a1a      	ldr	r2, [pc, #104]	; (8007c28 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d00e      	beq.n	8007be2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a18      	ldr	r2, [pc, #96]	; (8007c2c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d009      	beq.n	8007be2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a17      	ldr	r2, [pc, #92]	; (8007c30 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d004      	beq.n	8007be2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a15      	ldr	r2, [pc, #84]	; (8007c34 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d10c      	bne.n	8007bfc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007be8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	68ba      	ldr	r2, [r7, #8]
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68ba      	ldr	r2, [r7, #8]
 8007bfa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c0c:	2300      	movs	r3, #0
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3714      	adds	r7, #20
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr
 8007c1a:	bf00      	nop
 8007c1c:	40010000 	.word	0x40010000
 8007c20:	40000400 	.word	0x40000400
 8007c24:	40000800 	.word	0x40000800
 8007c28:	40000c00 	.word	0x40000c00
 8007c2c:	40010400 	.word	0x40010400
 8007c30:	40014000 	.word	0x40014000
 8007c34:	40001800 	.word	0x40001800

08007c38 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007c42:	2300      	movs	r3, #0
 8007c44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d101      	bne.n	8007c54 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007c50:	2302      	movs	r3, #2
 8007c52:	e03d      	b.n	8007cd0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2201      	movs	r2, #1
 8007c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	4313      	orrs	r3, r2
 8007c76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4313      	orrs	r3, r2
 8007c92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	691b      	ldr	r3, [r3, #16]
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	695b      	ldr	r3, [r3, #20]
 8007cac:	4313      	orrs	r3, r2
 8007cae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	69db      	ldr	r3, [r3, #28]
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	68fa      	ldr	r2, [r7, #12]
 8007cc4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cce:	2300      	movs	r3, #0
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3714      	adds	r7, #20
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ce4:	bf00      	nop
 8007ce6:	370c      	adds	r7, #12
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr

08007cf0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007cf8:	bf00      	nop
 8007cfa:	370c      	adds	r7, #12
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d101      	bne.n	8007d16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	e042      	b.n	8007d9c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d106      	bne.n	8007d30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f7fb fa14 	bl	8003158 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2224      	movs	r2, #36	; 0x24
 8007d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	68da      	ldr	r2, [r3, #12]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 fdbd 	bl	80088c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	691a      	ldr	r2, [r3, #16]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	695a      	ldr	r2, [r3, #20]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	68da      	ldr	r2, [r3, #12]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007d7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2220      	movs	r2, #32
 8007d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2220      	movs	r2, #32
 8007d90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007d9a:	2300      	movs	r3, #0
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3708      	adds	r7, #8
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b08a      	sub	sp, #40	; 0x28
 8007da8:	af02      	add	r7, sp, #8
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	603b      	str	r3, [r7, #0]
 8007db0:	4613      	mov	r3, r2
 8007db2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007db4:	2300      	movs	r3, #0
 8007db6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	2b20      	cmp	r3, #32
 8007dc2:	d175      	bne.n	8007eb0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d002      	beq.n	8007dd0 <HAL_UART_Transmit+0x2c>
 8007dca:	88fb      	ldrh	r3, [r7, #6]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d101      	bne.n	8007dd4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e06e      	b.n	8007eb2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2221      	movs	r2, #33	; 0x21
 8007dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007de2:	f7fb ff39 	bl	8003c58 <HAL_GetTick>
 8007de6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	88fa      	ldrh	r2, [r7, #6]
 8007dec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	88fa      	ldrh	r2, [r7, #6]
 8007df2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dfc:	d108      	bne.n	8007e10 <HAL_UART_Transmit+0x6c>
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	691b      	ldr	r3, [r3, #16]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d104      	bne.n	8007e10 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007e06:	2300      	movs	r3, #0
 8007e08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	61bb      	str	r3, [r7, #24]
 8007e0e:	e003      	b.n	8007e18 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e14:	2300      	movs	r3, #0
 8007e16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007e18:	e02e      	b.n	8007e78 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	9300      	str	r3, [sp, #0]
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	2200      	movs	r2, #0
 8007e22:	2180      	movs	r1, #128	; 0x80
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	f000 fb1f 	bl	8008468 <UART_WaitOnFlagUntilTimeout>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d005      	beq.n	8007e3c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2220      	movs	r2, #32
 8007e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8007e38:	2303      	movs	r3, #3
 8007e3a:	e03a      	b.n	8007eb2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007e3c:	69fb      	ldr	r3, [r7, #28]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d10b      	bne.n	8007e5a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	881b      	ldrh	r3, [r3, #0]
 8007e46:	461a      	mov	r2, r3
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007e52:	69bb      	ldr	r3, [r7, #24]
 8007e54:	3302      	adds	r3, #2
 8007e56:	61bb      	str	r3, [r7, #24]
 8007e58:	e007      	b.n	8007e6a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e5a:	69fb      	ldr	r3, [r7, #28]
 8007e5c:	781a      	ldrb	r2, [r3, #0]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	3301      	adds	r3, #1
 8007e68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	3b01      	subs	r3, #1
 8007e72:	b29a      	uxth	r2, r3
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d1cb      	bne.n	8007e1a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	9300      	str	r3, [sp, #0]
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	2140      	movs	r1, #64	; 0x40
 8007e8c:	68f8      	ldr	r0, [r7, #12]
 8007e8e:	f000 faeb 	bl	8008468 <UART_WaitOnFlagUntilTimeout>
 8007e92:	4603      	mov	r3, r0
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d005      	beq.n	8007ea4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2220      	movs	r2, #32
 8007e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8007ea0:	2303      	movs	r3, #3
 8007ea2:	e006      	b.n	8007eb2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2220      	movs	r2, #32
 8007ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8007eac:	2300      	movs	r3, #0
 8007eae:	e000      	b.n	8007eb2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007eb0:	2302      	movs	r3, #2
  }
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3720      	adds	r7, #32
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}

08007eba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b084      	sub	sp, #16
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	60f8      	str	r0, [r7, #12]
 8007ec2:	60b9      	str	r1, [r7, #8]
 8007ec4:	4613      	mov	r3, r2
 8007ec6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	2b20      	cmp	r3, #32
 8007ed2:	d112      	bne.n	8007efa <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d002      	beq.n	8007ee0 <HAL_UART_Receive_IT+0x26>
 8007eda:	88fb      	ldrh	r3, [r7, #6]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d101      	bne.n	8007ee4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e00b      	b.n	8007efc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007eea:	88fb      	ldrh	r3, [r7, #6]
 8007eec:	461a      	mov	r2, r3
 8007eee:	68b9      	ldr	r1, [r7, #8]
 8007ef0:	68f8      	ldr	r0, [r7, #12]
 8007ef2:	f000 fb12 	bl	800851a <UART_Start_Receive_IT>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	e000      	b.n	8007efc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007efa:	2302      	movs	r3, #2
  }
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3710      	adds	r7, #16
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b0ba      	sub	sp, #232	; 0xe8
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	695b      	ldr	r3, [r3, #20]
 8007f26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007f30:	2300      	movs	r3, #0
 8007f32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f3a:	f003 030f 	and.w	r3, r3, #15
 8007f3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007f42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d10f      	bne.n	8007f6a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f4e:	f003 0320 	and.w	r3, r3, #32
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d009      	beq.n	8007f6a <HAL_UART_IRQHandler+0x66>
 8007f56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f5a:	f003 0320 	and.w	r3, r3, #32
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d003      	beq.n	8007f6a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 fbf2 	bl	800874c <UART_Receive_IT>
      return;
 8007f68:	e25b      	b.n	8008422 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007f6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	f000 80de 	beq.w	8008130 <HAL_UART_IRQHandler+0x22c>
 8007f74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f78:	f003 0301 	and.w	r3, r3, #1
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d106      	bne.n	8007f8e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f84:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	f000 80d1 	beq.w	8008130 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f92:	f003 0301 	and.w	r3, r3, #1
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d00b      	beq.n	8007fb2 <HAL_UART_IRQHandler+0xae>
 8007f9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d005      	beq.n	8007fb2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007faa:	f043 0201 	orr.w	r2, r3, #1
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fb6:	f003 0304 	and.w	r3, r3, #4
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00b      	beq.n	8007fd6 <HAL_UART_IRQHandler+0xd2>
 8007fbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fc2:	f003 0301 	and.w	r3, r3, #1
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d005      	beq.n	8007fd6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fce:	f043 0202 	orr.w	r2, r3, #2
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fda:	f003 0302 	and.w	r3, r3, #2
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d00b      	beq.n	8007ffa <HAL_UART_IRQHandler+0xf6>
 8007fe2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fe6:	f003 0301 	and.w	r3, r3, #1
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d005      	beq.n	8007ffa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ff2:	f043 0204 	orr.w	r2, r3, #4
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ffe:	f003 0308 	and.w	r3, r3, #8
 8008002:	2b00      	cmp	r3, #0
 8008004:	d011      	beq.n	800802a <HAL_UART_IRQHandler+0x126>
 8008006:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800800a:	f003 0320 	and.w	r3, r3, #32
 800800e:	2b00      	cmp	r3, #0
 8008010:	d105      	bne.n	800801e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008012:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008016:	f003 0301 	and.w	r3, r3, #1
 800801a:	2b00      	cmp	r3, #0
 800801c:	d005      	beq.n	800802a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008022:	f043 0208 	orr.w	r2, r3, #8
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800802e:	2b00      	cmp	r3, #0
 8008030:	f000 81f2 	beq.w	8008418 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008038:	f003 0320 	and.w	r3, r3, #32
 800803c:	2b00      	cmp	r3, #0
 800803e:	d008      	beq.n	8008052 <HAL_UART_IRQHandler+0x14e>
 8008040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008044:	f003 0320 	and.w	r3, r3, #32
 8008048:	2b00      	cmp	r3, #0
 800804a:	d002      	beq.n	8008052 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 fb7d 	bl	800874c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	695b      	ldr	r3, [r3, #20]
 8008058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800805c:	2b40      	cmp	r3, #64	; 0x40
 800805e:	bf0c      	ite	eq
 8008060:	2301      	moveq	r3, #1
 8008062:	2300      	movne	r3, #0
 8008064:	b2db      	uxtb	r3, r3
 8008066:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800806e:	f003 0308 	and.w	r3, r3, #8
 8008072:	2b00      	cmp	r3, #0
 8008074:	d103      	bne.n	800807e <HAL_UART_IRQHandler+0x17a>
 8008076:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800807a:	2b00      	cmp	r3, #0
 800807c:	d04f      	beq.n	800811e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 fa85 	bl	800858e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	695b      	ldr	r3, [r3, #20]
 800808a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800808e:	2b40      	cmp	r3, #64	; 0x40
 8008090:	d141      	bne.n	8008116 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	3314      	adds	r3, #20
 8008098:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800809c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80080a0:	e853 3f00 	ldrex	r3, [r3]
 80080a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80080a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80080ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	3314      	adds	r3, #20
 80080ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80080be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80080c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80080ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80080ce:	e841 2300 	strex	r3, r2, [r1]
 80080d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80080d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d1d9      	bne.n	8008092 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d013      	beq.n	800810e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080ea:	4a7e      	ldr	r2, [pc, #504]	; (80082e4 <HAL_UART_IRQHandler+0x3e0>)
 80080ec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7fc fda4 	bl	8004c40 <HAL_DMA_Abort_IT>
 80080f8:	4603      	mov	r3, r0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d016      	beq.n	800812c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008104:	687a      	ldr	r2, [r7, #4]
 8008106:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008108:	4610      	mov	r0, r2
 800810a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800810c:	e00e      	b.n	800812c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 f994 	bl	800843c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008114:	e00a      	b.n	800812c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 f990 	bl	800843c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800811c:	e006      	b.n	800812c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 f98c 	bl	800843c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800812a:	e175      	b.n	8008418 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800812c:	bf00      	nop
    return;
 800812e:	e173      	b.n	8008418 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008134:	2b01      	cmp	r3, #1
 8008136:	f040 814f 	bne.w	80083d8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800813a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800813e:	f003 0310 	and.w	r3, r3, #16
 8008142:	2b00      	cmp	r3, #0
 8008144:	f000 8148 	beq.w	80083d8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800814c:	f003 0310 	and.w	r3, r3, #16
 8008150:	2b00      	cmp	r3, #0
 8008152:	f000 8141 	beq.w	80083d8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008156:	2300      	movs	r3, #0
 8008158:	60bb      	str	r3, [r7, #8]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	60bb      	str	r3, [r7, #8]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	60bb      	str	r3, [r7, #8]
 800816a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	695b      	ldr	r3, [r3, #20]
 8008172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008176:	2b40      	cmp	r3, #64	; 0x40
 8008178:	f040 80b6 	bne.w	80082e8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008188:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800818c:	2b00      	cmp	r3, #0
 800818e:	f000 8145 	beq.w	800841c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008196:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800819a:	429a      	cmp	r2, r3
 800819c:	f080 813e 	bcs.w	800841c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80081a6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ac:	69db      	ldr	r3, [r3, #28]
 80081ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081b2:	f000 8088 	beq.w	80082c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	330c      	adds	r3, #12
 80081bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80081c4:	e853 3f00 	ldrex	r3, [r3]
 80081c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80081cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80081d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	330c      	adds	r3, #12
 80081de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80081e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80081e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80081ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80081f2:	e841 2300 	strex	r3, r2, [r1]
 80081f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80081fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d1d9      	bne.n	80081b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	3314      	adds	r3, #20
 8008208:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800820a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800820c:	e853 3f00 	ldrex	r3, [r3]
 8008210:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008212:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008214:	f023 0301 	bic.w	r3, r3, #1
 8008218:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	3314      	adds	r3, #20
 8008222:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008226:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800822a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800822c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800822e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008232:	e841 2300 	strex	r3, r2, [r1]
 8008236:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008238:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800823a:	2b00      	cmp	r3, #0
 800823c:	d1e1      	bne.n	8008202 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	3314      	adds	r3, #20
 8008244:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008246:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008248:	e853 3f00 	ldrex	r3, [r3]
 800824c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800824e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008250:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008254:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	3314      	adds	r3, #20
 800825e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008262:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008264:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008266:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008268:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800826a:	e841 2300 	strex	r3, r2, [r1]
 800826e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008270:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008272:	2b00      	cmp	r3, #0
 8008274:	d1e3      	bne.n	800823e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2220      	movs	r2, #32
 800827a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2200      	movs	r2, #0
 8008282:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	330c      	adds	r3, #12
 800828a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800828c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800828e:	e853 3f00 	ldrex	r3, [r3]
 8008292:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008294:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008296:	f023 0310 	bic.w	r3, r3, #16
 800829a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	330c      	adds	r3, #12
 80082a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80082a8:	65ba      	str	r2, [r7, #88]	; 0x58
 80082aa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80082ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80082b0:	e841 2300 	strex	r3, r2, [r1]
 80082b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80082b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d1e3      	bne.n	8008284 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082c0:	4618      	mov	r0, r3
 80082c2:	f7fc fc4d 	bl	8004b60 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2202      	movs	r2, #2
 80082ca:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	1ad3      	subs	r3, r2, r3
 80082d8:	b29b      	uxth	r3, r3
 80082da:	4619      	mov	r1, r3
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 f8b7 	bl	8008450 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80082e2:	e09b      	b.n	800841c <HAL_UART_IRQHandler+0x518>
 80082e4:	08008655 	.word	0x08008655
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	1ad3      	subs	r3, r2, r3
 80082f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	2b00      	cmp	r3, #0
 8008300:	f000 808e 	beq.w	8008420 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008304:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008308:	2b00      	cmp	r3, #0
 800830a:	f000 8089 	beq.w	8008420 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	330c      	adds	r3, #12
 8008314:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008318:	e853 3f00 	ldrex	r3, [r3]
 800831c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800831e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008320:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008324:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	330c      	adds	r3, #12
 800832e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008332:	647a      	str	r2, [r7, #68]	; 0x44
 8008334:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008336:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008338:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800833a:	e841 2300 	strex	r3, r2, [r1]
 800833e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008342:	2b00      	cmp	r3, #0
 8008344:	d1e3      	bne.n	800830e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	3314      	adds	r3, #20
 800834c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800834e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008350:	e853 3f00 	ldrex	r3, [r3]
 8008354:	623b      	str	r3, [r7, #32]
   return(result);
 8008356:	6a3b      	ldr	r3, [r7, #32]
 8008358:	f023 0301 	bic.w	r3, r3, #1
 800835c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	3314      	adds	r3, #20
 8008366:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800836a:	633a      	str	r2, [r7, #48]	; 0x30
 800836c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800836e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008372:	e841 2300 	strex	r3, r2, [r1]
 8008376:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800837a:	2b00      	cmp	r3, #0
 800837c:	d1e3      	bne.n	8008346 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2220      	movs	r2, #32
 8008382:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	330c      	adds	r3, #12
 8008392:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	e853 3f00 	ldrex	r3, [r3]
 800839a:	60fb      	str	r3, [r7, #12]
   return(result);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f023 0310 	bic.w	r3, r3, #16
 80083a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	330c      	adds	r3, #12
 80083ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80083b0:	61fa      	str	r2, [r7, #28]
 80083b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b4:	69b9      	ldr	r1, [r7, #24]
 80083b6:	69fa      	ldr	r2, [r7, #28]
 80083b8:	e841 2300 	strex	r3, r2, [r1]
 80083bc:	617b      	str	r3, [r7, #20]
   return(result);
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d1e3      	bne.n	800838c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2202      	movs	r2, #2
 80083c8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80083ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80083ce:	4619      	mov	r1, r3
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 f83d 	bl	8008450 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80083d6:	e023      	b.n	8008420 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80083d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d009      	beq.n	80083f8 <HAL_UART_IRQHandler+0x4f4>
 80083e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d003      	beq.n	80083f8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 f943 	bl	800867c <UART_Transmit_IT>
    return;
 80083f6:	e014      	b.n	8008422 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80083f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008400:	2b00      	cmp	r3, #0
 8008402:	d00e      	beq.n	8008422 <HAL_UART_IRQHandler+0x51e>
 8008404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800840c:	2b00      	cmp	r3, #0
 800840e:	d008      	beq.n	8008422 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 f983 	bl	800871c <UART_EndTransmit_IT>
    return;
 8008416:	e004      	b.n	8008422 <HAL_UART_IRQHandler+0x51e>
    return;
 8008418:	bf00      	nop
 800841a:	e002      	b.n	8008422 <HAL_UART_IRQHandler+0x51e>
      return;
 800841c:	bf00      	nop
 800841e:	e000      	b.n	8008422 <HAL_UART_IRQHandler+0x51e>
      return;
 8008420:	bf00      	nop
  }
}
 8008422:	37e8      	adds	r7, #232	; 0xe8
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008428:	b480      	push	{r7}
 800842a:	b083      	sub	sp, #12
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008430:	bf00      	nop
 8008432:	370c      	adds	r7, #12
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr

0800843c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008444:	bf00      	nop
 8008446:	370c      	adds	r7, #12
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr

08008450 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008450:	b480      	push	{r7}
 8008452:	b083      	sub	sp, #12
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	460b      	mov	r3, r1
 800845a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800845c:	bf00      	nop
 800845e:	370c      	adds	r7, #12
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr

08008468 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b086      	sub	sp, #24
 800846c:	af00      	add	r7, sp, #0
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	60b9      	str	r1, [r7, #8]
 8008472:	603b      	str	r3, [r7, #0]
 8008474:	4613      	mov	r3, r2
 8008476:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008478:	e03b      	b.n	80084f2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800847a:	6a3b      	ldr	r3, [r7, #32]
 800847c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008480:	d037      	beq.n	80084f2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008482:	f7fb fbe9 	bl	8003c58 <HAL_GetTick>
 8008486:	4602      	mov	r2, r0
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	1ad3      	subs	r3, r2, r3
 800848c:	6a3a      	ldr	r2, [r7, #32]
 800848e:	429a      	cmp	r2, r3
 8008490:	d302      	bcc.n	8008498 <UART_WaitOnFlagUntilTimeout+0x30>
 8008492:	6a3b      	ldr	r3, [r7, #32]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d101      	bne.n	800849c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008498:	2303      	movs	r3, #3
 800849a:	e03a      	b.n	8008512 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	f003 0304 	and.w	r3, r3, #4
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d023      	beq.n	80084f2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	2b80      	cmp	r3, #128	; 0x80
 80084ae:	d020      	beq.n	80084f2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	2b40      	cmp	r3, #64	; 0x40
 80084b4:	d01d      	beq.n	80084f2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f003 0308 	and.w	r3, r3, #8
 80084c0:	2b08      	cmp	r3, #8
 80084c2:	d116      	bne.n	80084f2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80084c4:	2300      	movs	r3, #0
 80084c6:	617b      	str	r3, [r7, #20]
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	617b      	str	r3, [r7, #20]
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	617b      	str	r3, [r7, #20]
 80084d8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80084da:	68f8      	ldr	r0, [r7, #12]
 80084dc:	f000 f857 	bl	800858e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2208      	movs	r2, #8
 80084e4:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2200      	movs	r2, #0
 80084ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80084ee:	2301      	movs	r3, #1
 80084f0:	e00f      	b.n	8008512 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	681a      	ldr	r2, [r3, #0]
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	4013      	ands	r3, r2
 80084fc:	68ba      	ldr	r2, [r7, #8]
 80084fe:	429a      	cmp	r2, r3
 8008500:	bf0c      	ite	eq
 8008502:	2301      	moveq	r3, #1
 8008504:	2300      	movne	r3, #0
 8008506:	b2db      	uxtb	r3, r3
 8008508:	461a      	mov	r2, r3
 800850a:	79fb      	ldrb	r3, [r7, #7]
 800850c:	429a      	cmp	r2, r3
 800850e:	d0b4      	beq.n	800847a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008510:	2300      	movs	r3, #0
}
 8008512:	4618      	mov	r0, r3
 8008514:	3718      	adds	r7, #24
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}

0800851a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800851a:	b480      	push	{r7}
 800851c:	b085      	sub	sp, #20
 800851e:	af00      	add	r7, sp, #0
 8008520:	60f8      	str	r0, [r7, #12]
 8008522:	60b9      	str	r1, [r7, #8]
 8008524:	4613      	mov	r3, r2
 8008526:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	68ba      	ldr	r2, [r7, #8]
 800852c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	88fa      	ldrh	r2, [r7, #6]
 8008532:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	88fa      	ldrh	r2, [r7, #6]
 8008538:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2200      	movs	r2, #0
 800853e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2222      	movs	r2, #34	; 0x22
 8008544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	691b      	ldr	r3, [r3, #16]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d007      	beq.n	8008560 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	68da      	ldr	r2, [r3, #12]
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800855e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	695a      	ldr	r2, [r3, #20]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f042 0201 	orr.w	r2, r2, #1
 800856e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	68da      	ldr	r2, [r3, #12]
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f042 0220 	orr.w	r2, r2, #32
 800857e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008580:	2300      	movs	r3, #0
}
 8008582:	4618      	mov	r0, r3
 8008584:	3714      	adds	r7, #20
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr

0800858e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800858e:	b480      	push	{r7}
 8008590:	b095      	sub	sp, #84	; 0x54
 8008592:	af00      	add	r7, sp, #0
 8008594:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	330c      	adds	r3, #12
 800859c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800859e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085a0:	e853 3f00 	ldrex	r3, [r3]
 80085a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80085a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	330c      	adds	r3, #12
 80085b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80085b6:	643a      	str	r2, [r7, #64]	; 0x40
 80085b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80085bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80085be:	e841 2300 	strex	r3, r2, [r1]
 80085c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80085c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d1e5      	bne.n	8008596 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	3314      	adds	r3, #20
 80085d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d2:	6a3b      	ldr	r3, [r7, #32]
 80085d4:	e853 3f00 	ldrex	r3, [r3]
 80085d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80085da:	69fb      	ldr	r3, [r7, #28]
 80085dc:	f023 0301 	bic.w	r3, r3, #1
 80085e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	3314      	adds	r3, #20
 80085e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80085ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085f2:	e841 2300 	strex	r3, r2, [r1]
 80085f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d1e5      	bne.n	80085ca <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008602:	2b01      	cmp	r3, #1
 8008604:	d119      	bne.n	800863a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	330c      	adds	r3, #12
 800860c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	e853 3f00 	ldrex	r3, [r3]
 8008614:	60bb      	str	r3, [r7, #8]
   return(result);
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	f023 0310 	bic.w	r3, r3, #16
 800861c:	647b      	str	r3, [r7, #68]	; 0x44
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	330c      	adds	r3, #12
 8008624:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008626:	61ba      	str	r2, [r7, #24]
 8008628:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800862a:	6979      	ldr	r1, [r7, #20]
 800862c:	69ba      	ldr	r2, [r7, #24]
 800862e:	e841 2300 	strex	r3, r2, [r1]
 8008632:	613b      	str	r3, [r7, #16]
   return(result);
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d1e5      	bne.n	8008606 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2220      	movs	r2, #32
 800863e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2200      	movs	r2, #0
 8008646:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008648:	bf00      	nop
 800864a:	3754      	adds	r7, #84	; 0x54
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008660:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2200      	movs	r2, #0
 8008666:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2200      	movs	r2, #0
 800866c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800866e:	68f8      	ldr	r0, [r7, #12]
 8008670:	f7ff fee4 	bl	800843c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008674:	bf00      	nop
 8008676:	3710      	adds	r7, #16
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800867c:	b480      	push	{r7}
 800867e:	b085      	sub	sp, #20
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800868a:	b2db      	uxtb	r3, r3
 800868c:	2b21      	cmp	r3, #33	; 0x21
 800868e:	d13e      	bne.n	800870e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008698:	d114      	bne.n	80086c4 <UART_Transmit_IT+0x48>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	691b      	ldr	r3, [r3, #16]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d110      	bne.n	80086c4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6a1b      	ldr	r3, [r3, #32]
 80086a6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	881b      	ldrh	r3, [r3, #0]
 80086ac:	461a      	mov	r2, r3
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80086b6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6a1b      	ldr	r3, [r3, #32]
 80086bc:	1c9a      	adds	r2, r3, #2
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	621a      	str	r2, [r3, #32]
 80086c2:	e008      	b.n	80086d6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6a1b      	ldr	r3, [r3, #32]
 80086c8:	1c59      	adds	r1, r3, #1
 80086ca:	687a      	ldr	r2, [r7, #4]
 80086cc:	6211      	str	r1, [r2, #32]
 80086ce:	781a      	ldrb	r2, [r3, #0]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80086da:	b29b      	uxth	r3, r3
 80086dc:	3b01      	subs	r3, #1
 80086de:	b29b      	uxth	r3, r3
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	4619      	mov	r1, r3
 80086e4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d10f      	bne.n	800870a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	68da      	ldr	r2, [r3, #12]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80086f8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	68da      	ldr	r2, [r3, #12]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008708:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800870a:	2300      	movs	r3, #0
 800870c:	e000      	b.n	8008710 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800870e:	2302      	movs	r3, #2
  }
}
 8008710:	4618      	mov	r0, r3
 8008712:	3714      	adds	r7, #20
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	68da      	ldr	r2, [r3, #12]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008732:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2220      	movs	r2, #32
 8008738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f7ff fe73 	bl	8008428 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008742:	2300      	movs	r3, #0
}
 8008744:	4618      	mov	r0, r3
 8008746:	3708      	adds	r7, #8
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b08c      	sub	sp, #48	; 0x30
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800875a:	b2db      	uxtb	r3, r3
 800875c:	2b22      	cmp	r3, #34	; 0x22
 800875e:	f040 80ae 	bne.w	80088be <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800876a:	d117      	bne.n	800879c <UART_Receive_IT+0x50>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	691b      	ldr	r3, [r3, #16]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d113      	bne.n	800879c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008774:	2300      	movs	r3, #0
 8008776:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800877c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	b29b      	uxth	r3, r3
 8008786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800878a:	b29a      	uxth	r2, r3
 800878c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800878e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008794:	1c9a      	adds	r2, r3, #2
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	629a      	str	r2, [r3, #40]	; 0x28
 800879a:	e026      	b.n	80087ea <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80087a2:	2300      	movs	r3, #0
 80087a4:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087ae:	d007      	beq.n	80087c0 <UART_Receive_IT+0x74>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d10a      	bne.n	80087ce <UART_Receive_IT+0x82>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	691b      	ldr	r3, [r3, #16]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d106      	bne.n	80087ce <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	b2da      	uxtb	r2, r3
 80087c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ca:	701a      	strb	r2, [r3, #0]
 80087cc:	e008      	b.n	80087e0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087da:	b2da      	uxtb	r2, r3
 80087dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087de:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087e4:	1c5a      	adds	r2, r3, #1
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	3b01      	subs	r3, #1
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	4619      	mov	r1, r3
 80087f8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d15d      	bne.n	80088ba <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	68da      	ldr	r2, [r3, #12]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f022 0220 	bic.w	r2, r2, #32
 800880c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68da      	ldr	r2, [r3, #12]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800881c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	695a      	ldr	r2, [r3, #20]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f022 0201 	bic.w	r2, r2, #1
 800882c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2220      	movs	r2, #32
 8008832:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008840:	2b01      	cmp	r3, #1
 8008842:	d135      	bne.n	80088b0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2200      	movs	r2, #0
 8008848:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	330c      	adds	r3, #12
 8008850:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	e853 3f00 	ldrex	r3, [r3]
 8008858:	613b      	str	r3, [r7, #16]
   return(result);
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	f023 0310 	bic.w	r3, r3, #16
 8008860:	627b      	str	r3, [r7, #36]	; 0x24
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	330c      	adds	r3, #12
 8008868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800886a:	623a      	str	r2, [r7, #32]
 800886c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800886e:	69f9      	ldr	r1, [r7, #28]
 8008870:	6a3a      	ldr	r2, [r7, #32]
 8008872:	e841 2300 	strex	r3, r2, [r1]
 8008876:	61bb      	str	r3, [r7, #24]
   return(result);
 8008878:	69bb      	ldr	r3, [r7, #24]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d1e5      	bne.n	800884a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f003 0310 	and.w	r3, r3, #16
 8008888:	2b10      	cmp	r3, #16
 800888a:	d10a      	bne.n	80088a2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800888c:	2300      	movs	r3, #0
 800888e:	60fb      	str	r3, [r7, #12]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	60fb      	str	r3, [r7, #12]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	60fb      	str	r3, [r7, #12]
 80088a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80088a6:	4619      	mov	r1, r3
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f7ff fdd1 	bl	8008450 <HAL_UARTEx_RxEventCallback>
 80088ae:	e002      	b.n	80088b6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f7f8 fbd9 	bl	8001068 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80088b6:	2300      	movs	r3, #0
 80088b8:	e002      	b.n	80088c0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80088ba:	2300      	movs	r3, #0
 80088bc:	e000      	b.n	80088c0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80088be:	2302      	movs	r3, #2
  }
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3730      	adds	r7, #48	; 0x30
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80088c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80088cc:	b0c0      	sub	sp, #256	; 0x100
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80088d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	691b      	ldr	r3, [r3, #16]
 80088dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80088e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088e4:	68d9      	ldr	r1, [r3, #12]
 80088e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	ea40 0301 	orr.w	r3, r0, r1
 80088f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80088f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088f6:	689a      	ldr	r2, [r3, #8]
 80088f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088fc:	691b      	ldr	r3, [r3, #16]
 80088fe:	431a      	orrs	r2, r3
 8008900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008904:	695b      	ldr	r3, [r3, #20]
 8008906:	431a      	orrs	r2, r3
 8008908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800890c:	69db      	ldr	r3, [r3, #28]
 800890e:	4313      	orrs	r3, r2
 8008910:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008920:	f021 010c 	bic.w	r1, r1, #12
 8008924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800892e:	430b      	orrs	r3, r1
 8008930:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	695b      	ldr	r3, [r3, #20]
 800893a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800893e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008942:	6999      	ldr	r1, [r3, #24]
 8008944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	ea40 0301 	orr.w	r3, r0, r1
 800894e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008954:	681a      	ldr	r2, [r3, #0]
 8008956:	4b8f      	ldr	r3, [pc, #572]	; (8008b94 <UART_SetConfig+0x2cc>)
 8008958:	429a      	cmp	r2, r3
 800895a:	d005      	beq.n	8008968 <UART_SetConfig+0xa0>
 800895c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	4b8d      	ldr	r3, [pc, #564]	; (8008b98 <UART_SetConfig+0x2d0>)
 8008964:	429a      	cmp	r2, r3
 8008966:	d104      	bne.n	8008972 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008968:	f7fd fe8e 	bl	8006688 <HAL_RCC_GetPCLK2Freq>
 800896c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008970:	e003      	b.n	800897a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008972:	f7fd fe75 	bl	8006660 <HAL_RCC_GetPCLK1Freq>
 8008976:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800897a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800897e:	69db      	ldr	r3, [r3, #28]
 8008980:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008984:	f040 810c 	bne.w	8008ba0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008988:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800898c:	2200      	movs	r2, #0
 800898e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008992:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008996:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800899a:	4622      	mov	r2, r4
 800899c:	462b      	mov	r3, r5
 800899e:	1891      	adds	r1, r2, r2
 80089a0:	65b9      	str	r1, [r7, #88]	; 0x58
 80089a2:	415b      	adcs	r3, r3
 80089a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80089a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80089aa:	4621      	mov	r1, r4
 80089ac:	eb12 0801 	adds.w	r8, r2, r1
 80089b0:	4629      	mov	r1, r5
 80089b2:	eb43 0901 	adc.w	r9, r3, r1
 80089b6:	f04f 0200 	mov.w	r2, #0
 80089ba:	f04f 0300 	mov.w	r3, #0
 80089be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80089c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80089c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80089ca:	4690      	mov	r8, r2
 80089cc:	4699      	mov	r9, r3
 80089ce:	4623      	mov	r3, r4
 80089d0:	eb18 0303 	adds.w	r3, r8, r3
 80089d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80089d8:	462b      	mov	r3, r5
 80089da:	eb49 0303 	adc.w	r3, r9, r3
 80089de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80089e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	2200      	movs	r2, #0
 80089ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80089ee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80089f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80089f6:	460b      	mov	r3, r1
 80089f8:	18db      	adds	r3, r3, r3
 80089fa:	653b      	str	r3, [r7, #80]	; 0x50
 80089fc:	4613      	mov	r3, r2
 80089fe:	eb42 0303 	adc.w	r3, r2, r3
 8008a02:	657b      	str	r3, [r7, #84]	; 0x54
 8008a04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008a08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008a0c:	f7f8 f94c 	bl	8000ca8 <__aeabi_uldivmod>
 8008a10:	4602      	mov	r2, r0
 8008a12:	460b      	mov	r3, r1
 8008a14:	4b61      	ldr	r3, [pc, #388]	; (8008b9c <UART_SetConfig+0x2d4>)
 8008a16:	fba3 2302 	umull	r2, r3, r3, r2
 8008a1a:	095b      	lsrs	r3, r3, #5
 8008a1c:	011c      	lsls	r4, r3, #4
 8008a1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a22:	2200      	movs	r2, #0
 8008a24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008a28:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008a2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008a30:	4642      	mov	r2, r8
 8008a32:	464b      	mov	r3, r9
 8008a34:	1891      	adds	r1, r2, r2
 8008a36:	64b9      	str	r1, [r7, #72]	; 0x48
 8008a38:	415b      	adcs	r3, r3
 8008a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008a40:	4641      	mov	r1, r8
 8008a42:	eb12 0a01 	adds.w	sl, r2, r1
 8008a46:	4649      	mov	r1, r9
 8008a48:	eb43 0b01 	adc.w	fp, r3, r1
 8008a4c:	f04f 0200 	mov.w	r2, #0
 8008a50:	f04f 0300 	mov.w	r3, #0
 8008a54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008a58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008a5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008a60:	4692      	mov	sl, r2
 8008a62:	469b      	mov	fp, r3
 8008a64:	4643      	mov	r3, r8
 8008a66:	eb1a 0303 	adds.w	r3, sl, r3
 8008a6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008a6e:	464b      	mov	r3, r9
 8008a70:	eb4b 0303 	adc.w	r3, fp, r3
 8008a74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008a84:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008a88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	18db      	adds	r3, r3, r3
 8008a90:	643b      	str	r3, [r7, #64]	; 0x40
 8008a92:	4613      	mov	r3, r2
 8008a94:	eb42 0303 	adc.w	r3, r2, r3
 8008a98:	647b      	str	r3, [r7, #68]	; 0x44
 8008a9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008a9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008aa2:	f7f8 f901 	bl	8000ca8 <__aeabi_uldivmod>
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	4611      	mov	r1, r2
 8008aac:	4b3b      	ldr	r3, [pc, #236]	; (8008b9c <UART_SetConfig+0x2d4>)
 8008aae:	fba3 2301 	umull	r2, r3, r3, r1
 8008ab2:	095b      	lsrs	r3, r3, #5
 8008ab4:	2264      	movs	r2, #100	; 0x64
 8008ab6:	fb02 f303 	mul.w	r3, r2, r3
 8008aba:	1acb      	subs	r3, r1, r3
 8008abc:	00db      	lsls	r3, r3, #3
 8008abe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008ac2:	4b36      	ldr	r3, [pc, #216]	; (8008b9c <UART_SetConfig+0x2d4>)
 8008ac4:	fba3 2302 	umull	r2, r3, r3, r2
 8008ac8:	095b      	lsrs	r3, r3, #5
 8008aca:	005b      	lsls	r3, r3, #1
 8008acc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008ad0:	441c      	add	r4, r3
 8008ad2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008adc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008ae0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008ae4:	4642      	mov	r2, r8
 8008ae6:	464b      	mov	r3, r9
 8008ae8:	1891      	adds	r1, r2, r2
 8008aea:	63b9      	str	r1, [r7, #56]	; 0x38
 8008aec:	415b      	adcs	r3, r3
 8008aee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008af0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008af4:	4641      	mov	r1, r8
 8008af6:	1851      	adds	r1, r2, r1
 8008af8:	6339      	str	r1, [r7, #48]	; 0x30
 8008afa:	4649      	mov	r1, r9
 8008afc:	414b      	adcs	r3, r1
 8008afe:	637b      	str	r3, [r7, #52]	; 0x34
 8008b00:	f04f 0200 	mov.w	r2, #0
 8008b04:	f04f 0300 	mov.w	r3, #0
 8008b08:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008b0c:	4659      	mov	r1, fp
 8008b0e:	00cb      	lsls	r3, r1, #3
 8008b10:	4651      	mov	r1, sl
 8008b12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b16:	4651      	mov	r1, sl
 8008b18:	00ca      	lsls	r2, r1, #3
 8008b1a:	4610      	mov	r0, r2
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	4603      	mov	r3, r0
 8008b20:	4642      	mov	r2, r8
 8008b22:	189b      	adds	r3, r3, r2
 8008b24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008b28:	464b      	mov	r3, r9
 8008b2a:	460a      	mov	r2, r1
 8008b2c:	eb42 0303 	adc.w	r3, r2, r3
 8008b30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008b40:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008b44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008b48:	460b      	mov	r3, r1
 8008b4a:	18db      	adds	r3, r3, r3
 8008b4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b4e:	4613      	mov	r3, r2
 8008b50:	eb42 0303 	adc.w	r3, r2, r3
 8008b54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008b5a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008b5e:	f7f8 f8a3 	bl	8000ca8 <__aeabi_uldivmod>
 8008b62:	4602      	mov	r2, r0
 8008b64:	460b      	mov	r3, r1
 8008b66:	4b0d      	ldr	r3, [pc, #52]	; (8008b9c <UART_SetConfig+0x2d4>)
 8008b68:	fba3 1302 	umull	r1, r3, r3, r2
 8008b6c:	095b      	lsrs	r3, r3, #5
 8008b6e:	2164      	movs	r1, #100	; 0x64
 8008b70:	fb01 f303 	mul.w	r3, r1, r3
 8008b74:	1ad3      	subs	r3, r2, r3
 8008b76:	00db      	lsls	r3, r3, #3
 8008b78:	3332      	adds	r3, #50	; 0x32
 8008b7a:	4a08      	ldr	r2, [pc, #32]	; (8008b9c <UART_SetConfig+0x2d4>)
 8008b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8008b80:	095b      	lsrs	r3, r3, #5
 8008b82:	f003 0207 	and.w	r2, r3, #7
 8008b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4422      	add	r2, r4
 8008b8e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008b90:	e106      	b.n	8008da0 <UART_SetConfig+0x4d8>
 8008b92:	bf00      	nop
 8008b94:	40011000 	.word	0x40011000
 8008b98:	40011400 	.word	0x40011400
 8008b9c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008ba0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008baa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008bae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008bb2:	4642      	mov	r2, r8
 8008bb4:	464b      	mov	r3, r9
 8008bb6:	1891      	adds	r1, r2, r2
 8008bb8:	6239      	str	r1, [r7, #32]
 8008bba:	415b      	adcs	r3, r3
 8008bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8008bbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008bc2:	4641      	mov	r1, r8
 8008bc4:	1854      	adds	r4, r2, r1
 8008bc6:	4649      	mov	r1, r9
 8008bc8:	eb43 0501 	adc.w	r5, r3, r1
 8008bcc:	f04f 0200 	mov.w	r2, #0
 8008bd0:	f04f 0300 	mov.w	r3, #0
 8008bd4:	00eb      	lsls	r3, r5, #3
 8008bd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008bda:	00e2      	lsls	r2, r4, #3
 8008bdc:	4614      	mov	r4, r2
 8008bde:	461d      	mov	r5, r3
 8008be0:	4643      	mov	r3, r8
 8008be2:	18e3      	adds	r3, r4, r3
 8008be4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008be8:	464b      	mov	r3, r9
 8008bea:	eb45 0303 	adc.w	r3, r5, r3
 8008bee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008bfe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008c02:	f04f 0200 	mov.w	r2, #0
 8008c06:	f04f 0300 	mov.w	r3, #0
 8008c0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008c0e:	4629      	mov	r1, r5
 8008c10:	008b      	lsls	r3, r1, #2
 8008c12:	4621      	mov	r1, r4
 8008c14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008c18:	4621      	mov	r1, r4
 8008c1a:	008a      	lsls	r2, r1, #2
 8008c1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008c20:	f7f8 f842 	bl	8000ca8 <__aeabi_uldivmod>
 8008c24:	4602      	mov	r2, r0
 8008c26:	460b      	mov	r3, r1
 8008c28:	4b60      	ldr	r3, [pc, #384]	; (8008dac <UART_SetConfig+0x4e4>)
 8008c2a:	fba3 2302 	umull	r2, r3, r3, r2
 8008c2e:	095b      	lsrs	r3, r3, #5
 8008c30:	011c      	lsls	r4, r3, #4
 8008c32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c36:	2200      	movs	r2, #0
 8008c38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008c3c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008c40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008c44:	4642      	mov	r2, r8
 8008c46:	464b      	mov	r3, r9
 8008c48:	1891      	adds	r1, r2, r2
 8008c4a:	61b9      	str	r1, [r7, #24]
 8008c4c:	415b      	adcs	r3, r3
 8008c4e:	61fb      	str	r3, [r7, #28]
 8008c50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008c54:	4641      	mov	r1, r8
 8008c56:	1851      	adds	r1, r2, r1
 8008c58:	6139      	str	r1, [r7, #16]
 8008c5a:	4649      	mov	r1, r9
 8008c5c:	414b      	adcs	r3, r1
 8008c5e:	617b      	str	r3, [r7, #20]
 8008c60:	f04f 0200 	mov.w	r2, #0
 8008c64:	f04f 0300 	mov.w	r3, #0
 8008c68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008c6c:	4659      	mov	r1, fp
 8008c6e:	00cb      	lsls	r3, r1, #3
 8008c70:	4651      	mov	r1, sl
 8008c72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c76:	4651      	mov	r1, sl
 8008c78:	00ca      	lsls	r2, r1, #3
 8008c7a:	4610      	mov	r0, r2
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	4603      	mov	r3, r0
 8008c80:	4642      	mov	r2, r8
 8008c82:	189b      	adds	r3, r3, r2
 8008c84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008c88:	464b      	mov	r3, r9
 8008c8a:	460a      	mov	r2, r1
 8008c8c:	eb42 0303 	adc.w	r3, r2, r3
 8008c90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8008c9e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008ca0:	f04f 0200 	mov.w	r2, #0
 8008ca4:	f04f 0300 	mov.w	r3, #0
 8008ca8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008cac:	4649      	mov	r1, r9
 8008cae:	008b      	lsls	r3, r1, #2
 8008cb0:	4641      	mov	r1, r8
 8008cb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008cb6:	4641      	mov	r1, r8
 8008cb8:	008a      	lsls	r2, r1, #2
 8008cba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008cbe:	f7f7 fff3 	bl	8000ca8 <__aeabi_uldivmod>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	4611      	mov	r1, r2
 8008cc8:	4b38      	ldr	r3, [pc, #224]	; (8008dac <UART_SetConfig+0x4e4>)
 8008cca:	fba3 2301 	umull	r2, r3, r3, r1
 8008cce:	095b      	lsrs	r3, r3, #5
 8008cd0:	2264      	movs	r2, #100	; 0x64
 8008cd2:	fb02 f303 	mul.w	r3, r2, r3
 8008cd6:	1acb      	subs	r3, r1, r3
 8008cd8:	011b      	lsls	r3, r3, #4
 8008cda:	3332      	adds	r3, #50	; 0x32
 8008cdc:	4a33      	ldr	r2, [pc, #204]	; (8008dac <UART_SetConfig+0x4e4>)
 8008cde:	fba2 2303 	umull	r2, r3, r2, r3
 8008ce2:	095b      	lsrs	r3, r3, #5
 8008ce4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ce8:	441c      	add	r4, r3
 8008cea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cee:	2200      	movs	r2, #0
 8008cf0:	673b      	str	r3, [r7, #112]	; 0x70
 8008cf2:	677a      	str	r2, [r7, #116]	; 0x74
 8008cf4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008cf8:	4642      	mov	r2, r8
 8008cfa:	464b      	mov	r3, r9
 8008cfc:	1891      	adds	r1, r2, r2
 8008cfe:	60b9      	str	r1, [r7, #8]
 8008d00:	415b      	adcs	r3, r3
 8008d02:	60fb      	str	r3, [r7, #12]
 8008d04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008d08:	4641      	mov	r1, r8
 8008d0a:	1851      	adds	r1, r2, r1
 8008d0c:	6039      	str	r1, [r7, #0]
 8008d0e:	4649      	mov	r1, r9
 8008d10:	414b      	adcs	r3, r1
 8008d12:	607b      	str	r3, [r7, #4]
 8008d14:	f04f 0200 	mov.w	r2, #0
 8008d18:	f04f 0300 	mov.w	r3, #0
 8008d1c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008d20:	4659      	mov	r1, fp
 8008d22:	00cb      	lsls	r3, r1, #3
 8008d24:	4651      	mov	r1, sl
 8008d26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d2a:	4651      	mov	r1, sl
 8008d2c:	00ca      	lsls	r2, r1, #3
 8008d2e:	4610      	mov	r0, r2
 8008d30:	4619      	mov	r1, r3
 8008d32:	4603      	mov	r3, r0
 8008d34:	4642      	mov	r2, r8
 8008d36:	189b      	adds	r3, r3, r2
 8008d38:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d3a:	464b      	mov	r3, r9
 8008d3c:	460a      	mov	r2, r1
 8008d3e:	eb42 0303 	adc.w	r3, r2, r3
 8008d42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	663b      	str	r3, [r7, #96]	; 0x60
 8008d4e:	667a      	str	r2, [r7, #100]	; 0x64
 8008d50:	f04f 0200 	mov.w	r2, #0
 8008d54:	f04f 0300 	mov.w	r3, #0
 8008d58:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008d5c:	4649      	mov	r1, r9
 8008d5e:	008b      	lsls	r3, r1, #2
 8008d60:	4641      	mov	r1, r8
 8008d62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d66:	4641      	mov	r1, r8
 8008d68:	008a      	lsls	r2, r1, #2
 8008d6a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008d6e:	f7f7 ff9b 	bl	8000ca8 <__aeabi_uldivmod>
 8008d72:	4602      	mov	r2, r0
 8008d74:	460b      	mov	r3, r1
 8008d76:	4b0d      	ldr	r3, [pc, #52]	; (8008dac <UART_SetConfig+0x4e4>)
 8008d78:	fba3 1302 	umull	r1, r3, r3, r2
 8008d7c:	095b      	lsrs	r3, r3, #5
 8008d7e:	2164      	movs	r1, #100	; 0x64
 8008d80:	fb01 f303 	mul.w	r3, r1, r3
 8008d84:	1ad3      	subs	r3, r2, r3
 8008d86:	011b      	lsls	r3, r3, #4
 8008d88:	3332      	adds	r3, #50	; 0x32
 8008d8a:	4a08      	ldr	r2, [pc, #32]	; (8008dac <UART_SetConfig+0x4e4>)
 8008d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8008d90:	095b      	lsrs	r3, r3, #5
 8008d92:	f003 020f 	and.w	r2, r3, #15
 8008d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4422      	add	r2, r4
 8008d9e:	609a      	str	r2, [r3, #8]
}
 8008da0:	bf00      	nop
 8008da2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008da6:	46bd      	mov	sp, r7
 8008da8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008dac:	51eb851f 	.word	0x51eb851f

08008db0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008db0:	b084      	sub	sp, #16
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b084      	sub	sp, #16
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
 8008dba:	f107 001c 	add.w	r0, r7, #28
 8008dbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008dc2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	d123      	bne.n	8008e12 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	68db      	ldr	r3, [r3, #12]
 8008dda:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008dde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	68db      	ldr	r3, [r3, #12]
 8008dea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008df2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008df6:	2b01      	cmp	r3, #1
 8008df8:	d105      	bne.n	8008e06 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	68db      	ldr	r3, [r3, #12]
 8008dfe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 faa0 	bl	800934c <USB_CoreReset>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	73fb      	strb	r3, [r7, #15]
 8008e10:	e01b      	b.n	8008e4a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	68db      	ldr	r3, [r3, #12]
 8008e16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 fa94 	bl	800934c <USB_CoreReset>
 8008e24:	4603      	mov	r3, r0
 8008e26:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008e28:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d106      	bne.n	8008e3e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e34:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	639a      	str	r2, [r3, #56]	; 0x38
 8008e3c:	e005      	b.n	8008e4a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e42:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008e4a:	7fbb      	ldrb	r3, [r7, #30]
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d10b      	bne.n	8008e68 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	689b      	ldr	r3, [r3, #8]
 8008e54:	f043 0206 	orr.w	r2, r3, #6
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	f043 0220 	orr.w	r2, r3, #32
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3710      	adds	r7, #16
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e74:	b004      	add	sp, #16
 8008e76:	4770      	bx	lr

08008e78 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b083      	sub	sp, #12
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	689b      	ldr	r3, [r3, #8]
 8008e84:	f023 0201 	bic.w	r2, r3, #1
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008e8c:	2300      	movs	r3, #0
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	370c      	adds	r7, #12
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr

08008e9a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008e9a:	b580      	push	{r7, lr}
 8008e9c:	b084      	sub	sp, #16
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	6078      	str	r0, [r7, #4]
 8008ea2:	460b      	mov	r3, r1
 8008ea4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	68db      	ldr	r3, [r3, #12]
 8008eae:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008eb6:	78fb      	ldrb	r3, [r7, #3]
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d115      	bne.n	8008ee8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	68db      	ldr	r3, [r3, #12]
 8008ec0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008ec8:	200a      	movs	r0, #10
 8008eca:	f7fa fed1 	bl	8003c70 <HAL_Delay>
      ms += 10U;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	330a      	adds	r3, #10
 8008ed2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 fa2b 	bl	8009330 <USB_GetMode>
 8008eda:	4603      	mov	r3, r0
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d01e      	beq.n	8008f1e <USB_SetCurrentMode+0x84>
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2bc7      	cmp	r3, #199	; 0xc7
 8008ee4:	d9f0      	bls.n	8008ec8 <USB_SetCurrentMode+0x2e>
 8008ee6:	e01a      	b.n	8008f1e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008ee8:	78fb      	ldrb	r3, [r7, #3]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d115      	bne.n	8008f1a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	68db      	ldr	r3, [r3, #12]
 8008ef2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008efa:	200a      	movs	r0, #10
 8008efc:	f7fa feb8 	bl	8003c70 <HAL_Delay>
      ms += 10U;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	330a      	adds	r3, #10
 8008f04:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f000 fa12 	bl	8009330 <USB_GetMode>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d005      	beq.n	8008f1e <USB_SetCurrentMode+0x84>
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2bc7      	cmp	r3, #199	; 0xc7
 8008f16:	d9f0      	bls.n	8008efa <USB_SetCurrentMode+0x60>
 8008f18:	e001      	b.n	8008f1e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	e005      	b.n	8008f2a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2bc8      	cmp	r3, #200	; 0xc8
 8008f22:	d101      	bne.n	8008f28 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008f24:	2301      	movs	r3, #1
 8008f26:	e000      	b.n	8008f2a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008f28:	2300      	movs	r3, #0
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3710      	adds	r7, #16
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
	...

08008f34 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008f34:	b084      	sub	sp, #16
 8008f36:	b580      	push	{r7, lr}
 8008f38:	b086      	sub	sp, #24
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
 8008f3e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008f42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008f46:	2300      	movs	r3, #0
 8008f48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008f4e:	2300      	movs	r3, #0
 8008f50:	613b      	str	r3, [r7, #16]
 8008f52:	e009      	b.n	8008f68 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008f54:	687a      	ldr	r2, [r7, #4]
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	3340      	adds	r3, #64	; 0x40
 8008f5a:	009b      	lsls	r3, r3, #2
 8008f5c:	4413      	add	r3, r2
 8008f5e:	2200      	movs	r2, #0
 8008f60:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	3301      	adds	r3, #1
 8008f66:	613b      	str	r3, [r7, #16]
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	2b0e      	cmp	r3, #14
 8008f6c:	d9f2      	bls.n	8008f54 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008f6e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d11c      	bne.n	8008fb0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	68fa      	ldr	r2, [r7, #12]
 8008f80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f84:	f043 0302 	orr.w	r3, r3, #2
 8008f88:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f8e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f9a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fa6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	639a      	str	r2, [r3, #56]	; 0x38
 8008fae:	e00b      	b.n	8008fc8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fb4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fc0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008fce:	461a      	mov	r2, r3
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008fd4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d10d      	bne.n	8008ff8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008fdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d104      	bne.n	8008fee <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008fe4:	2100      	movs	r1, #0
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 f968 	bl	80092bc <USB_SetDevSpeed>
 8008fec:	e008      	b.n	8009000 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008fee:	2101      	movs	r1, #1
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 f963 	bl	80092bc <USB_SetDevSpeed>
 8008ff6:	e003      	b.n	8009000 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008ff8:	2103      	movs	r1, #3
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 f95e 	bl	80092bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009000:	2110      	movs	r1, #16
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 f8fa 	bl	80091fc <USB_FlushTxFifo>
 8009008:	4603      	mov	r3, r0
 800900a:	2b00      	cmp	r3, #0
 800900c:	d001      	beq.n	8009012 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800900e:	2301      	movs	r3, #1
 8009010:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 f924 	bl	8009260 <USB_FlushRxFifo>
 8009018:	4603      	mov	r3, r0
 800901a:	2b00      	cmp	r3, #0
 800901c:	d001      	beq.n	8009022 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800901e:	2301      	movs	r3, #1
 8009020:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009028:	461a      	mov	r2, r3
 800902a:	2300      	movs	r3, #0
 800902c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009034:	461a      	mov	r2, r3
 8009036:	2300      	movs	r3, #0
 8009038:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009040:	461a      	mov	r2, r3
 8009042:	2300      	movs	r3, #0
 8009044:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009046:	2300      	movs	r3, #0
 8009048:	613b      	str	r3, [r7, #16]
 800904a:	e043      	b.n	80090d4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	015a      	lsls	r2, r3, #5
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	4413      	add	r3, r2
 8009054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800905e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009062:	d118      	bne.n	8009096 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d10a      	bne.n	8009080 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	015a      	lsls	r2, r3, #5
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	4413      	add	r3, r2
 8009072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009076:	461a      	mov	r2, r3
 8009078:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800907c:	6013      	str	r3, [r2, #0]
 800907e:	e013      	b.n	80090a8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	015a      	lsls	r2, r3, #5
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	4413      	add	r3, r2
 8009088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800908c:	461a      	mov	r2, r3
 800908e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009092:	6013      	str	r3, [r2, #0]
 8009094:	e008      	b.n	80090a8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	015a      	lsls	r2, r3, #5
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	4413      	add	r3, r2
 800909e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090a2:	461a      	mov	r2, r3
 80090a4:	2300      	movs	r3, #0
 80090a6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	015a      	lsls	r2, r3, #5
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	4413      	add	r3, r2
 80090b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090b4:	461a      	mov	r2, r3
 80090b6:	2300      	movs	r3, #0
 80090b8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	015a      	lsls	r2, r3, #5
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	4413      	add	r3, r2
 80090c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090c6:	461a      	mov	r2, r3
 80090c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80090cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	3301      	adds	r3, #1
 80090d2:	613b      	str	r3, [r7, #16]
 80090d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80090d8:	461a      	mov	r2, r3
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	4293      	cmp	r3, r2
 80090de:	d3b5      	bcc.n	800904c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80090e0:	2300      	movs	r3, #0
 80090e2:	613b      	str	r3, [r7, #16]
 80090e4:	e043      	b.n	800916e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	015a      	lsls	r2, r3, #5
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	4413      	add	r3, r2
 80090ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090fc:	d118      	bne.n	8009130 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d10a      	bne.n	800911a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	015a      	lsls	r2, r3, #5
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	4413      	add	r3, r2
 800910c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009110:	461a      	mov	r2, r3
 8009112:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009116:	6013      	str	r3, [r2, #0]
 8009118:	e013      	b.n	8009142 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	015a      	lsls	r2, r3, #5
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	4413      	add	r3, r2
 8009122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009126:	461a      	mov	r2, r3
 8009128:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800912c:	6013      	str	r3, [r2, #0]
 800912e:	e008      	b.n	8009142 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	015a      	lsls	r2, r3, #5
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	4413      	add	r3, r2
 8009138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800913c:	461a      	mov	r2, r3
 800913e:	2300      	movs	r3, #0
 8009140:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	015a      	lsls	r2, r3, #5
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	4413      	add	r3, r2
 800914a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800914e:	461a      	mov	r2, r3
 8009150:	2300      	movs	r3, #0
 8009152:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	015a      	lsls	r2, r3, #5
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	4413      	add	r3, r2
 800915c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009160:	461a      	mov	r2, r3
 8009162:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009166:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	3301      	adds	r3, #1
 800916c:	613b      	str	r3, [r7, #16]
 800916e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009172:	461a      	mov	r2, r3
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	4293      	cmp	r3, r2
 8009178:	d3b5      	bcc.n	80090e6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009180:	691b      	ldr	r3, [r3, #16]
 8009182:	68fa      	ldr	r2, [r7, #12]
 8009184:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009188:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800918c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2200      	movs	r2, #0
 8009192:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800919a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800919c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d105      	bne.n	80091b0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	699b      	ldr	r3, [r3, #24]
 80091a8:	f043 0210 	orr.w	r2, r3, #16
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	699a      	ldr	r2, [r3, #24]
 80091b4:	4b10      	ldr	r3, [pc, #64]	; (80091f8 <USB_DevInit+0x2c4>)
 80091b6:	4313      	orrs	r3, r2
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80091bc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d005      	beq.n	80091d0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	699b      	ldr	r3, [r3, #24]
 80091c8:	f043 0208 	orr.w	r2, r3, #8
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80091d0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	d107      	bne.n	80091e8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	699b      	ldr	r3, [r3, #24]
 80091dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80091e0:	f043 0304 	orr.w	r3, r3, #4
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80091e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3718      	adds	r7, #24
 80091ee:	46bd      	mov	sp, r7
 80091f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80091f4:	b004      	add	sp, #16
 80091f6:	4770      	bx	lr
 80091f8:	803c3800 	.word	0x803c3800

080091fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b085      	sub	sp, #20
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009206:	2300      	movs	r3, #0
 8009208:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	3301      	adds	r3, #1
 800920e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009216:	d901      	bls.n	800921c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009218:	2303      	movs	r3, #3
 800921a:	e01b      	b.n	8009254 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	691b      	ldr	r3, [r3, #16]
 8009220:	2b00      	cmp	r3, #0
 8009222:	daf2      	bge.n	800920a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009224:	2300      	movs	r3, #0
 8009226:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	019b      	lsls	r3, r3, #6
 800922c:	f043 0220 	orr.w	r2, r3, #32
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	3301      	adds	r3, #1
 8009238:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009240:	d901      	bls.n	8009246 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009242:	2303      	movs	r3, #3
 8009244:	e006      	b.n	8009254 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	691b      	ldr	r3, [r3, #16]
 800924a:	f003 0320 	and.w	r3, r3, #32
 800924e:	2b20      	cmp	r3, #32
 8009250:	d0f0      	beq.n	8009234 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009252:	2300      	movs	r3, #0
}
 8009254:	4618      	mov	r0, r3
 8009256:	3714      	adds	r7, #20
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr

08009260 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009260:	b480      	push	{r7}
 8009262:	b085      	sub	sp, #20
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009268:	2300      	movs	r3, #0
 800926a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	3301      	adds	r3, #1
 8009270:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009278:	d901      	bls.n	800927e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800927a:	2303      	movs	r3, #3
 800927c:	e018      	b.n	80092b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	691b      	ldr	r3, [r3, #16]
 8009282:	2b00      	cmp	r3, #0
 8009284:	daf2      	bge.n	800926c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009286:	2300      	movs	r3, #0
 8009288:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2210      	movs	r2, #16
 800928e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	3301      	adds	r3, #1
 8009294:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800929c:	d901      	bls.n	80092a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800929e:	2303      	movs	r3, #3
 80092a0:	e006      	b.n	80092b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	691b      	ldr	r3, [r3, #16]
 80092a6:	f003 0310 	and.w	r3, r3, #16
 80092aa:	2b10      	cmp	r3, #16
 80092ac:	d0f0      	beq.n	8009290 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80092ae:	2300      	movs	r3, #0
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3714      	adds	r7, #20
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr

080092bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80092bc:	b480      	push	{r7}
 80092be:	b085      	sub	sp, #20
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	460b      	mov	r3, r1
 80092c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	78fb      	ldrb	r3, [r7, #3]
 80092d6:	68f9      	ldr	r1, [r7, #12]
 80092d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092dc:	4313      	orrs	r3, r2
 80092de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80092e0:	2300      	movs	r3, #0
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3714      	adds	r7, #20
 80092e6:	46bd      	mov	sp, r7
 80092e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ec:	4770      	bx	lr

080092ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80092ee:	b480      	push	{r7}
 80092f0:	b085      	sub	sp, #20
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	68fa      	ldr	r2, [r7, #12]
 8009304:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009308:	f023 0303 	bic.w	r3, r3, #3
 800930c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	68fa      	ldr	r2, [r7, #12]
 8009318:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800931c:	f043 0302 	orr.w	r3, r3, #2
 8009320:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009322:	2300      	movs	r3, #0
}
 8009324:	4618      	mov	r0, r3
 8009326:	3714      	adds	r7, #20
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	695b      	ldr	r3, [r3, #20]
 800933c:	f003 0301 	and.w	r3, r3, #1
}
 8009340:	4618      	mov	r0, r3
 8009342:	370c      	adds	r7, #12
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr

0800934c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800934c:	b480      	push	{r7}
 800934e:	b085      	sub	sp, #20
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009354:	2300      	movs	r3, #0
 8009356:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	3301      	adds	r3, #1
 800935c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009364:	d901      	bls.n	800936a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009366:	2303      	movs	r3, #3
 8009368:	e01b      	b.n	80093a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	691b      	ldr	r3, [r3, #16]
 800936e:	2b00      	cmp	r3, #0
 8009370:	daf2      	bge.n	8009358 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009372:	2300      	movs	r3, #0
 8009374:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	691b      	ldr	r3, [r3, #16]
 800937a:	f043 0201 	orr.w	r2, r3, #1
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	3301      	adds	r3, #1
 8009386:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800938e:	d901      	bls.n	8009394 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009390:	2303      	movs	r3, #3
 8009392:	e006      	b.n	80093a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	691b      	ldr	r3, [r3, #16]
 8009398:	f003 0301 	and.w	r3, r3, #1
 800939c:	2b01      	cmp	r3, #1
 800939e:	d0f0      	beq.n	8009382 <USB_CoreReset+0x36>

  return HAL_OK;
 80093a0:	2300      	movs	r3, #0
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3714      	adds	r7, #20
 80093a6:	46bd      	mov	sp, r7
 80093a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ac:	4770      	bx	lr

080093ae <__cvt>:
 80093ae:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093b2:	ec55 4b10 	vmov	r4, r5, d0
 80093b6:	2d00      	cmp	r5, #0
 80093b8:	460e      	mov	r6, r1
 80093ba:	4619      	mov	r1, r3
 80093bc:	462b      	mov	r3, r5
 80093be:	bfbb      	ittet	lt
 80093c0:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80093c4:	461d      	movlt	r5, r3
 80093c6:	2300      	movge	r3, #0
 80093c8:	232d      	movlt	r3, #45	; 0x2d
 80093ca:	700b      	strb	r3, [r1, #0]
 80093cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093ce:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80093d2:	4691      	mov	r9, r2
 80093d4:	f023 0820 	bic.w	r8, r3, #32
 80093d8:	bfbc      	itt	lt
 80093da:	4622      	movlt	r2, r4
 80093dc:	4614      	movlt	r4, r2
 80093de:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80093e2:	d005      	beq.n	80093f0 <__cvt+0x42>
 80093e4:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80093e8:	d100      	bne.n	80093ec <__cvt+0x3e>
 80093ea:	3601      	adds	r6, #1
 80093ec:	2102      	movs	r1, #2
 80093ee:	e000      	b.n	80093f2 <__cvt+0x44>
 80093f0:	2103      	movs	r1, #3
 80093f2:	ab03      	add	r3, sp, #12
 80093f4:	9301      	str	r3, [sp, #4]
 80093f6:	ab02      	add	r3, sp, #8
 80093f8:	9300      	str	r3, [sp, #0]
 80093fa:	ec45 4b10 	vmov	d0, r4, r5
 80093fe:	4653      	mov	r3, sl
 8009400:	4632      	mov	r2, r6
 8009402:	f001 f941 	bl	800a688 <_dtoa_r>
 8009406:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800940a:	4607      	mov	r7, r0
 800940c:	d102      	bne.n	8009414 <__cvt+0x66>
 800940e:	f019 0f01 	tst.w	r9, #1
 8009412:	d022      	beq.n	800945a <__cvt+0xac>
 8009414:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009418:	eb07 0906 	add.w	r9, r7, r6
 800941c:	d110      	bne.n	8009440 <__cvt+0x92>
 800941e:	783b      	ldrb	r3, [r7, #0]
 8009420:	2b30      	cmp	r3, #48	; 0x30
 8009422:	d10a      	bne.n	800943a <__cvt+0x8c>
 8009424:	2200      	movs	r2, #0
 8009426:	2300      	movs	r3, #0
 8009428:	4620      	mov	r0, r4
 800942a:	4629      	mov	r1, r5
 800942c:	f7f7 fb5c 	bl	8000ae8 <__aeabi_dcmpeq>
 8009430:	b918      	cbnz	r0, 800943a <__cvt+0x8c>
 8009432:	f1c6 0601 	rsb	r6, r6, #1
 8009436:	f8ca 6000 	str.w	r6, [sl]
 800943a:	f8da 3000 	ldr.w	r3, [sl]
 800943e:	4499      	add	r9, r3
 8009440:	2200      	movs	r2, #0
 8009442:	2300      	movs	r3, #0
 8009444:	4620      	mov	r0, r4
 8009446:	4629      	mov	r1, r5
 8009448:	f7f7 fb4e 	bl	8000ae8 <__aeabi_dcmpeq>
 800944c:	b108      	cbz	r0, 8009452 <__cvt+0xa4>
 800944e:	f8cd 900c 	str.w	r9, [sp, #12]
 8009452:	2230      	movs	r2, #48	; 0x30
 8009454:	9b03      	ldr	r3, [sp, #12]
 8009456:	454b      	cmp	r3, r9
 8009458:	d307      	bcc.n	800946a <__cvt+0xbc>
 800945a:	9b03      	ldr	r3, [sp, #12]
 800945c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800945e:	1bdb      	subs	r3, r3, r7
 8009460:	4638      	mov	r0, r7
 8009462:	6013      	str	r3, [r2, #0]
 8009464:	b004      	add	sp, #16
 8009466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800946a:	1c59      	adds	r1, r3, #1
 800946c:	9103      	str	r1, [sp, #12]
 800946e:	701a      	strb	r2, [r3, #0]
 8009470:	e7f0      	b.n	8009454 <__cvt+0xa6>

08009472 <__exponent>:
 8009472:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009474:	4603      	mov	r3, r0
 8009476:	2900      	cmp	r1, #0
 8009478:	bfb8      	it	lt
 800947a:	4249      	neglt	r1, r1
 800947c:	f803 2b02 	strb.w	r2, [r3], #2
 8009480:	bfb4      	ite	lt
 8009482:	222d      	movlt	r2, #45	; 0x2d
 8009484:	222b      	movge	r2, #43	; 0x2b
 8009486:	2909      	cmp	r1, #9
 8009488:	7042      	strb	r2, [r0, #1]
 800948a:	dd2a      	ble.n	80094e2 <__exponent+0x70>
 800948c:	f10d 0207 	add.w	r2, sp, #7
 8009490:	4617      	mov	r7, r2
 8009492:	260a      	movs	r6, #10
 8009494:	4694      	mov	ip, r2
 8009496:	fb91 f5f6 	sdiv	r5, r1, r6
 800949a:	fb06 1415 	mls	r4, r6, r5, r1
 800949e:	3430      	adds	r4, #48	; 0x30
 80094a0:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80094a4:	460c      	mov	r4, r1
 80094a6:	2c63      	cmp	r4, #99	; 0x63
 80094a8:	f102 32ff 	add.w	r2, r2, #4294967295
 80094ac:	4629      	mov	r1, r5
 80094ae:	dcf1      	bgt.n	8009494 <__exponent+0x22>
 80094b0:	3130      	adds	r1, #48	; 0x30
 80094b2:	f1ac 0402 	sub.w	r4, ip, #2
 80094b6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80094ba:	1c41      	adds	r1, r0, #1
 80094bc:	4622      	mov	r2, r4
 80094be:	42ba      	cmp	r2, r7
 80094c0:	d30a      	bcc.n	80094d8 <__exponent+0x66>
 80094c2:	f10d 0209 	add.w	r2, sp, #9
 80094c6:	eba2 020c 	sub.w	r2, r2, ip
 80094ca:	42bc      	cmp	r4, r7
 80094cc:	bf88      	it	hi
 80094ce:	2200      	movhi	r2, #0
 80094d0:	4413      	add	r3, r2
 80094d2:	1a18      	subs	r0, r3, r0
 80094d4:	b003      	add	sp, #12
 80094d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094d8:	f812 5b01 	ldrb.w	r5, [r2], #1
 80094dc:	f801 5f01 	strb.w	r5, [r1, #1]!
 80094e0:	e7ed      	b.n	80094be <__exponent+0x4c>
 80094e2:	2330      	movs	r3, #48	; 0x30
 80094e4:	3130      	adds	r1, #48	; 0x30
 80094e6:	7083      	strb	r3, [r0, #2]
 80094e8:	70c1      	strb	r1, [r0, #3]
 80094ea:	1d03      	adds	r3, r0, #4
 80094ec:	e7f1      	b.n	80094d2 <__exponent+0x60>
	...

080094f0 <_printf_float>:
 80094f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094f4:	ed2d 8b02 	vpush	{d8}
 80094f8:	b08d      	sub	sp, #52	; 0x34
 80094fa:	460c      	mov	r4, r1
 80094fc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009500:	4616      	mov	r6, r2
 8009502:	461f      	mov	r7, r3
 8009504:	4605      	mov	r5, r0
 8009506:	f000 ffb7 	bl	800a478 <_localeconv_r>
 800950a:	f8d0 a000 	ldr.w	sl, [r0]
 800950e:	4650      	mov	r0, sl
 8009510:	f7f6 febe 	bl	8000290 <strlen>
 8009514:	2300      	movs	r3, #0
 8009516:	930a      	str	r3, [sp, #40]	; 0x28
 8009518:	6823      	ldr	r3, [r4, #0]
 800951a:	9305      	str	r3, [sp, #20]
 800951c:	f8d8 3000 	ldr.w	r3, [r8]
 8009520:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009524:	3307      	adds	r3, #7
 8009526:	f023 0307 	bic.w	r3, r3, #7
 800952a:	f103 0208 	add.w	r2, r3, #8
 800952e:	f8c8 2000 	str.w	r2, [r8]
 8009532:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009536:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800953a:	9307      	str	r3, [sp, #28]
 800953c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009540:	ee08 0a10 	vmov	s16, r0
 8009544:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009548:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800954c:	4b9e      	ldr	r3, [pc, #632]	; (80097c8 <_printf_float+0x2d8>)
 800954e:	f04f 32ff 	mov.w	r2, #4294967295
 8009552:	f7f7 fafb 	bl	8000b4c <__aeabi_dcmpun>
 8009556:	bb88      	cbnz	r0, 80095bc <_printf_float+0xcc>
 8009558:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800955c:	4b9a      	ldr	r3, [pc, #616]	; (80097c8 <_printf_float+0x2d8>)
 800955e:	f04f 32ff 	mov.w	r2, #4294967295
 8009562:	f7f7 fad5 	bl	8000b10 <__aeabi_dcmple>
 8009566:	bb48      	cbnz	r0, 80095bc <_printf_float+0xcc>
 8009568:	2200      	movs	r2, #0
 800956a:	2300      	movs	r3, #0
 800956c:	4640      	mov	r0, r8
 800956e:	4649      	mov	r1, r9
 8009570:	f7f7 fac4 	bl	8000afc <__aeabi_dcmplt>
 8009574:	b110      	cbz	r0, 800957c <_printf_float+0x8c>
 8009576:	232d      	movs	r3, #45	; 0x2d
 8009578:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800957c:	4a93      	ldr	r2, [pc, #588]	; (80097cc <_printf_float+0x2dc>)
 800957e:	4b94      	ldr	r3, [pc, #592]	; (80097d0 <_printf_float+0x2e0>)
 8009580:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009584:	bf94      	ite	ls
 8009586:	4690      	movls	r8, r2
 8009588:	4698      	movhi	r8, r3
 800958a:	2303      	movs	r3, #3
 800958c:	6123      	str	r3, [r4, #16]
 800958e:	9b05      	ldr	r3, [sp, #20]
 8009590:	f023 0304 	bic.w	r3, r3, #4
 8009594:	6023      	str	r3, [r4, #0]
 8009596:	f04f 0900 	mov.w	r9, #0
 800959a:	9700      	str	r7, [sp, #0]
 800959c:	4633      	mov	r3, r6
 800959e:	aa0b      	add	r2, sp, #44	; 0x2c
 80095a0:	4621      	mov	r1, r4
 80095a2:	4628      	mov	r0, r5
 80095a4:	f000 f9da 	bl	800995c <_printf_common>
 80095a8:	3001      	adds	r0, #1
 80095aa:	f040 8090 	bne.w	80096ce <_printf_float+0x1de>
 80095ae:	f04f 30ff 	mov.w	r0, #4294967295
 80095b2:	b00d      	add	sp, #52	; 0x34
 80095b4:	ecbd 8b02 	vpop	{d8}
 80095b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095bc:	4642      	mov	r2, r8
 80095be:	464b      	mov	r3, r9
 80095c0:	4640      	mov	r0, r8
 80095c2:	4649      	mov	r1, r9
 80095c4:	f7f7 fac2 	bl	8000b4c <__aeabi_dcmpun>
 80095c8:	b140      	cbz	r0, 80095dc <_printf_float+0xec>
 80095ca:	464b      	mov	r3, r9
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	bfbc      	itt	lt
 80095d0:	232d      	movlt	r3, #45	; 0x2d
 80095d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80095d6:	4a7f      	ldr	r2, [pc, #508]	; (80097d4 <_printf_float+0x2e4>)
 80095d8:	4b7f      	ldr	r3, [pc, #508]	; (80097d8 <_printf_float+0x2e8>)
 80095da:	e7d1      	b.n	8009580 <_printf_float+0x90>
 80095dc:	6863      	ldr	r3, [r4, #4]
 80095de:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80095e2:	9206      	str	r2, [sp, #24]
 80095e4:	1c5a      	adds	r2, r3, #1
 80095e6:	d13f      	bne.n	8009668 <_printf_float+0x178>
 80095e8:	2306      	movs	r3, #6
 80095ea:	6063      	str	r3, [r4, #4]
 80095ec:	9b05      	ldr	r3, [sp, #20]
 80095ee:	6861      	ldr	r1, [r4, #4]
 80095f0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80095f4:	2300      	movs	r3, #0
 80095f6:	9303      	str	r3, [sp, #12]
 80095f8:	ab0a      	add	r3, sp, #40	; 0x28
 80095fa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80095fe:	ab09      	add	r3, sp, #36	; 0x24
 8009600:	ec49 8b10 	vmov	d0, r8, r9
 8009604:	9300      	str	r3, [sp, #0]
 8009606:	6022      	str	r2, [r4, #0]
 8009608:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800960c:	4628      	mov	r0, r5
 800960e:	f7ff fece 	bl	80093ae <__cvt>
 8009612:	9b06      	ldr	r3, [sp, #24]
 8009614:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009616:	2b47      	cmp	r3, #71	; 0x47
 8009618:	4680      	mov	r8, r0
 800961a:	d108      	bne.n	800962e <_printf_float+0x13e>
 800961c:	1cc8      	adds	r0, r1, #3
 800961e:	db02      	blt.n	8009626 <_printf_float+0x136>
 8009620:	6863      	ldr	r3, [r4, #4]
 8009622:	4299      	cmp	r1, r3
 8009624:	dd41      	ble.n	80096aa <_printf_float+0x1ba>
 8009626:	f1ab 0302 	sub.w	r3, fp, #2
 800962a:	fa5f fb83 	uxtb.w	fp, r3
 800962e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009632:	d820      	bhi.n	8009676 <_printf_float+0x186>
 8009634:	3901      	subs	r1, #1
 8009636:	465a      	mov	r2, fp
 8009638:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800963c:	9109      	str	r1, [sp, #36]	; 0x24
 800963e:	f7ff ff18 	bl	8009472 <__exponent>
 8009642:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009644:	1813      	adds	r3, r2, r0
 8009646:	2a01      	cmp	r2, #1
 8009648:	4681      	mov	r9, r0
 800964a:	6123      	str	r3, [r4, #16]
 800964c:	dc02      	bgt.n	8009654 <_printf_float+0x164>
 800964e:	6822      	ldr	r2, [r4, #0]
 8009650:	07d2      	lsls	r2, r2, #31
 8009652:	d501      	bpl.n	8009658 <_printf_float+0x168>
 8009654:	3301      	adds	r3, #1
 8009656:	6123      	str	r3, [r4, #16]
 8009658:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800965c:	2b00      	cmp	r3, #0
 800965e:	d09c      	beq.n	800959a <_printf_float+0xaa>
 8009660:	232d      	movs	r3, #45	; 0x2d
 8009662:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009666:	e798      	b.n	800959a <_printf_float+0xaa>
 8009668:	9a06      	ldr	r2, [sp, #24]
 800966a:	2a47      	cmp	r2, #71	; 0x47
 800966c:	d1be      	bne.n	80095ec <_printf_float+0xfc>
 800966e:	2b00      	cmp	r3, #0
 8009670:	d1bc      	bne.n	80095ec <_printf_float+0xfc>
 8009672:	2301      	movs	r3, #1
 8009674:	e7b9      	b.n	80095ea <_printf_float+0xfa>
 8009676:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800967a:	d118      	bne.n	80096ae <_printf_float+0x1be>
 800967c:	2900      	cmp	r1, #0
 800967e:	6863      	ldr	r3, [r4, #4]
 8009680:	dd0b      	ble.n	800969a <_printf_float+0x1aa>
 8009682:	6121      	str	r1, [r4, #16]
 8009684:	b913      	cbnz	r3, 800968c <_printf_float+0x19c>
 8009686:	6822      	ldr	r2, [r4, #0]
 8009688:	07d0      	lsls	r0, r2, #31
 800968a:	d502      	bpl.n	8009692 <_printf_float+0x1a2>
 800968c:	3301      	adds	r3, #1
 800968e:	440b      	add	r3, r1
 8009690:	6123      	str	r3, [r4, #16]
 8009692:	65a1      	str	r1, [r4, #88]	; 0x58
 8009694:	f04f 0900 	mov.w	r9, #0
 8009698:	e7de      	b.n	8009658 <_printf_float+0x168>
 800969a:	b913      	cbnz	r3, 80096a2 <_printf_float+0x1b2>
 800969c:	6822      	ldr	r2, [r4, #0]
 800969e:	07d2      	lsls	r2, r2, #31
 80096a0:	d501      	bpl.n	80096a6 <_printf_float+0x1b6>
 80096a2:	3302      	adds	r3, #2
 80096a4:	e7f4      	b.n	8009690 <_printf_float+0x1a0>
 80096a6:	2301      	movs	r3, #1
 80096a8:	e7f2      	b.n	8009690 <_printf_float+0x1a0>
 80096aa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80096ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096b0:	4299      	cmp	r1, r3
 80096b2:	db05      	blt.n	80096c0 <_printf_float+0x1d0>
 80096b4:	6823      	ldr	r3, [r4, #0]
 80096b6:	6121      	str	r1, [r4, #16]
 80096b8:	07d8      	lsls	r0, r3, #31
 80096ba:	d5ea      	bpl.n	8009692 <_printf_float+0x1a2>
 80096bc:	1c4b      	adds	r3, r1, #1
 80096be:	e7e7      	b.n	8009690 <_printf_float+0x1a0>
 80096c0:	2900      	cmp	r1, #0
 80096c2:	bfd4      	ite	le
 80096c4:	f1c1 0202 	rsble	r2, r1, #2
 80096c8:	2201      	movgt	r2, #1
 80096ca:	4413      	add	r3, r2
 80096cc:	e7e0      	b.n	8009690 <_printf_float+0x1a0>
 80096ce:	6823      	ldr	r3, [r4, #0]
 80096d0:	055a      	lsls	r2, r3, #21
 80096d2:	d407      	bmi.n	80096e4 <_printf_float+0x1f4>
 80096d4:	6923      	ldr	r3, [r4, #16]
 80096d6:	4642      	mov	r2, r8
 80096d8:	4631      	mov	r1, r6
 80096da:	4628      	mov	r0, r5
 80096dc:	47b8      	blx	r7
 80096de:	3001      	adds	r0, #1
 80096e0:	d12c      	bne.n	800973c <_printf_float+0x24c>
 80096e2:	e764      	b.n	80095ae <_printf_float+0xbe>
 80096e4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80096e8:	f240 80e0 	bls.w	80098ac <_printf_float+0x3bc>
 80096ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80096f0:	2200      	movs	r2, #0
 80096f2:	2300      	movs	r3, #0
 80096f4:	f7f7 f9f8 	bl	8000ae8 <__aeabi_dcmpeq>
 80096f8:	2800      	cmp	r0, #0
 80096fa:	d034      	beq.n	8009766 <_printf_float+0x276>
 80096fc:	4a37      	ldr	r2, [pc, #220]	; (80097dc <_printf_float+0x2ec>)
 80096fe:	2301      	movs	r3, #1
 8009700:	4631      	mov	r1, r6
 8009702:	4628      	mov	r0, r5
 8009704:	47b8      	blx	r7
 8009706:	3001      	adds	r0, #1
 8009708:	f43f af51 	beq.w	80095ae <_printf_float+0xbe>
 800970c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009710:	429a      	cmp	r2, r3
 8009712:	db02      	blt.n	800971a <_printf_float+0x22a>
 8009714:	6823      	ldr	r3, [r4, #0]
 8009716:	07d8      	lsls	r0, r3, #31
 8009718:	d510      	bpl.n	800973c <_printf_float+0x24c>
 800971a:	ee18 3a10 	vmov	r3, s16
 800971e:	4652      	mov	r2, sl
 8009720:	4631      	mov	r1, r6
 8009722:	4628      	mov	r0, r5
 8009724:	47b8      	blx	r7
 8009726:	3001      	adds	r0, #1
 8009728:	f43f af41 	beq.w	80095ae <_printf_float+0xbe>
 800972c:	f04f 0800 	mov.w	r8, #0
 8009730:	f104 091a 	add.w	r9, r4, #26
 8009734:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009736:	3b01      	subs	r3, #1
 8009738:	4543      	cmp	r3, r8
 800973a:	dc09      	bgt.n	8009750 <_printf_float+0x260>
 800973c:	6823      	ldr	r3, [r4, #0]
 800973e:	079b      	lsls	r3, r3, #30
 8009740:	f100 8107 	bmi.w	8009952 <_printf_float+0x462>
 8009744:	68e0      	ldr	r0, [r4, #12]
 8009746:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009748:	4298      	cmp	r0, r3
 800974a:	bfb8      	it	lt
 800974c:	4618      	movlt	r0, r3
 800974e:	e730      	b.n	80095b2 <_printf_float+0xc2>
 8009750:	2301      	movs	r3, #1
 8009752:	464a      	mov	r2, r9
 8009754:	4631      	mov	r1, r6
 8009756:	4628      	mov	r0, r5
 8009758:	47b8      	blx	r7
 800975a:	3001      	adds	r0, #1
 800975c:	f43f af27 	beq.w	80095ae <_printf_float+0xbe>
 8009760:	f108 0801 	add.w	r8, r8, #1
 8009764:	e7e6      	b.n	8009734 <_printf_float+0x244>
 8009766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009768:	2b00      	cmp	r3, #0
 800976a:	dc39      	bgt.n	80097e0 <_printf_float+0x2f0>
 800976c:	4a1b      	ldr	r2, [pc, #108]	; (80097dc <_printf_float+0x2ec>)
 800976e:	2301      	movs	r3, #1
 8009770:	4631      	mov	r1, r6
 8009772:	4628      	mov	r0, r5
 8009774:	47b8      	blx	r7
 8009776:	3001      	adds	r0, #1
 8009778:	f43f af19 	beq.w	80095ae <_printf_float+0xbe>
 800977c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009780:	4313      	orrs	r3, r2
 8009782:	d102      	bne.n	800978a <_printf_float+0x29a>
 8009784:	6823      	ldr	r3, [r4, #0]
 8009786:	07d9      	lsls	r1, r3, #31
 8009788:	d5d8      	bpl.n	800973c <_printf_float+0x24c>
 800978a:	ee18 3a10 	vmov	r3, s16
 800978e:	4652      	mov	r2, sl
 8009790:	4631      	mov	r1, r6
 8009792:	4628      	mov	r0, r5
 8009794:	47b8      	blx	r7
 8009796:	3001      	adds	r0, #1
 8009798:	f43f af09 	beq.w	80095ae <_printf_float+0xbe>
 800979c:	f04f 0900 	mov.w	r9, #0
 80097a0:	f104 0a1a 	add.w	sl, r4, #26
 80097a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097a6:	425b      	negs	r3, r3
 80097a8:	454b      	cmp	r3, r9
 80097aa:	dc01      	bgt.n	80097b0 <_printf_float+0x2c0>
 80097ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097ae:	e792      	b.n	80096d6 <_printf_float+0x1e6>
 80097b0:	2301      	movs	r3, #1
 80097b2:	4652      	mov	r2, sl
 80097b4:	4631      	mov	r1, r6
 80097b6:	4628      	mov	r0, r5
 80097b8:	47b8      	blx	r7
 80097ba:	3001      	adds	r0, #1
 80097bc:	f43f aef7 	beq.w	80095ae <_printf_float+0xbe>
 80097c0:	f109 0901 	add.w	r9, r9, #1
 80097c4:	e7ee      	b.n	80097a4 <_printf_float+0x2b4>
 80097c6:	bf00      	nop
 80097c8:	7fefffff 	.word	0x7fefffff
 80097cc:	0800dd34 	.word	0x0800dd34
 80097d0:	0800dd38 	.word	0x0800dd38
 80097d4:	0800dd3c 	.word	0x0800dd3c
 80097d8:	0800dd40 	.word	0x0800dd40
 80097dc:	0800dd44 	.word	0x0800dd44
 80097e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80097e4:	429a      	cmp	r2, r3
 80097e6:	bfa8      	it	ge
 80097e8:	461a      	movge	r2, r3
 80097ea:	2a00      	cmp	r2, #0
 80097ec:	4691      	mov	r9, r2
 80097ee:	dc37      	bgt.n	8009860 <_printf_float+0x370>
 80097f0:	f04f 0b00 	mov.w	fp, #0
 80097f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80097f8:	f104 021a 	add.w	r2, r4, #26
 80097fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80097fe:	9305      	str	r3, [sp, #20]
 8009800:	eba3 0309 	sub.w	r3, r3, r9
 8009804:	455b      	cmp	r3, fp
 8009806:	dc33      	bgt.n	8009870 <_printf_float+0x380>
 8009808:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800980c:	429a      	cmp	r2, r3
 800980e:	db3b      	blt.n	8009888 <_printf_float+0x398>
 8009810:	6823      	ldr	r3, [r4, #0]
 8009812:	07da      	lsls	r2, r3, #31
 8009814:	d438      	bmi.n	8009888 <_printf_float+0x398>
 8009816:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800981a:	eba2 0903 	sub.w	r9, r2, r3
 800981e:	9b05      	ldr	r3, [sp, #20]
 8009820:	1ad2      	subs	r2, r2, r3
 8009822:	4591      	cmp	r9, r2
 8009824:	bfa8      	it	ge
 8009826:	4691      	movge	r9, r2
 8009828:	f1b9 0f00 	cmp.w	r9, #0
 800982c:	dc35      	bgt.n	800989a <_printf_float+0x3aa>
 800982e:	f04f 0800 	mov.w	r8, #0
 8009832:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009836:	f104 0a1a 	add.w	sl, r4, #26
 800983a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800983e:	1a9b      	subs	r3, r3, r2
 8009840:	eba3 0309 	sub.w	r3, r3, r9
 8009844:	4543      	cmp	r3, r8
 8009846:	f77f af79 	ble.w	800973c <_printf_float+0x24c>
 800984a:	2301      	movs	r3, #1
 800984c:	4652      	mov	r2, sl
 800984e:	4631      	mov	r1, r6
 8009850:	4628      	mov	r0, r5
 8009852:	47b8      	blx	r7
 8009854:	3001      	adds	r0, #1
 8009856:	f43f aeaa 	beq.w	80095ae <_printf_float+0xbe>
 800985a:	f108 0801 	add.w	r8, r8, #1
 800985e:	e7ec      	b.n	800983a <_printf_float+0x34a>
 8009860:	4613      	mov	r3, r2
 8009862:	4631      	mov	r1, r6
 8009864:	4642      	mov	r2, r8
 8009866:	4628      	mov	r0, r5
 8009868:	47b8      	blx	r7
 800986a:	3001      	adds	r0, #1
 800986c:	d1c0      	bne.n	80097f0 <_printf_float+0x300>
 800986e:	e69e      	b.n	80095ae <_printf_float+0xbe>
 8009870:	2301      	movs	r3, #1
 8009872:	4631      	mov	r1, r6
 8009874:	4628      	mov	r0, r5
 8009876:	9205      	str	r2, [sp, #20]
 8009878:	47b8      	blx	r7
 800987a:	3001      	adds	r0, #1
 800987c:	f43f ae97 	beq.w	80095ae <_printf_float+0xbe>
 8009880:	9a05      	ldr	r2, [sp, #20]
 8009882:	f10b 0b01 	add.w	fp, fp, #1
 8009886:	e7b9      	b.n	80097fc <_printf_float+0x30c>
 8009888:	ee18 3a10 	vmov	r3, s16
 800988c:	4652      	mov	r2, sl
 800988e:	4631      	mov	r1, r6
 8009890:	4628      	mov	r0, r5
 8009892:	47b8      	blx	r7
 8009894:	3001      	adds	r0, #1
 8009896:	d1be      	bne.n	8009816 <_printf_float+0x326>
 8009898:	e689      	b.n	80095ae <_printf_float+0xbe>
 800989a:	9a05      	ldr	r2, [sp, #20]
 800989c:	464b      	mov	r3, r9
 800989e:	4442      	add	r2, r8
 80098a0:	4631      	mov	r1, r6
 80098a2:	4628      	mov	r0, r5
 80098a4:	47b8      	blx	r7
 80098a6:	3001      	adds	r0, #1
 80098a8:	d1c1      	bne.n	800982e <_printf_float+0x33e>
 80098aa:	e680      	b.n	80095ae <_printf_float+0xbe>
 80098ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098ae:	2a01      	cmp	r2, #1
 80098b0:	dc01      	bgt.n	80098b6 <_printf_float+0x3c6>
 80098b2:	07db      	lsls	r3, r3, #31
 80098b4:	d53a      	bpl.n	800992c <_printf_float+0x43c>
 80098b6:	2301      	movs	r3, #1
 80098b8:	4642      	mov	r2, r8
 80098ba:	4631      	mov	r1, r6
 80098bc:	4628      	mov	r0, r5
 80098be:	47b8      	blx	r7
 80098c0:	3001      	adds	r0, #1
 80098c2:	f43f ae74 	beq.w	80095ae <_printf_float+0xbe>
 80098c6:	ee18 3a10 	vmov	r3, s16
 80098ca:	4652      	mov	r2, sl
 80098cc:	4631      	mov	r1, r6
 80098ce:	4628      	mov	r0, r5
 80098d0:	47b8      	blx	r7
 80098d2:	3001      	adds	r0, #1
 80098d4:	f43f ae6b 	beq.w	80095ae <_printf_float+0xbe>
 80098d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80098dc:	2200      	movs	r2, #0
 80098de:	2300      	movs	r3, #0
 80098e0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80098e4:	f7f7 f900 	bl	8000ae8 <__aeabi_dcmpeq>
 80098e8:	b9d8      	cbnz	r0, 8009922 <_printf_float+0x432>
 80098ea:	f10a 33ff 	add.w	r3, sl, #4294967295
 80098ee:	f108 0201 	add.w	r2, r8, #1
 80098f2:	4631      	mov	r1, r6
 80098f4:	4628      	mov	r0, r5
 80098f6:	47b8      	blx	r7
 80098f8:	3001      	adds	r0, #1
 80098fa:	d10e      	bne.n	800991a <_printf_float+0x42a>
 80098fc:	e657      	b.n	80095ae <_printf_float+0xbe>
 80098fe:	2301      	movs	r3, #1
 8009900:	4652      	mov	r2, sl
 8009902:	4631      	mov	r1, r6
 8009904:	4628      	mov	r0, r5
 8009906:	47b8      	blx	r7
 8009908:	3001      	adds	r0, #1
 800990a:	f43f ae50 	beq.w	80095ae <_printf_float+0xbe>
 800990e:	f108 0801 	add.w	r8, r8, #1
 8009912:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009914:	3b01      	subs	r3, #1
 8009916:	4543      	cmp	r3, r8
 8009918:	dcf1      	bgt.n	80098fe <_printf_float+0x40e>
 800991a:	464b      	mov	r3, r9
 800991c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009920:	e6da      	b.n	80096d8 <_printf_float+0x1e8>
 8009922:	f04f 0800 	mov.w	r8, #0
 8009926:	f104 0a1a 	add.w	sl, r4, #26
 800992a:	e7f2      	b.n	8009912 <_printf_float+0x422>
 800992c:	2301      	movs	r3, #1
 800992e:	4642      	mov	r2, r8
 8009930:	e7df      	b.n	80098f2 <_printf_float+0x402>
 8009932:	2301      	movs	r3, #1
 8009934:	464a      	mov	r2, r9
 8009936:	4631      	mov	r1, r6
 8009938:	4628      	mov	r0, r5
 800993a:	47b8      	blx	r7
 800993c:	3001      	adds	r0, #1
 800993e:	f43f ae36 	beq.w	80095ae <_printf_float+0xbe>
 8009942:	f108 0801 	add.w	r8, r8, #1
 8009946:	68e3      	ldr	r3, [r4, #12]
 8009948:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800994a:	1a5b      	subs	r3, r3, r1
 800994c:	4543      	cmp	r3, r8
 800994e:	dcf0      	bgt.n	8009932 <_printf_float+0x442>
 8009950:	e6f8      	b.n	8009744 <_printf_float+0x254>
 8009952:	f04f 0800 	mov.w	r8, #0
 8009956:	f104 0919 	add.w	r9, r4, #25
 800995a:	e7f4      	b.n	8009946 <_printf_float+0x456>

0800995c <_printf_common>:
 800995c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009960:	4616      	mov	r6, r2
 8009962:	4699      	mov	r9, r3
 8009964:	688a      	ldr	r2, [r1, #8]
 8009966:	690b      	ldr	r3, [r1, #16]
 8009968:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800996c:	4293      	cmp	r3, r2
 800996e:	bfb8      	it	lt
 8009970:	4613      	movlt	r3, r2
 8009972:	6033      	str	r3, [r6, #0]
 8009974:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009978:	4607      	mov	r7, r0
 800997a:	460c      	mov	r4, r1
 800997c:	b10a      	cbz	r2, 8009982 <_printf_common+0x26>
 800997e:	3301      	adds	r3, #1
 8009980:	6033      	str	r3, [r6, #0]
 8009982:	6823      	ldr	r3, [r4, #0]
 8009984:	0699      	lsls	r1, r3, #26
 8009986:	bf42      	ittt	mi
 8009988:	6833      	ldrmi	r3, [r6, #0]
 800998a:	3302      	addmi	r3, #2
 800998c:	6033      	strmi	r3, [r6, #0]
 800998e:	6825      	ldr	r5, [r4, #0]
 8009990:	f015 0506 	ands.w	r5, r5, #6
 8009994:	d106      	bne.n	80099a4 <_printf_common+0x48>
 8009996:	f104 0a19 	add.w	sl, r4, #25
 800999a:	68e3      	ldr	r3, [r4, #12]
 800999c:	6832      	ldr	r2, [r6, #0]
 800999e:	1a9b      	subs	r3, r3, r2
 80099a0:	42ab      	cmp	r3, r5
 80099a2:	dc26      	bgt.n	80099f2 <_printf_common+0x96>
 80099a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80099a8:	1e13      	subs	r3, r2, #0
 80099aa:	6822      	ldr	r2, [r4, #0]
 80099ac:	bf18      	it	ne
 80099ae:	2301      	movne	r3, #1
 80099b0:	0692      	lsls	r2, r2, #26
 80099b2:	d42b      	bmi.n	8009a0c <_printf_common+0xb0>
 80099b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80099b8:	4649      	mov	r1, r9
 80099ba:	4638      	mov	r0, r7
 80099bc:	47c0      	blx	r8
 80099be:	3001      	adds	r0, #1
 80099c0:	d01e      	beq.n	8009a00 <_printf_common+0xa4>
 80099c2:	6823      	ldr	r3, [r4, #0]
 80099c4:	6922      	ldr	r2, [r4, #16]
 80099c6:	f003 0306 	and.w	r3, r3, #6
 80099ca:	2b04      	cmp	r3, #4
 80099cc:	bf02      	ittt	eq
 80099ce:	68e5      	ldreq	r5, [r4, #12]
 80099d0:	6833      	ldreq	r3, [r6, #0]
 80099d2:	1aed      	subeq	r5, r5, r3
 80099d4:	68a3      	ldr	r3, [r4, #8]
 80099d6:	bf0c      	ite	eq
 80099d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80099dc:	2500      	movne	r5, #0
 80099de:	4293      	cmp	r3, r2
 80099e0:	bfc4      	itt	gt
 80099e2:	1a9b      	subgt	r3, r3, r2
 80099e4:	18ed      	addgt	r5, r5, r3
 80099e6:	2600      	movs	r6, #0
 80099e8:	341a      	adds	r4, #26
 80099ea:	42b5      	cmp	r5, r6
 80099ec:	d11a      	bne.n	8009a24 <_printf_common+0xc8>
 80099ee:	2000      	movs	r0, #0
 80099f0:	e008      	b.n	8009a04 <_printf_common+0xa8>
 80099f2:	2301      	movs	r3, #1
 80099f4:	4652      	mov	r2, sl
 80099f6:	4649      	mov	r1, r9
 80099f8:	4638      	mov	r0, r7
 80099fa:	47c0      	blx	r8
 80099fc:	3001      	adds	r0, #1
 80099fe:	d103      	bne.n	8009a08 <_printf_common+0xac>
 8009a00:	f04f 30ff 	mov.w	r0, #4294967295
 8009a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a08:	3501      	adds	r5, #1
 8009a0a:	e7c6      	b.n	800999a <_printf_common+0x3e>
 8009a0c:	18e1      	adds	r1, r4, r3
 8009a0e:	1c5a      	adds	r2, r3, #1
 8009a10:	2030      	movs	r0, #48	; 0x30
 8009a12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a16:	4422      	add	r2, r4
 8009a18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a20:	3302      	adds	r3, #2
 8009a22:	e7c7      	b.n	80099b4 <_printf_common+0x58>
 8009a24:	2301      	movs	r3, #1
 8009a26:	4622      	mov	r2, r4
 8009a28:	4649      	mov	r1, r9
 8009a2a:	4638      	mov	r0, r7
 8009a2c:	47c0      	blx	r8
 8009a2e:	3001      	adds	r0, #1
 8009a30:	d0e6      	beq.n	8009a00 <_printf_common+0xa4>
 8009a32:	3601      	adds	r6, #1
 8009a34:	e7d9      	b.n	80099ea <_printf_common+0x8e>
	...

08009a38 <_printf_i>:
 8009a38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a3c:	7e0f      	ldrb	r7, [r1, #24]
 8009a3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009a40:	2f78      	cmp	r7, #120	; 0x78
 8009a42:	4691      	mov	r9, r2
 8009a44:	4680      	mov	r8, r0
 8009a46:	460c      	mov	r4, r1
 8009a48:	469a      	mov	sl, r3
 8009a4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009a4e:	d807      	bhi.n	8009a60 <_printf_i+0x28>
 8009a50:	2f62      	cmp	r7, #98	; 0x62
 8009a52:	d80a      	bhi.n	8009a6a <_printf_i+0x32>
 8009a54:	2f00      	cmp	r7, #0
 8009a56:	f000 80d4 	beq.w	8009c02 <_printf_i+0x1ca>
 8009a5a:	2f58      	cmp	r7, #88	; 0x58
 8009a5c:	f000 80c0 	beq.w	8009be0 <_printf_i+0x1a8>
 8009a60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009a68:	e03a      	b.n	8009ae0 <_printf_i+0xa8>
 8009a6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009a6e:	2b15      	cmp	r3, #21
 8009a70:	d8f6      	bhi.n	8009a60 <_printf_i+0x28>
 8009a72:	a101      	add	r1, pc, #4	; (adr r1, 8009a78 <_printf_i+0x40>)
 8009a74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009a78:	08009ad1 	.word	0x08009ad1
 8009a7c:	08009ae5 	.word	0x08009ae5
 8009a80:	08009a61 	.word	0x08009a61
 8009a84:	08009a61 	.word	0x08009a61
 8009a88:	08009a61 	.word	0x08009a61
 8009a8c:	08009a61 	.word	0x08009a61
 8009a90:	08009ae5 	.word	0x08009ae5
 8009a94:	08009a61 	.word	0x08009a61
 8009a98:	08009a61 	.word	0x08009a61
 8009a9c:	08009a61 	.word	0x08009a61
 8009aa0:	08009a61 	.word	0x08009a61
 8009aa4:	08009be9 	.word	0x08009be9
 8009aa8:	08009b11 	.word	0x08009b11
 8009aac:	08009ba3 	.word	0x08009ba3
 8009ab0:	08009a61 	.word	0x08009a61
 8009ab4:	08009a61 	.word	0x08009a61
 8009ab8:	08009c0b 	.word	0x08009c0b
 8009abc:	08009a61 	.word	0x08009a61
 8009ac0:	08009b11 	.word	0x08009b11
 8009ac4:	08009a61 	.word	0x08009a61
 8009ac8:	08009a61 	.word	0x08009a61
 8009acc:	08009bab 	.word	0x08009bab
 8009ad0:	682b      	ldr	r3, [r5, #0]
 8009ad2:	1d1a      	adds	r2, r3, #4
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	602a      	str	r2, [r5, #0]
 8009ad8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009adc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	e09f      	b.n	8009c24 <_printf_i+0x1ec>
 8009ae4:	6820      	ldr	r0, [r4, #0]
 8009ae6:	682b      	ldr	r3, [r5, #0]
 8009ae8:	0607      	lsls	r7, r0, #24
 8009aea:	f103 0104 	add.w	r1, r3, #4
 8009aee:	6029      	str	r1, [r5, #0]
 8009af0:	d501      	bpl.n	8009af6 <_printf_i+0xbe>
 8009af2:	681e      	ldr	r6, [r3, #0]
 8009af4:	e003      	b.n	8009afe <_printf_i+0xc6>
 8009af6:	0646      	lsls	r6, r0, #25
 8009af8:	d5fb      	bpl.n	8009af2 <_printf_i+0xba>
 8009afa:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009afe:	2e00      	cmp	r6, #0
 8009b00:	da03      	bge.n	8009b0a <_printf_i+0xd2>
 8009b02:	232d      	movs	r3, #45	; 0x2d
 8009b04:	4276      	negs	r6, r6
 8009b06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b0a:	485a      	ldr	r0, [pc, #360]	; (8009c74 <_printf_i+0x23c>)
 8009b0c:	230a      	movs	r3, #10
 8009b0e:	e012      	b.n	8009b36 <_printf_i+0xfe>
 8009b10:	682b      	ldr	r3, [r5, #0]
 8009b12:	6820      	ldr	r0, [r4, #0]
 8009b14:	1d19      	adds	r1, r3, #4
 8009b16:	6029      	str	r1, [r5, #0]
 8009b18:	0605      	lsls	r5, r0, #24
 8009b1a:	d501      	bpl.n	8009b20 <_printf_i+0xe8>
 8009b1c:	681e      	ldr	r6, [r3, #0]
 8009b1e:	e002      	b.n	8009b26 <_printf_i+0xee>
 8009b20:	0641      	lsls	r1, r0, #25
 8009b22:	d5fb      	bpl.n	8009b1c <_printf_i+0xe4>
 8009b24:	881e      	ldrh	r6, [r3, #0]
 8009b26:	4853      	ldr	r0, [pc, #332]	; (8009c74 <_printf_i+0x23c>)
 8009b28:	2f6f      	cmp	r7, #111	; 0x6f
 8009b2a:	bf0c      	ite	eq
 8009b2c:	2308      	moveq	r3, #8
 8009b2e:	230a      	movne	r3, #10
 8009b30:	2100      	movs	r1, #0
 8009b32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009b36:	6865      	ldr	r5, [r4, #4]
 8009b38:	60a5      	str	r5, [r4, #8]
 8009b3a:	2d00      	cmp	r5, #0
 8009b3c:	bfa2      	ittt	ge
 8009b3e:	6821      	ldrge	r1, [r4, #0]
 8009b40:	f021 0104 	bicge.w	r1, r1, #4
 8009b44:	6021      	strge	r1, [r4, #0]
 8009b46:	b90e      	cbnz	r6, 8009b4c <_printf_i+0x114>
 8009b48:	2d00      	cmp	r5, #0
 8009b4a:	d04b      	beq.n	8009be4 <_printf_i+0x1ac>
 8009b4c:	4615      	mov	r5, r2
 8009b4e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009b52:	fb03 6711 	mls	r7, r3, r1, r6
 8009b56:	5dc7      	ldrb	r7, [r0, r7]
 8009b58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009b5c:	4637      	mov	r7, r6
 8009b5e:	42bb      	cmp	r3, r7
 8009b60:	460e      	mov	r6, r1
 8009b62:	d9f4      	bls.n	8009b4e <_printf_i+0x116>
 8009b64:	2b08      	cmp	r3, #8
 8009b66:	d10b      	bne.n	8009b80 <_printf_i+0x148>
 8009b68:	6823      	ldr	r3, [r4, #0]
 8009b6a:	07de      	lsls	r6, r3, #31
 8009b6c:	d508      	bpl.n	8009b80 <_printf_i+0x148>
 8009b6e:	6923      	ldr	r3, [r4, #16]
 8009b70:	6861      	ldr	r1, [r4, #4]
 8009b72:	4299      	cmp	r1, r3
 8009b74:	bfde      	ittt	le
 8009b76:	2330      	movle	r3, #48	; 0x30
 8009b78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009b7c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009b80:	1b52      	subs	r2, r2, r5
 8009b82:	6122      	str	r2, [r4, #16]
 8009b84:	f8cd a000 	str.w	sl, [sp]
 8009b88:	464b      	mov	r3, r9
 8009b8a:	aa03      	add	r2, sp, #12
 8009b8c:	4621      	mov	r1, r4
 8009b8e:	4640      	mov	r0, r8
 8009b90:	f7ff fee4 	bl	800995c <_printf_common>
 8009b94:	3001      	adds	r0, #1
 8009b96:	d14a      	bne.n	8009c2e <_printf_i+0x1f6>
 8009b98:	f04f 30ff 	mov.w	r0, #4294967295
 8009b9c:	b004      	add	sp, #16
 8009b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ba2:	6823      	ldr	r3, [r4, #0]
 8009ba4:	f043 0320 	orr.w	r3, r3, #32
 8009ba8:	6023      	str	r3, [r4, #0]
 8009baa:	4833      	ldr	r0, [pc, #204]	; (8009c78 <_printf_i+0x240>)
 8009bac:	2778      	movs	r7, #120	; 0x78
 8009bae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009bb2:	6823      	ldr	r3, [r4, #0]
 8009bb4:	6829      	ldr	r1, [r5, #0]
 8009bb6:	061f      	lsls	r7, r3, #24
 8009bb8:	f851 6b04 	ldr.w	r6, [r1], #4
 8009bbc:	d402      	bmi.n	8009bc4 <_printf_i+0x18c>
 8009bbe:	065f      	lsls	r7, r3, #25
 8009bc0:	bf48      	it	mi
 8009bc2:	b2b6      	uxthmi	r6, r6
 8009bc4:	07df      	lsls	r7, r3, #31
 8009bc6:	bf48      	it	mi
 8009bc8:	f043 0320 	orrmi.w	r3, r3, #32
 8009bcc:	6029      	str	r1, [r5, #0]
 8009bce:	bf48      	it	mi
 8009bd0:	6023      	strmi	r3, [r4, #0]
 8009bd2:	b91e      	cbnz	r6, 8009bdc <_printf_i+0x1a4>
 8009bd4:	6823      	ldr	r3, [r4, #0]
 8009bd6:	f023 0320 	bic.w	r3, r3, #32
 8009bda:	6023      	str	r3, [r4, #0]
 8009bdc:	2310      	movs	r3, #16
 8009bde:	e7a7      	b.n	8009b30 <_printf_i+0xf8>
 8009be0:	4824      	ldr	r0, [pc, #144]	; (8009c74 <_printf_i+0x23c>)
 8009be2:	e7e4      	b.n	8009bae <_printf_i+0x176>
 8009be4:	4615      	mov	r5, r2
 8009be6:	e7bd      	b.n	8009b64 <_printf_i+0x12c>
 8009be8:	682b      	ldr	r3, [r5, #0]
 8009bea:	6826      	ldr	r6, [r4, #0]
 8009bec:	6961      	ldr	r1, [r4, #20]
 8009bee:	1d18      	adds	r0, r3, #4
 8009bf0:	6028      	str	r0, [r5, #0]
 8009bf2:	0635      	lsls	r5, r6, #24
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	d501      	bpl.n	8009bfc <_printf_i+0x1c4>
 8009bf8:	6019      	str	r1, [r3, #0]
 8009bfa:	e002      	b.n	8009c02 <_printf_i+0x1ca>
 8009bfc:	0670      	lsls	r0, r6, #25
 8009bfe:	d5fb      	bpl.n	8009bf8 <_printf_i+0x1c0>
 8009c00:	8019      	strh	r1, [r3, #0]
 8009c02:	2300      	movs	r3, #0
 8009c04:	6123      	str	r3, [r4, #16]
 8009c06:	4615      	mov	r5, r2
 8009c08:	e7bc      	b.n	8009b84 <_printf_i+0x14c>
 8009c0a:	682b      	ldr	r3, [r5, #0]
 8009c0c:	1d1a      	adds	r2, r3, #4
 8009c0e:	602a      	str	r2, [r5, #0]
 8009c10:	681d      	ldr	r5, [r3, #0]
 8009c12:	6862      	ldr	r2, [r4, #4]
 8009c14:	2100      	movs	r1, #0
 8009c16:	4628      	mov	r0, r5
 8009c18:	f7f6 faea 	bl	80001f0 <memchr>
 8009c1c:	b108      	cbz	r0, 8009c22 <_printf_i+0x1ea>
 8009c1e:	1b40      	subs	r0, r0, r5
 8009c20:	6060      	str	r0, [r4, #4]
 8009c22:	6863      	ldr	r3, [r4, #4]
 8009c24:	6123      	str	r3, [r4, #16]
 8009c26:	2300      	movs	r3, #0
 8009c28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c2c:	e7aa      	b.n	8009b84 <_printf_i+0x14c>
 8009c2e:	6923      	ldr	r3, [r4, #16]
 8009c30:	462a      	mov	r2, r5
 8009c32:	4649      	mov	r1, r9
 8009c34:	4640      	mov	r0, r8
 8009c36:	47d0      	blx	sl
 8009c38:	3001      	adds	r0, #1
 8009c3a:	d0ad      	beq.n	8009b98 <_printf_i+0x160>
 8009c3c:	6823      	ldr	r3, [r4, #0]
 8009c3e:	079b      	lsls	r3, r3, #30
 8009c40:	d413      	bmi.n	8009c6a <_printf_i+0x232>
 8009c42:	68e0      	ldr	r0, [r4, #12]
 8009c44:	9b03      	ldr	r3, [sp, #12]
 8009c46:	4298      	cmp	r0, r3
 8009c48:	bfb8      	it	lt
 8009c4a:	4618      	movlt	r0, r3
 8009c4c:	e7a6      	b.n	8009b9c <_printf_i+0x164>
 8009c4e:	2301      	movs	r3, #1
 8009c50:	4632      	mov	r2, r6
 8009c52:	4649      	mov	r1, r9
 8009c54:	4640      	mov	r0, r8
 8009c56:	47d0      	blx	sl
 8009c58:	3001      	adds	r0, #1
 8009c5a:	d09d      	beq.n	8009b98 <_printf_i+0x160>
 8009c5c:	3501      	adds	r5, #1
 8009c5e:	68e3      	ldr	r3, [r4, #12]
 8009c60:	9903      	ldr	r1, [sp, #12]
 8009c62:	1a5b      	subs	r3, r3, r1
 8009c64:	42ab      	cmp	r3, r5
 8009c66:	dcf2      	bgt.n	8009c4e <_printf_i+0x216>
 8009c68:	e7eb      	b.n	8009c42 <_printf_i+0x20a>
 8009c6a:	2500      	movs	r5, #0
 8009c6c:	f104 0619 	add.w	r6, r4, #25
 8009c70:	e7f5      	b.n	8009c5e <_printf_i+0x226>
 8009c72:	bf00      	nop
 8009c74:	0800dd46 	.word	0x0800dd46
 8009c78:	0800dd57 	.word	0x0800dd57

08009c7c <_scanf_float>:
 8009c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c80:	b087      	sub	sp, #28
 8009c82:	4617      	mov	r7, r2
 8009c84:	9303      	str	r3, [sp, #12]
 8009c86:	688b      	ldr	r3, [r1, #8]
 8009c88:	1e5a      	subs	r2, r3, #1
 8009c8a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009c8e:	bf83      	ittte	hi
 8009c90:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009c94:	195b      	addhi	r3, r3, r5
 8009c96:	9302      	strhi	r3, [sp, #8]
 8009c98:	2300      	movls	r3, #0
 8009c9a:	bf86      	itte	hi
 8009c9c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009ca0:	608b      	strhi	r3, [r1, #8]
 8009ca2:	9302      	strls	r3, [sp, #8]
 8009ca4:	680b      	ldr	r3, [r1, #0]
 8009ca6:	468b      	mov	fp, r1
 8009ca8:	2500      	movs	r5, #0
 8009caa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009cae:	f84b 3b1c 	str.w	r3, [fp], #28
 8009cb2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009cb6:	4680      	mov	r8, r0
 8009cb8:	460c      	mov	r4, r1
 8009cba:	465e      	mov	r6, fp
 8009cbc:	46aa      	mov	sl, r5
 8009cbe:	46a9      	mov	r9, r5
 8009cc0:	9501      	str	r5, [sp, #4]
 8009cc2:	68a2      	ldr	r2, [r4, #8]
 8009cc4:	b152      	cbz	r2, 8009cdc <_scanf_float+0x60>
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	781b      	ldrb	r3, [r3, #0]
 8009cca:	2b4e      	cmp	r3, #78	; 0x4e
 8009ccc:	d864      	bhi.n	8009d98 <_scanf_float+0x11c>
 8009cce:	2b40      	cmp	r3, #64	; 0x40
 8009cd0:	d83c      	bhi.n	8009d4c <_scanf_float+0xd0>
 8009cd2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009cd6:	b2c8      	uxtb	r0, r1
 8009cd8:	280e      	cmp	r0, #14
 8009cda:	d93a      	bls.n	8009d52 <_scanf_float+0xd6>
 8009cdc:	f1b9 0f00 	cmp.w	r9, #0
 8009ce0:	d003      	beq.n	8009cea <_scanf_float+0x6e>
 8009ce2:	6823      	ldr	r3, [r4, #0]
 8009ce4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ce8:	6023      	str	r3, [r4, #0]
 8009cea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009cee:	f1ba 0f01 	cmp.w	sl, #1
 8009cf2:	f200 8113 	bhi.w	8009f1c <_scanf_float+0x2a0>
 8009cf6:	455e      	cmp	r6, fp
 8009cf8:	f200 8105 	bhi.w	8009f06 <_scanf_float+0x28a>
 8009cfc:	2501      	movs	r5, #1
 8009cfe:	4628      	mov	r0, r5
 8009d00:	b007      	add	sp, #28
 8009d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d06:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009d0a:	2a0d      	cmp	r2, #13
 8009d0c:	d8e6      	bhi.n	8009cdc <_scanf_float+0x60>
 8009d0e:	a101      	add	r1, pc, #4	; (adr r1, 8009d14 <_scanf_float+0x98>)
 8009d10:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009d14:	08009e53 	.word	0x08009e53
 8009d18:	08009cdd 	.word	0x08009cdd
 8009d1c:	08009cdd 	.word	0x08009cdd
 8009d20:	08009cdd 	.word	0x08009cdd
 8009d24:	08009eb3 	.word	0x08009eb3
 8009d28:	08009e8b 	.word	0x08009e8b
 8009d2c:	08009cdd 	.word	0x08009cdd
 8009d30:	08009cdd 	.word	0x08009cdd
 8009d34:	08009e61 	.word	0x08009e61
 8009d38:	08009cdd 	.word	0x08009cdd
 8009d3c:	08009cdd 	.word	0x08009cdd
 8009d40:	08009cdd 	.word	0x08009cdd
 8009d44:	08009cdd 	.word	0x08009cdd
 8009d48:	08009e19 	.word	0x08009e19
 8009d4c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009d50:	e7db      	b.n	8009d0a <_scanf_float+0x8e>
 8009d52:	290e      	cmp	r1, #14
 8009d54:	d8c2      	bhi.n	8009cdc <_scanf_float+0x60>
 8009d56:	a001      	add	r0, pc, #4	; (adr r0, 8009d5c <_scanf_float+0xe0>)
 8009d58:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009d5c:	08009e0b 	.word	0x08009e0b
 8009d60:	08009cdd 	.word	0x08009cdd
 8009d64:	08009e0b 	.word	0x08009e0b
 8009d68:	08009e9f 	.word	0x08009e9f
 8009d6c:	08009cdd 	.word	0x08009cdd
 8009d70:	08009db9 	.word	0x08009db9
 8009d74:	08009df5 	.word	0x08009df5
 8009d78:	08009df5 	.word	0x08009df5
 8009d7c:	08009df5 	.word	0x08009df5
 8009d80:	08009df5 	.word	0x08009df5
 8009d84:	08009df5 	.word	0x08009df5
 8009d88:	08009df5 	.word	0x08009df5
 8009d8c:	08009df5 	.word	0x08009df5
 8009d90:	08009df5 	.word	0x08009df5
 8009d94:	08009df5 	.word	0x08009df5
 8009d98:	2b6e      	cmp	r3, #110	; 0x6e
 8009d9a:	d809      	bhi.n	8009db0 <_scanf_float+0x134>
 8009d9c:	2b60      	cmp	r3, #96	; 0x60
 8009d9e:	d8b2      	bhi.n	8009d06 <_scanf_float+0x8a>
 8009da0:	2b54      	cmp	r3, #84	; 0x54
 8009da2:	d077      	beq.n	8009e94 <_scanf_float+0x218>
 8009da4:	2b59      	cmp	r3, #89	; 0x59
 8009da6:	d199      	bne.n	8009cdc <_scanf_float+0x60>
 8009da8:	2d07      	cmp	r5, #7
 8009daa:	d197      	bne.n	8009cdc <_scanf_float+0x60>
 8009dac:	2508      	movs	r5, #8
 8009dae:	e029      	b.n	8009e04 <_scanf_float+0x188>
 8009db0:	2b74      	cmp	r3, #116	; 0x74
 8009db2:	d06f      	beq.n	8009e94 <_scanf_float+0x218>
 8009db4:	2b79      	cmp	r3, #121	; 0x79
 8009db6:	e7f6      	b.n	8009da6 <_scanf_float+0x12a>
 8009db8:	6821      	ldr	r1, [r4, #0]
 8009dba:	05c8      	lsls	r0, r1, #23
 8009dbc:	d51a      	bpl.n	8009df4 <_scanf_float+0x178>
 8009dbe:	9b02      	ldr	r3, [sp, #8]
 8009dc0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009dc4:	6021      	str	r1, [r4, #0]
 8009dc6:	f109 0901 	add.w	r9, r9, #1
 8009dca:	b11b      	cbz	r3, 8009dd4 <_scanf_float+0x158>
 8009dcc:	3b01      	subs	r3, #1
 8009dce:	3201      	adds	r2, #1
 8009dd0:	9302      	str	r3, [sp, #8]
 8009dd2:	60a2      	str	r2, [r4, #8]
 8009dd4:	68a3      	ldr	r3, [r4, #8]
 8009dd6:	3b01      	subs	r3, #1
 8009dd8:	60a3      	str	r3, [r4, #8]
 8009dda:	6923      	ldr	r3, [r4, #16]
 8009ddc:	3301      	adds	r3, #1
 8009dde:	6123      	str	r3, [r4, #16]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	3b01      	subs	r3, #1
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	607b      	str	r3, [r7, #4]
 8009de8:	f340 8084 	ble.w	8009ef4 <_scanf_float+0x278>
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	3301      	adds	r3, #1
 8009df0:	603b      	str	r3, [r7, #0]
 8009df2:	e766      	b.n	8009cc2 <_scanf_float+0x46>
 8009df4:	eb1a 0f05 	cmn.w	sl, r5
 8009df8:	f47f af70 	bne.w	8009cdc <_scanf_float+0x60>
 8009dfc:	6822      	ldr	r2, [r4, #0]
 8009dfe:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009e02:	6022      	str	r2, [r4, #0]
 8009e04:	f806 3b01 	strb.w	r3, [r6], #1
 8009e08:	e7e4      	b.n	8009dd4 <_scanf_float+0x158>
 8009e0a:	6822      	ldr	r2, [r4, #0]
 8009e0c:	0610      	lsls	r0, r2, #24
 8009e0e:	f57f af65 	bpl.w	8009cdc <_scanf_float+0x60>
 8009e12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009e16:	e7f4      	b.n	8009e02 <_scanf_float+0x186>
 8009e18:	f1ba 0f00 	cmp.w	sl, #0
 8009e1c:	d10e      	bne.n	8009e3c <_scanf_float+0x1c0>
 8009e1e:	f1b9 0f00 	cmp.w	r9, #0
 8009e22:	d10e      	bne.n	8009e42 <_scanf_float+0x1c6>
 8009e24:	6822      	ldr	r2, [r4, #0]
 8009e26:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009e2a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009e2e:	d108      	bne.n	8009e42 <_scanf_float+0x1c6>
 8009e30:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009e34:	6022      	str	r2, [r4, #0]
 8009e36:	f04f 0a01 	mov.w	sl, #1
 8009e3a:	e7e3      	b.n	8009e04 <_scanf_float+0x188>
 8009e3c:	f1ba 0f02 	cmp.w	sl, #2
 8009e40:	d055      	beq.n	8009eee <_scanf_float+0x272>
 8009e42:	2d01      	cmp	r5, #1
 8009e44:	d002      	beq.n	8009e4c <_scanf_float+0x1d0>
 8009e46:	2d04      	cmp	r5, #4
 8009e48:	f47f af48 	bne.w	8009cdc <_scanf_float+0x60>
 8009e4c:	3501      	adds	r5, #1
 8009e4e:	b2ed      	uxtb	r5, r5
 8009e50:	e7d8      	b.n	8009e04 <_scanf_float+0x188>
 8009e52:	f1ba 0f01 	cmp.w	sl, #1
 8009e56:	f47f af41 	bne.w	8009cdc <_scanf_float+0x60>
 8009e5a:	f04f 0a02 	mov.w	sl, #2
 8009e5e:	e7d1      	b.n	8009e04 <_scanf_float+0x188>
 8009e60:	b97d      	cbnz	r5, 8009e82 <_scanf_float+0x206>
 8009e62:	f1b9 0f00 	cmp.w	r9, #0
 8009e66:	f47f af3c 	bne.w	8009ce2 <_scanf_float+0x66>
 8009e6a:	6822      	ldr	r2, [r4, #0]
 8009e6c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009e70:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009e74:	f47f af39 	bne.w	8009cea <_scanf_float+0x6e>
 8009e78:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009e7c:	6022      	str	r2, [r4, #0]
 8009e7e:	2501      	movs	r5, #1
 8009e80:	e7c0      	b.n	8009e04 <_scanf_float+0x188>
 8009e82:	2d03      	cmp	r5, #3
 8009e84:	d0e2      	beq.n	8009e4c <_scanf_float+0x1d0>
 8009e86:	2d05      	cmp	r5, #5
 8009e88:	e7de      	b.n	8009e48 <_scanf_float+0x1cc>
 8009e8a:	2d02      	cmp	r5, #2
 8009e8c:	f47f af26 	bne.w	8009cdc <_scanf_float+0x60>
 8009e90:	2503      	movs	r5, #3
 8009e92:	e7b7      	b.n	8009e04 <_scanf_float+0x188>
 8009e94:	2d06      	cmp	r5, #6
 8009e96:	f47f af21 	bne.w	8009cdc <_scanf_float+0x60>
 8009e9a:	2507      	movs	r5, #7
 8009e9c:	e7b2      	b.n	8009e04 <_scanf_float+0x188>
 8009e9e:	6822      	ldr	r2, [r4, #0]
 8009ea0:	0591      	lsls	r1, r2, #22
 8009ea2:	f57f af1b 	bpl.w	8009cdc <_scanf_float+0x60>
 8009ea6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009eaa:	6022      	str	r2, [r4, #0]
 8009eac:	f8cd 9004 	str.w	r9, [sp, #4]
 8009eb0:	e7a8      	b.n	8009e04 <_scanf_float+0x188>
 8009eb2:	6822      	ldr	r2, [r4, #0]
 8009eb4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009eb8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009ebc:	d006      	beq.n	8009ecc <_scanf_float+0x250>
 8009ebe:	0550      	lsls	r0, r2, #21
 8009ec0:	f57f af0c 	bpl.w	8009cdc <_scanf_float+0x60>
 8009ec4:	f1b9 0f00 	cmp.w	r9, #0
 8009ec8:	f43f af0f 	beq.w	8009cea <_scanf_float+0x6e>
 8009ecc:	0591      	lsls	r1, r2, #22
 8009ece:	bf58      	it	pl
 8009ed0:	9901      	ldrpl	r1, [sp, #4]
 8009ed2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009ed6:	bf58      	it	pl
 8009ed8:	eba9 0101 	subpl.w	r1, r9, r1
 8009edc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009ee0:	bf58      	it	pl
 8009ee2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009ee6:	6022      	str	r2, [r4, #0]
 8009ee8:	f04f 0900 	mov.w	r9, #0
 8009eec:	e78a      	b.n	8009e04 <_scanf_float+0x188>
 8009eee:	f04f 0a03 	mov.w	sl, #3
 8009ef2:	e787      	b.n	8009e04 <_scanf_float+0x188>
 8009ef4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009ef8:	4639      	mov	r1, r7
 8009efa:	4640      	mov	r0, r8
 8009efc:	4798      	blx	r3
 8009efe:	2800      	cmp	r0, #0
 8009f00:	f43f aedf 	beq.w	8009cc2 <_scanf_float+0x46>
 8009f04:	e6ea      	b.n	8009cdc <_scanf_float+0x60>
 8009f06:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009f0a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009f0e:	463a      	mov	r2, r7
 8009f10:	4640      	mov	r0, r8
 8009f12:	4798      	blx	r3
 8009f14:	6923      	ldr	r3, [r4, #16]
 8009f16:	3b01      	subs	r3, #1
 8009f18:	6123      	str	r3, [r4, #16]
 8009f1a:	e6ec      	b.n	8009cf6 <_scanf_float+0x7a>
 8009f1c:	1e6b      	subs	r3, r5, #1
 8009f1e:	2b06      	cmp	r3, #6
 8009f20:	d825      	bhi.n	8009f6e <_scanf_float+0x2f2>
 8009f22:	2d02      	cmp	r5, #2
 8009f24:	d836      	bhi.n	8009f94 <_scanf_float+0x318>
 8009f26:	455e      	cmp	r6, fp
 8009f28:	f67f aee8 	bls.w	8009cfc <_scanf_float+0x80>
 8009f2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009f30:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009f34:	463a      	mov	r2, r7
 8009f36:	4640      	mov	r0, r8
 8009f38:	4798      	blx	r3
 8009f3a:	6923      	ldr	r3, [r4, #16]
 8009f3c:	3b01      	subs	r3, #1
 8009f3e:	6123      	str	r3, [r4, #16]
 8009f40:	e7f1      	b.n	8009f26 <_scanf_float+0x2aa>
 8009f42:	9802      	ldr	r0, [sp, #8]
 8009f44:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009f48:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009f4c:	9002      	str	r0, [sp, #8]
 8009f4e:	463a      	mov	r2, r7
 8009f50:	4640      	mov	r0, r8
 8009f52:	4798      	blx	r3
 8009f54:	6923      	ldr	r3, [r4, #16]
 8009f56:	3b01      	subs	r3, #1
 8009f58:	6123      	str	r3, [r4, #16]
 8009f5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009f5e:	fa5f fa8a 	uxtb.w	sl, sl
 8009f62:	f1ba 0f02 	cmp.w	sl, #2
 8009f66:	d1ec      	bne.n	8009f42 <_scanf_float+0x2c6>
 8009f68:	3d03      	subs	r5, #3
 8009f6a:	b2ed      	uxtb	r5, r5
 8009f6c:	1b76      	subs	r6, r6, r5
 8009f6e:	6823      	ldr	r3, [r4, #0]
 8009f70:	05da      	lsls	r2, r3, #23
 8009f72:	d52f      	bpl.n	8009fd4 <_scanf_float+0x358>
 8009f74:	055b      	lsls	r3, r3, #21
 8009f76:	d510      	bpl.n	8009f9a <_scanf_float+0x31e>
 8009f78:	455e      	cmp	r6, fp
 8009f7a:	f67f aebf 	bls.w	8009cfc <_scanf_float+0x80>
 8009f7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009f82:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009f86:	463a      	mov	r2, r7
 8009f88:	4640      	mov	r0, r8
 8009f8a:	4798      	blx	r3
 8009f8c:	6923      	ldr	r3, [r4, #16]
 8009f8e:	3b01      	subs	r3, #1
 8009f90:	6123      	str	r3, [r4, #16]
 8009f92:	e7f1      	b.n	8009f78 <_scanf_float+0x2fc>
 8009f94:	46aa      	mov	sl, r5
 8009f96:	9602      	str	r6, [sp, #8]
 8009f98:	e7df      	b.n	8009f5a <_scanf_float+0x2de>
 8009f9a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009f9e:	6923      	ldr	r3, [r4, #16]
 8009fa0:	2965      	cmp	r1, #101	; 0x65
 8009fa2:	f103 33ff 	add.w	r3, r3, #4294967295
 8009fa6:	f106 35ff 	add.w	r5, r6, #4294967295
 8009faa:	6123      	str	r3, [r4, #16]
 8009fac:	d00c      	beq.n	8009fc8 <_scanf_float+0x34c>
 8009fae:	2945      	cmp	r1, #69	; 0x45
 8009fb0:	d00a      	beq.n	8009fc8 <_scanf_float+0x34c>
 8009fb2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009fb6:	463a      	mov	r2, r7
 8009fb8:	4640      	mov	r0, r8
 8009fba:	4798      	blx	r3
 8009fbc:	6923      	ldr	r3, [r4, #16]
 8009fbe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009fc2:	3b01      	subs	r3, #1
 8009fc4:	1eb5      	subs	r5, r6, #2
 8009fc6:	6123      	str	r3, [r4, #16]
 8009fc8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009fcc:	463a      	mov	r2, r7
 8009fce:	4640      	mov	r0, r8
 8009fd0:	4798      	blx	r3
 8009fd2:	462e      	mov	r6, r5
 8009fd4:	6825      	ldr	r5, [r4, #0]
 8009fd6:	f015 0510 	ands.w	r5, r5, #16
 8009fda:	d158      	bne.n	800a08e <_scanf_float+0x412>
 8009fdc:	7035      	strb	r5, [r6, #0]
 8009fde:	6823      	ldr	r3, [r4, #0]
 8009fe0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009fe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fe8:	d11c      	bne.n	800a024 <_scanf_float+0x3a8>
 8009fea:	9b01      	ldr	r3, [sp, #4]
 8009fec:	454b      	cmp	r3, r9
 8009fee:	eba3 0209 	sub.w	r2, r3, r9
 8009ff2:	d124      	bne.n	800a03e <_scanf_float+0x3c2>
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	4659      	mov	r1, fp
 8009ff8:	4640      	mov	r0, r8
 8009ffa:	f002 fcf1 	bl	800c9e0 <_strtod_r>
 8009ffe:	9b03      	ldr	r3, [sp, #12]
 800a000:	6821      	ldr	r1, [r4, #0]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f011 0f02 	tst.w	r1, #2
 800a008:	ec57 6b10 	vmov	r6, r7, d0
 800a00c:	f103 0204 	add.w	r2, r3, #4
 800a010:	d020      	beq.n	800a054 <_scanf_float+0x3d8>
 800a012:	9903      	ldr	r1, [sp, #12]
 800a014:	600a      	str	r2, [r1, #0]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	e9c3 6700 	strd	r6, r7, [r3]
 800a01c:	68e3      	ldr	r3, [r4, #12]
 800a01e:	3301      	adds	r3, #1
 800a020:	60e3      	str	r3, [r4, #12]
 800a022:	e66c      	b.n	8009cfe <_scanf_float+0x82>
 800a024:	9b04      	ldr	r3, [sp, #16]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d0e4      	beq.n	8009ff4 <_scanf_float+0x378>
 800a02a:	9905      	ldr	r1, [sp, #20]
 800a02c:	230a      	movs	r3, #10
 800a02e:	462a      	mov	r2, r5
 800a030:	3101      	adds	r1, #1
 800a032:	4640      	mov	r0, r8
 800a034:	f002 fd5c 	bl	800caf0 <_strtol_r>
 800a038:	9b04      	ldr	r3, [sp, #16]
 800a03a:	9e05      	ldr	r6, [sp, #20]
 800a03c:	1ac2      	subs	r2, r0, r3
 800a03e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a042:	429e      	cmp	r6, r3
 800a044:	bf28      	it	cs
 800a046:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a04a:	4912      	ldr	r1, [pc, #72]	; (800a094 <_scanf_float+0x418>)
 800a04c:	4630      	mov	r0, r6
 800a04e:	f000 f9a7 	bl	800a3a0 <siprintf>
 800a052:	e7cf      	b.n	8009ff4 <_scanf_float+0x378>
 800a054:	f011 0f04 	tst.w	r1, #4
 800a058:	9903      	ldr	r1, [sp, #12]
 800a05a:	600a      	str	r2, [r1, #0]
 800a05c:	d1db      	bne.n	800a016 <_scanf_float+0x39a>
 800a05e:	f8d3 8000 	ldr.w	r8, [r3]
 800a062:	ee10 2a10 	vmov	r2, s0
 800a066:	ee10 0a10 	vmov	r0, s0
 800a06a:	463b      	mov	r3, r7
 800a06c:	4639      	mov	r1, r7
 800a06e:	f7f6 fd6d 	bl	8000b4c <__aeabi_dcmpun>
 800a072:	b128      	cbz	r0, 800a080 <_scanf_float+0x404>
 800a074:	4808      	ldr	r0, [pc, #32]	; (800a098 <_scanf_float+0x41c>)
 800a076:	f000 fa77 	bl	800a568 <nanf>
 800a07a:	ed88 0a00 	vstr	s0, [r8]
 800a07e:	e7cd      	b.n	800a01c <_scanf_float+0x3a0>
 800a080:	4630      	mov	r0, r6
 800a082:	4639      	mov	r1, r7
 800a084:	f7f6 fdc0 	bl	8000c08 <__aeabi_d2f>
 800a088:	f8c8 0000 	str.w	r0, [r8]
 800a08c:	e7c6      	b.n	800a01c <_scanf_float+0x3a0>
 800a08e:	2500      	movs	r5, #0
 800a090:	e635      	b.n	8009cfe <_scanf_float+0x82>
 800a092:	bf00      	nop
 800a094:	0800dd68 	.word	0x0800dd68
 800a098:	0800e0fd 	.word	0x0800e0fd

0800a09c <std>:
 800a09c:	2300      	movs	r3, #0
 800a09e:	b510      	push	{r4, lr}
 800a0a0:	4604      	mov	r4, r0
 800a0a2:	e9c0 3300 	strd	r3, r3, [r0]
 800a0a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a0aa:	6083      	str	r3, [r0, #8]
 800a0ac:	8181      	strh	r1, [r0, #12]
 800a0ae:	6643      	str	r3, [r0, #100]	; 0x64
 800a0b0:	81c2      	strh	r2, [r0, #14]
 800a0b2:	6183      	str	r3, [r0, #24]
 800a0b4:	4619      	mov	r1, r3
 800a0b6:	2208      	movs	r2, #8
 800a0b8:	305c      	adds	r0, #92	; 0x5c
 800a0ba:	f000 f9d4 	bl	800a466 <memset>
 800a0be:	4b0d      	ldr	r3, [pc, #52]	; (800a0f4 <std+0x58>)
 800a0c0:	6263      	str	r3, [r4, #36]	; 0x24
 800a0c2:	4b0d      	ldr	r3, [pc, #52]	; (800a0f8 <std+0x5c>)
 800a0c4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a0c6:	4b0d      	ldr	r3, [pc, #52]	; (800a0fc <std+0x60>)
 800a0c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a0ca:	4b0d      	ldr	r3, [pc, #52]	; (800a100 <std+0x64>)
 800a0cc:	6323      	str	r3, [r4, #48]	; 0x30
 800a0ce:	4b0d      	ldr	r3, [pc, #52]	; (800a104 <std+0x68>)
 800a0d0:	6224      	str	r4, [r4, #32]
 800a0d2:	429c      	cmp	r4, r3
 800a0d4:	d006      	beq.n	800a0e4 <std+0x48>
 800a0d6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a0da:	4294      	cmp	r4, r2
 800a0dc:	d002      	beq.n	800a0e4 <std+0x48>
 800a0de:	33d0      	adds	r3, #208	; 0xd0
 800a0e0:	429c      	cmp	r4, r3
 800a0e2:	d105      	bne.n	800a0f0 <std+0x54>
 800a0e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a0e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0ec:	f000 ba38 	b.w	800a560 <__retarget_lock_init_recursive>
 800a0f0:	bd10      	pop	{r4, pc}
 800a0f2:	bf00      	nop
 800a0f4:	0800a3e1 	.word	0x0800a3e1
 800a0f8:	0800a403 	.word	0x0800a403
 800a0fc:	0800a43b 	.word	0x0800a43b
 800a100:	0800a45f 	.word	0x0800a45f
 800a104:	20000f64 	.word	0x20000f64

0800a108 <stdio_exit_handler>:
 800a108:	4a02      	ldr	r2, [pc, #8]	; (800a114 <stdio_exit_handler+0xc>)
 800a10a:	4903      	ldr	r1, [pc, #12]	; (800a118 <stdio_exit_handler+0x10>)
 800a10c:	4803      	ldr	r0, [pc, #12]	; (800a11c <stdio_exit_handler+0x14>)
 800a10e:	f000 b869 	b.w	800a1e4 <_fwalk_sglue>
 800a112:	bf00      	nop
 800a114:	2000001c 	.word	0x2000001c
 800a118:	0800d139 	.word	0x0800d139
 800a11c:	20000028 	.word	0x20000028

0800a120 <cleanup_stdio>:
 800a120:	6841      	ldr	r1, [r0, #4]
 800a122:	4b0c      	ldr	r3, [pc, #48]	; (800a154 <cleanup_stdio+0x34>)
 800a124:	4299      	cmp	r1, r3
 800a126:	b510      	push	{r4, lr}
 800a128:	4604      	mov	r4, r0
 800a12a:	d001      	beq.n	800a130 <cleanup_stdio+0x10>
 800a12c:	f003 f804 	bl	800d138 <_fflush_r>
 800a130:	68a1      	ldr	r1, [r4, #8]
 800a132:	4b09      	ldr	r3, [pc, #36]	; (800a158 <cleanup_stdio+0x38>)
 800a134:	4299      	cmp	r1, r3
 800a136:	d002      	beq.n	800a13e <cleanup_stdio+0x1e>
 800a138:	4620      	mov	r0, r4
 800a13a:	f002 fffd 	bl	800d138 <_fflush_r>
 800a13e:	68e1      	ldr	r1, [r4, #12]
 800a140:	4b06      	ldr	r3, [pc, #24]	; (800a15c <cleanup_stdio+0x3c>)
 800a142:	4299      	cmp	r1, r3
 800a144:	d004      	beq.n	800a150 <cleanup_stdio+0x30>
 800a146:	4620      	mov	r0, r4
 800a148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a14c:	f002 bff4 	b.w	800d138 <_fflush_r>
 800a150:	bd10      	pop	{r4, pc}
 800a152:	bf00      	nop
 800a154:	20000f64 	.word	0x20000f64
 800a158:	20000fcc 	.word	0x20000fcc
 800a15c:	20001034 	.word	0x20001034

0800a160 <global_stdio_init.part.0>:
 800a160:	b510      	push	{r4, lr}
 800a162:	4b0b      	ldr	r3, [pc, #44]	; (800a190 <global_stdio_init.part.0+0x30>)
 800a164:	4c0b      	ldr	r4, [pc, #44]	; (800a194 <global_stdio_init.part.0+0x34>)
 800a166:	4a0c      	ldr	r2, [pc, #48]	; (800a198 <global_stdio_init.part.0+0x38>)
 800a168:	601a      	str	r2, [r3, #0]
 800a16a:	4620      	mov	r0, r4
 800a16c:	2200      	movs	r2, #0
 800a16e:	2104      	movs	r1, #4
 800a170:	f7ff ff94 	bl	800a09c <std>
 800a174:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a178:	2201      	movs	r2, #1
 800a17a:	2109      	movs	r1, #9
 800a17c:	f7ff ff8e 	bl	800a09c <std>
 800a180:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a184:	2202      	movs	r2, #2
 800a186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a18a:	2112      	movs	r1, #18
 800a18c:	f7ff bf86 	b.w	800a09c <std>
 800a190:	2000109c 	.word	0x2000109c
 800a194:	20000f64 	.word	0x20000f64
 800a198:	0800a109 	.word	0x0800a109

0800a19c <__sfp_lock_acquire>:
 800a19c:	4801      	ldr	r0, [pc, #4]	; (800a1a4 <__sfp_lock_acquire+0x8>)
 800a19e:	f000 b9e0 	b.w	800a562 <__retarget_lock_acquire_recursive>
 800a1a2:	bf00      	nop
 800a1a4:	200010a5 	.word	0x200010a5

0800a1a8 <__sfp_lock_release>:
 800a1a8:	4801      	ldr	r0, [pc, #4]	; (800a1b0 <__sfp_lock_release+0x8>)
 800a1aa:	f000 b9db 	b.w	800a564 <__retarget_lock_release_recursive>
 800a1ae:	bf00      	nop
 800a1b0:	200010a5 	.word	0x200010a5

0800a1b4 <__sinit>:
 800a1b4:	b510      	push	{r4, lr}
 800a1b6:	4604      	mov	r4, r0
 800a1b8:	f7ff fff0 	bl	800a19c <__sfp_lock_acquire>
 800a1bc:	6a23      	ldr	r3, [r4, #32]
 800a1be:	b11b      	cbz	r3, 800a1c8 <__sinit+0x14>
 800a1c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1c4:	f7ff bff0 	b.w	800a1a8 <__sfp_lock_release>
 800a1c8:	4b04      	ldr	r3, [pc, #16]	; (800a1dc <__sinit+0x28>)
 800a1ca:	6223      	str	r3, [r4, #32]
 800a1cc:	4b04      	ldr	r3, [pc, #16]	; (800a1e0 <__sinit+0x2c>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d1f5      	bne.n	800a1c0 <__sinit+0xc>
 800a1d4:	f7ff ffc4 	bl	800a160 <global_stdio_init.part.0>
 800a1d8:	e7f2      	b.n	800a1c0 <__sinit+0xc>
 800a1da:	bf00      	nop
 800a1dc:	0800a121 	.word	0x0800a121
 800a1e0:	2000109c 	.word	0x2000109c

0800a1e4 <_fwalk_sglue>:
 800a1e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1e8:	4607      	mov	r7, r0
 800a1ea:	4688      	mov	r8, r1
 800a1ec:	4614      	mov	r4, r2
 800a1ee:	2600      	movs	r6, #0
 800a1f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a1f4:	f1b9 0901 	subs.w	r9, r9, #1
 800a1f8:	d505      	bpl.n	800a206 <_fwalk_sglue+0x22>
 800a1fa:	6824      	ldr	r4, [r4, #0]
 800a1fc:	2c00      	cmp	r4, #0
 800a1fe:	d1f7      	bne.n	800a1f0 <_fwalk_sglue+0xc>
 800a200:	4630      	mov	r0, r6
 800a202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a206:	89ab      	ldrh	r3, [r5, #12]
 800a208:	2b01      	cmp	r3, #1
 800a20a:	d907      	bls.n	800a21c <_fwalk_sglue+0x38>
 800a20c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a210:	3301      	adds	r3, #1
 800a212:	d003      	beq.n	800a21c <_fwalk_sglue+0x38>
 800a214:	4629      	mov	r1, r5
 800a216:	4638      	mov	r0, r7
 800a218:	47c0      	blx	r8
 800a21a:	4306      	orrs	r6, r0
 800a21c:	3568      	adds	r5, #104	; 0x68
 800a21e:	e7e9      	b.n	800a1f4 <_fwalk_sglue+0x10>

0800a220 <iprintf>:
 800a220:	b40f      	push	{r0, r1, r2, r3}
 800a222:	b507      	push	{r0, r1, r2, lr}
 800a224:	4906      	ldr	r1, [pc, #24]	; (800a240 <iprintf+0x20>)
 800a226:	ab04      	add	r3, sp, #16
 800a228:	6808      	ldr	r0, [r1, #0]
 800a22a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a22e:	6881      	ldr	r1, [r0, #8]
 800a230:	9301      	str	r3, [sp, #4]
 800a232:	f002 fde1 	bl	800cdf8 <_vfiprintf_r>
 800a236:	b003      	add	sp, #12
 800a238:	f85d eb04 	ldr.w	lr, [sp], #4
 800a23c:	b004      	add	sp, #16
 800a23e:	4770      	bx	lr
 800a240:	20000074 	.word	0x20000074

0800a244 <setvbuf>:
 800a244:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a248:	461d      	mov	r5, r3
 800a24a:	4b54      	ldr	r3, [pc, #336]	; (800a39c <setvbuf+0x158>)
 800a24c:	681f      	ldr	r7, [r3, #0]
 800a24e:	4604      	mov	r4, r0
 800a250:	460e      	mov	r6, r1
 800a252:	4690      	mov	r8, r2
 800a254:	b127      	cbz	r7, 800a260 <setvbuf+0x1c>
 800a256:	6a3b      	ldr	r3, [r7, #32]
 800a258:	b913      	cbnz	r3, 800a260 <setvbuf+0x1c>
 800a25a:	4638      	mov	r0, r7
 800a25c:	f7ff ffaa 	bl	800a1b4 <__sinit>
 800a260:	f1b8 0f02 	cmp.w	r8, #2
 800a264:	d006      	beq.n	800a274 <setvbuf+0x30>
 800a266:	f1b8 0f01 	cmp.w	r8, #1
 800a26a:	f200 8094 	bhi.w	800a396 <setvbuf+0x152>
 800a26e:	2d00      	cmp	r5, #0
 800a270:	f2c0 8091 	blt.w	800a396 <setvbuf+0x152>
 800a274:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a276:	07da      	lsls	r2, r3, #31
 800a278:	d405      	bmi.n	800a286 <setvbuf+0x42>
 800a27a:	89a3      	ldrh	r3, [r4, #12]
 800a27c:	059b      	lsls	r3, r3, #22
 800a27e:	d402      	bmi.n	800a286 <setvbuf+0x42>
 800a280:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a282:	f000 f96e 	bl	800a562 <__retarget_lock_acquire_recursive>
 800a286:	4621      	mov	r1, r4
 800a288:	4638      	mov	r0, r7
 800a28a:	f002 ff55 	bl	800d138 <_fflush_r>
 800a28e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a290:	b141      	cbz	r1, 800a2a4 <setvbuf+0x60>
 800a292:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a296:	4299      	cmp	r1, r3
 800a298:	d002      	beq.n	800a2a0 <setvbuf+0x5c>
 800a29a:	4638      	mov	r0, r7
 800a29c:	f000 ffe6 	bl	800b26c <_free_r>
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	6363      	str	r3, [r4, #52]	; 0x34
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	61a3      	str	r3, [r4, #24]
 800a2a8:	6063      	str	r3, [r4, #4]
 800a2aa:	89a3      	ldrh	r3, [r4, #12]
 800a2ac:	0618      	lsls	r0, r3, #24
 800a2ae:	d503      	bpl.n	800a2b8 <setvbuf+0x74>
 800a2b0:	6921      	ldr	r1, [r4, #16]
 800a2b2:	4638      	mov	r0, r7
 800a2b4:	f000 ffda 	bl	800b26c <_free_r>
 800a2b8:	89a3      	ldrh	r3, [r4, #12]
 800a2ba:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800a2be:	f023 0303 	bic.w	r3, r3, #3
 800a2c2:	f1b8 0f02 	cmp.w	r8, #2
 800a2c6:	81a3      	strh	r3, [r4, #12]
 800a2c8:	d05f      	beq.n	800a38a <setvbuf+0x146>
 800a2ca:	ab01      	add	r3, sp, #4
 800a2cc:	466a      	mov	r2, sp
 800a2ce:	4621      	mov	r1, r4
 800a2d0:	4638      	mov	r0, r7
 800a2d2:	f002 ff59 	bl	800d188 <__swhatbuf_r>
 800a2d6:	89a3      	ldrh	r3, [r4, #12]
 800a2d8:	4318      	orrs	r0, r3
 800a2da:	81a0      	strh	r0, [r4, #12]
 800a2dc:	bb2d      	cbnz	r5, 800a32a <setvbuf+0xe6>
 800a2de:	9d00      	ldr	r5, [sp, #0]
 800a2e0:	4628      	mov	r0, r5
 800a2e2:	f001 f80f 	bl	800b304 <malloc>
 800a2e6:	4606      	mov	r6, r0
 800a2e8:	2800      	cmp	r0, #0
 800a2ea:	d150      	bne.n	800a38e <setvbuf+0x14a>
 800a2ec:	f8dd 9000 	ldr.w	r9, [sp]
 800a2f0:	45a9      	cmp	r9, r5
 800a2f2:	d13e      	bne.n	800a372 <setvbuf+0x12e>
 800a2f4:	f04f 35ff 	mov.w	r5, #4294967295
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	60a2      	str	r2, [r4, #8]
 800a2fc:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800a300:	6022      	str	r2, [r4, #0]
 800a302:	6122      	str	r2, [r4, #16]
 800a304:	2201      	movs	r2, #1
 800a306:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a30a:	6162      	str	r2, [r4, #20]
 800a30c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a30e:	f043 0302 	orr.w	r3, r3, #2
 800a312:	07d1      	lsls	r1, r2, #31
 800a314:	81a3      	strh	r3, [r4, #12]
 800a316:	d404      	bmi.n	800a322 <setvbuf+0xde>
 800a318:	059b      	lsls	r3, r3, #22
 800a31a:	d402      	bmi.n	800a322 <setvbuf+0xde>
 800a31c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a31e:	f000 f921 	bl	800a564 <__retarget_lock_release_recursive>
 800a322:	4628      	mov	r0, r5
 800a324:	b003      	add	sp, #12
 800a326:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a32a:	2e00      	cmp	r6, #0
 800a32c:	d0d8      	beq.n	800a2e0 <setvbuf+0x9c>
 800a32e:	6a3b      	ldr	r3, [r7, #32]
 800a330:	b913      	cbnz	r3, 800a338 <setvbuf+0xf4>
 800a332:	4638      	mov	r0, r7
 800a334:	f7ff ff3e 	bl	800a1b4 <__sinit>
 800a338:	f1b8 0f01 	cmp.w	r8, #1
 800a33c:	bf08      	it	eq
 800a33e:	89a3      	ldrheq	r3, [r4, #12]
 800a340:	6026      	str	r6, [r4, #0]
 800a342:	bf04      	itt	eq
 800a344:	f043 0301 	orreq.w	r3, r3, #1
 800a348:	81a3      	strheq	r3, [r4, #12]
 800a34a:	89a3      	ldrh	r3, [r4, #12]
 800a34c:	f013 0208 	ands.w	r2, r3, #8
 800a350:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800a354:	d01d      	beq.n	800a392 <setvbuf+0x14e>
 800a356:	07da      	lsls	r2, r3, #31
 800a358:	bf41      	itttt	mi
 800a35a:	2200      	movmi	r2, #0
 800a35c:	426d      	negmi	r5, r5
 800a35e:	60a2      	strmi	r2, [r4, #8]
 800a360:	61a5      	strmi	r5, [r4, #24]
 800a362:	bf58      	it	pl
 800a364:	60a5      	strpl	r5, [r4, #8]
 800a366:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800a368:	f015 0501 	ands.w	r5, r5, #1
 800a36c:	d0d4      	beq.n	800a318 <setvbuf+0xd4>
 800a36e:	2500      	movs	r5, #0
 800a370:	e7d7      	b.n	800a322 <setvbuf+0xde>
 800a372:	4648      	mov	r0, r9
 800a374:	f000 ffc6 	bl	800b304 <malloc>
 800a378:	4606      	mov	r6, r0
 800a37a:	2800      	cmp	r0, #0
 800a37c:	d0ba      	beq.n	800a2f4 <setvbuf+0xb0>
 800a37e:	89a3      	ldrh	r3, [r4, #12]
 800a380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a384:	81a3      	strh	r3, [r4, #12]
 800a386:	464d      	mov	r5, r9
 800a388:	e7d1      	b.n	800a32e <setvbuf+0xea>
 800a38a:	2500      	movs	r5, #0
 800a38c:	e7b4      	b.n	800a2f8 <setvbuf+0xb4>
 800a38e:	46a9      	mov	r9, r5
 800a390:	e7f5      	b.n	800a37e <setvbuf+0x13a>
 800a392:	60a2      	str	r2, [r4, #8]
 800a394:	e7e7      	b.n	800a366 <setvbuf+0x122>
 800a396:	f04f 35ff 	mov.w	r5, #4294967295
 800a39a:	e7c2      	b.n	800a322 <setvbuf+0xde>
 800a39c:	20000074 	.word	0x20000074

0800a3a0 <siprintf>:
 800a3a0:	b40e      	push	{r1, r2, r3}
 800a3a2:	b500      	push	{lr}
 800a3a4:	b09c      	sub	sp, #112	; 0x70
 800a3a6:	ab1d      	add	r3, sp, #116	; 0x74
 800a3a8:	9002      	str	r0, [sp, #8]
 800a3aa:	9006      	str	r0, [sp, #24]
 800a3ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a3b0:	4809      	ldr	r0, [pc, #36]	; (800a3d8 <siprintf+0x38>)
 800a3b2:	9107      	str	r1, [sp, #28]
 800a3b4:	9104      	str	r1, [sp, #16]
 800a3b6:	4909      	ldr	r1, [pc, #36]	; (800a3dc <siprintf+0x3c>)
 800a3b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3bc:	9105      	str	r1, [sp, #20]
 800a3be:	6800      	ldr	r0, [r0, #0]
 800a3c0:	9301      	str	r3, [sp, #4]
 800a3c2:	a902      	add	r1, sp, #8
 800a3c4:	f002 fbf0 	bl	800cba8 <_svfiprintf_r>
 800a3c8:	9b02      	ldr	r3, [sp, #8]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	701a      	strb	r2, [r3, #0]
 800a3ce:	b01c      	add	sp, #112	; 0x70
 800a3d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3d4:	b003      	add	sp, #12
 800a3d6:	4770      	bx	lr
 800a3d8:	20000074 	.word	0x20000074
 800a3dc:	ffff0208 	.word	0xffff0208

0800a3e0 <__sread>:
 800a3e0:	b510      	push	{r4, lr}
 800a3e2:	460c      	mov	r4, r1
 800a3e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3e8:	f000 f86c 	bl	800a4c4 <_read_r>
 800a3ec:	2800      	cmp	r0, #0
 800a3ee:	bfab      	itete	ge
 800a3f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a3f2:	89a3      	ldrhlt	r3, [r4, #12]
 800a3f4:	181b      	addge	r3, r3, r0
 800a3f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a3fa:	bfac      	ite	ge
 800a3fc:	6563      	strge	r3, [r4, #84]	; 0x54
 800a3fe:	81a3      	strhlt	r3, [r4, #12]
 800a400:	bd10      	pop	{r4, pc}

0800a402 <__swrite>:
 800a402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a406:	461f      	mov	r7, r3
 800a408:	898b      	ldrh	r3, [r1, #12]
 800a40a:	05db      	lsls	r3, r3, #23
 800a40c:	4605      	mov	r5, r0
 800a40e:	460c      	mov	r4, r1
 800a410:	4616      	mov	r6, r2
 800a412:	d505      	bpl.n	800a420 <__swrite+0x1e>
 800a414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a418:	2302      	movs	r3, #2
 800a41a:	2200      	movs	r2, #0
 800a41c:	f000 f840 	bl	800a4a0 <_lseek_r>
 800a420:	89a3      	ldrh	r3, [r4, #12]
 800a422:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a426:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a42a:	81a3      	strh	r3, [r4, #12]
 800a42c:	4632      	mov	r2, r6
 800a42e:	463b      	mov	r3, r7
 800a430:	4628      	mov	r0, r5
 800a432:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a436:	f000 b857 	b.w	800a4e8 <_write_r>

0800a43a <__sseek>:
 800a43a:	b510      	push	{r4, lr}
 800a43c:	460c      	mov	r4, r1
 800a43e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a442:	f000 f82d 	bl	800a4a0 <_lseek_r>
 800a446:	1c43      	adds	r3, r0, #1
 800a448:	89a3      	ldrh	r3, [r4, #12]
 800a44a:	bf15      	itete	ne
 800a44c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a44e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a452:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a456:	81a3      	strheq	r3, [r4, #12]
 800a458:	bf18      	it	ne
 800a45a:	81a3      	strhne	r3, [r4, #12]
 800a45c:	bd10      	pop	{r4, pc}

0800a45e <__sclose>:
 800a45e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a462:	f000 b80d 	b.w	800a480 <_close_r>

0800a466 <memset>:
 800a466:	4402      	add	r2, r0
 800a468:	4603      	mov	r3, r0
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d100      	bne.n	800a470 <memset+0xa>
 800a46e:	4770      	bx	lr
 800a470:	f803 1b01 	strb.w	r1, [r3], #1
 800a474:	e7f9      	b.n	800a46a <memset+0x4>
	...

0800a478 <_localeconv_r>:
 800a478:	4800      	ldr	r0, [pc, #0]	; (800a47c <_localeconv_r+0x4>)
 800a47a:	4770      	bx	lr
 800a47c:	20000168 	.word	0x20000168

0800a480 <_close_r>:
 800a480:	b538      	push	{r3, r4, r5, lr}
 800a482:	4d06      	ldr	r5, [pc, #24]	; (800a49c <_close_r+0x1c>)
 800a484:	2300      	movs	r3, #0
 800a486:	4604      	mov	r4, r0
 800a488:	4608      	mov	r0, r1
 800a48a:	602b      	str	r3, [r5, #0]
 800a48c:	f7f9 fad7 	bl	8003a3e <_close>
 800a490:	1c43      	adds	r3, r0, #1
 800a492:	d102      	bne.n	800a49a <_close_r+0x1a>
 800a494:	682b      	ldr	r3, [r5, #0]
 800a496:	b103      	cbz	r3, 800a49a <_close_r+0x1a>
 800a498:	6023      	str	r3, [r4, #0]
 800a49a:	bd38      	pop	{r3, r4, r5, pc}
 800a49c:	200010a0 	.word	0x200010a0

0800a4a0 <_lseek_r>:
 800a4a0:	b538      	push	{r3, r4, r5, lr}
 800a4a2:	4d07      	ldr	r5, [pc, #28]	; (800a4c0 <_lseek_r+0x20>)
 800a4a4:	4604      	mov	r4, r0
 800a4a6:	4608      	mov	r0, r1
 800a4a8:	4611      	mov	r1, r2
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	602a      	str	r2, [r5, #0]
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	f7f9 faec 	bl	8003a8c <_lseek>
 800a4b4:	1c43      	adds	r3, r0, #1
 800a4b6:	d102      	bne.n	800a4be <_lseek_r+0x1e>
 800a4b8:	682b      	ldr	r3, [r5, #0]
 800a4ba:	b103      	cbz	r3, 800a4be <_lseek_r+0x1e>
 800a4bc:	6023      	str	r3, [r4, #0]
 800a4be:	bd38      	pop	{r3, r4, r5, pc}
 800a4c0:	200010a0 	.word	0x200010a0

0800a4c4 <_read_r>:
 800a4c4:	b538      	push	{r3, r4, r5, lr}
 800a4c6:	4d07      	ldr	r5, [pc, #28]	; (800a4e4 <_read_r+0x20>)
 800a4c8:	4604      	mov	r4, r0
 800a4ca:	4608      	mov	r0, r1
 800a4cc:	4611      	mov	r1, r2
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	602a      	str	r2, [r5, #0]
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	f7f9 fa96 	bl	8003a04 <_read>
 800a4d8:	1c43      	adds	r3, r0, #1
 800a4da:	d102      	bne.n	800a4e2 <_read_r+0x1e>
 800a4dc:	682b      	ldr	r3, [r5, #0]
 800a4de:	b103      	cbz	r3, 800a4e2 <_read_r+0x1e>
 800a4e0:	6023      	str	r3, [r4, #0]
 800a4e2:	bd38      	pop	{r3, r4, r5, pc}
 800a4e4:	200010a0 	.word	0x200010a0

0800a4e8 <_write_r>:
 800a4e8:	b538      	push	{r3, r4, r5, lr}
 800a4ea:	4d07      	ldr	r5, [pc, #28]	; (800a508 <_write_r+0x20>)
 800a4ec:	4604      	mov	r4, r0
 800a4ee:	4608      	mov	r0, r1
 800a4f0:	4611      	mov	r1, r2
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	602a      	str	r2, [r5, #0]
 800a4f6:	461a      	mov	r2, r3
 800a4f8:	f7f6 fd8a 	bl	8001010 <_write>
 800a4fc:	1c43      	adds	r3, r0, #1
 800a4fe:	d102      	bne.n	800a506 <_write_r+0x1e>
 800a500:	682b      	ldr	r3, [r5, #0]
 800a502:	b103      	cbz	r3, 800a506 <_write_r+0x1e>
 800a504:	6023      	str	r3, [r4, #0]
 800a506:	bd38      	pop	{r3, r4, r5, pc}
 800a508:	200010a0 	.word	0x200010a0

0800a50c <__errno>:
 800a50c:	4b01      	ldr	r3, [pc, #4]	; (800a514 <__errno+0x8>)
 800a50e:	6818      	ldr	r0, [r3, #0]
 800a510:	4770      	bx	lr
 800a512:	bf00      	nop
 800a514:	20000074 	.word	0x20000074

0800a518 <__libc_init_array>:
 800a518:	b570      	push	{r4, r5, r6, lr}
 800a51a:	4d0d      	ldr	r5, [pc, #52]	; (800a550 <__libc_init_array+0x38>)
 800a51c:	4c0d      	ldr	r4, [pc, #52]	; (800a554 <__libc_init_array+0x3c>)
 800a51e:	1b64      	subs	r4, r4, r5
 800a520:	10a4      	asrs	r4, r4, #2
 800a522:	2600      	movs	r6, #0
 800a524:	42a6      	cmp	r6, r4
 800a526:	d109      	bne.n	800a53c <__libc_init_array+0x24>
 800a528:	4d0b      	ldr	r5, [pc, #44]	; (800a558 <__libc_init_array+0x40>)
 800a52a:	4c0c      	ldr	r4, [pc, #48]	; (800a55c <__libc_init_array+0x44>)
 800a52c:	f003 fbd8 	bl	800dce0 <_init>
 800a530:	1b64      	subs	r4, r4, r5
 800a532:	10a4      	asrs	r4, r4, #2
 800a534:	2600      	movs	r6, #0
 800a536:	42a6      	cmp	r6, r4
 800a538:	d105      	bne.n	800a546 <__libc_init_array+0x2e>
 800a53a:	bd70      	pop	{r4, r5, r6, pc}
 800a53c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a540:	4798      	blx	r3
 800a542:	3601      	adds	r6, #1
 800a544:	e7ee      	b.n	800a524 <__libc_init_array+0xc>
 800a546:	f855 3b04 	ldr.w	r3, [r5], #4
 800a54a:	4798      	blx	r3
 800a54c:	3601      	adds	r6, #1
 800a54e:	e7f2      	b.n	800a536 <__libc_init_array+0x1e>
 800a550:	0800e168 	.word	0x0800e168
 800a554:	0800e168 	.word	0x0800e168
 800a558:	0800e168 	.word	0x0800e168
 800a55c:	0800e16c 	.word	0x0800e16c

0800a560 <__retarget_lock_init_recursive>:
 800a560:	4770      	bx	lr

0800a562 <__retarget_lock_acquire_recursive>:
 800a562:	4770      	bx	lr

0800a564 <__retarget_lock_release_recursive>:
 800a564:	4770      	bx	lr
	...

0800a568 <nanf>:
 800a568:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a570 <nanf+0x8>
 800a56c:	4770      	bx	lr
 800a56e:	bf00      	nop
 800a570:	7fc00000 	.word	0x7fc00000

0800a574 <quorem>:
 800a574:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a578:	6903      	ldr	r3, [r0, #16]
 800a57a:	690c      	ldr	r4, [r1, #16]
 800a57c:	42a3      	cmp	r3, r4
 800a57e:	4607      	mov	r7, r0
 800a580:	db7e      	blt.n	800a680 <quorem+0x10c>
 800a582:	3c01      	subs	r4, #1
 800a584:	f101 0814 	add.w	r8, r1, #20
 800a588:	f100 0514 	add.w	r5, r0, #20
 800a58c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a590:	9301      	str	r3, [sp, #4]
 800a592:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a596:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a59a:	3301      	adds	r3, #1
 800a59c:	429a      	cmp	r2, r3
 800a59e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a5a2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a5a6:	fbb2 f6f3 	udiv	r6, r2, r3
 800a5aa:	d331      	bcc.n	800a610 <quorem+0x9c>
 800a5ac:	f04f 0e00 	mov.w	lr, #0
 800a5b0:	4640      	mov	r0, r8
 800a5b2:	46ac      	mov	ip, r5
 800a5b4:	46f2      	mov	sl, lr
 800a5b6:	f850 2b04 	ldr.w	r2, [r0], #4
 800a5ba:	b293      	uxth	r3, r2
 800a5bc:	fb06 e303 	mla	r3, r6, r3, lr
 800a5c0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a5c4:	0c1a      	lsrs	r2, r3, #16
 800a5c6:	b29b      	uxth	r3, r3
 800a5c8:	ebaa 0303 	sub.w	r3, sl, r3
 800a5cc:	f8dc a000 	ldr.w	sl, [ip]
 800a5d0:	fa13 f38a 	uxtah	r3, r3, sl
 800a5d4:	fb06 220e 	mla	r2, r6, lr, r2
 800a5d8:	9300      	str	r3, [sp, #0]
 800a5da:	9b00      	ldr	r3, [sp, #0]
 800a5dc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a5e0:	b292      	uxth	r2, r2
 800a5e2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a5e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a5ea:	f8bd 3000 	ldrh.w	r3, [sp]
 800a5ee:	4581      	cmp	r9, r0
 800a5f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a5f4:	f84c 3b04 	str.w	r3, [ip], #4
 800a5f8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a5fc:	d2db      	bcs.n	800a5b6 <quorem+0x42>
 800a5fe:	f855 300b 	ldr.w	r3, [r5, fp]
 800a602:	b92b      	cbnz	r3, 800a610 <quorem+0x9c>
 800a604:	9b01      	ldr	r3, [sp, #4]
 800a606:	3b04      	subs	r3, #4
 800a608:	429d      	cmp	r5, r3
 800a60a:	461a      	mov	r2, r3
 800a60c:	d32c      	bcc.n	800a668 <quorem+0xf4>
 800a60e:	613c      	str	r4, [r7, #16]
 800a610:	4638      	mov	r0, r7
 800a612:	f001 f9f1 	bl	800b9f8 <__mcmp>
 800a616:	2800      	cmp	r0, #0
 800a618:	db22      	blt.n	800a660 <quorem+0xec>
 800a61a:	3601      	adds	r6, #1
 800a61c:	4629      	mov	r1, r5
 800a61e:	2000      	movs	r0, #0
 800a620:	f858 2b04 	ldr.w	r2, [r8], #4
 800a624:	f8d1 c000 	ldr.w	ip, [r1]
 800a628:	b293      	uxth	r3, r2
 800a62a:	1ac3      	subs	r3, r0, r3
 800a62c:	0c12      	lsrs	r2, r2, #16
 800a62e:	fa13 f38c 	uxtah	r3, r3, ip
 800a632:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a636:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a63a:	b29b      	uxth	r3, r3
 800a63c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a640:	45c1      	cmp	r9, r8
 800a642:	f841 3b04 	str.w	r3, [r1], #4
 800a646:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a64a:	d2e9      	bcs.n	800a620 <quorem+0xac>
 800a64c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a650:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a654:	b922      	cbnz	r2, 800a660 <quorem+0xec>
 800a656:	3b04      	subs	r3, #4
 800a658:	429d      	cmp	r5, r3
 800a65a:	461a      	mov	r2, r3
 800a65c:	d30a      	bcc.n	800a674 <quorem+0x100>
 800a65e:	613c      	str	r4, [r7, #16]
 800a660:	4630      	mov	r0, r6
 800a662:	b003      	add	sp, #12
 800a664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a668:	6812      	ldr	r2, [r2, #0]
 800a66a:	3b04      	subs	r3, #4
 800a66c:	2a00      	cmp	r2, #0
 800a66e:	d1ce      	bne.n	800a60e <quorem+0x9a>
 800a670:	3c01      	subs	r4, #1
 800a672:	e7c9      	b.n	800a608 <quorem+0x94>
 800a674:	6812      	ldr	r2, [r2, #0]
 800a676:	3b04      	subs	r3, #4
 800a678:	2a00      	cmp	r2, #0
 800a67a:	d1f0      	bne.n	800a65e <quorem+0xea>
 800a67c:	3c01      	subs	r4, #1
 800a67e:	e7eb      	b.n	800a658 <quorem+0xe4>
 800a680:	2000      	movs	r0, #0
 800a682:	e7ee      	b.n	800a662 <quorem+0xee>
 800a684:	0000      	movs	r0, r0
	...

0800a688 <_dtoa_r>:
 800a688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a68c:	ed2d 8b04 	vpush	{d8-d9}
 800a690:	69c5      	ldr	r5, [r0, #28]
 800a692:	b093      	sub	sp, #76	; 0x4c
 800a694:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a698:	ec57 6b10 	vmov	r6, r7, d0
 800a69c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a6a0:	9107      	str	r1, [sp, #28]
 800a6a2:	4604      	mov	r4, r0
 800a6a4:	920a      	str	r2, [sp, #40]	; 0x28
 800a6a6:	930d      	str	r3, [sp, #52]	; 0x34
 800a6a8:	b975      	cbnz	r5, 800a6c8 <_dtoa_r+0x40>
 800a6aa:	2010      	movs	r0, #16
 800a6ac:	f000 fe2a 	bl	800b304 <malloc>
 800a6b0:	4602      	mov	r2, r0
 800a6b2:	61e0      	str	r0, [r4, #28]
 800a6b4:	b920      	cbnz	r0, 800a6c0 <_dtoa_r+0x38>
 800a6b6:	4bae      	ldr	r3, [pc, #696]	; (800a970 <_dtoa_r+0x2e8>)
 800a6b8:	21ef      	movs	r1, #239	; 0xef
 800a6ba:	48ae      	ldr	r0, [pc, #696]	; (800a974 <_dtoa_r+0x2ec>)
 800a6bc:	f002 fed0 	bl	800d460 <__assert_func>
 800a6c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a6c4:	6005      	str	r5, [r0, #0]
 800a6c6:	60c5      	str	r5, [r0, #12]
 800a6c8:	69e3      	ldr	r3, [r4, #28]
 800a6ca:	6819      	ldr	r1, [r3, #0]
 800a6cc:	b151      	cbz	r1, 800a6e4 <_dtoa_r+0x5c>
 800a6ce:	685a      	ldr	r2, [r3, #4]
 800a6d0:	604a      	str	r2, [r1, #4]
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	4093      	lsls	r3, r2
 800a6d6:	608b      	str	r3, [r1, #8]
 800a6d8:	4620      	mov	r0, r4
 800a6da:	f000 ff07 	bl	800b4ec <_Bfree>
 800a6de:	69e3      	ldr	r3, [r4, #28]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	601a      	str	r2, [r3, #0]
 800a6e4:	1e3b      	subs	r3, r7, #0
 800a6e6:	bfbb      	ittet	lt
 800a6e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a6ec:	9303      	strlt	r3, [sp, #12]
 800a6ee:	2300      	movge	r3, #0
 800a6f0:	2201      	movlt	r2, #1
 800a6f2:	bfac      	ite	ge
 800a6f4:	f8c8 3000 	strge.w	r3, [r8]
 800a6f8:	f8c8 2000 	strlt.w	r2, [r8]
 800a6fc:	4b9e      	ldr	r3, [pc, #632]	; (800a978 <_dtoa_r+0x2f0>)
 800a6fe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a702:	ea33 0308 	bics.w	r3, r3, r8
 800a706:	d11b      	bne.n	800a740 <_dtoa_r+0xb8>
 800a708:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a70a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a70e:	6013      	str	r3, [r2, #0]
 800a710:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a714:	4333      	orrs	r3, r6
 800a716:	f000 8593 	beq.w	800b240 <_dtoa_r+0xbb8>
 800a71a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a71c:	b963      	cbnz	r3, 800a738 <_dtoa_r+0xb0>
 800a71e:	4b97      	ldr	r3, [pc, #604]	; (800a97c <_dtoa_r+0x2f4>)
 800a720:	e027      	b.n	800a772 <_dtoa_r+0xea>
 800a722:	4b97      	ldr	r3, [pc, #604]	; (800a980 <_dtoa_r+0x2f8>)
 800a724:	9300      	str	r3, [sp, #0]
 800a726:	3308      	adds	r3, #8
 800a728:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a72a:	6013      	str	r3, [r2, #0]
 800a72c:	9800      	ldr	r0, [sp, #0]
 800a72e:	b013      	add	sp, #76	; 0x4c
 800a730:	ecbd 8b04 	vpop	{d8-d9}
 800a734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a738:	4b90      	ldr	r3, [pc, #576]	; (800a97c <_dtoa_r+0x2f4>)
 800a73a:	9300      	str	r3, [sp, #0]
 800a73c:	3303      	adds	r3, #3
 800a73e:	e7f3      	b.n	800a728 <_dtoa_r+0xa0>
 800a740:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a744:	2200      	movs	r2, #0
 800a746:	ec51 0b17 	vmov	r0, r1, d7
 800a74a:	eeb0 8a47 	vmov.f32	s16, s14
 800a74e:	eef0 8a67 	vmov.f32	s17, s15
 800a752:	2300      	movs	r3, #0
 800a754:	f7f6 f9c8 	bl	8000ae8 <__aeabi_dcmpeq>
 800a758:	4681      	mov	r9, r0
 800a75a:	b160      	cbz	r0, 800a776 <_dtoa_r+0xee>
 800a75c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a75e:	2301      	movs	r3, #1
 800a760:	6013      	str	r3, [r2, #0]
 800a762:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a764:	2b00      	cmp	r3, #0
 800a766:	f000 8568 	beq.w	800b23a <_dtoa_r+0xbb2>
 800a76a:	4b86      	ldr	r3, [pc, #536]	; (800a984 <_dtoa_r+0x2fc>)
 800a76c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a76e:	6013      	str	r3, [r2, #0]
 800a770:	3b01      	subs	r3, #1
 800a772:	9300      	str	r3, [sp, #0]
 800a774:	e7da      	b.n	800a72c <_dtoa_r+0xa4>
 800a776:	aa10      	add	r2, sp, #64	; 0x40
 800a778:	a911      	add	r1, sp, #68	; 0x44
 800a77a:	4620      	mov	r0, r4
 800a77c:	eeb0 0a48 	vmov.f32	s0, s16
 800a780:	eef0 0a68 	vmov.f32	s1, s17
 800a784:	f001 fa4e 	bl	800bc24 <__d2b>
 800a788:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a78c:	4682      	mov	sl, r0
 800a78e:	2d00      	cmp	r5, #0
 800a790:	d07f      	beq.n	800a892 <_dtoa_r+0x20a>
 800a792:	ee18 3a90 	vmov	r3, s17
 800a796:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a79a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a79e:	ec51 0b18 	vmov	r0, r1, d8
 800a7a2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a7a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a7aa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a7ae:	4619      	mov	r1, r3
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	4b75      	ldr	r3, [pc, #468]	; (800a988 <_dtoa_r+0x300>)
 800a7b4:	f7f5 fd78 	bl	80002a8 <__aeabi_dsub>
 800a7b8:	a367      	add	r3, pc, #412	; (adr r3, 800a958 <_dtoa_r+0x2d0>)
 800a7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7be:	f7f5 ff2b 	bl	8000618 <__aeabi_dmul>
 800a7c2:	a367      	add	r3, pc, #412	; (adr r3, 800a960 <_dtoa_r+0x2d8>)
 800a7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c8:	f7f5 fd70 	bl	80002ac <__adddf3>
 800a7cc:	4606      	mov	r6, r0
 800a7ce:	4628      	mov	r0, r5
 800a7d0:	460f      	mov	r7, r1
 800a7d2:	f7f5 feb7 	bl	8000544 <__aeabi_i2d>
 800a7d6:	a364      	add	r3, pc, #400	; (adr r3, 800a968 <_dtoa_r+0x2e0>)
 800a7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7dc:	f7f5 ff1c 	bl	8000618 <__aeabi_dmul>
 800a7e0:	4602      	mov	r2, r0
 800a7e2:	460b      	mov	r3, r1
 800a7e4:	4630      	mov	r0, r6
 800a7e6:	4639      	mov	r1, r7
 800a7e8:	f7f5 fd60 	bl	80002ac <__adddf3>
 800a7ec:	4606      	mov	r6, r0
 800a7ee:	460f      	mov	r7, r1
 800a7f0:	f7f6 f9c2 	bl	8000b78 <__aeabi_d2iz>
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	4683      	mov	fp, r0
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	4630      	mov	r0, r6
 800a7fc:	4639      	mov	r1, r7
 800a7fe:	f7f6 f97d 	bl	8000afc <__aeabi_dcmplt>
 800a802:	b148      	cbz	r0, 800a818 <_dtoa_r+0x190>
 800a804:	4658      	mov	r0, fp
 800a806:	f7f5 fe9d 	bl	8000544 <__aeabi_i2d>
 800a80a:	4632      	mov	r2, r6
 800a80c:	463b      	mov	r3, r7
 800a80e:	f7f6 f96b 	bl	8000ae8 <__aeabi_dcmpeq>
 800a812:	b908      	cbnz	r0, 800a818 <_dtoa_r+0x190>
 800a814:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a818:	f1bb 0f16 	cmp.w	fp, #22
 800a81c:	d857      	bhi.n	800a8ce <_dtoa_r+0x246>
 800a81e:	4b5b      	ldr	r3, [pc, #364]	; (800a98c <_dtoa_r+0x304>)
 800a820:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a828:	ec51 0b18 	vmov	r0, r1, d8
 800a82c:	f7f6 f966 	bl	8000afc <__aeabi_dcmplt>
 800a830:	2800      	cmp	r0, #0
 800a832:	d04e      	beq.n	800a8d2 <_dtoa_r+0x24a>
 800a834:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a838:	2300      	movs	r3, #0
 800a83a:	930c      	str	r3, [sp, #48]	; 0x30
 800a83c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a83e:	1b5b      	subs	r3, r3, r5
 800a840:	1e5a      	subs	r2, r3, #1
 800a842:	bf45      	ittet	mi
 800a844:	f1c3 0301 	rsbmi	r3, r3, #1
 800a848:	9305      	strmi	r3, [sp, #20]
 800a84a:	2300      	movpl	r3, #0
 800a84c:	2300      	movmi	r3, #0
 800a84e:	9206      	str	r2, [sp, #24]
 800a850:	bf54      	ite	pl
 800a852:	9305      	strpl	r3, [sp, #20]
 800a854:	9306      	strmi	r3, [sp, #24]
 800a856:	f1bb 0f00 	cmp.w	fp, #0
 800a85a:	db3c      	blt.n	800a8d6 <_dtoa_r+0x24e>
 800a85c:	9b06      	ldr	r3, [sp, #24]
 800a85e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a862:	445b      	add	r3, fp
 800a864:	9306      	str	r3, [sp, #24]
 800a866:	2300      	movs	r3, #0
 800a868:	9308      	str	r3, [sp, #32]
 800a86a:	9b07      	ldr	r3, [sp, #28]
 800a86c:	2b09      	cmp	r3, #9
 800a86e:	d868      	bhi.n	800a942 <_dtoa_r+0x2ba>
 800a870:	2b05      	cmp	r3, #5
 800a872:	bfc4      	itt	gt
 800a874:	3b04      	subgt	r3, #4
 800a876:	9307      	strgt	r3, [sp, #28]
 800a878:	9b07      	ldr	r3, [sp, #28]
 800a87a:	f1a3 0302 	sub.w	r3, r3, #2
 800a87e:	bfcc      	ite	gt
 800a880:	2500      	movgt	r5, #0
 800a882:	2501      	movle	r5, #1
 800a884:	2b03      	cmp	r3, #3
 800a886:	f200 8085 	bhi.w	800a994 <_dtoa_r+0x30c>
 800a88a:	e8df f003 	tbb	[pc, r3]
 800a88e:	3b2e      	.short	0x3b2e
 800a890:	5839      	.short	0x5839
 800a892:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a896:	441d      	add	r5, r3
 800a898:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a89c:	2b20      	cmp	r3, #32
 800a89e:	bfc1      	itttt	gt
 800a8a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a8a4:	fa08 f803 	lslgt.w	r8, r8, r3
 800a8a8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a8ac:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a8b0:	bfd6      	itet	le
 800a8b2:	f1c3 0320 	rsble	r3, r3, #32
 800a8b6:	ea48 0003 	orrgt.w	r0, r8, r3
 800a8ba:	fa06 f003 	lslle.w	r0, r6, r3
 800a8be:	f7f5 fe31 	bl	8000524 <__aeabi_ui2d>
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a8c8:	3d01      	subs	r5, #1
 800a8ca:	920e      	str	r2, [sp, #56]	; 0x38
 800a8cc:	e76f      	b.n	800a7ae <_dtoa_r+0x126>
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	e7b3      	b.n	800a83a <_dtoa_r+0x1b2>
 800a8d2:	900c      	str	r0, [sp, #48]	; 0x30
 800a8d4:	e7b2      	b.n	800a83c <_dtoa_r+0x1b4>
 800a8d6:	9b05      	ldr	r3, [sp, #20]
 800a8d8:	eba3 030b 	sub.w	r3, r3, fp
 800a8dc:	9305      	str	r3, [sp, #20]
 800a8de:	f1cb 0300 	rsb	r3, fp, #0
 800a8e2:	9308      	str	r3, [sp, #32]
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8e8:	e7bf      	b.n	800a86a <_dtoa_r+0x1e2>
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	9309      	str	r3, [sp, #36]	; 0x24
 800a8ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	dc52      	bgt.n	800a99a <_dtoa_r+0x312>
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	9301      	str	r3, [sp, #4]
 800a8f8:	9304      	str	r3, [sp, #16]
 800a8fa:	461a      	mov	r2, r3
 800a8fc:	920a      	str	r2, [sp, #40]	; 0x28
 800a8fe:	e00b      	b.n	800a918 <_dtoa_r+0x290>
 800a900:	2301      	movs	r3, #1
 800a902:	e7f3      	b.n	800a8ec <_dtoa_r+0x264>
 800a904:	2300      	movs	r3, #0
 800a906:	9309      	str	r3, [sp, #36]	; 0x24
 800a908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a90a:	445b      	add	r3, fp
 800a90c:	9301      	str	r3, [sp, #4]
 800a90e:	3301      	adds	r3, #1
 800a910:	2b01      	cmp	r3, #1
 800a912:	9304      	str	r3, [sp, #16]
 800a914:	bfb8      	it	lt
 800a916:	2301      	movlt	r3, #1
 800a918:	69e0      	ldr	r0, [r4, #28]
 800a91a:	2100      	movs	r1, #0
 800a91c:	2204      	movs	r2, #4
 800a91e:	f102 0614 	add.w	r6, r2, #20
 800a922:	429e      	cmp	r6, r3
 800a924:	d93d      	bls.n	800a9a2 <_dtoa_r+0x31a>
 800a926:	6041      	str	r1, [r0, #4]
 800a928:	4620      	mov	r0, r4
 800a92a:	f000 fd9f 	bl	800b46c <_Balloc>
 800a92e:	9000      	str	r0, [sp, #0]
 800a930:	2800      	cmp	r0, #0
 800a932:	d139      	bne.n	800a9a8 <_dtoa_r+0x320>
 800a934:	4b16      	ldr	r3, [pc, #88]	; (800a990 <_dtoa_r+0x308>)
 800a936:	4602      	mov	r2, r0
 800a938:	f240 11af 	movw	r1, #431	; 0x1af
 800a93c:	e6bd      	b.n	800a6ba <_dtoa_r+0x32>
 800a93e:	2301      	movs	r3, #1
 800a940:	e7e1      	b.n	800a906 <_dtoa_r+0x27e>
 800a942:	2501      	movs	r5, #1
 800a944:	2300      	movs	r3, #0
 800a946:	9307      	str	r3, [sp, #28]
 800a948:	9509      	str	r5, [sp, #36]	; 0x24
 800a94a:	f04f 33ff 	mov.w	r3, #4294967295
 800a94e:	9301      	str	r3, [sp, #4]
 800a950:	9304      	str	r3, [sp, #16]
 800a952:	2200      	movs	r2, #0
 800a954:	2312      	movs	r3, #18
 800a956:	e7d1      	b.n	800a8fc <_dtoa_r+0x274>
 800a958:	636f4361 	.word	0x636f4361
 800a95c:	3fd287a7 	.word	0x3fd287a7
 800a960:	8b60c8b3 	.word	0x8b60c8b3
 800a964:	3fc68a28 	.word	0x3fc68a28
 800a968:	509f79fb 	.word	0x509f79fb
 800a96c:	3fd34413 	.word	0x3fd34413
 800a970:	0800dd7a 	.word	0x0800dd7a
 800a974:	0800dd91 	.word	0x0800dd91
 800a978:	7ff00000 	.word	0x7ff00000
 800a97c:	0800dd76 	.word	0x0800dd76
 800a980:	0800dd6d 	.word	0x0800dd6d
 800a984:	0800dd45 	.word	0x0800dd45
 800a988:	3ff80000 	.word	0x3ff80000
 800a98c:	0800de80 	.word	0x0800de80
 800a990:	0800dde9 	.word	0x0800dde9
 800a994:	2301      	movs	r3, #1
 800a996:	9309      	str	r3, [sp, #36]	; 0x24
 800a998:	e7d7      	b.n	800a94a <_dtoa_r+0x2c2>
 800a99a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a99c:	9301      	str	r3, [sp, #4]
 800a99e:	9304      	str	r3, [sp, #16]
 800a9a0:	e7ba      	b.n	800a918 <_dtoa_r+0x290>
 800a9a2:	3101      	adds	r1, #1
 800a9a4:	0052      	lsls	r2, r2, #1
 800a9a6:	e7ba      	b.n	800a91e <_dtoa_r+0x296>
 800a9a8:	69e3      	ldr	r3, [r4, #28]
 800a9aa:	9a00      	ldr	r2, [sp, #0]
 800a9ac:	601a      	str	r2, [r3, #0]
 800a9ae:	9b04      	ldr	r3, [sp, #16]
 800a9b0:	2b0e      	cmp	r3, #14
 800a9b2:	f200 80a8 	bhi.w	800ab06 <_dtoa_r+0x47e>
 800a9b6:	2d00      	cmp	r5, #0
 800a9b8:	f000 80a5 	beq.w	800ab06 <_dtoa_r+0x47e>
 800a9bc:	f1bb 0f00 	cmp.w	fp, #0
 800a9c0:	dd38      	ble.n	800aa34 <_dtoa_r+0x3ac>
 800a9c2:	4bc0      	ldr	r3, [pc, #768]	; (800acc4 <_dtoa_r+0x63c>)
 800a9c4:	f00b 020f 	and.w	r2, fp, #15
 800a9c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a9cc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a9d0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a9d4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a9d8:	d019      	beq.n	800aa0e <_dtoa_r+0x386>
 800a9da:	4bbb      	ldr	r3, [pc, #748]	; (800acc8 <_dtoa_r+0x640>)
 800a9dc:	ec51 0b18 	vmov	r0, r1, d8
 800a9e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a9e4:	f7f5 ff42 	bl	800086c <__aeabi_ddiv>
 800a9e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9ec:	f008 080f 	and.w	r8, r8, #15
 800a9f0:	2503      	movs	r5, #3
 800a9f2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800acc8 <_dtoa_r+0x640>
 800a9f6:	f1b8 0f00 	cmp.w	r8, #0
 800a9fa:	d10a      	bne.n	800aa12 <_dtoa_r+0x38a>
 800a9fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa00:	4632      	mov	r2, r6
 800aa02:	463b      	mov	r3, r7
 800aa04:	f7f5 ff32 	bl	800086c <__aeabi_ddiv>
 800aa08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa0c:	e02b      	b.n	800aa66 <_dtoa_r+0x3de>
 800aa0e:	2502      	movs	r5, #2
 800aa10:	e7ef      	b.n	800a9f2 <_dtoa_r+0x36a>
 800aa12:	f018 0f01 	tst.w	r8, #1
 800aa16:	d008      	beq.n	800aa2a <_dtoa_r+0x3a2>
 800aa18:	4630      	mov	r0, r6
 800aa1a:	4639      	mov	r1, r7
 800aa1c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800aa20:	f7f5 fdfa 	bl	8000618 <__aeabi_dmul>
 800aa24:	3501      	adds	r5, #1
 800aa26:	4606      	mov	r6, r0
 800aa28:	460f      	mov	r7, r1
 800aa2a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800aa2e:	f109 0908 	add.w	r9, r9, #8
 800aa32:	e7e0      	b.n	800a9f6 <_dtoa_r+0x36e>
 800aa34:	f000 809f 	beq.w	800ab76 <_dtoa_r+0x4ee>
 800aa38:	f1cb 0600 	rsb	r6, fp, #0
 800aa3c:	4ba1      	ldr	r3, [pc, #644]	; (800acc4 <_dtoa_r+0x63c>)
 800aa3e:	4fa2      	ldr	r7, [pc, #648]	; (800acc8 <_dtoa_r+0x640>)
 800aa40:	f006 020f 	and.w	r2, r6, #15
 800aa44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4c:	ec51 0b18 	vmov	r0, r1, d8
 800aa50:	f7f5 fde2 	bl	8000618 <__aeabi_dmul>
 800aa54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa58:	1136      	asrs	r6, r6, #4
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	2502      	movs	r5, #2
 800aa5e:	2e00      	cmp	r6, #0
 800aa60:	d17e      	bne.n	800ab60 <_dtoa_r+0x4d8>
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d1d0      	bne.n	800aa08 <_dtoa_r+0x380>
 800aa66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa68:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	f000 8084 	beq.w	800ab7a <_dtoa_r+0x4f2>
 800aa72:	4b96      	ldr	r3, [pc, #600]	; (800accc <_dtoa_r+0x644>)
 800aa74:	2200      	movs	r2, #0
 800aa76:	4640      	mov	r0, r8
 800aa78:	4649      	mov	r1, r9
 800aa7a:	f7f6 f83f 	bl	8000afc <__aeabi_dcmplt>
 800aa7e:	2800      	cmp	r0, #0
 800aa80:	d07b      	beq.n	800ab7a <_dtoa_r+0x4f2>
 800aa82:	9b04      	ldr	r3, [sp, #16]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d078      	beq.n	800ab7a <_dtoa_r+0x4f2>
 800aa88:	9b01      	ldr	r3, [sp, #4]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	dd39      	ble.n	800ab02 <_dtoa_r+0x47a>
 800aa8e:	4b90      	ldr	r3, [pc, #576]	; (800acd0 <_dtoa_r+0x648>)
 800aa90:	2200      	movs	r2, #0
 800aa92:	4640      	mov	r0, r8
 800aa94:	4649      	mov	r1, r9
 800aa96:	f7f5 fdbf 	bl	8000618 <__aeabi_dmul>
 800aa9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa9e:	9e01      	ldr	r6, [sp, #4]
 800aaa0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800aaa4:	3501      	adds	r5, #1
 800aaa6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800aaaa:	4628      	mov	r0, r5
 800aaac:	f7f5 fd4a 	bl	8000544 <__aeabi_i2d>
 800aab0:	4642      	mov	r2, r8
 800aab2:	464b      	mov	r3, r9
 800aab4:	f7f5 fdb0 	bl	8000618 <__aeabi_dmul>
 800aab8:	4b86      	ldr	r3, [pc, #536]	; (800acd4 <_dtoa_r+0x64c>)
 800aaba:	2200      	movs	r2, #0
 800aabc:	f7f5 fbf6 	bl	80002ac <__adddf3>
 800aac0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800aac4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aac8:	9303      	str	r3, [sp, #12]
 800aaca:	2e00      	cmp	r6, #0
 800aacc:	d158      	bne.n	800ab80 <_dtoa_r+0x4f8>
 800aace:	4b82      	ldr	r3, [pc, #520]	; (800acd8 <_dtoa_r+0x650>)
 800aad0:	2200      	movs	r2, #0
 800aad2:	4640      	mov	r0, r8
 800aad4:	4649      	mov	r1, r9
 800aad6:	f7f5 fbe7 	bl	80002a8 <__aeabi_dsub>
 800aada:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aade:	4680      	mov	r8, r0
 800aae0:	4689      	mov	r9, r1
 800aae2:	f7f6 f829 	bl	8000b38 <__aeabi_dcmpgt>
 800aae6:	2800      	cmp	r0, #0
 800aae8:	f040 8296 	bne.w	800b018 <_dtoa_r+0x990>
 800aaec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800aaf0:	4640      	mov	r0, r8
 800aaf2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aaf6:	4649      	mov	r1, r9
 800aaf8:	f7f6 f800 	bl	8000afc <__aeabi_dcmplt>
 800aafc:	2800      	cmp	r0, #0
 800aafe:	f040 8289 	bne.w	800b014 <_dtoa_r+0x98c>
 800ab02:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ab06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	f2c0 814e 	blt.w	800adaa <_dtoa_r+0x722>
 800ab0e:	f1bb 0f0e 	cmp.w	fp, #14
 800ab12:	f300 814a 	bgt.w	800adaa <_dtoa_r+0x722>
 800ab16:	4b6b      	ldr	r3, [pc, #428]	; (800acc4 <_dtoa_r+0x63c>)
 800ab18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ab1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ab20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	f280 80dc 	bge.w	800ace0 <_dtoa_r+0x658>
 800ab28:	9b04      	ldr	r3, [sp, #16]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	f300 80d8 	bgt.w	800ace0 <_dtoa_r+0x658>
 800ab30:	f040 826f 	bne.w	800b012 <_dtoa_r+0x98a>
 800ab34:	4b68      	ldr	r3, [pc, #416]	; (800acd8 <_dtoa_r+0x650>)
 800ab36:	2200      	movs	r2, #0
 800ab38:	4640      	mov	r0, r8
 800ab3a:	4649      	mov	r1, r9
 800ab3c:	f7f5 fd6c 	bl	8000618 <__aeabi_dmul>
 800ab40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab44:	f7f5 ffee 	bl	8000b24 <__aeabi_dcmpge>
 800ab48:	9e04      	ldr	r6, [sp, #16]
 800ab4a:	4637      	mov	r7, r6
 800ab4c:	2800      	cmp	r0, #0
 800ab4e:	f040 8245 	bne.w	800afdc <_dtoa_r+0x954>
 800ab52:	9d00      	ldr	r5, [sp, #0]
 800ab54:	2331      	movs	r3, #49	; 0x31
 800ab56:	f805 3b01 	strb.w	r3, [r5], #1
 800ab5a:	f10b 0b01 	add.w	fp, fp, #1
 800ab5e:	e241      	b.n	800afe4 <_dtoa_r+0x95c>
 800ab60:	07f2      	lsls	r2, r6, #31
 800ab62:	d505      	bpl.n	800ab70 <_dtoa_r+0x4e8>
 800ab64:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab68:	f7f5 fd56 	bl	8000618 <__aeabi_dmul>
 800ab6c:	3501      	adds	r5, #1
 800ab6e:	2301      	movs	r3, #1
 800ab70:	1076      	asrs	r6, r6, #1
 800ab72:	3708      	adds	r7, #8
 800ab74:	e773      	b.n	800aa5e <_dtoa_r+0x3d6>
 800ab76:	2502      	movs	r5, #2
 800ab78:	e775      	b.n	800aa66 <_dtoa_r+0x3de>
 800ab7a:	9e04      	ldr	r6, [sp, #16]
 800ab7c:	465f      	mov	r7, fp
 800ab7e:	e792      	b.n	800aaa6 <_dtoa_r+0x41e>
 800ab80:	9900      	ldr	r1, [sp, #0]
 800ab82:	4b50      	ldr	r3, [pc, #320]	; (800acc4 <_dtoa_r+0x63c>)
 800ab84:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ab88:	4431      	add	r1, r6
 800ab8a:	9102      	str	r1, [sp, #8]
 800ab8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab8e:	eeb0 9a47 	vmov.f32	s18, s14
 800ab92:	eef0 9a67 	vmov.f32	s19, s15
 800ab96:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ab9a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ab9e:	2900      	cmp	r1, #0
 800aba0:	d044      	beq.n	800ac2c <_dtoa_r+0x5a4>
 800aba2:	494e      	ldr	r1, [pc, #312]	; (800acdc <_dtoa_r+0x654>)
 800aba4:	2000      	movs	r0, #0
 800aba6:	f7f5 fe61 	bl	800086c <__aeabi_ddiv>
 800abaa:	ec53 2b19 	vmov	r2, r3, d9
 800abae:	f7f5 fb7b 	bl	80002a8 <__aeabi_dsub>
 800abb2:	9d00      	ldr	r5, [sp, #0]
 800abb4:	ec41 0b19 	vmov	d9, r0, r1
 800abb8:	4649      	mov	r1, r9
 800abba:	4640      	mov	r0, r8
 800abbc:	f7f5 ffdc 	bl	8000b78 <__aeabi_d2iz>
 800abc0:	4606      	mov	r6, r0
 800abc2:	f7f5 fcbf 	bl	8000544 <__aeabi_i2d>
 800abc6:	4602      	mov	r2, r0
 800abc8:	460b      	mov	r3, r1
 800abca:	4640      	mov	r0, r8
 800abcc:	4649      	mov	r1, r9
 800abce:	f7f5 fb6b 	bl	80002a8 <__aeabi_dsub>
 800abd2:	3630      	adds	r6, #48	; 0x30
 800abd4:	f805 6b01 	strb.w	r6, [r5], #1
 800abd8:	ec53 2b19 	vmov	r2, r3, d9
 800abdc:	4680      	mov	r8, r0
 800abde:	4689      	mov	r9, r1
 800abe0:	f7f5 ff8c 	bl	8000afc <__aeabi_dcmplt>
 800abe4:	2800      	cmp	r0, #0
 800abe6:	d164      	bne.n	800acb2 <_dtoa_r+0x62a>
 800abe8:	4642      	mov	r2, r8
 800abea:	464b      	mov	r3, r9
 800abec:	4937      	ldr	r1, [pc, #220]	; (800accc <_dtoa_r+0x644>)
 800abee:	2000      	movs	r0, #0
 800abf0:	f7f5 fb5a 	bl	80002a8 <__aeabi_dsub>
 800abf4:	ec53 2b19 	vmov	r2, r3, d9
 800abf8:	f7f5 ff80 	bl	8000afc <__aeabi_dcmplt>
 800abfc:	2800      	cmp	r0, #0
 800abfe:	f040 80b6 	bne.w	800ad6e <_dtoa_r+0x6e6>
 800ac02:	9b02      	ldr	r3, [sp, #8]
 800ac04:	429d      	cmp	r5, r3
 800ac06:	f43f af7c 	beq.w	800ab02 <_dtoa_r+0x47a>
 800ac0a:	4b31      	ldr	r3, [pc, #196]	; (800acd0 <_dtoa_r+0x648>)
 800ac0c:	ec51 0b19 	vmov	r0, r1, d9
 800ac10:	2200      	movs	r2, #0
 800ac12:	f7f5 fd01 	bl	8000618 <__aeabi_dmul>
 800ac16:	4b2e      	ldr	r3, [pc, #184]	; (800acd0 <_dtoa_r+0x648>)
 800ac18:	ec41 0b19 	vmov	d9, r0, r1
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	4640      	mov	r0, r8
 800ac20:	4649      	mov	r1, r9
 800ac22:	f7f5 fcf9 	bl	8000618 <__aeabi_dmul>
 800ac26:	4680      	mov	r8, r0
 800ac28:	4689      	mov	r9, r1
 800ac2a:	e7c5      	b.n	800abb8 <_dtoa_r+0x530>
 800ac2c:	ec51 0b17 	vmov	r0, r1, d7
 800ac30:	f7f5 fcf2 	bl	8000618 <__aeabi_dmul>
 800ac34:	9b02      	ldr	r3, [sp, #8]
 800ac36:	9d00      	ldr	r5, [sp, #0]
 800ac38:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac3a:	ec41 0b19 	vmov	d9, r0, r1
 800ac3e:	4649      	mov	r1, r9
 800ac40:	4640      	mov	r0, r8
 800ac42:	f7f5 ff99 	bl	8000b78 <__aeabi_d2iz>
 800ac46:	4606      	mov	r6, r0
 800ac48:	f7f5 fc7c 	bl	8000544 <__aeabi_i2d>
 800ac4c:	3630      	adds	r6, #48	; 0x30
 800ac4e:	4602      	mov	r2, r0
 800ac50:	460b      	mov	r3, r1
 800ac52:	4640      	mov	r0, r8
 800ac54:	4649      	mov	r1, r9
 800ac56:	f7f5 fb27 	bl	80002a8 <__aeabi_dsub>
 800ac5a:	f805 6b01 	strb.w	r6, [r5], #1
 800ac5e:	9b02      	ldr	r3, [sp, #8]
 800ac60:	429d      	cmp	r5, r3
 800ac62:	4680      	mov	r8, r0
 800ac64:	4689      	mov	r9, r1
 800ac66:	f04f 0200 	mov.w	r2, #0
 800ac6a:	d124      	bne.n	800acb6 <_dtoa_r+0x62e>
 800ac6c:	4b1b      	ldr	r3, [pc, #108]	; (800acdc <_dtoa_r+0x654>)
 800ac6e:	ec51 0b19 	vmov	r0, r1, d9
 800ac72:	f7f5 fb1b 	bl	80002ac <__adddf3>
 800ac76:	4602      	mov	r2, r0
 800ac78:	460b      	mov	r3, r1
 800ac7a:	4640      	mov	r0, r8
 800ac7c:	4649      	mov	r1, r9
 800ac7e:	f7f5 ff5b 	bl	8000b38 <__aeabi_dcmpgt>
 800ac82:	2800      	cmp	r0, #0
 800ac84:	d173      	bne.n	800ad6e <_dtoa_r+0x6e6>
 800ac86:	ec53 2b19 	vmov	r2, r3, d9
 800ac8a:	4914      	ldr	r1, [pc, #80]	; (800acdc <_dtoa_r+0x654>)
 800ac8c:	2000      	movs	r0, #0
 800ac8e:	f7f5 fb0b 	bl	80002a8 <__aeabi_dsub>
 800ac92:	4602      	mov	r2, r0
 800ac94:	460b      	mov	r3, r1
 800ac96:	4640      	mov	r0, r8
 800ac98:	4649      	mov	r1, r9
 800ac9a:	f7f5 ff2f 	bl	8000afc <__aeabi_dcmplt>
 800ac9e:	2800      	cmp	r0, #0
 800aca0:	f43f af2f 	beq.w	800ab02 <_dtoa_r+0x47a>
 800aca4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800aca6:	1e6b      	subs	r3, r5, #1
 800aca8:	930f      	str	r3, [sp, #60]	; 0x3c
 800acaa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800acae:	2b30      	cmp	r3, #48	; 0x30
 800acb0:	d0f8      	beq.n	800aca4 <_dtoa_r+0x61c>
 800acb2:	46bb      	mov	fp, r7
 800acb4:	e04a      	b.n	800ad4c <_dtoa_r+0x6c4>
 800acb6:	4b06      	ldr	r3, [pc, #24]	; (800acd0 <_dtoa_r+0x648>)
 800acb8:	f7f5 fcae 	bl	8000618 <__aeabi_dmul>
 800acbc:	4680      	mov	r8, r0
 800acbe:	4689      	mov	r9, r1
 800acc0:	e7bd      	b.n	800ac3e <_dtoa_r+0x5b6>
 800acc2:	bf00      	nop
 800acc4:	0800de80 	.word	0x0800de80
 800acc8:	0800de58 	.word	0x0800de58
 800accc:	3ff00000 	.word	0x3ff00000
 800acd0:	40240000 	.word	0x40240000
 800acd4:	401c0000 	.word	0x401c0000
 800acd8:	40140000 	.word	0x40140000
 800acdc:	3fe00000 	.word	0x3fe00000
 800ace0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ace4:	9d00      	ldr	r5, [sp, #0]
 800ace6:	4642      	mov	r2, r8
 800ace8:	464b      	mov	r3, r9
 800acea:	4630      	mov	r0, r6
 800acec:	4639      	mov	r1, r7
 800acee:	f7f5 fdbd 	bl	800086c <__aeabi_ddiv>
 800acf2:	f7f5 ff41 	bl	8000b78 <__aeabi_d2iz>
 800acf6:	9001      	str	r0, [sp, #4]
 800acf8:	f7f5 fc24 	bl	8000544 <__aeabi_i2d>
 800acfc:	4642      	mov	r2, r8
 800acfe:	464b      	mov	r3, r9
 800ad00:	f7f5 fc8a 	bl	8000618 <__aeabi_dmul>
 800ad04:	4602      	mov	r2, r0
 800ad06:	460b      	mov	r3, r1
 800ad08:	4630      	mov	r0, r6
 800ad0a:	4639      	mov	r1, r7
 800ad0c:	f7f5 facc 	bl	80002a8 <__aeabi_dsub>
 800ad10:	9e01      	ldr	r6, [sp, #4]
 800ad12:	9f04      	ldr	r7, [sp, #16]
 800ad14:	3630      	adds	r6, #48	; 0x30
 800ad16:	f805 6b01 	strb.w	r6, [r5], #1
 800ad1a:	9e00      	ldr	r6, [sp, #0]
 800ad1c:	1bae      	subs	r6, r5, r6
 800ad1e:	42b7      	cmp	r7, r6
 800ad20:	4602      	mov	r2, r0
 800ad22:	460b      	mov	r3, r1
 800ad24:	d134      	bne.n	800ad90 <_dtoa_r+0x708>
 800ad26:	f7f5 fac1 	bl	80002ac <__adddf3>
 800ad2a:	4642      	mov	r2, r8
 800ad2c:	464b      	mov	r3, r9
 800ad2e:	4606      	mov	r6, r0
 800ad30:	460f      	mov	r7, r1
 800ad32:	f7f5 ff01 	bl	8000b38 <__aeabi_dcmpgt>
 800ad36:	b9c8      	cbnz	r0, 800ad6c <_dtoa_r+0x6e4>
 800ad38:	4642      	mov	r2, r8
 800ad3a:	464b      	mov	r3, r9
 800ad3c:	4630      	mov	r0, r6
 800ad3e:	4639      	mov	r1, r7
 800ad40:	f7f5 fed2 	bl	8000ae8 <__aeabi_dcmpeq>
 800ad44:	b110      	cbz	r0, 800ad4c <_dtoa_r+0x6c4>
 800ad46:	9b01      	ldr	r3, [sp, #4]
 800ad48:	07db      	lsls	r3, r3, #31
 800ad4a:	d40f      	bmi.n	800ad6c <_dtoa_r+0x6e4>
 800ad4c:	4651      	mov	r1, sl
 800ad4e:	4620      	mov	r0, r4
 800ad50:	f000 fbcc 	bl	800b4ec <_Bfree>
 800ad54:	2300      	movs	r3, #0
 800ad56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ad58:	702b      	strb	r3, [r5, #0]
 800ad5a:	f10b 0301 	add.w	r3, fp, #1
 800ad5e:	6013      	str	r3, [r2, #0]
 800ad60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	f43f ace2 	beq.w	800a72c <_dtoa_r+0xa4>
 800ad68:	601d      	str	r5, [r3, #0]
 800ad6a:	e4df      	b.n	800a72c <_dtoa_r+0xa4>
 800ad6c:	465f      	mov	r7, fp
 800ad6e:	462b      	mov	r3, r5
 800ad70:	461d      	mov	r5, r3
 800ad72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad76:	2a39      	cmp	r2, #57	; 0x39
 800ad78:	d106      	bne.n	800ad88 <_dtoa_r+0x700>
 800ad7a:	9a00      	ldr	r2, [sp, #0]
 800ad7c:	429a      	cmp	r2, r3
 800ad7e:	d1f7      	bne.n	800ad70 <_dtoa_r+0x6e8>
 800ad80:	9900      	ldr	r1, [sp, #0]
 800ad82:	2230      	movs	r2, #48	; 0x30
 800ad84:	3701      	adds	r7, #1
 800ad86:	700a      	strb	r2, [r1, #0]
 800ad88:	781a      	ldrb	r2, [r3, #0]
 800ad8a:	3201      	adds	r2, #1
 800ad8c:	701a      	strb	r2, [r3, #0]
 800ad8e:	e790      	b.n	800acb2 <_dtoa_r+0x62a>
 800ad90:	4ba3      	ldr	r3, [pc, #652]	; (800b020 <_dtoa_r+0x998>)
 800ad92:	2200      	movs	r2, #0
 800ad94:	f7f5 fc40 	bl	8000618 <__aeabi_dmul>
 800ad98:	2200      	movs	r2, #0
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	4606      	mov	r6, r0
 800ad9e:	460f      	mov	r7, r1
 800ada0:	f7f5 fea2 	bl	8000ae8 <__aeabi_dcmpeq>
 800ada4:	2800      	cmp	r0, #0
 800ada6:	d09e      	beq.n	800ace6 <_dtoa_r+0x65e>
 800ada8:	e7d0      	b.n	800ad4c <_dtoa_r+0x6c4>
 800adaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800adac:	2a00      	cmp	r2, #0
 800adae:	f000 80ca 	beq.w	800af46 <_dtoa_r+0x8be>
 800adb2:	9a07      	ldr	r2, [sp, #28]
 800adb4:	2a01      	cmp	r2, #1
 800adb6:	f300 80ad 	bgt.w	800af14 <_dtoa_r+0x88c>
 800adba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800adbc:	2a00      	cmp	r2, #0
 800adbe:	f000 80a5 	beq.w	800af0c <_dtoa_r+0x884>
 800adc2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800adc6:	9e08      	ldr	r6, [sp, #32]
 800adc8:	9d05      	ldr	r5, [sp, #20]
 800adca:	9a05      	ldr	r2, [sp, #20]
 800adcc:	441a      	add	r2, r3
 800adce:	9205      	str	r2, [sp, #20]
 800add0:	9a06      	ldr	r2, [sp, #24]
 800add2:	2101      	movs	r1, #1
 800add4:	441a      	add	r2, r3
 800add6:	4620      	mov	r0, r4
 800add8:	9206      	str	r2, [sp, #24]
 800adda:	f000 fc87 	bl	800b6ec <__i2b>
 800adde:	4607      	mov	r7, r0
 800ade0:	b165      	cbz	r5, 800adfc <_dtoa_r+0x774>
 800ade2:	9b06      	ldr	r3, [sp, #24]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	dd09      	ble.n	800adfc <_dtoa_r+0x774>
 800ade8:	42ab      	cmp	r3, r5
 800adea:	9a05      	ldr	r2, [sp, #20]
 800adec:	bfa8      	it	ge
 800adee:	462b      	movge	r3, r5
 800adf0:	1ad2      	subs	r2, r2, r3
 800adf2:	9205      	str	r2, [sp, #20]
 800adf4:	9a06      	ldr	r2, [sp, #24]
 800adf6:	1aed      	subs	r5, r5, r3
 800adf8:	1ad3      	subs	r3, r2, r3
 800adfa:	9306      	str	r3, [sp, #24]
 800adfc:	9b08      	ldr	r3, [sp, #32]
 800adfe:	b1f3      	cbz	r3, 800ae3e <_dtoa_r+0x7b6>
 800ae00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	f000 80a3 	beq.w	800af4e <_dtoa_r+0x8c6>
 800ae08:	2e00      	cmp	r6, #0
 800ae0a:	dd10      	ble.n	800ae2e <_dtoa_r+0x7a6>
 800ae0c:	4639      	mov	r1, r7
 800ae0e:	4632      	mov	r2, r6
 800ae10:	4620      	mov	r0, r4
 800ae12:	f000 fd2b 	bl	800b86c <__pow5mult>
 800ae16:	4652      	mov	r2, sl
 800ae18:	4601      	mov	r1, r0
 800ae1a:	4607      	mov	r7, r0
 800ae1c:	4620      	mov	r0, r4
 800ae1e:	f000 fc7b 	bl	800b718 <__multiply>
 800ae22:	4651      	mov	r1, sl
 800ae24:	4680      	mov	r8, r0
 800ae26:	4620      	mov	r0, r4
 800ae28:	f000 fb60 	bl	800b4ec <_Bfree>
 800ae2c:	46c2      	mov	sl, r8
 800ae2e:	9b08      	ldr	r3, [sp, #32]
 800ae30:	1b9a      	subs	r2, r3, r6
 800ae32:	d004      	beq.n	800ae3e <_dtoa_r+0x7b6>
 800ae34:	4651      	mov	r1, sl
 800ae36:	4620      	mov	r0, r4
 800ae38:	f000 fd18 	bl	800b86c <__pow5mult>
 800ae3c:	4682      	mov	sl, r0
 800ae3e:	2101      	movs	r1, #1
 800ae40:	4620      	mov	r0, r4
 800ae42:	f000 fc53 	bl	800b6ec <__i2b>
 800ae46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	4606      	mov	r6, r0
 800ae4c:	f340 8081 	ble.w	800af52 <_dtoa_r+0x8ca>
 800ae50:	461a      	mov	r2, r3
 800ae52:	4601      	mov	r1, r0
 800ae54:	4620      	mov	r0, r4
 800ae56:	f000 fd09 	bl	800b86c <__pow5mult>
 800ae5a:	9b07      	ldr	r3, [sp, #28]
 800ae5c:	2b01      	cmp	r3, #1
 800ae5e:	4606      	mov	r6, r0
 800ae60:	dd7a      	ble.n	800af58 <_dtoa_r+0x8d0>
 800ae62:	f04f 0800 	mov.w	r8, #0
 800ae66:	6933      	ldr	r3, [r6, #16]
 800ae68:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ae6c:	6918      	ldr	r0, [r3, #16]
 800ae6e:	f000 fbef 	bl	800b650 <__hi0bits>
 800ae72:	f1c0 0020 	rsb	r0, r0, #32
 800ae76:	9b06      	ldr	r3, [sp, #24]
 800ae78:	4418      	add	r0, r3
 800ae7a:	f010 001f 	ands.w	r0, r0, #31
 800ae7e:	f000 8094 	beq.w	800afaa <_dtoa_r+0x922>
 800ae82:	f1c0 0320 	rsb	r3, r0, #32
 800ae86:	2b04      	cmp	r3, #4
 800ae88:	f340 8085 	ble.w	800af96 <_dtoa_r+0x90e>
 800ae8c:	9b05      	ldr	r3, [sp, #20]
 800ae8e:	f1c0 001c 	rsb	r0, r0, #28
 800ae92:	4403      	add	r3, r0
 800ae94:	9305      	str	r3, [sp, #20]
 800ae96:	9b06      	ldr	r3, [sp, #24]
 800ae98:	4403      	add	r3, r0
 800ae9a:	4405      	add	r5, r0
 800ae9c:	9306      	str	r3, [sp, #24]
 800ae9e:	9b05      	ldr	r3, [sp, #20]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	dd05      	ble.n	800aeb0 <_dtoa_r+0x828>
 800aea4:	4651      	mov	r1, sl
 800aea6:	461a      	mov	r2, r3
 800aea8:	4620      	mov	r0, r4
 800aeaa:	f000 fd39 	bl	800b920 <__lshift>
 800aeae:	4682      	mov	sl, r0
 800aeb0:	9b06      	ldr	r3, [sp, #24]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	dd05      	ble.n	800aec2 <_dtoa_r+0x83a>
 800aeb6:	4631      	mov	r1, r6
 800aeb8:	461a      	mov	r2, r3
 800aeba:	4620      	mov	r0, r4
 800aebc:	f000 fd30 	bl	800b920 <__lshift>
 800aec0:	4606      	mov	r6, r0
 800aec2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d072      	beq.n	800afae <_dtoa_r+0x926>
 800aec8:	4631      	mov	r1, r6
 800aeca:	4650      	mov	r0, sl
 800aecc:	f000 fd94 	bl	800b9f8 <__mcmp>
 800aed0:	2800      	cmp	r0, #0
 800aed2:	da6c      	bge.n	800afae <_dtoa_r+0x926>
 800aed4:	2300      	movs	r3, #0
 800aed6:	4651      	mov	r1, sl
 800aed8:	220a      	movs	r2, #10
 800aeda:	4620      	mov	r0, r4
 800aedc:	f000 fb28 	bl	800b530 <__multadd>
 800aee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aee2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aee6:	4682      	mov	sl, r0
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	f000 81b0 	beq.w	800b24e <_dtoa_r+0xbc6>
 800aeee:	2300      	movs	r3, #0
 800aef0:	4639      	mov	r1, r7
 800aef2:	220a      	movs	r2, #10
 800aef4:	4620      	mov	r0, r4
 800aef6:	f000 fb1b 	bl	800b530 <__multadd>
 800aefa:	9b01      	ldr	r3, [sp, #4]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	4607      	mov	r7, r0
 800af00:	f300 8096 	bgt.w	800b030 <_dtoa_r+0x9a8>
 800af04:	9b07      	ldr	r3, [sp, #28]
 800af06:	2b02      	cmp	r3, #2
 800af08:	dc59      	bgt.n	800afbe <_dtoa_r+0x936>
 800af0a:	e091      	b.n	800b030 <_dtoa_r+0x9a8>
 800af0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800af0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800af12:	e758      	b.n	800adc6 <_dtoa_r+0x73e>
 800af14:	9b04      	ldr	r3, [sp, #16]
 800af16:	1e5e      	subs	r6, r3, #1
 800af18:	9b08      	ldr	r3, [sp, #32]
 800af1a:	42b3      	cmp	r3, r6
 800af1c:	bfbf      	itttt	lt
 800af1e:	9b08      	ldrlt	r3, [sp, #32]
 800af20:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800af22:	9608      	strlt	r6, [sp, #32]
 800af24:	1af3      	sublt	r3, r6, r3
 800af26:	bfb4      	ite	lt
 800af28:	18d2      	addlt	r2, r2, r3
 800af2a:	1b9e      	subge	r6, r3, r6
 800af2c:	9b04      	ldr	r3, [sp, #16]
 800af2e:	bfbc      	itt	lt
 800af30:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800af32:	2600      	movlt	r6, #0
 800af34:	2b00      	cmp	r3, #0
 800af36:	bfb7      	itett	lt
 800af38:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800af3c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800af40:	1a9d      	sublt	r5, r3, r2
 800af42:	2300      	movlt	r3, #0
 800af44:	e741      	b.n	800adca <_dtoa_r+0x742>
 800af46:	9e08      	ldr	r6, [sp, #32]
 800af48:	9d05      	ldr	r5, [sp, #20]
 800af4a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800af4c:	e748      	b.n	800ade0 <_dtoa_r+0x758>
 800af4e:	9a08      	ldr	r2, [sp, #32]
 800af50:	e770      	b.n	800ae34 <_dtoa_r+0x7ac>
 800af52:	9b07      	ldr	r3, [sp, #28]
 800af54:	2b01      	cmp	r3, #1
 800af56:	dc19      	bgt.n	800af8c <_dtoa_r+0x904>
 800af58:	9b02      	ldr	r3, [sp, #8]
 800af5a:	b9bb      	cbnz	r3, 800af8c <_dtoa_r+0x904>
 800af5c:	9b03      	ldr	r3, [sp, #12]
 800af5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af62:	b99b      	cbnz	r3, 800af8c <_dtoa_r+0x904>
 800af64:	9b03      	ldr	r3, [sp, #12]
 800af66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800af6a:	0d1b      	lsrs	r3, r3, #20
 800af6c:	051b      	lsls	r3, r3, #20
 800af6e:	b183      	cbz	r3, 800af92 <_dtoa_r+0x90a>
 800af70:	9b05      	ldr	r3, [sp, #20]
 800af72:	3301      	adds	r3, #1
 800af74:	9305      	str	r3, [sp, #20]
 800af76:	9b06      	ldr	r3, [sp, #24]
 800af78:	3301      	adds	r3, #1
 800af7a:	9306      	str	r3, [sp, #24]
 800af7c:	f04f 0801 	mov.w	r8, #1
 800af80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af82:	2b00      	cmp	r3, #0
 800af84:	f47f af6f 	bne.w	800ae66 <_dtoa_r+0x7de>
 800af88:	2001      	movs	r0, #1
 800af8a:	e774      	b.n	800ae76 <_dtoa_r+0x7ee>
 800af8c:	f04f 0800 	mov.w	r8, #0
 800af90:	e7f6      	b.n	800af80 <_dtoa_r+0x8f8>
 800af92:	4698      	mov	r8, r3
 800af94:	e7f4      	b.n	800af80 <_dtoa_r+0x8f8>
 800af96:	d082      	beq.n	800ae9e <_dtoa_r+0x816>
 800af98:	9a05      	ldr	r2, [sp, #20]
 800af9a:	331c      	adds	r3, #28
 800af9c:	441a      	add	r2, r3
 800af9e:	9205      	str	r2, [sp, #20]
 800afa0:	9a06      	ldr	r2, [sp, #24]
 800afa2:	441a      	add	r2, r3
 800afa4:	441d      	add	r5, r3
 800afa6:	9206      	str	r2, [sp, #24]
 800afa8:	e779      	b.n	800ae9e <_dtoa_r+0x816>
 800afaa:	4603      	mov	r3, r0
 800afac:	e7f4      	b.n	800af98 <_dtoa_r+0x910>
 800afae:	9b04      	ldr	r3, [sp, #16]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	dc37      	bgt.n	800b024 <_dtoa_r+0x99c>
 800afb4:	9b07      	ldr	r3, [sp, #28]
 800afb6:	2b02      	cmp	r3, #2
 800afb8:	dd34      	ble.n	800b024 <_dtoa_r+0x99c>
 800afba:	9b04      	ldr	r3, [sp, #16]
 800afbc:	9301      	str	r3, [sp, #4]
 800afbe:	9b01      	ldr	r3, [sp, #4]
 800afc0:	b963      	cbnz	r3, 800afdc <_dtoa_r+0x954>
 800afc2:	4631      	mov	r1, r6
 800afc4:	2205      	movs	r2, #5
 800afc6:	4620      	mov	r0, r4
 800afc8:	f000 fab2 	bl	800b530 <__multadd>
 800afcc:	4601      	mov	r1, r0
 800afce:	4606      	mov	r6, r0
 800afd0:	4650      	mov	r0, sl
 800afd2:	f000 fd11 	bl	800b9f8 <__mcmp>
 800afd6:	2800      	cmp	r0, #0
 800afd8:	f73f adbb 	bgt.w	800ab52 <_dtoa_r+0x4ca>
 800afdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afde:	9d00      	ldr	r5, [sp, #0]
 800afe0:	ea6f 0b03 	mvn.w	fp, r3
 800afe4:	f04f 0800 	mov.w	r8, #0
 800afe8:	4631      	mov	r1, r6
 800afea:	4620      	mov	r0, r4
 800afec:	f000 fa7e 	bl	800b4ec <_Bfree>
 800aff0:	2f00      	cmp	r7, #0
 800aff2:	f43f aeab 	beq.w	800ad4c <_dtoa_r+0x6c4>
 800aff6:	f1b8 0f00 	cmp.w	r8, #0
 800affa:	d005      	beq.n	800b008 <_dtoa_r+0x980>
 800affc:	45b8      	cmp	r8, r7
 800affe:	d003      	beq.n	800b008 <_dtoa_r+0x980>
 800b000:	4641      	mov	r1, r8
 800b002:	4620      	mov	r0, r4
 800b004:	f000 fa72 	bl	800b4ec <_Bfree>
 800b008:	4639      	mov	r1, r7
 800b00a:	4620      	mov	r0, r4
 800b00c:	f000 fa6e 	bl	800b4ec <_Bfree>
 800b010:	e69c      	b.n	800ad4c <_dtoa_r+0x6c4>
 800b012:	2600      	movs	r6, #0
 800b014:	4637      	mov	r7, r6
 800b016:	e7e1      	b.n	800afdc <_dtoa_r+0x954>
 800b018:	46bb      	mov	fp, r7
 800b01a:	4637      	mov	r7, r6
 800b01c:	e599      	b.n	800ab52 <_dtoa_r+0x4ca>
 800b01e:	bf00      	nop
 800b020:	40240000 	.word	0x40240000
 800b024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b026:	2b00      	cmp	r3, #0
 800b028:	f000 80c8 	beq.w	800b1bc <_dtoa_r+0xb34>
 800b02c:	9b04      	ldr	r3, [sp, #16]
 800b02e:	9301      	str	r3, [sp, #4]
 800b030:	2d00      	cmp	r5, #0
 800b032:	dd05      	ble.n	800b040 <_dtoa_r+0x9b8>
 800b034:	4639      	mov	r1, r7
 800b036:	462a      	mov	r2, r5
 800b038:	4620      	mov	r0, r4
 800b03a:	f000 fc71 	bl	800b920 <__lshift>
 800b03e:	4607      	mov	r7, r0
 800b040:	f1b8 0f00 	cmp.w	r8, #0
 800b044:	d05b      	beq.n	800b0fe <_dtoa_r+0xa76>
 800b046:	6879      	ldr	r1, [r7, #4]
 800b048:	4620      	mov	r0, r4
 800b04a:	f000 fa0f 	bl	800b46c <_Balloc>
 800b04e:	4605      	mov	r5, r0
 800b050:	b928      	cbnz	r0, 800b05e <_dtoa_r+0x9d6>
 800b052:	4b83      	ldr	r3, [pc, #524]	; (800b260 <_dtoa_r+0xbd8>)
 800b054:	4602      	mov	r2, r0
 800b056:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b05a:	f7ff bb2e 	b.w	800a6ba <_dtoa_r+0x32>
 800b05e:	693a      	ldr	r2, [r7, #16]
 800b060:	3202      	adds	r2, #2
 800b062:	0092      	lsls	r2, r2, #2
 800b064:	f107 010c 	add.w	r1, r7, #12
 800b068:	300c      	adds	r0, #12
 800b06a:	f002 f9e3 	bl	800d434 <memcpy>
 800b06e:	2201      	movs	r2, #1
 800b070:	4629      	mov	r1, r5
 800b072:	4620      	mov	r0, r4
 800b074:	f000 fc54 	bl	800b920 <__lshift>
 800b078:	9b00      	ldr	r3, [sp, #0]
 800b07a:	3301      	adds	r3, #1
 800b07c:	9304      	str	r3, [sp, #16]
 800b07e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b082:	4413      	add	r3, r2
 800b084:	9308      	str	r3, [sp, #32]
 800b086:	9b02      	ldr	r3, [sp, #8]
 800b088:	f003 0301 	and.w	r3, r3, #1
 800b08c:	46b8      	mov	r8, r7
 800b08e:	9306      	str	r3, [sp, #24]
 800b090:	4607      	mov	r7, r0
 800b092:	9b04      	ldr	r3, [sp, #16]
 800b094:	4631      	mov	r1, r6
 800b096:	3b01      	subs	r3, #1
 800b098:	4650      	mov	r0, sl
 800b09a:	9301      	str	r3, [sp, #4]
 800b09c:	f7ff fa6a 	bl	800a574 <quorem>
 800b0a0:	4641      	mov	r1, r8
 800b0a2:	9002      	str	r0, [sp, #8]
 800b0a4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b0a8:	4650      	mov	r0, sl
 800b0aa:	f000 fca5 	bl	800b9f8 <__mcmp>
 800b0ae:	463a      	mov	r2, r7
 800b0b0:	9005      	str	r0, [sp, #20]
 800b0b2:	4631      	mov	r1, r6
 800b0b4:	4620      	mov	r0, r4
 800b0b6:	f000 fcbb 	bl	800ba30 <__mdiff>
 800b0ba:	68c2      	ldr	r2, [r0, #12]
 800b0bc:	4605      	mov	r5, r0
 800b0be:	bb02      	cbnz	r2, 800b102 <_dtoa_r+0xa7a>
 800b0c0:	4601      	mov	r1, r0
 800b0c2:	4650      	mov	r0, sl
 800b0c4:	f000 fc98 	bl	800b9f8 <__mcmp>
 800b0c8:	4602      	mov	r2, r0
 800b0ca:	4629      	mov	r1, r5
 800b0cc:	4620      	mov	r0, r4
 800b0ce:	9209      	str	r2, [sp, #36]	; 0x24
 800b0d0:	f000 fa0c 	bl	800b4ec <_Bfree>
 800b0d4:	9b07      	ldr	r3, [sp, #28]
 800b0d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0d8:	9d04      	ldr	r5, [sp, #16]
 800b0da:	ea43 0102 	orr.w	r1, r3, r2
 800b0de:	9b06      	ldr	r3, [sp, #24]
 800b0e0:	4319      	orrs	r1, r3
 800b0e2:	d110      	bne.n	800b106 <_dtoa_r+0xa7e>
 800b0e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b0e8:	d029      	beq.n	800b13e <_dtoa_r+0xab6>
 800b0ea:	9b05      	ldr	r3, [sp, #20]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	dd02      	ble.n	800b0f6 <_dtoa_r+0xa6e>
 800b0f0:	9b02      	ldr	r3, [sp, #8]
 800b0f2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b0f6:	9b01      	ldr	r3, [sp, #4]
 800b0f8:	f883 9000 	strb.w	r9, [r3]
 800b0fc:	e774      	b.n	800afe8 <_dtoa_r+0x960>
 800b0fe:	4638      	mov	r0, r7
 800b100:	e7ba      	b.n	800b078 <_dtoa_r+0x9f0>
 800b102:	2201      	movs	r2, #1
 800b104:	e7e1      	b.n	800b0ca <_dtoa_r+0xa42>
 800b106:	9b05      	ldr	r3, [sp, #20]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	db04      	blt.n	800b116 <_dtoa_r+0xa8e>
 800b10c:	9907      	ldr	r1, [sp, #28]
 800b10e:	430b      	orrs	r3, r1
 800b110:	9906      	ldr	r1, [sp, #24]
 800b112:	430b      	orrs	r3, r1
 800b114:	d120      	bne.n	800b158 <_dtoa_r+0xad0>
 800b116:	2a00      	cmp	r2, #0
 800b118:	dded      	ble.n	800b0f6 <_dtoa_r+0xa6e>
 800b11a:	4651      	mov	r1, sl
 800b11c:	2201      	movs	r2, #1
 800b11e:	4620      	mov	r0, r4
 800b120:	f000 fbfe 	bl	800b920 <__lshift>
 800b124:	4631      	mov	r1, r6
 800b126:	4682      	mov	sl, r0
 800b128:	f000 fc66 	bl	800b9f8 <__mcmp>
 800b12c:	2800      	cmp	r0, #0
 800b12e:	dc03      	bgt.n	800b138 <_dtoa_r+0xab0>
 800b130:	d1e1      	bne.n	800b0f6 <_dtoa_r+0xa6e>
 800b132:	f019 0f01 	tst.w	r9, #1
 800b136:	d0de      	beq.n	800b0f6 <_dtoa_r+0xa6e>
 800b138:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b13c:	d1d8      	bne.n	800b0f0 <_dtoa_r+0xa68>
 800b13e:	9a01      	ldr	r2, [sp, #4]
 800b140:	2339      	movs	r3, #57	; 0x39
 800b142:	7013      	strb	r3, [r2, #0]
 800b144:	462b      	mov	r3, r5
 800b146:	461d      	mov	r5, r3
 800b148:	3b01      	subs	r3, #1
 800b14a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b14e:	2a39      	cmp	r2, #57	; 0x39
 800b150:	d06c      	beq.n	800b22c <_dtoa_r+0xba4>
 800b152:	3201      	adds	r2, #1
 800b154:	701a      	strb	r2, [r3, #0]
 800b156:	e747      	b.n	800afe8 <_dtoa_r+0x960>
 800b158:	2a00      	cmp	r2, #0
 800b15a:	dd07      	ble.n	800b16c <_dtoa_r+0xae4>
 800b15c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b160:	d0ed      	beq.n	800b13e <_dtoa_r+0xab6>
 800b162:	9a01      	ldr	r2, [sp, #4]
 800b164:	f109 0301 	add.w	r3, r9, #1
 800b168:	7013      	strb	r3, [r2, #0]
 800b16a:	e73d      	b.n	800afe8 <_dtoa_r+0x960>
 800b16c:	9b04      	ldr	r3, [sp, #16]
 800b16e:	9a08      	ldr	r2, [sp, #32]
 800b170:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b174:	4293      	cmp	r3, r2
 800b176:	d043      	beq.n	800b200 <_dtoa_r+0xb78>
 800b178:	4651      	mov	r1, sl
 800b17a:	2300      	movs	r3, #0
 800b17c:	220a      	movs	r2, #10
 800b17e:	4620      	mov	r0, r4
 800b180:	f000 f9d6 	bl	800b530 <__multadd>
 800b184:	45b8      	cmp	r8, r7
 800b186:	4682      	mov	sl, r0
 800b188:	f04f 0300 	mov.w	r3, #0
 800b18c:	f04f 020a 	mov.w	r2, #10
 800b190:	4641      	mov	r1, r8
 800b192:	4620      	mov	r0, r4
 800b194:	d107      	bne.n	800b1a6 <_dtoa_r+0xb1e>
 800b196:	f000 f9cb 	bl	800b530 <__multadd>
 800b19a:	4680      	mov	r8, r0
 800b19c:	4607      	mov	r7, r0
 800b19e:	9b04      	ldr	r3, [sp, #16]
 800b1a0:	3301      	adds	r3, #1
 800b1a2:	9304      	str	r3, [sp, #16]
 800b1a4:	e775      	b.n	800b092 <_dtoa_r+0xa0a>
 800b1a6:	f000 f9c3 	bl	800b530 <__multadd>
 800b1aa:	4639      	mov	r1, r7
 800b1ac:	4680      	mov	r8, r0
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	220a      	movs	r2, #10
 800b1b2:	4620      	mov	r0, r4
 800b1b4:	f000 f9bc 	bl	800b530 <__multadd>
 800b1b8:	4607      	mov	r7, r0
 800b1ba:	e7f0      	b.n	800b19e <_dtoa_r+0xb16>
 800b1bc:	9b04      	ldr	r3, [sp, #16]
 800b1be:	9301      	str	r3, [sp, #4]
 800b1c0:	9d00      	ldr	r5, [sp, #0]
 800b1c2:	4631      	mov	r1, r6
 800b1c4:	4650      	mov	r0, sl
 800b1c6:	f7ff f9d5 	bl	800a574 <quorem>
 800b1ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b1ce:	9b00      	ldr	r3, [sp, #0]
 800b1d0:	f805 9b01 	strb.w	r9, [r5], #1
 800b1d4:	1aea      	subs	r2, r5, r3
 800b1d6:	9b01      	ldr	r3, [sp, #4]
 800b1d8:	4293      	cmp	r3, r2
 800b1da:	dd07      	ble.n	800b1ec <_dtoa_r+0xb64>
 800b1dc:	4651      	mov	r1, sl
 800b1de:	2300      	movs	r3, #0
 800b1e0:	220a      	movs	r2, #10
 800b1e2:	4620      	mov	r0, r4
 800b1e4:	f000 f9a4 	bl	800b530 <__multadd>
 800b1e8:	4682      	mov	sl, r0
 800b1ea:	e7ea      	b.n	800b1c2 <_dtoa_r+0xb3a>
 800b1ec:	9b01      	ldr	r3, [sp, #4]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	bfc8      	it	gt
 800b1f2:	461d      	movgt	r5, r3
 800b1f4:	9b00      	ldr	r3, [sp, #0]
 800b1f6:	bfd8      	it	le
 800b1f8:	2501      	movle	r5, #1
 800b1fa:	441d      	add	r5, r3
 800b1fc:	f04f 0800 	mov.w	r8, #0
 800b200:	4651      	mov	r1, sl
 800b202:	2201      	movs	r2, #1
 800b204:	4620      	mov	r0, r4
 800b206:	f000 fb8b 	bl	800b920 <__lshift>
 800b20a:	4631      	mov	r1, r6
 800b20c:	4682      	mov	sl, r0
 800b20e:	f000 fbf3 	bl	800b9f8 <__mcmp>
 800b212:	2800      	cmp	r0, #0
 800b214:	dc96      	bgt.n	800b144 <_dtoa_r+0xabc>
 800b216:	d102      	bne.n	800b21e <_dtoa_r+0xb96>
 800b218:	f019 0f01 	tst.w	r9, #1
 800b21c:	d192      	bne.n	800b144 <_dtoa_r+0xabc>
 800b21e:	462b      	mov	r3, r5
 800b220:	461d      	mov	r5, r3
 800b222:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b226:	2a30      	cmp	r2, #48	; 0x30
 800b228:	d0fa      	beq.n	800b220 <_dtoa_r+0xb98>
 800b22a:	e6dd      	b.n	800afe8 <_dtoa_r+0x960>
 800b22c:	9a00      	ldr	r2, [sp, #0]
 800b22e:	429a      	cmp	r2, r3
 800b230:	d189      	bne.n	800b146 <_dtoa_r+0xabe>
 800b232:	f10b 0b01 	add.w	fp, fp, #1
 800b236:	2331      	movs	r3, #49	; 0x31
 800b238:	e796      	b.n	800b168 <_dtoa_r+0xae0>
 800b23a:	4b0a      	ldr	r3, [pc, #40]	; (800b264 <_dtoa_r+0xbdc>)
 800b23c:	f7ff ba99 	b.w	800a772 <_dtoa_r+0xea>
 800b240:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b242:	2b00      	cmp	r3, #0
 800b244:	f47f aa6d 	bne.w	800a722 <_dtoa_r+0x9a>
 800b248:	4b07      	ldr	r3, [pc, #28]	; (800b268 <_dtoa_r+0xbe0>)
 800b24a:	f7ff ba92 	b.w	800a772 <_dtoa_r+0xea>
 800b24e:	9b01      	ldr	r3, [sp, #4]
 800b250:	2b00      	cmp	r3, #0
 800b252:	dcb5      	bgt.n	800b1c0 <_dtoa_r+0xb38>
 800b254:	9b07      	ldr	r3, [sp, #28]
 800b256:	2b02      	cmp	r3, #2
 800b258:	f73f aeb1 	bgt.w	800afbe <_dtoa_r+0x936>
 800b25c:	e7b0      	b.n	800b1c0 <_dtoa_r+0xb38>
 800b25e:	bf00      	nop
 800b260:	0800dde9 	.word	0x0800dde9
 800b264:	0800dd44 	.word	0x0800dd44
 800b268:	0800dd6d 	.word	0x0800dd6d

0800b26c <_free_r>:
 800b26c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b26e:	2900      	cmp	r1, #0
 800b270:	d044      	beq.n	800b2fc <_free_r+0x90>
 800b272:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b276:	9001      	str	r0, [sp, #4]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	f1a1 0404 	sub.w	r4, r1, #4
 800b27e:	bfb8      	it	lt
 800b280:	18e4      	addlt	r4, r4, r3
 800b282:	f000 f8e7 	bl	800b454 <__malloc_lock>
 800b286:	4a1e      	ldr	r2, [pc, #120]	; (800b300 <_free_r+0x94>)
 800b288:	9801      	ldr	r0, [sp, #4]
 800b28a:	6813      	ldr	r3, [r2, #0]
 800b28c:	b933      	cbnz	r3, 800b29c <_free_r+0x30>
 800b28e:	6063      	str	r3, [r4, #4]
 800b290:	6014      	str	r4, [r2, #0]
 800b292:	b003      	add	sp, #12
 800b294:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b298:	f000 b8e2 	b.w	800b460 <__malloc_unlock>
 800b29c:	42a3      	cmp	r3, r4
 800b29e:	d908      	bls.n	800b2b2 <_free_r+0x46>
 800b2a0:	6825      	ldr	r5, [r4, #0]
 800b2a2:	1961      	adds	r1, r4, r5
 800b2a4:	428b      	cmp	r3, r1
 800b2a6:	bf01      	itttt	eq
 800b2a8:	6819      	ldreq	r1, [r3, #0]
 800b2aa:	685b      	ldreq	r3, [r3, #4]
 800b2ac:	1949      	addeq	r1, r1, r5
 800b2ae:	6021      	streq	r1, [r4, #0]
 800b2b0:	e7ed      	b.n	800b28e <_free_r+0x22>
 800b2b2:	461a      	mov	r2, r3
 800b2b4:	685b      	ldr	r3, [r3, #4]
 800b2b6:	b10b      	cbz	r3, 800b2bc <_free_r+0x50>
 800b2b8:	42a3      	cmp	r3, r4
 800b2ba:	d9fa      	bls.n	800b2b2 <_free_r+0x46>
 800b2bc:	6811      	ldr	r1, [r2, #0]
 800b2be:	1855      	adds	r5, r2, r1
 800b2c0:	42a5      	cmp	r5, r4
 800b2c2:	d10b      	bne.n	800b2dc <_free_r+0x70>
 800b2c4:	6824      	ldr	r4, [r4, #0]
 800b2c6:	4421      	add	r1, r4
 800b2c8:	1854      	adds	r4, r2, r1
 800b2ca:	42a3      	cmp	r3, r4
 800b2cc:	6011      	str	r1, [r2, #0]
 800b2ce:	d1e0      	bne.n	800b292 <_free_r+0x26>
 800b2d0:	681c      	ldr	r4, [r3, #0]
 800b2d2:	685b      	ldr	r3, [r3, #4]
 800b2d4:	6053      	str	r3, [r2, #4]
 800b2d6:	440c      	add	r4, r1
 800b2d8:	6014      	str	r4, [r2, #0]
 800b2da:	e7da      	b.n	800b292 <_free_r+0x26>
 800b2dc:	d902      	bls.n	800b2e4 <_free_r+0x78>
 800b2de:	230c      	movs	r3, #12
 800b2e0:	6003      	str	r3, [r0, #0]
 800b2e2:	e7d6      	b.n	800b292 <_free_r+0x26>
 800b2e4:	6825      	ldr	r5, [r4, #0]
 800b2e6:	1961      	adds	r1, r4, r5
 800b2e8:	428b      	cmp	r3, r1
 800b2ea:	bf04      	itt	eq
 800b2ec:	6819      	ldreq	r1, [r3, #0]
 800b2ee:	685b      	ldreq	r3, [r3, #4]
 800b2f0:	6063      	str	r3, [r4, #4]
 800b2f2:	bf04      	itt	eq
 800b2f4:	1949      	addeq	r1, r1, r5
 800b2f6:	6021      	streq	r1, [r4, #0]
 800b2f8:	6054      	str	r4, [r2, #4]
 800b2fa:	e7ca      	b.n	800b292 <_free_r+0x26>
 800b2fc:	b003      	add	sp, #12
 800b2fe:	bd30      	pop	{r4, r5, pc}
 800b300:	200010a8 	.word	0x200010a8

0800b304 <malloc>:
 800b304:	4b02      	ldr	r3, [pc, #8]	; (800b310 <malloc+0xc>)
 800b306:	4601      	mov	r1, r0
 800b308:	6818      	ldr	r0, [r3, #0]
 800b30a:	f000 b823 	b.w	800b354 <_malloc_r>
 800b30e:	bf00      	nop
 800b310:	20000074 	.word	0x20000074

0800b314 <sbrk_aligned>:
 800b314:	b570      	push	{r4, r5, r6, lr}
 800b316:	4e0e      	ldr	r6, [pc, #56]	; (800b350 <sbrk_aligned+0x3c>)
 800b318:	460c      	mov	r4, r1
 800b31a:	6831      	ldr	r1, [r6, #0]
 800b31c:	4605      	mov	r5, r0
 800b31e:	b911      	cbnz	r1, 800b326 <sbrk_aligned+0x12>
 800b320:	f002 f878 	bl	800d414 <_sbrk_r>
 800b324:	6030      	str	r0, [r6, #0]
 800b326:	4621      	mov	r1, r4
 800b328:	4628      	mov	r0, r5
 800b32a:	f002 f873 	bl	800d414 <_sbrk_r>
 800b32e:	1c43      	adds	r3, r0, #1
 800b330:	d00a      	beq.n	800b348 <sbrk_aligned+0x34>
 800b332:	1cc4      	adds	r4, r0, #3
 800b334:	f024 0403 	bic.w	r4, r4, #3
 800b338:	42a0      	cmp	r0, r4
 800b33a:	d007      	beq.n	800b34c <sbrk_aligned+0x38>
 800b33c:	1a21      	subs	r1, r4, r0
 800b33e:	4628      	mov	r0, r5
 800b340:	f002 f868 	bl	800d414 <_sbrk_r>
 800b344:	3001      	adds	r0, #1
 800b346:	d101      	bne.n	800b34c <sbrk_aligned+0x38>
 800b348:	f04f 34ff 	mov.w	r4, #4294967295
 800b34c:	4620      	mov	r0, r4
 800b34e:	bd70      	pop	{r4, r5, r6, pc}
 800b350:	200010ac 	.word	0x200010ac

0800b354 <_malloc_r>:
 800b354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b358:	1ccd      	adds	r5, r1, #3
 800b35a:	f025 0503 	bic.w	r5, r5, #3
 800b35e:	3508      	adds	r5, #8
 800b360:	2d0c      	cmp	r5, #12
 800b362:	bf38      	it	cc
 800b364:	250c      	movcc	r5, #12
 800b366:	2d00      	cmp	r5, #0
 800b368:	4607      	mov	r7, r0
 800b36a:	db01      	blt.n	800b370 <_malloc_r+0x1c>
 800b36c:	42a9      	cmp	r1, r5
 800b36e:	d905      	bls.n	800b37c <_malloc_r+0x28>
 800b370:	230c      	movs	r3, #12
 800b372:	603b      	str	r3, [r7, #0]
 800b374:	2600      	movs	r6, #0
 800b376:	4630      	mov	r0, r6
 800b378:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b37c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b450 <_malloc_r+0xfc>
 800b380:	f000 f868 	bl	800b454 <__malloc_lock>
 800b384:	f8d8 3000 	ldr.w	r3, [r8]
 800b388:	461c      	mov	r4, r3
 800b38a:	bb5c      	cbnz	r4, 800b3e4 <_malloc_r+0x90>
 800b38c:	4629      	mov	r1, r5
 800b38e:	4638      	mov	r0, r7
 800b390:	f7ff ffc0 	bl	800b314 <sbrk_aligned>
 800b394:	1c43      	adds	r3, r0, #1
 800b396:	4604      	mov	r4, r0
 800b398:	d155      	bne.n	800b446 <_malloc_r+0xf2>
 800b39a:	f8d8 4000 	ldr.w	r4, [r8]
 800b39e:	4626      	mov	r6, r4
 800b3a0:	2e00      	cmp	r6, #0
 800b3a2:	d145      	bne.n	800b430 <_malloc_r+0xdc>
 800b3a4:	2c00      	cmp	r4, #0
 800b3a6:	d048      	beq.n	800b43a <_malloc_r+0xe6>
 800b3a8:	6823      	ldr	r3, [r4, #0]
 800b3aa:	4631      	mov	r1, r6
 800b3ac:	4638      	mov	r0, r7
 800b3ae:	eb04 0903 	add.w	r9, r4, r3
 800b3b2:	f002 f82f 	bl	800d414 <_sbrk_r>
 800b3b6:	4581      	cmp	r9, r0
 800b3b8:	d13f      	bne.n	800b43a <_malloc_r+0xe6>
 800b3ba:	6821      	ldr	r1, [r4, #0]
 800b3bc:	1a6d      	subs	r5, r5, r1
 800b3be:	4629      	mov	r1, r5
 800b3c0:	4638      	mov	r0, r7
 800b3c2:	f7ff ffa7 	bl	800b314 <sbrk_aligned>
 800b3c6:	3001      	adds	r0, #1
 800b3c8:	d037      	beq.n	800b43a <_malloc_r+0xe6>
 800b3ca:	6823      	ldr	r3, [r4, #0]
 800b3cc:	442b      	add	r3, r5
 800b3ce:	6023      	str	r3, [r4, #0]
 800b3d0:	f8d8 3000 	ldr.w	r3, [r8]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d038      	beq.n	800b44a <_malloc_r+0xf6>
 800b3d8:	685a      	ldr	r2, [r3, #4]
 800b3da:	42a2      	cmp	r2, r4
 800b3dc:	d12b      	bne.n	800b436 <_malloc_r+0xe2>
 800b3de:	2200      	movs	r2, #0
 800b3e0:	605a      	str	r2, [r3, #4]
 800b3e2:	e00f      	b.n	800b404 <_malloc_r+0xb0>
 800b3e4:	6822      	ldr	r2, [r4, #0]
 800b3e6:	1b52      	subs	r2, r2, r5
 800b3e8:	d41f      	bmi.n	800b42a <_malloc_r+0xd6>
 800b3ea:	2a0b      	cmp	r2, #11
 800b3ec:	d917      	bls.n	800b41e <_malloc_r+0xca>
 800b3ee:	1961      	adds	r1, r4, r5
 800b3f0:	42a3      	cmp	r3, r4
 800b3f2:	6025      	str	r5, [r4, #0]
 800b3f4:	bf18      	it	ne
 800b3f6:	6059      	strne	r1, [r3, #4]
 800b3f8:	6863      	ldr	r3, [r4, #4]
 800b3fa:	bf08      	it	eq
 800b3fc:	f8c8 1000 	streq.w	r1, [r8]
 800b400:	5162      	str	r2, [r4, r5]
 800b402:	604b      	str	r3, [r1, #4]
 800b404:	4638      	mov	r0, r7
 800b406:	f104 060b 	add.w	r6, r4, #11
 800b40a:	f000 f829 	bl	800b460 <__malloc_unlock>
 800b40e:	f026 0607 	bic.w	r6, r6, #7
 800b412:	1d23      	adds	r3, r4, #4
 800b414:	1af2      	subs	r2, r6, r3
 800b416:	d0ae      	beq.n	800b376 <_malloc_r+0x22>
 800b418:	1b9b      	subs	r3, r3, r6
 800b41a:	50a3      	str	r3, [r4, r2]
 800b41c:	e7ab      	b.n	800b376 <_malloc_r+0x22>
 800b41e:	42a3      	cmp	r3, r4
 800b420:	6862      	ldr	r2, [r4, #4]
 800b422:	d1dd      	bne.n	800b3e0 <_malloc_r+0x8c>
 800b424:	f8c8 2000 	str.w	r2, [r8]
 800b428:	e7ec      	b.n	800b404 <_malloc_r+0xb0>
 800b42a:	4623      	mov	r3, r4
 800b42c:	6864      	ldr	r4, [r4, #4]
 800b42e:	e7ac      	b.n	800b38a <_malloc_r+0x36>
 800b430:	4634      	mov	r4, r6
 800b432:	6876      	ldr	r6, [r6, #4]
 800b434:	e7b4      	b.n	800b3a0 <_malloc_r+0x4c>
 800b436:	4613      	mov	r3, r2
 800b438:	e7cc      	b.n	800b3d4 <_malloc_r+0x80>
 800b43a:	230c      	movs	r3, #12
 800b43c:	603b      	str	r3, [r7, #0]
 800b43e:	4638      	mov	r0, r7
 800b440:	f000 f80e 	bl	800b460 <__malloc_unlock>
 800b444:	e797      	b.n	800b376 <_malloc_r+0x22>
 800b446:	6025      	str	r5, [r4, #0]
 800b448:	e7dc      	b.n	800b404 <_malloc_r+0xb0>
 800b44a:	605b      	str	r3, [r3, #4]
 800b44c:	deff      	udf	#255	; 0xff
 800b44e:	bf00      	nop
 800b450:	200010a8 	.word	0x200010a8

0800b454 <__malloc_lock>:
 800b454:	4801      	ldr	r0, [pc, #4]	; (800b45c <__malloc_lock+0x8>)
 800b456:	f7ff b884 	b.w	800a562 <__retarget_lock_acquire_recursive>
 800b45a:	bf00      	nop
 800b45c:	200010a4 	.word	0x200010a4

0800b460 <__malloc_unlock>:
 800b460:	4801      	ldr	r0, [pc, #4]	; (800b468 <__malloc_unlock+0x8>)
 800b462:	f7ff b87f 	b.w	800a564 <__retarget_lock_release_recursive>
 800b466:	bf00      	nop
 800b468:	200010a4 	.word	0x200010a4

0800b46c <_Balloc>:
 800b46c:	b570      	push	{r4, r5, r6, lr}
 800b46e:	69c6      	ldr	r6, [r0, #28]
 800b470:	4604      	mov	r4, r0
 800b472:	460d      	mov	r5, r1
 800b474:	b976      	cbnz	r6, 800b494 <_Balloc+0x28>
 800b476:	2010      	movs	r0, #16
 800b478:	f7ff ff44 	bl	800b304 <malloc>
 800b47c:	4602      	mov	r2, r0
 800b47e:	61e0      	str	r0, [r4, #28]
 800b480:	b920      	cbnz	r0, 800b48c <_Balloc+0x20>
 800b482:	4b18      	ldr	r3, [pc, #96]	; (800b4e4 <_Balloc+0x78>)
 800b484:	4818      	ldr	r0, [pc, #96]	; (800b4e8 <_Balloc+0x7c>)
 800b486:	216b      	movs	r1, #107	; 0x6b
 800b488:	f001 ffea 	bl	800d460 <__assert_func>
 800b48c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b490:	6006      	str	r6, [r0, #0]
 800b492:	60c6      	str	r6, [r0, #12]
 800b494:	69e6      	ldr	r6, [r4, #28]
 800b496:	68f3      	ldr	r3, [r6, #12]
 800b498:	b183      	cbz	r3, 800b4bc <_Balloc+0x50>
 800b49a:	69e3      	ldr	r3, [r4, #28]
 800b49c:	68db      	ldr	r3, [r3, #12]
 800b49e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b4a2:	b9b8      	cbnz	r0, 800b4d4 <_Balloc+0x68>
 800b4a4:	2101      	movs	r1, #1
 800b4a6:	fa01 f605 	lsl.w	r6, r1, r5
 800b4aa:	1d72      	adds	r2, r6, #5
 800b4ac:	0092      	lsls	r2, r2, #2
 800b4ae:	4620      	mov	r0, r4
 800b4b0:	f001 fff4 	bl	800d49c <_calloc_r>
 800b4b4:	b160      	cbz	r0, 800b4d0 <_Balloc+0x64>
 800b4b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b4ba:	e00e      	b.n	800b4da <_Balloc+0x6e>
 800b4bc:	2221      	movs	r2, #33	; 0x21
 800b4be:	2104      	movs	r1, #4
 800b4c0:	4620      	mov	r0, r4
 800b4c2:	f001 ffeb 	bl	800d49c <_calloc_r>
 800b4c6:	69e3      	ldr	r3, [r4, #28]
 800b4c8:	60f0      	str	r0, [r6, #12]
 800b4ca:	68db      	ldr	r3, [r3, #12]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d1e4      	bne.n	800b49a <_Balloc+0x2e>
 800b4d0:	2000      	movs	r0, #0
 800b4d2:	bd70      	pop	{r4, r5, r6, pc}
 800b4d4:	6802      	ldr	r2, [r0, #0]
 800b4d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b4da:	2300      	movs	r3, #0
 800b4dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b4e0:	e7f7      	b.n	800b4d2 <_Balloc+0x66>
 800b4e2:	bf00      	nop
 800b4e4:	0800dd7a 	.word	0x0800dd7a
 800b4e8:	0800ddfa 	.word	0x0800ddfa

0800b4ec <_Bfree>:
 800b4ec:	b570      	push	{r4, r5, r6, lr}
 800b4ee:	69c6      	ldr	r6, [r0, #28]
 800b4f0:	4605      	mov	r5, r0
 800b4f2:	460c      	mov	r4, r1
 800b4f4:	b976      	cbnz	r6, 800b514 <_Bfree+0x28>
 800b4f6:	2010      	movs	r0, #16
 800b4f8:	f7ff ff04 	bl	800b304 <malloc>
 800b4fc:	4602      	mov	r2, r0
 800b4fe:	61e8      	str	r0, [r5, #28]
 800b500:	b920      	cbnz	r0, 800b50c <_Bfree+0x20>
 800b502:	4b09      	ldr	r3, [pc, #36]	; (800b528 <_Bfree+0x3c>)
 800b504:	4809      	ldr	r0, [pc, #36]	; (800b52c <_Bfree+0x40>)
 800b506:	218f      	movs	r1, #143	; 0x8f
 800b508:	f001 ffaa 	bl	800d460 <__assert_func>
 800b50c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b510:	6006      	str	r6, [r0, #0]
 800b512:	60c6      	str	r6, [r0, #12]
 800b514:	b13c      	cbz	r4, 800b526 <_Bfree+0x3a>
 800b516:	69eb      	ldr	r3, [r5, #28]
 800b518:	6862      	ldr	r2, [r4, #4]
 800b51a:	68db      	ldr	r3, [r3, #12]
 800b51c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b520:	6021      	str	r1, [r4, #0]
 800b522:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b526:	bd70      	pop	{r4, r5, r6, pc}
 800b528:	0800dd7a 	.word	0x0800dd7a
 800b52c:	0800ddfa 	.word	0x0800ddfa

0800b530 <__multadd>:
 800b530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b534:	690d      	ldr	r5, [r1, #16]
 800b536:	4607      	mov	r7, r0
 800b538:	460c      	mov	r4, r1
 800b53a:	461e      	mov	r6, r3
 800b53c:	f101 0c14 	add.w	ip, r1, #20
 800b540:	2000      	movs	r0, #0
 800b542:	f8dc 3000 	ldr.w	r3, [ip]
 800b546:	b299      	uxth	r1, r3
 800b548:	fb02 6101 	mla	r1, r2, r1, r6
 800b54c:	0c1e      	lsrs	r6, r3, #16
 800b54e:	0c0b      	lsrs	r3, r1, #16
 800b550:	fb02 3306 	mla	r3, r2, r6, r3
 800b554:	b289      	uxth	r1, r1
 800b556:	3001      	adds	r0, #1
 800b558:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b55c:	4285      	cmp	r5, r0
 800b55e:	f84c 1b04 	str.w	r1, [ip], #4
 800b562:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b566:	dcec      	bgt.n	800b542 <__multadd+0x12>
 800b568:	b30e      	cbz	r6, 800b5ae <__multadd+0x7e>
 800b56a:	68a3      	ldr	r3, [r4, #8]
 800b56c:	42ab      	cmp	r3, r5
 800b56e:	dc19      	bgt.n	800b5a4 <__multadd+0x74>
 800b570:	6861      	ldr	r1, [r4, #4]
 800b572:	4638      	mov	r0, r7
 800b574:	3101      	adds	r1, #1
 800b576:	f7ff ff79 	bl	800b46c <_Balloc>
 800b57a:	4680      	mov	r8, r0
 800b57c:	b928      	cbnz	r0, 800b58a <__multadd+0x5a>
 800b57e:	4602      	mov	r2, r0
 800b580:	4b0c      	ldr	r3, [pc, #48]	; (800b5b4 <__multadd+0x84>)
 800b582:	480d      	ldr	r0, [pc, #52]	; (800b5b8 <__multadd+0x88>)
 800b584:	21ba      	movs	r1, #186	; 0xba
 800b586:	f001 ff6b 	bl	800d460 <__assert_func>
 800b58a:	6922      	ldr	r2, [r4, #16]
 800b58c:	3202      	adds	r2, #2
 800b58e:	f104 010c 	add.w	r1, r4, #12
 800b592:	0092      	lsls	r2, r2, #2
 800b594:	300c      	adds	r0, #12
 800b596:	f001 ff4d 	bl	800d434 <memcpy>
 800b59a:	4621      	mov	r1, r4
 800b59c:	4638      	mov	r0, r7
 800b59e:	f7ff ffa5 	bl	800b4ec <_Bfree>
 800b5a2:	4644      	mov	r4, r8
 800b5a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b5a8:	3501      	adds	r5, #1
 800b5aa:	615e      	str	r6, [r3, #20]
 800b5ac:	6125      	str	r5, [r4, #16]
 800b5ae:	4620      	mov	r0, r4
 800b5b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5b4:	0800dde9 	.word	0x0800dde9
 800b5b8:	0800ddfa 	.word	0x0800ddfa

0800b5bc <__s2b>:
 800b5bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5c0:	460c      	mov	r4, r1
 800b5c2:	4615      	mov	r5, r2
 800b5c4:	461f      	mov	r7, r3
 800b5c6:	2209      	movs	r2, #9
 800b5c8:	3308      	adds	r3, #8
 800b5ca:	4606      	mov	r6, r0
 800b5cc:	fb93 f3f2 	sdiv	r3, r3, r2
 800b5d0:	2100      	movs	r1, #0
 800b5d2:	2201      	movs	r2, #1
 800b5d4:	429a      	cmp	r2, r3
 800b5d6:	db09      	blt.n	800b5ec <__s2b+0x30>
 800b5d8:	4630      	mov	r0, r6
 800b5da:	f7ff ff47 	bl	800b46c <_Balloc>
 800b5de:	b940      	cbnz	r0, 800b5f2 <__s2b+0x36>
 800b5e0:	4602      	mov	r2, r0
 800b5e2:	4b19      	ldr	r3, [pc, #100]	; (800b648 <__s2b+0x8c>)
 800b5e4:	4819      	ldr	r0, [pc, #100]	; (800b64c <__s2b+0x90>)
 800b5e6:	21d3      	movs	r1, #211	; 0xd3
 800b5e8:	f001 ff3a 	bl	800d460 <__assert_func>
 800b5ec:	0052      	lsls	r2, r2, #1
 800b5ee:	3101      	adds	r1, #1
 800b5f0:	e7f0      	b.n	800b5d4 <__s2b+0x18>
 800b5f2:	9b08      	ldr	r3, [sp, #32]
 800b5f4:	6143      	str	r3, [r0, #20]
 800b5f6:	2d09      	cmp	r5, #9
 800b5f8:	f04f 0301 	mov.w	r3, #1
 800b5fc:	6103      	str	r3, [r0, #16]
 800b5fe:	dd16      	ble.n	800b62e <__s2b+0x72>
 800b600:	f104 0909 	add.w	r9, r4, #9
 800b604:	46c8      	mov	r8, r9
 800b606:	442c      	add	r4, r5
 800b608:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b60c:	4601      	mov	r1, r0
 800b60e:	3b30      	subs	r3, #48	; 0x30
 800b610:	220a      	movs	r2, #10
 800b612:	4630      	mov	r0, r6
 800b614:	f7ff ff8c 	bl	800b530 <__multadd>
 800b618:	45a0      	cmp	r8, r4
 800b61a:	d1f5      	bne.n	800b608 <__s2b+0x4c>
 800b61c:	f1a5 0408 	sub.w	r4, r5, #8
 800b620:	444c      	add	r4, r9
 800b622:	1b2d      	subs	r5, r5, r4
 800b624:	1963      	adds	r3, r4, r5
 800b626:	42bb      	cmp	r3, r7
 800b628:	db04      	blt.n	800b634 <__s2b+0x78>
 800b62a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b62e:	340a      	adds	r4, #10
 800b630:	2509      	movs	r5, #9
 800b632:	e7f6      	b.n	800b622 <__s2b+0x66>
 800b634:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b638:	4601      	mov	r1, r0
 800b63a:	3b30      	subs	r3, #48	; 0x30
 800b63c:	220a      	movs	r2, #10
 800b63e:	4630      	mov	r0, r6
 800b640:	f7ff ff76 	bl	800b530 <__multadd>
 800b644:	e7ee      	b.n	800b624 <__s2b+0x68>
 800b646:	bf00      	nop
 800b648:	0800dde9 	.word	0x0800dde9
 800b64c:	0800ddfa 	.word	0x0800ddfa

0800b650 <__hi0bits>:
 800b650:	0c03      	lsrs	r3, r0, #16
 800b652:	041b      	lsls	r3, r3, #16
 800b654:	b9d3      	cbnz	r3, 800b68c <__hi0bits+0x3c>
 800b656:	0400      	lsls	r0, r0, #16
 800b658:	2310      	movs	r3, #16
 800b65a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b65e:	bf04      	itt	eq
 800b660:	0200      	lsleq	r0, r0, #8
 800b662:	3308      	addeq	r3, #8
 800b664:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b668:	bf04      	itt	eq
 800b66a:	0100      	lsleq	r0, r0, #4
 800b66c:	3304      	addeq	r3, #4
 800b66e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b672:	bf04      	itt	eq
 800b674:	0080      	lsleq	r0, r0, #2
 800b676:	3302      	addeq	r3, #2
 800b678:	2800      	cmp	r0, #0
 800b67a:	db05      	blt.n	800b688 <__hi0bits+0x38>
 800b67c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b680:	f103 0301 	add.w	r3, r3, #1
 800b684:	bf08      	it	eq
 800b686:	2320      	moveq	r3, #32
 800b688:	4618      	mov	r0, r3
 800b68a:	4770      	bx	lr
 800b68c:	2300      	movs	r3, #0
 800b68e:	e7e4      	b.n	800b65a <__hi0bits+0xa>

0800b690 <__lo0bits>:
 800b690:	6803      	ldr	r3, [r0, #0]
 800b692:	f013 0207 	ands.w	r2, r3, #7
 800b696:	d00c      	beq.n	800b6b2 <__lo0bits+0x22>
 800b698:	07d9      	lsls	r1, r3, #31
 800b69a:	d422      	bmi.n	800b6e2 <__lo0bits+0x52>
 800b69c:	079a      	lsls	r2, r3, #30
 800b69e:	bf49      	itett	mi
 800b6a0:	085b      	lsrmi	r3, r3, #1
 800b6a2:	089b      	lsrpl	r3, r3, #2
 800b6a4:	6003      	strmi	r3, [r0, #0]
 800b6a6:	2201      	movmi	r2, #1
 800b6a8:	bf5c      	itt	pl
 800b6aa:	6003      	strpl	r3, [r0, #0]
 800b6ac:	2202      	movpl	r2, #2
 800b6ae:	4610      	mov	r0, r2
 800b6b0:	4770      	bx	lr
 800b6b2:	b299      	uxth	r1, r3
 800b6b4:	b909      	cbnz	r1, 800b6ba <__lo0bits+0x2a>
 800b6b6:	0c1b      	lsrs	r3, r3, #16
 800b6b8:	2210      	movs	r2, #16
 800b6ba:	b2d9      	uxtb	r1, r3
 800b6bc:	b909      	cbnz	r1, 800b6c2 <__lo0bits+0x32>
 800b6be:	3208      	adds	r2, #8
 800b6c0:	0a1b      	lsrs	r3, r3, #8
 800b6c2:	0719      	lsls	r1, r3, #28
 800b6c4:	bf04      	itt	eq
 800b6c6:	091b      	lsreq	r3, r3, #4
 800b6c8:	3204      	addeq	r2, #4
 800b6ca:	0799      	lsls	r1, r3, #30
 800b6cc:	bf04      	itt	eq
 800b6ce:	089b      	lsreq	r3, r3, #2
 800b6d0:	3202      	addeq	r2, #2
 800b6d2:	07d9      	lsls	r1, r3, #31
 800b6d4:	d403      	bmi.n	800b6de <__lo0bits+0x4e>
 800b6d6:	085b      	lsrs	r3, r3, #1
 800b6d8:	f102 0201 	add.w	r2, r2, #1
 800b6dc:	d003      	beq.n	800b6e6 <__lo0bits+0x56>
 800b6de:	6003      	str	r3, [r0, #0]
 800b6e0:	e7e5      	b.n	800b6ae <__lo0bits+0x1e>
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	e7e3      	b.n	800b6ae <__lo0bits+0x1e>
 800b6e6:	2220      	movs	r2, #32
 800b6e8:	e7e1      	b.n	800b6ae <__lo0bits+0x1e>
	...

0800b6ec <__i2b>:
 800b6ec:	b510      	push	{r4, lr}
 800b6ee:	460c      	mov	r4, r1
 800b6f0:	2101      	movs	r1, #1
 800b6f2:	f7ff febb 	bl	800b46c <_Balloc>
 800b6f6:	4602      	mov	r2, r0
 800b6f8:	b928      	cbnz	r0, 800b706 <__i2b+0x1a>
 800b6fa:	4b05      	ldr	r3, [pc, #20]	; (800b710 <__i2b+0x24>)
 800b6fc:	4805      	ldr	r0, [pc, #20]	; (800b714 <__i2b+0x28>)
 800b6fe:	f240 1145 	movw	r1, #325	; 0x145
 800b702:	f001 fead 	bl	800d460 <__assert_func>
 800b706:	2301      	movs	r3, #1
 800b708:	6144      	str	r4, [r0, #20]
 800b70a:	6103      	str	r3, [r0, #16]
 800b70c:	bd10      	pop	{r4, pc}
 800b70e:	bf00      	nop
 800b710:	0800dde9 	.word	0x0800dde9
 800b714:	0800ddfa 	.word	0x0800ddfa

0800b718 <__multiply>:
 800b718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b71c:	4691      	mov	r9, r2
 800b71e:	690a      	ldr	r2, [r1, #16]
 800b720:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b724:	429a      	cmp	r2, r3
 800b726:	bfb8      	it	lt
 800b728:	460b      	movlt	r3, r1
 800b72a:	460c      	mov	r4, r1
 800b72c:	bfbc      	itt	lt
 800b72e:	464c      	movlt	r4, r9
 800b730:	4699      	movlt	r9, r3
 800b732:	6927      	ldr	r7, [r4, #16]
 800b734:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b738:	68a3      	ldr	r3, [r4, #8]
 800b73a:	6861      	ldr	r1, [r4, #4]
 800b73c:	eb07 060a 	add.w	r6, r7, sl
 800b740:	42b3      	cmp	r3, r6
 800b742:	b085      	sub	sp, #20
 800b744:	bfb8      	it	lt
 800b746:	3101      	addlt	r1, #1
 800b748:	f7ff fe90 	bl	800b46c <_Balloc>
 800b74c:	b930      	cbnz	r0, 800b75c <__multiply+0x44>
 800b74e:	4602      	mov	r2, r0
 800b750:	4b44      	ldr	r3, [pc, #272]	; (800b864 <__multiply+0x14c>)
 800b752:	4845      	ldr	r0, [pc, #276]	; (800b868 <__multiply+0x150>)
 800b754:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b758:	f001 fe82 	bl	800d460 <__assert_func>
 800b75c:	f100 0514 	add.w	r5, r0, #20
 800b760:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b764:	462b      	mov	r3, r5
 800b766:	2200      	movs	r2, #0
 800b768:	4543      	cmp	r3, r8
 800b76a:	d321      	bcc.n	800b7b0 <__multiply+0x98>
 800b76c:	f104 0314 	add.w	r3, r4, #20
 800b770:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b774:	f109 0314 	add.w	r3, r9, #20
 800b778:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b77c:	9202      	str	r2, [sp, #8]
 800b77e:	1b3a      	subs	r2, r7, r4
 800b780:	3a15      	subs	r2, #21
 800b782:	f022 0203 	bic.w	r2, r2, #3
 800b786:	3204      	adds	r2, #4
 800b788:	f104 0115 	add.w	r1, r4, #21
 800b78c:	428f      	cmp	r7, r1
 800b78e:	bf38      	it	cc
 800b790:	2204      	movcc	r2, #4
 800b792:	9201      	str	r2, [sp, #4]
 800b794:	9a02      	ldr	r2, [sp, #8]
 800b796:	9303      	str	r3, [sp, #12]
 800b798:	429a      	cmp	r2, r3
 800b79a:	d80c      	bhi.n	800b7b6 <__multiply+0x9e>
 800b79c:	2e00      	cmp	r6, #0
 800b79e:	dd03      	ble.n	800b7a8 <__multiply+0x90>
 800b7a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d05b      	beq.n	800b860 <__multiply+0x148>
 800b7a8:	6106      	str	r6, [r0, #16]
 800b7aa:	b005      	add	sp, #20
 800b7ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7b0:	f843 2b04 	str.w	r2, [r3], #4
 800b7b4:	e7d8      	b.n	800b768 <__multiply+0x50>
 800b7b6:	f8b3 a000 	ldrh.w	sl, [r3]
 800b7ba:	f1ba 0f00 	cmp.w	sl, #0
 800b7be:	d024      	beq.n	800b80a <__multiply+0xf2>
 800b7c0:	f104 0e14 	add.w	lr, r4, #20
 800b7c4:	46a9      	mov	r9, r5
 800b7c6:	f04f 0c00 	mov.w	ip, #0
 800b7ca:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b7ce:	f8d9 1000 	ldr.w	r1, [r9]
 800b7d2:	fa1f fb82 	uxth.w	fp, r2
 800b7d6:	b289      	uxth	r1, r1
 800b7d8:	fb0a 110b 	mla	r1, sl, fp, r1
 800b7dc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b7e0:	f8d9 2000 	ldr.w	r2, [r9]
 800b7e4:	4461      	add	r1, ip
 800b7e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b7ea:	fb0a c20b 	mla	r2, sl, fp, ip
 800b7ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b7f2:	b289      	uxth	r1, r1
 800b7f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b7f8:	4577      	cmp	r7, lr
 800b7fa:	f849 1b04 	str.w	r1, [r9], #4
 800b7fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b802:	d8e2      	bhi.n	800b7ca <__multiply+0xb2>
 800b804:	9a01      	ldr	r2, [sp, #4]
 800b806:	f845 c002 	str.w	ip, [r5, r2]
 800b80a:	9a03      	ldr	r2, [sp, #12]
 800b80c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b810:	3304      	adds	r3, #4
 800b812:	f1b9 0f00 	cmp.w	r9, #0
 800b816:	d021      	beq.n	800b85c <__multiply+0x144>
 800b818:	6829      	ldr	r1, [r5, #0]
 800b81a:	f104 0c14 	add.w	ip, r4, #20
 800b81e:	46ae      	mov	lr, r5
 800b820:	f04f 0a00 	mov.w	sl, #0
 800b824:	f8bc b000 	ldrh.w	fp, [ip]
 800b828:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b82c:	fb09 220b 	mla	r2, r9, fp, r2
 800b830:	4452      	add	r2, sl
 800b832:	b289      	uxth	r1, r1
 800b834:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b838:	f84e 1b04 	str.w	r1, [lr], #4
 800b83c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b840:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b844:	f8be 1000 	ldrh.w	r1, [lr]
 800b848:	fb09 110a 	mla	r1, r9, sl, r1
 800b84c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b850:	4567      	cmp	r7, ip
 800b852:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b856:	d8e5      	bhi.n	800b824 <__multiply+0x10c>
 800b858:	9a01      	ldr	r2, [sp, #4]
 800b85a:	50a9      	str	r1, [r5, r2]
 800b85c:	3504      	adds	r5, #4
 800b85e:	e799      	b.n	800b794 <__multiply+0x7c>
 800b860:	3e01      	subs	r6, #1
 800b862:	e79b      	b.n	800b79c <__multiply+0x84>
 800b864:	0800dde9 	.word	0x0800dde9
 800b868:	0800ddfa 	.word	0x0800ddfa

0800b86c <__pow5mult>:
 800b86c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b870:	4615      	mov	r5, r2
 800b872:	f012 0203 	ands.w	r2, r2, #3
 800b876:	4606      	mov	r6, r0
 800b878:	460f      	mov	r7, r1
 800b87a:	d007      	beq.n	800b88c <__pow5mult+0x20>
 800b87c:	4c25      	ldr	r4, [pc, #148]	; (800b914 <__pow5mult+0xa8>)
 800b87e:	3a01      	subs	r2, #1
 800b880:	2300      	movs	r3, #0
 800b882:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b886:	f7ff fe53 	bl	800b530 <__multadd>
 800b88a:	4607      	mov	r7, r0
 800b88c:	10ad      	asrs	r5, r5, #2
 800b88e:	d03d      	beq.n	800b90c <__pow5mult+0xa0>
 800b890:	69f4      	ldr	r4, [r6, #28]
 800b892:	b97c      	cbnz	r4, 800b8b4 <__pow5mult+0x48>
 800b894:	2010      	movs	r0, #16
 800b896:	f7ff fd35 	bl	800b304 <malloc>
 800b89a:	4602      	mov	r2, r0
 800b89c:	61f0      	str	r0, [r6, #28]
 800b89e:	b928      	cbnz	r0, 800b8ac <__pow5mult+0x40>
 800b8a0:	4b1d      	ldr	r3, [pc, #116]	; (800b918 <__pow5mult+0xac>)
 800b8a2:	481e      	ldr	r0, [pc, #120]	; (800b91c <__pow5mult+0xb0>)
 800b8a4:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b8a8:	f001 fdda 	bl	800d460 <__assert_func>
 800b8ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b8b0:	6004      	str	r4, [r0, #0]
 800b8b2:	60c4      	str	r4, [r0, #12]
 800b8b4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b8b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b8bc:	b94c      	cbnz	r4, 800b8d2 <__pow5mult+0x66>
 800b8be:	f240 2171 	movw	r1, #625	; 0x271
 800b8c2:	4630      	mov	r0, r6
 800b8c4:	f7ff ff12 	bl	800b6ec <__i2b>
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	f8c8 0008 	str.w	r0, [r8, #8]
 800b8ce:	4604      	mov	r4, r0
 800b8d0:	6003      	str	r3, [r0, #0]
 800b8d2:	f04f 0900 	mov.w	r9, #0
 800b8d6:	07eb      	lsls	r3, r5, #31
 800b8d8:	d50a      	bpl.n	800b8f0 <__pow5mult+0x84>
 800b8da:	4639      	mov	r1, r7
 800b8dc:	4622      	mov	r2, r4
 800b8de:	4630      	mov	r0, r6
 800b8e0:	f7ff ff1a 	bl	800b718 <__multiply>
 800b8e4:	4639      	mov	r1, r7
 800b8e6:	4680      	mov	r8, r0
 800b8e8:	4630      	mov	r0, r6
 800b8ea:	f7ff fdff 	bl	800b4ec <_Bfree>
 800b8ee:	4647      	mov	r7, r8
 800b8f0:	106d      	asrs	r5, r5, #1
 800b8f2:	d00b      	beq.n	800b90c <__pow5mult+0xa0>
 800b8f4:	6820      	ldr	r0, [r4, #0]
 800b8f6:	b938      	cbnz	r0, 800b908 <__pow5mult+0x9c>
 800b8f8:	4622      	mov	r2, r4
 800b8fa:	4621      	mov	r1, r4
 800b8fc:	4630      	mov	r0, r6
 800b8fe:	f7ff ff0b 	bl	800b718 <__multiply>
 800b902:	6020      	str	r0, [r4, #0]
 800b904:	f8c0 9000 	str.w	r9, [r0]
 800b908:	4604      	mov	r4, r0
 800b90a:	e7e4      	b.n	800b8d6 <__pow5mult+0x6a>
 800b90c:	4638      	mov	r0, r7
 800b90e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b912:	bf00      	nop
 800b914:	0800df48 	.word	0x0800df48
 800b918:	0800dd7a 	.word	0x0800dd7a
 800b91c:	0800ddfa 	.word	0x0800ddfa

0800b920 <__lshift>:
 800b920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b924:	460c      	mov	r4, r1
 800b926:	6849      	ldr	r1, [r1, #4]
 800b928:	6923      	ldr	r3, [r4, #16]
 800b92a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b92e:	68a3      	ldr	r3, [r4, #8]
 800b930:	4607      	mov	r7, r0
 800b932:	4691      	mov	r9, r2
 800b934:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b938:	f108 0601 	add.w	r6, r8, #1
 800b93c:	42b3      	cmp	r3, r6
 800b93e:	db0b      	blt.n	800b958 <__lshift+0x38>
 800b940:	4638      	mov	r0, r7
 800b942:	f7ff fd93 	bl	800b46c <_Balloc>
 800b946:	4605      	mov	r5, r0
 800b948:	b948      	cbnz	r0, 800b95e <__lshift+0x3e>
 800b94a:	4602      	mov	r2, r0
 800b94c:	4b28      	ldr	r3, [pc, #160]	; (800b9f0 <__lshift+0xd0>)
 800b94e:	4829      	ldr	r0, [pc, #164]	; (800b9f4 <__lshift+0xd4>)
 800b950:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b954:	f001 fd84 	bl	800d460 <__assert_func>
 800b958:	3101      	adds	r1, #1
 800b95a:	005b      	lsls	r3, r3, #1
 800b95c:	e7ee      	b.n	800b93c <__lshift+0x1c>
 800b95e:	2300      	movs	r3, #0
 800b960:	f100 0114 	add.w	r1, r0, #20
 800b964:	f100 0210 	add.w	r2, r0, #16
 800b968:	4618      	mov	r0, r3
 800b96a:	4553      	cmp	r3, sl
 800b96c:	db33      	blt.n	800b9d6 <__lshift+0xb6>
 800b96e:	6920      	ldr	r0, [r4, #16]
 800b970:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b974:	f104 0314 	add.w	r3, r4, #20
 800b978:	f019 091f 	ands.w	r9, r9, #31
 800b97c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b980:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b984:	d02b      	beq.n	800b9de <__lshift+0xbe>
 800b986:	f1c9 0e20 	rsb	lr, r9, #32
 800b98a:	468a      	mov	sl, r1
 800b98c:	2200      	movs	r2, #0
 800b98e:	6818      	ldr	r0, [r3, #0]
 800b990:	fa00 f009 	lsl.w	r0, r0, r9
 800b994:	4310      	orrs	r0, r2
 800b996:	f84a 0b04 	str.w	r0, [sl], #4
 800b99a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b99e:	459c      	cmp	ip, r3
 800b9a0:	fa22 f20e 	lsr.w	r2, r2, lr
 800b9a4:	d8f3      	bhi.n	800b98e <__lshift+0x6e>
 800b9a6:	ebac 0304 	sub.w	r3, ip, r4
 800b9aa:	3b15      	subs	r3, #21
 800b9ac:	f023 0303 	bic.w	r3, r3, #3
 800b9b0:	3304      	adds	r3, #4
 800b9b2:	f104 0015 	add.w	r0, r4, #21
 800b9b6:	4584      	cmp	ip, r0
 800b9b8:	bf38      	it	cc
 800b9ba:	2304      	movcc	r3, #4
 800b9bc:	50ca      	str	r2, [r1, r3]
 800b9be:	b10a      	cbz	r2, 800b9c4 <__lshift+0xa4>
 800b9c0:	f108 0602 	add.w	r6, r8, #2
 800b9c4:	3e01      	subs	r6, #1
 800b9c6:	4638      	mov	r0, r7
 800b9c8:	612e      	str	r6, [r5, #16]
 800b9ca:	4621      	mov	r1, r4
 800b9cc:	f7ff fd8e 	bl	800b4ec <_Bfree>
 800b9d0:	4628      	mov	r0, r5
 800b9d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9d6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b9da:	3301      	adds	r3, #1
 800b9dc:	e7c5      	b.n	800b96a <__lshift+0x4a>
 800b9de:	3904      	subs	r1, #4
 800b9e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9e4:	f841 2f04 	str.w	r2, [r1, #4]!
 800b9e8:	459c      	cmp	ip, r3
 800b9ea:	d8f9      	bhi.n	800b9e0 <__lshift+0xc0>
 800b9ec:	e7ea      	b.n	800b9c4 <__lshift+0xa4>
 800b9ee:	bf00      	nop
 800b9f0:	0800dde9 	.word	0x0800dde9
 800b9f4:	0800ddfa 	.word	0x0800ddfa

0800b9f8 <__mcmp>:
 800b9f8:	b530      	push	{r4, r5, lr}
 800b9fa:	6902      	ldr	r2, [r0, #16]
 800b9fc:	690c      	ldr	r4, [r1, #16]
 800b9fe:	1b12      	subs	r2, r2, r4
 800ba00:	d10e      	bne.n	800ba20 <__mcmp+0x28>
 800ba02:	f100 0314 	add.w	r3, r0, #20
 800ba06:	3114      	adds	r1, #20
 800ba08:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ba0c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ba10:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ba14:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ba18:	42a5      	cmp	r5, r4
 800ba1a:	d003      	beq.n	800ba24 <__mcmp+0x2c>
 800ba1c:	d305      	bcc.n	800ba2a <__mcmp+0x32>
 800ba1e:	2201      	movs	r2, #1
 800ba20:	4610      	mov	r0, r2
 800ba22:	bd30      	pop	{r4, r5, pc}
 800ba24:	4283      	cmp	r3, r0
 800ba26:	d3f3      	bcc.n	800ba10 <__mcmp+0x18>
 800ba28:	e7fa      	b.n	800ba20 <__mcmp+0x28>
 800ba2a:	f04f 32ff 	mov.w	r2, #4294967295
 800ba2e:	e7f7      	b.n	800ba20 <__mcmp+0x28>

0800ba30 <__mdiff>:
 800ba30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba34:	460c      	mov	r4, r1
 800ba36:	4606      	mov	r6, r0
 800ba38:	4611      	mov	r1, r2
 800ba3a:	4620      	mov	r0, r4
 800ba3c:	4690      	mov	r8, r2
 800ba3e:	f7ff ffdb 	bl	800b9f8 <__mcmp>
 800ba42:	1e05      	subs	r5, r0, #0
 800ba44:	d110      	bne.n	800ba68 <__mdiff+0x38>
 800ba46:	4629      	mov	r1, r5
 800ba48:	4630      	mov	r0, r6
 800ba4a:	f7ff fd0f 	bl	800b46c <_Balloc>
 800ba4e:	b930      	cbnz	r0, 800ba5e <__mdiff+0x2e>
 800ba50:	4b3a      	ldr	r3, [pc, #232]	; (800bb3c <__mdiff+0x10c>)
 800ba52:	4602      	mov	r2, r0
 800ba54:	f240 2137 	movw	r1, #567	; 0x237
 800ba58:	4839      	ldr	r0, [pc, #228]	; (800bb40 <__mdiff+0x110>)
 800ba5a:	f001 fd01 	bl	800d460 <__assert_func>
 800ba5e:	2301      	movs	r3, #1
 800ba60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ba64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba68:	bfa4      	itt	ge
 800ba6a:	4643      	movge	r3, r8
 800ba6c:	46a0      	movge	r8, r4
 800ba6e:	4630      	mov	r0, r6
 800ba70:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ba74:	bfa6      	itte	ge
 800ba76:	461c      	movge	r4, r3
 800ba78:	2500      	movge	r5, #0
 800ba7a:	2501      	movlt	r5, #1
 800ba7c:	f7ff fcf6 	bl	800b46c <_Balloc>
 800ba80:	b920      	cbnz	r0, 800ba8c <__mdiff+0x5c>
 800ba82:	4b2e      	ldr	r3, [pc, #184]	; (800bb3c <__mdiff+0x10c>)
 800ba84:	4602      	mov	r2, r0
 800ba86:	f240 2145 	movw	r1, #581	; 0x245
 800ba8a:	e7e5      	b.n	800ba58 <__mdiff+0x28>
 800ba8c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ba90:	6926      	ldr	r6, [r4, #16]
 800ba92:	60c5      	str	r5, [r0, #12]
 800ba94:	f104 0914 	add.w	r9, r4, #20
 800ba98:	f108 0514 	add.w	r5, r8, #20
 800ba9c:	f100 0e14 	add.w	lr, r0, #20
 800baa0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800baa4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800baa8:	f108 0210 	add.w	r2, r8, #16
 800baac:	46f2      	mov	sl, lr
 800baae:	2100      	movs	r1, #0
 800bab0:	f859 3b04 	ldr.w	r3, [r9], #4
 800bab4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bab8:	fa11 f88b 	uxtah	r8, r1, fp
 800babc:	b299      	uxth	r1, r3
 800babe:	0c1b      	lsrs	r3, r3, #16
 800bac0:	eba8 0801 	sub.w	r8, r8, r1
 800bac4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bac8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bacc:	fa1f f888 	uxth.w	r8, r8
 800bad0:	1419      	asrs	r1, r3, #16
 800bad2:	454e      	cmp	r6, r9
 800bad4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bad8:	f84a 3b04 	str.w	r3, [sl], #4
 800badc:	d8e8      	bhi.n	800bab0 <__mdiff+0x80>
 800bade:	1b33      	subs	r3, r6, r4
 800bae0:	3b15      	subs	r3, #21
 800bae2:	f023 0303 	bic.w	r3, r3, #3
 800bae6:	3304      	adds	r3, #4
 800bae8:	3415      	adds	r4, #21
 800baea:	42a6      	cmp	r6, r4
 800baec:	bf38      	it	cc
 800baee:	2304      	movcc	r3, #4
 800baf0:	441d      	add	r5, r3
 800baf2:	4473      	add	r3, lr
 800baf4:	469e      	mov	lr, r3
 800baf6:	462e      	mov	r6, r5
 800baf8:	4566      	cmp	r6, ip
 800bafa:	d30e      	bcc.n	800bb1a <__mdiff+0xea>
 800bafc:	f10c 0203 	add.w	r2, ip, #3
 800bb00:	1b52      	subs	r2, r2, r5
 800bb02:	f022 0203 	bic.w	r2, r2, #3
 800bb06:	3d03      	subs	r5, #3
 800bb08:	45ac      	cmp	ip, r5
 800bb0a:	bf38      	it	cc
 800bb0c:	2200      	movcc	r2, #0
 800bb0e:	4413      	add	r3, r2
 800bb10:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bb14:	b17a      	cbz	r2, 800bb36 <__mdiff+0x106>
 800bb16:	6107      	str	r7, [r0, #16]
 800bb18:	e7a4      	b.n	800ba64 <__mdiff+0x34>
 800bb1a:	f856 8b04 	ldr.w	r8, [r6], #4
 800bb1e:	fa11 f288 	uxtah	r2, r1, r8
 800bb22:	1414      	asrs	r4, r2, #16
 800bb24:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bb28:	b292      	uxth	r2, r2
 800bb2a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bb2e:	f84e 2b04 	str.w	r2, [lr], #4
 800bb32:	1421      	asrs	r1, r4, #16
 800bb34:	e7e0      	b.n	800baf8 <__mdiff+0xc8>
 800bb36:	3f01      	subs	r7, #1
 800bb38:	e7ea      	b.n	800bb10 <__mdiff+0xe0>
 800bb3a:	bf00      	nop
 800bb3c:	0800dde9 	.word	0x0800dde9
 800bb40:	0800ddfa 	.word	0x0800ddfa

0800bb44 <__ulp>:
 800bb44:	b082      	sub	sp, #8
 800bb46:	ed8d 0b00 	vstr	d0, [sp]
 800bb4a:	9a01      	ldr	r2, [sp, #4]
 800bb4c:	4b0f      	ldr	r3, [pc, #60]	; (800bb8c <__ulp+0x48>)
 800bb4e:	4013      	ands	r3, r2
 800bb50:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	dc08      	bgt.n	800bb6a <__ulp+0x26>
 800bb58:	425b      	negs	r3, r3
 800bb5a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800bb5e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bb62:	da04      	bge.n	800bb6e <__ulp+0x2a>
 800bb64:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bb68:	4113      	asrs	r3, r2
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	e008      	b.n	800bb80 <__ulp+0x3c>
 800bb6e:	f1a2 0314 	sub.w	r3, r2, #20
 800bb72:	2b1e      	cmp	r3, #30
 800bb74:	bfda      	itte	le
 800bb76:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800bb7a:	40da      	lsrle	r2, r3
 800bb7c:	2201      	movgt	r2, #1
 800bb7e:	2300      	movs	r3, #0
 800bb80:	4619      	mov	r1, r3
 800bb82:	4610      	mov	r0, r2
 800bb84:	ec41 0b10 	vmov	d0, r0, r1
 800bb88:	b002      	add	sp, #8
 800bb8a:	4770      	bx	lr
 800bb8c:	7ff00000 	.word	0x7ff00000

0800bb90 <__b2d>:
 800bb90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb94:	6906      	ldr	r6, [r0, #16]
 800bb96:	f100 0814 	add.w	r8, r0, #20
 800bb9a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800bb9e:	1f37      	subs	r7, r6, #4
 800bba0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bba4:	4610      	mov	r0, r2
 800bba6:	f7ff fd53 	bl	800b650 <__hi0bits>
 800bbaa:	f1c0 0320 	rsb	r3, r0, #32
 800bbae:	280a      	cmp	r0, #10
 800bbb0:	600b      	str	r3, [r1, #0]
 800bbb2:	491b      	ldr	r1, [pc, #108]	; (800bc20 <__b2d+0x90>)
 800bbb4:	dc15      	bgt.n	800bbe2 <__b2d+0x52>
 800bbb6:	f1c0 0c0b 	rsb	ip, r0, #11
 800bbba:	fa22 f30c 	lsr.w	r3, r2, ip
 800bbbe:	45b8      	cmp	r8, r7
 800bbc0:	ea43 0501 	orr.w	r5, r3, r1
 800bbc4:	bf34      	ite	cc
 800bbc6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bbca:	2300      	movcs	r3, #0
 800bbcc:	3015      	adds	r0, #21
 800bbce:	fa02 f000 	lsl.w	r0, r2, r0
 800bbd2:	fa23 f30c 	lsr.w	r3, r3, ip
 800bbd6:	4303      	orrs	r3, r0
 800bbd8:	461c      	mov	r4, r3
 800bbda:	ec45 4b10 	vmov	d0, r4, r5
 800bbde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbe2:	45b8      	cmp	r8, r7
 800bbe4:	bf3a      	itte	cc
 800bbe6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bbea:	f1a6 0708 	subcc.w	r7, r6, #8
 800bbee:	2300      	movcs	r3, #0
 800bbf0:	380b      	subs	r0, #11
 800bbf2:	d012      	beq.n	800bc1a <__b2d+0x8a>
 800bbf4:	f1c0 0120 	rsb	r1, r0, #32
 800bbf8:	fa23 f401 	lsr.w	r4, r3, r1
 800bbfc:	4082      	lsls	r2, r0
 800bbfe:	4322      	orrs	r2, r4
 800bc00:	4547      	cmp	r7, r8
 800bc02:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800bc06:	bf8c      	ite	hi
 800bc08:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bc0c:	2200      	movls	r2, #0
 800bc0e:	4083      	lsls	r3, r0
 800bc10:	40ca      	lsrs	r2, r1
 800bc12:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bc16:	4313      	orrs	r3, r2
 800bc18:	e7de      	b.n	800bbd8 <__b2d+0x48>
 800bc1a:	ea42 0501 	orr.w	r5, r2, r1
 800bc1e:	e7db      	b.n	800bbd8 <__b2d+0x48>
 800bc20:	3ff00000 	.word	0x3ff00000

0800bc24 <__d2b>:
 800bc24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bc28:	460f      	mov	r7, r1
 800bc2a:	2101      	movs	r1, #1
 800bc2c:	ec59 8b10 	vmov	r8, r9, d0
 800bc30:	4616      	mov	r6, r2
 800bc32:	f7ff fc1b 	bl	800b46c <_Balloc>
 800bc36:	4604      	mov	r4, r0
 800bc38:	b930      	cbnz	r0, 800bc48 <__d2b+0x24>
 800bc3a:	4602      	mov	r2, r0
 800bc3c:	4b24      	ldr	r3, [pc, #144]	; (800bcd0 <__d2b+0xac>)
 800bc3e:	4825      	ldr	r0, [pc, #148]	; (800bcd4 <__d2b+0xb0>)
 800bc40:	f240 310f 	movw	r1, #783	; 0x30f
 800bc44:	f001 fc0c 	bl	800d460 <__assert_func>
 800bc48:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bc4c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bc50:	bb2d      	cbnz	r5, 800bc9e <__d2b+0x7a>
 800bc52:	9301      	str	r3, [sp, #4]
 800bc54:	f1b8 0300 	subs.w	r3, r8, #0
 800bc58:	d026      	beq.n	800bca8 <__d2b+0x84>
 800bc5a:	4668      	mov	r0, sp
 800bc5c:	9300      	str	r3, [sp, #0]
 800bc5e:	f7ff fd17 	bl	800b690 <__lo0bits>
 800bc62:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bc66:	b1e8      	cbz	r0, 800bca4 <__d2b+0x80>
 800bc68:	f1c0 0320 	rsb	r3, r0, #32
 800bc6c:	fa02 f303 	lsl.w	r3, r2, r3
 800bc70:	430b      	orrs	r3, r1
 800bc72:	40c2      	lsrs	r2, r0
 800bc74:	6163      	str	r3, [r4, #20]
 800bc76:	9201      	str	r2, [sp, #4]
 800bc78:	9b01      	ldr	r3, [sp, #4]
 800bc7a:	61a3      	str	r3, [r4, #24]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	bf14      	ite	ne
 800bc80:	2202      	movne	r2, #2
 800bc82:	2201      	moveq	r2, #1
 800bc84:	6122      	str	r2, [r4, #16]
 800bc86:	b1bd      	cbz	r5, 800bcb8 <__d2b+0x94>
 800bc88:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bc8c:	4405      	add	r5, r0
 800bc8e:	603d      	str	r5, [r7, #0]
 800bc90:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bc94:	6030      	str	r0, [r6, #0]
 800bc96:	4620      	mov	r0, r4
 800bc98:	b003      	add	sp, #12
 800bc9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bca2:	e7d6      	b.n	800bc52 <__d2b+0x2e>
 800bca4:	6161      	str	r1, [r4, #20]
 800bca6:	e7e7      	b.n	800bc78 <__d2b+0x54>
 800bca8:	a801      	add	r0, sp, #4
 800bcaa:	f7ff fcf1 	bl	800b690 <__lo0bits>
 800bcae:	9b01      	ldr	r3, [sp, #4]
 800bcb0:	6163      	str	r3, [r4, #20]
 800bcb2:	3020      	adds	r0, #32
 800bcb4:	2201      	movs	r2, #1
 800bcb6:	e7e5      	b.n	800bc84 <__d2b+0x60>
 800bcb8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bcbc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bcc0:	6038      	str	r0, [r7, #0]
 800bcc2:	6918      	ldr	r0, [r3, #16]
 800bcc4:	f7ff fcc4 	bl	800b650 <__hi0bits>
 800bcc8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bccc:	e7e2      	b.n	800bc94 <__d2b+0x70>
 800bcce:	bf00      	nop
 800bcd0:	0800dde9 	.word	0x0800dde9
 800bcd4:	0800ddfa 	.word	0x0800ddfa

0800bcd8 <__ratio>:
 800bcd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcdc:	4688      	mov	r8, r1
 800bcde:	4669      	mov	r1, sp
 800bce0:	4681      	mov	r9, r0
 800bce2:	f7ff ff55 	bl	800bb90 <__b2d>
 800bce6:	a901      	add	r1, sp, #4
 800bce8:	4640      	mov	r0, r8
 800bcea:	ec55 4b10 	vmov	r4, r5, d0
 800bcee:	f7ff ff4f 	bl	800bb90 <__b2d>
 800bcf2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bcf6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bcfa:	eba3 0c02 	sub.w	ip, r3, r2
 800bcfe:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bd02:	1a9b      	subs	r3, r3, r2
 800bd04:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bd08:	ec51 0b10 	vmov	r0, r1, d0
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	bfd6      	itet	le
 800bd10:	460a      	movle	r2, r1
 800bd12:	462a      	movgt	r2, r5
 800bd14:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bd18:	468b      	mov	fp, r1
 800bd1a:	462f      	mov	r7, r5
 800bd1c:	bfd4      	ite	le
 800bd1e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800bd22:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bd26:	4620      	mov	r0, r4
 800bd28:	ee10 2a10 	vmov	r2, s0
 800bd2c:	465b      	mov	r3, fp
 800bd2e:	4639      	mov	r1, r7
 800bd30:	f7f4 fd9c 	bl	800086c <__aeabi_ddiv>
 800bd34:	ec41 0b10 	vmov	d0, r0, r1
 800bd38:	b003      	add	sp, #12
 800bd3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bd3e <__copybits>:
 800bd3e:	3901      	subs	r1, #1
 800bd40:	b570      	push	{r4, r5, r6, lr}
 800bd42:	1149      	asrs	r1, r1, #5
 800bd44:	6914      	ldr	r4, [r2, #16]
 800bd46:	3101      	adds	r1, #1
 800bd48:	f102 0314 	add.w	r3, r2, #20
 800bd4c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bd50:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bd54:	1f05      	subs	r5, r0, #4
 800bd56:	42a3      	cmp	r3, r4
 800bd58:	d30c      	bcc.n	800bd74 <__copybits+0x36>
 800bd5a:	1aa3      	subs	r3, r4, r2
 800bd5c:	3b11      	subs	r3, #17
 800bd5e:	f023 0303 	bic.w	r3, r3, #3
 800bd62:	3211      	adds	r2, #17
 800bd64:	42a2      	cmp	r2, r4
 800bd66:	bf88      	it	hi
 800bd68:	2300      	movhi	r3, #0
 800bd6a:	4418      	add	r0, r3
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	4288      	cmp	r0, r1
 800bd70:	d305      	bcc.n	800bd7e <__copybits+0x40>
 800bd72:	bd70      	pop	{r4, r5, r6, pc}
 800bd74:	f853 6b04 	ldr.w	r6, [r3], #4
 800bd78:	f845 6f04 	str.w	r6, [r5, #4]!
 800bd7c:	e7eb      	b.n	800bd56 <__copybits+0x18>
 800bd7e:	f840 3b04 	str.w	r3, [r0], #4
 800bd82:	e7f4      	b.n	800bd6e <__copybits+0x30>

0800bd84 <__any_on>:
 800bd84:	f100 0214 	add.w	r2, r0, #20
 800bd88:	6900      	ldr	r0, [r0, #16]
 800bd8a:	114b      	asrs	r3, r1, #5
 800bd8c:	4298      	cmp	r0, r3
 800bd8e:	b510      	push	{r4, lr}
 800bd90:	db11      	blt.n	800bdb6 <__any_on+0x32>
 800bd92:	dd0a      	ble.n	800bdaa <__any_on+0x26>
 800bd94:	f011 011f 	ands.w	r1, r1, #31
 800bd98:	d007      	beq.n	800bdaa <__any_on+0x26>
 800bd9a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bd9e:	fa24 f001 	lsr.w	r0, r4, r1
 800bda2:	fa00 f101 	lsl.w	r1, r0, r1
 800bda6:	428c      	cmp	r4, r1
 800bda8:	d10b      	bne.n	800bdc2 <__any_on+0x3e>
 800bdaa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bdae:	4293      	cmp	r3, r2
 800bdb0:	d803      	bhi.n	800bdba <__any_on+0x36>
 800bdb2:	2000      	movs	r0, #0
 800bdb4:	bd10      	pop	{r4, pc}
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	e7f7      	b.n	800bdaa <__any_on+0x26>
 800bdba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bdbe:	2900      	cmp	r1, #0
 800bdc0:	d0f5      	beq.n	800bdae <__any_on+0x2a>
 800bdc2:	2001      	movs	r0, #1
 800bdc4:	e7f6      	b.n	800bdb4 <__any_on+0x30>

0800bdc6 <sulp>:
 800bdc6:	b570      	push	{r4, r5, r6, lr}
 800bdc8:	4604      	mov	r4, r0
 800bdca:	460d      	mov	r5, r1
 800bdcc:	ec45 4b10 	vmov	d0, r4, r5
 800bdd0:	4616      	mov	r6, r2
 800bdd2:	f7ff feb7 	bl	800bb44 <__ulp>
 800bdd6:	ec51 0b10 	vmov	r0, r1, d0
 800bdda:	b17e      	cbz	r6, 800bdfc <sulp+0x36>
 800bddc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bde0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	dd09      	ble.n	800bdfc <sulp+0x36>
 800bde8:	051b      	lsls	r3, r3, #20
 800bdea:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800bdee:	2400      	movs	r4, #0
 800bdf0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800bdf4:	4622      	mov	r2, r4
 800bdf6:	462b      	mov	r3, r5
 800bdf8:	f7f4 fc0e 	bl	8000618 <__aeabi_dmul>
 800bdfc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800be00 <_strtod_l>:
 800be00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be04:	ed2d 8b02 	vpush	{d8}
 800be08:	b09b      	sub	sp, #108	; 0x6c
 800be0a:	4604      	mov	r4, r0
 800be0c:	9213      	str	r2, [sp, #76]	; 0x4c
 800be0e:	2200      	movs	r2, #0
 800be10:	9216      	str	r2, [sp, #88]	; 0x58
 800be12:	460d      	mov	r5, r1
 800be14:	f04f 0800 	mov.w	r8, #0
 800be18:	f04f 0900 	mov.w	r9, #0
 800be1c:	460a      	mov	r2, r1
 800be1e:	9215      	str	r2, [sp, #84]	; 0x54
 800be20:	7811      	ldrb	r1, [r2, #0]
 800be22:	292b      	cmp	r1, #43	; 0x2b
 800be24:	d04c      	beq.n	800bec0 <_strtod_l+0xc0>
 800be26:	d83a      	bhi.n	800be9e <_strtod_l+0x9e>
 800be28:	290d      	cmp	r1, #13
 800be2a:	d834      	bhi.n	800be96 <_strtod_l+0x96>
 800be2c:	2908      	cmp	r1, #8
 800be2e:	d834      	bhi.n	800be9a <_strtod_l+0x9a>
 800be30:	2900      	cmp	r1, #0
 800be32:	d03d      	beq.n	800beb0 <_strtod_l+0xb0>
 800be34:	2200      	movs	r2, #0
 800be36:	920a      	str	r2, [sp, #40]	; 0x28
 800be38:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800be3a:	7832      	ldrb	r2, [r6, #0]
 800be3c:	2a30      	cmp	r2, #48	; 0x30
 800be3e:	f040 80b4 	bne.w	800bfaa <_strtod_l+0x1aa>
 800be42:	7872      	ldrb	r2, [r6, #1]
 800be44:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800be48:	2a58      	cmp	r2, #88	; 0x58
 800be4a:	d170      	bne.n	800bf2e <_strtod_l+0x12e>
 800be4c:	9302      	str	r3, [sp, #8]
 800be4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be50:	9301      	str	r3, [sp, #4]
 800be52:	ab16      	add	r3, sp, #88	; 0x58
 800be54:	9300      	str	r3, [sp, #0]
 800be56:	4a8e      	ldr	r2, [pc, #568]	; (800c090 <_strtod_l+0x290>)
 800be58:	ab17      	add	r3, sp, #92	; 0x5c
 800be5a:	a915      	add	r1, sp, #84	; 0x54
 800be5c:	4620      	mov	r0, r4
 800be5e:	f001 fb9b 	bl	800d598 <__gethex>
 800be62:	f010 070f 	ands.w	r7, r0, #15
 800be66:	4605      	mov	r5, r0
 800be68:	d005      	beq.n	800be76 <_strtod_l+0x76>
 800be6a:	2f06      	cmp	r7, #6
 800be6c:	d12a      	bne.n	800bec4 <_strtod_l+0xc4>
 800be6e:	3601      	adds	r6, #1
 800be70:	2300      	movs	r3, #0
 800be72:	9615      	str	r6, [sp, #84]	; 0x54
 800be74:	930a      	str	r3, [sp, #40]	; 0x28
 800be76:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800be78:	2b00      	cmp	r3, #0
 800be7a:	f040 857f 	bne.w	800c97c <_strtod_l+0xb7c>
 800be7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be80:	b1db      	cbz	r3, 800beba <_strtod_l+0xba>
 800be82:	4642      	mov	r2, r8
 800be84:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800be88:	ec43 2b10 	vmov	d0, r2, r3
 800be8c:	b01b      	add	sp, #108	; 0x6c
 800be8e:	ecbd 8b02 	vpop	{d8}
 800be92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be96:	2920      	cmp	r1, #32
 800be98:	d1cc      	bne.n	800be34 <_strtod_l+0x34>
 800be9a:	3201      	adds	r2, #1
 800be9c:	e7bf      	b.n	800be1e <_strtod_l+0x1e>
 800be9e:	292d      	cmp	r1, #45	; 0x2d
 800bea0:	d1c8      	bne.n	800be34 <_strtod_l+0x34>
 800bea2:	2101      	movs	r1, #1
 800bea4:	910a      	str	r1, [sp, #40]	; 0x28
 800bea6:	1c51      	adds	r1, r2, #1
 800bea8:	9115      	str	r1, [sp, #84]	; 0x54
 800beaa:	7852      	ldrb	r2, [r2, #1]
 800beac:	2a00      	cmp	r2, #0
 800beae:	d1c3      	bne.n	800be38 <_strtod_l+0x38>
 800beb0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800beb2:	9515      	str	r5, [sp, #84]	; 0x54
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	f040 855f 	bne.w	800c978 <_strtod_l+0xb78>
 800beba:	4642      	mov	r2, r8
 800bebc:	464b      	mov	r3, r9
 800bebe:	e7e3      	b.n	800be88 <_strtod_l+0x88>
 800bec0:	2100      	movs	r1, #0
 800bec2:	e7ef      	b.n	800bea4 <_strtod_l+0xa4>
 800bec4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bec6:	b13a      	cbz	r2, 800bed8 <_strtod_l+0xd8>
 800bec8:	2135      	movs	r1, #53	; 0x35
 800beca:	a818      	add	r0, sp, #96	; 0x60
 800becc:	f7ff ff37 	bl	800bd3e <__copybits>
 800bed0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bed2:	4620      	mov	r0, r4
 800bed4:	f7ff fb0a 	bl	800b4ec <_Bfree>
 800bed8:	3f01      	subs	r7, #1
 800beda:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bedc:	2f04      	cmp	r7, #4
 800bede:	d806      	bhi.n	800beee <_strtod_l+0xee>
 800bee0:	e8df f007 	tbb	[pc, r7]
 800bee4:	201d0314 	.word	0x201d0314
 800bee8:	14          	.byte	0x14
 800bee9:	00          	.byte	0x00
 800beea:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800beee:	05e9      	lsls	r1, r5, #23
 800bef0:	bf48      	it	mi
 800bef2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800bef6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800befa:	0d1b      	lsrs	r3, r3, #20
 800befc:	051b      	lsls	r3, r3, #20
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d1b9      	bne.n	800be76 <_strtod_l+0x76>
 800bf02:	f7fe fb03 	bl	800a50c <__errno>
 800bf06:	2322      	movs	r3, #34	; 0x22
 800bf08:	6003      	str	r3, [r0, #0]
 800bf0a:	e7b4      	b.n	800be76 <_strtod_l+0x76>
 800bf0c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800bf10:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800bf14:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bf18:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800bf1c:	e7e7      	b.n	800beee <_strtod_l+0xee>
 800bf1e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800c098 <_strtod_l+0x298>
 800bf22:	e7e4      	b.n	800beee <_strtod_l+0xee>
 800bf24:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800bf28:	f04f 38ff 	mov.w	r8, #4294967295
 800bf2c:	e7df      	b.n	800beee <_strtod_l+0xee>
 800bf2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bf30:	1c5a      	adds	r2, r3, #1
 800bf32:	9215      	str	r2, [sp, #84]	; 0x54
 800bf34:	785b      	ldrb	r3, [r3, #1]
 800bf36:	2b30      	cmp	r3, #48	; 0x30
 800bf38:	d0f9      	beq.n	800bf2e <_strtod_l+0x12e>
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d09b      	beq.n	800be76 <_strtod_l+0x76>
 800bf3e:	2301      	movs	r3, #1
 800bf40:	f04f 0a00 	mov.w	sl, #0
 800bf44:	9304      	str	r3, [sp, #16]
 800bf46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bf48:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf4a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800bf4e:	46d3      	mov	fp, sl
 800bf50:	220a      	movs	r2, #10
 800bf52:	9815      	ldr	r0, [sp, #84]	; 0x54
 800bf54:	7806      	ldrb	r6, [r0, #0]
 800bf56:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800bf5a:	b2d9      	uxtb	r1, r3
 800bf5c:	2909      	cmp	r1, #9
 800bf5e:	d926      	bls.n	800bfae <_strtod_l+0x1ae>
 800bf60:	494c      	ldr	r1, [pc, #304]	; (800c094 <_strtod_l+0x294>)
 800bf62:	2201      	movs	r2, #1
 800bf64:	f001 fa22 	bl	800d3ac <strncmp>
 800bf68:	2800      	cmp	r0, #0
 800bf6a:	d030      	beq.n	800bfce <_strtod_l+0x1ce>
 800bf6c:	2000      	movs	r0, #0
 800bf6e:	4632      	mov	r2, r6
 800bf70:	9005      	str	r0, [sp, #20]
 800bf72:	465e      	mov	r6, fp
 800bf74:	4603      	mov	r3, r0
 800bf76:	2a65      	cmp	r2, #101	; 0x65
 800bf78:	d001      	beq.n	800bf7e <_strtod_l+0x17e>
 800bf7a:	2a45      	cmp	r2, #69	; 0x45
 800bf7c:	d113      	bne.n	800bfa6 <_strtod_l+0x1a6>
 800bf7e:	b91e      	cbnz	r6, 800bf88 <_strtod_l+0x188>
 800bf80:	9a04      	ldr	r2, [sp, #16]
 800bf82:	4302      	orrs	r2, r0
 800bf84:	d094      	beq.n	800beb0 <_strtod_l+0xb0>
 800bf86:	2600      	movs	r6, #0
 800bf88:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800bf8a:	1c6a      	adds	r2, r5, #1
 800bf8c:	9215      	str	r2, [sp, #84]	; 0x54
 800bf8e:	786a      	ldrb	r2, [r5, #1]
 800bf90:	2a2b      	cmp	r2, #43	; 0x2b
 800bf92:	d074      	beq.n	800c07e <_strtod_l+0x27e>
 800bf94:	2a2d      	cmp	r2, #45	; 0x2d
 800bf96:	d078      	beq.n	800c08a <_strtod_l+0x28a>
 800bf98:	f04f 0c00 	mov.w	ip, #0
 800bf9c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800bfa0:	2909      	cmp	r1, #9
 800bfa2:	d97f      	bls.n	800c0a4 <_strtod_l+0x2a4>
 800bfa4:	9515      	str	r5, [sp, #84]	; 0x54
 800bfa6:	2700      	movs	r7, #0
 800bfa8:	e09e      	b.n	800c0e8 <_strtod_l+0x2e8>
 800bfaa:	2300      	movs	r3, #0
 800bfac:	e7c8      	b.n	800bf40 <_strtod_l+0x140>
 800bfae:	f1bb 0f08 	cmp.w	fp, #8
 800bfb2:	bfd8      	it	le
 800bfb4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800bfb6:	f100 0001 	add.w	r0, r0, #1
 800bfba:	bfda      	itte	le
 800bfbc:	fb02 3301 	mlale	r3, r2, r1, r3
 800bfc0:	9309      	strle	r3, [sp, #36]	; 0x24
 800bfc2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800bfc6:	f10b 0b01 	add.w	fp, fp, #1
 800bfca:	9015      	str	r0, [sp, #84]	; 0x54
 800bfcc:	e7c1      	b.n	800bf52 <_strtod_l+0x152>
 800bfce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bfd0:	1c5a      	adds	r2, r3, #1
 800bfd2:	9215      	str	r2, [sp, #84]	; 0x54
 800bfd4:	785a      	ldrb	r2, [r3, #1]
 800bfd6:	f1bb 0f00 	cmp.w	fp, #0
 800bfda:	d037      	beq.n	800c04c <_strtod_l+0x24c>
 800bfdc:	9005      	str	r0, [sp, #20]
 800bfde:	465e      	mov	r6, fp
 800bfe0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800bfe4:	2b09      	cmp	r3, #9
 800bfe6:	d912      	bls.n	800c00e <_strtod_l+0x20e>
 800bfe8:	2301      	movs	r3, #1
 800bfea:	e7c4      	b.n	800bf76 <_strtod_l+0x176>
 800bfec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bfee:	1c5a      	adds	r2, r3, #1
 800bff0:	9215      	str	r2, [sp, #84]	; 0x54
 800bff2:	785a      	ldrb	r2, [r3, #1]
 800bff4:	3001      	adds	r0, #1
 800bff6:	2a30      	cmp	r2, #48	; 0x30
 800bff8:	d0f8      	beq.n	800bfec <_strtod_l+0x1ec>
 800bffa:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800bffe:	2b08      	cmp	r3, #8
 800c000:	f200 84c1 	bhi.w	800c986 <_strtod_l+0xb86>
 800c004:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c006:	9005      	str	r0, [sp, #20]
 800c008:	2000      	movs	r0, #0
 800c00a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c00c:	4606      	mov	r6, r0
 800c00e:	3a30      	subs	r2, #48	; 0x30
 800c010:	f100 0301 	add.w	r3, r0, #1
 800c014:	d014      	beq.n	800c040 <_strtod_l+0x240>
 800c016:	9905      	ldr	r1, [sp, #20]
 800c018:	4419      	add	r1, r3
 800c01a:	9105      	str	r1, [sp, #20]
 800c01c:	4633      	mov	r3, r6
 800c01e:	eb00 0c06 	add.w	ip, r0, r6
 800c022:	210a      	movs	r1, #10
 800c024:	4563      	cmp	r3, ip
 800c026:	d113      	bne.n	800c050 <_strtod_l+0x250>
 800c028:	1833      	adds	r3, r6, r0
 800c02a:	2b08      	cmp	r3, #8
 800c02c:	f106 0601 	add.w	r6, r6, #1
 800c030:	4406      	add	r6, r0
 800c032:	dc1a      	bgt.n	800c06a <_strtod_l+0x26a>
 800c034:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c036:	230a      	movs	r3, #10
 800c038:	fb03 2301 	mla	r3, r3, r1, r2
 800c03c:	9309      	str	r3, [sp, #36]	; 0x24
 800c03e:	2300      	movs	r3, #0
 800c040:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c042:	1c51      	adds	r1, r2, #1
 800c044:	9115      	str	r1, [sp, #84]	; 0x54
 800c046:	7852      	ldrb	r2, [r2, #1]
 800c048:	4618      	mov	r0, r3
 800c04a:	e7c9      	b.n	800bfe0 <_strtod_l+0x1e0>
 800c04c:	4658      	mov	r0, fp
 800c04e:	e7d2      	b.n	800bff6 <_strtod_l+0x1f6>
 800c050:	2b08      	cmp	r3, #8
 800c052:	f103 0301 	add.w	r3, r3, #1
 800c056:	dc03      	bgt.n	800c060 <_strtod_l+0x260>
 800c058:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c05a:	434f      	muls	r7, r1
 800c05c:	9709      	str	r7, [sp, #36]	; 0x24
 800c05e:	e7e1      	b.n	800c024 <_strtod_l+0x224>
 800c060:	2b10      	cmp	r3, #16
 800c062:	bfd8      	it	le
 800c064:	fb01 fa0a 	mulle.w	sl, r1, sl
 800c068:	e7dc      	b.n	800c024 <_strtod_l+0x224>
 800c06a:	2e10      	cmp	r6, #16
 800c06c:	bfdc      	itt	le
 800c06e:	230a      	movle	r3, #10
 800c070:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800c074:	e7e3      	b.n	800c03e <_strtod_l+0x23e>
 800c076:	2300      	movs	r3, #0
 800c078:	9305      	str	r3, [sp, #20]
 800c07a:	2301      	movs	r3, #1
 800c07c:	e780      	b.n	800bf80 <_strtod_l+0x180>
 800c07e:	f04f 0c00 	mov.w	ip, #0
 800c082:	1caa      	adds	r2, r5, #2
 800c084:	9215      	str	r2, [sp, #84]	; 0x54
 800c086:	78aa      	ldrb	r2, [r5, #2]
 800c088:	e788      	b.n	800bf9c <_strtod_l+0x19c>
 800c08a:	f04f 0c01 	mov.w	ip, #1
 800c08e:	e7f8      	b.n	800c082 <_strtod_l+0x282>
 800c090:	0800df58 	.word	0x0800df58
 800c094:	0800df54 	.word	0x0800df54
 800c098:	7ff00000 	.word	0x7ff00000
 800c09c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c09e:	1c51      	adds	r1, r2, #1
 800c0a0:	9115      	str	r1, [sp, #84]	; 0x54
 800c0a2:	7852      	ldrb	r2, [r2, #1]
 800c0a4:	2a30      	cmp	r2, #48	; 0x30
 800c0a6:	d0f9      	beq.n	800c09c <_strtod_l+0x29c>
 800c0a8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c0ac:	2908      	cmp	r1, #8
 800c0ae:	f63f af7a 	bhi.w	800bfa6 <_strtod_l+0x1a6>
 800c0b2:	3a30      	subs	r2, #48	; 0x30
 800c0b4:	9208      	str	r2, [sp, #32]
 800c0b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c0b8:	920c      	str	r2, [sp, #48]	; 0x30
 800c0ba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c0bc:	1c57      	adds	r7, r2, #1
 800c0be:	9715      	str	r7, [sp, #84]	; 0x54
 800c0c0:	7852      	ldrb	r2, [r2, #1]
 800c0c2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c0c6:	f1be 0f09 	cmp.w	lr, #9
 800c0ca:	d938      	bls.n	800c13e <_strtod_l+0x33e>
 800c0cc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c0ce:	1a7f      	subs	r7, r7, r1
 800c0d0:	2f08      	cmp	r7, #8
 800c0d2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800c0d6:	dc03      	bgt.n	800c0e0 <_strtod_l+0x2e0>
 800c0d8:	9908      	ldr	r1, [sp, #32]
 800c0da:	428f      	cmp	r7, r1
 800c0dc:	bfa8      	it	ge
 800c0de:	460f      	movge	r7, r1
 800c0e0:	f1bc 0f00 	cmp.w	ip, #0
 800c0e4:	d000      	beq.n	800c0e8 <_strtod_l+0x2e8>
 800c0e6:	427f      	negs	r7, r7
 800c0e8:	2e00      	cmp	r6, #0
 800c0ea:	d14f      	bne.n	800c18c <_strtod_l+0x38c>
 800c0ec:	9904      	ldr	r1, [sp, #16]
 800c0ee:	4301      	orrs	r1, r0
 800c0f0:	f47f aec1 	bne.w	800be76 <_strtod_l+0x76>
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	f47f aedb 	bne.w	800beb0 <_strtod_l+0xb0>
 800c0fa:	2a69      	cmp	r2, #105	; 0x69
 800c0fc:	d029      	beq.n	800c152 <_strtod_l+0x352>
 800c0fe:	dc26      	bgt.n	800c14e <_strtod_l+0x34e>
 800c100:	2a49      	cmp	r2, #73	; 0x49
 800c102:	d026      	beq.n	800c152 <_strtod_l+0x352>
 800c104:	2a4e      	cmp	r2, #78	; 0x4e
 800c106:	f47f aed3 	bne.w	800beb0 <_strtod_l+0xb0>
 800c10a:	499b      	ldr	r1, [pc, #620]	; (800c378 <_strtod_l+0x578>)
 800c10c:	a815      	add	r0, sp, #84	; 0x54
 800c10e:	f001 fc83 	bl	800da18 <__match>
 800c112:	2800      	cmp	r0, #0
 800c114:	f43f aecc 	beq.w	800beb0 <_strtod_l+0xb0>
 800c118:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c11a:	781b      	ldrb	r3, [r3, #0]
 800c11c:	2b28      	cmp	r3, #40	; 0x28
 800c11e:	d12f      	bne.n	800c180 <_strtod_l+0x380>
 800c120:	4996      	ldr	r1, [pc, #600]	; (800c37c <_strtod_l+0x57c>)
 800c122:	aa18      	add	r2, sp, #96	; 0x60
 800c124:	a815      	add	r0, sp, #84	; 0x54
 800c126:	f001 fc8b 	bl	800da40 <__hexnan>
 800c12a:	2805      	cmp	r0, #5
 800c12c:	d128      	bne.n	800c180 <_strtod_l+0x380>
 800c12e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c130:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c134:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800c138:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800c13c:	e69b      	b.n	800be76 <_strtod_l+0x76>
 800c13e:	9f08      	ldr	r7, [sp, #32]
 800c140:	210a      	movs	r1, #10
 800c142:	fb01 2107 	mla	r1, r1, r7, r2
 800c146:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800c14a:	9208      	str	r2, [sp, #32]
 800c14c:	e7b5      	b.n	800c0ba <_strtod_l+0x2ba>
 800c14e:	2a6e      	cmp	r2, #110	; 0x6e
 800c150:	e7d9      	b.n	800c106 <_strtod_l+0x306>
 800c152:	498b      	ldr	r1, [pc, #556]	; (800c380 <_strtod_l+0x580>)
 800c154:	a815      	add	r0, sp, #84	; 0x54
 800c156:	f001 fc5f 	bl	800da18 <__match>
 800c15a:	2800      	cmp	r0, #0
 800c15c:	f43f aea8 	beq.w	800beb0 <_strtod_l+0xb0>
 800c160:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c162:	4988      	ldr	r1, [pc, #544]	; (800c384 <_strtod_l+0x584>)
 800c164:	3b01      	subs	r3, #1
 800c166:	a815      	add	r0, sp, #84	; 0x54
 800c168:	9315      	str	r3, [sp, #84]	; 0x54
 800c16a:	f001 fc55 	bl	800da18 <__match>
 800c16e:	b910      	cbnz	r0, 800c176 <_strtod_l+0x376>
 800c170:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c172:	3301      	adds	r3, #1
 800c174:	9315      	str	r3, [sp, #84]	; 0x54
 800c176:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800c394 <_strtod_l+0x594>
 800c17a:	f04f 0800 	mov.w	r8, #0
 800c17e:	e67a      	b.n	800be76 <_strtod_l+0x76>
 800c180:	4881      	ldr	r0, [pc, #516]	; (800c388 <_strtod_l+0x588>)
 800c182:	f001 f965 	bl	800d450 <nan>
 800c186:	ec59 8b10 	vmov	r8, r9, d0
 800c18a:	e674      	b.n	800be76 <_strtod_l+0x76>
 800c18c:	9b05      	ldr	r3, [sp, #20]
 800c18e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c190:	1afb      	subs	r3, r7, r3
 800c192:	f1bb 0f00 	cmp.w	fp, #0
 800c196:	bf08      	it	eq
 800c198:	46b3      	moveq	fp, r6
 800c19a:	2e10      	cmp	r6, #16
 800c19c:	9308      	str	r3, [sp, #32]
 800c19e:	4635      	mov	r5, r6
 800c1a0:	bfa8      	it	ge
 800c1a2:	2510      	movge	r5, #16
 800c1a4:	f7f4 f9be 	bl	8000524 <__aeabi_ui2d>
 800c1a8:	2e09      	cmp	r6, #9
 800c1aa:	4680      	mov	r8, r0
 800c1ac:	4689      	mov	r9, r1
 800c1ae:	dd13      	ble.n	800c1d8 <_strtod_l+0x3d8>
 800c1b0:	4b76      	ldr	r3, [pc, #472]	; (800c38c <_strtod_l+0x58c>)
 800c1b2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c1b6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c1ba:	f7f4 fa2d 	bl	8000618 <__aeabi_dmul>
 800c1be:	4680      	mov	r8, r0
 800c1c0:	4650      	mov	r0, sl
 800c1c2:	4689      	mov	r9, r1
 800c1c4:	f7f4 f9ae 	bl	8000524 <__aeabi_ui2d>
 800c1c8:	4602      	mov	r2, r0
 800c1ca:	460b      	mov	r3, r1
 800c1cc:	4640      	mov	r0, r8
 800c1ce:	4649      	mov	r1, r9
 800c1d0:	f7f4 f86c 	bl	80002ac <__adddf3>
 800c1d4:	4680      	mov	r8, r0
 800c1d6:	4689      	mov	r9, r1
 800c1d8:	2e0f      	cmp	r6, #15
 800c1da:	dc38      	bgt.n	800c24e <_strtod_l+0x44e>
 800c1dc:	9b08      	ldr	r3, [sp, #32]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	f43f ae49 	beq.w	800be76 <_strtod_l+0x76>
 800c1e4:	dd24      	ble.n	800c230 <_strtod_l+0x430>
 800c1e6:	2b16      	cmp	r3, #22
 800c1e8:	dc0b      	bgt.n	800c202 <_strtod_l+0x402>
 800c1ea:	4968      	ldr	r1, [pc, #416]	; (800c38c <_strtod_l+0x58c>)
 800c1ec:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c1f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c1f4:	4642      	mov	r2, r8
 800c1f6:	464b      	mov	r3, r9
 800c1f8:	f7f4 fa0e 	bl	8000618 <__aeabi_dmul>
 800c1fc:	4680      	mov	r8, r0
 800c1fe:	4689      	mov	r9, r1
 800c200:	e639      	b.n	800be76 <_strtod_l+0x76>
 800c202:	9a08      	ldr	r2, [sp, #32]
 800c204:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800c208:	4293      	cmp	r3, r2
 800c20a:	db20      	blt.n	800c24e <_strtod_l+0x44e>
 800c20c:	4c5f      	ldr	r4, [pc, #380]	; (800c38c <_strtod_l+0x58c>)
 800c20e:	f1c6 060f 	rsb	r6, r6, #15
 800c212:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800c216:	4642      	mov	r2, r8
 800c218:	464b      	mov	r3, r9
 800c21a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c21e:	f7f4 f9fb 	bl	8000618 <__aeabi_dmul>
 800c222:	9b08      	ldr	r3, [sp, #32]
 800c224:	1b9e      	subs	r6, r3, r6
 800c226:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800c22a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c22e:	e7e3      	b.n	800c1f8 <_strtod_l+0x3f8>
 800c230:	9b08      	ldr	r3, [sp, #32]
 800c232:	3316      	adds	r3, #22
 800c234:	db0b      	blt.n	800c24e <_strtod_l+0x44e>
 800c236:	9b05      	ldr	r3, [sp, #20]
 800c238:	1bdf      	subs	r7, r3, r7
 800c23a:	4b54      	ldr	r3, [pc, #336]	; (800c38c <_strtod_l+0x58c>)
 800c23c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c240:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c244:	4640      	mov	r0, r8
 800c246:	4649      	mov	r1, r9
 800c248:	f7f4 fb10 	bl	800086c <__aeabi_ddiv>
 800c24c:	e7d6      	b.n	800c1fc <_strtod_l+0x3fc>
 800c24e:	9b08      	ldr	r3, [sp, #32]
 800c250:	1b75      	subs	r5, r6, r5
 800c252:	441d      	add	r5, r3
 800c254:	2d00      	cmp	r5, #0
 800c256:	dd70      	ble.n	800c33a <_strtod_l+0x53a>
 800c258:	f015 030f 	ands.w	r3, r5, #15
 800c25c:	d00a      	beq.n	800c274 <_strtod_l+0x474>
 800c25e:	494b      	ldr	r1, [pc, #300]	; (800c38c <_strtod_l+0x58c>)
 800c260:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c264:	4642      	mov	r2, r8
 800c266:	464b      	mov	r3, r9
 800c268:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c26c:	f7f4 f9d4 	bl	8000618 <__aeabi_dmul>
 800c270:	4680      	mov	r8, r0
 800c272:	4689      	mov	r9, r1
 800c274:	f035 050f 	bics.w	r5, r5, #15
 800c278:	d04d      	beq.n	800c316 <_strtod_l+0x516>
 800c27a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800c27e:	dd22      	ble.n	800c2c6 <_strtod_l+0x4c6>
 800c280:	2500      	movs	r5, #0
 800c282:	46ab      	mov	fp, r5
 800c284:	9509      	str	r5, [sp, #36]	; 0x24
 800c286:	9505      	str	r5, [sp, #20]
 800c288:	2322      	movs	r3, #34	; 0x22
 800c28a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800c394 <_strtod_l+0x594>
 800c28e:	6023      	str	r3, [r4, #0]
 800c290:	f04f 0800 	mov.w	r8, #0
 800c294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c296:	2b00      	cmp	r3, #0
 800c298:	f43f aded 	beq.w	800be76 <_strtod_l+0x76>
 800c29c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c29e:	4620      	mov	r0, r4
 800c2a0:	f7ff f924 	bl	800b4ec <_Bfree>
 800c2a4:	9905      	ldr	r1, [sp, #20]
 800c2a6:	4620      	mov	r0, r4
 800c2a8:	f7ff f920 	bl	800b4ec <_Bfree>
 800c2ac:	4659      	mov	r1, fp
 800c2ae:	4620      	mov	r0, r4
 800c2b0:	f7ff f91c 	bl	800b4ec <_Bfree>
 800c2b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c2b6:	4620      	mov	r0, r4
 800c2b8:	f7ff f918 	bl	800b4ec <_Bfree>
 800c2bc:	4629      	mov	r1, r5
 800c2be:	4620      	mov	r0, r4
 800c2c0:	f7ff f914 	bl	800b4ec <_Bfree>
 800c2c4:	e5d7      	b.n	800be76 <_strtod_l+0x76>
 800c2c6:	4b32      	ldr	r3, [pc, #200]	; (800c390 <_strtod_l+0x590>)
 800c2c8:	9304      	str	r3, [sp, #16]
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	112d      	asrs	r5, r5, #4
 800c2ce:	4640      	mov	r0, r8
 800c2d0:	4649      	mov	r1, r9
 800c2d2:	469a      	mov	sl, r3
 800c2d4:	2d01      	cmp	r5, #1
 800c2d6:	dc21      	bgt.n	800c31c <_strtod_l+0x51c>
 800c2d8:	b10b      	cbz	r3, 800c2de <_strtod_l+0x4de>
 800c2da:	4680      	mov	r8, r0
 800c2dc:	4689      	mov	r9, r1
 800c2de:	492c      	ldr	r1, [pc, #176]	; (800c390 <_strtod_l+0x590>)
 800c2e0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800c2e4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c2e8:	4642      	mov	r2, r8
 800c2ea:	464b      	mov	r3, r9
 800c2ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c2f0:	f7f4 f992 	bl	8000618 <__aeabi_dmul>
 800c2f4:	4b27      	ldr	r3, [pc, #156]	; (800c394 <_strtod_l+0x594>)
 800c2f6:	460a      	mov	r2, r1
 800c2f8:	400b      	ands	r3, r1
 800c2fa:	4927      	ldr	r1, [pc, #156]	; (800c398 <_strtod_l+0x598>)
 800c2fc:	428b      	cmp	r3, r1
 800c2fe:	4680      	mov	r8, r0
 800c300:	d8be      	bhi.n	800c280 <_strtod_l+0x480>
 800c302:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c306:	428b      	cmp	r3, r1
 800c308:	bf86      	itte	hi
 800c30a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800c39c <_strtod_l+0x59c>
 800c30e:	f04f 38ff 	movhi.w	r8, #4294967295
 800c312:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800c316:	2300      	movs	r3, #0
 800c318:	9304      	str	r3, [sp, #16]
 800c31a:	e07b      	b.n	800c414 <_strtod_l+0x614>
 800c31c:	07ea      	lsls	r2, r5, #31
 800c31e:	d505      	bpl.n	800c32c <_strtod_l+0x52c>
 800c320:	9b04      	ldr	r3, [sp, #16]
 800c322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c326:	f7f4 f977 	bl	8000618 <__aeabi_dmul>
 800c32a:	2301      	movs	r3, #1
 800c32c:	9a04      	ldr	r2, [sp, #16]
 800c32e:	3208      	adds	r2, #8
 800c330:	f10a 0a01 	add.w	sl, sl, #1
 800c334:	106d      	asrs	r5, r5, #1
 800c336:	9204      	str	r2, [sp, #16]
 800c338:	e7cc      	b.n	800c2d4 <_strtod_l+0x4d4>
 800c33a:	d0ec      	beq.n	800c316 <_strtod_l+0x516>
 800c33c:	426d      	negs	r5, r5
 800c33e:	f015 020f 	ands.w	r2, r5, #15
 800c342:	d00a      	beq.n	800c35a <_strtod_l+0x55a>
 800c344:	4b11      	ldr	r3, [pc, #68]	; (800c38c <_strtod_l+0x58c>)
 800c346:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c34a:	4640      	mov	r0, r8
 800c34c:	4649      	mov	r1, r9
 800c34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c352:	f7f4 fa8b 	bl	800086c <__aeabi_ddiv>
 800c356:	4680      	mov	r8, r0
 800c358:	4689      	mov	r9, r1
 800c35a:	112d      	asrs	r5, r5, #4
 800c35c:	d0db      	beq.n	800c316 <_strtod_l+0x516>
 800c35e:	2d1f      	cmp	r5, #31
 800c360:	dd1e      	ble.n	800c3a0 <_strtod_l+0x5a0>
 800c362:	2500      	movs	r5, #0
 800c364:	46ab      	mov	fp, r5
 800c366:	9509      	str	r5, [sp, #36]	; 0x24
 800c368:	9505      	str	r5, [sp, #20]
 800c36a:	2322      	movs	r3, #34	; 0x22
 800c36c:	f04f 0800 	mov.w	r8, #0
 800c370:	f04f 0900 	mov.w	r9, #0
 800c374:	6023      	str	r3, [r4, #0]
 800c376:	e78d      	b.n	800c294 <_strtod_l+0x494>
 800c378:	0800dd41 	.word	0x0800dd41
 800c37c:	0800df6c 	.word	0x0800df6c
 800c380:	0800dd39 	.word	0x0800dd39
 800c384:	0800dd70 	.word	0x0800dd70
 800c388:	0800e0fd 	.word	0x0800e0fd
 800c38c:	0800de80 	.word	0x0800de80
 800c390:	0800de58 	.word	0x0800de58
 800c394:	7ff00000 	.word	0x7ff00000
 800c398:	7ca00000 	.word	0x7ca00000
 800c39c:	7fefffff 	.word	0x7fefffff
 800c3a0:	f015 0310 	ands.w	r3, r5, #16
 800c3a4:	bf18      	it	ne
 800c3a6:	236a      	movne	r3, #106	; 0x6a
 800c3a8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800c74c <_strtod_l+0x94c>
 800c3ac:	9304      	str	r3, [sp, #16]
 800c3ae:	4640      	mov	r0, r8
 800c3b0:	4649      	mov	r1, r9
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	07ea      	lsls	r2, r5, #31
 800c3b6:	d504      	bpl.n	800c3c2 <_strtod_l+0x5c2>
 800c3b8:	e9da 2300 	ldrd	r2, r3, [sl]
 800c3bc:	f7f4 f92c 	bl	8000618 <__aeabi_dmul>
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	106d      	asrs	r5, r5, #1
 800c3c4:	f10a 0a08 	add.w	sl, sl, #8
 800c3c8:	d1f4      	bne.n	800c3b4 <_strtod_l+0x5b4>
 800c3ca:	b10b      	cbz	r3, 800c3d0 <_strtod_l+0x5d0>
 800c3cc:	4680      	mov	r8, r0
 800c3ce:	4689      	mov	r9, r1
 800c3d0:	9b04      	ldr	r3, [sp, #16]
 800c3d2:	b1bb      	cbz	r3, 800c404 <_strtod_l+0x604>
 800c3d4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800c3d8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	4649      	mov	r1, r9
 800c3e0:	dd10      	ble.n	800c404 <_strtod_l+0x604>
 800c3e2:	2b1f      	cmp	r3, #31
 800c3e4:	f340 811e 	ble.w	800c624 <_strtod_l+0x824>
 800c3e8:	2b34      	cmp	r3, #52	; 0x34
 800c3ea:	bfde      	ittt	le
 800c3ec:	f04f 33ff 	movle.w	r3, #4294967295
 800c3f0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c3f4:	4093      	lslle	r3, r2
 800c3f6:	f04f 0800 	mov.w	r8, #0
 800c3fa:	bfcc      	ite	gt
 800c3fc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800c400:	ea03 0901 	andle.w	r9, r3, r1
 800c404:	2200      	movs	r2, #0
 800c406:	2300      	movs	r3, #0
 800c408:	4640      	mov	r0, r8
 800c40a:	4649      	mov	r1, r9
 800c40c:	f7f4 fb6c 	bl	8000ae8 <__aeabi_dcmpeq>
 800c410:	2800      	cmp	r0, #0
 800c412:	d1a6      	bne.n	800c362 <_strtod_l+0x562>
 800c414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c416:	9300      	str	r3, [sp, #0]
 800c418:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c41a:	4633      	mov	r3, r6
 800c41c:	465a      	mov	r2, fp
 800c41e:	4620      	mov	r0, r4
 800c420:	f7ff f8cc 	bl	800b5bc <__s2b>
 800c424:	9009      	str	r0, [sp, #36]	; 0x24
 800c426:	2800      	cmp	r0, #0
 800c428:	f43f af2a 	beq.w	800c280 <_strtod_l+0x480>
 800c42c:	9a08      	ldr	r2, [sp, #32]
 800c42e:	9b05      	ldr	r3, [sp, #20]
 800c430:	2a00      	cmp	r2, #0
 800c432:	eba3 0307 	sub.w	r3, r3, r7
 800c436:	bfa8      	it	ge
 800c438:	2300      	movge	r3, #0
 800c43a:	930c      	str	r3, [sp, #48]	; 0x30
 800c43c:	2500      	movs	r5, #0
 800c43e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c442:	9312      	str	r3, [sp, #72]	; 0x48
 800c444:	46ab      	mov	fp, r5
 800c446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c448:	4620      	mov	r0, r4
 800c44a:	6859      	ldr	r1, [r3, #4]
 800c44c:	f7ff f80e 	bl	800b46c <_Balloc>
 800c450:	9005      	str	r0, [sp, #20]
 800c452:	2800      	cmp	r0, #0
 800c454:	f43f af18 	beq.w	800c288 <_strtod_l+0x488>
 800c458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c45a:	691a      	ldr	r2, [r3, #16]
 800c45c:	3202      	adds	r2, #2
 800c45e:	f103 010c 	add.w	r1, r3, #12
 800c462:	0092      	lsls	r2, r2, #2
 800c464:	300c      	adds	r0, #12
 800c466:	f000 ffe5 	bl	800d434 <memcpy>
 800c46a:	ec49 8b10 	vmov	d0, r8, r9
 800c46e:	aa18      	add	r2, sp, #96	; 0x60
 800c470:	a917      	add	r1, sp, #92	; 0x5c
 800c472:	4620      	mov	r0, r4
 800c474:	f7ff fbd6 	bl	800bc24 <__d2b>
 800c478:	ec49 8b18 	vmov	d8, r8, r9
 800c47c:	9016      	str	r0, [sp, #88]	; 0x58
 800c47e:	2800      	cmp	r0, #0
 800c480:	f43f af02 	beq.w	800c288 <_strtod_l+0x488>
 800c484:	2101      	movs	r1, #1
 800c486:	4620      	mov	r0, r4
 800c488:	f7ff f930 	bl	800b6ec <__i2b>
 800c48c:	4683      	mov	fp, r0
 800c48e:	2800      	cmp	r0, #0
 800c490:	f43f aefa 	beq.w	800c288 <_strtod_l+0x488>
 800c494:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c496:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c498:	2e00      	cmp	r6, #0
 800c49a:	bfab      	itete	ge
 800c49c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800c49e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800c4a0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c4a2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800c4a6:	bfac      	ite	ge
 800c4a8:	eb06 0a03 	addge.w	sl, r6, r3
 800c4ac:	1b9f      	sublt	r7, r3, r6
 800c4ae:	9b04      	ldr	r3, [sp, #16]
 800c4b0:	1af6      	subs	r6, r6, r3
 800c4b2:	4416      	add	r6, r2
 800c4b4:	4ba0      	ldr	r3, [pc, #640]	; (800c738 <_strtod_l+0x938>)
 800c4b6:	3e01      	subs	r6, #1
 800c4b8:	429e      	cmp	r6, r3
 800c4ba:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c4be:	f280 80c4 	bge.w	800c64a <_strtod_l+0x84a>
 800c4c2:	1b9b      	subs	r3, r3, r6
 800c4c4:	2b1f      	cmp	r3, #31
 800c4c6:	eba2 0203 	sub.w	r2, r2, r3
 800c4ca:	f04f 0101 	mov.w	r1, #1
 800c4ce:	f300 80b0 	bgt.w	800c632 <_strtod_l+0x832>
 800c4d2:	fa01 f303 	lsl.w	r3, r1, r3
 800c4d6:	930e      	str	r3, [sp, #56]	; 0x38
 800c4d8:	2300      	movs	r3, #0
 800c4da:	930d      	str	r3, [sp, #52]	; 0x34
 800c4dc:	eb0a 0602 	add.w	r6, sl, r2
 800c4e0:	9b04      	ldr	r3, [sp, #16]
 800c4e2:	45b2      	cmp	sl, r6
 800c4e4:	4417      	add	r7, r2
 800c4e6:	441f      	add	r7, r3
 800c4e8:	4653      	mov	r3, sl
 800c4ea:	bfa8      	it	ge
 800c4ec:	4633      	movge	r3, r6
 800c4ee:	42bb      	cmp	r3, r7
 800c4f0:	bfa8      	it	ge
 800c4f2:	463b      	movge	r3, r7
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	bfc2      	ittt	gt
 800c4f8:	1af6      	subgt	r6, r6, r3
 800c4fa:	1aff      	subgt	r7, r7, r3
 800c4fc:	ebaa 0a03 	subgt.w	sl, sl, r3
 800c500:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c502:	2b00      	cmp	r3, #0
 800c504:	dd17      	ble.n	800c536 <_strtod_l+0x736>
 800c506:	4659      	mov	r1, fp
 800c508:	461a      	mov	r2, r3
 800c50a:	4620      	mov	r0, r4
 800c50c:	f7ff f9ae 	bl	800b86c <__pow5mult>
 800c510:	4683      	mov	fp, r0
 800c512:	2800      	cmp	r0, #0
 800c514:	f43f aeb8 	beq.w	800c288 <_strtod_l+0x488>
 800c518:	4601      	mov	r1, r0
 800c51a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c51c:	4620      	mov	r0, r4
 800c51e:	f7ff f8fb 	bl	800b718 <__multiply>
 800c522:	900b      	str	r0, [sp, #44]	; 0x2c
 800c524:	2800      	cmp	r0, #0
 800c526:	f43f aeaf 	beq.w	800c288 <_strtod_l+0x488>
 800c52a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c52c:	4620      	mov	r0, r4
 800c52e:	f7fe ffdd 	bl	800b4ec <_Bfree>
 800c532:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c534:	9316      	str	r3, [sp, #88]	; 0x58
 800c536:	2e00      	cmp	r6, #0
 800c538:	f300 808c 	bgt.w	800c654 <_strtod_l+0x854>
 800c53c:	9b08      	ldr	r3, [sp, #32]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	dd08      	ble.n	800c554 <_strtod_l+0x754>
 800c542:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c544:	9905      	ldr	r1, [sp, #20]
 800c546:	4620      	mov	r0, r4
 800c548:	f7ff f990 	bl	800b86c <__pow5mult>
 800c54c:	9005      	str	r0, [sp, #20]
 800c54e:	2800      	cmp	r0, #0
 800c550:	f43f ae9a 	beq.w	800c288 <_strtod_l+0x488>
 800c554:	2f00      	cmp	r7, #0
 800c556:	dd08      	ble.n	800c56a <_strtod_l+0x76a>
 800c558:	9905      	ldr	r1, [sp, #20]
 800c55a:	463a      	mov	r2, r7
 800c55c:	4620      	mov	r0, r4
 800c55e:	f7ff f9df 	bl	800b920 <__lshift>
 800c562:	9005      	str	r0, [sp, #20]
 800c564:	2800      	cmp	r0, #0
 800c566:	f43f ae8f 	beq.w	800c288 <_strtod_l+0x488>
 800c56a:	f1ba 0f00 	cmp.w	sl, #0
 800c56e:	dd08      	ble.n	800c582 <_strtod_l+0x782>
 800c570:	4659      	mov	r1, fp
 800c572:	4652      	mov	r2, sl
 800c574:	4620      	mov	r0, r4
 800c576:	f7ff f9d3 	bl	800b920 <__lshift>
 800c57a:	4683      	mov	fp, r0
 800c57c:	2800      	cmp	r0, #0
 800c57e:	f43f ae83 	beq.w	800c288 <_strtod_l+0x488>
 800c582:	9a05      	ldr	r2, [sp, #20]
 800c584:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c586:	4620      	mov	r0, r4
 800c588:	f7ff fa52 	bl	800ba30 <__mdiff>
 800c58c:	4605      	mov	r5, r0
 800c58e:	2800      	cmp	r0, #0
 800c590:	f43f ae7a 	beq.w	800c288 <_strtod_l+0x488>
 800c594:	68c3      	ldr	r3, [r0, #12]
 800c596:	930b      	str	r3, [sp, #44]	; 0x2c
 800c598:	2300      	movs	r3, #0
 800c59a:	60c3      	str	r3, [r0, #12]
 800c59c:	4659      	mov	r1, fp
 800c59e:	f7ff fa2b 	bl	800b9f8 <__mcmp>
 800c5a2:	2800      	cmp	r0, #0
 800c5a4:	da60      	bge.n	800c668 <_strtod_l+0x868>
 800c5a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5a8:	ea53 0308 	orrs.w	r3, r3, r8
 800c5ac:	f040 8084 	bne.w	800c6b8 <_strtod_l+0x8b8>
 800c5b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d17f      	bne.n	800c6b8 <_strtod_l+0x8b8>
 800c5b8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c5bc:	0d1b      	lsrs	r3, r3, #20
 800c5be:	051b      	lsls	r3, r3, #20
 800c5c0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c5c4:	d978      	bls.n	800c6b8 <_strtod_l+0x8b8>
 800c5c6:	696b      	ldr	r3, [r5, #20]
 800c5c8:	b913      	cbnz	r3, 800c5d0 <_strtod_l+0x7d0>
 800c5ca:	692b      	ldr	r3, [r5, #16]
 800c5cc:	2b01      	cmp	r3, #1
 800c5ce:	dd73      	ble.n	800c6b8 <_strtod_l+0x8b8>
 800c5d0:	4629      	mov	r1, r5
 800c5d2:	2201      	movs	r2, #1
 800c5d4:	4620      	mov	r0, r4
 800c5d6:	f7ff f9a3 	bl	800b920 <__lshift>
 800c5da:	4659      	mov	r1, fp
 800c5dc:	4605      	mov	r5, r0
 800c5de:	f7ff fa0b 	bl	800b9f8 <__mcmp>
 800c5e2:	2800      	cmp	r0, #0
 800c5e4:	dd68      	ble.n	800c6b8 <_strtod_l+0x8b8>
 800c5e6:	9904      	ldr	r1, [sp, #16]
 800c5e8:	4a54      	ldr	r2, [pc, #336]	; (800c73c <_strtod_l+0x93c>)
 800c5ea:	464b      	mov	r3, r9
 800c5ec:	2900      	cmp	r1, #0
 800c5ee:	f000 8084 	beq.w	800c6fa <_strtod_l+0x8fa>
 800c5f2:	ea02 0109 	and.w	r1, r2, r9
 800c5f6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c5fa:	dc7e      	bgt.n	800c6fa <_strtod_l+0x8fa>
 800c5fc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c600:	f77f aeb3 	ble.w	800c36a <_strtod_l+0x56a>
 800c604:	4b4e      	ldr	r3, [pc, #312]	; (800c740 <_strtod_l+0x940>)
 800c606:	4640      	mov	r0, r8
 800c608:	4649      	mov	r1, r9
 800c60a:	2200      	movs	r2, #0
 800c60c:	f7f4 f804 	bl	8000618 <__aeabi_dmul>
 800c610:	4b4a      	ldr	r3, [pc, #296]	; (800c73c <_strtod_l+0x93c>)
 800c612:	400b      	ands	r3, r1
 800c614:	4680      	mov	r8, r0
 800c616:	4689      	mov	r9, r1
 800c618:	2b00      	cmp	r3, #0
 800c61a:	f47f ae3f 	bne.w	800c29c <_strtod_l+0x49c>
 800c61e:	2322      	movs	r3, #34	; 0x22
 800c620:	6023      	str	r3, [r4, #0]
 800c622:	e63b      	b.n	800c29c <_strtod_l+0x49c>
 800c624:	f04f 32ff 	mov.w	r2, #4294967295
 800c628:	fa02 f303 	lsl.w	r3, r2, r3
 800c62c:	ea03 0808 	and.w	r8, r3, r8
 800c630:	e6e8      	b.n	800c404 <_strtod_l+0x604>
 800c632:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800c636:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800c63a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800c63e:	36e2      	adds	r6, #226	; 0xe2
 800c640:	fa01 f306 	lsl.w	r3, r1, r6
 800c644:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800c648:	e748      	b.n	800c4dc <_strtod_l+0x6dc>
 800c64a:	2100      	movs	r1, #0
 800c64c:	2301      	movs	r3, #1
 800c64e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800c652:	e743      	b.n	800c4dc <_strtod_l+0x6dc>
 800c654:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c656:	4632      	mov	r2, r6
 800c658:	4620      	mov	r0, r4
 800c65a:	f7ff f961 	bl	800b920 <__lshift>
 800c65e:	9016      	str	r0, [sp, #88]	; 0x58
 800c660:	2800      	cmp	r0, #0
 800c662:	f47f af6b 	bne.w	800c53c <_strtod_l+0x73c>
 800c666:	e60f      	b.n	800c288 <_strtod_l+0x488>
 800c668:	46ca      	mov	sl, r9
 800c66a:	d171      	bne.n	800c750 <_strtod_l+0x950>
 800c66c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c66e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c672:	b352      	cbz	r2, 800c6ca <_strtod_l+0x8ca>
 800c674:	4a33      	ldr	r2, [pc, #204]	; (800c744 <_strtod_l+0x944>)
 800c676:	4293      	cmp	r3, r2
 800c678:	d12a      	bne.n	800c6d0 <_strtod_l+0x8d0>
 800c67a:	9b04      	ldr	r3, [sp, #16]
 800c67c:	4641      	mov	r1, r8
 800c67e:	b1fb      	cbz	r3, 800c6c0 <_strtod_l+0x8c0>
 800c680:	4b2e      	ldr	r3, [pc, #184]	; (800c73c <_strtod_l+0x93c>)
 800c682:	ea09 0303 	and.w	r3, r9, r3
 800c686:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c68a:	f04f 32ff 	mov.w	r2, #4294967295
 800c68e:	d81a      	bhi.n	800c6c6 <_strtod_l+0x8c6>
 800c690:	0d1b      	lsrs	r3, r3, #20
 800c692:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c696:	fa02 f303 	lsl.w	r3, r2, r3
 800c69a:	4299      	cmp	r1, r3
 800c69c:	d118      	bne.n	800c6d0 <_strtod_l+0x8d0>
 800c69e:	4b2a      	ldr	r3, [pc, #168]	; (800c748 <_strtod_l+0x948>)
 800c6a0:	459a      	cmp	sl, r3
 800c6a2:	d102      	bne.n	800c6aa <_strtod_l+0x8aa>
 800c6a4:	3101      	adds	r1, #1
 800c6a6:	f43f adef 	beq.w	800c288 <_strtod_l+0x488>
 800c6aa:	4b24      	ldr	r3, [pc, #144]	; (800c73c <_strtod_l+0x93c>)
 800c6ac:	ea0a 0303 	and.w	r3, sl, r3
 800c6b0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800c6b4:	f04f 0800 	mov.w	r8, #0
 800c6b8:	9b04      	ldr	r3, [sp, #16]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d1a2      	bne.n	800c604 <_strtod_l+0x804>
 800c6be:	e5ed      	b.n	800c29c <_strtod_l+0x49c>
 800c6c0:	f04f 33ff 	mov.w	r3, #4294967295
 800c6c4:	e7e9      	b.n	800c69a <_strtod_l+0x89a>
 800c6c6:	4613      	mov	r3, r2
 800c6c8:	e7e7      	b.n	800c69a <_strtod_l+0x89a>
 800c6ca:	ea53 0308 	orrs.w	r3, r3, r8
 800c6ce:	d08a      	beq.n	800c5e6 <_strtod_l+0x7e6>
 800c6d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c6d2:	b1e3      	cbz	r3, 800c70e <_strtod_l+0x90e>
 800c6d4:	ea13 0f0a 	tst.w	r3, sl
 800c6d8:	d0ee      	beq.n	800c6b8 <_strtod_l+0x8b8>
 800c6da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6dc:	9a04      	ldr	r2, [sp, #16]
 800c6de:	4640      	mov	r0, r8
 800c6e0:	4649      	mov	r1, r9
 800c6e2:	b1c3      	cbz	r3, 800c716 <_strtod_l+0x916>
 800c6e4:	f7ff fb6f 	bl	800bdc6 <sulp>
 800c6e8:	4602      	mov	r2, r0
 800c6ea:	460b      	mov	r3, r1
 800c6ec:	ec51 0b18 	vmov	r0, r1, d8
 800c6f0:	f7f3 fddc 	bl	80002ac <__adddf3>
 800c6f4:	4680      	mov	r8, r0
 800c6f6:	4689      	mov	r9, r1
 800c6f8:	e7de      	b.n	800c6b8 <_strtod_l+0x8b8>
 800c6fa:	4013      	ands	r3, r2
 800c6fc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c700:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800c704:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800c708:	f04f 38ff 	mov.w	r8, #4294967295
 800c70c:	e7d4      	b.n	800c6b8 <_strtod_l+0x8b8>
 800c70e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c710:	ea13 0f08 	tst.w	r3, r8
 800c714:	e7e0      	b.n	800c6d8 <_strtod_l+0x8d8>
 800c716:	f7ff fb56 	bl	800bdc6 <sulp>
 800c71a:	4602      	mov	r2, r0
 800c71c:	460b      	mov	r3, r1
 800c71e:	ec51 0b18 	vmov	r0, r1, d8
 800c722:	f7f3 fdc1 	bl	80002a8 <__aeabi_dsub>
 800c726:	2200      	movs	r2, #0
 800c728:	2300      	movs	r3, #0
 800c72a:	4680      	mov	r8, r0
 800c72c:	4689      	mov	r9, r1
 800c72e:	f7f4 f9db 	bl	8000ae8 <__aeabi_dcmpeq>
 800c732:	2800      	cmp	r0, #0
 800c734:	d0c0      	beq.n	800c6b8 <_strtod_l+0x8b8>
 800c736:	e618      	b.n	800c36a <_strtod_l+0x56a>
 800c738:	fffffc02 	.word	0xfffffc02
 800c73c:	7ff00000 	.word	0x7ff00000
 800c740:	39500000 	.word	0x39500000
 800c744:	000fffff 	.word	0x000fffff
 800c748:	7fefffff 	.word	0x7fefffff
 800c74c:	0800df80 	.word	0x0800df80
 800c750:	4659      	mov	r1, fp
 800c752:	4628      	mov	r0, r5
 800c754:	f7ff fac0 	bl	800bcd8 <__ratio>
 800c758:	ec57 6b10 	vmov	r6, r7, d0
 800c75c:	ee10 0a10 	vmov	r0, s0
 800c760:	2200      	movs	r2, #0
 800c762:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c766:	4639      	mov	r1, r7
 800c768:	f7f4 f9d2 	bl	8000b10 <__aeabi_dcmple>
 800c76c:	2800      	cmp	r0, #0
 800c76e:	d071      	beq.n	800c854 <_strtod_l+0xa54>
 800c770:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c772:	2b00      	cmp	r3, #0
 800c774:	d17c      	bne.n	800c870 <_strtod_l+0xa70>
 800c776:	f1b8 0f00 	cmp.w	r8, #0
 800c77a:	d15a      	bne.n	800c832 <_strtod_l+0xa32>
 800c77c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c780:	2b00      	cmp	r3, #0
 800c782:	d15d      	bne.n	800c840 <_strtod_l+0xa40>
 800c784:	4b90      	ldr	r3, [pc, #576]	; (800c9c8 <_strtod_l+0xbc8>)
 800c786:	2200      	movs	r2, #0
 800c788:	4630      	mov	r0, r6
 800c78a:	4639      	mov	r1, r7
 800c78c:	f7f4 f9b6 	bl	8000afc <__aeabi_dcmplt>
 800c790:	2800      	cmp	r0, #0
 800c792:	d15c      	bne.n	800c84e <_strtod_l+0xa4e>
 800c794:	4630      	mov	r0, r6
 800c796:	4639      	mov	r1, r7
 800c798:	4b8c      	ldr	r3, [pc, #560]	; (800c9cc <_strtod_l+0xbcc>)
 800c79a:	2200      	movs	r2, #0
 800c79c:	f7f3 ff3c 	bl	8000618 <__aeabi_dmul>
 800c7a0:	4606      	mov	r6, r0
 800c7a2:	460f      	mov	r7, r1
 800c7a4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800c7a8:	9606      	str	r6, [sp, #24]
 800c7aa:	9307      	str	r3, [sp, #28]
 800c7ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c7b0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c7b4:	4b86      	ldr	r3, [pc, #536]	; (800c9d0 <_strtod_l+0xbd0>)
 800c7b6:	ea0a 0303 	and.w	r3, sl, r3
 800c7ba:	930d      	str	r3, [sp, #52]	; 0x34
 800c7bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c7be:	4b85      	ldr	r3, [pc, #532]	; (800c9d4 <_strtod_l+0xbd4>)
 800c7c0:	429a      	cmp	r2, r3
 800c7c2:	f040 8090 	bne.w	800c8e6 <_strtod_l+0xae6>
 800c7c6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800c7ca:	ec49 8b10 	vmov	d0, r8, r9
 800c7ce:	f7ff f9b9 	bl	800bb44 <__ulp>
 800c7d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c7d6:	ec51 0b10 	vmov	r0, r1, d0
 800c7da:	f7f3 ff1d 	bl	8000618 <__aeabi_dmul>
 800c7de:	4642      	mov	r2, r8
 800c7e0:	464b      	mov	r3, r9
 800c7e2:	f7f3 fd63 	bl	80002ac <__adddf3>
 800c7e6:	460b      	mov	r3, r1
 800c7e8:	4979      	ldr	r1, [pc, #484]	; (800c9d0 <_strtod_l+0xbd0>)
 800c7ea:	4a7b      	ldr	r2, [pc, #492]	; (800c9d8 <_strtod_l+0xbd8>)
 800c7ec:	4019      	ands	r1, r3
 800c7ee:	4291      	cmp	r1, r2
 800c7f0:	4680      	mov	r8, r0
 800c7f2:	d944      	bls.n	800c87e <_strtod_l+0xa7e>
 800c7f4:	ee18 2a90 	vmov	r2, s17
 800c7f8:	4b78      	ldr	r3, [pc, #480]	; (800c9dc <_strtod_l+0xbdc>)
 800c7fa:	429a      	cmp	r2, r3
 800c7fc:	d104      	bne.n	800c808 <_strtod_l+0xa08>
 800c7fe:	ee18 3a10 	vmov	r3, s16
 800c802:	3301      	adds	r3, #1
 800c804:	f43f ad40 	beq.w	800c288 <_strtod_l+0x488>
 800c808:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800c9dc <_strtod_l+0xbdc>
 800c80c:	f04f 38ff 	mov.w	r8, #4294967295
 800c810:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c812:	4620      	mov	r0, r4
 800c814:	f7fe fe6a 	bl	800b4ec <_Bfree>
 800c818:	9905      	ldr	r1, [sp, #20]
 800c81a:	4620      	mov	r0, r4
 800c81c:	f7fe fe66 	bl	800b4ec <_Bfree>
 800c820:	4659      	mov	r1, fp
 800c822:	4620      	mov	r0, r4
 800c824:	f7fe fe62 	bl	800b4ec <_Bfree>
 800c828:	4629      	mov	r1, r5
 800c82a:	4620      	mov	r0, r4
 800c82c:	f7fe fe5e 	bl	800b4ec <_Bfree>
 800c830:	e609      	b.n	800c446 <_strtod_l+0x646>
 800c832:	f1b8 0f01 	cmp.w	r8, #1
 800c836:	d103      	bne.n	800c840 <_strtod_l+0xa40>
 800c838:	f1b9 0f00 	cmp.w	r9, #0
 800c83c:	f43f ad95 	beq.w	800c36a <_strtod_l+0x56a>
 800c840:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800c998 <_strtod_l+0xb98>
 800c844:	4f60      	ldr	r7, [pc, #384]	; (800c9c8 <_strtod_l+0xbc8>)
 800c846:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c84a:	2600      	movs	r6, #0
 800c84c:	e7ae      	b.n	800c7ac <_strtod_l+0x9ac>
 800c84e:	4f5f      	ldr	r7, [pc, #380]	; (800c9cc <_strtod_l+0xbcc>)
 800c850:	2600      	movs	r6, #0
 800c852:	e7a7      	b.n	800c7a4 <_strtod_l+0x9a4>
 800c854:	4b5d      	ldr	r3, [pc, #372]	; (800c9cc <_strtod_l+0xbcc>)
 800c856:	4630      	mov	r0, r6
 800c858:	4639      	mov	r1, r7
 800c85a:	2200      	movs	r2, #0
 800c85c:	f7f3 fedc 	bl	8000618 <__aeabi_dmul>
 800c860:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c862:	4606      	mov	r6, r0
 800c864:	460f      	mov	r7, r1
 800c866:	2b00      	cmp	r3, #0
 800c868:	d09c      	beq.n	800c7a4 <_strtod_l+0x9a4>
 800c86a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c86e:	e79d      	b.n	800c7ac <_strtod_l+0x9ac>
 800c870:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800c9a0 <_strtod_l+0xba0>
 800c874:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c878:	ec57 6b17 	vmov	r6, r7, d7
 800c87c:	e796      	b.n	800c7ac <_strtod_l+0x9ac>
 800c87e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800c882:	9b04      	ldr	r3, [sp, #16]
 800c884:	46ca      	mov	sl, r9
 800c886:	2b00      	cmp	r3, #0
 800c888:	d1c2      	bne.n	800c810 <_strtod_l+0xa10>
 800c88a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c88e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c890:	0d1b      	lsrs	r3, r3, #20
 800c892:	051b      	lsls	r3, r3, #20
 800c894:	429a      	cmp	r2, r3
 800c896:	d1bb      	bne.n	800c810 <_strtod_l+0xa10>
 800c898:	4630      	mov	r0, r6
 800c89a:	4639      	mov	r1, r7
 800c89c:	f7f4 fa1c 	bl	8000cd8 <__aeabi_d2lz>
 800c8a0:	f7f3 fe8c 	bl	80005bc <__aeabi_l2d>
 800c8a4:	4602      	mov	r2, r0
 800c8a6:	460b      	mov	r3, r1
 800c8a8:	4630      	mov	r0, r6
 800c8aa:	4639      	mov	r1, r7
 800c8ac:	f7f3 fcfc 	bl	80002a8 <__aeabi_dsub>
 800c8b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c8b2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c8b6:	ea43 0308 	orr.w	r3, r3, r8
 800c8ba:	4313      	orrs	r3, r2
 800c8bc:	4606      	mov	r6, r0
 800c8be:	460f      	mov	r7, r1
 800c8c0:	d054      	beq.n	800c96c <_strtod_l+0xb6c>
 800c8c2:	a339      	add	r3, pc, #228	; (adr r3, 800c9a8 <_strtod_l+0xba8>)
 800c8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8c8:	f7f4 f918 	bl	8000afc <__aeabi_dcmplt>
 800c8cc:	2800      	cmp	r0, #0
 800c8ce:	f47f ace5 	bne.w	800c29c <_strtod_l+0x49c>
 800c8d2:	a337      	add	r3, pc, #220	; (adr r3, 800c9b0 <_strtod_l+0xbb0>)
 800c8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8d8:	4630      	mov	r0, r6
 800c8da:	4639      	mov	r1, r7
 800c8dc:	f7f4 f92c 	bl	8000b38 <__aeabi_dcmpgt>
 800c8e0:	2800      	cmp	r0, #0
 800c8e2:	d095      	beq.n	800c810 <_strtod_l+0xa10>
 800c8e4:	e4da      	b.n	800c29c <_strtod_l+0x49c>
 800c8e6:	9b04      	ldr	r3, [sp, #16]
 800c8e8:	b333      	cbz	r3, 800c938 <_strtod_l+0xb38>
 800c8ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8ec:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c8f0:	d822      	bhi.n	800c938 <_strtod_l+0xb38>
 800c8f2:	a331      	add	r3, pc, #196	; (adr r3, 800c9b8 <_strtod_l+0xbb8>)
 800c8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f8:	4630      	mov	r0, r6
 800c8fa:	4639      	mov	r1, r7
 800c8fc:	f7f4 f908 	bl	8000b10 <__aeabi_dcmple>
 800c900:	b1a0      	cbz	r0, 800c92c <_strtod_l+0xb2c>
 800c902:	4639      	mov	r1, r7
 800c904:	4630      	mov	r0, r6
 800c906:	f7f4 f95f 	bl	8000bc8 <__aeabi_d2uiz>
 800c90a:	2801      	cmp	r0, #1
 800c90c:	bf38      	it	cc
 800c90e:	2001      	movcc	r0, #1
 800c910:	f7f3 fe08 	bl	8000524 <__aeabi_ui2d>
 800c914:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c916:	4606      	mov	r6, r0
 800c918:	460f      	mov	r7, r1
 800c91a:	bb23      	cbnz	r3, 800c966 <_strtod_l+0xb66>
 800c91c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c920:	9010      	str	r0, [sp, #64]	; 0x40
 800c922:	9311      	str	r3, [sp, #68]	; 0x44
 800c924:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c928:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c92c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c92e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c930:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c934:	1a9b      	subs	r3, r3, r2
 800c936:	930f      	str	r3, [sp, #60]	; 0x3c
 800c938:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c93c:	eeb0 0a48 	vmov.f32	s0, s16
 800c940:	eef0 0a68 	vmov.f32	s1, s17
 800c944:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800c948:	f7ff f8fc 	bl	800bb44 <__ulp>
 800c94c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c950:	ec53 2b10 	vmov	r2, r3, d0
 800c954:	f7f3 fe60 	bl	8000618 <__aeabi_dmul>
 800c958:	ec53 2b18 	vmov	r2, r3, d8
 800c95c:	f7f3 fca6 	bl	80002ac <__adddf3>
 800c960:	4680      	mov	r8, r0
 800c962:	4689      	mov	r9, r1
 800c964:	e78d      	b.n	800c882 <_strtod_l+0xa82>
 800c966:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800c96a:	e7db      	b.n	800c924 <_strtod_l+0xb24>
 800c96c:	a314      	add	r3, pc, #80	; (adr r3, 800c9c0 <_strtod_l+0xbc0>)
 800c96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c972:	f7f4 f8c3 	bl	8000afc <__aeabi_dcmplt>
 800c976:	e7b3      	b.n	800c8e0 <_strtod_l+0xae0>
 800c978:	2300      	movs	r3, #0
 800c97a:	930a      	str	r3, [sp, #40]	; 0x28
 800c97c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c97e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c980:	6013      	str	r3, [r2, #0]
 800c982:	f7ff ba7c 	b.w	800be7e <_strtod_l+0x7e>
 800c986:	2a65      	cmp	r2, #101	; 0x65
 800c988:	f43f ab75 	beq.w	800c076 <_strtod_l+0x276>
 800c98c:	2a45      	cmp	r2, #69	; 0x45
 800c98e:	f43f ab72 	beq.w	800c076 <_strtod_l+0x276>
 800c992:	2301      	movs	r3, #1
 800c994:	f7ff bbaa 	b.w	800c0ec <_strtod_l+0x2ec>
 800c998:	00000000 	.word	0x00000000
 800c99c:	bff00000 	.word	0xbff00000
 800c9a0:	00000000 	.word	0x00000000
 800c9a4:	3ff00000 	.word	0x3ff00000
 800c9a8:	94a03595 	.word	0x94a03595
 800c9ac:	3fdfffff 	.word	0x3fdfffff
 800c9b0:	35afe535 	.word	0x35afe535
 800c9b4:	3fe00000 	.word	0x3fe00000
 800c9b8:	ffc00000 	.word	0xffc00000
 800c9bc:	41dfffff 	.word	0x41dfffff
 800c9c0:	94a03595 	.word	0x94a03595
 800c9c4:	3fcfffff 	.word	0x3fcfffff
 800c9c8:	3ff00000 	.word	0x3ff00000
 800c9cc:	3fe00000 	.word	0x3fe00000
 800c9d0:	7ff00000 	.word	0x7ff00000
 800c9d4:	7fe00000 	.word	0x7fe00000
 800c9d8:	7c9fffff 	.word	0x7c9fffff
 800c9dc:	7fefffff 	.word	0x7fefffff

0800c9e0 <_strtod_r>:
 800c9e0:	4b01      	ldr	r3, [pc, #4]	; (800c9e8 <_strtod_r+0x8>)
 800c9e2:	f7ff ba0d 	b.w	800be00 <_strtod_l>
 800c9e6:	bf00      	nop
 800c9e8:	20000078 	.word	0x20000078

0800c9ec <_strtol_l.constprop.0>:
 800c9ec:	2b01      	cmp	r3, #1
 800c9ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9f2:	d001      	beq.n	800c9f8 <_strtol_l.constprop.0+0xc>
 800c9f4:	2b24      	cmp	r3, #36	; 0x24
 800c9f6:	d906      	bls.n	800ca06 <_strtol_l.constprop.0+0x1a>
 800c9f8:	f7fd fd88 	bl	800a50c <__errno>
 800c9fc:	2316      	movs	r3, #22
 800c9fe:	6003      	str	r3, [r0, #0]
 800ca00:	2000      	movs	r0, #0
 800ca02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca06:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800caec <_strtol_l.constprop.0+0x100>
 800ca0a:	460d      	mov	r5, r1
 800ca0c:	462e      	mov	r6, r5
 800ca0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ca12:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800ca16:	f017 0708 	ands.w	r7, r7, #8
 800ca1a:	d1f7      	bne.n	800ca0c <_strtol_l.constprop.0+0x20>
 800ca1c:	2c2d      	cmp	r4, #45	; 0x2d
 800ca1e:	d132      	bne.n	800ca86 <_strtol_l.constprop.0+0x9a>
 800ca20:	782c      	ldrb	r4, [r5, #0]
 800ca22:	2701      	movs	r7, #1
 800ca24:	1cb5      	adds	r5, r6, #2
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d05b      	beq.n	800cae2 <_strtol_l.constprop.0+0xf6>
 800ca2a:	2b10      	cmp	r3, #16
 800ca2c:	d109      	bne.n	800ca42 <_strtol_l.constprop.0+0x56>
 800ca2e:	2c30      	cmp	r4, #48	; 0x30
 800ca30:	d107      	bne.n	800ca42 <_strtol_l.constprop.0+0x56>
 800ca32:	782c      	ldrb	r4, [r5, #0]
 800ca34:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ca38:	2c58      	cmp	r4, #88	; 0x58
 800ca3a:	d14d      	bne.n	800cad8 <_strtol_l.constprop.0+0xec>
 800ca3c:	786c      	ldrb	r4, [r5, #1]
 800ca3e:	2310      	movs	r3, #16
 800ca40:	3502      	adds	r5, #2
 800ca42:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ca46:	f108 38ff 	add.w	r8, r8, #4294967295
 800ca4a:	f04f 0e00 	mov.w	lr, #0
 800ca4e:	fbb8 f9f3 	udiv	r9, r8, r3
 800ca52:	4676      	mov	r6, lr
 800ca54:	fb03 8a19 	mls	sl, r3, r9, r8
 800ca58:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ca5c:	f1bc 0f09 	cmp.w	ip, #9
 800ca60:	d816      	bhi.n	800ca90 <_strtol_l.constprop.0+0xa4>
 800ca62:	4664      	mov	r4, ip
 800ca64:	42a3      	cmp	r3, r4
 800ca66:	dd24      	ble.n	800cab2 <_strtol_l.constprop.0+0xc6>
 800ca68:	f1be 3fff 	cmp.w	lr, #4294967295
 800ca6c:	d008      	beq.n	800ca80 <_strtol_l.constprop.0+0x94>
 800ca6e:	45b1      	cmp	r9, r6
 800ca70:	d31c      	bcc.n	800caac <_strtol_l.constprop.0+0xc0>
 800ca72:	d101      	bne.n	800ca78 <_strtol_l.constprop.0+0x8c>
 800ca74:	45a2      	cmp	sl, r4
 800ca76:	db19      	blt.n	800caac <_strtol_l.constprop.0+0xc0>
 800ca78:	fb06 4603 	mla	r6, r6, r3, r4
 800ca7c:	f04f 0e01 	mov.w	lr, #1
 800ca80:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ca84:	e7e8      	b.n	800ca58 <_strtol_l.constprop.0+0x6c>
 800ca86:	2c2b      	cmp	r4, #43	; 0x2b
 800ca88:	bf04      	itt	eq
 800ca8a:	782c      	ldrbeq	r4, [r5, #0]
 800ca8c:	1cb5      	addeq	r5, r6, #2
 800ca8e:	e7ca      	b.n	800ca26 <_strtol_l.constprop.0+0x3a>
 800ca90:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ca94:	f1bc 0f19 	cmp.w	ip, #25
 800ca98:	d801      	bhi.n	800ca9e <_strtol_l.constprop.0+0xb2>
 800ca9a:	3c37      	subs	r4, #55	; 0x37
 800ca9c:	e7e2      	b.n	800ca64 <_strtol_l.constprop.0+0x78>
 800ca9e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800caa2:	f1bc 0f19 	cmp.w	ip, #25
 800caa6:	d804      	bhi.n	800cab2 <_strtol_l.constprop.0+0xc6>
 800caa8:	3c57      	subs	r4, #87	; 0x57
 800caaa:	e7db      	b.n	800ca64 <_strtol_l.constprop.0+0x78>
 800caac:	f04f 3eff 	mov.w	lr, #4294967295
 800cab0:	e7e6      	b.n	800ca80 <_strtol_l.constprop.0+0x94>
 800cab2:	f1be 3fff 	cmp.w	lr, #4294967295
 800cab6:	d105      	bne.n	800cac4 <_strtol_l.constprop.0+0xd8>
 800cab8:	2322      	movs	r3, #34	; 0x22
 800caba:	6003      	str	r3, [r0, #0]
 800cabc:	4646      	mov	r6, r8
 800cabe:	b942      	cbnz	r2, 800cad2 <_strtol_l.constprop.0+0xe6>
 800cac0:	4630      	mov	r0, r6
 800cac2:	e79e      	b.n	800ca02 <_strtol_l.constprop.0+0x16>
 800cac4:	b107      	cbz	r7, 800cac8 <_strtol_l.constprop.0+0xdc>
 800cac6:	4276      	negs	r6, r6
 800cac8:	2a00      	cmp	r2, #0
 800caca:	d0f9      	beq.n	800cac0 <_strtol_l.constprop.0+0xd4>
 800cacc:	f1be 0f00 	cmp.w	lr, #0
 800cad0:	d000      	beq.n	800cad4 <_strtol_l.constprop.0+0xe8>
 800cad2:	1e69      	subs	r1, r5, #1
 800cad4:	6011      	str	r1, [r2, #0]
 800cad6:	e7f3      	b.n	800cac0 <_strtol_l.constprop.0+0xd4>
 800cad8:	2430      	movs	r4, #48	; 0x30
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d1b1      	bne.n	800ca42 <_strtol_l.constprop.0+0x56>
 800cade:	2308      	movs	r3, #8
 800cae0:	e7af      	b.n	800ca42 <_strtol_l.constprop.0+0x56>
 800cae2:	2c30      	cmp	r4, #48	; 0x30
 800cae4:	d0a5      	beq.n	800ca32 <_strtol_l.constprop.0+0x46>
 800cae6:	230a      	movs	r3, #10
 800cae8:	e7ab      	b.n	800ca42 <_strtol_l.constprop.0+0x56>
 800caea:	bf00      	nop
 800caec:	0800dfa9 	.word	0x0800dfa9

0800caf0 <_strtol_r>:
 800caf0:	f7ff bf7c 	b.w	800c9ec <_strtol_l.constprop.0>

0800caf4 <__ssputs_r>:
 800caf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800caf8:	688e      	ldr	r6, [r1, #8]
 800cafa:	461f      	mov	r7, r3
 800cafc:	42be      	cmp	r6, r7
 800cafe:	680b      	ldr	r3, [r1, #0]
 800cb00:	4682      	mov	sl, r0
 800cb02:	460c      	mov	r4, r1
 800cb04:	4690      	mov	r8, r2
 800cb06:	d82c      	bhi.n	800cb62 <__ssputs_r+0x6e>
 800cb08:	898a      	ldrh	r2, [r1, #12]
 800cb0a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cb0e:	d026      	beq.n	800cb5e <__ssputs_r+0x6a>
 800cb10:	6965      	ldr	r5, [r4, #20]
 800cb12:	6909      	ldr	r1, [r1, #16]
 800cb14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cb18:	eba3 0901 	sub.w	r9, r3, r1
 800cb1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cb20:	1c7b      	adds	r3, r7, #1
 800cb22:	444b      	add	r3, r9
 800cb24:	106d      	asrs	r5, r5, #1
 800cb26:	429d      	cmp	r5, r3
 800cb28:	bf38      	it	cc
 800cb2a:	461d      	movcc	r5, r3
 800cb2c:	0553      	lsls	r3, r2, #21
 800cb2e:	d527      	bpl.n	800cb80 <__ssputs_r+0x8c>
 800cb30:	4629      	mov	r1, r5
 800cb32:	f7fe fc0f 	bl	800b354 <_malloc_r>
 800cb36:	4606      	mov	r6, r0
 800cb38:	b360      	cbz	r0, 800cb94 <__ssputs_r+0xa0>
 800cb3a:	6921      	ldr	r1, [r4, #16]
 800cb3c:	464a      	mov	r2, r9
 800cb3e:	f000 fc79 	bl	800d434 <memcpy>
 800cb42:	89a3      	ldrh	r3, [r4, #12]
 800cb44:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cb48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb4c:	81a3      	strh	r3, [r4, #12]
 800cb4e:	6126      	str	r6, [r4, #16]
 800cb50:	6165      	str	r5, [r4, #20]
 800cb52:	444e      	add	r6, r9
 800cb54:	eba5 0509 	sub.w	r5, r5, r9
 800cb58:	6026      	str	r6, [r4, #0]
 800cb5a:	60a5      	str	r5, [r4, #8]
 800cb5c:	463e      	mov	r6, r7
 800cb5e:	42be      	cmp	r6, r7
 800cb60:	d900      	bls.n	800cb64 <__ssputs_r+0x70>
 800cb62:	463e      	mov	r6, r7
 800cb64:	6820      	ldr	r0, [r4, #0]
 800cb66:	4632      	mov	r2, r6
 800cb68:	4641      	mov	r1, r8
 800cb6a:	f000 fc05 	bl	800d378 <memmove>
 800cb6e:	68a3      	ldr	r3, [r4, #8]
 800cb70:	1b9b      	subs	r3, r3, r6
 800cb72:	60a3      	str	r3, [r4, #8]
 800cb74:	6823      	ldr	r3, [r4, #0]
 800cb76:	4433      	add	r3, r6
 800cb78:	6023      	str	r3, [r4, #0]
 800cb7a:	2000      	movs	r0, #0
 800cb7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb80:	462a      	mov	r2, r5
 800cb82:	f001 f80a 	bl	800db9a <_realloc_r>
 800cb86:	4606      	mov	r6, r0
 800cb88:	2800      	cmp	r0, #0
 800cb8a:	d1e0      	bne.n	800cb4e <__ssputs_r+0x5a>
 800cb8c:	6921      	ldr	r1, [r4, #16]
 800cb8e:	4650      	mov	r0, sl
 800cb90:	f7fe fb6c 	bl	800b26c <_free_r>
 800cb94:	230c      	movs	r3, #12
 800cb96:	f8ca 3000 	str.w	r3, [sl]
 800cb9a:	89a3      	ldrh	r3, [r4, #12]
 800cb9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cba0:	81a3      	strh	r3, [r4, #12]
 800cba2:	f04f 30ff 	mov.w	r0, #4294967295
 800cba6:	e7e9      	b.n	800cb7c <__ssputs_r+0x88>

0800cba8 <_svfiprintf_r>:
 800cba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbac:	4698      	mov	r8, r3
 800cbae:	898b      	ldrh	r3, [r1, #12]
 800cbb0:	061b      	lsls	r3, r3, #24
 800cbb2:	b09d      	sub	sp, #116	; 0x74
 800cbb4:	4607      	mov	r7, r0
 800cbb6:	460d      	mov	r5, r1
 800cbb8:	4614      	mov	r4, r2
 800cbba:	d50e      	bpl.n	800cbda <_svfiprintf_r+0x32>
 800cbbc:	690b      	ldr	r3, [r1, #16]
 800cbbe:	b963      	cbnz	r3, 800cbda <_svfiprintf_r+0x32>
 800cbc0:	2140      	movs	r1, #64	; 0x40
 800cbc2:	f7fe fbc7 	bl	800b354 <_malloc_r>
 800cbc6:	6028      	str	r0, [r5, #0]
 800cbc8:	6128      	str	r0, [r5, #16]
 800cbca:	b920      	cbnz	r0, 800cbd6 <_svfiprintf_r+0x2e>
 800cbcc:	230c      	movs	r3, #12
 800cbce:	603b      	str	r3, [r7, #0]
 800cbd0:	f04f 30ff 	mov.w	r0, #4294967295
 800cbd4:	e0d0      	b.n	800cd78 <_svfiprintf_r+0x1d0>
 800cbd6:	2340      	movs	r3, #64	; 0x40
 800cbd8:	616b      	str	r3, [r5, #20]
 800cbda:	2300      	movs	r3, #0
 800cbdc:	9309      	str	r3, [sp, #36]	; 0x24
 800cbde:	2320      	movs	r3, #32
 800cbe0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cbe4:	f8cd 800c 	str.w	r8, [sp, #12]
 800cbe8:	2330      	movs	r3, #48	; 0x30
 800cbea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cd90 <_svfiprintf_r+0x1e8>
 800cbee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cbf2:	f04f 0901 	mov.w	r9, #1
 800cbf6:	4623      	mov	r3, r4
 800cbf8:	469a      	mov	sl, r3
 800cbfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cbfe:	b10a      	cbz	r2, 800cc04 <_svfiprintf_r+0x5c>
 800cc00:	2a25      	cmp	r2, #37	; 0x25
 800cc02:	d1f9      	bne.n	800cbf8 <_svfiprintf_r+0x50>
 800cc04:	ebba 0b04 	subs.w	fp, sl, r4
 800cc08:	d00b      	beq.n	800cc22 <_svfiprintf_r+0x7a>
 800cc0a:	465b      	mov	r3, fp
 800cc0c:	4622      	mov	r2, r4
 800cc0e:	4629      	mov	r1, r5
 800cc10:	4638      	mov	r0, r7
 800cc12:	f7ff ff6f 	bl	800caf4 <__ssputs_r>
 800cc16:	3001      	adds	r0, #1
 800cc18:	f000 80a9 	beq.w	800cd6e <_svfiprintf_r+0x1c6>
 800cc1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc1e:	445a      	add	r2, fp
 800cc20:	9209      	str	r2, [sp, #36]	; 0x24
 800cc22:	f89a 3000 	ldrb.w	r3, [sl]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	f000 80a1 	beq.w	800cd6e <_svfiprintf_r+0x1c6>
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	f04f 32ff 	mov.w	r2, #4294967295
 800cc32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc36:	f10a 0a01 	add.w	sl, sl, #1
 800cc3a:	9304      	str	r3, [sp, #16]
 800cc3c:	9307      	str	r3, [sp, #28]
 800cc3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cc42:	931a      	str	r3, [sp, #104]	; 0x68
 800cc44:	4654      	mov	r4, sl
 800cc46:	2205      	movs	r2, #5
 800cc48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc4c:	4850      	ldr	r0, [pc, #320]	; (800cd90 <_svfiprintf_r+0x1e8>)
 800cc4e:	f7f3 facf 	bl	80001f0 <memchr>
 800cc52:	9a04      	ldr	r2, [sp, #16]
 800cc54:	b9d8      	cbnz	r0, 800cc8e <_svfiprintf_r+0xe6>
 800cc56:	06d0      	lsls	r0, r2, #27
 800cc58:	bf44      	itt	mi
 800cc5a:	2320      	movmi	r3, #32
 800cc5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc60:	0711      	lsls	r1, r2, #28
 800cc62:	bf44      	itt	mi
 800cc64:	232b      	movmi	r3, #43	; 0x2b
 800cc66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc6a:	f89a 3000 	ldrb.w	r3, [sl]
 800cc6e:	2b2a      	cmp	r3, #42	; 0x2a
 800cc70:	d015      	beq.n	800cc9e <_svfiprintf_r+0xf6>
 800cc72:	9a07      	ldr	r2, [sp, #28]
 800cc74:	4654      	mov	r4, sl
 800cc76:	2000      	movs	r0, #0
 800cc78:	f04f 0c0a 	mov.w	ip, #10
 800cc7c:	4621      	mov	r1, r4
 800cc7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc82:	3b30      	subs	r3, #48	; 0x30
 800cc84:	2b09      	cmp	r3, #9
 800cc86:	d94d      	bls.n	800cd24 <_svfiprintf_r+0x17c>
 800cc88:	b1b0      	cbz	r0, 800ccb8 <_svfiprintf_r+0x110>
 800cc8a:	9207      	str	r2, [sp, #28]
 800cc8c:	e014      	b.n	800ccb8 <_svfiprintf_r+0x110>
 800cc8e:	eba0 0308 	sub.w	r3, r0, r8
 800cc92:	fa09 f303 	lsl.w	r3, r9, r3
 800cc96:	4313      	orrs	r3, r2
 800cc98:	9304      	str	r3, [sp, #16]
 800cc9a:	46a2      	mov	sl, r4
 800cc9c:	e7d2      	b.n	800cc44 <_svfiprintf_r+0x9c>
 800cc9e:	9b03      	ldr	r3, [sp, #12]
 800cca0:	1d19      	adds	r1, r3, #4
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	9103      	str	r1, [sp, #12]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	bfbb      	ittet	lt
 800ccaa:	425b      	neglt	r3, r3
 800ccac:	f042 0202 	orrlt.w	r2, r2, #2
 800ccb0:	9307      	strge	r3, [sp, #28]
 800ccb2:	9307      	strlt	r3, [sp, #28]
 800ccb4:	bfb8      	it	lt
 800ccb6:	9204      	strlt	r2, [sp, #16]
 800ccb8:	7823      	ldrb	r3, [r4, #0]
 800ccba:	2b2e      	cmp	r3, #46	; 0x2e
 800ccbc:	d10c      	bne.n	800ccd8 <_svfiprintf_r+0x130>
 800ccbe:	7863      	ldrb	r3, [r4, #1]
 800ccc0:	2b2a      	cmp	r3, #42	; 0x2a
 800ccc2:	d134      	bne.n	800cd2e <_svfiprintf_r+0x186>
 800ccc4:	9b03      	ldr	r3, [sp, #12]
 800ccc6:	1d1a      	adds	r2, r3, #4
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	9203      	str	r2, [sp, #12]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	bfb8      	it	lt
 800ccd0:	f04f 33ff 	movlt.w	r3, #4294967295
 800ccd4:	3402      	adds	r4, #2
 800ccd6:	9305      	str	r3, [sp, #20]
 800ccd8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800cda0 <_svfiprintf_r+0x1f8>
 800ccdc:	7821      	ldrb	r1, [r4, #0]
 800ccde:	2203      	movs	r2, #3
 800cce0:	4650      	mov	r0, sl
 800cce2:	f7f3 fa85 	bl	80001f0 <memchr>
 800cce6:	b138      	cbz	r0, 800ccf8 <_svfiprintf_r+0x150>
 800cce8:	9b04      	ldr	r3, [sp, #16]
 800ccea:	eba0 000a 	sub.w	r0, r0, sl
 800ccee:	2240      	movs	r2, #64	; 0x40
 800ccf0:	4082      	lsls	r2, r0
 800ccf2:	4313      	orrs	r3, r2
 800ccf4:	3401      	adds	r4, #1
 800ccf6:	9304      	str	r3, [sp, #16]
 800ccf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccfc:	4825      	ldr	r0, [pc, #148]	; (800cd94 <_svfiprintf_r+0x1ec>)
 800ccfe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cd02:	2206      	movs	r2, #6
 800cd04:	f7f3 fa74 	bl	80001f0 <memchr>
 800cd08:	2800      	cmp	r0, #0
 800cd0a:	d038      	beq.n	800cd7e <_svfiprintf_r+0x1d6>
 800cd0c:	4b22      	ldr	r3, [pc, #136]	; (800cd98 <_svfiprintf_r+0x1f0>)
 800cd0e:	bb1b      	cbnz	r3, 800cd58 <_svfiprintf_r+0x1b0>
 800cd10:	9b03      	ldr	r3, [sp, #12]
 800cd12:	3307      	adds	r3, #7
 800cd14:	f023 0307 	bic.w	r3, r3, #7
 800cd18:	3308      	adds	r3, #8
 800cd1a:	9303      	str	r3, [sp, #12]
 800cd1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd1e:	4433      	add	r3, r6
 800cd20:	9309      	str	r3, [sp, #36]	; 0x24
 800cd22:	e768      	b.n	800cbf6 <_svfiprintf_r+0x4e>
 800cd24:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd28:	460c      	mov	r4, r1
 800cd2a:	2001      	movs	r0, #1
 800cd2c:	e7a6      	b.n	800cc7c <_svfiprintf_r+0xd4>
 800cd2e:	2300      	movs	r3, #0
 800cd30:	3401      	adds	r4, #1
 800cd32:	9305      	str	r3, [sp, #20]
 800cd34:	4619      	mov	r1, r3
 800cd36:	f04f 0c0a 	mov.w	ip, #10
 800cd3a:	4620      	mov	r0, r4
 800cd3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd40:	3a30      	subs	r2, #48	; 0x30
 800cd42:	2a09      	cmp	r2, #9
 800cd44:	d903      	bls.n	800cd4e <_svfiprintf_r+0x1a6>
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d0c6      	beq.n	800ccd8 <_svfiprintf_r+0x130>
 800cd4a:	9105      	str	r1, [sp, #20]
 800cd4c:	e7c4      	b.n	800ccd8 <_svfiprintf_r+0x130>
 800cd4e:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd52:	4604      	mov	r4, r0
 800cd54:	2301      	movs	r3, #1
 800cd56:	e7f0      	b.n	800cd3a <_svfiprintf_r+0x192>
 800cd58:	ab03      	add	r3, sp, #12
 800cd5a:	9300      	str	r3, [sp, #0]
 800cd5c:	462a      	mov	r2, r5
 800cd5e:	4b0f      	ldr	r3, [pc, #60]	; (800cd9c <_svfiprintf_r+0x1f4>)
 800cd60:	a904      	add	r1, sp, #16
 800cd62:	4638      	mov	r0, r7
 800cd64:	f7fc fbc4 	bl	80094f0 <_printf_float>
 800cd68:	1c42      	adds	r2, r0, #1
 800cd6a:	4606      	mov	r6, r0
 800cd6c:	d1d6      	bne.n	800cd1c <_svfiprintf_r+0x174>
 800cd6e:	89ab      	ldrh	r3, [r5, #12]
 800cd70:	065b      	lsls	r3, r3, #25
 800cd72:	f53f af2d 	bmi.w	800cbd0 <_svfiprintf_r+0x28>
 800cd76:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cd78:	b01d      	add	sp, #116	; 0x74
 800cd7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd7e:	ab03      	add	r3, sp, #12
 800cd80:	9300      	str	r3, [sp, #0]
 800cd82:	462a      	mov	r2, r5
 800cd84:	4b05      	ldr	r3, [pc, #20]	; (800cd9c <_svfiprintf_r+0x1f4>)
 800cd86:	a904      	add	r1, sp, #16
 800cd88:	4638      	mov	r0, r7
 800cd8a:	f7fc fe55 	bl	8009a38 <_printf_i>
 800cd8e:	e7eb      	b.n	800cd68 <_svfiprintf_r+0x1c0>
 800cd90:	0800e0a9 	.word	0x0800e0a9
 800cd94:	0800e0b3 	.word	0x0800e0b3
 800cd98:	080094f1 	.word	0x080094f1
 800cd9c:	0800caf5 	.word	0x0800caf5
 800cda0:	0800e0af 	.word	0x0800e0af

0800cda4 <__sfputc_r>:
 800cda4:	6893      	ldr	r3, [r2, #8]
 800cda6:	3b01      	subs	r3, #1
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	b410      	push	{r4}
 800cdac:	6093      	str	r3, [r2, #8]
 800cdae:	da08      	bge.n	800cdc2 <__sfputc_r+0x1e>
 800cdb0:	6994      	ldr	r4, [r2, #24]
 800cdb2:	42a3      	cmp	r3, r4
 800cdb4:	db01      	blt.n	800cdba <__sfputc_r+0x16>
 800cdb6:	290a      	cmp	r1, #10
 800cdb8:	d103      	bne.n	800cdc2 <__sfputc_r+0x1e>
 800cdba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cdbe:	f000 ba45 	b.w	800d24c <__swbuf_r>
 800cdc2:	6813      	ldr	r3, [r2, #0]
 800cdc4:	1c58      	adds	r0, r3, #1
 800cdc6:	6010      	str	r0, [r2, #0]
 800cdc8:	7019      	strb	r1, [r3, #0]
 800cdca:	4608      	mov	r0, r1
 800cdcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cdd0:	4770      	bx	lr

0800cdd2 <__sfputs_r>:
 800cdd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdd4:	4606      	mov	r6, r0
 800cdd6:	460f      	mov	r7, r1
 800cdd8:	4614      	mov	r4, r2
 800cdda:	18d5      	adds	r5, r2, r3
 800cddc:	42ac      	cmp	r4, r5
 800cdde:	d101      	bne.n	800cde4 <__sfputs_r+0x12>
 800cde0:	2000      	movs	r0, #0
 800cde2:	e007      	b.n	800cdf4 <__sfputs_r+0x22>
 800cde4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cde8:	463a      	mov	r2, r7
 800cdea:	4630      	mov	r0, r6
 800cdec:	f7ff ffda 	bl	800cda4 <__sfputc_r>
 800cdf0:	1c43      	adds	r3, r0, #1
 800cdf2:	d1f3      	bne.n	800cddc <__sfputs_r+0xa>
 800cdf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cdf8 <_vfiprintf_r>:
 800cdf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdfc:	460d      	mov	r5, r1
 800cdfe:	b09d      	sub	sp, #116	; 0x74
 800ce00:	4614      	mov	r4, r2
 800ce02:	4698      	mov	r8, r3
 800ce04:	4606      	mov	r6, r0
 800ce06:	b118      	cbz	r0, 800ce10 <_vfiprintf_r+0x18>
 800ce08:	6a03      	ldr	r3, [r0, #32]
 800ce0a:	b90b      	cbnz	r3, 800ce10 <_vfiprintf_r+0x18>
 800ce0c:	f7fd f9d2 	bl	800a1b4 <__sinit>
 800ce10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce12:	07d9      	lsls	r1, r3, #31
 800ce14:	d405      	bmi.n	800ce22 <_vfiprintf_r+0x2a>
 800ce16:	89ab      	ldrh	r3, [r5, #12]
 800ce18:	059a      	lsls	r2, r3, #22
 800ce1a:	d402      	bmi.n	800ce22 <_vfiprintf_r+0x2a>
 800ce1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce1e:	f7fd fba0 	bl	800a562 <__retarget_lock_acquire_recursive>
 800ce22:	89ab      	ldrh	r3, [r5, #12]
 800ce24:	071b      	lsls	r3, r3, #28
 800ce26:	d501      	bpl.n	800ce2c <_vfiprintf_r+0x34>
 800ce28:	692b      	ldr	r3, [r5, #16]
 800ce2a:	b99b      	cbnz	r3, 800ce54 <_vfiprintf_r+0x5c>
 800ce2c:	4629      	mov	r1, r5
 800ce2e:	4630      	mov	r0, r6
 800ce30:	f000 fa4a 	bl	800d2c8 <__swsetup_r>
 800ce34:	b170      	cbz	r0, 800ce54 <_vfiprintf_r+0x5c>
 800ce36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce38:	07dc      	lsls	r4, r3, #31
 800ce3a:	d504      	bpl.n	800ce46 <_vfiprintf_r+0x4e>
 800ce3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce40:	b01d      	add	sp, #116	; 0x74
 800ce42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce46:	89ab      	ldrh	r3, [r5, #12]
 800ce48:	0598      	lsls	r0, r3, #22
 800ce4a:	d4f7      	bmi.n	800ce3c <_vfiprintf_r+0x44>
 800ce4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce4e:	f7fd fb89 	bl	800a564 <__retarget_lock_release_recursive>
 800ce52:	e7f3      	b.n	800ce3c <_vfiprintf_r+0x44>
 800ce54:	2300      	movs	r3, #0
 800ce56:	9309      	str	r3, [sp, #36]	; 0x24
 800ce58:	2320      	movs	r3, #32
 800ce5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce5e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce62:	2330      	movs	r3, #48	; 0x30
 800ce64:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d018 <_vfiprintf_r+0x220>
 800ce68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce6c:	f04f 0901 	mov.w	r9, #1
 800ce70:	4623      	mov	r3, r4
 800ce72:	469a      	mov	sl, r3
 800ce74:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce78:	b10a      	cbz	r2, 800ce7e <_vfiprintf_r+0x86>
 800ce7a:	2a25      	cmp	r2, #37	; 0x25
 800ce7c:	d1f9      	bne.n	800ce72 <_vfiprintf_r+0x7a>
 800ce7e:	ebba 0b04 	subs.w	fp, sl, r4
 800ce82:	d00b      	beq.n	800ce9c <_vfiprintf_r+0xa4>
 800ce84:	465b      	mov	r3, fp
 800ce86:	4622      	mov	r2, r4
 800ce88:	4629      	mov	r1, r5
 800ce8a:	4630      	mov	r0, r6
 800ce8c:	f7ff ffa1 	bl	800cdd2 <__sfputs_r>
 800ce90:	3001      	adds	r0, #1
 800ce92:	f000 80a9 	beq.w	800cfe8 <_vfiprintf_r+0x1f0>
 800ce96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce98:	445a      	add	r2, fp
 800ce9a:	9209      	str	r2, [sp, #36]	; 0x24
 800ce9c:	f89a 3000 	ldrb.w	r3, [sl]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	f000 80a1 	beq.w	800cfe8 <_vfiprintf_r+0x1f0>
 800cea6:	2300      	movs	r3, #0
 800cea8:	f04f 32ff 	mov.w	r2, #4294967295
 800ceac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ceb0:	f10a 0a01 	add.w	sl, sl, #1
 800ceb4:	9304      	str	r3, [sp, #16]
 800ceb6:	9307      	str	r3, [sp, #28]
 800ceb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cebc:	931a      	str	r3, [sp, #104]	; 0x68
 800cebe:	4654      	mov	r4, sl
 800cec0:	2205      	movs	r2, #5
 800cec2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cec6:	4854      	ldr	r0, [pc, #336]	; (800d018 <_vfiprintf_r+0x220>)
 800cec8:	f7f3 f992 	bl	80001f0 <memchr>
 800cecc:	9a04      	ldr	r2, [sp, #16]
 800cece:	b9d8      	cbnz	r0, 800cf08 <_vfiprintf_r+0x110>
 800ced0:	06d1      	lsls	r1, r2, #27
 800ced2:	bf44      	itt	mi
 800ced4:	2320      	movmi	r3, #32
 800ced6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ceda:	0713      	lsls	r3, r2, #28
 800cedc:	bf44      	itt	mi
 800cede:	232b      	movmi	r3, #43	; 0x2b
 800cee0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cee4:	f89a 3000 	ldrb.w	r3, [sl]
 800cee8:	2b2a      	cmp	r3, #42	; 0x2a
 800ceea:	d015      	beq.n	800cf18 <_vfiprintf_r+0x120>
 800ceec:	9a07      	ldr	r2, [sp, #28]
 800ceee:	4654      	mov	r4, sl
 800cef0:	2000      	movs	r0, #0
 800cef2:	f04f 0c0a 	mov.w	ip, #10
 800cef6:	4621      	mov	r1, r4
 800cef8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cefc:	3b30      	subs	r3, #48	; 0x30
 800cefe:	2b09      	cmp	r3, #9
 800cf00:	d94d      	bls.n	800cf9e <_vfiprintf_r+0x1a6>
 800cf02:	b1b0      	cbz	r0, 800cf32 <_vfiprintf_r+0x13a>
 800cf04:	9207      	str	r2, [sp, #28]
 800cf06:	e014      	b.n	800cf32 <_vfiprintf_r+0x13a>
 800cf08:	eba0 0308 	sub.w	r3, r0, r8
 800cf0c:	fa09 f303 	lsl.w	r3, r9, r3
 800cf10:	4313      	orrs	r3, r2
 800cf12:	9304      	str	r3, [sp, #16]
 800cf14:	46a2      	mov	sl, r4
 800cf16:	e7d2      	b.n	800cebe <_vfiprintf_r+0xc6>
 800cf18:	9b03      	ldr	r3, [sp, #12]
 800cf1a:	1d19      	adds	r1, r3, #4
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	9103      	str	r1, [sp, #12]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	bfbb      	ittet	lt
 800cf24:	425b      	neglt	r3, r3
 800cf26:	f042 0202 	orrlt.w	r2, r2, #2
 800cf2a:	9307      	strge	r3, [sp, #28]
 800cf2c:	9307      	strlt	r3, [sp, #28]
 800cf2e:	bfb8      	it	lt
 800cf30:	9204      	strlt	r2, [sp, #16]
 800cf32:	7823      	ldrb	r3, [r4, #0]
 800cf34:	2b2e      	cmp	r3, #46	; 0x2e
 800cf36:	d10c      	bne.n	800cf52 <_vfiprintf_r+0x15a>
 800cf38:	7863      	ldrb	r3, [r4, #1]
 800cf3a:	2b2a      	cmp	r3, #42	; 0x2a
 800cf3c:	d134      	bne.n	800cfa8 <_vfiprintf_r+0x1b0>
 800cf3e:	9b03      	ldr	r3, [sp, #12]
 800cf40:	1d1a      	adds	r2, r3, #4
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	9203      	str	r2, [sp, #12]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	bfb8      	it	lt
 800cf4a:	f04f 33ff 	movlt.w	r3, #4294967295
 800cf4e:	3402      	adds	r4, #2
 800cf50:	9305      	str	r3, [sp, #20]
 800cf52:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d028 <_vfiprintf_r+0x230>
 800cf56:	7821      	ldrb	r1, [r4, #0]
 800cf58:	2203      	movs	r2, #3
 800cf5a:	4650      	mov	r0, sl
 800cf5c:	f7f3 f948 	bl	80001f0 <memchr>
 800cf60:	b138      	cbz	r0, 800cf72 <_vfiprintf_r+0x17a>
 800cf62:	9b04      	ldr	r3, [sp, #16]
 800cf64:	eba0 000a 	sub.w	r0, r0, sl
 800cf68:	2240      	movs	r2, #64	; 0x40
 800cf6a:	4082      	lsls	r2, r0
 800cf6c:	4313      	orrs	r3, r2
 800cf6e:	3401      	adds	r4, #1
 800cf70:	9304      	str	r3, [sp, #16]
 800cf72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf76:	4829      	ldr	r0, [pc, #164]	; (800d01c <_vfiprintf_r+0x224>)
 800cf78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cf7c:	2206      	movs	r2, #6
 800cf7e:	f7f3 f937 	bl	80001f0 <memchr>
 800cf82:	2800      	cmp	r0, #0
 800cf84:	d03f      	beq.n	800d006 <_vfiprintf_r+0x20e>
 800cf86:	4b26      	ldr	r3, [pc, #152]	; (800d020 <_vfiprintf_r+0x228>)
 800cf88:	bb1b      	cbnz	r3, 800cfd2 <_vfiprintf_r+0x1da>
 800cf8a:	9b03      	ldr	r3, [sp, #12]
 800cf8c:	3307      	adds	r3, #7
 800cf8e:	f023 0307 	bic.w	r3, r3, #7
 800cf92:	3308      	adds	r3, #8
 800cf94:	9303      	str	r3, [sp, #12]
 800cf96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf98:	443b      	add	r3, r7
 800cf9a:	9309      	str	r3, [sp, #36]	; 0x24
 800cf9c:	e768      	b.n	800ce70 <_vfiprintf_r+0x78>
 800cf9e:	fb0c 3202 	mla	r2, ip, r2, r3
 800cfa2:	460c      	mov	r4, r1
 800cfa4:	2001      	movs	r0, #1
 800cfa6:	e7a6      	b.n	800cef6 <_vfiprintf_r+0xfe>
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	3401      	adds	r4, #1
 800cfac:	9305      	str	r3, [sp, #20]
 800cfae:	4619      	mov	r1, r3
 800cfb0:	f04f 0c0a 	mov.w	ip, #10
 800cfb4:	4620      	mov	r0, r4
 800cfb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cfba:	3a30      	subs	r2, #48	; 0x30
 800cfbc:	2a09      	cmp	r2, #9
 800cfbe:	d903      	bls.n	800cfc8 <_vfiprintf_r+0x1d0>
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d0c6      	beq.n	800cf52 <_vfiprintf_r+0x15a>
 800cfc4:	9105      	str	r1, [sp, #20]
 800cfc6:	e7c4      	b.n	800cf52 <_vfiprintf_r+0x15a>
 800cfc8:	fb0c 2101 	mla	r1, ip, r1, r2
 800cfcc:	4604      	mov	r4, r0
 800cfce:	2301      	movs	r3, #1
 800cfd0:	e7f0      	b.n	800cfb4 <_vfiprintf_r+0x1bc>
 800cfd2:	ab03      	add	r3, sp, #12
 800cfd4:	9300      	str	r3, [sp, #0]
 800cfd6:	462a      	mov	r2, r5
 800cfd8:	4b12      	ldr	r3, [pc, #72]	; (800d024 <_vfiprintf_r+0x22c>)
 800cfda:	a904      	add	r1, sp, #16
 800cfdc:	4630      	mov	r0, r6
 800cfde:	f7fc fa87 	bl	80094f0 <_printf_float>
 800cfe2:	4607      	mov	r7, r0
 800cfe4:	1c78      	adds	r0, r7, #1
 800cfe6:	d1d6      	bne.n	800cf96 <_vfiprintf_r+0x19e>
 800cfe8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cfea:	07d9      	lsls	r1, r3, #31
 800cfec:	d405      	bmi.n	800cffa <_vfiprintf_r+0x202>
 800cfee:	89ab      	ldrh	r3, [r5, #12]
 800cff0:	059a      	lsls	r2, r3, #22
 800cff2:	d402      	bmi.n	800cffa <_vfiprintf_r+0x202>
 800cff4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cff6:	f7fd fab5 	bl	800a564 <__retarget_lock_release_recursive>
 800cffa:	89ab      	ldrh	r3, [r5, #12]
 800cffc:	065b      	lsls	r3, r3, #25
 800cffe:	f53f af1d 	bmi.w	800ce3c <_vfiprintf_r+0x44>
 800d002:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d004:	e71c      	b.n	800ce40 <_vfiprintf_r+0x48>
 800d006:	ab03      	add	r3, sp, #12
 800d008:	9300      	str	r3, [sp, #0]
 800d00a:	462a      	mov	r2, r5
 800d00c:	4b05      	ldr	r3, [pc, #20]	; (800d024 <_vfiprintf_r+0x22c>)
 800d00e:	a904      	add	r1, sp, #16
 800d010:	4630      	mov	r0, r6
 800d012:	f7fc fd11 	bl	8009a38 <_printf_i>
 800d016:	e7e4      	b.n	800cfe2 <_vfiprintf_r+0x1ea>
 800d018:	0800e0a9 	.word	0x0800e0a9
 800d01c:	0800e0b3 	.word	0x0800e0b3
 800d020:	080094f1 	.word	0x080094f1
 800d024:	0800cdd3 	.word	0x0800cdd3
 800d028:	0800e0af 	.word	0x0800e0af

0800d02c <__sflush_r>:
 800d02c:	898a      	ldrh	r2, [r1, #12]
 800d02e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d032:	4605      	mov	r5, r0
 800d034:	0710      	lsls	r0, r2, #28
 800d036:	460c      	mov	r4, r1
 800d038:	d458      	bmi.n	800d0ec <__sflush_r+0xc0>
 800d03a:	684b      	ldr	r3, [r1, #4]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	dc05      	bgt.n	800d04c <__sflush_r+0x20>
 800d040:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d042:	2b00      	cmp	r3, #0
 800d044:	dc02      	bgt.n	800d04c <__sflush_r+0x20>
 800d046:	2000      	movs	r0, #0
 800d048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d04c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d04e:	2e00      	cmp	r6, #0
 800d050:	d0f9      	beq.n	800d046 <__sflush_r+0x1a>
 800d052:	2300      	movs	r3, #0
 800d054:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d058:	682f      	ldr	r7, [r5, #0]
 800d05a:	6a21      	ldr	r1, [r4, #32]
 800d05c:	602b      	str	r3, [r5, #0]
 800d05e:	d032      	beq.n	800d0c6 <__sflush_r+0x9a>
 800d060:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d062:	89a3      	ldrh	r3, [r4, #12]
 800d064:	075a      	lsls	r2, r3, #29
 800d066:	d505      	bpl.n	800d074 <__sflush_r+0x48>
 800d068:	6863      	ldr	r3, [r4, #4]
 800d06a:	1ac0      	subs	r0, r0, r3
 800d06c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d06e:	b10b      	cbz	r3, 800d074 <__sflush_r+0x48>
 800d070:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d072:	1ac0      	subs	r0, r0, r3
 800d074:	2300      	movs	r3, #0
 800d076:	4602      	mov	r2, r0
 800d078:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d07a:	6a21      	ldr	r1, [r4, #32]
 800d07c:	4628      	mov	r0, r5
 800d07e:	47b0      	blx	r6
 800d080:	1c43      	adds	r3, r0, #1
 800d082:	89a3      	ldrh	r3, [r4, #12]
 800d084:	d106      	bne.n	800d094 <__sflush_r+0x68>
 800d086:	6829      	ldr	r1, [r5, #0]
 800d088:	291d      	cmp	r1, #29
 800d08a:	d82b      	bhi.n	800d0e4 <__sflush_r+0xb8>
 800d08c:	4a29      	ldr	r2, [pc, #164]	; (800d134 <__sflush_r+0x108>)
 800d08e:	410a      	asrs	r2, r1
 800d090:	07d6      	lsls	r6, r2, #31
 800d092:	d427      	bmi.n	800d0e4 <__sflush_r+0xb8>
 800d094:	2200      	movs	r2, #0
 800d096:	6062      	str	r2, [r4, #4]
 800d098:	04d9      	lsls	r1, r3, #19
 800d09a:	6922      	ldr	r2, [r4, #16]
 800d09c:	6022      	str	r2, [r4, #0]
 800d09e:	d504      	bpl.n	800d0aa <__sflush_r+0x7e>
 800d0a0:	1c42      	adds	r2, r0, #1
 800d0a2:	d101      	bne.n	800d0a8 <__sflush_r+0x7c>
 800d0a4:	682b      	ldr	r3, [r5, #0]
 800d0a6:	b903      	cbnz	r3, 800d0aa <__sflush_r+0x7e>
 800d0a8:	6560      	str	r0, [r4, #84]	; 0x54
 800d0aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d0ac:	602f      	str	r7, [r5, #0]
 800d0ae:	2900      	cmp	r1, #0
 800d0b0:	d0c9      	beq.n	800d046 <__sflush_r+0x1a>
 800d0b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d0b6:	4299      	cmp	r1, r3
 800d0b8:	d002      	beq.n	800d0c0 <__sflush_r+0x94>
 800d0ba:	4628      	mov	r0, r5
 800d0bc:	f7fe f8d6 	bl	800b26c <_free_r>
 800d0c0:	2000      	movs	r0, #0
 800d0c2:	6360      	str	r0, [r4, #52]	; 0x34
 800d0c4:	e7c0      	b.n	800d048 <__sflush_r+0x1c>
 800d0c6:	2301      	movs	r3, #1
 800d0c8:	4628      	mov	r0, r5
 800d0ca:	47b0      	blx	r6
 800d0cc:	1c41      	adds	r1, r0, #1
 800d0ce:	d1c8      	bne.n	800d062 <__sflush_r+0x36>
 800d0d0:	682b      	ldr	r3, [r5, #0]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d0c5      	beq.n	800d062 <__sflush_r+0x36>
 800d0d6:	2b1d      	cmp	r3, #29
 800d0d8:	d001      	beq.n	800d0de <__sflush_r+0xb2>
 800d0da:	2b16      	cmp	r3, #22
 800d0dc:	d101      	bne.n	800d0e2 <__sflush_r+0xb6>
 800d0de:	602f      	str	r7, [r5, #0]
 800d0e0:	e7b1      	b.n	800d046 <__sflush_r+0x1a>
 800d0e2:	89a3      	ldrh	r3, [r4, #12]
 800d0e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0e8:	81a3      	strh	r3, [r4, #12]
 800d0ea:	e7ad      	b.n	800d048 <__sflush_r+0x1c>
 800d0ec:	690f      	ldr	r7, [r1, #16]
 800d0ee:	2f00      	cmp	r7, #0
 800d0f0:	d0a9      	beq.n	800d046 <__sflush_r+0x1a>
 800d0f2:	0793      	lsls	r3, r2, #30
 800d0f4:	680e      	ldr	r6, [r1, #0]
 800d0f6:	bf08      	it	eq
 800d0f8:	694b      	ldreq	r3, [r1, #20]
 800d0fa:	600f      	str	r7, [r1, #0]
 800d0fc:	bf18      	it	ne
 800d0fe:	2300      	movne	r3, #0
 800d100:	eba6 0807 	sub.w	r8, r6, r7
 800d104:	608b      	str	r3, [r1, #8]
 800d106:	f1b8 0f00 	cmp.w	r8, #0
 800d10a:	dd9c      	ble.n	800d046 <__sflush_r+0x1a>
 800d10c:	6a21      	ldr	r1, [r4, #32]
 800d10e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d110:	4643      	mov	r3, r8
 800d112:	463a      	mov	r2, r7
 800d114:	4628      	mov	r0, r5
 800d116:	47b0      	blx	r6
 800d118:	2800      	cmp	r0, #0
 800d11a:	dc06      	bgt.n	800d12a <__sflush_r+0xfe>
 800d11c:	89a3      	ldrh	r3, [r4, #12]
 800d11e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d122:	81a3      	strh	r3, [r4, #12]
 800d124:	f04f 30ff 	mov.w	r0, #4294967295
 800d128:	e78e      	b.n	800d048 <__sflush_r+0x1c>
 800d12a:	4407      	add	r7, r0
 800d12c:	eba8 0800 	sub.w	r8, r8, r0
 800d130:	e7e9      	b.n	800d106 <__sflush_r+0xda>
 800d132:	bf00      	nop
 800d134:	dfbffffe 	.word	0xdfbffffe

0800d138 <_fflush_r>:
 800d138:	b538      	push	{r3, r4, r5, lr}
 800d13a:	690b      	ldr	r3, [r1, #16]
 800d13c:	4605      	mov	r5, r0
 800d13e:	460c      	mov	r4, r1
 800d140:	b913      	cbnz	r3, 800d148 <_fflush_r+0x10>
 800d142:	2500      	movs	r5, #0
 800d144:	4628      	mov	r0, r5
 800d146:	bd38      	pop	{r3, r4, r5, pc}
 800d148:	b118      	cbz	r0, 800d152 <_fflush_r+0x1a>
 800d14a:	6a03      	ldr	r3, [r0, #32]
 800d14c:	b90b      	cbnz	r3, 800d152 <_fflush_r+0x1a>
 800d14e:	f7fd f831 	bl	800a1b4 <__sinit>
 800d152:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d0f3      	beq.n	800d142 <_fflush_r+0xa>
 800d15a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d15c:	07d0      	lsls	r0, r2, #31
 800d15e:	d404      	bmi.n	800d16a <_fflush_r+0x32>
 800d160:	0599      	lsls	r1, r3, #22
 800d162:	d402      	bmi.n	800d16a <_fflush_r+0x32>
 800d164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d166:	f7fd f9fc 	bl	800a562 <__retarget_lock_acquire_recursive>
 800d16a:	4628      	mov	r0, r5
 800d16c:	4621      	mov	r1, r4
 800d16e:	f7ff ff5d 	bl	800d02c <__sflush_r>
 800d172:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d174:	07da      	lsls	r2, r3, #31
 800d176:	4605      	mov	r5, r0
 800d178:	d4e4      	bmi.n	800d144 <_fflush_r+0xc>
 800d17a:	89a3      	ldrh	r3, [r4, #12]
 800d17c:	059b      	lsls	r3, r3, #22
 800d17e:	d4e1      	bmi.n	800d144 <_fflush_r+0xc>
 800d180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d182:	f7fd f9ef 	bl	800a564 <__retarget_lock_release_recursive>
 800d186:	e7dd      	b.n	800d144 <_fflush_r+0xc>

0800d188 <__swhatbuf_r>:
 800d188:	b570      	push	{r4, r5, r6, lr}
 800d18a:	460c      	mov	r4, r1
 800d18c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d190:	2900      	cmp	r1, #0
 800d192:	b096      	sub	sp, #88	; 0x58
 800d194:	4615      	mov	r5, r2
 800d196:	461e      	mov	r6, r3
 800d198:	da0d      	bge.n	800d1b6 <__swhatbuf_r+0x2e>
 800d19a:	89a3      	ldrh	r3, [r4, #12]
 800d19c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d1a0:	f04f 0100 	mov.w	r1, #0
 800d1a4:	bf0c      	ite	eq
 800d1a6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d1aa:	2340      	movne	r3, #64	; 0x40
 800d1ac:	2000      	movs	r0, #0
 800d1ae:	6031      	str	r1, [r6, #0]
 800d1b0:	602b      	str	r3, [r5, #0]
 800d1b2:	b016      	add	sp, #88	; 0x58
 800d1b4:	bd70      	pop	{r4, r5, r6, pc}
 800d1b6:	466a      	mov	r2, sp
 800d1b8:	f000 f90a 	bl	800d3d0 <_fstat_r>
 800d1bc:	2800      	cmp	r0, #0
 800d1be:	dbec      	blt.n	800d19a <__swhatbuf_r+0x12>
 800d1c0:	9901      	ldr	r1, [sp, #4]
 800d1c2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d1c6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d1ca:	4259      	negs	r1, r3
 800d1cc:	4159      	adcs	r1, r3
 800d1ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d1d2:	e7eb      	b.n	800d1ac <__swhatbuf_r+0x24>

0800d1d4 <__smakebuf_r>:
 800d1d4:	898b      	ldrh	r3, [r1, #12]
 800d1d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d1d8:	079d      	lsls	r5, r3, #30
 800d1da:	4606      	mov	r6, r0
 800d1dc:	460c      	mov	r4, r1
 800d1de:	d507      	bpl.n	800d1f0 <__smakebuf_r+0x1c>
 800d1e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d1e4:	6023      	str	r3, [r4, #0]
 800d1e6:	6123      	str	r3, [r4, #16]
 800d1e8:	2301      	movs	r3, #1
 800d1ea:	6163      	str	r3, [r4, #20]
 800d1ec:	b002      	add	sp, #8
 800d1ee:	bd70      	pop	{r4, r5, r6, pc}
 800d1f0:	ab01      	add	r3, sp, #4
 800d1f2:	466a      	mov	r2, sp
 800d1f4:	f7ff ffc8 	bl	800d188 <__swhatbuf_r>
 800d1f8:	9900      	ldr	r1, [sp, #0]
 800d1fa:	4605      	mov	r5, r0
 800d1fc:	4630      	mov	r0, r6
 800d1fe:	f7fe f8a9 	bl	800b354 <_malloc_r>
 800d202:	b948      	cbnz	r0, 800d218 <__smakebuf_r+0x44>
 800d204:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d208:	059a      	lsls	r2, r3, #22
 800d20a:	d4ef      	bmi.n	800d1ec <__smakebuf_r+0x18>
 800d20c:	f023 0303 	bic.w	r3, r3, #3
 800d210:	f043 0302 	orr.w	r3, r3, #2
 800d214:	81a3      	strh	r3, [r4, #12]
 800d216:	e7e3      	b.n	800d1e0 <__smakebuf_r+0xc>
 800d218:	89a3      	ldrh	r3, [r4, #12]
 800d21a:	6020      	str	r0, [r4, #0]
 800d21c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d220:	81a3      	strh	r3, [r4, #12]
 800d222:	9b00      	ldr	r3, [sp, #0]
 800d224:	6163      	str	r3, [r4, #20]
 800d226:	9b01      	ldr	r3, [sp, #4]
 800d228:	6120      	str	r0, [r4, #16]
 800d22a:	b15b      	cbz	r3, 800d244 <__smakebuf_r+0x70>
 800d22c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d230:	4630      	mov	r0, r6
 800d232:	f000 f8df 	bl	800d3f4 <_isatty_r>
 800d236:	b128      	cbz	r0, 800d244 <__smakebuf_r+0x70>
 800d238:	89a3      	ldrh	r3, [r4, #12]
 800d23a:	f023 0303 	bic.w	r3, r3, #3
 800d23e:	f043 0301 	orr.w	r3, r3, #1
 800d242:	81a3      	strh	r3, [r4, #12]
 800d244:	89a3      	ldrh	r3, [r4, #12]
 800d246:	431d      	orrs	r5, r3
 800d248:	81a5      	strh	r5, [r4, #12]
 800d24a:	e7cf      	b.n	800d1ec <__smakebuf_r+0x18>

0800d24c <__swbuf_r>:
 800d24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d24e:	460e      	mov	r6, r1
 800d250:	4614      	mov	r4, r2
 800d252:	4605      	mov	r5, r0
 800d254:	b118      	cbz	r0, 800d25e <__swbuf_r+0x12>
 800d256:	6a03      	ldr	r3, [r0, #32]
 800d258:	b90b      	cbnz	r3, 800d25e <__swbuf_r+0x12>
 800d25a:	f7fc ffab 	bl	800a1b4 <__sinit>
 800d25e:	69a3      	ldr	r3, [r4, #24]
 800d260:	60a3      	str	r3, [r4, #8]
 800d262:	89a3      	ldrh	r3, [r4, #12]
 800d264:	071a      	lsls	r2, r3, #28
 800d266:	d525      	bpl.n	800d2b4 <__swbuf_r+0x68>
 800d268:	6923      	ldr	r3, [r4, #16]
 800d26a:	b31b      	cbz	r3, 800d2b4 <__swbuf_r+0x68>
 800d26c:	6823      	ldr	r3, [r4, #0]
 800d26e:	6922      	ldr	r2, [r4, #16]
 800d270:	1a98      	subs	r0, r3, r2
 800d272:	6963      	ldr	r3, [r4, #20]
 800d274:	b2f6      	uxtb	r6, r6
 800d276:	4283      	cmp	r3, r0
 800d278:	4637      	mov	r7, r6
 800d27a:	dc04      	bgt.n	800d286 <__swbuf_r+0x3a>
 800d27c:	4621      	mov	r1, r4
 800d27e:	4628      	mov	r0, r5
 800d280:	f7ff ff5a 	bl	800d138 <_fflush_r>
 800d284:	b9e0      	cbnz	r0, 800d2c0 <__swbuf_r+0x74>
 800d286:	68a3      	ldr	r3, [r4, #8]
 800d288:	3b01      	subs	r3, #1
 800d28a:	60a3      	str	r3, [r4, #8]
 800d28c:	6823      	ldr	r3, [r4, #0]
 800d28e:	1c5a      	adds	r2, r3, #1
 800d290:	6022      	str	r2, [r4, #0]
 800d292:	701e      	strb	r6, [r3, #0]
 800d294:	6962      	ldr	r2, [r4, #20]
 800d296:	1c43      	adds	r3, r0, #1
 800d298:	429a      	cmp	r2, r3
 800d29a:	d004      	beq.n	800d2a6 <__swbuf_r+0x5a>
 800d29c:	89a3      	ldrh	r3, [r4, #12]
 800d29e:	07db      	lsls	r3, r3, #31
 800d2a0:	d506      	bpl.n	800d2b0 <__swbuf_r+0x64>
 800d2a2:	2e0a      	cmp	r6, #10
 800d2a4:	d104      	bne.n	800d2b0 <__swbuf_r+0x64>
 800d2a6:	4621      	mov	r1, r4
 800d2a8:	4628      	mov	r0, r5
 800d2aa:	f7ff ff45 	bl	800d138 <_fflush_r>
 800d2ae:	b938      	cbnz	r0, 800d2c0 <__swbuf_r+0x74>
 800d2b0:	4638      	mov	r0, r7
 800d2b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2b4:	4621      	mov	r1, r4
 800d2b6:	4628      	mov	r0, r5
 800d2b8:	f000 f806 	bl	800d2c8 <__swsetup_r>
 800d2bc:	2800      	cmp	r0, #0
 800d2be:	d0d5      	beq.n	800d26c <__swbuf_r+0x20>
 800d2c0:	f04f 37ff 	mov.w	r7, #4294967295
 800d2c4:	e7f4      	b.n	800d2b0 <__swbuf_r+0x64>
	...

0800d2c8 <__swsetup_r>:
 800d2c8:	b538      	push	{r3, r4, r5, lr}
 800d2ca:	4b2a      	ldr	r3, [pc, #168]	; (800d374 <__swsetup_r+0xac>)
 800d2cc:	4605      	mov	r5, r0
 800d2ce:	6818      	ldr	r0, [r3, #0]
 800d2d0:	460c      	mov	r4, r1
 800d2d2:	b118      	cbz	r0, 800d2dc <__swsetup_r+0x14>
 800d2d4:	6a03      	ldr	r3, [r0, #32]
 800d2d6:	b90b      	cbnz	r3, 800d2dc <__swsetup_r+0x14>
 800d2d8:	f7fc ff6c 	bl	800a1b4 <__sinit>
 800d2dc:	89a3      	ldrh	r3, [r4, #12]
 800d2de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d2e2:	0718      	lsls	r0, r3, #28
 800d2e4:	d422      	bmi.n	800d32c <__swsetup_r+0x64>
 800d2e6:	06d9      	lsls	r1, r3, #27
 800d2e8:	d407      	bmi.n	800d2fa <__swsetup_r+0x32>
 800d2ea:	2309      	movs	r3, #9
 800d2ec:	602b      	str	r3, [r5, #0]
 800d2ee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d2f2:	81a3      	strh	r3, [r4, #12]
 800d2f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d2f8:	e034      	b.n	800d364 <__swsetup_r+0x9c>
 800d2fa:	0758      	lsls	r0, r3, #29
 800d2fc:	d512      	bpl.n	800d324 <__swsetup_r+0x5c>
 800d2fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d300:	b141      	cbz	r1, 800d314 <__swsetup_r+0x4c>
 800d302:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d306:	4299      	cmp	r1, r3
 800d308:	d002      	beq.n	800d310 <__swsetup_r+0x48>
 800d30a:	4628      	mov	r0, r5
 800d30c:	f7fd ffae 	bl	800b26c <_free_r>
 800d310:	2300      	movs	r3, #0
 800d312:	6363      	str	r3, [r4, #52]	; 0x34
 800d314:	89a3      	ldrh	r3, [r4, #12]
 800d316:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d31a:	81a3      	strh	r3, [r4, #12]
 800d31c:	2300      	movs	r3, #0
 800d31e:	6063      	str	r3, [r4, #4]
 800d320:	6923      	ldr	r3, [r4, #16]
 800d322:	6023      	str	r3, [r4, #0]
 800d324:	89a3      	ldrh	r3, [r4, #12]
 800d326:	f043 0308 	orr.w	r3, r3, #8
 800d32a:	81a3      	strh	r3, [r4, #12]
 800d32c:	6923      	ldr	r3, [r4, #16]
 800d32e:	b94b      	cbnz	r3, 800d344 <__swsetup_r+0x7c>
 800d330:	89a3      	ldrh	r3, [r4, #12]
 800d332:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d336:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d33a:	d003      	beq.n	800d344 <__swsetup_r+0x7c>
 800d33c:	4621      	mov	r1, r4
 800d33e:	4628      	mov	r0, r5
 800d340:	f7ff ff48 	bl	800d1d4 <__smakebuf_r>
 800d344:	89a0      	ldrh	r0, [r4, #12]
 800d346:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d34a:	f010 0301 	ands.w	r3, r0, #1
 800d34e:	d00a      	beq.n	800d366 <__swsetup_r+0x9e>
 800d350:	2300      	movs	r3, #0
 800d352:	60a3      	str	r3, [r4, #8]
 800d354:	6963      	ldr	r3, [r4, #20]
 800d356:	425b      	negs	r3, r3
 800d358:	61a3      	str	r3, [r4, #24]
 800d35a:	6923      	ldr	r3, [r4, #16]
 800d35c:	b943      	cbnz	r3, 800d370 <__swsetup_r+0xa8>
 800d35e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d362:	d1c4      	bne.n	800d2ee <__swsetup_r+0x26>
 800d364:	bd38      	pop	{r3, r4, r5, pc}
 800d366:	0781      	lsls	r1, r0, #30
 800d368:	bf58      	it	pl
 800d36a:	6963      	ldrpl	r3, [r4, #20]
 800d36c:	60a3      	str	r3, [r4, #8]
 800d36e:	e7f4      	b.n	800d35a <__swsetup_r+0x92>
 800d370:	2000      	movs	r0, #0
 800d372:	e7f7      	b.n	800d364 <__swsetup_r+0x9c>
 800d374:	20000074 	.word	0x20000074

0800d378 <memmove>:
 800d378:	4288      	cmp	r0, r1
 800d37a:	b510      	push	{r4, lr}
 800d37c:	eb01 0402 	add.w	r4, r1, r2
 800d380:	d902      	bls.n	800d388 <memmove+0x10>
 800d382:	4284      	cmp	r4, r0
 800d384:	4623      	mov	r3, r4
 800d386:	d807      	bhi.n	800d398 <memmove+0x20>
 800d388:	1e43      	subs	r3, r0, #1
 800d38a:	42a1      	cmp	r1, r4
 800d38c:	d008      	beq.n	800d3a0 <memmove+0x28>
 800d38e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d392:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d396:	e7f8      	b.n	800d38a <memmove+0x12>
 800d398:	4402      	add	r2, r0
 800d39a:	4601      	mov	r1, r0
 800d39c:	428a      	cmp	r2, r1
 800d39e:	d100      	bne.n	800d3a2 <memmove+0x2a>
 800d3a0:	bd10      	pop	{r4, pc}
 800d3a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d3a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d3aa:	e7f7      	b.n	800d39c <memmove+0x24>

0800d3ac <strncmp>:
 800d3ac:	b510      	push	{r4, lr}
 800d3ae:	b16a      	cbz	r2, 800d3cc <strncmp+0x20>
 800d3b0:	3901      	subs	r1, #1
 800d3b2:	1884      	adds	r4, r0, r2
 800d3b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d3b8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d3bc:	429a      	cmp	r2, r3
 800d3be:	d103      	bne.n	800d3c8 <strncmp+0x1c>
 800d3c0:	42a0      	cmp	r0, r4
 800d3c2:	d001      	beq.n	800d3c8 <strncmp+0x1c>
 800d3c4:	2a00      	cmp	r2, #0
 800d3c6:	d1f5      	bne.n	800d3b4 <strncmp+0x8>
 800d3c8:	1ad0      	subs	r0, r2, r3
 800d3ca:	bd10      	pop	{r4, pc}
 800d3cc:	4610      	mov	r0, r2
 800d3ce:	e7fc      	b.n	800d3ca <strncmp+0x1e>

0800d3d0 <_fstat_r>:
 800d3d0:	b538      	push	{r3, r4, r5, lr}
 800d3d2:	4d07      	ldr	r5, [pc, #28]	; (800d3f0 <_fstat_r+0x20>)
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	4604      	mov	r4, r0
 800d3d8:	4608      	mov	r0, r1
 800d3da:	4611      	mov	r1, r2
 800d3dc:	602b      	str	r3, [r5, #0]
 800d3de:	f7f6 fb3a 	bl	8003a56 <_fstat>
 800d3e2:	1c43      	adds	r3, r0, #1
 800d3e4:	d102      	bne.n	800d3ec <_fstat_r+0x1c>
 800d3e6:	682b      	ldr	r3, [r5, #0]
 800d3e8:	b103      	cbz	r3, 800d3ec <_fstat_r+0x1c>
 800d3ea:	6023      	str	r3, [r4, #0]
 800d3ec:	bd38      	pop	{r3, r4, r5, pc}
 800d3ee:	bf00      	nop
 800d3f0:	200010a0 	.word	0x200010a0

0800d3f4 <_isatty_r>:
 800d3f4:	b538      	push	{r3, r4, r5, lr}
 800d3f6:	4d06      	ldr	r5, [pc, #24]	; (800d410 <_isatty_r+0x1c>)
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	4604      	mov	r4, r0
 800d3fc:	4608      	mov	r0, r1
 800d3fe:	602b      	str	r3, [r5, #0]
 800d400:	f7f6 fb39 	bl	8003a76 <_isatty>
 800d404:	1c43      	adds	r3, r0, #1
 800d406:	d102      	bne.n	800d40e <_isatty_r+0x1a>
 800d408:	682b      	ldr	r3, [r5, #0]
 800d40a:	b103      	cbz	r3, 800d40e <_isatty_r+0x1a>
 800d40c:	6023      	str	r3, [r4, #0]
 800d40e:	bd38      	pop	{r3, r4, r5, pc}
 800d410:	200010a0 	.word	0x200010a0

0800d414 <_sbrk_r>:
 800d414:	b538      	push	{r3, r4, r5, lr}
 800d416:	4d06      	ldr	r5, [pc, #24]	; (800d430 <_sbrk_r+0x1c>)
 800d418:	2300      	movs	r3, #0
 800d41a:	4604      	mov	r4, r0
 800d41c:	4608      	mov	r0, r1
 800d41e:	602b      	str	r3, [r5, #0]
 800d420:	f7f6 fb42 	bl	8003aa8 <_sbrk>
 800d424:	1c43      	adds	r3, r0, #1
 800d426:	d102      	bne.n	800d42e <_sbrk_r+0x1a>
 800d428:	682b      	ldr	r3, [r5, #0]
 800d42a:	b103      	cbz	r3, 800d42e <_sbrk_r+0x1a>
 800d42c:	6023      	str	r3, [r4, #0]
 800d42e:	bd38      	pop	{r3, r4, r5, pc}
 800d430:	200010a0 	.word	0x200010a0

0800d434 <memcpy>:
 800d434:	440a      	add	r2, r1
 800d436:	4291      	cmp	r1, r2
 800d438:	f100 33ff 	add.w	r3, r0, #4294967295
 800d43c:	d100      	bne.n	800d440 <memcpy+0xc>
 800d43e:	4770      	bx	lr
 800d440:	b510      	push	{r4, lr}
 800d442:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d446:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d44a:	4291      	cmp	r1, r2
 800d44c:	d1f9      	bne.n	800d442 <memcpy+0xe>
 800d44e:	bd10      	pop	{r4, pc}

0800d450 <nan>:
 800d450:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d458 <nan+0x8>
 800d454:	4770      	bx	lr
 800d456:	bf00      	nop
 800d458:	00000000 	.word	0x00000000
 800d45c:	7ff80000 	.word	0x7ff80000

0800d460 <__assert_func>:
 800d460:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d462:	4614      	mov	r4, r2
 800d464:	461a      	mov	r2, r3
 800d466:	4b09      	ldr	r3, [pc, #36]	; (800d48c <__assert_func+0x2c>)
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	4605      	mov	r5, r0
 800d46c:	68d8      	ldr	r0, [r3, #12]
 800d46e:	b14c      	cbz	r4, 800d484 <__assert_func+0x24>
 800d470:	4b07      	ldr	r3, [pc, #28]	; (800d490 <__assert_func+0x30>)
 800d472:	9100      	str	r1, [sp, #0]
 800d474:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d478:	4906      	ldr	r1, [pc, #24]	; (800d494 <__assert_func+0x34>)
 800d47a:	462b      	mov	r3, r5
 800d47c:	f000 fbca 	bl	800dc14 <fiprintf>
 800d480:	f000 fbda 	bl	800dc38 <abort>
 800d484:	4b04      	ldr	r3, [pc, #16]	; (800d498 <__assert_func+0x38>)
 800d486:	461c      	mov	r4, r3
 800d488:	e7f3      	b.n	800d472 <__assert_func+0x12>
 800d48a:	bf00      	nop
 800d48c:	20000074 	.word	0x20000074
 800d490:	0800e0c2 	.word	0x0800e0c2
 800d494:	0800e0cf 	.word	0x0800e0cf
 800d498:	0800e0fd 	.word	0x0800e0fd

0800d49c <_calloc_r>:
 800d49c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d49e:	fba1 2402 	umull	r2, r4, r1, r2
 800d4a2:	b94c      	cbnz	r4, 800d4b8 <_calloc_r+0x1c>
 800d4a4:	4611      	mov	r1, r2
 800d4a6:	9201      	str	r2, [sp, #4]
 800d4a8:	f7fd ff54 	bl	800b354 <_malloc_r>
 800d4ac:	9a01      	ldr	r2, [sp, #4]
 800d4ae:	4605      	mov	r5, r0
 800d4b0:	b930      	cbnz	r0, 800d4c0 <_calloc_r+0x24>
 800d4b2:	4628      	mov	r0, r5
 800d4b4:	b003      	add	sp, #12
 800d4b6:	bd30      	pop	{r4, r5, pc}
 800d4b8:	220c      	movs	r2, #12
 800d4ba:	6002      	str	r2, [r0, #0]
 800d4bc:	2500      	movs	r5, #0
 800d4be:	e7f8      	b.n	800d4b2 <_calloc_r+0x16>
 800d4c0:	4621      	mov	r1, r4
 800d4c2:	f7fc ffd0 	bl	800a466 <memset>
 800d4c6:	e7f4      	b.n	800d4b2 <_calloc_r+0x16>

0800d4c8 <rshift>:
 800d4c8:	6903      	ldr	r3, [r0, #16]
 800d4ca:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d4ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d4d2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d4d6:	f100 0414 	add.w	r4, r0, #20
 800d4da:	dd45      	ble.n	800d568 <rshift+0xa0>
 800d4dc:	f011 011f 	ands.w	r1, r1, #31
 800d4e0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d4e4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d4e8:	d10c      	bne.n	800d504 <rshift+0x3c>
 800d4ea:	f100 0710 	add.w	r7, r0, #16
 800d4ee:	4629      	mov	r1, r5
 800d4f0:	42b1      	cmp	r1, r6
 800d4f2:	d334      	bcc.n	800d55e <rshift+0x96>
 800d4f4:	1a9b      	subs	r3, r3, r2
 800d4f6:	009b      	lsls	r3, r3, #2
 800d4f8:	1eea      	subs	r2, r5, #3
 800d4fa:	4296      	cmp	r6, r2
 800d4fc:	bf38      	it	cc
 800d4fe:	2300      	movcc	r3, #0
 800d500:	4423      	add	r3, r4
 800d502:	e015      	b.n	800d530 <rshift+0x68>
 800d504:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d508:	f1c1 0820 	rsb	r8, r1, #32
 800d50c:	40cf      	lsrs	r7, r1
 800d50e:	f105 0e04 	add.w	lr, r5, #4
 800d512:	46a1      	mov	r9, r4
 800d514:	4576      	cmp	r6, lr
 800d516:	46f4      	mov	ip, lr
 800d518:	d815      	bhi.n	800d546 <rshift+0x7e>
 800d51a:	1a9a      	subs	r2, r3, r2
 800d51c:	0092      	lsls	r2, r2, #2
 800d51e:	3a04      	subs	r2, #4
 800d520:	3501      	adds	r5, #1
 800d522:	42ae      	cmp	r6, r5
 800d524:	bf38      	it	cc
 800d526:	2200      	movcc	r2, #0
 800d528:	18a3      	adds	r3, r4, r2
 800d52a:	50a7      	str	r7, [r4, r2]
 800d52c:	b107      	cbz	r7, 800d530 <rshift+0x68>
 800d52e:	3304      	adds	r3, #4
 800d530:	1b1a      	subs	r2, r3, r4
 800d532:	42a3      	cmp	r3, r4
 800d534:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d538:	bf08      	it	eq
 800d53a:	2300      	moveq	r3, #0
 800d53c:	6102      	str	r2, [r0, #16]
 800d53e:	bf08      	it	eq
 800d540:	6143      	streq	r3, [r0, #20]
 800d542:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d546:	f8dc c000 	ldr.w	ip, [ip]
 800d54a:	fa0c fc08 	lsl.w	ip, ip, r8
 800d54e:	ea4c 0707 	orr.w	r7, ip, r7
 800d552:	f849 7b04 	str.w	r7, [r9], #4
 800d556:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d55a:	40cf      	lsrs	r7, r1
 800d55c:	e7da      	b.n	800d514 <rshift+0x4c>
 800d55e:	f851 cb04 	ldr.w	ip, [r1], #4
 800d562:	f847 cf04 	str.w	ip, [r7, #4]!
 800d566:	e7c3      	b.n	800d4f0 <rshift+0x28>
 800d568:	4623      	mov	r3, r4
 800d56a:	e7e1      	b.n	800d530 <rshift+0x68>

0800d56c <__hexdig_fun>:
 800d56c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d570:	2b09      	cmp	r3, #9
 800d572:	d802      	bhi.n	800d57a <__hexdig_fun+0xe>
 800d574:	3820      	subs	r0, #32
 800d576:	b2c0      	uxtb	r0, r0
 800d578:	4770      	bx	lr
 800d57a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d57e:	2b05      	cmp	r3, #5
 800d580:	d801      	bhi.n	800d586 <__hexdig_fun+0x1a>
 800d582:	3847      	subs	r0, #71	; 0x47
 800d584:	e7f7      	b.n	800d576 <__hexdig_fun+0xa>
 800d586:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d58a:	2b05      	cmp	r3, #5
 800d58c:	d801      	bhi.n	800d592 <__hexdig_fun+0x26>
 800d58e:	3827      	subs	r0, #39	; 0x27
 800d590:	e7f1      	b.n	800d576 <__hexdig_fun+0xa>
 800d592:	2000      	movs	r0, #0
 800d594:	4770      	bx	lr
	...

0800d598 <__gethex>:
 800d598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d59c:	4617      	mov	r7, r2
 800d59e:	680a      	ldr	r2, [r1, #0]
 800d5a0:	b085      	sub	sp, #20
 800d5a2:	f102 0b02 	add.w	fp, r2, #2
 800d5a6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d5aa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d5ae:	4681      	mov	r9, r0
 800d5b0:	468a      	mov	sl, r1
 800d5b2:	9302      	str	r3, [sp, #8]
 800d5b4:	32fe      	adds	r2, #254	; 0xfe
 800d5b6:	eb02 030b 	add.w	r3, r2, fp
 800d5ba:	46d8      	mov	r8, fp
 800d5bc:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800d5c0:	9301      	str	r3, [sp, #4]
 800d5c2:	2830      	cmp	r0, #48	; 0x30
 800d5c4:	d0f7      	beq.n	800d5b6 <__gethex+0x1e>
 800d5c6:	f7ff ffd1 	bl	800d56c <__hexdig_fun>
 800d5ca:	4604      	mov	r4, r0
 800d5cc:	2800      	cmp	r0, #0
 800d5ce:	d138      	bne.n	800d642 <__gethex+0xaa>
 800d5d0:	49a7      	ldr	r1, [pc, #668]	; (800d870 <__gethex+0x2d8>)
 800d5d2:	2201      	movs	r2, #1
 800d5d4:	4640      	mov	r0, r8
 800d5d6:	f7ff fee9 	bl	800d3ac <strncmp>
 800d5da:	4606      	mov	r6, r0
 800d5dc:	2800      	cmp	r0, #0
 800d5de:	d169      	bne.n	800d6b4 <__gethex+0x11c>
 800d5e0:	f898 0001 	ldrb.w	r0, [r8, #1]
 800d5e4:	465d      	mov	r5, fp
 800d5e6:	f7ff ffc1 	bl	800d56c <__hexdig_fun>
 800d5ea:	2800      	cmp	r0, #0
 800d5ec:	d064      	beq.n	800d6b8 <__gethex+0x120>
 800d5ee:	465a      	mov	r2, fp
 800d5f0:	7810      	ldrb	r0, [r2, #0]
 800d5f2:	2830      	cmp	r0, #48	; 0x30
 800d5f4:	4690      	mov	r8, r2
 800d5f6:	f102 0201 	add.w	r2, r2, #1
 800d5fa:	d0f9      	beq.n	800d5f0 <__gethex+0x58>
 800d5fc:	f7ff ffb6 	bl	800d56c <__hexdig_fun>
 800d600:	2301      	movs	r3, #1
 800d602:	fab0 f480 	clz	r4, r0
 800d606:	0964      	lsrs	r4, r4, #5
 800d608:	465e      	mov	r6, fp
 800d60a:	9301      	str	r3, [sp, #4]
 800d60c:	4642      	mov	r2, r8
 800d60e:	4615      	mov	r5, r2
 800d610:	3201      	adds	r2, #1
 800d612:	7828      	ldrb	r0, [r5, #0]
 800d614:	f7ff ffaa 	bl	800d56c <__hexdig_fun>
 800d618:	2800      	cmp	r0, #0
 800d61a:	d1f8      	bne.n	800d60e <__gethex+0x76>
 800d61c:	4994      	ldr	r1, [pc, #592]	; (800d870 <__gethex+0x2d8>)
 800d61e:	2201      	movs	r2, #1
 800d620:	4628      	mov	r0, r5
 800d622:	f7ff fec3 	bl	800d3ac <strncmp>
 800d626:	b978      	cbnz	r0, 800d648 <__gethex+0xb0>
 800d628:	b946      	cbnz	r6, 800d63c <__gethex+0xa4>
 800d62a:	1c6e      	adds	r6, r5, #1
 800d62c:	4632      	mov	r2, r6
 800d62e:	4615      	mov	r5, r2
 800d630:	3201      	adds	r2, #1
 800d632:	7828      	ldrb	r0, [r5, #0]
 800d634:	f7ff ff9a 	bl	800d56c <__hexdig_fun>
 800d638:	2800      	cmp	r0, #0
 800d63a:	d1f8      	bne.n	800d62e <__gethex+0x96>
 800d63c:	1b73      	subs	r3, r6, r5
 800d63e:	009e      	lsls	r6, r3, #2
 800d640:	e004      	b.n	800d64c <__gethex+0xb4>
 800d642:	2400      	movs	r4, #0
 800d644:	4626      	mov	r6, r4
 800d646:	e7e1      	b.n	800d60c <__gethex+0x74>
 800d648:	2e00      	cmp	r6, #0
 800d64a:	d1f7      	bne.n	800d63c <__gethex+0xa4>
 800d64c:	782b      	ldrb	r3, [r5, #0]
 800d64e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d652:	2b50      	cmp	r3, #80	; 0x50
 800d654:	d13d      	bne.n	800d6d2 <__gethex+0x13a>
 800d656:	786b      	ldrb	r3, [r5, #1]
 800d658:	2b2b      	cmp	r3, #43	; 0x2b
 800d65a:	d02f      	beq.n	800d6bc <__gethex+0x124>
 800d65c:	2b2d      	cmp	r3, #45	; 0x2d
 800d65e:	d031      	beq.n	800d6c4 <__gethex+0x12c>
 800d660:	1c69      	adds	r1, r5, #1
 800d662:	f04f 0b00 	mov.w	fp, #0
 800d666:	7808      	ldrb	r0, [r1, #0]
 800d668:	f7ff ff80 	bl	800d56c <__hexdig_fun>
 800d66c:	1e42      	subs	r2, r0, #1
 800d66e:	b2d2      	uxtb	r2, r2
 800d670:	2a18      	cmp	r2, #24
 800d672:	d82e      	bhi.n	800d6d2 <__gethex+0x13a>
 800d674:	f1a0 0210 	sub.w	r2, r0, #16
 800d678:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d67c:	f7ff ff76 	bl	800d56c <__hexdig_fun>
 800d680:	f100 3cff 	add.w	ip, r0, #4294967295
 800d684:	fa5f fc8c 	uxtb.w	ip, ip
 800d688:	f1bc 0f18 	cmp.w	ip, #24
 800d68c:	d91d      	bls.n	800d6ca <__gethex+0x132>
 800d68e:	f1bb 0f00 	cmp.w	fp, #0
 800d692:	d000      	beq.n	800d696 <__gethex+0xfe>
 800d694:	4252      	negs	r2, r2
 800d696:	4416      	add	r6, r2
 800d698:	f8ca 1000 	str.w	r1, [sl]
 800d69c:	b1dc      	cbz	r4, 800d6d6 <__gethex+0x13e>
 800d69e:	9b01      	ldr	r3, [sp, #4]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	bf14      	ite	ne
 800d6a4:	f04f 0800 	movne.w	r8, #0
 800d6a8:	f04f 0806 	moveq.w	r8, #6
 800d6ac:	4640      	mov	r0, r8
 800d6ae:	b005      	add	sp, #20
 800d6b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6b4:	4645      	mov	r5, r8
 800d6b6:	4626      	mov	r6, r4
 800d6b8:	2401      	movs	r4, #1
 800d6ba:	e7c7      	b.n	800d64c <__gethex+0xb4>
 800d6bc:	f04f 0b00 	mov.w	fp, #0
 800d6c0:	1ca9      	adds	r1, r5, #2
 800d6c2:	e7d0      	b.n	800d666 <__gethex+0xce>
 800d6c4:	f04f 0b01 	mov.w	fp, #1
 800d6c8:	e7fa      	b.n	800d6c0 <__gethex+0x128>
 800d6ca:	230a      	movs	r3, #10
 800d6cc:	fb03 0002 	mla	r0, r3, r2, r0
 800d6d0:	e7d0      	b.n	800d674 <__gethex+0xdc>
 800d6d2:	4629      	mov	r1, r5
 800d6d4:	e7e0      	b.n	800d698 <__gethex+0x100>
 800d6d6:	eba5 0308 	sub.w	r3, r5, r8
 800d6da:	3b01      	subs	r3, #1
 800d6dc:	4621      	mov	r1, r4
 800d6de:	2b07      	cmp	r3, #7
 800d6e0:	dc0a      	bgt.n	800d6f8 <__gethex+0x160>
 800d6e2:	4648      	mov	r0, r9
 800d6e4:	f7fd fec2 	bl	800b46c <_Balloc>
 800d6e8:	4604      	mov	r4, r0
 800d6ea:	b940      	cbnz	r0, 800d6fe <__gethex+0x166>
 800d6ec:	4b61      	ldr	r3, [pc, #388]	; (800d874 <__gethex+0x2dc>)
 800d6ee:	4602      	mov	r2, r0
 800d6f0:	21e4      	movs	r1, #228	; 0xe4
 800d6f2:	4861      	ldr	r0, [pc, #388]	; (800d878 <__gethex+0x2e0>)
 800d6f4:	f7ff feb4 	bl	800d460 <__assert_func>
 800d6f8:	3101      	adds	r1, #1
 800d6fa:	105b      	asrs	r3, r3, #1
 800d6fc:	e7ef      	b.n	800d6de <__gethex+0x146>
 800d6fe:	f100 0a14 	add.w	sl, r0, #20
 800d702:	2300      	movs	r3, #0
 800d704:	495a      	ldr	r1, [pc, #360]	; (800d870 <__gethex+0x2d8>)
 800d706:	f8cd a004 	str.w	sl, [sp, #4]
 800d70a:	469b      	mov	fp, r3
 800d70c:	45a8      	cmp	r8, r5
 800d70e:	d342      	bcc.n	800d796 <__gethex+0x1fe>
 800d710:	9801      	ldr	r0, [sp, #4]
 800d712:	f840 bb04 	str.w	fp, [r0], #4
 800d716:	eba0 000a 	sub.w	r0, r0, sl
 800d71a:	1080      	asrs	r0, r0, #2
 800d71c:	6120      	str	r0, [r4, #16]
 800d71e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800d722:	4658      	mov	r0, fp
 800d724:	f7fd ff94 	bl	800b650 <__hi0bits>
 800d728:	683d      	ldr	r5, [r7, #0]
 800d72a:	eba8 0000 	sub.w	r0, r8, r0
 800d72e:	42a8      	cmp	r0, r5
 800d730:	dd59      	ble.n	800d7e6 <__gethex+0x24e>
 800d732:	eba0 0805 	sub.w	r8, r0, r5
 800d736:	4641      	mov	r1, r8
 800d738:	4620      	mov	r0, r4
 800d73a:	f7fe fb23 	bl	800bd84 <__any_on>
 800d73e:	4683      	mov	fp, r0
 800d740:	b1b8      	cbz	r0, 800d772 <__gethex+0x1da>
 800d742:	f108 33ff 	add.w	r3, r8, #4294967295
 800d746:	1159      	asrs	r1, r3, #5
 800d748:	f003 021f 	and.w	r2, r3, #31
 800d74c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d750:	f04f 0b01 	mov.w	fp, #1
 800d754:	fa0b f202 	lsl.w	r2, fp, r2
 800d758:	420a      	tst	r2, r1
 800d75a:	d00a      	beq.n	800d772 <__gethex+0x1da>
 800d75c:	455b      	cmp	r3, fp
 800d75e:	dd06      	ble.n	800d76e <__gethex+0x1d6>
 800d760:	f1a8 0102 	sub.w	r1, r8, #2
 800d764:	4620      	mov	r0, r4
 800d766:	f7fe fb0d 	bl	800bd84 <__any_on>
 800d76a:	2800      	cmp	r0, #0
 800d76c:	d138      	bne.n	800d7e0 <__gethex+0x248>
 800d76e:	f04f 0b02 	mov.w	fp, #2
 800d772:	4641      	mov	r1, r8
 800d774:	4620      	mov	r0, r4
 800d776:	f7ff fea7 	bl	800d4c8 <rshift>
 800d77a:	4446      	add	r6, r8
 800d77c:	68bb      	ldr	r3, [r7, #8]
 800d77e:	42b3      	cmp	r3, r6
 800d780:	da41      	bge.n	800d806 <__gethex+0x26e>
 800d782:	4621      	mov	r1, r4
 800d784:	4648      	mov	r0, r9
 800d786:	f7fd feb1 	bl	800b4ec <_Bfree>
 800d78a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d78c:	2300      	movs	r3, #0
 800d78e:	6013      	str	r3, [r2, #0]
 800d790:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800d794:	e78a      	b.n	800d6ac <__gethex+0x114>
 800d796:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800d79a:	2a2e      	cmp	r2, #46	; 0x2e
 800d79c:	d014      	beq.n	800d7c8 <__gethex+0x230>
 800d79e:	2b20      	cmp	r3, #32
 800d7a0:	d106      	bne.n	800d7b0 <__gethex+0x218>
 800d7a2:	9b01      	ldr	r3, [sp, #4]
 800d7a4:	f843 bb04 	str.w	fp, [r3], #4
 800d7a8:	f04f 0b00 	mov.w	fp, #0
 800d7ac:	9301      	str	r3, [sp, #4]
 800d7ae:	465b      	mov	r3, fp
 800d7b0:	7828      	ldrb	r0, [r5, #0]
 800d7b2:	9303      	str	r3, [sp, #12]
 800d7b4:	f7ff feda 	bl	800d56c <__hexdig_fun>
 800d7b8:	9b03      	ldr	r3, [sp, #12]
 800d7ba:	f000 000f 	and.w	r0, r0, #15
 800d7be:	4098      	lsls	r0, r3
 800d7c0:	ea4b 0b00 	orr.w	fp, fp, r0
 800d7c4:	3304      	adds	r3, #4
 800d7c6:	e7a1      	b.n	800d70c <__gethex+0x174>
 800d7c8:	45a8      	cmp	r8, r5
 800d7ca:	d8e8      	bhi.n	800d79e <__gethex+0x206>
 800d7cc:	2201      	movs	r2, #1
 800d7ce:	4628      	mov	r0, r5
 800d7d0:	9303      	str	r3, [sp, #12]
 800d7d2:	f7ff fdeb 	bl	800d3ac <strncmp>
 800d7d6:	4926      	ldr	r1, [pc, #152]	; (800d870 <__gethex+0x2d8>)
 800d7d8:	9b03      	ldr	r3, [sp, #12]
 800d7da:	2800      	cmp	r0, #0
 800d7dc:	d1df      	bne.n	800d79e <__gethex+0x206>
 800d7de:	e795      	b.n	800d70c <__gethex+0x174>
 800d7e0:	f04f 0b03 	mov.w	fp, #3
 800d7e4:	e7c5      	b.n	800d772 <__gethex+0x1da>
 800d7e6:	da0b      	bge.n	800d800 <__gethex+0x268>
 800d7e8:	eba5 0800 	sub.w	r8, r5, r0
 800d7ec:	4621      	mov	r1, r4
 800d7ee:	4642      	mov	r2, r8
 800d7f0:	4648      	mov	r0, r9
 800d7f2:	f7fe f895 	bl	800b920 <__lshift>
 800d7f6:	eba6 0608 	sub.w	r6, r6, r8
 800d7fa:	4604      	mov	r4, r0
 800d7fc:	f100 0a14 	add.w	sl, r0, #20
 800d800:	f04f 0b00 	mov.w	fp, #0
 800d804:	e7ba      	b.n	800d77c <__gethex+0x1e4>
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	42b3      	cmp	r3, r6
 800d80a:	dd73      	ble.n	800d8f4 <__gethex+0x35c>
 800d80c:	1b9e      	subs	r6, r3, r6
 800d80e:	42b5      	cmp	r5, r6
 800d810:	dc34      	bgt.n	800d87c <__gethex+0x2e4>
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	2b02      	cmp	r3, #2
 800d816:	d023      	beq.n	800d860 <__gethex+0x2c8>
 800d818:	2b03      	cmp	r3, #3
 800d81a:	d025      	beq.n	800d868 <__gethex+0x2d0>
 800d81c:	2b01      	cmp	r3, #1
 800d81e:	d115      	bne.n	800d84c <__gethex+0x2b4>
 800d820:	42b5      	cmp	r5, r6
 800d822:	d113      	bne.n	800d84c <__gethex+0x2b4>
 800d824:	2d01      	cmp	r5, #1
 800d826:	d10b      	bne.n	800d840 <__gethex+0x2a8>
 800d828:	9a02      	ldr	r2, [sp, #8]
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	6013      	str	r3, [r2, #0]
 800d82e:	2301      	movs	r3, #1
 800d830:	6123      	str	r3, [r4, #16]
 800d832:	f8ca 3000 	str.w	r3, [sl]
 800d836:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d838:	f04f 0862 	mov.w	r8, #98	; 0x62
 800d83c:	601c      	str	r4, [r3, #0]
 800d83e:	e735      	b.n	800d6ac <__gethex+0x114>
 800d840:	1e69      	subs	r1, r5, #1
 800d842:	4620      	mov	r0, r4
 800d844:	f7fe fa9e 	bl	800bd84 <__any_on>
 800d848:	2800      	cmp	r0, #0
 800d84a:	d1ed      	bne.n	800d828 <__gethex+0x290>
 800d84c:	4621      	mov	r1, r4
 800d84e:	4648      	mov	r0, r9
 800d850:	f7fd fe4c 	bl	800b4ec <_Bfree>
 800d854:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d856:	2300      	movs	r3, #0
 800d858:	6013      	str	r3, [r2, #0]
 800d85a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800d85e:	e725      	b.n	800d6ac <__gethex+0x114>
 800d860:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d862:	2b00      	cmp	r3, #0
 800d864:	d1f2      	bne.n	800d84c <__gethex+0x2b4>
 800d866:	e7df      	b.n	800d828 <__gethex+0x290>
 800d868:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d1dc      	bne.n	800d828 <__gethex+0x290>
 800d86e:	e7ed      	b.n	800d84c <__gethex+0x2b4>
 800d870:	0800df54 	.word	0x0800df54
 800d874:	0800dde9 	.word	0x0800dde9
 800d878:	0800e0fe 	.word	0x0800e0fe
 800d87c:	f106 38ff 	add.w	r8, r6, #4294967295
 800d880:	f1bb 0f00 	cmp.w	fp, #0
 800d884:	d133      	bne.n	800d8ee <__gethex+0x356>
 800d886:	f1b8 0f00 	cmp.w	r8, #0
 800d88a:	d004      	beq.n	800d896 <__gethex+0x2fe>
 800d88c:	4641      	mov	r1, r8
 800d88e:	4620      	mov	r0, r4
 800d890:	f7fe fa78 	bl	800bd84 <__any_on>
 800d894:	4683      	mov	fp, r0
 800d896:	ea4f 1268 	mov.w	r2, r8, asr #5
 800d89a:	2301      	movs	r3, #1
 800d89c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d8a0:	f008 081f 	and.w	r8, r8, #31
 800d8a4:	fa03 f308 	lsl.w	r3, r3, r8
 800d8a8:	4213      	tst	r3, r2
 800d8aa:	4631      	mov	r1, r6
 800d8ac:	4620      	mov	r0, r4
 800d8ae:	bf18      	it	ne
 800d8b0:	f04b 0b02 	orrne.w	fp, fp, #2
 800d8b4:	1bad      	subs	r5, r5, r6
 800d8b6:	f7ff fe07 	bl	800d4c8 <rshift>
 800d8ba:	687e      	ldr	r6, [r7, #4]
 800d8bc:	f04f 0802 	mov.w	r8, #2
 800d8c0:	f1bb 0f00 	cmp.w	fp, #0
 800d8c4:	d04a      	beq.n	800d95c <__gethex+0x3c4>
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	2b02      	cmp	r3, #2
 800d8ca:	d016      	beq.n	800d8fa <__gethex+0x362>
 800d8cc:	2b03      	cmp	r3, #3
 800d8ce:	d018      	beq.n	800d902 <__gethex+0x36a>
 800d8d0:	2b01      	cmp	r3, #1
 800d8d2:	d109      	bne.n	800d8e8 <__gethex+0x350>
 800d8d4:	f01b 0f02 	tst.w	fp, #2
 800d8d8:	d006      	beq.n	800d8e8 <__gethex+0x350>
 800d8da:	f8da 3000 	ldr.w	r3, [sl]
 800d8de:	ea4b 0b03 	orr.w	fp, fp, r3
 800d8e2:	f01b 0f01 	tst.w	fp, #1
 800d8e6:	d10f      	bne.n	800d908 <__gethex+0x370>
 800d8e8:	f048 0810 	orr.w	r8, r8, #16
 800d8ec:	e036      	b.n	800d95c <__gethex+0x3c4>
 800d8ee:	f04f 0b01 	mov.w	fp, #1
 800d8f2:	e7d0      	b.n	800d896 <__gethex+0x2fe>
 800d8f4:	f04f 0801 	mov.w	r8, #1
 800d8f8:	e7e2      	b.n	800d8c0 <__gethex+0x328>
 800d8fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d8fc:	f1c3 0301 	rsb	r3, r3, #1
 800d900:	930f      	str	r3, [sp, #60]	; 0x3c
 800d902:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d904:	2b00      	cmp	r3, #0
 800d906:	d0ef      	beq.n	800d8e8 <__gethex+0x350>
 800d908:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d90c:	f104 0214 	add.w	r2, r4, #20
 800d910:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d914:	9301      	str	r3, [sp, #4]
 800d916:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800d91a:	2300      	movs	r3, #0
 800d91c:	4694      	mov	ip, r2
 800d91e:	f852 1b04 	ldr.w	r1, [r2], #4
 800d922:	f1b1 3fff 	cmp.w	r1, #4294967295
 800d926:	d01e      	beq.n	800d966 <__gethex+0x3ce>
 800d928:	3101      	adds	r1, #1
 800d92a:	f8cc 1000 	str.w	r1, [ip]
 800d92e:	f1b8 0f02 	cmp.w	r8, #2
 800d932:	f104 0214 	add.w	r2, r4, #20
 800d936:	d13d      	bne.n	800d9b4 <__gethex+0x41c>
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	3b01      	subs	r3, #1
 800d93c:	42ab      	cmp	r3, r5
 800d93e:	d10b      	bne.n	800d958 <__gethex+0x3c0>
 800d940:	1169      	asrs	r1, r5, #5
 800d942:	2301      	movs	r3, #1
 800d944:	f005 051f 	and.w	r5, r5, #31
 800d948:	fa03 f505 	lsl.w	r5, r3, r5
 800d94c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d950:	421d      	tst	r5, r3
 800d952:	bf18      	it	ne
 800d954:	f04f 0801 	movne.w	r8, #1
 800d958:	f048 0820 	orr.w	r8, r8, #32
 800d95c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d95e:	601c      	str	r4, [r3, #0]
 800d960:	9b02      	ldr	r3, [sp, #8]
 800d962:	601e      	str	r6, [r3, #0]
 800d964:	e6a2      	b.n	800d6ac <__gethex+0x114>
 800d966:	4290      	cmp	r0, r2
 800d968:	f842 3c04 	str.w	r3, [r2, #-4]
 800d96c:	d8d6      	bhi.n	800d91c <__gethex+0x384>
 800d96e:	68a2      	ldr	r2, [r4, #8]
 800d970:	4593      	cmp	fp, r2
 800d972:	db17      	blt.n	800d9a4 <__gethex+0x40c>
 800d974:	6861      	ldr	r1, [r4, #4]
 800d976:	4648      	mov	r0, r9
 800d978:	3101      	adds	r1, #1
 800d97a:	f7fd fd77 	bl	800b46c <_Balloc>
 800d97e:	4682      	mov	sl, r0
 800d980:	b918      	cbnz	r0, 800d98a <__gethex+0x3f2>
 800d982:	4b1b      	ldr	r3, [pc, #108]	; (800d9f0 <__gethex+0x458>)
 800d984:	4602      	mov	r2, r0
 800d986:	2184      	movs	r1, #132	; 0x84
 800d988:	e6b3      	b.n	800d6f2 <__gethex+0x15a>
 800d98a:	6922      	ldr	r2, [r4, #16]
 800d98c:	3202      	adds	r2, #2
 800d98e:	f104 010c 	add.w	r1, r4, #12
 800d992:	0092      	lsls	r2, r2, #2
 800d994:	300c      	adds	r0, #12
 800d996:	f7ff fd4d 	bl	800d434 <memcpy>
 800d99a:	4621      	mov	r1, r4
 800d99c:	4648      	mov	r0, r9
 800d99e:	f7fd fda5 	bl	800b4ec <_Bfree>
 800d9a2:	4654      	mov	r4, sl
 800d9a4:	6922      	ldr	r2, [r4, #16]
 800d9a6:	1c51      	adds	r1, r2, #1
 800d9a8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d9ac:	6121      	str	r1, [r4, #16]
 800d9ae:	2101      	movs	r1, #1
 800d9b0:	6151      	str	r1, [r2, #20]
 800d9b2:	e7bc      	b.n	800d92e <__gethex+0x396>
 800d9b4:	6921      	ldr	r1, [r4, #16]
 800d9b6:	4559      	cmp	r1, fp
 800d9b8:	dd0b      	ble.n	800d9d2 <__gethex+0x43a>
 800d9ba:	2101      	movs	r1, #1
 800d9bc:	4620      	mov	r0, r4
 800d9be:	f7ff fd83 	bl	800d4c8 <rshift>
 800d9c2:	68bb      	ldr	r3, [r7, #8]
 800d9c4:	3601      	adds	r6, #1
 800d9c6:	42b3      	cmp	r3, r6
 800d9c8:	f6ff aedb 	blt.w	800d782 <__gethex+0x1ea>
 800d9cc:	f04f 0801 	mov.w	r8, #1
 800d9d0:	e7c2      	b.n	800d958 <__gethex+0x3c0>
 800d9d2:	f015 051f 	ands.w	r5, r5, #31
 800d9d6:	d0f9      	beq.n	800d9cc <__gethex+0x434>
 800d9d8:	9b01      	ldr	r3, [sp, #4]
 800d9da:	441a      	add	r2, r3
 800d9dc:	f1c5 0520 	rsb	r5, r5, #32
 800d9e0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800d9e4:	f7fd fe34 	bl	800b650 <__hi0bits>
 800d9e8:	42a8      	cmp	r0, r5
 800d9ea:	dbe6      	blt.n	800d9ba <__gethex+0x422>
 800d9ec:	e7ee      	b.n	800d9cc <__gethex+0x434>
 800d9ee:	bf00      	nop
 800d9f0:	0800dde9 	.word	0x0800dde9

0800d9f4 <L_shift>:
 800d9f4:	f1c2 0208 	rsb	r2, r2, #8
 800d9f8:	0092      	lsls	r2, r2, #2
 800d9fa:	b570      	push	{r4, r5, r6, lr}
 800d9fc:	f1c2 0620 	rsb	r6, r2, #32
 800da00:	6843      	ldr	r3, [r0, #4]
 800da02:	6804      	ldr	r4, [r0, #0]
 800da04:	fa03 f506 	lsl.w	r5, r3, r6
 800da08:	432c      	orrs	r4, r5
 800da0a:	40d3      	lsrs	r3, r2
 800da0c:	6004      	str	r4, [r0, #0]
 800da0e:	f840 3f04 	str.w	r3, [r0, #4]!
 800da12:	4288      	cmp	r0, r1
 800da14:	d3f4      	bcc.n	800da00 <L_shift+0xc>
 800da16:	bd70      	pop	{r4, r5, r6, pc}

0800da18 <__match>:
 800da18:	b530      	push	{r4, r5, lr}
 800da1a:	6803      	ldr	r3, [r0, #0]
 800da1c:	3301      	adds	r3, #1
 800da1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da22:	b914      	cbnz	r4, 800da2a <__match+0x12>
 800da24:	6003      	str	r3, [r0, #0]
 800da26:	2001      	movs	r0, #1
 800da28:	bd30      	pop	{r4, r5, pc}
 800da2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da2e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800da32:	2d19      	cmp	r5, #25
 800da34:	bf98      	it	ls
 800da36:	3220      	addls	r2, #32
 800da38:	42a2      	cmp	r2, r4
 800da3a:	d0f0      	beq.n	800da1e <__match+0x6>
 800da3c:	2000      	movs	r0, #0
 800da3e:	e7f3      	b.n	800da28 <__match+0x10>

0800da40 <__hexnan>:
 800da40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da44:	680b      	ldr	r3, [r1, #0]
 800da46:	6801      	ldr	r1, [r0, #0]
 800da48:	115e      	asrs	r6, r3, #5
 800da4a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800da4e:	f013 031f 	ands.w	r3, r3, #31
 800da52:	b087      	sub	sp, #28
 800da54:	bf18      	it	ne
 800da56:	3604      	addne	r6, #4
 800da58:	2500      	movs	r5, #0
 800da5a:	1f37      	subs	r7, r6, #4
 800da5c:	4682      	mov	sl, r0
 800da5e:	4690      	mov	r8, r2
 800da60:	9301      	str	r3, [sp, #4]
 800da62:	f846 5c04 	str.w	r5, [r6, #-4]
 800da66:	46b9      	mov	r9, r7
 800da68:	463c      	mov	r4, r7
 800da6a:	9502      	str	r5, [sp, #8]
 800da6c:	46ab      	mov	fp, r5
 800da6e:	784a      	ldrb	r2, [r1, #1]
 800da70:	1c4b      	adds	r3, r1, #1
 800da72:	9303      	str	r3, [sp, #12]
 800da74:	b342      	cbz	r2, 800dac8 <__hexnan+0x88>
 800da76:	4610      	mov	r0, r2
 800da78:	9105      	str	r1, [sp, #20]
 800da7a:	9204      	str	r2, [sp, #16]
 800da7c:	f7ff fd76 	bl	800d56c <__hexdig_fun>
 800da80:	2800      	cmp	r0, #0
 800da82:	d14f      	bne.n	800db24 <__hexnan+0xe4>
 800da84:	9a04      	ldr	r2, [sp, #16]
 800da86:	9905      	ldr	r1, [sp, #20]
 800da88:	2a20      	cmp	r2, #32
 800da8a:	d818      	bhi.n	800dabe <__hexnan+0x7e>
 800da8c:	9b02      	ldr	r3, [sp, #8]
 800da8e:	459b      	cmp	fp, r3
 800da90:	dd13      	ble.n	800daba <__hexnan+0x7a>
 800da92:	454c      	cmp	r4, r9
 800da94:	d206      	bcs.n	800daa4 <__hexnan+0x64>
 800da96:	2d07      	cmp	r5, #7
 800da98:	dc04      	bgt.n	800daa4 <__hexnan+0x64>
 800da9a:	462a      	mov	r2, r5
 800da9c:	4649      	mov	r1, r9
 800da9e:	4620      	mov	r0, r4
 800daa0:	f7ff ffa8 	bl	800d9f4 <L_shift>
 800daa4:	4544      	cmp	r4, r8
 800daa6:	d950      	bls.n	800db4a <__hexnan+0x10a>
 800daa8:	2300      	movs	r3, #0
 800daaa:	f1a4 0904 	sub.w	r9, r4, #4
 800daae:	f844 3c04 	str.w	r3, [r4, #-4]
 800dab2:	f8cd b008 	str.w	fp, [sp, #8]
 800dab6:	464c      	mov	r4, r9
 800dab8:	461d      	mov	r5, r3
 800daba:	9903      	ldr	r1, [sp, #12]
 800dabc:	e7d7      	b.n	800da6e <__hexnan+0x2e>
 800dabe:	2a29      	cmp	r2, #41	; 0x29
 800dac0:	d155      	bne.n	800db6e <__hexnan+0x12e>
 800dac2:	3102      	adds	r1, #2
 800dac4:	f8ca 1000 	str.w	r1, [sl]
 800dac8:	f1bb 0f00 	cmp.w	fp, #0
 800dacc:	d04f      	beq.n	800db6e <__hexnan+0x12e>
 800dace:	454c      	cmp	r4, r9
 800dad0:	d206      	bcs.n	800dae0 <__hexnan+0xa0>
 800dad2:	2d07      	cmp	r5, #7
 800dad4:	dc04      	bgt.n	800dae0 <__hexnan+0xa0>
 800dad6:	462a      	mov	r2, r5
 800dad8:	4649      	mov	r1, r9
 800dada:	4620      	mov	r0, r4
 800dadc:	f7ff ff8a 	bl	800d9f4 <L_shift>
 800dae0:	4544      	cmp	r4, r8
 800dae2:	d934      	bls.n	800db4e <__hexnan+0x10e>
 800dae4:	f1a8 0204 	sub.w	r2, r8, #4
 800dae8:	4623      	mov	r3, r4
 800daea:	f853 1b04 	ldr.w	r1, [r3], #4
 800daee:	f842 1f04 	str.w	r1, [r2, #4]!
 800daf2:	429f      	cmp	r7, r3
 800daf4:	d2f9      	bcs.n	800daea <__hexnan+0xaa>
 800daf6:	1b3b      	subs	r3, r7, r4
 800daf8:	f023 0303 	bic.w	r3, r3, #3
 800dafc:	3304      	adds	r3, #4
 800dafe:	3e03      	subs	r6, #3
 800db00:	3401      	adds	r4, #1
 800db02:	42a6      	cmp	r6, r4
 800db04:	bf38      	it	cc
 800db06:	2304      	movcc	r3, #4
 800db08:	4443      	add	r3, r8
 800db0a:	2200      	movs	r2, #0
 800db0c:	f843 2b04 	str.w	r2, [r3], #4
 800db10:	429f      	cmp	r7, r3
 800db12:	d2fb      	bcs.n	800db0c <__hexnan+0xcc>
 800db14:	683b      	ldr	r3, [r7, #0]
 800db16:	b91b      	cbnz	r3, 800db20 <__hexnan+0xe0>
 800db18:	4547      	cmp	r7, r8
 800db1a:	d126      	bne.n	800db6a <__hexnan+0x12a>
 800db1c:	2301      	movs	r3, #1
 800db1e:	603b      	str	r3, [r7, #0]
 800db20:	2005      	movs	r0, #5
 800db22:	e025      	b.n	800db70 <__hexnan+0x130>
 800db24:	3501      	adds	r5, #1
 800db26:	2d08      	cmp	r5, #8
 800db28:	f10b 0b01 	add.w	fp, fp, #1
 800db2c:	dd06      	ble.n	800db3c <__hexnan+0xfc>
 800db2e:	4544      	cmp	r4, r8
 800db30:	d9c3      	bls.n	800daba <__hexnan+0x7a>
 800db32:	2300      	movs	r3, #0
 800db34:	f844 3c04 	str.w	r3, [r4, #-4]
 800db38:	2501      	movs	r5, #1
 800db3a:	3c04      	subs	r4, #4
 800db3c:	6822      	ldr	r2, [r4, #0]
 800db3e:	f000 000f 	and.w	r0, r0, #15
 800db42:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800db46:	6020      	str	r0, [r4, #0]
 800db48:	e7b7      	b.n	800daba <__hexnan+0x7a>
 800db4a:	2508      	movs	r5, #8
 800db4c:	e7b5      	b.n	800daba <__hexnan+0x7a>
 800db4e:	9b01      	ldr	r3, [sp, #4]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d0df      	beq.n	800db14 <__hexnan+0xd4>
 800db54:	f1c3 0320 	rsb	r3, r3, #32
 800db58:	f04f 32ff 	mov.w	r2, #4294967295
 800db5c:	40da      	lsrs	r2, r3
 800db5e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800db62:	4013      	ands	r3, r2
 800db64:	f846 3c04 	str.w	r3, [r6, #-4]
 800db68:	e7d4      	b.n	800db14 <__hexnan+0xd4>
 800db6a:	3f04      	subs	r7, #4
 800db6c:	e7d2      	b.n	800db14 <__hexnan+0xd4>
 800db6e:	2004      	movs	r0, #4
 800db70:	b007      	add	sp, #28
 800db72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800db76 <__ascii_mbtowc>:
 800db76:	b082      	sub	sp, #8
 800db78:	b901      	cbnz	r1, 800db7c <__ascii_mbtowc+0x6>
 800db7a:	a901      	add	r1, sp, #4
 800db7c:	b142      	cbz	r2, 800db90 <__ascii_mbtowc+0x1a>
 800db7e:	b14b      	cbz	r3, 800db94 <__ascii_mbtowc+0x1e>
 800db80:	7813      	ldrb	r3, [r2, #0]
 800db82:	600b      	str	r3, [r1, #0]
 800db84:	7812      	ldrb	r2, [r2, #0]
 800db86:	1e10      	subs	r0, r2, #0
 800db88:	bf18      	it	ne
 800db8a:	2001      	movne	r0, #1
 800db8c:	b002      	add	sp, #8
 800db8e:	4770      	bx	lr
 800db90:	4610      	mov	r0, r2
 800db92:	e7fb      	b.n	800db8c <__ascii_mbtowc+0x16>
 800db94:	f06f 0001 	mvn.w	r0, #1
 800db98:	e7f8      	b.n	800db8c <__ascii_mbtowc+0x16>

0800db9a <_realloc_r>:
 800db9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db9e:	4680      	mov	r8, r0
 800dba0:	4614      	mov	r4, r2
 800dba2:	460e      	mov	r6, r1
 800dba4:	b921      	cbnz	r1, 800dbb0 <_realloc_r+0x16>
 800dba6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dbaa:	4611      	mov	r1, r2
 800dbac:	f7fd bbd2 	b.w	800b354 <_malloc_r>
 800dbb0:	b92a      	cbnz	r2, 800dbbe <_realloc_r+0x24>
 800dbb2:	f7fd fb5b 	bl	800b26c <_free_r>
 800dbb6:	4625      	mov	r5, r4
 800dbb8:	4628      	mov	r0, r5
 800dbba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbbe:	f000 f842 	bl	800dc46 <_malloc_usable_size_r>
 800dbc2:	4284      	cmp	r4, r0
 800dbc4:	4607      	mov	r7, r0
 800dbc6:	d802      	bhi.n	800dbce <_realloc_r+0x34>
 800dbc8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dbcc:	d812      	bhi.n	800dbf4 <_realloc_r+0x5a>
 800dbce:	4621      	mov	r1, r4
 800dbd0:	4640      	mov	r0, r8
 800dbd2:	f7fd fbbf 	bl	800b354 <_malloc_r>
 800dbd6:	4605      	mov	r5, r0
 800dbd8:	2800      	cmp	r0, #0
 800dbda:	d0ed      	beq.n	800dbb8 <_realloc_r+0x1e>
 800dbdc:	42bc      	cmp	r4, r7
 800dbde:	4622      	mov	r2, r4
 800dbe0:	4631      	mov	r1, r6
 800dbe2:	bf28      	it	cs
 800dbe4:	463a      	movcs	r2, r7
 800dbe6:	f7ff fc25 	bl	800d434 <memcpy>
 800dbea:	4631      	mov	r1, r6
 800dbec:	4640      	mov	r0, r8
 800dbee:	f7fd fb3d 	bl	800b26c <_free_r>
 800dbf2:	e7e1      	b.n	800dbb8 <_realloc_r+0x1e>
 800dbf4:	4635      	mov	r5, r6
 800dbf6:	e7df      	b.n	800dbb8 <_realloc_r+0x1e>

0800dbf8 <__ascii_wctomb>:
 800dbf8:	b149      	cbz	r1, 800dc0e <__ascii_wctomb+0x16>
 800dbfa:	2aff      	cmp	r2, #255	; 0xff
 800dbfc:	bf85      	ittet	hi
 800dbfe:	238a      	movhi	r3, #138	; 0x8a
 800dc00:	6003      	strhi	r3, [r0, #0]
 800dc02:	700a      	strbls	r2, [r1, #0]
 800dc04:	f04f 30ff 	movhi.w	r0, #4294967295
 800dc08:	bf98      	it	ls
 800dc0a:	2001      	movls	r0, #1
 800dc0c:	4770      	bx	lr
 800dc0e:	4608      	mov	r0, r1
 800dc10:	4770      	bx	lr
	...

0800dc14 <fiprintf>:
 800dc14:	b40e      	push	{r1, r2, r3}
 800dc16:	b503      	push	{r0, r1, lr}
 800dc18:	4601      	mov	r1, r0
 800dc1a:	ab03      	add	r3, sp, #12
 800dc1c:	4805      	ldr	r0, [pc, #20]	; (800dc34 <fiprintf+0x20>)
 800dc1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc22:	6800      	ldr	r0, [r0, #0]
 800dc24:	9301      	str	r3, [sp, #4]
 800dc26:	f7ff f8e7 	bl	800cdf8 <_vfiprintf_r>
 800dc2a:	b002      	add	sp, #8
 800dc2c:	f85d eb04 	ldr.w	lr, [sp], #4
 800dc30:	b003      	add	sp, #12
 800dc32:	4770      	bx	lr
 800dc34:	20000074 	.word	0x20000074

0800dc38 <abort>:
 800dc38:	b508      	push	{r3, lr}
 800dc3a:	2006      	movs	r0, #6
 800dc3c:	f000 f834 	bl	800dca8 <raise>
 800dc40:	2001      	movs	r0, #1
 800dc42:	f7f5 fed5 	bl	80039f0 <_exit>

0800dc46 <_malloc_usable_size_r>:
 800dc46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc4a:	1f18      	subs	r0, r3, #4
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	bfbc      	itt	lt
 800dc50:	580b      	ldrlt	r3, [r1, r0]
 800dc52:	18c0      	addlt	r0, r0, r3
 800dc54:	4770      	bx	lr

0800dc56 <_raise_r>:
 800dc56:	291f      	cmp	r1, #31
 800dc58:	b538      	push	{r3, r4, r5, lr}
 800dc5a:	4604      	mov	r4, r0
 800dc5c:	460d      	mov	r5, r1
 800dc5e:	d904      	bls.n	800dc6a <_raise_r+0x14>
 800dc60:	2316      	movs	r3, #22
 800dc62:	6003      	str	r3, [r0, #0]
 800dc64:	f04f 30ff 	mov.w	r0, #4294967295
 800dc68:	bd38      	pop	{r3, r4, r5, pc}
 800dc6a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800dc6c:	b112      	cbz	r2, 800dc74 <_raise_r+0x1e>
 800dc6e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dc72:	b94b      	cbnz	r3, 800dc88 <_raise_r+0x32>
 800dc74:	4620      	mov	r0, r4
 800dc76:	f000 f831 	bl	800dcdc <_getpid_r>
 800dc7a:	462a      	mov	r2, r5
 800dc7c:	4601      	mov	r1, r0
 800dc7e:	4620      	mov	r0, r4
 800dc80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc84:	f000 b818 	b.w	800dcb8 <_kill_r>
 800dc88:	2b01      	cmp	r3, #1
 800dc8a:	d00a      	beq.n	800dca2 <_raise_r+0x4c>
 800dc8c:	1c59      	adds	r1, r3, #1
 800dc8e:	d103      	bne.n	800dc98 <_raise_r+0x42>
 800dc90:	2316      	movs	r3, #22
 800dc92:	6003      	str	r3, [r0, #0]
 800dc94:	2001      	movs	r0, #1
 800dc96:	e7e7      	b.n	800dc68 <_raise_r+0x12>
 800dc98:	2400      	movs	r4, #0
 800dc9a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dc9e:	4628      	mov	r0, r5
 800dca0:	4798      	blx	r3
 800dca2:	2000      	movs	r0, #0
 800dca4:	e7e0      	b.n	800dc68 <_raise_r+0x12>
	...

0800dca8 <raise>:
 800dca8:	4b02      	ldr	r3, [pc, #8]	; (800dcb4 <raise+0xc>)
 800dcaa:	4601      	mov	r1, r0
 800dcac:	6818      	ldr	r0, [r3, #0]
 800dcae:	f7ff bfd2 	b.w	800dc56 <_raise_r>
 800dcb2:	bf00      	nop
 800dcb4:	20000074 	.word	0x20000074

0800dcb8 <_kill_r>:
 800dcb8:	b538      	push	{r3, r4, r5, lr}
 800dcba:	4d07      	ldr	r5, [pc, #28]	; (800dcd8 <_kill_r+0x20>)
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	4604      	mov	r4, r0
 800dcc0:	4608      	mov	r0, r1
 800dcc2:	4611      	mov	r1, r2
 800dcc4:	602b      	str	r3, [r5, #0]
 800dcc6:	f7f5 fe83 	bl	80039d0 <_kill>
 800dcca:	1c43      	adds	r3, r0, #1
 800dccc:	d102      	bne.n	800dcd4 <_kill_r+0x1c>
 800dcce:	682b      	ldr	r3, [r5, #0]
 800dcd0:	b103      	cbz	r3, 800dcd4 <_kill_r+0x1c>
 800dcd2:	6023      	str	r3, [r4, #0]
 800dcd4:	bd38      	pop	{r3, r4, r5, pc}
 800dcd6:	bf00      	nop
 800dcd8:	200010a0 	.word	0x200010a0

0800dcdc <_getpid_r>:
 800dcdc:	f7f5 be70 	b.w	80039c0 <_getpid>

0800dce0 <_init>:
 800dce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dce2:	bf00      	nop
 800dce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dce6:	bc08      	pop	{r3}
 800dce8:	469e      	mov	lr, r3
 800dcea:	4770      	bx	lr

0800dcec <_fini>:
 800dcec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcee:	bf00      	nop
 800dcf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcf2:	bc08      	pop	{r3}
 800dcf4:	469e      	mov	lr, r3
 800dcf6:	4770      	bx	lr
